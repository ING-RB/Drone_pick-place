{
    "lib2to3.pytree.Base.__eq__": [
        "",
        "object"
    ],
    "lib2to3.pytree.Base._eq": [
        "",
        "Base"
    ],
    "lib2to3.pytree.Base.clone": [
        ""
    ],
    "lib2to3.pytree.Base.post_order": [
        ""
    ],
    "lib2to3.pytree.Base.pre_order": [
        ""
    ],
    "lib2to3.pytree.Base.replace": [
        "",
        "_NL | list[_NL]"
    ],
    "lib2to3.pytree.Base.get_lineno": [
        ""
    ],
    "lib2to3.pytree.Base.changed": [
        ""
    ],
    "lib2to3.pytree.Base.remove": [
        ""
    ],
    "lib2to3.pytree.Base.next_sibling": [
        ""
    ],
    "lib2to3.pytree.Base.prev_sibling": [
        ""
    ],
    "lib2to3.pytree.Base.leaves": [
        ""
    ],
    "lib2to3.pytree.Base.depth": [
        ""
    ],
    "lib2to3.pytree.Base.get_suffix": [
        ""
    ],
    "lib2to3.pytree.Node.__init__": [
        "",
        "int",
        "Iterable[_NL]",
        "Unused",
        "str | None",
        "MutableSequence[BaseFix] | None"
    ],
    "lib2to3.pytree.Node._eq": [
        "",
        "Base"
    ],
    "lib2to3.pytree.Node.clone": [
        ""
    ],
    "lib2to3.pytree.Node.post_order": [
        ""
    ],
    "lib2to3.pytree.Node.pre_order": [
        ""
    ],
    "lib2to3.pytree.Node.set_child": [
        "",
        "int",
        "_NL"
    ],
    "lib2to3.pytree.Node.insert_child": [
        "",
        "int",
        "_NL"
    ],
    "lib2to3.pytree.Node.append_child": [
        "",
        "_NL"
    ],
    "lib2to3.pytree.Node.__unicode__": [
        ""
    ],
    "lib2to3.pytree.Leaf.__init__": [
        "",
        "int",
        "str",
        "_Context | None",
        "str | None",
        "MutableSequence[BaseFix]"
    ],
    "lib2to3.pytree.Leaf._eq": [
        "",
        "Base"
    ],
    "lib2to3.pytree.Leaf.clone": [
        ""
    ],
    "lib2to3.pytree.Leaf.post_order": [
        ""
    ],
    "lib2to3.pytree.Leaf.pre_order": [
        ""
    ],
    "lib2to3.pytree.Leaf.__unicode__": [
        ""
    ],
    "lib2to3.pytree.BasePattern.optimize": [
        ""
    ],
    "lib2to3.pytree.BasePattern.match": [
        "",
        "_NL",
        "_Results | None"
    ],
    "lib2to3.pytree.BasePattern.match_seq": [
        "",
        "SupportsLenAndGetItem[_NL]",
        "_Results | None"
    ],
    "lib2to3.pytree.BasePattern.generate_matches": [
        "",
        "SupportsGetItem[int, _NL]"
    ],
    "lib2to3.pytree.LeafPattern.__init__": [
        "",
        "int | None",
        "str | None",
        "str | None"
    ],
    "lib2to3.pytree.NodePattern.__init__": [
        "",
        "int | None",
        "str | None",
        "str | None"
    ],
    "lib2to3.pytree.WildcardPattern.__init__": [
        "",
        "str | None",
        "int",
        "int",
        "str | None"
    ],
    "lib2to3.pytree.NegatedPattern.__init__": [
        "",
        "str | None"
    ],
    "lib2to3.pytree.type_repr": [
        "int"
    ],
    "lib2to3.pytree.convert": [
        "Grammar",
        "_RawNode"
    ],
    "lib2to3.pytree.generate_matches": [
        "SupportsGetItem[int | slice, BasePattern] | None",
        "SupportsGetItem[int | slice, _NL]"
    ],
    "lib2to3.pygram.Symbols.__init__": [
        "",
        "Grammar"
    ],
    "lib2to3.btm_matcher.BMNode.__init__": [
        ""
    ],
    "lib2to3.btm_matcher.BottomMatcher.__init__": [
        ""
    ],
    "lib2to3.btm_matcher.BottomMatcher.add_fixer": [
        "",
        "BaseFix"
    ],
    "lib2to3.btm_matcher.BottomMatcher.add": [
        "",
        "SupportsGetItem[int | slice, Incomplete] | None",
        "BMNode"
    ],
    "lib2to3.btm_matcher.BottomMatcher.run": [
        "",
        "Iterable[Leaf]"
    ],
    "lib2to3.btm_matcher.BottomMatcher.print_ac": [
        ""
    ],
    "lib2to3.btm_matcher.type_repr": [
        "int"
    ],
    "lib2to3.refactor.RefactoringTool.__init__": [
        "",
        "Iterable[str]",
        "Mapping[str, object] | None",
        "Container[str] | None"
    ],
    "lib2to3.refactor.RefactoringTool.get_fixers": [
        ""
    ],
    "lib2to3.refactor.RefactoringTool.log_error": [
        "",
        "str"
    ],
    "lib2to3.refactor.RefactoringTool.log_message": [
        "",
        "object"
    ],
    "lib2to3.refactor.RefactoringTool.log_debug": [
        "",
        "object"
    ],
    "lib2to3.refactor.RefactoringTool.print_output": [
        "",
        "str",
        "str",
        "StrPath",
        "bool"
    ],
    "lib2to3.refactor.RefactoringTool.refactor": [
        "",
        "Iterable[str]",
        "bool",
        "bool"
    ],
    "lib2to3.refactor.RefactoringTool.refactor_dir": [
        "",
        "str",
        "bool",
        "bool"
    ],
    "lib2to3.refactor.RefactoringTool._read_python_source": [
        "",
        "FileDescriptorOrPath"
    ],
    "lib2to3.refactor.RefactoringTool.refactor_file": [
        "",
        "StrPath",
        "bool",
        "bool"
    ],
    "lib2to3.refactor.RefactoringTool.refactor_string": [
        "",
        "str",
        "str"
    ],
    "lib2to3.refactor.RefactoringTool.refactor_stdin": [
        "",
        "bool"
    ],
    "lib2to3.refactor.RefactoringTool.refactor_tree": [
        "",
        "Node",
        "str"
    ],
    "lib2to3.refactor.RefactoringTool.traverse_by": [
        "",
        "SupportsGetItem[int, Iterable[BaseFix]] | None",
        "Iterable[Node]"
    ],
    "lib2to3.refactor.RefactoringTool.processed_file": [
        "",
        "str",
        "StrPath",
        "str | None",
        "bool",
        "str | None"
    ],
    "lib2to3.refactor.RefactoringTool.write_file": [
        "",
        "str",
        "FileDescriptorOrPath",
        "str",
        "str | None"
    ],
    "lib2to3.refactor.RefactoringTool.refactor_docstring": [
        "",
        "str",
        "StrPath"
    ],
    "lib2to3.refactor.RefactoringTool.refactor_doctest": [
        "",
        "list[str]",
        "int",
        "int",
        "StrPath"
    ],
    "lib2to3.refactor.RefactoringTool.summarize": [
        ""
    ],
    "lib2to3.refactor.RefactoringTool.parse_block": [
        "",
        "Iterable[str]",
        "int",
        "int"
    ],
    "lib2to3.refactor.RefactoringTool.wrap_toks": [
        "",
        "Iterable[str]",
        "int",
        "int"
    ],
    "lib2to3.refactor.RefactoringTool.gen_lines": [
        "",
        "Iterable[str]",
        "int"
    ],
    "lib2to3.refactor.MultiprocessRefactoringTool.refactor": [
        "",
        "Iterable[str]",
        "bool",
        "bool",
        "int"
    ],
    "lib2to3.refactor.get_all_fix_names": [
        "str",
        "bool"
    ],
    "lib2to3.refactor.get_fixers_from_package": [
        "str"
    ],
    "lib2to3.main.StdoutRefactoringTool.__init__": [
        "",
        "Iterable[str]",
        "Mapping[str, object] | None",
        "Container[str] | None",
        "bool",
        "bool",
        "str",
        "str",
        "str"
    ],
    "lib2to3.main.StdoutRefactoringTool.log_error": [
        "",
        "str"
    ],
    "lib2to3.main.StdoutRefactoringTool.write_file": [
        "",
        "str",
        "FileDescriptorOrPath",
        "str",
        "str | None"
    ],
    "lib2to3.main.StdoutRefactoringTool.print_output": [
        "",
        "str",
        "str",
        "str",
        "bool"
    ],
    "lib2to3.main.diff_texts": [
        "str",
        "str",
        "str"
    ],
    "lib2to3.main.warn": [
        "object"
    ],
    "lib2to3.main.main": [
        "str",
        "Sequence[AnyStr] | None"
    ],
    "lib2to3.pgen2.tokenize.Untokenizer.add_whitespace": [
        "",
        "_Coord"
    ],
    "lib2to3.pgen2.tokenize.Untokenizer.untokenize": [
        "",
        "Iterable[_TokenInfo]"
    ],
    "lib2to3.pgen2.tokenize.Untokenizer.compat": [
        "",
        "tuple[int, str]",
        "Iterable[_TokenInfo]"
    ],
    "lib2to3.pgen2.tokenize.tokenize": [
        "Callable[[], str]",
        "_TokenEater"
    ],
    "lib2to3.pgen2.tokenize.untokenize": [
        "Iterable[_TokenInfo]"
    ],
    "lib2to3.pgen2.tokenize.generate_tokens": [
        "Callable[[], str]"
    ],
    "lib2to3.pgen2.driver.Driver.__init__": [
        "",
        "Grammar",
        "_Convert | None",
        "Logger | None"
    ],
    "lib2to3.pgen2.driver.Driver.parse_tokens": [
        "",
        "Iterable[tuple[int, str, tuple[int, int], tuple[int, int], str]]",
        "bool"
    ],
    "lib2to3.pgen2.driver.Driver.parse_stream_raw": [
        "",
        "IO[str]",
        "bool"
    ],
    "lib2to3.pgen2.driver.Driver.parse_stream": [
        "",
        "IO[str]",
        "bool"
    ],
    "lib2to3.pgen2.driver.Driver.parse_file": [
        "",
        "StrPath",
        "str | None",
        "bool"
    ],
    "lib2to3.pgen2.driver.Driver.parse_string": [
        "",
        "str",
        "bool"
    ],
    "lib2to3.pgen2.driver.load_grammar": [
        "str",
        "str | None",
        "bool",
        "bool",
        "Logger | None"
    ],
    "lib2to3.pgen2.token.ISTERMINAL": [
        "int"
    ],
    "lib2to3.pgen2.token.ISNONTERMINAL": [
        "int"
    ],
    "lib2to3.pgen2.token.ISEOF": [
        "int"
    ],
    "lib2to3.pgen2.pgen.ParserGenerator.__init__": [
        "",
        "StrPath",
        "IO[str] | None"
    ],
    "lib2to3.pgen2.pgen.ParserGenerator.make_grammar": [
        ""
    ],
    "lib2to3.pgen2.pgen.ParserGenerator.make_first": [
        "",
        "PgenGrammar",
        "str"
    ],
    "lib2to3.pgen2.pgen.ParserGenerator.make_label": [
        "",
        "PgenGrammar",
        "str"
    ],
    "lib2to3.pgen2.pgen.ParserGenerator.addfirstsets": [
        ""
    ],
    "lib2to3.pgen2.pgen.ParserGenerator.calcfirst": [
        "",
        "str"
    ],
    "lib2to3.pgen2.pgen.ParserGenerator.parse": [
        ""
    ],
    "lib2to3.pgen2.pgen.ParserGenerator.make_dfa": [
        "",
        "NFAState",
        "NFAState"
    ],
    "lib2to3.pgen2.pgen.ParserGenerator.dump_nfa": [
        "",
        "str",
        "NFAState",
        "NFAState"
    ],
    "lib2to3.pgen2.pgen.ParserGenerator.dump_dfa": [
        "",
        "str",
        "Iterable[DFAState]"
    ],
    "lib2to3.pgen2.pgen.ParserGenerator.simplify_dfa": [
        "",
        "list[DFAState]"
    ],
    "lib2to3.pgen2.pgen.ParserGenerator.parse_rhs": [
        ""
    ],
    "lib2to3.pgen2.pgen.ParserGenerator.parse_alt": [
        ""
    ],
    "lib2to3.pgen2.pgen.ParserGenerator.parse_item": [
        ""
    ],
    "lib2to3.pgen2.pgen.ParserGenerator.parse_atom": [
        ""
    ],
    "lib2to3.pgen2.pgen.ParserGenerator.expect": [
        "",
        "int",
        "str | None"
    ],
    "lib2to3.pgen2.pgen.ParserGenerator.gettoken": [
        ""
    ],
    "lib2to3.pgen2.pgen.ParserGenerator.raise_error": [
        "",
        "object"
    ],
    "lib2to3.pgen2.pgen.NFAState.addarc": [
        "",
        "NFAState",
        "str | None"
    ],
    "lib2to3.pgen2.pgen.DFAState.__init__": [
        "",
        "dict[NFAState, Incomplete]",
        "NFAState"
    ],
    "lib2to3.pgen2.pgen.DFAState.addarc": [
        "",
        "DFAState",
        "str"
    ],
    "lib2to3.pgen2.pgen.DFAState.unifystate": [
        "",
        "DFAState",
        "DFAState"
    ],
    "lib2to3.pgen2.pgen.DFAState.__eq__": [
        "",
        "DFAState"
    ],
    "lib2to3.pgen2.pgen.generate_grammar": [
        "StrPath"
    ],
    "lib2to3.pgen2.parse.ParseError.__init__": [
        "",
        "str",
        "int",
        "str | None",
        "_Context"
    ],
    "lib2to3.pgen2.parse.Parser.__init__": [
        "",
        "Grammar",
        "_Convert | None"
    ],
    "lib2to3.pgen2.parse.Parser.setup": [
        "",
        "int | None"
    ],
    "lib2to3.pgen2.parse.Parser.addtoken": [
        "",
        "int",
        "str | None",
        "_Context"
    ],
    "lib2to3.pgen2.parse.Parser.classify": [
        "",
        "int",
        "str | None",
        "_Context"
    ],
    "lib2to3.pgen2.parse.Parser.shift": [
        "",
        "int",
        "str | None",
        "int",
        "_Context"
    ],
    "lib2to3.pgen2.parse.Parser.push": [
        "",
        "int",
        "_DFAS",
        "int",
        "_Context"
    ],
    "lib2to3.pgen2.parse.Parser.pop": [
        ""
    ],
    "lib2to3.pgen2.literals.escape": [
        "Match[str]"
    ],
    "lib2to3.pgen2.literals.evalString": [
        "str"
    ],
    "lib2to3.pgen2.literals.test": [],
    "lib2to3.pgen2.grammar.Grammar.dump": [
        "",
        "StrPath"
    ],
    "lib2to3.pgen2.grammar.Grammar.load": [
        "",
        "StrPath"
    ],
    "lib2to3.pgen2.grammar.Grammar.copy": [
        ""
    ],
    "lib2to3.pgen2.grammar.Grammar.report": [
        ""
    ],
    "lib2to3.fixes.fix_unicode.FixUnicode.start_tree": [
        "",
        "Node",
        "StrPath"
    ],
    "lib2to3.fixes.fix_unicode.FixUnicode.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_filter.FixFilter.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_dict.FixDict.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_dict.FixDict.in_special_context": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_tuple_params.FixTupleParams.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_tuple_params.FixTupleParams.transform_lambda": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_tuple_params.is_docstring": [
        ""
    ],
    "lib2to3.fixes.fix_tuple_params.simplify_args": [
        ""
    ],
    "lib2to3.fixes.fix_tuple_params.find_params": [
        ""
    ],
    "lib2to3.fixes.fix_tuple_params.map_to_index": [
        "",
        "",
        "Incomplete | None"
    ],
    "lib2to3.fixes.fix_tuple_params.tuple_name": [
        ""
    ],
    "lib2to3.fixes.fix_ne.FixNe.match": [
        "",
        ""
    ],
    "lib2to3.fixes.fix_ne.FixNe.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_reload.FixReload.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_exec.FixExec.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_set_literal.FixSetLiteral.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_metaclass.FixMetaclass.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_metaclass.has_metaclass": [
        ""
    ],
    "lib2to3.fixes.fix_metaclass.fixup_parse_tree": [
        ""
    ],
    "lib2to3.fixes.fix_metaclass.fixup_simple_stmt": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_metaclass.remove_trailing_newline": [
        ""
    ],
    "lib2to3.fixes.fix_metaclass.find_metas": [
        ""
    ],
    "lib2to3.fixes.fix_metaclass.fixup_indent": [
        ""
    ],
    "lib2to3.fixes.fix_types.FixTypes.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_long.FixLong.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_ws_comma.FixWsComma.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_reduce.FixReduce.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_future.FixFuture.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_raw_input.FixRawInput.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_funcattrs.FixFuncattrs.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_operator.FixOperator.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_operator.invocation": [
        ""
    ],
    "lib2to3.fixes.fix_basestring.FixBasestring.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_repr.FixRepr.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_input.FixInput.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_next.FixNext.start_tree": [
        "",
        "Node",
        "StrPath"
    ],
    "lib2to3.fixes.fix_next.FixNext.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_next.is_assign_target": [
        ""
    ],
    "lib2to3.fixes.fix_next.find_assign": [
        ""
    ],
    "lib2to3.fixes.fix_next.is_subtree": [
        "",
        ""
    ],
    "lib2to3.fixes.fix_xreadlines.FixXreadlines.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_except.FixExcept.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_except.find_excepts": [
        "Iterable[_N]"
    ],
    "lib2to3.fixes.fix_paren.FixParen.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_nonzero.FixNonzero.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_throw.FixThrow.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_has_key.FixHasKey.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_numliterals.FixNumliterals.match": [
        "",
        ""
    ],
    "lib2to3.fixes.fix_numliterals.FixNumliterals.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_methodattrs.FixMethodattrs.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_execfile.FixExecfile.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_urllib.FixUrllib.build_pattern": [
        ""
    ],
    "lib2to3.fixes.fix_urllib.FixUrllib.transform_import": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_urllib.FixUrllib.transform_member": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_urllib.FixUrllib.transform_dot": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_urllib.FixUrllib.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_urllib.build_pattern": [],
    "lib2to3.fixes.fix_getcwdu.FixGetcwdu.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_itertools.FixItertools.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_print.FixPrint.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_print.FixPrint.add_kwarg": [
        "",
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_itertools_imports.FixItertoolsImports.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_xrange.FixXrange.start_tree": [
        "",
        "Node",
        "StrPath"
    ],
    "lib2to3.fixes.fix_xrange.FixXrange.finish_tree": [
        "",
        "Node",
        "StrPath"
    ],
    "lib2to3.fixes.fix_xrange.FixXrange.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_xrange.FixXrange.transform_xrange": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_xrange.FixXrange.transform_range": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_xrange.FixXrange.in_special_context": [
        "",
        ""
    ],
    "lib2to3.fixes.fix_imports.FixImports.build_pattern": [
        ""
    ],
    "lib2to3.fixes.fix_imports.FixImports.compile_pattern": [
        ""
    ],
    "lib2to3.fixes.fix_imports.FixImports.match": [
        "",
        ""
    ],
    "lib2to3.fixes.fix_imports.FixImports.start_tree": [
        "",
        "Node",
        "StrPath"
    ],
    "lib2to3.fixes.fix_imports.FixImports.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_imports.alternates": [
        ""
    ],
    "lib2to3.fixes.fix_imports.build_pattern": [
        ""
    ],
    "lib2to3.fixes.fix_buffer.FixBuffer.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_renames.FixRenames.match": [
        "",
        ""
    ],
    "lib2to3.fixes.fix_renames.FixRenames.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_renames.alternates": [
        ""
    ],
    "lib2to3.fixes.fix_renames.build_pattern": [],
    "lib2to3.fixes.fix_zip.FixZip.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_import.FixImport.start_tree": [
        "",
        "Node",
        "StrPath"
    ],
    "lib2to3.fixes.fix_import.FixImport.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_import.FixImport.probably_a_local_import": [
        "",
        ""
    ],
    "lib2to3.fixes.fix_import.traverse_imports": [
        ""
    ],
    "lib2to3.fixes.fix_apply.FixApply.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_sys_exc.FixSysExc.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_intern.FixIntern.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_exitfunc.FixExitfunc.__init__": [
        ""
    ],
    "lib2to3.fixes.fix_exitfunc.FixExitfunc.start_tree": [
        "",
        "Node",
        "StrPath"
    ],
    "lib2to3.fixes.fix_exitfunc.FixExitfunc.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_map.FixMap.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_standarderror.FixStandarderror.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_isinstance.FixIsinstance.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_asserts.FixAsserts.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_raise.FixRaise.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_idioms.FixIdioms.match": [
        "",
        ""
    ],
    "lib2to3.fixes.fix_idioms.FixIdioms.transform": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_idioms.FixIdioms.transform_isinstance": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_idioms.FixIdioms.transform_while": [
        "",
        "",
        ""
    ],
    "lib2to3.fixes.fix_idioms.FixIdioms.transform_sort": [
        "",
        "",
        ""
    ],
    "lib2to3.fixer_base.BaseFix.__init__": [
        "",
        "MutableMapping[str, Incomplete]",
        "list[str]"
    ],
    "lib2to3.fixer_base.BaseFix.compile_pattern": [
        ""
    ],
    "lib2to3.fixer_base.BaseFix.set_filename": [
        "",
        "StrPath"
    ],
    "lib2to3.fixer_base.BaseFix.match": [
        "",
        "_N"
    ],
    "lib2to3.fixer_base.BaseFix.transform": [
        "",
        "Base",
        "dict[str, Base]"
    ],
    "lib2to3.fixer_base.BaseFix.new_name": [
        "",
        "str"
    ],
    "lib2to3.fixer_base.BaseFix.log_message": [
        "",
        "str"
    ],
    "lib2to3.fixer_base.BaseFix.cannot_convert": [
        "",
        "Base",
        "str | None"
    ],
    "lib2to3.fixer_base.BaseFix.warning": [
        "",
        "Base",
        "str"
    ],
    "lib2to3.fixer_base.BaseFix.start_tree": [
        "",
        "Node",
        "StrPath"
    ],
    "lib2to3.fixer_base.BaseFix.finish_tree": [
        "",
        "Node",
        "StrPath"
    ],
    "lib2to3.fixer_base.ConditionalFix.start_tree": [
        "",
        "Node",
        "StrPath"
    ],
    "lib2to3.fixer_base.ConditionalFix.should_skip": [
        "",
        "Base"
    ]
}