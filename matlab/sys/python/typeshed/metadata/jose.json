{
    "jose.utils.long_to_bytes": [
        "int",
        "int | None"
    ],
    "jose.utils.long_to_base64": [
        "int",
        "int | None"
    ],
    "jose.utils.int_arr_to_long": [
        "Iterable[Any]"
    ],
    "jose.utils.base64_to_long": [
        "str | bytes"
    ],
    "jose.utils.calculate_at_hash": [
        "str",
        "Callable[[bytes], _Hash]"
    ],
    "jose.utils.base64url_decode": [
        "bytes"
    ],
    "jose.utils.base64url_encode": [
        "bytes"
    ],
    "jose.utils.timedelta_total_seconds": [
        "timedelta"
    ],
    "jose.utils.ensure_binary": [
        "str | bytes"
    ],
    "jose.jws.sign": [
        "bytes | Mapping[str, Any]",
        "str | bytes | dict[str, Any] | Key",
        "Mapping[str, Any] | None",
        "str"
    ],
    "jose.jws.verify": [
        "str | bytes",
        "str | bytes | Mapping[str, Any] | Key",
        "str | Container[str] | None",
        "bool"
    ],
    "jose.jws.get_unverified_header": [
        "str | bytes"
    ],
    "jose.jws.get_unverified_headers": [
        "str | bytes"
    ],
    "jose.jws.get_unverified_claims": [
        "str | bytes"
    ],
    "jose.jwt.encode": [
        "MutableMapping[str, Any]",
        "str | bytes | dict[str, Any] | Key",
        "str",
        "Mapping[str, Any] | None",
        "str | None"
    ],
    "jose.jwt.decode": [
        "str | bytes",
        "str | bytes | Mapping[str, Any] | Key",
        "str | Container[str] | None",
        "Mapping[str, Any] | None",
        "str | None",
        "str | Iterable[str] | None",
        "str | None",
        "str | None"
    ],
    "jose.jwt.get_unverified_header": [
        "str | bytes"
    ],
    "jose.jwt.get_unverified_headers": [
        "str | bytes"
    ],
    "jose.jwt.get_unverified_claims": [
        "str | bytes"
    ],
    "jose.backends.rsa_backend.RSAKey.__init__": [
        "",
        "",
        ""
    ],
    "jose.backends.rsa_backend.RSAKey.sign": [
        "",
        "bytes"
    ],
    "jose.backends.rsa_backend.RSAKey.verify": [
        "",
        "bytes",
        "bytes"
    ],
    "jose.backends.rsa_backend.RSAKey.is_public": [
        ""
    ],
    "jose.backends.rsa_backend.RSAKey.public_key": [
        ""
    ],
    "jose.backends.rsa_backend.RSAKey.to_pem": [
        "",
        "str"
    ],
    "jose.backends.rsa_backend.RSAKey.to_dict": [
        ""
    ],
    "jose.backends.rsa_backend.RSAKey.wrap_key": [
        "",
        "bytes"
    ],
    "jose.backends.rsa_backend.RSAKey.unwrap_key": [
        "",
        "bytes"
    ],
    "jose.backends.rsa_backend.pem_to_spki": [
        "",
        "str"
    ],
    "jose.backends.ecdsa_backend.ECDSAECKey.__init__": [
        "",
        "",
        ""
    ],
    "jose.backends.ecdsa_backend.ECDSAECKey.sign": [
        "",
        ""
    ],
    "jose.backends.ecdsa_backend.ECDSAECKey.verify": [
        "",
        "",
        ""
    ],
    "jose.backends.ecdsa_backend.ECDSAECKey.is_public": [
        ""
    ],
    "jose.backends.ecdsa_backend.ECDSAECKey.public_key": [
        ""
    ],
    "jose.backends.ecdsa_backend.ECDSAECKey.to_pem": [
        ""
    ],
    "jose.backends.ecdsa_backend.ECDSAECKey.to_dict": [
        ""
    ],
    "jose.backends._asn1.rsa_private_key_pkcs8_to_pkcs1": [
        ""
    ],
    "jose.backends._asn1.rsa_private_key_pkcs1_to_pkcs8": [
        ""
    ],
    "jose.backends._asn1.rsa_public_key_pkcs1_to_pkcs8": [
        ""
    ],
    "jose.backends._asn1.rsa_public_key_pkcs8_to_pkcs1": [
        ""
    ],
    "jose.backends.cryptography_backend.CryptographyECKey.__init__": [
        "",
        "",
        "",
        ""
    ],
    "jose.backends.cryptography_backend.CryptographyECKey.sign": [
        "",
        ""
    ],
    "jose.backends.cryptography_backend.CryptographyECKey.verify": [
        "",
        "",
        ""
    ],
    "jose.backends.cryptography_backend.CryptographyECKey.is_public": [
        ""
    ],
    "jose.backends.cryptography_backend.CryptographyECKey.public_key": [
        ""
    ],
    "jose.backends.cryptography_backend.CryptographyECKey.to_pem": [
        ""
    ],
    "jose.backends.cryptography_backend.CryptographyECKey.to_dict": [
        ""
    ],
    "jose.backends.cryptography_backend.CryptographyRSAKey.__init__": [
        "",
        "",
        "",
        ""
    ],
    "jose.backends.cryptography_backend.CryptographyRSAKey.sign": [
        "",
        ""
    ],
    "jose.backends.cryptography_backend.CryptographyRSAKey.verify": [
        "",
        "",
        ""
    ],
    "jose.backends.cryptography_backend.CryptographyRSAKey.is_public": [
        ""
    ],
    "jose.backends.cryptography_backend.CryptographyRSAKey.public_key": [
        ""
    ],
    "jose.backends.cryptography_backend.CryptographyRSAKey.to_pem": [
        "",
        "str"
    ],
    "jose.backends.cryptography_backend.CryptographyRSAKey.to_dict": [
        ""
    ],
    "jose.backends.cryptography_backend.CryptographyRSAKey.wrap_key": [
        "",
        ""
    ],
    "jose.backends.cryptography_backend.CryptographyRSAKey.unwrap_key": [
        "",
        ""
    ],
    "jose.backends.cryptography_backend.CryptographyAESKey.__init__": [
        "",
        "",
        ""
    ],
    "jose.backends.cryptography_backend.CryptographyAESKey.to_dict": [
        ""
    ],
    "jose.backends.cryptography_backend.CryptographyAESKey.encrypt": [
        "",
        "",
        "Incomplete | None"
    ],
    "jose.backends.cryptography_backend.CryptographyAESKey.decrypt": [
        "",
        "",
        "Incomplete | None",
        "Incomplete | None",
        "Incomplete | None"
    ],
    "jose.backends.cryptography_backend.CryptographyAESKey.wrap_key": [
        "",
        ""
    ],
    "jose.backends.cryptography_backend.CryptographyAESKey.unwrap_key": [
        "",
        ""
    ],
    "jose.backends.cryptography_backend.CryptographyHMACKey.__init__": [
        "",
        "",
        ""
    ],
    "jose.backends.cryptography_backend.CryptographyHMACKey.to_dict": [
        ""
    ],
    "jose.backends.cryptography_backend.CryptographyHMACKey.sign": [
        "",
        ""
    ],
    "jose.backends.cryptography_backend.CryptographyHMACKey.verify": [
        "",
        "",
        ""
    ],
    "jose.backends.cryptography_backend.get_random_bytes": [
        "int"
    ],
    "jose.backends.base.Key.__init__": [
        "",
        "",
        ""
    ],
    "jose.backends.base.Key.sign": [
        "",
        "bytes"
    ],
    "jose.backends.base.Key.verify": [
        "",
        "bytes",
        "bytes"
    ],
    "jose.backends.base.Key.public_key": [
        ""
    ],
    "jose.backends.base.Key.to_pem": [
        ""
    ],
    "jose.backends.base.Key.to_dict": [
        ""
    ],
    "jose.backends.base.Key.encrypt": [
        "",
        "str | bytes",
        "bytes | None"
    ],
    "jose.backends.base.Key.decrypt": [
        "",
        "str | bytes",
        "str | bytes | None",
        "bytes | None",
        "bytes | None"
    ],
    "jose.backends.base.Key.wrap_key": [
        "",
        "bytes"
    ],
    "jose.backends.base.Key.unwrap_key": [
        "",
        "bytes"
    ],
    "jose.backends.base.DIRKey.__init__": [
        "",
        "str | bytes",
        "str"
    ],
    "jose.backends.base.DIRKey.to_dict": [
        ""
    ],
    "jose.backends.native.HMACKey.__init__": [
        "",
        "str | bytes | dict[str, Any]",
        "str"
    ],
    "jose.backends.native.HMACKey.sign": [
        "",
        "ReadableBuffer | None"
    ],
    "jose.backends.native.HMACKey.verify": [
        "",
        "ReadableBuffer | None",
        "str | bytes"
    ],
    "jose.backends.native.HMACKey.to_dict": [
        ""
    ],
    "jose.backends.native.get_random_bytes": [
        "int"
    ],
    "jose.jwk.get_key": [
        "str"
    ],
    "jose.jwk.register_key": [
        "str",
        "type[Key]"
    ],
    "jose.jwk.construct": [
        "str | bytes | dict[str, Any] | Key",
        "str | None"
    ],
    "jose.jwe.encrypt": [
        "str | bytes",
        "str | bytes | dict[str, Any] | Key",
        "str",
        "str",
        "str | None",
        "str | None",
        "str | None"
    ],
    "jose.jwe.decrypt": [
        "str | bytes",
        "str | bytes | dict[str, Any] | Key"
    ],
    "jose.jwe.get_unverified_header": [
        "str | bytes | None"
    ]
}