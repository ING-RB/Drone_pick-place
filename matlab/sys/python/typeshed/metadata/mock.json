{
    "mock.mock._SentinelObject.__init__": [
        "",
        "str"
    ],
    "mock.mock._Sentinel.__getattr__": [
        "",
        "str"
    ],
    "mock.mock._Call.__new__": [
        "",
        "Any",
        "Incomplete | None",
        "Incomplete | None",
        "bool",
        "bool"
    ],
    "mock.mock._Call.__init__": [
        "",
        "Any",
        "Incomplete | None",
        "Incomplete | None",
        "bool",
        "bool"
    ],
    "mock.mock._Call.__eq__": [
        "",
        "object"
    ],
    "mock.mock._Call.__ne__": [
        "",
        "object"
    ],
    "mock.mock._Call.__call__": [
        ""
    ],
    "mock.mock._Call.__getattr__": [
        "",
        "str"
    ],
    "mock.mock._Call.args": [
        ""
    ],
    "mock.mock._Call.kwargs": [
        ""
    ],
    "mock.mock._Call.call_list": [
        ""
    ],
    "mock.mock._CallList.__contains__": [
        "",
        "Any"
    ],
    "mock.mock.Base.__init__": [
        ""
    ],
    "mock.mock.NonCallableMock.__new__": [
        "",
        "list[str] | object | type[object] | None",
        "Incomplete | None",
        "str | None",
        "list[str] | object | type[object] | None",
        "NonCallableMock | None",
        "Incomplete | None",
        "str",
        "NonCallableMock | None",
        "bool",
        "bool | None",
        "bool"
    ],
    "mock.mock.NonCallableMock.__init__": [
        "",
        "list[str] | object | type[object] | None",
        "Incomplete | None",
        "str | None",
        "list[str] | object | type[object] | None",
        "NonCallableMock | None",
        "Incomplete | None",
        "str",
        "NonCallableMock | None",
        "bool",
        "bool | None",
        "bool"
    ],
    "mock.mock.NonCallableMock.__getattr__": [
        "",
        "str"
    ],
    "mock.mock.NonCallableMock._calls_repr": [
        "",
        "str"
    ],
    "mock.mock.NonCallableMock.assert_called_with": [
        ""
    ],
    "mock.mock.NonCallableMock.assert_not_called": [
        ""
    ],
    "mock.mock.NonCallableMock.assert_called_once_with": [
        ""
    ],
    "mock.mock.NonCallableMock._format_mock_failure_message": [
        "",
        "Any",
        "Any",
        "str"
    ],
    "mock.mock.NonCallableMock.assert_called": [
        ""
    ],
    "mock.mock.NonCallableMock.assert_called_once": [
        ""
    ],
    "mock.mock.NonCallableMock.reset_mock": [
        "",
        "Any"
    ],
    "mock.mock.NonCallableMock._extract_mock_name": [
        ""
    ],
    "mock.mock.NonCallableMock.assert_any_call": [
        ""
    ],
    "mock.mock.NonCallableMock.assert_has_calls": [
        "",
        "Sequence[_Call]",
        "bool"
    ],
    "mock.mock.NonCallableMock.mock_add_spec": [
        "",
        "Any",
        "bool"
    ],
    "mock.mock.NonCallableMock._mock_add_spec": [
        "",
        "Any",
        "bool",
        "bool",
        "bool"
    ],
    "mock.mock.NonCallableMock.attach_mock": [
        "",
        "NonCallableMock",
        "str"
    ],
    "mock.mock.NonCallableMock.configure_mock": [
        ""
    ],
    "mock.mock.NonCallableMock._format_mock_call_signature": [
        "",
        "Any",
        "Any"
    ],
    "mock.mock.NonCallableMock._call_matcher": [
        "",
        "tuple[_Call, ...]"
    ],
    "mock.mock.NonCallableMock._get_child_mock": [
        ""
    ],
    "mock.mock.CallableMixin.__init__": [
        "",
        "Incomplete | None",
        "Incomplete | None",
        "Any",
        "Incomplete | None",
        "Incomplete | None",
        "Incomplete | None",
        "Incomplete | None",
        "Incomplete | None",
        "Any",
        "Incomplete | None"
    ],
    "mock.mock.CallableMixin.__call__": [
        ""
    ],
    "mock.mock._patch.__init__": [
        "_patch[_T]",
        "Callable[[], Any]",
        "str",
        "_T",
        "Incomplete | None",
        "bool",
        "Incomplete | None",
        "Incomplete | None",
        "Incomplete | None",
        "Mapping[str, Any]"
    ],
    "mock.mock._patch.copy": [
        ""
    ],
    "mock.mock._patch.__call__": [
        "",
        "Callable[_P, _R]"
    ],
    "mock.mock._patch.decorate_class": [
        "",
        "_TT"
    ],
    "mock.mock._patch.decorate_callable": [
        "",
        "_F"
    ],
    "mock.mock._patch.decorate_async_callable": [
        "",
        "_AF"
    ],
    "mock.mock._patch.decoration_helper": [
        "",
        "Any",
        "tuple[Any, ...]",
        "dict[str, Any]"
    ],
    "mock.mock._patch.get_original": [
        ""
    ],
    "mock.mock._patch.__enter__": [
        ""
    ],
    "mock.mock._patch.__exit__": [
        "",
        "type[BaseException] | None",
        "BaseException | None",
        "TracebackType | None"
    ],
    "mock.mock._patch.start": [
        ""
    ],
    "mock.mock._patch.stop": [
        ""
    ],
    "mock.mock._patch_dict.__init__": [
        "",
        "Any",
        "Any",
        "Any"
    ],
    "mock.mock._patch_dict.__call__": [
        "",
        "Any"
    ],
    "mock.mock._patch_dict.decorate_callable": [
        "",
        "_F"
    ],
    "mock.mock._patch_dict.decorate_async_callable": [
        "",
        "_AF"
    ],
    "mock.mock._patch_dict.decorate_class": [
        "",
        "Any"
    ],
    "mock.mock._patch_dict.__enter__": [
        ""
    ],
    "mock.mock._patch_dict.__exit__": [
        ""
    ],
    "mock.mock._patcher.__call__": [
        "",
        "Any"
    ],
    "mock.mock._patcher.object": [
        "",
        "Any",
        "str"
    ],
    "mock.mock._patcher.multiple": [
        "",
        "Any",
        "Incomplete | None",
        "bool",
        "Incomplete | None",
        "Incomplete | None",
        "Incomplete | None"
    ],
    "mock.mock._patcher.stopall": [
        ""
    ],
    "mock.mock.MagicMixin.__init__": [
        ""
    ],
    "mock.mock.NonCallableMagicMock.mock_add_spec": [
        "",
        "Any",
        "bool"
    ],
    "mock.mock.MagicMock.mock_add_spec": [
        "",
        "Any",
        "bool"
    ],
    "mock.mock.AsyncMockMixin.__init__": [
        ""
    ],
    "mock.mock.AsyncMockMixin.assert_awaited": [
        ""
    ],
    "mock.mock.AsyncMockMixin.assert_awaited_once": [
        ""
    ],
    "mock.mock.AsyncMockMixin.assert_awaited_with": [
        ""
    ],
    "mock.mock.AsyncMockMixin.assert_awaited_once_with": [
        ""
    ],
    "mock.mock.AsyncMockMixin.assert_any_await": [
        ""
    ],
    "mock.mock.AsyncMockMixin.assert_has_awaits": [
        "",
        "Iterable[_Call]",
        "bool"
    ],
    "mock.mock.AsyncMockMixin.assert_not_awaited": [
        ""
    ],
    "mock.mock.AsyncMockMixin.reset_mock": [
        ""
    ],
    "mock.mock.AsyncMock.reset_mock": [
        "",
        "Any"
    ],
    "mock.mock.MagicProxy.__init__": [
        "",
        "str",
        "Any"
    ],
    "mock.mock.MagicProxy.create_mock": [
        ""
    ],
    "mock.mock.MagicProxy.__get__": [
        "",
        "Any",
        "Incomplete | None"
    ],
    "mock.mock._ANY.__eq__": [
        "",
        "object"
    ],
    "mock.mock._ANY.__ne__": [
        "",
        "object"
    ],
    "mock.mock._SpecState.__init__": [
        "",
        "Any",
        "Any",
        "Incomplete | None",
        "Incomplete | None",
        "Incomplete | None",
        "Any"
    ],
    "mock.mock.PropertyMock.__get__": [
        "",
        "_T",
        "type[_T] | None"
    ],
    "mock.mock.PropertyMock.__set__": [
        "",
        "Any",
        "Any"
    ],
    "mock.mock.ThreadingMixin.__init__": [
        ""
    ],
    "mock.mock.ThreadingMixin.reset_mock": [
        ""
    ],
    "mock.mock.ThreadingMixin.wait_until_called": [
        ""
    ],
    "mock.mock.ThreadingMixin.wait_until_any_call_with": [
        ""
    ],
    "mock.mock.ThreadingMock.reset_mock": [
        "",
        "Any"
    ],
    "mock.mock.create_autospec": [
        "Any",
        "Any",
        "Any",
        "Incomplete | None",
        "Incomplete | None"
    ],
    "mock.mock.mock_open": [
        "Incomplete | None",
        "Any"
    ],
    "mock.mock.seal": [
        "Any"
    ]
}