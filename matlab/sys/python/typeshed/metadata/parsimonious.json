{
    "parsimonious.grammar.Grammar.__init__": [
        "",
        "str"
    ],
    "parsimonious.grammar.Grammar.default": [
        "",
        "str"
    ],
    "parsimonious.grammar.Grammar.parse": [
        "",
        "str",
        "int"
    ],
    "parsimonious.grammar.Grammar.match": [
        "",
        "str",
        "int"
    ],
    "parsimonious.grammar.LazyReference.resolve_refs": [
        "",
        "Mapping[str, Expression | LazyReference]"
    ],
    "parsimonious.grammar.RuleVisitor.__init__": [
        "",
        "Mapping[str, Expression] | None"
    ],
    "parsimonious.grammar.RuleVisitor.visit_parenthesized": [
        "",
        "Node",
        "collections.abc.Sequence[Any]"
    ],
    "parsimonious.grammar.RuleVisitor.visit_quantifier": [
        "",
        "Node",
        "collections.abc.Sequence[Any]"
    ],
    "parsimonious.grammar.RuleVisitor.visit_quantified": [
        "",
        "Node",
        "collections.abc.Sequence[Any]"
    ],
    "parsimonious.grammar.RuleVisitor.visit_lookahead_term": [
        "",
        "Node",
        "collections.abc.Sequence[Any]"
    ],
    "parsimonious.grammar.RuleVisitor.visit_not_term": [
        "",
        "Node",
        "collections.abc.Sequence[Any]"
    ],
    "parsimonious.grammar.RuleVisitor.visit_rule": [
        "",
        "Node",
        "collections.abc.Sequence[Any]"
    ],
    "parsimonious.grammar.RuleVisitor.visit_sequence": [
        "",
        "Node",
        "collections.abc.Sequence[Any]"
    ],
    "parsimonious.grammar.RuleVisitor.visit_ored": [
        "",
        "Node",
        "collections.abc.Sequence[Any]"
    ],
    "parsimonious.grammar.RuleVisitor.visit_or_term": [
        "",
        "Node",
        "collections.abc.Sequence[Any]"
    ],
    "parsimonious.grammar.RuleVisitor.visit_label": [
        "",
        "Node",
        "collections.abc.Sequence[Any]"
    ],
    "parsimonious.grammar.RuleVisitor.visit_reference": [
        "",
        "Node",
        "collections.abc.Sequence[Any]"
    ],
    "parsimonious.grammar.RuleVisitor.visit_regex": [
        "",
        "Node",
        "collections.abc.Sequence[Any]"
    ],
    "parsimonious.grammar.RuleVisitor.visit_spaceless_literal": [
        "",
        "Node",
        "collections.abc.Sequence[Any]"
    ],
    "parsimonious.grammar.RuleVisitor.visit_literal": [
        "",
        "Node",
        "collections.abc.Sequence[Any]"
    ],
    "parsimonious.grammar.RuleVisitor.generic_visit": [
        "",
        "Node",
        "collections.abc.Sequence[Any]"
    ],
    "parsimonious.grammar.RuleVisitor.visit_rules": [
        "",
        "Node",
        "collections.abc.Sequence[Any]"
    ],
    "parsimonious.grammar.TokenRuleVisitor.visit_spaceless_literal": [
        "",
        "Node",
        "collections.abc.Sequence[Any]"
    ],
    "parsimonious.grammar.TokenRuleVisitor.visit_regex": [
        "",
        "Node",
        "collections.abc.Sequence[Any]"
    ],
    "parsimonious.expressions.Expression.__init__": [
        "",
        "str"
    ],
    "parsimonious.expressions.Expression.resolve_refs": [
        "",
        "Mapping[str, Expression]"
    ],
    "parsimonious.expressions.Expression.parse": [
        "",
        "str",
        "int"
    ],
    "parsimonious.expressions.Expression.match": [
        "",
        "str",
        "int"
    ],
    "parsimonious.expressions.Expression.match_core": [
        "",
        "str",
        "int",
        "Mapping[tuple[int, int], Node]",
        "ParseError"
    ],
    "parsimonious.expressions.Expression.as_rule": [
        ""
    ],
    "parsimonious.expressions.Literal.__init__": [
        "",
        "str",
        "str"
    ],
    "parsimonious.expressions.Regex.__init__": [
        "",
        "str",
        "str",
        "bool",
        "bool",
        "bool",
        "bool",
        "bool",
        "bool",
        "bool"
    ],
    "parsimonious.expressions.Compound.__init__": [
        ""
    ],
    "parsimonious.expressions.Lookahead.__init__": [
        "",
        "Expression"
    ],
    "parsimonious.expressions.Quantifier.__init__": [
        "",
        "Expression"
    ],
    "parsimonious.expressions.is_callable": [
        "object"
    ],
    "parsimonious.expressions.expression": [
        "_CALLABLE_TYPE",
        "str",
        "Grammar"
    ],
    "parsimonious.expressions.Not": [
        "Expression"
    ],
    "parsimonious.expressions.ZeroOrMore": [
        "Expression",
        "str"
    ],
    "parsimonious.expressions.OneOrMore": [
        "Expression",
        "str",
        "int"
    ],
    "parsimonious.expressions.Optional": [
        "Expression",
        "str"
    ],
    "parsimonious.utils.Token.__init__": [
        "",
        "str"
    ],
    "parsimonious.utils.evaluate_string": [
        "str | ast.AST"
    ],
    "parsimonious.nodes.Node.__init__": [
        "",
        "Expression",
        "str",
        "int",
        "int",
        "Sequence[Node] | None"
    ],
    "parsimonious.nodes.Node.expr_name": [
        ""
    ],
    "parsimonious.nodes.Node.__iter__": [
        ""
    ],
    "parsimonious.nodes.Node.text": [
        ""
    ],
    "parsimonious.nodes.Node.prettily": [
        "",
        "Node | None"
    ],
    "parsimonious.nodes.Node.__repr__": [
        "",
        "bool"
    ],
    "parsimonious.nodes.NodeVisitor.visit": [
        "",
        "Node"
    ],
    "parsimonious.nodes.NodeVisitor.generic_visit": [
        "",
        "Node",
        "Sequence[Any]"
    ],
    "parsimonious.nodes.NodeVisitor.parse": [
        "",
        "str",
        "int"
    ],
    "parsimonious.nodes.NodeVisitor.match": [
        "",
        "str",
        "int"
    ],
    "parsimonious.nodes.NodeVisitor.lift_child": [
        "",
        "Node",
        "Sequence[_ChildT]"
    ],
    "parsimonious.nodes.rule": [
        "str"
    ],
    "parsimonious.exceptions.ParseError.__init__": [
        "",
        "str",
        "int",
        "Expression | None"
    ],
    "parsimonious.exceptions.ParseError.line": [
        ""
    ],
    "parsimonious.exceptions.ParseError.column": [
        ""
    ],
    "parsimonious.exceptions.VisitationError.__init__": [
        "",
        "BaseException",
        "type[BaseException]",
        "Node"
    ],
    "parsimonious.exceptions.UndefinedLabel.__init__": [
        "",
        "LazyReference"
    ]
}