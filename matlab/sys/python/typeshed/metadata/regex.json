{
    "regex._regex.Splitter.pattern": [
        ""
    ],
    "regex._regex.Splitter.__iter__": [
        ""
    ],
    "regex._regex.Splitter.__next__": [
        ""
    ],
    "regex._regex.Splitter.split": [
        ""
    ],
    "regex._regex.Scanner.pattern": [
        ""
    ],
    "regex._regex.Scanner.__iter__": [
        ""
    ],
    "regex._regex.Scanner.__next__": [
        ""
    ],
    "regex._regex.Scanner.match": [
        ""
    ],
    "regex._regex.Scanner.search": [
        ""
    ],
    "regex.regex.Pattern.flags": [
        ""
    ],
    "regex.regex.Pattern.groupindex": [
        ""
    ],
    "regex.regex.Pattern.groups": [
        ""
    ],
    "regex.regex.Pattern.pattern": [
        ""
    ],
    "regex.regex.Pattern.named_lists": [
        ""
    ],
    "regex.regex.Pattern.search": [
        "Pattern[str]",
        "str",
        "int",
        "int",
        "bool | None",
        "float | None"
    ],
    "regex.regex.Pattern.match": [
        "Pattern[str]",
        "str",
        "int",
        "int",
        "bool | None",
        "float | None"
    ],
    "regex.regex.Pattern.fullmatch": [
        "Pattern[str]",
        "str",
        "int",
        "int",
        "bool | None",
        "float | None"
    ],
    "regex.regex.Pattern.split": [
        "Pattern[str]",
        "str",
        "int",
        "bool | None",
        "float | None"
    ],
    "regex.regex.Pattern.splititer": [
        "Pattern[str]",
        "str",
        "int",
        "bool | None",
        "float | None"
    ],
    "regex.regex.Pattern.findall": [
        "Pattern[str]",
        "str",
        "int",
        "int",
        "bool",
        "bool | None",
        "float | None"
    ],
    "regex.regex.Pattern.finditer": [
        "Pattern[str]",
        "str",
        "int",
        "int",
        "bool",
        "bool | None",
        "float | None"
    ],
    "regex.regex.Pattern.sub": [
        "Pattern[str]",
        "str | Callable[[Match[str]], str]",
        "str",
        "int",
        "int",
        "int | None",
        "int | None",
        "bool | None",
        "float | None"
    ],
    "regex.regex.Pattern.subf": [
        "Pattern[str]",
        "str | Callable[[Match[str]], str]",
        "str",
        "int",
        "int",
        "int | None",
        "int | None",
        "bool | None",
        "float | None"
    ],
    "regex.regex.Pattern.subn": [
        "Pattern[str]",
        "str | Callable[[Match[str]], str]",
        "str",
        "int",
        "int",
        "int | None",
        "int | None",
        "bool | None",
        "float | None"
    ],
    "regex.regex.Pattern.subfn": [
        "Pattern[str]",
        "str | Callable[[Match[str]], str]",
        "str",
        "int",
        "int",
        "int | None",
        "int | None",
        "bool | None",
        "float | None"
    ],
    "regex.regex.Pattern.scanner": [
        "Pattern[str]",
        "str",
        "int | None",
        "int | None",
        "bool",
        "bool | None",
        "float | None"
    ],
    "regex.regex.Pattern.__copy__": [
        ""
    ],
    "regex.regex.Pattern.__deepcopy__": [
        ""
    ],
    "regex.regex.Match.pos": [
        ""
    ],
    "regex.regex.Match.endpos": [
        ""
    ],
    "regex.regex.Match.lastindex": [
        ""
    ],
    "regex.regex.Match.lastgroup": [
        ""
    ],
    "regex.regex.Match.string": [
        ""
    ],
    "regex.regex.Match.re": [
        ""
    ],
    "regex.regex.Match.partial": [
        ""
    ],
    "regex.regex.Match.regs": [
        ""
    ],
    "regex.regex.Match.fuzzy_counts": [
        ""
    ],
    "regex.regex.Match.fuzzy_changes": [
        ""
    ],
    "regex.regex.Match.group": [
        "",
        "Literal[0]"
    ],
    "regex.regex.Match.groups": [
        "",
        "None"
    ],
    "regex.regex.Match.groupdict": [
        "",
        "None"
    ],
    "regex.regex.Match.span": [
        "",
        "int | str"
    ],
    "regex.regex.Match.spans": [
        "",
        "int | str"
    ],
    "regex.regex.Match.start": [
        "",
        "int | str"
    ],
    "regex.regex.Match.starts": [
        "",
        "int | str"
    ],
    "regex.regex.Match.end": [
        "",
        "int | str"
    ],
    "regex.regex.Match.ends": [
        "",
        "int | str"
    ],
    "regex.regex.Match.expand": [
        "",
        "AnyStr"
    ],
    "regex.regex.Match.expandf": [
        "",
        "AnyStr"
    ],
    "regex.regex.Match.captures": [
        "",
        "int | str"
    ],
    "regex.regex.Match.capturesdict": [
        ""
    ],
    "regex.regex.Match.detach_string": [
        ""
    ],
    "regex.regex.Match.allcaptures": [
        ""
    ],
    "regex.regex.Match.allspans": [
        ""
    ],
    "regex.regex.Match.__getitem__": [
        "",
        "Literal[0]"
    ],
    "regex.regex.Match.__copy__": [
        ""
    ],
    "regex.regex.Match.__deepcopy__": [
        ""
    ],
    "regex.regex.compile": [
        "AnyStr | Pattern[AnyStr]",
        "int",
        "bool",
        "bool | None"
    ],
    "regex.regex.search": [
        "str | Pattern[str]",
        "str",
        "int",
        "int | None",
        "int | None",
        "bool",
        "bool | None",
        "float | None",
        "bool"
    ],
    "regex.regex.match": [
        "str | Pattern[str]",
        "str",
        "int",
        "int | None",
        "int | None",
        "bool",
        "bool | None",
        "float | None",
        "bool"
    ],
    "regex.regex.fullmatch": [
        "str | Pattern[str]",
        "str",
        "int",
        "int | None",
        "int | None",
        "bool",
        "bool | None",
        "float | None",
        "bool"
    ],
    "regex.regex.split": [
        "str | Pattern[str]",
        "str",
        "int",
        "int",
        "bool | None",
        "float | None",
        "bool"
    ],
    "regex.regex.splititer": [
        "str | Pattern[str]",
        "str",
        "int",
        "int",
        "bool | None",
        "float | None",
        "bool"
    ],
    "regex.regex.findall": [
        "str | Pattern[str]",
        "str",
        "int",
        "int | None",
        "int | None",
        "bool",
        "bool | None",
        "float | None",
        "bool"
    ],
    "regex.regex.finditer": [
        "str | Pattern[str]",
        "str",
        "int",
        "int | None",
        "int | None",
        "bool",
        "bool",
        "bool | None",
        "float | None",
        "bool"
    ],
    "regex.regex.sub": [
        "str | Pattern[str]",
        "str | Callable[[Match[str]], str]",
        "str",
        "int",
        "int",
        "int | None",
        "int | None",
        "bool | None",
        "float | None",
        "bool"
    ],
    "regex.regex.subf": [
        "str | Pattern[str]",
        "str | Callable[[Match[str]], str]",
        "str",
        "int",
        "int",
        "int | None",
        "int | None",
        "bool | None",
        "float | None",
        "bool"
    ],
    "regex.regex.subn": [
        "str | Pattern[str]",
        "str | Callable[[Match[str]], str]",
        "str",
        "int",
        "int",
        "int | None",
        "int | None",
        "bool | None",
        "float | None",
        "bool"
    ],
    "regex.regex.subfn": [
        "str | Pattern[str]",
        "str | Callable[[Match[str]], str]",
        "str",
        "int",
        "int",
        "int | None",
        "int | None",
        "bool | None",
        "float | None",
        "bool"
    ],
    "regex.regex.purge": [],
    "regex.regex.cache_all": [
        "bool"
    ],
    "regex.regex.escape": [
        "AnyStr",
        "bool",
        "bool"
    ],
    "regex.regex.template": [
        "AnyStr | Pattern[AnyStr]",
        "int"
    ],
    "regex._regex_core.error.__init__": [
        "",
        "str",
        "AnyStr | None",
        "int | None"
    ],
    "regex._regex_core.Scanner.__init__": [
        "",
        "_Lexicon[AnyStr]",
        "int"
    ],
    "regex._regex_core.Scanner.scan": [
        "",
        "AnyStr"
    ]
}