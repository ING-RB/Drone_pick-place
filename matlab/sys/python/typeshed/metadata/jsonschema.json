{
    "jsonschema.exceptions._Error.__init__": [
        "",
        "str",
        "_utils.Unset | None | protocols.Validator",
        "Sequence[str | int]",
        "Incomplete | None",
        "Sequence[ValidationError]",
        "",
        "Incomplete",
        "Incomplete",
        "Sequence[str | int]",
        "_Error | None",
        "_utils.Unset | TypeChecker"
    ],
    "jsonschema.exceptions._Error.create_from": [
        "",
        "_Error"
    ],
    "jsonschema.exceptions._Error.absolute_path": [
        ""
    ],
    "jsonschema.exceptions._Error.absolute_schema_path": [
        ""
    ],
    "jsonschema.exceptions._Error.json_path": [
        ""
    ],
    "jsonschema.exceptions._Error._contents": [
        ""
    ],
    "jsonschema.exceptions.RefResolutionError.__init__": [
        "",
        "str"
    ],
    "jsonschema.exceptions.UndefinedTypeCheck.__init__": [
        "",
        ""
    ],
    "jsonschema.exceptions.UnknownType.__init__": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema.exceptions.FormatError.__init__": [
        "",
        "",
        "Incomplete | None"
    ],
    "jsonschema.exceptions.ErrorTree.__init__": [
        "",
        ""
    ],
    "jsonschema.exceptions.ErrorTree.__contains__": [
        "",
        ""
    ],
    "jsonschema.exceptions.ErrorTree.__getitem__": [
        "",
        ""
    ],
    "jsonschema.exceptions.ErrorTree.__setitem__": [
        "",
        "",
        ""
    ],
    "jsonschema.exceptions.ErrorTree.__iter__": [
        ""
    ],
    "jsonschema.exceptions.ErrorTree.__len__": [
        ""
    ],
    "jsonschema.exceptions.ErrorTree.total_errors": [
        ""
    ],
    "jsonschema.exceptions.by_relevance": [
        "Container[str]",
        "Container[str]"
    ],
    "jsonschema.exceptions.best_match": [
        "Iterable[ValidationError]",
        "_RelevanceFuncType"
    ],
    "jsonschema.cli._Outputter.__init__": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema.cli._Outputter.from_arguments": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema.cli._Outputter.load": [
        "",
        ""
    ],
    "jsonschema.cli._Outputter.filenotfound_error": [
        ""
    ],
    "jsonschema.cli._Outputter.parsing_error": [
        ""
    ],
    "jsonschema.cli._Outputter.validation_error": [
        ""
    ],
    "jsonschema.cli._Outputter.validation_success": [
        ""
    ],
    "jsonschema.cli._PrettyFormatter.filenotfound_error": [
        "",
        "",
        ""
    ],
    "jsonschema.cli._PrettyFormatter.parsing_error": [
        "",
        "",
        ""
    ],
    "jsonschema.cli._PrettyFormatter.validation_error": [
        "",
        "",
        ""
    ],
    "jsonschema.cli._PrettyFormatter.validation_success": [
        "",
        ""
    ],
    "jsonschema.cli._PlainFormatter.__init__": [
        "",
        ""
    ],
    "jsonschema.cli._PlainFormatter.filenotfound_error": [
        "",
        "",
        ""
    ],
    "jsonschema.cli._PlainFormatter.parsing_error": [
        "",
        "",
        ""
    ],
    "jsonschema.cli._PlainFormatter.validation_error": [
        "",
        "",
        ""
    ],
    "jsonschema.cli._PlainFormatter.validation_success": [
        "",
        ""
    ],
    "jsonschema.cli.parse_args": [
        ""
    ],
    "jsonschema.cli.main": [
        ""
    ],
    "jsonschema.cli.run": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema.protocols.Validator.__init__": [
        "",
        "dict[Incomplete, Incomplete] | bool",
        "RefResolver | None",
        "FormatChecker | None"
    ],
    "jsonschema.protocols.Validator.check_schema": [
        "",
        "dict[Incomplete, Incomplete]"
    ],
    "jsonschema.protocols.Validator.is_type": [
        "",
        "_JsonParameter",
        "str"
    ],
    "jsonschema.protocols.Validator.is_valid": [
        "",
        "_JsonParameter"
    ],
    "jsonschema.protocols.Validator.iter_errors": [
        "",
        "_JsonParameter"
    ],
    "jsonschema.protocols.Validator.validate": [
        "",
        "_JsonParameter"
    ],
    "jsonschema.protocols.Validator.evolve": [
        ""
    ],
    "jsonschema._types.TypeChecker.__init__": [
        "",
        "Mapping[str, Callable[[object], bool]]"
    ],
    "jsonschema._types.TypeChecker.is_type": [
        "",
        "",
        "str"
    ],
    "jsonschema._types.TypeChecker.redefine": [
        "",
        "str",
        "Callable[..., bool]"
    ],
    "jsonschema._types.TypeChecker.redefine_many": [
        "",
        ""
    ],
    "jsonschema._types.TypeChecker.remove": [
        ""
    ],
    "jsonschema._types.is_array": [
        "",
        ""
    ],
    "jsonschema._types.is_bool": [
        "",
        ""
    ],
    "jsonschema._types.is_integer": [
        "",
        ""
    ],
    "jsonschema._types.is_null": [
        "",
        ""
    ],
    "jsonschema._types.is_number": [
        "",
        ""
    ],
    "jsonschema._types.is_object": [
        "",
        ""
    ],
    "jsonschema._types.is_string": [
        "",
        ""
    ],
    "jsonschema._types.is_any": [
        "",
        ""
    ],
    "jsonschema._utils.URIDict.normalize": [
        "",
        "str"
    ],
    "jsonschema._utils.URIDict.__init__": [
        "",
        "SupportsKeysAndGetItem[str, str] | Iterable[tuple[str, str]]"
    ],
    "jsonschema._utils.URIDict.__getitem__": [
        "",
        "str"
    ],
    "jsonschema._utils.URIDict.__setitem__": [
        "",
        "str",
        "str"
    ],
    "jsonschema._utils.URIDict.__delitem__": [
        "",
        "str"
    ],
    "jsonschema._utils.URIDict.__iter__": [
        ""
    ],
    "jsonschema._utils.URIDict.__len__": [
        ""
    ],
    "jsonschema._utils.load_schema": [
        ""
    ],
    "jsonschema._utils.format_as_index": [
        "str",
        ""
    ],
    "jsonschema._utils.find_additional_properties": [
        "Iterable[Incomplete]",
        "Mapping[Incomplete, Incomplete]"
    ],
    "jsonschema._utils.extras_msg": [
        "Iterable[Incomplete] | Sized"
    ],
    "jsonschema._utils.ensure_list": [
        ""
    ],
    "jsonschema._utils.equal": [
        "",
        ""
    ],
    "jsonschema._utils.unbool": [
        "",
        "",
        ""
    ],
    "jsonschema._utils.uniq": [
        ""
    ],
    "jsonschema._utils.find_evaluated_item_indexes_by_schema": [
        "",
        "",
        ""
    ],
    "jsonschema._utils.find_evaluated_property_keys_by_schema": [
        "",
        "",
        ""
    ],
    "jsonschema._legacy_validators.ignore_ref_siblings": [
        ""
    ],
    "jsonschema._legacy_validators.dependencies_draft3": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._legacy_validators.dependencies_draft4_draft6_draft7": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._legacy_validators.disallow_draft3": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._legacy_validators.extends_draft3": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._legacy_validators.items_draft3_draft4": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._legacy_validators.items_draft6_draft7_draft201909": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._legacy_validators.minimum_draft3_draft4": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._legacy_validators.maximum_draft3_draft4": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._legacy_validators.properties_draft3": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._legacy_validators.type_draft3": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._legacy_validators.contains_draft6_draft7": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._legacy_validators.recursiveRef": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._format.FormatChecker.__init__": [
        "",
        "Iterable[str] | None"
    ],
    "jsonschema._format.FormatChecker.checks": [
        "",
        "str",
        "_RaisesType"
    ],
    "jsonschema._format.FormatChecker.cls_checks": [
        "",
        "str",
        "_RaisesType"
    ],
    "jsonschema._format.FormatChecker.check": [
        "",
        "object",
        "str"
    ],
    "jsonschema._format.FormatChecker.conforms": [
        "",
        "object",
        "str"
    ],
    "jsonschema._format.is_email": [
        "object"
    ],
    "jsonschema._format.is_ipv4": [
        "object"
    ],
    "jsonschema._format.is_ipv6": [
        "object"
    ],
    "jsonschema._format.is_host_name": [
        "object"
    ],
    "jsonschema._format.is_idn_host_name": [
        "object"
    ],
    "jsonschema._format.is_uri": [
        "object"
    ],
    "jsonschema._format.is_uri_reference": [
        "object"
    ],
    "jsonschema._format.is_iri": [
        "object"
    ],
    "jsonschema._format.is_iri_reference": [
        "object"
    ],
    "jsonschema._format.is_datetime": [
        "object"
    ],
    "jsonschema._format.is_time": [
        "object"
    ],
    "jsonschema._format.is_regex": [
        "object"
    ],
    "jsonschema._format.is_date": [
        "object"
    ],
    "jsonschema._format.is_draft3_time": [
        "object"
    ],
    "jsonschema._format.is_css_color_code": [
        "object"
    ],
    "jsonschema._format.is_css21_color": [
        "object"
    ],
    "jsonschema._format.is_json_pointer": [
        "object"
    ],
    "jsonschema._format.is_relative_json_pointer": [
        "object"
    ],
    "jsonschema._format.is_uri_template": [
        "object"
    ],
    "jsonschema._format.is_duration": [
        "object"
    ],
    "jsonschema._format.is_uuid": [
        "object"
    ],
    "jsonschema.validators._Validator.ID_OF": [
        "_Schema"
    ],
    "jsonschema.validators._Validator.__init__": [
        "",
        "_Schema",
        "Incomplete | None",
        "Incomplete | None"
    ],
    "jsonschema.validators._Validator.check_schema": [
        "",
        "_Schema",
        "FormatChecker | Unset"
    ],
    "jsonschema.validators._Validator.iter_errors": [
        "",
        "",
        "_Schema | None"
    ],
    "jsonschema.validators._Validator.descend": [
        "",
        "",
        "_Schema",
        "Incomplete | None",
        "Incomplete | None"
    ],
    "jsonschema.validators._Validator.validate": [
        ""
    ],
    "jsonschema.validators._Validator.is_type": [
        "",
        "",
        ""
    ],
    "jsonschema.validators._Validator.is_valid": [
        "",
        "",
        "_Schema | None"
    ],
    "jsonschema.validators.RefResolver.__init__": [
        "",
        "str",
        "dict[str, Incomplete]",
        "SupportsKeysAndGetItem[str, str] | Iterable[tuple[str, str]]",
        "bool",
        "SupportsKeysAndGetItem[str, _Handler] | Iterable[tuple[str, _Handler]]",
        "Incomplete | None",
        "Incomplete | None"
    ],
    "jsonschema.validators.RefResolver.from_schema": [
        "",
        "_Schema",
        ""
    ],
    "jsonschema.validators.RefResolver.push_scope": [
        "",
        ""
    ],
    "jsonschema.validators.RefResolver.pop_scope": [
        ""
    ],
    "jsonschema.validators.RefResolver.resolution_scope": [
        ""
    ],
    "jsonschema.validators.RefResolver.base_uri": [
        ""
    ],
    "jsonschema.validators.RefResolver.in_scope": [
        "",
        ""
    ],
    "jsonschema.validators.RefResolver.resolving": [
        "",
        ""
    ],
    "jsonschema.validators.RefResolver.resolve": [
        "",
        ""
    ],
    "jsonschema.validators.RefResolver.resolve_from_url": [
        "",
        ""
    ],
    "jsonschema.validators.RefResolver.resolve_fragment": [
        "",
        "",
        ""
    ],
    "jsonschema.validators.RefResolver.resolve_remote": [
        "",
        ""
    ],
    "jsonschema.validators.validates": [
        "str"
    ],
    "jsonschema.validators.create": [
        "_Schema",
        "Mapping[str, _ValidatorCallback] | tuple[()]",
        "Incomplete | None",
        "TypeChecker",
        "FormatChecker",
        "Callable[[_Schema], str]",
        "Callable[[_Schema], Iterable[tuple[str, _ValidatorCallback]]]"
    ],
    "jsonschema.validators.extend": [
        "",
        "",
        "Incomplete | None",
        "Incomplete | None",
        "Incomplete | None"
    ],
    "jsonschema.validators.validate": [
        "object",
        "_Schema",
        "type[_Validator] | None"
    ],
    "jsonschema.validators.validator_for": [
        "_Schema | bool",
        ""
    ],
    "jsonschema._validators.patternProperties": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._validators.propertyNames": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._validators.additionalProperties": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._validators.items": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._validators.additionalItems": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._validators.const": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._validators.contains": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._validators.exclusiveMinimum": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._validators.exclusiveMaximum": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._validators.minimum": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._validators.maximum": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._validators.multipleOf": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._validators.minItems": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._validators.maxItems": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._validators.uniqueItems": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._validators.pattern": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._validators.format": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._validators.minLength": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._validators.maxLength": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._validators.dependentRequired": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._validators.dependentSchemas": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._validators.enum": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._validators.ref": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._validators.dynamicRef": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._validators.type": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._validators.properties": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._validators.required": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._validators.minProperties": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._validators.maxProperties": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._validators.allOf": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._validators.anyOf": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._validators.oneOf": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._validators.not_": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._validators.if_": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._validators.unevaluatedItems": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._validators.unevaluatedProperties": [
        "",
        "",
        "",
        ""
    ],
    "jsonschema._validators.prefixItems": [
        "",
        "",
        "",
        ""
    ]
}