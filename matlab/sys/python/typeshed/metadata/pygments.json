{
    "pygments.unistring.combine": [],
    "pygments.unistring.allexcept": [],
    "pygments.styles.__init__.get_style_by_name": [
        ""
    ],
    "pygments.styles.__init__.get_all_styles": [],
    "pygments.styles.__init__.__getattr__": [
        "str"
    ],
    "pygments.token._TokenType.split": [
        ""
    ],
    "pygments.token._TokenType.__contains__": [
        "",
        "_TokenType"
    ],
    "pygments.token._TokenType.__getattr__": [
        "",
        "str"
    ],
    "pygments.token._TokenType.__copy__": [
        ""
    ],
    "pygments.token._TokenType.__deepcopy__": [
        "",
        "Any"
    ],
    "pygments.token.is_token_subtype": [
        "",
        ""
    ],
    "pygments.token.string_to_tokentype": [
        ""
    ],
    "pygments.formatter.Formatter.__init__": [
        "Formatter[str]"
    ],
    "pygments.formatter.Formatter.get_style_defs": [
        "",
        "str"
    ],
    "pygments.formatter.Formatter.format": [
        "",
        "",
        ""
    ],
    "pygments.modeline.get_filetype_from_buffer": [
        "",
        "int"
    ],
    "pygments.filter.Filter.__init__": [
        ""
    ],
    "pygments.filter.Filter.filter": [
        "",
        "Lexer",
        "Iterable[tuple[_TokenType, str]]"
    ],
    "pygments.filter.FunctionFilter.__init__": [
        ""
    ],
    "pygments.filter.FunctionFilter.filter": [
        "",
        "Lexer",
        "Iterable[tuple[_TokenType, str]]"
    ],
    "pygments.filter.apply_filters": [
        "",
        "",
        "Incomplete | None"
    ],
    "pygments.filter.simplefilter": [
        ""
    ],
    "pygments.plugin.iter_entry_points": [
        "str"
    ],
    "pygments.plugin.find_plugin_lexers": [],
    "pygments.plugin.find_plugin_formatters": [],
    "pygments.plugin.find_plugin_styles": [],
    "pygments.plugin.find_plugin_filters": [],
    "pygments.filters.__init__.CodeTagFilter.__init__": [
        ""
    ],
    "pygments.filters.__init__.CodeTagFilter.filter": [
        "",
        "Lexer",
        "Iterable[tuple[_TokenType, str]]"
    ],
    "pygments.filters.__init__.SymbolFilter.__init__": [
        ""
    ],
    "pygments.filters.__init__.SymbolFilter.filter": [
        "",
        "Lexer",
        "Iterable[tuple[_TokenType, str]]"
    ],
    "pygments.filters.__init__.KeywordCaseFilter.__init__": [
        ""
    ],
    "pygments.filters.__init__.KeywordCaseFilter.filter": [
        "",
        "Lexer",
        "Iterable[tuple[_TokenType, str]]"
    ],
    "pygments.filters.__init__.NameHighlightFilter.__init__": [
        ""
    ],
    "pygments.filters.__init__.NameHighlightFilter.filter": [
        "",
        "Lexer",
        "Iterable[tuple[_TokenType, str]]"
    ],
    "pygments.filters.__init__.RaiseOnErrorTokenFilter.__init__": [
        ""
    ],
    "pygments.filters.__init__.RaiseOnErrorTokenFilter.filter": [
        "",
        "Lexer",
        "Iterable[tuple[_TokenType, str]]"
    ],
    "pygments.filters.__init__.VisibleWhitespaceFilter.__init__": [
        ""
    ],
    "pygments.filters.__init__.VisibleWhitespaceFilter.filter": [
        "",
        "Lexer",
        "Iterable[tuple[_TokenType, str]]"
    ],
    "pygments.filters.__init__.GobbleFilter.__init__": [
        ""
    ],
    "pygments.filters.__init__.GobbleFilter.gobble": [
        "",
        "",
        ""
    ],
    "pygments.filters.__init__.GobbleFilter.filter": [
        "",
        "Lexer",
        "Iterable[tuple[_TokenType, str]]"
    ],
    "pygments.filters.__init__.TokenMergeFilter.__init__": [
        ""
    ],
    "pygments.filters.__init__.TokenMergeFilter.filter": [
        "",
        "Lexer",
        "Iterable[tuple[_TokenType, str]]"
    ],
    "pygments.filters.__init__.find_filter_class": [
        ""
    ],
    "pygments.filters.__init__.get_filter_by_name": [
        ""
    ],
    "pygments.filters.__init__.get_all_filters": [],
    "pygments.formatters.latex.LatexFormatter.get_style_defs": [
        "",
        "str"
    ],
    "pygments.formatters.latex.LatexFormatter.format_unencoded": [
        "",
        "",
        ""
    ],
    "pygments.formatters.latex.LatexEmbeddedLexer.__init__": [
        "",
        "",
        "",
        ""
    ],
    "pygments.formatters.latex.LatexEmbeddedLexer.get_tokens_unprocessed": [
        "",
        ""
    ],
    "pygments.formatters.terminal.TerminalFormatter.format": [
        "",
        "",
        ""
    ],
    "pygments.formatters.terminal.TerminalFormatter.format_unencoded": [
        "",
        "",
        ""
    ],
    "pygments.formatters.pangomarkup.PangoMarkupFormatter.format_unencoded": [
        "",
        "",
        ""
    ],
    "pygments.formatters.rtf.RtfFormatter.format_unencoded": [
        "",
        "",
        ""
    ],
    "pygments.formatters.irc.IRCFormatter.format_unencoded": [
        "",
        "",
        ""
    ],
    "pygments.formatters.img.FontManager.__init__": [
        "",
        "",
        "int"
    ],
    "pygments.formatters.img.FontManager.get_char_size": [
        ""
    ],
    "pygments.formatters.img.FontManager.get_text_size": [
        "",
        ""
    ],
    "pygments.formatters.img.FontManager.get_font": [
        "",
        "",
        ""
    ],
    "pygments.formatters.img.FontManager.get_style": [
        "",
        ""
    ],
    "pygments.formatters.img.ImageFormatter.get_style_defs": [
        "",
        "str"
    ],
    "pygments.formatters.img.ImageFormatter.format": [
        "",
        "",
        ""
    ],
    "pygments.formatters.bbcode.BBCodeFormatter.format_unencoded": [
        "",
        "",
        ""
    ],
    "pygments.formatters.terminal256.EscapeSequence.__init__": [
        "",
        "Incomplete | None",
        "Incomplete | None",
        "bool",
        "bool",
        "bool"
    ],
    "pygments.formatters.terminal256.EscapeSequence.escape": [
        "",
        ""
    ],
    "pygments.formatters.terminal256.EscapeSequence.color_string": [
        ""
    ],
    "pygments.formatters.terminal256.EscapeSequence.true_color_string": [
        ""
    ],
    "pygments.formatters.terminal256.EscapeSequence.reset_string": [
        ""
    ],
    "pygments.formatters.terminal256.Terminal256Formatter.format": [
        "",
        "",
        ""
    ],
    "pygments.formatters.terminal256.Terminal256Formatter.format_unencoded": [
        "",
        "",
        ""
    ],
    "pygments.formatters.html.HtmlFormatter.get_style_defs": [
        "",
        "Incomplete | None"
    ],
    "pygments.formatters.html.HtmlFormatter.get_token_style_defs": [
        "",
        "Incomplete | None"
    ],
    "pygments.formatters.html.HtmlFormatter.get_background_style_defs": [
        "",
        "Incomplete | None"
    ],
    "pygments.formatters.html.HtmlFormatter.get_linenos_style_defs": [
        ""
    ],
    "pygments.formatters.html.HtmlFormatter.get_css_prefix": [
        "",
        ""
    ],
    "pygments.formatters.html.HtmlFormatter.wrap": [
        "",
        ""
    ],
    "pygments.formatters.html.HtmlFormatter.format_unencoded": [
        "",
        "",
        ""
    ],
    "pygments.formatters.__init__.get_all_formatters": [],
    "pygments.formatters.__init__.get_formatter_by_name": [
        ""
    ],
    "pygments.formatters.__init__.load_formatter_from_file": [
        "",
        "str"
    ],
    "pygments.formatters.__init__.get_formatter_for_filename": [
        ""
    ],
    "pygments.formatters.other.NullFormatter.format": [
        "",
        "",
        ""
    ],
    "pygments.formatters.other.RawTokenFormatter.format": [
        "",
        "",
        ""
    ],
    "pygments.formatters.other.TestcaseFormatter.format": [
        "",
        "",
        ""
    ],
    "pygments.formatters.svg.SvgFormatter.format_unencoded": [
        "",
        "",
        ""
    ],
    "pygments.style.StyleMeta.__new__": [
        "",
        "",
        "",
        ""
    ],
    "pygments.style.StyleMeta.style_for_token": [
        "",
        "_TokenType"
    ],
    "pygments.style.StyleMeta.styles_token": [
        "",
        "_TokenType"
    ],
    "pygments.style.StyleMeta.list_styles": [
        ""
    ],
    "pygments.style.StyleMeta.__iter__": [
        ""
    ],
    "pygments.style.StyleMeta.__len__": [
        ""
    ],
    "pygments.console.reset_color": [],
    "pygments.console.colorize": [
        "",
        ""
    ],
    "pygments.console.ansiformat": [
        "",
        ""
    ],
    "pygments.lexers.__init__.get_all_lexers": [
        "bool"
    ],
    "pygments.lexers.__init__.find_lexer_class": [
        "str"
    ],
    "pygments.lexers.__init__.find_lexer_class_by_name": [
        "str"
    ],
    "pygments.lexers.__init__.get_lexer_by_name": [
        "str"
    ],
    "pygments.lexers.__init__.load_lexer_from_file": [
        "FileDescriptorOrPath",
        "str"
    ],
    "pygments.lexers.__init__.find_lexer_class_for_filename": [
        "StrPath",
        "str | bytes | None"
    ],
    "pygments.lexers.__init__.get_lexer_for_filename": [
        "StrPath",
        "str | bytes | None"
    ],
    "pygments.lexers.__init__.get_lexer_for_mimetype": [
        "str"
    ],
    "pygments.lexers.__init__.guess_lexer_for_filename": [
        "StrPath",
        "str"
    ],
    "pygments.lexers.__init__.guess_lexer": [
        "str | bytes"
    ],
    "pygments.lexers.__init__.__getattr__": [
        "str"
    ],
    "pygments.lexer.LexerMeta.__new__": [
        "",
        "",
        "",
        ""
    ],
    "pygments.lexer.LexerMeta.analyse_text": [
        "",
        ""
    ],
    "pygments.lexer.Lexer.__init__": [
        ""
    ],
    "pygments.lexer.Lexer.add_filter": [
        "",
        ""
    ],
    "pygments.lexer.Lexer.get_tokens": [
        "",
        "str",
        "bool"
    ],
    "pygments.lexer.Lexer.get_tokens_unprocessed": [
        "",
        "str"
    ],
    "pygments.lexer.DelegatingLexer.__init__": [
        "",
        "",
        "",
        ""
    ],
    "pygments.lexer.DelegatingLexer.get_tokens_unprocessed": [
        "",
        "str"
    ],
    "pygments.lexer.combined.__new__": [
        ""
    ],
    "pygments.lexer.combined.__init__": [
        ""
    ],
    "pygments.lexer._PseudoMatch.__init__": [
        "",
        "",
        ""
    ],
    "pygments.lexer._PseudoMatch.start": [
        "",
        "Incomplete | None"
    ],
    "pygments.lexer._PseudoMatch.end": [
        "",
        "Incomplete | None"
    ],
    "pygments.lexer._PseudoMatch.group": [
        "",
        "Incomplete | None"
    ],
    "pygments.lexer._PseudoMatch.groups": [
        ""
    ],
    "pygments.lexer._PseudoMatch.groupdict": [
        ""
    ],
    "pygments.lexer.default.__init__": [
        "",
        ""
    ],
    "pygments.lexer.words.__init__": [
        "",
        "",
        "str",
        "str"
    ],
    "pygments.lexer.words.get": [
        ""
    ],
    "pygments.lexer.RegexLexerMeta.process_tokendef": [
        "",
        "",
        "Incomplete | None"
    ],
    "pygments.lexer.RegexLexerMeta.get_tokendefs": [
        ""
    ],
    "pygments.lexer.RegexLexerMeta.__call__": [
        ""
    ],
    "pygments.lexer.RegexLexer.get_tokens_unprocessed": [
        "",
        "str",
        "Iterable[str]"
    ],
    "pygments.lexer.LexerContext.__init__": [
        "",
        "",
        "",
        "Incomplete | None",
        "Incomplete | None"
    ],
    "pygments.lexer.ExtendedRegexLexer.get_tokens_unprocessed": [
        "",
        "str | None",
        "LexerContext | None"
    ],
    "pygments.lexer.ProfilingRegexLexer.get_tokens_unprocessed": [
        "",
        "str",
        "Iterable[str]"
    ],
    "pygments.lexer.bygroups": [],
    "pygments.lexer.using": [
        ""
    ],
    "pygments.regexopt.make_charset": [
        ""
    ],
    "pygments.regexopt.regex_opt_inner": [
        "",
        ""
    ],
    "pygments.regexopt.regex_opt": [
        "",
        "str",
        "str"
    ],
    "pygments.sphinxext.PygmentsDoc.run": [
        ""
    ],
    "pygments.sphinxext.PygmentsDoc.document_lexers": [
        ""
    ],
    "pygments.sphinxext.PygmentsDoc.document_formatters": [
        ""
    ],
    "pygments.sphinxext.PygmentsDoc.document_filters": [
        ""
    ],
    "pygments.sphinxext.setup": [
        ""
    ],
    "pygments.cmdline.HelpFormatter.__init__": [
        "",
        "",
        "int",
        "int",
        "Incomplete | None"
    ],
    "pygments.cmdline.main_inner": [
        "",
        ""
    ],
    "pygments.cmdline.main": [
        ""
    ],
    "pygments.__init__.lex": [
        "",
        ""
    ],
    "pygments.__init__.format": [
        "",
        "Formatter[_T]",
        "SupportsWrite[_T]"
    ],
    "pygments.__init__.highlight": [
        "",
        "",
        "Formatter[_T]",
        "SupportsWrite[_T]"
    ],
    "pygments.scanner.Scanner.__init__": [
        "",
        "",
        "int"
    ],
    "pygments.scanner.Scanner.eos": [
        ""
    ],
    "pygments.scanner.Scanner.check": [
        "",
        ""
    ],
    "pygments.scanner.Scanner.test": [
        "",
        ""
    ],
    "pygments.scanner.Scanner.scan": [
        "",
        ""
    ],
    "pygments.scanner.Scanner.get_char": [
        ""
    ],
    "pygments.util.Future.get": [
        ""
    ],
    "pygments.util.UnclosingTextIOWrapper.close": [
        ""
    ],
    "pygments.util.get_choice_opt": [
        "",
        "",
        "",
        "Incomplete | None",
        "bool"
    ],
    "pygments.util.get_bool_opt": [
        "",
        "",
        "Incomplete | None"
    ],
    "pygments.util.get_int_opt": [
        "",
        "",
        "Incomplete | None"
    ],
    "pygments.util.get_list_opt": [
        "",
        "",
        "Incomplete | None"
    ],
    "pygments.util.docstring_headline": [
        ""
    ],
    "pygments.util.make_analysator": [
        ""
    ],
    "pygments.util.shebang_matches": [
        "",
        ""
    ],
    "pygments.util.doctype_matches": [
        "",
        ""
    ],
    "pygments.util.html_doctype_matches": [
        ""
    ],
    "pygments.util.looks_like_xml": [
        ""
    ],
    "pygments.util.surrogatepair": [
        ""
    ],
    "pygments.util.format_lines": [
        "",
        "",
        "bool",
        "int"
    ],
    "pygments.util.duplicates_removed": [
        "",
        ""
    ],
    "pygments.util.guess_decode": [
        ""
    ],
    "pygments.util.guess_decode_from_terminal": [
        "",
        ""
    ],
    "pygments.util.terminal_encoding": [
        ""
    ]
}