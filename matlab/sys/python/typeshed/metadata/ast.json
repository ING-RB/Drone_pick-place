{
    "ast.NodeVisitor.visit": [
        "",
        "AST"
    ],
    "ast.NodeVisitor.generic_visit": [
        "",
        "AST"
    ],
    "ast.NodeVisitor.visit_Module": [
        "",
        "Module"
    ],
    "ast.NodeVisitor.visit_Interactive": [
        "",
        "Interactive"
    ],
    "ast.NodeVisitor.visit_Expression": [
        "",
        "Expression"
    ],
    "ast.NodeVisitor.visit_FunctionDef": [
        "",
        "FunctionDef"
    ],
    "ast.NodeVisitor.visit_AsyncFunctionDef": [
        "",
        "AsyncFunctionDef"
    ],
    "ast.NodeVisitor.visit_ClassDef": [
        "",
        "ClassDef"
    ],
    "ast.NodeVisitor.visit_Return": [
        "",
        "Return"
    ],
    "ast.NodeVisitor.visit_Delete": [
        "",
        "Delete"
    ],
    "ast.NodeVisitor.visit_Assign": [
        "",
        "Assign"
    ],
    "ast.NodeVisitor.visit_AugAssign": [
        "",
        "AugAssign"
    ],
    "ast.NodeVisitor.visit_AnnAssign": [
        "",
        "AnnAssign"
    ],
    "ast.NodeVisitor.visit_For": [
        "",
        "For"
    ],
    "ast.NodeVisitor.visit_AsyncFor": [
        "",
        "AsyncFor"
    ],
    "ast.NodeVisitor.visit_While": [
        "",
        "While"
    ],
    "ast.NodeVisitor.visit_If": [
        "",
        "If"
    ],
    "ast.NodeVisitor.visit_With": [
        "",
        "With"
    ],
    "ast.NodeVisitor.visit_AsyncWith": [
        "",
        "AsyncWith"
    ],
    "ast.NodeVisitor.visit_Raise": [
        "",
        "Raise"
    ],
    "ast.NodeVisitor.visit_Try": [
        "",
        "Try"
    ],
    "ast.NodeVisitor.visit_Assert": [
        "",
        "Assert"
    ],
    "ast.NodeVisitor.visit_Import": [
        "",
        "Import"
    ],
    "ast.NodeVisitor.visit_ImportFrom": [
        "",
        "ImportFrom"
    ],
    "ast.NodeVisitor.visit_Global": [
        "",
        "Global"
    ],
    "ast.NodeVisitor.visit_Nonlocal": [
        "",
        "Nonlocal"
    ],
    "ast.NodeVisitor.visit_Expr": [
        "",
        "Expr"
    ],
    "ast.NodeVisitor.visit_Pass": [
        "",
        "Pass"
    ],
    "ast.NodeVisitor.visit_Break": [
        "",
        "Break"
    ],
    "ast.NodeVisitor.visit_Continue": [
        "",
        "Continue"
    ],
    "ast.NodeVisitor.visit_Slice": [
        "",
        "Slice"
    ],
    "ast.NodeVisitor.visit_BoolOp": [
        "",
        "BoolOp"
    ],
    "ast.NodeVisitor.visit_BinOp": [
        "",
        "BinOp"
    ],
    "ast.NodeVisitor.visit_UnaryOp": [
        "",
        "UnaryOp"
    ],
    "ast.NodeVisitor.visit_Lambda": [
        "",
        "Lambda"
    ],
    "ast.NodeVisitor.visit_IfExp": [
        "",
        "IfExp"
    ],
    "ast.NodeVisitor.visit_Dict": [
        "",
        "Dict"
    ],
    "ast.NodeVisitor.visit_Set": [
        "",
        "Set"
    ],
    "ast.NodeVisitor.visit_ListComp": [
        "",
        "ListComp"
    ],
    "ast.NodeVisitor.visit_SetComp": [
        "",
        "SetComp"
    ],
    "ast.NodeVisitor.visit_DictComp": [
        "",
        "DictComp"
    ],
    "ast.NodeVisitor.visit_GeneratorExp": [
        "",
        "GeneratorExp"
    ],
    "ast.NodeVisitor.visit_Await": [
        "",
        "Await"
    ],
    "ast.NodeVisitor.visit_Yield": [
        "",
        "Yield"
    ],
    "ast.NodeVisitor.visit_YieldFrom": [
        "",
        "YieldFrom"
    ],
    "ast.NodeVisitor.visit_Compare": [
        "",
        "Compare"
    ],
    "ast.NodeVisitor.visit_Call": [
        "",
        "Call"
    ],
    "ast.NodeVisitor.visit_FormattedValue": [
        "",
        "FormattedValue"
    ],
    "ast.NodeVisitor.visit_JoinedStr": [
        "",
        "JoinedStr"
    ],
    "ast.NodeVisitor.visit_Constant": [
        "",
        "Constant"
    ],
    "ast.NodeVisitor.visit_Attribute": [
        "",
        "Attribute"
    ],
    "ast.NodeVisitor.visit_Subscript": [
        "",
        "Subscript"
    ],
    "ast.NodeVisitor.visit_Starred": [
        "",
        "Starred"
    ],
    "ast.NodeVisitor.visit_Name": [
        "",
        "Name"
    ],
    "ast.NodeVisitor.visit_List": [
        "",
        "List"
    ],
    "ast.NodeVisitor.visit_Tuple": [
        "",
        "Tuple"
    ],
    "ast.NodeVisitor.visit_Del": [
        "",
        "Del"
    ],
    "ast.NodeVisitor.visit_Load": [
        "",
        "Load"
    ],
    "ast.NodeVisitor.visit_Store": [
        "",
        "Store"
    ],
    "ast.NodeVisitor.visit_And": [
        "",
        "And"
    ],
    "ast.NodeVisitor.visit_Or": [
        "",
        "Or"
    ],
    "ast.NodeVisitor.visit_Add": [
        "",
        "Add"
    ],
    "ast.NodeVisitor.visit_BitAnd": [
        "",
        "BitAnd"
    ],
    "ast.NodeVisitor.visit_BitOr": [
        "",
        "BitOr"
    ],
    "ast.NodeVisitor.visit_BitXor": [
        "",
        "BitXor"
    ],
    "ast.NodeVisitor.visit_Div": [
        "",
        "Div"
    ],
    "ast.NodeVisitor.visit_FloorDiv": [
        "",
        "FloorDiv"
    ],
    "ast.NodeVisitor.visit_LShift": [
        "",
        "LShift"
    ],
    "ast.NodeVisitor.visit_Mod": [
        "",
        "Mod"
    ],
    "ast.NodeVisitor.visit_Mult": [
        "",
        "Mult"
    ],
    "ast.NodeVisitor.visit_MatMult": [
        "",
        "MatMult"
    ],
    "ast.NodeVisitor.visit_Pow": [
        "",
        "Pow"
    ],
    "ast.NodeVisitor.visit_RShift": [
        "",
        "RShift"
    ],
    "ast.NodeVisitor.visit_Sub": [
        "",
        "Sub"
    ],
    "ast.NodeVisitor.visit_Invert": [
        "",
        "Invert"
    ],
    "ast.NodeVisitor.visit_Not": [
        "",
        "Not"
    ],
    "ast.NodeVisitor.visit_UAdd": [
        "",
        "UAdd"
    ],
    "ast.NodeVisitor.visit_USub": [
        "",
        "USub"
    ],
    "ast.NodeVisitor.visit_Eq": [
        "",
        "Eq"
    ],
    "ast.NodeVisitor.visit_Gt": [
        "",
        "Gt"
    ],
    "ast.NodeVisitor.visit_GtE": [
        "",
        "GtE"
    ],
    "ast.NodeVisitor.visit_In": [
        "",
        "In"
    ],
    "ast.NodeVisitor.visit_Is": [
        "",
        "Is"
    ],
    "ast.NodeVisitor.visit_IsNot": [
        "",
        "IsNot"
    ],
    "ast.NodeVisitor.visit_Lt": [
        "",
        "Lt"
    ],
    "ast.NodeVisitor.visit_LtE": [
        "",
        "LtE"
    ],
    "ast.NodeVisitor.visit_NotEq": [
        "",
        "NotEq"
    ],
    "ast.NodeVisitor.visit_NotIn": [
        "",
        "NotIn"
    ],
    "ast.NodeVisitor.visit_comprehension": [
        "",
        "comprehension"
    ],
    "ast.NodeVisitor.visit_ExceptHandler": [
        "",
        "ExceptHandler"
    ],
    "ast.NodeVisitor.visit_arguments": [
        "",
        "arguments"
    ],
    "ast.NodeVisitor.visit_arg": [
        "",
        "arg"
    ],
    "ast.NodeVisitor.visit_keyword": [
        "",
        "keyword"
    ],
    "ast.NodeVisitor.visit_alias": [
        "",
        "alias"
    ],
    "ast.NodeVisitor.visit_withitem": [
        "",
        "withitem"
    ],
    "ast.NodeVisitor.visit_ExtSlice": [
        "",
        "ExtSlice"
    ],
    "ast.NodeVisitor.visit_Index": [
        "",
        "Index"
    ],
    "ast.NodeVisitor.visit_Suite": [
        "",
        "Suite"
    ],
    "ast.NodeVisitor.visit_AugLoad": [
        "",
        "AugLoad"
    ],
    "ast.NodeVisitor.visit_AugStore": [
        "",
        "AugStore"
    ],
    "ast.NodeVisitor.visit_Param": [
        "",
        "Param"
    ],
    "ast.NodeVisitor.visit_Num": [
        "",
        "Num"
    ],
    "ast.NodeVisitor.visit_Str": [
        "",
        "Str"
    ],
    "ast.NodeVisitor.visit_Bytes": [
        "",
        "Bytes"
    ],
    "ast.NodeVisitor.visit_NameConstant": [
        "",
        "NameConstant"
    ],
    "ast.NodeVisitor.visit_Ellipsis": [
        "",
        "Ellipsis"
    ],
    "ast.NodeTransformer.generic_visit": [
        "",
        "AST"
    ],
    "ast.copy_location": [
        "_T",
        "AST"
    ],
    "ast.fix_missing_locations": [
        "_T"
    ],
    "ast.get_docstring": [
        "AsyncFunctionDef | FunctionDef | ClassDef | Module",
        "bool"
    ],
    "ast.increment_lineno": [
        "_T",
        "int"
    ],
    "ast.iter_child_nodes": [
        "AST"
    ],
    "ast.iter_fields": [
        "AST"
    ],
    "ast.literal_eval": [
        "str | AST"
    ],
    "ast.walk": [
        "AST"
    ]
}