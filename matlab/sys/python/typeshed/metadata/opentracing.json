{
    "opentracing.mocktracer.context.SpanContext.__init__": [
        "",
        "int | None",
        "int | None",
        "dict[str, str] | None"
    ],
    "opentracing.mocktracer.context.SpanContext.baggage": [
        ""
    ],
    "opentracing.mocktracer.context.SpanContext.with_baggage_item": [
        "",
        "str",
        "str"
    ],
    "opentracing.mocktracer.text_propagator.TextPropagator.inject": [
        "",
        "SpanContext",
        "dict[Any, Any]"
    ],
    "opentracing.mocktracer.text_propagator.TextPropagator.extract": [
        "",
        "dict[Any, Any]"
    ],
    "opentracing.mocktracer.propagator.Propagator.inject": [
        "",
        "SpanContext",
        "dict[Any, Any]"
    ],
    "opentracing.mocktracer.propagator.Propagator.extract": [
        "",
        "dict[Any, Any]"
    ],
    "opentracing.mocktracer.span.MockSpan.__init__": [
        "",
        "Tracer",
        "str | None",
        "SpanContext | None",
        "int | None",
        "dict[str, Any] | None",
        "float | None"
    ],
    "opentracing.mocktracer.span.MockSpan.tracer": [
        ""
    ],
    "opentracing.mocktracer.span.MockSpan.context": [
        ""
    ],
    "opentracing.mocktracer.span.MockSpan.set_operation_name": [
        "",
        "str"
    ],
    "opentracing.mocktracer.span.MockSpan.set_tag": [
        "",
        "str",
        "str | bool | float"
    ],
    "opentracing.mocktracer.span.MockSpan.log_kv": [
        "",
        "dict[str, Any]",
        "float | None"
    ],
    "opentracing.mocktracer.span.MockSpan.set_baggage_item": [
        "",
        "str",
        "str"
    ],
    "opentracing.mocktracer.span.LogData.__init__": [
        "",
        "dict[str, Any]",
        "float | None"
    ],
    "opentracing.mocktracer.tracer.MockTracer.__init__": [
        "",
        "ScopeManager | None"
    ],
    "opentracing.mocktracer.tracer.MockTracer.active_span": [
        ""
    ],
    "opentracing.mocktracer.tracer.MockTracer.register_propagator": [
        "",
        "str",
        "Propagator"
    ],
    "opentracing.mocktracer.tracer.MockTracer.finished_spans": [
        ""
    ],
    "opentracing.mocktracer.tracer.MockTracer.reset": [
        ""
    ],
    "opentracing.mocktracer.tracer.MockTracer.start_span": [
        "",
        "str | None",
        "Span | SpanContext | None",
        "list[Reference] | None",
        "dict[Any, Any] | None",
        "float | None",
        "bool"
    ],
    "opentracing.mocktracer.tracer.MockTracer.extract": [
        "",
        "str",
        "dict[Any, Any]"
    ],
    "opentracing.mocktracer.binary_propagator.BinaryPropagator.inject": [
        "",
        "SpanContext",
        "dict[Any, Any]"
    ],
    "opentracing.mocktracer.binary_propagator.BinaryPropagator.extract": [
        "",
        "dict[Any, Any]"
    ],
    "opentracing.span.SpanContext.baggage": [
        ""
    ],
    "opentracing.span.Span.__init__": [
        "",
        "Tracer",
        "SpanContext"
    ],
    "opentracing.span.Span.context": [
        ""
    ],
    "opentracing.span.Span.tracer": [
        ""
    ],
    "opentracing.span.Span.set_operation_name": [
        "",
        "str"
    ],
    "opentracing.span.Span.finish": [
        "",
        "float | None"
    ],
    "opentracing.span.Span.set_tag": [
        "",
        "str",
        "str | bool | float"
    ],
    "opentracing.span.Span.log_kv": [
        "",
        "dict[str, Any]",
        "float | None"
    ],
    "opentracing.span.Span.set_baggage_item": [
        "",
        "str",
        "str"
    ],
    "opentracing.span.Span.get_baggage_item": [
        "",
        "str"
    ],
    "opentracing.span.Span.__enter__": [
        ""
    ],
    "opentracing.span.Span.__exit__": [
        "",
        "type[BaseException] | None",
        "BaseException | None",
        "TracebackType | None"
    ],
    "opentracing.span.Span.log_event": [
        "",
        "Any",
        "Incomplete | None"
    ],
    "opentracing.span.Span.log": [
        ""
    ],
    "opentracing.__init__.global_tracer": [],
    "opentracing.__init__.set_global_tracer": [
        "Tracer"
    ],
    "opentracing.__init__.is_global_tracer_registered": [],
    "opentracing.tracer.Tracer.__init__": [
        "",
        "ScopeManager | None"
    ],
    "opentracing.tracer.Tracer.scope_manager": [
        ""
    ],
    "opentracing.tracer.Tracer.active_span": [
        ""
    ],
    "opentracing.tracer.Tracer.start_active_span": [
        "",
        "str",
        "Span | SpanContext | None",
        "list[Reference] | None",
        "dict[Any, Any] | None",
        "float | None",
        "bool",
        "bool"
    ],
    "opentracing.tracer.Tracer.start_span": [
        "",
        "str | None",
        "Span | SpanContext | None",
        "list[Reference] | None",
        "dict[Any, Any] | None",
        "float | None",
        "bool"
    ],
    "opentracing.tracer.Tracer.inject": [
        "",
        "SpanContext",
        "str",
        "dict[Any, Any]"
    ],
    "opentracing.tracer.Tracer.extract": [
        "",
        "str",
        "dict[Any, Any]"
    ],
    "opentracing.tracer.child_of": [
        "SpanContext | None"
    ],
    "opentracing.tracer.follows_from": [
        "SpanContext | None"
    ],
    "opentracing.tracer.start_child_span": [
        "Span",
        "str",
        "dict[Any, Any] | None",
        "float | None"
    ],
    "opentracing.scope_manager.ScopeManager.__init__": [
        ""
    ],
    "opentracing.scope_manager.ScopeManager.activate": [
        "",
        "Span",
        "bool"
    ],
    "opentracing.scope_manager.ScopeManager.active": [
        ""
    ],
    "opentracing.scope.Scope.__init__": [
        "",
        "ScopeManager",
        "Span"
    ],
    "opentracing.scope.Scope.span": [
        ""
    ],
    "opentracing.scope.Scope.manager": [
        ""
    ],
    "opentracing.scope.Scope.close": [
        ""
    ],
    "opentracing.scope.Scope.__enter__": [
        ""
    ],
    "opentracing.scope.Scope.__exit__": [
        "",
        "type[BaseException] | None",
        "BaseException | None",
        "TracebackType | None"
    ],
    "opentracing.harness.scope_check.ScopeCompatibilityCheckMixin.scope_manager": [
        ""
    ],
    "opentracing.harness.scope_check.ScopeCompatibilityCheckMixin.run_test": [
        "",
        "Callable[[], object]"
    ],
    "opentracing.harness.scope_check.ScopeCompatibilityCheckMixin.test_missing_active_external": [
        ""
    ],
    "opentracing.harness.scope_check.ScopeCompatibilityCheckMixin.test_missing_active": [
        ""
    ],
    "opentracing.harness.scope_check.ScopeCompatibilityCheckMixin.test_activate": [
        ""
    ],
    "opentracing.harness.scope_check.ScopeCompatibilityCheckMixin.test_activate_external": [
        ""
    ],
    "opentracing.harness.scope_check.ScopeCompatibilityCheckMixin.test_activate_finish_on_close": [
        ""
    ],
    "opentracing.harness.scope_check.ScopeCompatibilityCheckMixin.test_activate_nested": [
        ""
    ],
    "opentracing.harness.scope_check.ScopeCompatibilityCheckMixin.test_activate_finish_on_close_nested": [
        ""
    ],
    "opentracing.harness.scope_check.ScopeCompatibilityCheckMixin.test_close_wrong_order": [
        ""
    ],
    "opentracing.harness.api_check.APICompatibilityCheckMixin.tracer": [
        ""
    ],
    "opentracing.harness.api_check.APICompatibilityCheckMixin.check_baggage_values": [
        ""
    ],
    "opentracing.harness.api_check.APICompatibilityCheckMixin.check_scope_manager": [
        ""
    ],
    "opentracing.harness.api_check.APICompatibilityCheckMixin.is_parent": [
        "",
        "Span",
        "Span"
    ],
    "opentracing.harness.api_check.APICompatibilityCheckMixin.test_active_span": [
        ""
    ],
    "opentracing.harness.api_check.APICompatibilityCheckMixin.test_start_active_span": [
        ""
    ],
    "opentracing.harness.api_check.APICompatibilityCheckMixin.test_start_active_span_parent": [
        ""
    ],
    "opentracing.harness.api_check.APICompatibilityCheckMixin.test_start_active_span_ignore_active_span": [
        ""
    ],
    "opentracing.harness.api_check.APICompatibilityCheckMixin.test_start_active_span_not_finish_on_close": [
        ""
    ],
    "opentracing.harness.api_check.APICompatibilityCheckMixin.test_start_active_span_finish_on_close": [
        ""
    ],
    "opentracing.harness.api_check.APICompatibilityCheckMixin.test_start_active_span_default_finish_on_close": [
        ""
    ],
    "opentracing.harness.api_check.APICompatibilityCheckMixin.test_start_span": [
        ""
    ],
    "opentracing.harness.api_check.APICompatibilityCheckMixin.test_start_span_propagation": [
        ""
    ],
    "opentracing.harness.api_check.APICompatibilityCheckMixin.test_start_span_propagation_ignore_active_span": [
        ""
    ],
    "opentracing.harness.api_check.APICompatibilityCheckMixin.test_start_span_with_parent": [
        ""
    ],
    "opentracing.harness.api_check.APICompatibilityCheckMixin.test_start_child_span": [
        ""
    ],
    "opentracing.harness.api_check.APICompatibilityCheckMixin.test_set_operation_name": [
        ""
    ],
    "opentracing.harness.api_check.APICompatibilityCheckMixin.test_span_as_context_manager": [
        ""
    ],
    "opentracing.harness.api_check.APICompatibilityCheckMixin.test_span_tag_value_types": [
        ""
    ],
    "opentracing.harness.api_check.APICompatibilityCheckMixin.test_span_tags_with_chaining": [
        ""
    ],
    "opentracing.harness.api_check.APICompatibilityCheckMixin.test_span_logs": [
        ""
    ],
    "opentracing.harness.api_check.APICompatibilityCheckMixin.test_span_baggage": [
        ""
    ],
    "opentracing.harness.api_check.APICompatibilityCheckMixin.test_context_baggage": [
        ""
    ],
    "opentracing.harness.api_check.APICompatibilityCheckMixin.test_text_propagation": [
        ""
    ],
    "opentracing.harness.api_check.APICompatibilityCheckMixin.test_binary_propagation": [
        ""
    ],
    "opentracing.harness.api_check.APICompatibilityCheckMixin.test_mandatory_formats": [
        ""
    ],
    "opentracing.harness.api_check.APICompatibilityCheckMixin.test_unknown_format": [
        ""
    ],
    "opentracing.harness.api_check.APICompatibilityCheckMixin.test_tracer_start_active_span_scope": [
        ""
    ],
    "opentracing.harness.api_check.APICompatibilityCheckMixin.test_tracer_start_span_scope": [
        ""
    ],
    "opentracing.scope_managers.gevent.GeventScopeManager.activate": [
        "",
        "Span",
        "bool"
    ],
    "opentracing.scope_managers.gevent.GeventScopeManager.active": [
        ""
    ],
    "opentracing.scope_managers.asyncio.AsyncioScopeManager.activate": [
        "",
        "Span",
        "bool"
    ],
    "opentracing.scope_managers.asyncio.AsyncioScopeManager.active": [
        ""
    ],
    "opentracing.scope_managers.__init__.ThreadLocalScopeManager.__init__": [
        ""
    ],
    "opentracing.scope_managers.__init__.ThreadLocalScopeManager.activate": [
        "",
        "Span",
        "bool"
    ],
    "opentracing.scope_managers.__init__.ThreadLocalScopeManager.active": [
        ""
    ],
    "opentracing.scope_managers.tornado.TornadoScopeManager.activate": [
        "",
        "Span",
        "bool"
    ],
    "opentracing.scope_managers.tornado.TornadoScopeManager.active": [
        ""
    ],
    "opentracing.scope_managers.tornado.ThreadSafeStackContext.__init__": [
        ""
    ],
    "opentracing.scope_managers.tornado.tracer_stack_context": [],
    "opentracing.scope_managers.contextvars.ContextVarsScopeManager.activate": [
        "",
        "Span",
        "bool"
    ],
    "opentracing.scope_managers.contextvars.ContextVarsScopeManager.active": [
        ""
    ],
    "opentracing.scope_managers.contextvars.no_parent_scope": []
}