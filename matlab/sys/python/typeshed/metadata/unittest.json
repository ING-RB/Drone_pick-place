{
    "unittest.case._BaseTestCaseContext.__init__": [
        "",
        "TestCase"
    ],
    "unittest.case.SkipTest.__init__": [
        "",
        "str"
    ],
    "unittest.case.TestCase.__init__": [
        "",
        "str"
    ],
    "unittest.case.TestCase.__eq__": [
        "",
        "object"
    ],
    "unittest.case.TestCase.__hash__": [
        ""
    ],
    "unittest.case.TestCase.setUp": [
        ""
    ],
    "unittest.case.TestCase.tearDown": [
        ""
    ],
    "unittest.case.TestCase.setUpClass": [
        ""
    ],
    "unittest.case.TestCase.tearDownClass": [
        ""
    ],
    "unittest.case.TestCase.run": [
        "",
        "unittest.result.TestResult | None"
    ],
    "unittest.case.TestCase.__call__": [
        "",
        "unittest.result.TestResult | None"
    ],
    "unittest.case.TestCase.skipTest": [
        "",
        "Any"
    ],
    "unittest.case.TestCase.subTest": [
        "",
        "Any"
    ],
    "unittest.case.TestCase.debug": [
        ""
    ],
    "unittest.case.TestCase.assertEqual": [
        "",
        "Any",
        "Any",
        "Any"
    ],
    "unittest.case.TestCase.assertNotEqual": [
        "",
        "Any",
        "Any",
        "Any"
    ],
    "unittest.case.TestCase.assertTrue": [
        "",
        "Any",
        "Any"
    ],
    "unittest.case.TestCase.assertFalse": [
        "",
        "Any",
        "Any"
    ],
    "unittest.case.TestCase.assertIs": [
        "",
        "object",
        "object",
        "Any"
    ],
    "unittest.case.TestCase.assertIsNot": [
        "",
        "object",
        "object",
        "Any"
    ],
    "unittest.case.TestCase.assertIsNone": [
        "",
        "object",
        "Any"
    ],
    "unittest.case.TestCase.assertIsNotNone": [
        "",
        "object",
        "Any"
    ],
    "unittest.case.TestCase.assertIn": [
        "",
        "Any",
        "Iterable[Any] | Container[Any]",
        "Any"
    ],
    "unittest.case.TestCase.assertNotIn": [
        "",
        "Any",
        "Iterable[Any] | Container[Any]",
        "Any"
    ],
    "unittest.case.TestCase.assertIsInstance": [
        "",
        "object",
        "_ClassInfo",
        "Any"
    ],
    "unittest.case.TestCase.assertNotIsInstance": [
        "",
        "object",
        "_ClassInfo",
        "Any"
    ],
    "unittest.case.TestCase.assertGreater": [
        "",
        "SupportsDunderGT[_T]",
        "_T",
        "Any"
    ],
    "unittest.case.TestCase.assertGreaterEqual": [
        "",
        "SupportsDunderGE[_T]",
        "_T",
        "Any"
    ],
    "unittest.case.TestCase.assertLess": [
        "",
        "SupportsDunderLT[_T]",
        "_T",
        "Any"
    ],
    "unittest.case.TestCase.assertLessEqual": [
        "",
        "SupportsDunderLT[_T]",
        "_T",
        "Any"
    ],
    "unittest.case.TestCase.assertRaises": [
        "",
        "type[BaseException] | tuple[type[BaseException], ...]",
        "Callable[..., Any]"
    ],
    "unittest.case.TestCase.assertRaisesRegex": [
        "",
        "type[BaseException] | tuple[type[BaseException], ...]",
        "str | Pattern[str]",
        "Callable[..., Any]"
    ],
    "unittest.case.TestCase.assertWarns": [
        "",
        "type[Warning] | tuple[type[Warning], ...]",
        "Callable[_P, Any]"
    ],
    "unittest.case.TestCase.assertWarnsRegex": [
        "",
        "type[Warning] | tuple[type[Warning], ...]",
        "str | Pattern[str]",
        "Callable[_P, Any]"
    ],
    "unittest.case.TestCase.assertLogs": [
        "",
        "str | logging.Logger | None",
        "int | str | None"
    ],
    "unittest.case.TestCase.assertAlmostEqual": [
        "",
        "_S",
        "_S",
        "None",
        "Any",
        "_SupportsAbsAndDunderGE"
    ],
    "unittest.case.TestCase.assertNotAlmostEqual": [
        "",
        "_S",
        "_S",
        "None",
        "Any",
        "_SupportsAbsAndDunderGE"
    ],
    "unittest.case.TestCase.assertRegex": [
        "",
        "AnyStr",
        "AnyStr | Pattern[AnyStr]",
        "Any"
    ],
    "unittest.case.TestCase.assertNotRegex": [
        "",
        "AnyStr",
        "AnyStr | Pattern[AnyStr]",
        "Any"
    ],
    "unittest.case.TestCase.assertCountEqual": [
        "",
        "Iterable[Any]",
        "Iterable[Any]",
        "Any"
    ],
    "unittest.case.TestCase.addTypeEqualityFunc": [
        "",
        "type[Any]",
        "Callable[..., None]"
    ],
    "unittest.case.TestCase.assertMultiLineEqual": [
        "",
        "str",
        "str",
        "Any"
    ],
    "unittest.case.TestCase.assertSequenceEqual": [
        "",
        "Sequence[Any]",
        "Sequence[Any]",
        "Any",
        "type[Sequence[Any]] | None"
    ],
    "unittest.case.TestCase.assertListEqual": [
        "",
        "list[Any]",
        "list[Any]",
        "Any"
    ],
    "unittest.case.TestCase.assertTupleEqual": [
        "",
        "tuple[Any, ...]",
        "tuple[Any, ...]",
        "Any"
    ],
    "unittest.case.TestCase.assertSetEqual": [
        "",
        "AbstractSet[object]",
        "AbstractSet[object]",
        "Any"
    ],
    "unittest.case.TestCase.assertDictEqual": [
        "",
        "Mapping[Any, object]",
        "Mapping[Any, object]",
        "Any"
    ],
    "unittest.case.TestCase.fail": [
        "",
        "Any"
    ],
    "unittest.case.TestCase.countTestCases": [
        ""
    ],
    "unittest.case.TestCase.defaultTestResult": [
        ""
    ],
    "unittest.case.TestCase.id": [
        ""
    ],
    "unittest.case.TestCase.shortDescription": [
        ""
    ],
    "unittest.case.TestCase.doCleanups": [
        ""
    ],
    "unittest.case.TestCase._formatMessage": [
        "",
        "str | None",
        "str"
    ],
    "unittest.case.TestCase._getAssertEqualityFunc": [
        "",
        "Any",
        "Any"
    ],
    "unittest.case.FunctionTestCase.__init__": [
        "",
        "Callable[[], Any]",
        "Callable[[], Any] | None",
        "Callable[[], Any] | None",
        "str | None"
    ],
    "unittest.case.FunctionTestCase.runTest": [
        ""
    ],
    "unittest.case.FunctionTestCase.__hash__": [
        ""
    ],
    "unittest.case.FunctionTestCase.__eq__": [
        "",
        "object"
    ],
    "unittest.case._AssertRaisesContext.__enter__": [
        ""
    ],
    "unittest.case._AssertRaisesContext.__exit__": [
        "",
        "type[BaseException] | None",
        "BaseException | None",
        "TracebackType | None"
    ],
    "unittest.case._AssertWarnsContext.__enter__": [
        ""
    ],
    "unittest.case._AssertWarnsContext.__exit__": [
        "",
        "type[BaseException] | None",
        "BaseException | None",
        "TracebackType | None"
    ],
    "unittest.case.expectedFailure": [
        "_FT"
    ],
    "unittest.case.skip": [
        "str"
    ],
    "unittest.case.skipIf": [
        "object",
        "str"
    ],
    "unittest.case.skipUnless": [
        "object",
        "str"
    ],
    "unittest.async_case.IsolatedAsyncioTestCase.addAsyncCleanup": [
        "",
        "Callable[_P, Awaitable[object]]"
    ],
    "unittest.runner.TextTestResult.__init__": [
        "",
        "TextIO",
        "bool",
        "int"
    ],
    "unittest.runner.TextTestResult.getDescription": [
        "",
        "unittest.case.TestCase"
    ],
    "unittest.runner.TextTestResult.printErrorList": [
        "",
        "str",
        "Iterable[tuple[unittest.case.TestCase, str]]"
    ],
    "unittest.runner.TextTestRunner.__init__": [
        "",
        "TextIO | None",
        "bool",
        "int",
        "bool",
        "bool",
        "_ResultClassType | None",
        "type[Warning] | None"
    ],
    "unittest.runner.TextTestRunner._makeResult": [
        ""
    ],
    "unittest.runner.TextTestRunner.run": [
        "",
        "unittest.suite.TestSuite | unittest.case.TestCase"
    ],
    "unittest.signals.installHandler": [],
    "unittest.signals.registerResult": [
        "unittest.result.TestResult"
    ],
    "unittest.signals.removeResult": [
        "unittest.result.TestResult"
    ],
    "unittest.signals.removeHandler": [
        "None"
    ],
    "unittest._log._AssertLogsContext.__enter__": [
        ""
    ],
    "unittest._log._AssertLogsContext.__exit__": [
        "",
        "type[BaseException] | None",
        "BaseException | None",
        "TracebackType | None"
    ],
    "unittest.util._shorten": [
        "str",
        "int",
        "int"
    ],
    "unittest.util._common_shorten_repr": [],
    "unittest.util.safe_repr": [
        "object",
        "bool"
    ],
    "unittest.util.strclass": [
        "type"
    ],
    "unittest.util.sorted_list_difference": [
        "Sequence[_T]",
        "Sequence[_T]"
    ],
    "unittest.util.unorderable_list_difference": [
        "Sequence[_T]",
        "Sequence[_T]"
    ],
    "unittest.util.three_way_cmp": [
        "Any",
        "Any"
    ],
    "unittest.util._count_diff_all_purpose": [
        "Sequence[_T]",
        "Sequence[_T]"
    ],
    "unittest.util._count_diff_hashable": [
        "Sequence[_T]",
        "Sequence[_T]"
    ],
    "unittest.loader.TestLoader.loadTestsFromTestCase": [
        "",
        "type[unittest.case.TestCase]"
    ],
    "unittest.loader.TestLoader.loadTestsFromModule": [
        "",
        "ModuleType"
    ],
    "unittest.loader.TestLoader.loadTestsFromName": [
        "",
        "str",
        "ModuleType | None"
    ],
    "unittest.loader.TestLoader.loadTestsFromNames": [
        "",
        "Sequence[str]",
        "ModuleType | None"
    ],
    "unittest.loader.TestLoader.getTestCaseNames": [
        "",
        "type[unittest.case.TestCase]"
    ],
    "unittest.loader.TestLoader.discover": [
        "",
        "str",
        "str",
        "str | None"
    ],
    "unittest.loader.TestLoader._match_path": [
        "",
        "str",
        "str",
        "str"
    ],
    "unittest.loader.getTestCaseNames": [
        "type[unittest.case.TestCase]",
        "str",
        "_SortComparisonMethod",
        "list[str] | None"
    ],
    "unittest.loader.makeSuite": [
        "type[unittest.case.TestCase]",
        "str",
        "_SortComparisonMethod",
        "_SuiteClass"
    ],
    "unittest.loader.findTestCases": [
        "ModuleType",
        "str",
        "_SortComparisonMethod",
        "_SuiteClass"
    ],
    "unittest.__init__.load_tests": [
        "TestLoader",
        "TestSuite",
        "str | None"
    ],
    "unittest.__init__.__dir__": [],
    "unittest.result.TestResult.__init__": [
        "",
        "TextIO | None",
        "bool | None",
        "int | None"
    ],
    "unittest.result.TestResult.printErrors": [
        ""
    ],
    "unittest.result.TestResult.wasSuccessful": [
        ""
    ],
    "unittest.result.TestResult.stop": [
        ""
    ],
    "unittest.result.TestResult.startTest": [
        "",
        "unittest.case.TestCase"
    ],
    "unittest.result.TestResult.stopTest": [
        "",
        "unittest.case.TestCase"
    ],
    "unittest.result.TestResult.startTestRun": [
        ""
    ],
    "unittest.result.TestResult.stopTestRun": [
        ""
    ],
    "unittest.result.TestResult.addError": [
        "",
        "unittest.case.TestCase",
        "OptExcInfo"
    ],
    "unittest.result.TestResult.addFailure": [
        "",
        "unittest.case.TestCase",
        "OptExcInfo"
    ],
    "unittest.result.TestResult.addSuccess": [
        "",
        "unittest.case.TestCase"
    ],
    "unittest.result.TestResult.addSkip": [
        "",
        "unittest.case.TestCase",
        "str"
    ],
    "unittest.result.TestResult.addExpectedFailure": [
        "",
        "unittest.case.TestCase",
        "OptExcInfo"
    ],
    "unittest.result.TestResult.addUnexpectedSuccess": [
        "",
        "unittest.case.TestCase"
    ],
    "unittest.result.TestResult.addSubTest": [
        "",
        "unittest.case.TestCase",
        "unittest.case.TestCase",
        "OptExcInfo | None"
    ],
    "unittest.result.failfast": [
        "_F"
    ],
    "unittest.mock._SentinelObject.__init__": [
        "",
        "Any"
    ],
    "unittest.mock._Sentinel.__getattr__": [
        "",
        "str"
    ],
    "unittest.mock._Call.__new__": [
        "",
        "_CallValue",
        "str | None",
        "Any | None",
        "bool",
        "bool"
    ],
    "unittest.mock._Call.__init__": [
        "",
        "_CallValue",
        "str | None",
        "Any | None",
        "bool",
        "bool"
    ],
    "unittest.mock._Call.__eq__": [
        "",
        "object"
    ],
    "unittest.mock._Call.__ne__": [
        "",
        "object"
    ],
    "unittest.mock._Call.__call__": [
        ""
    ],
    "unittest.mock._Call.__getattr__": [
        "",
        "str"
    ],
    "unittest.mock._Call.__getattribute__": [
        "",
        "str"
    ],
    "unittest.mock._Call.call_list": [
        ""
    ],
    "unittest.mock._CallList.__contains__": [
        "",
        "Any"
    ],
    "unittest.mock.Base.__init__": [
        ""
    ],
    "unittest.mock.NonCallableMock.__new__": [
        ""
    ],
    "unittest.mock.NonCallableMock.__init__": [
        "",
        "list[str] | object | type[object] | None",
        "Any | None",
        "str | None",
        "list[str] | object | type[object] | None",
        "NonCallableMock | None",
        "Any | None",
        "str",
        "NonCallableMock | None",
        "bool",
        "bool | None",
        "bool"
    ],
    "unittest.mock.NonCallableMock.__getattr__": [
        "",
        "str"
    ],
    "unittest.mock.NonCallableMock.__delattr__": [
        "",
        "str"
    ],
    "unittest.mock.NonCallableMock.__setattr__": [
        "",
        "str",
        "Any"
    ],
    "unittest.mock.NonCallableMock.__dir__": [
        ""
    ],
    "unittest.mock.NonCallableMock.reset_mock": [
        "",
        "Any"
    ],
    "unittest.mock.NonCallableMock._extract_mock_name": [
        ""
    ],
    "unittest.mock.NonCallableMock._get_call_signature_from_name": [
        "",
        "str"
    ],
    "unittest.mock.NonCallableMock.assert_any_call": [
        ""
    ],
    "unittest.mock.NonCallableMock.assert_has_calls": [
        "",
        "Sequence[_Call]",
        "bool"
    ],
    "unittest.mock.NonCallableMock.mock_add_spec": [
        "",
        "Any",
        "bool"
    ],
    "unittest.mock.NonCallableMock._mock_add_spec": [
        "",
        "Any",
        "bool",
        "bool",
        "bool"
    ],
    "unittest.mock.NonCallableMock.attach_mock": [
        "",
        "NonCallableMock",
        "str"
    ],
    "unittest.mock.NonCallableMock.configure_mock": [
        ""
    ],
    "unittest.mock.NonCallableMock._format_mock_call_signature": [
        "",
        "Any",
        "Any"
    ],
    "unittest.mock.NonCallableMock._call_matcher": [
        "",
        "tuple[_Call, ...]"
    ],
    "unittest.mock.NonCallableMock._get_child_mock": [
        ""
    ],
    "unittest.mock.CallableMixin.__init__": [
        "",
        "Any | None",
        "Any | None",
        "Any",
        "Any | None",
        "Any | None",
        "Any | None",
        "Any | None",
        "Any | None",
        "Any",
        "Any | None"
    ],
    "unittest.mock._patch.copy": [
        ""
    ],
    "unittest.mock._patch.__call__": [
        "",
        "_TT"
    ],
    "unittest.mock._patch.decorate_class": [
        "",
        "_TT"
    ],
    "unittest.mock._patch.decorate_callable": [
        "",
        "Callable[..., _R]"
    ],
    "unittest.mock._patch.get_original": [
        ""
    ],
    "unittest.mock._patch.__enter__": [
        ""
    ],
    "unittest.mock._patch.__exit__": [
        "",
        "type[BaseException] | None",
        "BaseException | None",
        "TracebackType | None"
    ],
    "unittest.mock._patch.start": [
        ""
    ],
    "unittest.mock._patch.stop": [
        ""
    ],
    "unittest.mock._patch_default_new.__call__": [
        "",
        "_TT"
    ],
    "unittest.mock._patch_dict.__init__": [
        "",
        "Any",
        "Any",
        "Any"
    ],
    "unittest.mock._patch_dict.__call__": [
        "",
        "Any"
    ],
    "unittest.mock._patch_dict.decorate_class": [
        "",
        "Any"
    ],
    "unittest.mock._patch_dict.__enter__": [
        ""
    ],
    "unittest.mock._patch_dict.__exit__": [
        ""
    ],
    "unittest.mock._patcher.__call__": [
        "",
        "str",
        "_T",
        "Any | None",
        "bool",
        "Any | None",
        "Any | None",
        "Any | None"
    ],
    "unittest.mock._patcher.object": [
        "Any",
        "str",
        "_T",
        "Any | None",
        "bool",
        "Any | None",
        "Any | None",
        "Any | None"
    ],
    "unittest.mock._patcher.multiple": [
        "Any",
        "Any | None",
        "bool",
        "Any | None",
        "Any | None",
        "Any | None"
    ],
    "unittest.mock._patcher.stopall": [],
    "unittest.mock.MagicMixin.__init__": [
        ""
    ],
    "unittest.mock.MagicProxy.__init__": [
        "",
        "str",
        "Any"
    ],
    "unittest.mock.MagicProxy.create_mock": [
        ""
    ],
    "unittest.mock.MagicProxy.__get__": [
        "",
        "Any",
        "Any | None"
    ],
    "unittest.mock._ANY.__eq__": [
        "",
        "object"
    ],
    "unittest.mock._ANY.__ne__": [
        "",
        "object"
    ],
    "unittest.mock._SpecState.__init__": [
        "",
        "Any",
        "Any",
        "Any | None",
        "Any | None",
        "Any | None",
        "Any"
    ],
    "unittest.mock.PropertyMock.__set__": [
        "",
        "Any",
        "Any"
    ],
    "unittest.mock.mock_open": [
        "Any | None",
        "Any"
    ],
    "unittest.mock.seal": [
        "Any"
    ],
    "unittest.suite.BaseTestSuite.__init__": [
        "",
        "Iterable[_TestType]"
    ],
    "unittest.suite.BaseTestSuite.__call__": [
        "",
        "unittest.result.TestResult"
    ],
    "unittest.suite.BaseTestSuite.addTest": [
        "",
        "_TestType"
    ],
    "unittest.suite.BaseTestSuite.addTests": [
        "",
        "Iterable[_TestType]"
    ],
    "unittest.suite.BaseTestSuite.run": [
        "",
        "unittest.result.TestResult"
    ],
    "unittest.suite.BaseTestSuite.debug": [
        ""
    ],
    "unittest.suite.BaseTestSuite.countTestCases": [
        ""
    ],
    "unittest.suite.BaseTestSuite.__iter__": [
        ""
    ],
    "unittest.suite.BaseTestSuite.__eq__": [
        "",
        "object"
    ],
    "unittest.suite.TestSuite.run": [
        "",
        "unittest.result.TestResult",
        "bool"
    ],
    "unittest.main._TestRunner.run": [
        "",
        "unittest.suite.TestSuite | unittest.case.TestCase"
    ],
    "unittest.main.TestProgram.__init__": [
        "",
        "None | str | ModuleType",
        "str | Iterable[str] | None",
        "list[str] | None",
        "type[_TestRunner] | _TestRunner | None",
        "unittest.loader.TestLoader",
        "bool",
        "int",
        "bool | None",
        "bool | None",
        "bool | None",
        "str | None"
    ],
    "unittest.main.TestProgram.usageExit": [
        "",
        "Any"
    ],
    "unittest.main.TestProgram.parseArgs": [
        "",
        "list[str]"
    ],
    "unittest.main.TestProgram.createTests": [
        "",
        "bool",
        "unittest.loader.TestLoader | None"
    ],
    "unittest.main.TestProgram.runTests": [
        ""
    ]
}