<?xml version="1.0" encoding="utf-8"?>
<!--  Created with RPTDSSSLPARAM.M
      Copyright 1997-2005 The MathWorks, Inc.
      $Revision: 1.1.8.1.12.1 $  $Date: 2006/07/12 17:37:01 $ -->
<book>
<reference><title>TOC/LOT Apparatus</title>

<RefEntry id="%generate-set-toc%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%generate-set-toc%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%generate-set-toc%</RefName>
  <RefPurpose>Should a Table of Contents be produced for Sets?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%generate-set-toc%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, a Table of Contents will be generated for each <literal>Set</literal>.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %generate-set-toc% 
  ;; Should a Table of Contents be produced for Sets?
  #t)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%generate-book-toc%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%generate-book-toc%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%generate-book-toc%</RefName>
  <RefPurpose>Should a Table of Contents be produced for Books?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%generate-book-toc%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, a Table of Contents will be generated for each <literal>Book</literal>.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %generate-book-toc% 
  ;; Should a Table of Contents be produced for Books?
  #t)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="$generate-book-lot-list$">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>$generate-book-lot-list$</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>$generate-book-lot-list$</RefName>
  <RefPurpose>Which Lists of Titles should be produced for Books?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
($generate-book-lot-list$)
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
This parameter should be a list (possibly empty) of the elements
for which Lists of Titles should be produced for each <literal>Book</literal>.
</para>
<para>
It is meaningless to put elements that do not have titles in this
list.  If elements with optional titles are placed in this list, only
the instances of those elements that do have titles will appear in
the LOT.
</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define ($generate-book-lot-list$)
  ;; Which Lists of Titles should be produced for Books?
  (list (normalize "table")
(normalize "figure")
(normalize "example")
(normalize "equation")))
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%generate-part-toc%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%generate-part-toc%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%generate-part-toc%</RefName>
  <RefPurpose>Should a Table of Contents be produced for Parts?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%generate-part-toc%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, a Table of Contents will be generated for each <literal>Part</literal>.
Note: <literal>%generate-part-toc-on-titlepage%</literal> controls whether the Part TOC
is placed on the bottom of the part titlepage or on page(s) of its own.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %generate-part-toc% 
  ;; Should a Table of Contents be produced for Parts?
  #t)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%generate-part-toc-on-titlepage%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%generate-part-toc-on-titlepage%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%generate-part-toc-on-titlepage%</RefName>
  <RefPurpose>Should the Part TOC appear on the Part title page?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%generate-part-toc-on-titlepage%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, the Part TOC will be placed on the Part title page.  If false,
the TOC will be placed on separate page(s) after the Part title page.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %generate-part-toc-on-titlepage%
  ;; Should the Part TOC appear on the Part title page?
  #t)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="$generate-chapter-toc$">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>$generate-chapter-toc$</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>$generate-chapter-toc$</RefName>
  <RefPurpose>Should a Chapter Table of Contents be produced?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
$generate-chapter-toc$
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, an automatically generated
chapter TOC should be included. By default, it<literal>s true.  It</literal>s false if
the output is going to a single file and the current node isn't the
root element.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define $generate-chapter-toc$ 
  ;; Should a Chapter Table of Contents be produced?
  (lambda ()
    (or (not nochunks)
(node-list=? (current-node) (sgml-root-element)))))
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%force-chapter-toc%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%force-chapter-toc%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%force-chapter-toc%</RefName>
  <RefPurpose>Force a chapter TOC even if it includes only a single entry</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%force-chapter-toc%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
Force chapter toc indicates whether or not an automatically generated
chapter TOC should be included even if it has only one entry.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %force-chapter-toc% 
  ;; Force a chapter TOC even if it includes only a single entry
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%generate-article-toc%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%generate-article-toc%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%generate-article-toc%</RefName>
  <RefPurpose>Should a Table of Contents be produced for Articles?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%generate-article-toc%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, a Table of Contents will be generated for each <literal>Article</literal>.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %generate-article-toc% 
  ;; Should a Table of Contents be produced for Articles?
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="$generate-article-lot-list$">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>$generate-article-lot-list$</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>$generate-article-lot-list$</RefName>
  <RefPurpose>Which Lists of Titles should be produced for Books?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
($generate-article-lot-list$)
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
This parameter should be a list (possibly empty) of the elements
for which Lists of Titles shold be produced for each <literal>Article</literal>.
</para>
<para>
It is meaningless to put elements that do not have titles in this
list.  If elements with optional titles are placed in this list, only
the instances of those elements that do have titles will appear in
the LOT.
</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define ($generate-article-lot-list$)
  ;; Which Lists of Titles should be produced for Books?
(list))
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%generate-reference-toc%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%generate-reference-toc%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%generate-reference-toc%</RefName>
  <RefPurpose>Should a Table of Contents be produced for References?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%generate-reference-toc%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, a Table of Contents will be generated for each <literal>Reference</literal>.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %generate-reference-toc% 
  ;; Should a Table of Contents be produced for References?
  #t)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%generate-referenc-toc-on-titlepage%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%generate-reference-toc-on-titlepage%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%generate-reference-toc-on-titlepage%</RefName>
  <RefPurpose>Should the Reference TOC appear on the Reference title page?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%generate-reference-toc-on-titlepage%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, the Reference TOC will be placed on the Reference title page.
If false,
the TOC will be placed after the Reference title page.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %generate-reference-toc-on-titlepage%
  ;; Should the Reference TOC appear on the Reference title page?
  #t)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%annotate-toc%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%annotate-toc%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%annotate-toc%</RefName>
  <RefPurpose>Annotate TOC entries</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%annotate-toc%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If #t, TOC entries will be annotated (e.g., the RefPurpose
of a RefEntry will be displayed in the TOC).</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %annotate-toc%
  ;; Annotate TOC entries
  #t)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="$generate-qandaset-toc$">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>$generate-qandaset-toc$</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>$generate-qandaset-toc$</RefName>
  <RefPurpose>Should a QandASet Table of Contents be produced?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
($generate-qandaset-toc$)
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, an automatically generated TOC is produced for each 
QandASet.</para>


</RefSect1>

<RefSect1><Title>Author</Title>

<para>
Norman Walsh, &lt;ndw@nwalsh.com&gt;
</para>
</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define ($generate-qandaset-toc$)
  ;; Should a QandASet Table of Contents be produced?
  #t)
</ProgramListing>
</RefSect1>

</RefEntry>

</reference>
<reference><title>Titlepages</title>

<RefEntry id="%generate-set-titlepage%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%generate-set-titlepage%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%generate-set-titlepage%</RefName>
  <RefPurpose>Should a set title page be produced?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%generate-set-titlepage%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, a title page will be generated for each <literal>Set</literal>.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %generate-set-titlepage%
  ;; Should a set title page be produced?
  #t)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%generate-book-titlepage%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%generate-book-titlepage%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%generate-book-titlepage%</RefName>
  <RefPurpose>Should a book title page be produced?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%generate-book-titlepage%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, a title page will be generated for each <literal>Book</literal>.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %generate-book-titlepage%
  ;; Should a book title page be produced?
  #t)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%generate-part-titlepage%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%generate-part-titlepage%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%generate-part-titlepage%</RefName>
  <RefPurpose>Should a part title page be produced?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%generate-part-titlepage%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, a title page will be generated for each <literal>Part</literal>.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %generate-part-titlepage% 
  ;; Should a part title page be produced?
  #t)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%generate-partintro-on-titlepage%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%generate-partintro-on-titlepage%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%generate-partintro-on-titlepage%</RefName>
  <RefPurpose>Should the PartIntro appear on the Part/Reference title page?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%generate-partintro-on-titlepage%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, the PartIntro content will appear on the title page of
Parts and References.  If false,
it will be placed on separate page(s) after the title page.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %generate-partintro-on-titlepage%
  ;; Should the PartIntro appear on the Part/Reference title page?
  #t)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%generate-reference-titlepage%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%generate-reference-titlepage%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%generate-reference-titlepage%</RefName>
  <RefPurpose>Should a reference title page be produced?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%generate-reference-titlepage%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, a title page will be generated for each <literal>Reference</literal>.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %generate-reference-titlepage% 
  ;; Should a reference title page be produced?
  #t)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%generate-article-titlepage%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%generate-article-titlepage%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%generate-article-titlepage%</RefName>
  <RefPurpose>Should an article title page be produced?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%generate-article-titlepage%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, a title page will be generated for each <literal>Article</literal>.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %generate-article-titlepage% 
  ;; Should an article title page be produced?
  #t)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%titlepage-in-info-order%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%titlepage-in-info-order%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%titlepage-in-info-order%</RefName>
  <RefPurpose>Place elements on title page in document order?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%titlepage-in-info-order%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, the elements on the title page will be set in the order that
they appear in the *info element.  Otherwise, they will be set in
the order specified in the *-titlepage-*-elements list.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %titlepage-in-info-order% 
  ;; Place elements on title page in document order?
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%generate-legalnotice-link%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%generate-legalnotice-link%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%generate-legalnotice-link%</RefName>
  <RefPurpose>Should legal notices be a link to a separate file?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%generate-legalnotice-link%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, legal notices will be references to a separate file.
Note: the support for this handles the case where a single *INFO
node contains several distinct legal notices, but won't
handle multiple legal notices in different *INFO nodes.
(Each set will overwrite the previous.)  A more complex
approach could be implemented, but this is sufficient for
the current demand.  Let me know...</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %generate-legalnotice-link%
  ;; Should legal notices be a link to a separate file?
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="$legalnotice-link-file$">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>$legalnotice-link-file$</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>$legalnotice-link-file$</RefName>
  <RefPurpose>Name of output file for legal notices</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
($legalnotice-link-file$ legalnotice)
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
Name of the output file for legal notices if 
<literal>%generate-legalnotice-link%</literal> is true.  Since several legal notices
may occur (in a Set of Books, for example), this is no longer a fixed
filename.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define ($legalnotice-link-file$ legalnotice)
  ;; Name of output file for legal notices
  (if (and %use-id-as-filename% (attribute-string (normalize "id") legalnotice))
      (string-append (attribute-string (normalize "id") legalnotice)
		     %html-ext%)
      (string-append "ln"
		     (number->string (all-element-number legalnotice))
		     %html-ext%)))
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%author-othername-in-middle%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%author-othername-in-middle%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%author-othername-in-middle%</RefName>
  <RefPurpose>Author OTHERNAME appears between FIRSTNAME and SURNAME?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%author-othername-in-middle%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, the OTHERNAME of an AUTHOR appears between the 
FIRSTNAME and SURNAME.  Otherwise, OTHERNAME is suppressed.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %author-othername-in-middle%
  ;; Author OTHERNAME appears between FIRSTNAME and SURNAME?
  #t)
</ProgramListing>
</RefSect1>

</RefEntry>

</reference>
<reference><title>Admonitions</title>

<RefEntry id="%admon-graphics%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%admon-graphics%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%admon-graphics%</RefName>
  <RefPurpose>Use graphics in admonitions?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%admon-graphics%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, admonitions are presented in an alternate style that uses
a graphic.  Default graphics are provided in the distribution.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %admon-graphics%
  ;; Use graphics in admonitions?
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%admon-graphics-path%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%admon-graphics-path%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%admon-graphics-path%</RefName>
  <RefPurpose>Path to admonition graphics</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%admon-graphics-path%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
Sets the path, probably relative to the directory where the HTML
files are created, to the admonition graphics.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %admon-graphics-path%
  ;; Path to admonition graphics
  "../images/")
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="$admon-graphic$">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>$admon-graphic$</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>$admon-graphic$</RefName>
  <RefPurpose>Admonition graphic file</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
($admon-graphic$ #!optional (nd (current-node)))
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
Given an admonition node, returns the name of the graphic that should
be used for that admonition.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define ($admon-graphic$ #!optional (nd (current-node)))
  ;; Admonition graphic file
  (cond ((equal? (gi nd) (normalize "tip"))
	 (string-append %admon-graphics-path% "tip" %stock-graphics-extension%))
	((equal? (gi nd) (normalize "note"))
	 (string-append %admon-graphics-path% "note" %stock-graphics-extension%))
	((equal? (gi nd) (normalize "important"))
	 (string-append %admon-graphics-path% "important" %stock-graphics-extension%))
	((equal? (gi nd) (normalize "caution"))
	 (string-append %admon-graphics-path% "caution" %stock-graphics-extension%))
	((equal? (gi nd) (normalize "warning"))
	 (string-append %admon-graphics-path% "warning" %stock-graphics-extension%))
	(else (error (string-append (gi nd) " is not an admonition.")))))
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="$admon-graphic-width$">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>$admon-graphic-width$</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>$admon-graphic-width$</RefName>
  <RefPurpose>Admonition graphic file width</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
($admon-graphic-width$ #!optional (nd (current-node)))
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
Given an admonition node, returns the width of the graphic that will
be used for that admonition.
</para>
<para>
All of the default graphics in the distribution are 25 pixels wide.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define ($admon-graphic-width$ #!optional (nd (current-node)))
  ;; Admonition graphic file width
  "25")
</ProgramListing>
</RefSect1>

</RefEntry>

</reference>
<reference><title>Callouts</title>

<RefEntry id="%callout-graphics%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%callout-graphics%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%callout-graphics%</RefName>
  <RefPurpose>Use graphics in callouts?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%callout-graphics%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, callouts are presented with graphics (e.g., reverse-video
circled numbers instead of "(1)", "(2)", etc.).
Default graphics are provided in the distribution.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %callout-graphics%
  ;; Use graphics in callouts?
  #t)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%callout-graphics-path%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%callout-graphics-path%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%callout-graphics-path%</RefName>
  <RefPurpose>Path to callout graphics</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%callout-graphics-path%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
Sets the path, probably relative to the directory where the HTML
files are created, to the callout graphics.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %callout-graphics-path%
  ;; Path to callout graphics
  "../images/callouts/")
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%callout-graphics-number-limit%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%callout-graphics-number-limit%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%callout-graphics-number-limit%</RefName>
  <RefPurpose>Number of largest callout graphic</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%callout-graphics-number-limit%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If <literal>%callout-graphics%</literal> is true, graphics are used to represent
callout numbers. The value of <literal>%callout-graphics-number-limit%</literal> is
the largest number for which a graphic exists. If the callout number
exceeds this limit, the default presentation "(nnn)" will always
be used.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %callout-graphics-number-limit%
  ;; Number of largest callout graphic
  10)
</ProgramListing>
</RefSect1>

</RefEntry>

</reference>
<reference><title>VariableLists</title>

<RefEntry id="%always-format-varablelist-as-table%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%always-format-variablelist-as-table%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%always-format-variablelist-as-table%</RefName>
  <RefPurpose>Always format VariableLists as tables?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%always-format-variablelist-as-table%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
When a <literal>VariableList</literal> is formatted, if any of the
terms in the list are too long, the whole list is formatted as a
list.
</para>
<para>
If <literal>%always-format-variablelist-as-table%</literal> is
<literal>#t</literal>, the <literal>VariableList</literal> will be
formatted as a table, even if some terms are too long.  The terms that
are too long will format span above their associated description.</para>


</RefSect1>

<RefSect1><Title>Author</Title>

<para>
Norman Walsh, &lt;ndw@nwalsh.com&gt;
</para>
</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %always-format-variablelist-as-table%
  ;; Always format VariableLists as tables?
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%default-variablelist-termlength%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%default-variablelist-termlength%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%default-variablelist-termlength%</RefName>
  <RefPurpose>Default term length on variablelists</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%default-variablelist-termlength%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
When formatting a <literal>VariableList</literal>, this value is
used as the default term length, if no <literal>TermLength</literal> is specified.
</para>
<para>
If all of the terms in a list shorter than the term length, the
stylesheet may format them "side-by-side" in a table.</para>


</RefSect1>

<RefSect1><Title>Author</Title>

<para>
Norman Walsh, &lt;ndw@nwalsh.com&gt;
</para>
</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %default-variablelist-termlength%
  ;; Default term length on variablelists
  20)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%may-format-variablelist-as-table%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%may-format-variablelist-as-table%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%may-format-variablelist-as-table%</RefName>
  <RefPurpose>Format VariableLists as tables?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%may-format-variablelist-as-table%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If <literal>%may-format-variablelist-as-table%</literal> is
<literal>#t</literal>, a <literal>VariableList</literal> will be
formatted as a table, if *all of*
the terms are shorter than the specified
<literal>TermLength</literal>.</para>


</RefSect1>

<RefSect1><Title>Author</Title>

<para>
Norman Walsh, &lt;ndw@nwalsh.com&gt;
</para>
</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %may-format-variablelist-as-table%
  ;; Format VariableLists as tables?
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>

</reference>
<reference><title>Navigation</title>

<RefEntry id="%header-navigation%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%header-navigation%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%header-navigation%</RefName>
  <RefPurpose>Should navigation links be added to the top of each page?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%header-navigation%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If <literal>#t</literal>, navigation links will be added to the top of each page.
If <literal>#f</literal>, no navigation links will be added. Note that this has
no effect on <literal>($user-header-navigation$)</literal>, which will still be
called (but does nothing by default).</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %header-navigation%
  ;; Should navigation links be added to the top of each page?
  #t)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%footer-navigation%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%footer-navigation%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%footer-navigation%</RefName>
  <RefPurpose>Should navigation links be added to the bottom of each page?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%footer-navigation%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If <literal>#t</literal>, navigation links will be added to the bottom of each page.
If <literal>#f</literal>, no navigation links will be added. Note that this has
no effect on <literal>($user-footer-navigation$)</literal> or <literal>(nav-footer)</literal>, which 
will still be called (but do nothing by default).</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %footer-navigation%
  ;; Should navigation links be added to the bottom of each page?
  #t)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%gentext-nav-tblwidth%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%gentext-nav-tblwidth%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%gentext-nav-tblwidth%</RefName>
  <RefPurpose>If using tables for navigation, how wide should the tables be?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%gentext-nav-tblwidth%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If tables are used for navigation (see <literal>%gentext-nav-use-tables%</literal>),
how wide should the tables be?</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %gentext-nav-tblwidth% 
  ;; If using tables for navigation, how wide should the tables be?
  "100%")
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%gentext-nav-use-ff%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%gentext-nav-use-ff%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%gentext-nav-use-ff%</RefName>
  <RefPurpose>Add "fast-forward" to the navigation links?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%gentext-nav-use-ff%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
Do you want "fast-forward" navigation?  Probably not is my guess.
I'm not sure this works real well yet.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %gentext-nav-use-ff%
  ;; Add "fast-forward" to the navigation links?
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%gentext-nav-use-tables%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%gentext-nav-use-tables%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%gentext-nav-use-tables%</RefName>
  <RefPurpose>Use tables to build the navigation headers and footers?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%gentext-nav-use-tables%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, HTML TABLEs will be used to format the header and footer
navigation information.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %gentext-nav-use-tables%
  ;; Use tables to build the navigation headers and footers?
  #t)
</ProgramListing>
</RefSect1>

</RefEntry>

</reference>
<reference><title>Verbatim Environments</title>

<RefEntry id="%indent-address-lines%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%indent-address-lines%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%indent-address-lines%</RefName>
  <RefPurpose>Indent lines in a 'Address'?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%indent-address-lines%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If not <literal>#f</literal>, each line in the display will be indented
with the content of this variable.  Usually it is set to some number
of spaces, but you can indent with any string you wish.</para>


</RefSect1>

<RefSect1><Title>Author</Title>

<para>
Norman Walsh, &lt;ndw@nwalsh.com&gt;
</para>
</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %indent-address-lines% 
  ;; Indent lines in a 'Address'?
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%indent-funcsynopsisinfo-lines%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%indent-funcsynopsisinfo-lines%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%indent-funcsynopsisinfo-lines%</RefName>
  <RefPurpose>Indent lines in a 'FuncSynopsisInfo'?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%indent-funcsynopsisinfo-lines%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If not <literal>#f</literal>, each line in the display will be indented
with the content of this variable.  Usually it is set to some number
of spaces, but you can indent with any string you wish.</para>


</RefSect1>

<RefSect1><Title>Author</Title>

<para>
Norman Walsh, &lt;ndw@nwalsh.com&gt;
</para>
</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %indent-funcsynopsisinfo-lines% 
  ;; Indent lines in a 'FuncSynopsisInfo'?
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%indent-literallayout-lines%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%indent-literallayout-lines%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%indent-literallayout-lines%</RefName>
  <RefPurpose>Indent lines in a 'LiteralLayout'?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%indent-literallayout-lines%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If not <literal>#f</literal>, each line in the display will be indented
with the content of this variable.  Usually it is set to some number
of spaces, but you can indent with any string you wish.</para>


</RefSect1>

<RefSect1><Title>Author</Title>

<para>
Norman Walsh, &lt;ndw@nwalsh.com&gt;
</para>
</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %indent-literallayout-lines% 
  ;; Indent lines in a 'LiteralLayout'?
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%indent-programlisting-lines%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%indent-programlisting-lines%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%indent-programlisting-lines%</RefName>
  <RefPurpose>Indent lines in a 'ProgramListing'?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%indent-programlisting-lines%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If not <literal>#f</literal>, each line in the display will be indented
with the content of this variable.  Usually it is set to some number
of spaces, but you can indent with any string you wish.</para>


</RefSect1>

<RefSect1><Title>Author</Title>

<para>
Norman Walsh, &lt;ndw@nwalsh.com&gt;
</para>
</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %indent-programlisting-lines%
  ;; Indent lines in a 'ProgramListing'?
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%indent-screen-lines%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%indent-screen-lines%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%indent-screen-lines%</RefName>
  <RefPurpose>Indent lines in a 'Screen'?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%indent-screen-lines%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If not <literal>#f</literal>, each line in the display will be indented
with the content of this variable.  Usually it is set to some number
of spaces, but you can indent with any string you wish.</para>


</RefSect1>

<RefSect1><Title>Author</Title>

<para>
Norman Walsh, &lt;ndw@nwalsh.com&gt;
</para>
</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %indent-screen-lines%
  ;; Indent lines in a 'Screen'?
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%indent-synopsis-lines%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%indent-synopsis-lines%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%indent-synopsis-lines%</RefName>
  <RefPurpose>Indent lines in a 'Synopsis'?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%indent-synopsis-lines%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If not <literal>#f</literal>, each line in the display will be indented
with the content of this variable.  Usually it is set to some number
of spaces, but you can indent with any string you wish.</para>


</RefSect1>

<RefSect1><Title>Author</Title>

<para>
Norman Walsh, &lt;ndw@nwalsh.com&gt;
</para>
</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %indent-synopsis-lines% 
  ;; Indent lines in a 'Synopsis'?
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%number-address-lines%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%number-address-lines%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%number-address-lines%</RefName>
  <RefPurpose>Enumerate lines in a 'Address'?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%number-address-lines%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, lines in each <literal>Address</literal> will be enumerated.
See also <literal>%linenumber-mod%</literal>, <literal>%linenumber-length%</literal>,
<literal>%linenumber-padchar%</literal>, and <literal>($linenumber-space$)</literal>.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %number-address-lines% 
  ;; Enumerate lines in a 'Address'?
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%number-funcsynopsisinfo-lines%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%number-funcsynopsisinfo-lines%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%number-funcsynopsisinfo-lines%</RefName>
  <RefPurpose>Enumerate lines in a 'FuncSynopsisInfo'?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%number-funcsynopsisinfo-lines%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, lines in each <literal>FuncSynopsisInfo</literal> will be enumerated.
See also <literal>%linenumber-mod%</literal>, <literal>%linenumber-length%</literal>,
<literal>%linenumber-padchar%</literal>, and <literal>($linenumber-space$)</literal>.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %number-funcsynopsisinfo-lines% 
  ;; Enumerate lines in a 'FuncSynopsisInfo'?
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%number-literallayout-lines%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%number-literallayout-lines%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%number-literallayout-lines%</RefName>
  <RefPurpose>Enumerate lines in a 'LiteralLayout'?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%number-literallayout-lines%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, lines in each <literal>LiteralLayout</literal> will be enumerated.
See also <literal>%linenumber-mod%</literal>, <literal>%linenumber-length%</literal>,
<literal>%linenumber-padchar%</literal>, and <literal>($linenumber-space$)</literal>.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %number-literallayout-lines% 
  ;; Enumerate lines in a 'LiteralLayout'?
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%number-programlisting-lines%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%number-programlisting-lines%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%number-programlisting-lines%</RefName>
  <RefPurpose>Enumerate lines in a 'ProgramListing'?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%number-programlisting-lines%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, lines in each <literal>ProgramListing</literal> will be enumerated.
See also <literal>%linenumber-mod%</literal>, <literal>%linenumber-length%</literal>,
<literal>%linenumber-padchar%</literal>, and <literal>($linenumber-space$)</literal>.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %number-programlisting-lines%
  ;; Enumerate lines in a 'ProgramListing'?
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%number-screen-lines%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%number-screen-lines%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%number-screen-lines%</RefName>
  <RefPurpose>Enumerate lines in a 'Screen'?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%number-screen-lines%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, lines in each <literal>Screen</literal> will be enumerated.
See also <literal>%linenumber-mod%</literal>, <literal>%linenumber-length%</literal>,
<literal>%linenumber-padchar%</literal>, and <literal>($linenumber-space$)</literal>.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %number-screen-lines%
  ;; Enumerate lines in a 'Screen'?
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%number-synopsis-lines%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%number-synopsis-lines%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%number-synopsis-lines%</RefName>
  <RefPurpose>Enumerate lines in a 'Synopsis'?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%number-synopsis-lines%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, lines in each <literal>Synopsis</literal> will be enumerated.
See also <literal>%linenumber-mod%</literal>, <literal>%linenumber-length%</literal>, 
<literal>%linenumber-padchar%</literal>, and <literal>($linenumber-space$)</literal>.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %number-synopsis-lines% 
  ;; Enumerate lines in a 'Synopsis'?
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%linenumber-length%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%linenumber-length%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%linenumber-length%</RefName>
  <RefPurpose>Width of line numbers in enumerated environments</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%linenumber-length%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
Line numbers will be padded to <literal>%linenumber-length%</literal>
characters.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %linenumber-length% 
  ;; Width of line numbers in enumerated environments
  3)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%linenumber-mod%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%linenumber-mod%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%linenumber-mod%</RefName>
  <RefPurpose>Controls line-number frequency in enumerated environments.</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%linenumber-mod%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
Every <literal>%linenumber-mod%</literal> line will be enumerated.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %linenumber-mod% 
  ;; Controls line-number frequency in enumerated environments.
  5)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%linenumber-padchar%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%linenumber-padchar%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%linenumber-padchar%</RefName>
  <RefPurpose>Pad character in line numbers</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%linenumber-padchar%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
Line numbers will be padded (on the left) with <literal>%linenumber-padchar%</literal>.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %linenumber-padchar% 
  ;; Pad character in line numbers
  " ")
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="$linenumber-space$">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>$linenumber-space$</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>$linenumber-space$</RefName>
  <RefPurpose>Returns the sosofo which separates line numbers from the text</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
($linenumber-space$)
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
The sosofo returned by <literal>($linenumber-space$)</literal> is placed
between the line number and the corresponding line in 
enumerated environments.
</para>
<para>
Note: <literal>%linenumber-padchar%</literal>s are separated from lines
that are not enumerated (because they don<literal>t match </literal>%linenumber-mod%<literal>).
In other words, </literal>($linenumber-space$)' occurs
on every line.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define ($linenumber-space$) 
  ;; Returns the sosofo which separates line numbers from the text
  (make entity-ref name: "nbsp"))
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%shade-verbatim%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%shade-verbatim%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%shade-verbatim%</RefName>
  <RefPurpose>Should verbatim environments be shaded?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%shade-verbatim%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, a table with <literal>($shade-verbatim-attr$)</literal> attributes will be
wrapped around each verbatim environment.  This gives the effect
of a shaded verbatim environment.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %shade-verbatim%  
  ;; Should verbatim environments be shaded?
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="$shade-verbatim-attr$">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>$shade-verbatim-attr$</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>$shade-verbatim-attr$</RefName>
  <RefPurpose>Attributes used to create a shaded verbatim environment.</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
($shade-verbatim-attr$)
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
See <literal>%shade-verbatim%</literal></para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define ($shade-verbatim-attr$)
  ;; Attributes used to create a shaded verbatim environment.
  (list
   (list "BORDER" "0")
   (list "BGCOLOR" "#E0E0E0")
   (list "WIDTH" ($table-width$))))
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%callout-default-col%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%callout-default-col%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%callout-default-col%</RefName>
  <RefPurpose>Default column for callouts</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%callout-default-col%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If the coordinates of a callout include only a line number, the callout
bug will appear in column <literal>%callout-default-col%</literal>.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %callout-default-col% 
  ;; Default column for callouts
  60)
</ProgramListing>
</RefSect1>

</RefEntry>

</reference>
<reference><title>Labelling</title>

<RefEntry id="%chapter-autolabel%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%chapter-autolabel%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%chapter-autolabel%</RefName>
  <RefPurpose>Are chapters enumerated?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%chapter-autolabel%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, chapters will be enumerated.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %chapter-autolabel% 
  ;; Are chapters enumerated?
  #t)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%section-autolabel%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%section-autolabel%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%section-autolabel%</RefName>
  <RefPurpose>Are sections enumerated?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%section-autolabel%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, unlabeled sections will be enumerated.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %section-autolabel%
  ;; Are sections enumerated?
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%label-preface-sections%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%label-preface-sections%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%label-preface-sections%</RefName>
  <RefPurpose>Are sections in the Preface enumerated?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%label-preface-sections%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, unlabeled sections in the Preface will be enumerated
if <literal>%section-autolabel%</literal> is true.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %label-preface-sections%
  ;; Are sections in the Preface enumerated?
  #t)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%qanda-inherit-numeration%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%qanda-inherit-numeration%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%qanda-inherit-numeration%</RefName>
  <RefPurpose>Should numbered questions inherit the surrounding numeration?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%qanda-inherit-numeration%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, question numbers are prefixed with the surrounding
component or section number. Has no effect unless
<literal>%section-autolabel%</literal> is also true.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %qanda-inherit-numeration% 
  ;; Should numbered questions inherit the surrounding numeration?
  #t)
</ProgramListing>
</RefSect1>

</RefEntry>

</reference>
<reference><title>Tables</title>

<RefEntry id="%cals-table-class%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%cals-table-class%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%cals-table-class%</RefName>
  <RefPurpose>Class attribute for CALS tables</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%cals-table-class%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
This value, if not <literal>#f</literal>, will be used as the value of the CLASS
attribute on CALS tables.  This allows the HTML stylesheet to
distinguish between HTML tables generated from tables in the
source document from HTML tables generated for other reasons
(simplelists and navigation, for example).</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %cals-table-class%
  ;; Class attribute for CALS tables
  "CALSTABLE")
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="$table-element-list$">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>$table-element-list$</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>$table-element-list$</RefName>
  <RefPurpose>List of table element names</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
($table-element-list$)
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
The list of table elements in the DTD.  </para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define ($table-element-list$) 
  ;; List of table element names
  (list (normalize "table") (normalize "informaltable")))
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="$table-width$">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>$table-width$</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>$table-width$</RefName>
  <RefPurpose>Calculate table width</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
($table-width$)
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
This function is called to calculate the width of tables that should
theoretically be "100%" wide. Unfortunately, in HTML, a 100% width 
table in a list hangs off the right side of the browser window.  (Who's
mistake was that!).  So this function provides a way to massage
the width appropriately.
</para>
<para>
This version is fairly dumb.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define ($table-width$)
  ;; Calculate table width
  (if (has-ancestor-member? (current-node) '("LISTITEM"))
      "90%"
      "100%"))
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%simplelist-column-width%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%simplelist-column-width%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%simplelist-column-width%</RefName>
  <RefPurpose>Width of columns in tabular simple lists</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%simplelist-column-width%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If SimpleLists are presented in a table, how wide should the table
columns be?  If <literal>#f</literal>, no width will be specified.
</para>
<para>
If not #f, this value should be a string (it will be used in the WIDTH
attribute on the TD for each table entry).</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %simplelist-column-width% 
  ;; Width of columns in tabular simple lists
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%epigraph-start-col%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%epigraph-start-col%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%epigraph-start-col%</RefName>
  <RefPurpose>Size of start indent for epigraphs.</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%epigraph-start-col%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
Width of the table column which provides a starting indent for
epigraphs, expressed as a percentage.
AUTHOR Ola Lundqvist</para>


</RefSect1>

<RefSect1><Title>Author</Title>

<para>
Norman Walsh, &lt;ndw@nwalsh.com&gt;
</para>
</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %epigraph-start-col%
  ;; Size of start indent for epigraphs.
  "45%")
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%epigraph-content-col%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%epigraph-content-col%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%epigraph-content-col%</RefName>
  <RefPurpose>Size of epigraph text column.</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%epigraph-content-col%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
Width of the table column which contains the contents of
epigraphs, expressed as a percentage.
AUTHOR Ola Lundqvist</para>


</RefSect1>

<RefSect1><Title>Author</Title>

<para>
Norman Walsh, &lt;ndw@nwalsh.com&gt;
</para>
</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %epigraph-content-col%
  ;; Size of epigraph text column.
  "45%")
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%blockquote-start-col%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%blockquote-start-col%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%blockquote-start-col%</RefName>
  <RefPurpose>Size of start indent for blockquoted text.</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%blockquote-start-col%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
Width of the table column which provides a starting indent for
blockquoted text, expressed as a percentage.
AUTHOR Ola Lundqvist</para>


</RefSect1>

<RefSect1><Title>Author</Title>

<para>
Norman Walsh, &lt;ndw@nwalsh.com&gt;
</para>
</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %blockquote-start-col%
  ;; Size of start indent for blockquoted text.
  "10%")
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%blockquote-end-col%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%blockquote-end-col%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%blockquote-end-col%</RefName>
  <RefPurpose>Size of end indent for blockquoted text.</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%blockquote-end-col%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
Width of the table column which provides and end indent after
blockquoted text, expressed as a percentage.
AUTHOR Ola Lundqvist</para>


</RefSect1>

<RefSect1><Title>Author</Title>

<para>
Norman Walsh, &lt;ndw@nwalsh.com&gt;
</para>
</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %blockquote-end-col%
  ;; Size of end indent for blockquoted text.
  "10%")
</ProgramListing>
</RefSect1>

</RefEntry>

</reference>
<reference><title>Bibliographies</title>

<RefEntry id="biblio-citation-check">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>biblio-citation-check</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>biblio-citation-check</RefName>
  <RefPurpose>Check citations</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
biblio-citation-check
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, the content of CITATIONs will be checked against possible
biblioentries.  If the citation cannot be found, an error is issued
and the citation is generated.  If the citation is found, it is generated
with a cross reference to the appropriate biblioentry.
</para>
<para>
A citation matches if the content of the citation element matches the
ID, XREFLABEL, or leading ABBREV of a biblioentry.
</para>
<para>
This setting may have significant performance implications on large
documents, hence it is false by default.
</para>
<para>
(This option can conveniently be set with <literal>-V biblio-citation-check</literal> 
on the Jade command line).</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define biblio-citation-check
  ;; Check citations
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="biblio-filter-used">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>biblio-filter-used</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>biblio-filter-used</RefName>
  <RefPurpose>Suppress unreferenced bibliography entries</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
biblio-filter-used
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, bibliography entries which are not cited are suppressed.
A biblioentry is cited if an XREF or LINK matches its ID, or if
a CITE element matches its
ID, XREFLABEL, or leading ABBREV.
</para>
<para>
A BIBLIOGRAPHY with no entries will still be output (making a whole
component conditional would be _A LOT_ of work and seems unnecessary),
but BIBLIDIVs with no entries will be suppressed.
</para>
<para>
This setting may have significant performance implications,
hence it is false by default.
</para>
<para>
(This option can conveniently be set with <literal>-V biblio-filter-used</literal> on the 
Jade command line).</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define biblio-filter-used
  ;; Suppress unreferenced bibliography entries
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="biblio-number">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>biblio-number</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>biblio-number</RefName>
  <RefPurpose>Enumerate bibliography entries</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
biblio-number
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, bibliography entries will be numbered.  If you cross-reference
bibliography entries, you should probably use biblio-number or
consistently use XREFLABEL or ABBREV.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define biblio-number
  ;; Enumerate bibliography entries
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="biblio-xref-title">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>biblio-xref-title</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>biblio-xref-title</RefName>
  <RefPurpose>Use the titles of bibliography entries in XREFs</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
biblio-xref-title
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, cross references to bibliography entries will use the
title of the entry as the cross reference text. Otherwise, either
the number (see <literal>biblio-number</literal>) or XREFLABEL/ABBREV will be used.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define biblio-xref-title
  ;; Use the titles of bibliography entries in XREFs
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>

</reference>
<reference><title>OLinks</title>

<RefEntry id="%olink-fragid%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%olink-fragid%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%olink-fragid%</RefName>
  <RefPurpose>Portion of the URL which identifies the fragment identifier</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%olink-fragid%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
Portion of the URL which identifies the fragment identifier</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %olink-fragid%
  ;; Portion of the URL which identifies the fragment identifier
  "&#38;fragid=")
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%olink-outline-ext%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%olink-outline-ext%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%olink-outline-ext%</RefName>
  <RefPurpose>Extension for olink outline file</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%olink-outline-ext%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
The extension used to find the outline information file.  When searching
for outline information about a document, the extension is discarded
from the system ID of the file and <literal>%olinke-outline-ext%</literal> is appended.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %olink-outline-ext%
  ;; Extension for olink outline file
  ".olink")
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%olink-pubid%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%olink-pubid%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%olink-pubid%</RefName>
  <RefPurpose>Portion of the URL which identifies the public identifier</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%olink-pubid%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
Portion of the URL which identifies the public identifier</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %olink-pubid% 
  ;; Portion of the URL which identifies the public identifier
  "pubid=")
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%olink-resolution%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%olink-resolution%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%olink-resolution%</RefName>
  <RefPurpose>URL script for OLink resolution</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%olink-resolution%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
OLink resolution requires a server component, <literal>%olink-resolution%</literal>
identifies that component.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %olink-resolution% 
  ;; URL script for OLink resolution
  "/cgi-bin/olink?")
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%olink-sysid%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%olink-sysid%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%olink-sysid%</RefName>
  <RefPurpose>Portion of the URL which identifies the system identifier</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%olink-sysid%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
Portion of the URL which identifies the system identifier.  System
identifiers are only used if no public identifier is provided.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %olink-sysid% 
  ;; Portion of the URL which identifies the system identifier
  "sysid=")
</ProgramListing>
</RefSect1>

</RefEntry>

</reference>
<reference><title>Graphics</title>

<RefEntry id="%graphic-default-extension%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%graphic-default-extension%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%graphic-default-extension%</RefName>
  <RefPurpose>Default extension for graphic FILEREFs</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%graphic-default-extension%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
The <literal>%graphic-default-extension%</literal> will be
added to the end of all <literal>fileref</literal> filenames on
<literal>Graphic</literal>s if they do not end in one of the
<literal>%graphic-extensions%</literal>.  Set this to <literal>#f</literal>
to turn off this feature.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %graphic-default-extension% 
  ;; Default extension for graphic FILEREFs
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%stock-graphics-extension%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%stock-graphics-extension%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%stock-graphics-extension%</RefName>
  <RefPurpose>Suffix for "stock" graphic files</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%stock-graphics-extension%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
The extension to for the graphic files which ship with the
Modular DocBook Stylesheet distribution.  This applies to callout
graphics and admonition graphics.  Should include the intervening
period in the suffix, if any.</para>


</RefSect1>

<RefSect1><Title>Author</Title>

<para>
Yann Dirson, Adam Di Carlo</para>
</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %stock-graphics-extension%
  ;; Suffix for "stock" graphic files
  ".gif")
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%graphic-extensions%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%graphic-extensions%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%graphic-extensions%</RefName>
  <RefPurpose>List of graphic filename extensions</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%graphic-extensions%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
The list of extensions which may appear on a <literal>fileref</literal>
on a <literal>Graphic</literal> which are indicative of graphic formats.
</para>
<para>
Filenames that end in one of these extensions will not have
the <literal>%graphic-default-extension%</literal> added to them.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %graphic-extensions% 
  ;; List of graphic filename extensions
  '("gif" "jpg" "jpeg" "png" "tif" "tiff" "eps" "epsf"))
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="image-library">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>image-library</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>image-library</RefName>
  <RefPurpose>Load image library database for additional info about images?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
image-library
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, an image library database is loaded and extra information
about web graphics is retrieved from it.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define image-library
  ;; Load image library database for additional info about images?
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="image-library-filename">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>image-library-filename</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>image-library-filename</RefName>
  <RefPurpose>Name of the image library database</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
image-library-filename
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If <literal>image-library</literal> is true, then the database is loaded from
<literal>image-library-filename</literal>.  It's a current limitation that only a
single database can be loaded.
</para>
<para>
The image library database is stored in a separate directory
because it must be parsed with the XML declaration.  The only
practical way to accomplish this with Jade, if you are processing a
document that uses another declaration, is by having a catalog
file in the directory that contains the image library that
specifies the SGMLDECL.  (So if it was in the same directory
as your document, your document would also be parsed with the
XML declaration, which may not be correct.)</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define image-library-filename
  ;; Name of the image library database
  "imagelib/imagelib.xml")
</ProgramListing>
</RefSect1>

</RefEntry>

</reference>
<reference><title>HTML Parameters and Chunking</title>

<RefEntry id="%body-attr%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%body-attr%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%body-attr%</RefName>
  <RefPurpose>What attributes should be hung off of BODY?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%body-attr%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
A list of the the BODY attributes that should be generated.
The format is a list of lists, each interior list contains the
name and value of a BODY attribute.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %body-attr% 
  ;; What attributes should be hung off of BODY?
  (list
   (list "BGCOLOR" "#FFFFFF")
   (list "TEXT" "#000000")
   (list "LINK" "#0000FF")
   (list "VLINK" "#840084")
   (list "ALINK" "#0000FF")))
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%html-prefix%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%html-prefix%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%html-prefix%</RefName>
  <RefPurpose>Add the specified prefix to HTML output filenames</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%html-prefix%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
The specified prefix will be added to all HTML output filenames.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %html-prefix% 
  ;; Add the specified prefix to HTML output filenames
  "")
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%html-use-lang-in-filename%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%html-use-lang-in-filename%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%html-use-lang-in-filename%</RefName>
  <RefPurpose>Add the source language code to the HTML output filename?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%html-use-lang-in-filename%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If <literal>#t</literal>, the source language code (or the default language code, if
none is specified), will be added to the filename of each HTML
output file.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %html-use-lang-in-filename% 
  ;; Add the source language code to the HTML output filename?
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%html-ext%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%html-ext%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%html-ext%</RefName>
  <RefPurpose>Default extension for HTML output files</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%html-ext%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
The default extension for HTML output files.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %html-ext% 
  ;; Default extension for HTML output files
  ".htm")
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%html-header-tags%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%html-header-tags%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%html-header-tags%</RefName>
  <RefPurpose>What additional HEAD tags should be generated?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%html-header-tags%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
A list of the the HTML HEAD tags that should be generated.
The format is a list of lists, each interior list consists
of a tag name and a set of attribute/value pairs:
'(("META" ("NAME" "name") ("CONTENT" "content")))</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %html-header-tags% 
  ;; What additional HEAD tags should be generated?
  '())
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%html-pubid%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%html-pubid%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%html-pubid%</RefName>
  <RefPurpose>What public ID are you declaring your HTML compliant with?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%html-pubid%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
The public ID used in output HTML files.  If <literal>#f</literal>, then no public ID
is produced.  If both this and %html-sysid% are <literal>#f</literal>, then no
doctype declaration is produced.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %html-pubid%
  ;; What public ID are you declaring your HTML compliant with?
  (if %html40%
      "-//W3C//DTD HTML 4.01 Transitional//EN"
      #f))
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%html-sysid%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%html-sysid%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%html-sysid%</RefName>
  <RefPurpose>What system ID are you declaring your HTML compliant with?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%html-sysid%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
The system ID used in output HTML files.  If <literal>#f</literal>, then no system ID
is produced.  If both this and %html-pubid% are <literal>#f</literal>, then no
doctype declaration is produced.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %html-sysid%
  ;; What system ID are you declaring your HTML compliant with?
  (if %html40%
      "http://www.w3.org/TR/html4/loose.dtd"
      #f))
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%root-filename%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%root-filename%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%root-filename%</RefName>
  <RefPurpose>Name for the root HTML document</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%root-filename%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
The filename of the root HTML document (e.g, "index").
If <literal>#f</literal>, then a default name will be selected based on the element
type of the root element (e.g, book1.htm, set1.htm, c1.htm, etc.).</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %root-filename%
  ;; Name for the root HTML document
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="html-index">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>html-index</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>html-index</RefName>
  <RefPurpose>HTML indexing?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
html-index
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
Turns on HTML indexing.  If true, then index data will be written
to the file defined by <literal>html-index-filename</literal>.  This data can be
collated and turned into a DocBook index with bin/collateindex.pl.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define html-index
  ;; HTML indexing?
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="html-index-filename">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>html-index-filename</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>html-index-filename</RefName>
  <RefPurpose>Name of HTML index file</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
html-index-filename
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
The name of the file to which index data will be written if
<literal>html-index</literal> is not <literal>#f</literal>.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define html-index-filename
  ;; Name of HTML index file
  "HTML.index")
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="html-manifest">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>html-manifest</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>html-manifest</RefName>
  <RefPurpose>Write a manifest?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
html-manifest
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If not <literal>#f</literal> then the list of HTML files created by the stylesheet
will be written to the file named by <literal>html-manifest-filename</literal>.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define html-manifest
  ;; Write a manifest?
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="html-manifest-filename">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>html-manifest-filename</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>html-manifest-filename</RefName>
  <RefPurpose>Name of HTML manifest file</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
html-manifest-filename
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
The name of the file to which a manifest will be written if
<literal>html-manifest</literal> is not <literal>#f</literal>.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define html-manifest-filename
  ;; Name of HTML manifest file
  "HTML.manifest")
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="nochunks">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>nochunks</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>nochunks</RefName>
  <RefPurpose>Suppress chunking of output pages</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
nochunks
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, the entire source document is formatted as a single HTML
document and output on stdout.
(This option can conveniently be set with <literal>-V nochunks</literal> on the 
Jade command line).</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define nochunks
  ;; Suppress chunking of output pages
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="rootchunk">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>rootchunk</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>rootchunk</RefName>
  <RefPurpose>Make a chunk for the root element when nochunks is used</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
rootchunk
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, a chunk will be created for the root element, even though
nochunks is specified. This option has no effect if nochunks is not
true.
(This option can conveniently be set with <literal>-V rootchunk</literal> on the 
Jade command line).</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define rootchunk
  ;; Make a chunk for the root element when nochunks is used
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="use-output-dir">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>use-output-dir</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>use-output-dir</RefName>
  <RefPurpose>If an output-dir is specified, should it be used?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
use-output-dir
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, chunks will be written to the <literal>output-dir</literal> instead of
the current directory.
(This option can conveniently be set with <literal>-V use-output-dir</literal> on the 
Jade command line).</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define use-output-dir
  ;; If an output-dir is specified, should it be used?
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%output-dir%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%output-dir%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%output-dir%</RefName>
  <RefPurpose>The directory to which HTML files should be written</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%output-dir%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
The output directory can be set in two ways. An individual document
can specify <literal>output-dir="directory"</literal> in the dbhtml PI, or the stylesheet
can specify the <literal>%output-dir%</literal>. If both are specified, the PI value
will be used.
</para>
<para>
Note: the output directory is ignored if <literal>use-output-dir</literal> is not <literal>#t</literal>.
(This allows the author to test stylesheets and documents without
accidentally overwriting existing documents.)</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %output-dir%
  ;; The directory to which HTML files should be written
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%stylesheet%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%stylesheet%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%stylesheet%</RefName>
  <RefPurpose>Name of the stylesheet to use</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%stylesheet%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
The name of the stylesheet to place in the HTML LINK TAG, or <literal>#f</literal> to
suppress the stylesheet LINK.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %stylesheet%
  ;; Name of the stylesheet to use
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%stylesheet-type%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%stylesheet-type%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%stylesheet-type%</RefName>
  <RefPurpose>The type of the stylesheet to use</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%stylesheet-type%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
The type of the stylesheet to place in the HTML LINK TAG.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %stylesheet-type%
  ;; The type of the stylesheet to use
  "text/css")
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%use-id-as-filename%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%use-id-as-filename%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%use-id-as-filename%</RefName>
  <RefPurpose>Use ID attributes as name for component HTML files?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%use-id-as-filename%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If <literal>%use-id-as-filename%</literal> is true, the stylesheet will use the 
value of the ID attribute on a component as the base filename instead
of using the auto-generated base.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %use-id-as-filename%
  ;; Use ID attributes as name for component HTML files?
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%citerefentry-link%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%citerefentry-link%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%citerefentry-link%</RefName>
  <RefPurpose>Generate URL links when cross-referencing RefEntrys?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%citerefentry-link%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, a web link will be generated, presumably
to an online man->HTML gateway. The text of the link is
generated by the $generate-citerefentry-link$ function.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %citerefentry-link%
  ;; Generate URL links when cross-referencing RefEntrys?
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>

</reference>
<reference><title>RefEntries and FuncSynopses</title>

<RefEntry id="%refentry-generate-name%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%refentry-generate-name%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%refentry-generate-name%</RefName>
  <RefPurpose>Output NAME header before 'RefName'(s)?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%refentry-generate-name%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, a "NAME" section title is output before the list
of <literal>RefName</literal>s.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %refentry-generate-name% 
  ;; Output NAME header before 'RefName'(s)?
  #t)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%refentry-xref-italic%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%refentry-xref-italic%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%refentry-xref-italic%</RefName>
  <RefPurpose>Use italic text when cross-referencing RefEntrys?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%refentry-xref-italic%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, italics are used when cross-referencing RefEntrys, either
with XRef or CiteRefEntry.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %refentry-xref-italic%
  ;; Use italic text when cross-referencing RefEntrys?
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%refentry-xref-manvolnum%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%refentry-xref-manvolnum%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%refentry-xref-manvolnum%</RefName>
  <RefPurpose>Output manvolnum as part of RefEntry cross-reference?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%refentry-xref-manvolnum%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, the manvolnum is used when cross-referencing RefEntrys, either
with XRef or CiteRefEntry.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %refentry-xref-manvolnum%
  ;; Output manvolnum as part of RefEntry cross-reference?
  #t)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%funcsynopsis-decoration%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%funcsynopsis-decoration%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%funcsynopsis-decoration%</RefName>
  <RefPurpose>Decorate elements of a FuncSynopsis?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%funcsynopsis-decoration%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, elements of the FuncSynopsis will be decorated (e.g. bold or
italic).  The decoration is controlled by functions that can be redefined
in a customization layer.  See <literal>edbsynop.dsl</literal>.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %funcsynopsis-decoration%
  ;; Decorate elements of a FuncSynopsis?
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%funcsynopsis-style%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%funcsynopsis-style%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%funcsynopsis-style%</RefName>
  <RefPurpose>What style of 'FuncSynopsis' should be generated?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%funcsynopsis-style%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If <literal>%funcsynopsis-style%</literal> is <literal>ansi</literal>,
ANSI-style function synopses are generated for a <literal>FuncSynopsis</literal>,
otherwise K<![CDATA[&]]>R-style function synopses are generated.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %funcsynopsis-style% 
  ;; What style of 'FuncSynopsis' should be generated?
  'ansi)
</ProgramListing>
</RefSect1>

</RefEntry>

</reference>
<reference><title>HTML Content and CSS</title>

<RefEntry id="%html40%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%html40%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%html40%</RefName>
  <RefPurpose>Generate HTML 4.0</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%html40%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If <literal>%html40%</literal> is true then the output more closely resembles HTML 4.0.
In particular, the HTML table module includes COL, THEAD, TBODY, and TFOOT
elements, and the output documents have a proper doctype declaration.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %html40%
  ;; Generate HTML 4.0
  #t)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%css-decoration%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%css-decoration%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%css-decoration%</RefName>
  <RefPurpose>Enable CSS decoration of elements</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%css-decoration%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If <literal>%css-decoration%</literal> is turned on then HTML elements produced by the
stylesheet may be decorated with STYLE attributes.  For example, the
LI tags produced for list items may include a fragment of CSS in the
STYLE attribute which sets the CSS property "list-style-type".</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %css-decoration%
  ;; Enable CSS decoration of elements
  #t)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%css-liststyle-alist%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%css-liststyle-alist%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%css-liststyle-alist%</RefName>
  <RefPurpose>Map DocBook OVERRIDE and MARK attributes to CSS</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%css-liststyle-alist%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If <literal>%css-decoration%</literal> is turned on then the list-style-type property of
list items will be set to reflect the list item style selected in the
DocBook instance.  This associative list maps the style type names used
in your instance to the appropriate CSS names.  If no mapping exists,
the name from the instance will be used.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %css-liststyle-alist%
  ;; Map DocBook OVERRIDE and MARK attributes to CSS
  '(("bullet" "disc")
    ("box" "square")))
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%fix-para-wrappers%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%fix-para-wrappers%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%fix-para-wrappers%</RefName>
  <RefPurpose>Block element in para hack</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%fix-para-wrappers%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
Block elements are allowed in PARA in DocBook, but not in P in
HTML.  With <literal>%fix-para-wrappers%</literal> turned on, the stylesheets attempt
to avoid putting block elements in HTML P tags by outputting
additional end/begin P pairs around them.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %fix-para-wrappers%
  ;; Block element in para hack
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%spacing-paras%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%spacing-paras%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%spacing-paras%</RefName>
  <RefPurpose>Block-element spacing hack</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%spacing-paras%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
Should extraneous "P" tags be output to force the correct vertical
spacing around things like tables.  This is ugly because different
browsers do different things.  Turning this one can also create
illegal HTML.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %spacing-paras%
  ;; Block-element spacing hack
  #t)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%emphasis-propagates-style%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%emphasis-propagates-style%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%emphasis-propagates-style%</RefName>
  <RefPurpose>Support propagating emphasis role attributes to HTML</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%emphasis-propagates-style%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
Should the role attribute of emphasis be propagated to HTML as
a class attribute value?</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %emphasis-propagates-style%
  ;; Support propagating emphasis role attributes to HTML
  #t)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%phrase-propagates-style%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%phrase-propagates-style%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%phrase-propagates-style%</RefName>
  <RefPurpose>Support propagating phrase role attributes to HTML</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%phrase-propagates-style%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
Should the role attribute of phrase be propagated to HTML as
a class attribute value?</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %phrase-propagates-style%
  ;; Support propagating phrase role attributes to HTML
  #t)
</ProgramListing>
</RefSect1>

</RefEntry>

</reference>
<reference><title>Object Rules</title>

<RefEntry id="%example-rules%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%example-rules%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%example-rules%</RefName>
  <RefPurpose>Specify rules before and after an Example</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%example-rules%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If <literal>#t</literal>, rules will be drawn before and after each
<literal>Example</literal>.</para>


</RefSect1>

<RefSect1><Title>Author</Title>

<para>
Norman Walsh, &lt;ndw@nwalsh.com&gt;
</para>
</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %example-rules%
  ;; Specify rules before and after an Example
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%figure-rules%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%figure-rules%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%figure-rules%</RefName>
  <RefPurpose>Specify rules before and after an Figure</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%figure-rules%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If <literal>#t</literal>, rules will be drawn before and after each
<literal>Figure</literal>.</para>


</RefSect1>

<RefSect1><Title>Author</Title>

<para>
Norman Walsh, &lt;ndw@nwalsh.com&gt;
</para>
</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %figure-rules%
  ;; Specify rules before and after an Figure
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%table-rules%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%table-rules%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%table-rules%</RefName>
  <RefPurpose>Specify rules before and after an Table</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%table-rules%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If <literal>#t</literal>, rules will be drawn before and after each
<literal>Table</literal>.</para>


</RefSect1>

<RefSect1><Title>Author</Title>

<para>
Norman Walsh, &lt;ndw@nwalsh.com&gt;
</para>
</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %table-rules%
  ;; Specify rules before and after an Table
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%equation-rules%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%equation-rules%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%equation-rules%</RefName>
  <RefPurpose>Specify rules before and after an Equation</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%equation-rules%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If <literal>#t</literal>, rules will be drawn before and after each
<literal>Equation</literal>.</para>


</RefSect1>

<RefSect1><Title>Author</Title>

<para>
Norman Walsh, &lt;ndw@nwalsh.com&gt;
</para>
</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %equation-rules%
  ;; Specify rules before and after an Equation
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%informalexample-rules%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%informalexample-rules%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%informalexample-rules%</RefName>
  <RefPurpose>Specify rules before and after an InformalExample</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%informalexample-rules%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If <literal>#t</literal>, rules will be drawn before and after each
<literal>InformalExample</literal>.</para>


</RefSect1>

<RefSect1><Title>Author</Title>

<para>
Norman Walsh, &lt;ndw@nwalsh.com&gt;
</para>
</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %informalexample-rules%
  ;; Specify rules before and after an InformalExample
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%informalfigure-rules%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%informalfigure-rules%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%informalfigure-rules%</RefName>
  <RefPurpose>Specify rules before and after an InformalFigure</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%informalfigure-rules%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If <literal>#t</literal>, rules will be drawn before and after each
<literal>InformalFigure</literal>.</para>


</RefSect1>

<RefSect1><Title>Author</Title>

<para>
Norman Walsh, &lt;ndw@nwalsh.com&gt;
</para>
</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %informalfigure-rules%
  ;; Specify rules before and after an InformalFigure
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%informaltable-rules%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%informaltable-rules%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%informaltable-rules%</RefName>
  <RefPurpose>Specify rules before and after an InformalTable</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%informaltable-rules%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If <literal>#t</literal>, rules will be drawn before and after each
<literal>InformalTable</literal>.</para>


</RefSect1>

<RefSect1><Title>Author</Title>

<para>
Norman Walsh, &lt;ndw@nwalsh.com&gt;
</para>
</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %informaltable-rules%
  ;; Specify rules before and after an InformalTable
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%informalequation-rules%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%informalequation-rules%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%informalequation-rules%</RefName>
  <RefPurpose>Specify rules before and after an InformalEquation</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%informalequation-rules%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If <literal>#t</literal>, rules will be drawn before and after each
<literal>InformalEquation</literal>.</para>


</RefSect1>

<RefSect1><Title>Author</Title>

<para>
Norman Walsh, &lt;ndw@nwalsh.com&gt;
</para>
</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %informalequation-rules%
  ;; Specify rules before and after an InformalEquation
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>

</reference>
<reference><title>Miscellaneous</title>

<RefEntry id="%content-title-end-punct%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%content-title-end-punct%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%content-title-end-punct%</RefName>
  <RefPurpose>List of punctuation chars at the end of a run-in head</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%content-title-end-punct%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If a run-in head ends in any of these characters, the
<literal>%default-title-end-punct%</literal> is not used.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %content-title-end-punct% 
  ;; List of punctuation chars at the end of a run-in head
  '(#\. #\! #\? #\:))
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%honorific-punctuation%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%honorific-punctuation%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%honorific-punctuation%</RefName>
  <RefPurpose>Punctuation to follow honorifics in names</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%honorific-punctuation%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
The honorific punctuation is placed after the honorific in
a name. </para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %honorific-punctuation%
  ;; Punctuation to follow honorifics in names
  ".")
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%default-quadding%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%default-quadding%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%default-quadding%</RefName>
  <RefPurpose>The default quadding</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%default-quadding%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
At present, this is only used on paragraphs.  It specifies the
value of the ALIGN attribute on the paragraph.  This would be better
done with CSS, but not all browsers support it yet and this has been
oft requested functionality.
</para>
<para>
A value of #f suppresses the ALIGN attribute altogether.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %default-quadding%   
  ;; The default quadding
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%default-simplesect-level%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%default-simplesect-level%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%default-simplesect-level%</RefName>
  <RefPurpose>Default section level for 'SimpleSect's.</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%default-simplesect-level%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If <literal>SimpleSect</literal>s appear inside other section-level
elements, they are rendered at the appropriate section level, but if they
appear in a component-level element, they are rendered at 
<literal>%default-simplesect-level%</literal>.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %default-simplesect-level% 
  ;; Default section level for 'SimpleSect's.
  4)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%default-title-end-punct%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%default-title-end-punct%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%default-title-end-punct%</RefName>
  <RefPurpose>Default punctuation at the end of a run-in head.</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%default-title-end-punct%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
The punctuation used at the end of a run-in head (e.g. on FORMALPARA).</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %default-title-end-punct% 
  ;; Default punctuation at the end of a run-in head.
  ".")
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%footnotes-at-end%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%footnotes-at-end%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%footnotes-at-end%</RefName>
  <RefPurpose>Should footnotes appear at the end of HTML pages?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%footnotes-at-end%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If <literal>#t</literal>, footnotes will be placed at the end of each HTML page
instead of immediately following the place where they occur.
Note: support for this feature is dependent on the processing
performed by the (footer-navigation) function; if you replace
that function, make sure that you're replacement calls
(make-endnotes).</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %footnotes-at-end%
  ;; Should footnotes appear at the end of HTML pages?
  #t)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%link-mailto-url%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%link-mailto-url%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%link-mailto-url%</RefName>
  <RefPurpose>Mailto URL for LINK REL=made</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%link-mailto-url%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If not <literal>#f</literal>, the <literal>%link-mailto-url%</literal> address will be used in a 
LINK REL=made element in the HTML HEAD.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %link-mailto-url%
  ;; Mailto URL for LINK REL=made
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%show-comments%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%show-comments%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%show-comments%</RefName>
  <RefPurpose>Display Comment elements?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%show-comments%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If true, comments will be displayed, otherwise they are suppressed.
Comments here refers to the <literal>Comment</literal> element, which will be renamed
<literal>Remark</literal> in DocBook V4.0, not SGML/XML comments which are unavailable.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %show-comments%
  ;; Display Comment elements?
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="%writing-mode%">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>%writing-mode%</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>%writing-mode%</RefName>
  <RefPurpose>The writing mode</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
%writing-mode%
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
The writing mode is either <literal>left-to-right</literal>, or 
<literal>right-to-left</literal>.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define %writing-mode%
  ;; The writing mode
  'left-to-right)
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="$object-titles-after$">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>$object-titles-after$</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>$object-titles-after$</RefName>
  <RefPurpose>List of objects who's titles go after the object</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
($object-titles-after$)
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
Titles of formal objects (Figures, Equations, Tables, etc.)
in this list will be placed below the object instead of above it.
</para>
<para>
This is a list of element names, for example:
<literal>(list (normalize "figure") (normalize "table"))</literal>.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define ($object-titles-after$)
  ;; List of objects who's titles go after the object
  '())
</ProgramListing>
</RefSect1>

</RefEntry>
<RefEntry id="firstterm-bold">
<!-- This file is generated automatically from the DSSSL source. -->
<!-- Do not edit this file! -->

<RefMeta>
  <RefEntryTitle>firstterm-bold</RefEntryTitle>
  <RefMiscInfo Role="file">dbparam.dsl</RefMiscInfo>
</RefMeta>

<RefNameDiv>
  <RefName>firstterm-bold</RefName>
  <RefPurpose>Make FIRSTTERM elements bold?</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv><Title>Synopsis</Title>
<Synopsis>
firstterm-bold
</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>

<para>
If <literal>#t</literal>, FIRSTTERMs will be bold, to distinguish them from
simple GLOSSTERMs.</para>


</RefSect1>
<RefSect1><Title>Source Code</Title>

<ProgramListing>
(define firstterm-bold
  ;; Make FIRSTTERM elements bold?
  #f)
</ProgramListing>
</RefSect1>

</RefEntry>

</reference>
</book>