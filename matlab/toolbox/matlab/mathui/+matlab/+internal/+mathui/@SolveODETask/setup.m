function setup(app)
% Method of SolveODETask called by constructor for initial creation and
% layout of components
%
%   FOR INTERNAL USE ONLY -- This feature is intentionally undocumented.
%   Its behavior may change, or it may be removed in a future release.

% Copyright 2024 The MathWorks, Inc.

%%%% Top level setup %%%%
% Set AutoRun off by default
app.AutoRun = false;
% Create the ui components and lay them out in the figure
% The main grid only has one tile and it is split into accordion panels
app.LayoutManager.RowHeight = "fit";
app.LayoutManager.ColumnWidth = "1x";
app.Accordion = matlab.ui.container.internal.Accordion(Parent = app.LayoutManager);

%%%% Section 1 - Select problem details %%%%
w1 = 160; % helpers to line up controls in this section
w2 = 140;
setupgrid = createNewSection(app,app.getMsgText("SectionTitle1Define"),...
    {"fit","fit",40,110,w2,"fit",22,"fit"},5);
% Row 1: Problem format buttons
uilabel(setupgrid, Text = app.getMsgText("FormatLabel"));
buttoncolumns = {[2 3], 4, 5, [6 8]};
for k = 1:4
    % Setup 'state' buttons rather than 'toggle' buttons since they can
    % easily be positioned in gridlayout
    app.ProblemFormatButtons(k) = uibutton(setupgrid,"state",...
        Text = "", ...
        Interpreter = "latex",...
        HorizontalAlignment = "center",...
        UserData = struct("MassMatrixType",k-1),...
        Tag = "ProbButton" + k,...
        ValueChangedFcn = @app.doUpdate,...
        Tooltip = app.getMsgText("ProblemFormatTooltip" + k));
    app.ProblemFormatButtons(k).Layout.Column = buttoncolumns{k};
    % Button text (equations) set dynamically in doUpdate based on whether
    % parameters is checked
end
% Row 2: Parameters checkbox/WSDD
app.ParametersCB = uicheckbox(setupgrid,...
    Text = app.getMsgText("ParametersCBLabel"),...
    ValueChangedFcn = @app.doUpdate,...
    Tooltip = app.getMsgText("ParametersCBTooltip"),...
    Tag = "ParametersCB");
app.ParametersCB.Layout.Column = [1 3];
app.ParametersWSDD = matlab.ui.control.internal.model.WorkspaceDropDown(...
    Parent = setupgrid, ...
    ValueChangedFcn = @app.doUpdate,...
    Tooltip = app.getMsgText("ParametersTooltip"),...
    Tag = "ParametersWSDD",...
    ShowNonExistentVariable = true);
% Technically, anything could be parameter, but it could be confusing to
% show the result of the live task as an input back into the task. This
% filter function prevents the output "solData" from showing up in the
% parameters dropdown, as well as and ode objects
app.ParametersWSDD.FilterVariablesFcn = @(var) ~isa(var,'ode') && ~isa(var,'matlab.ode.ODEResults');
% Row 3: ODEFcn
app.OdefunLabel = uilabel(setupgrid,Text = ""); % Text set dynamically in doUpdate
app.OdefunLabel.Layout.Row = 3;
app.OdefunLabel.Layout.Column = [1 2];
app.OdefunSelector = matlab.internal.dataui.FunctionSelector(setupgrid,...
    AllowEmpty = true,...
    IncludeBrowse = true,...
    ValueChangedFcn = @app.doUpdate,...
    NewFcnName = app.ExampleODEName,...
    Tooltip = app.getMsgText("ODEFcnTooltip"),...
    AutoArrangeGrid = false);
app.OdefunSelector.GridLayout.ColumnWidth{1} = w1;
app.OdefunSelector.GridLayout.ColumnWidth{2} = w2;
app.OdefunSelector.Layout.Column = [3 6];
helpicon = uiimage(setupgrid,...
    ImageClickedFcn = @(~,~)helpview("matlab","ODELET_ODEFcn"),...
    ScaleMethod = "fill",...
    Tooltip = app.getMsgText("ODEFcnHelpTooltip"));
matlab.ui.control.internal.specifyIconID(helpicon,...
    "helpMonoUI",16,16);
% Row 4: Mass Matrix
app.MassMatrixLabel = uilabel(setupgrid,Text = "");
app.MassMatrixLabel.Layout.Row = 4;
app.MassMatrixLabel.Layout.Column = [1 2];
app.MassMatrixOps = matlab.internal.mathui.MassMatrixOptions(...
    Parent = setupgrid,...
    ValueChangedFcn = @app.doUpdate,...
    Visible = false,...
    Tag = "MassMatrixOps");
app.MassMatrixOps.Layout.Column = [3 7];
app.MassMatrixOps.FcnSelector.NewFcnName = app.ExampleMassName;
% Row 5: Initial conditions
L = uilabel(setupgrid,Interpreter = "tex"); % Use tex to render y_0
fn = L.FontName; % Make tex use default font and decrease size to match surrounding labels
L.Text = "\fontsize{9}\fontname{" + fn + "}" + app.getMsgText("InitialValue") + ": y_0";
L.Layout.Column = [1 2];
L.Layout.Row = 5;
app.InitialValueVS = matlab.internal.dataui.VectorSelector(setupgrid, ...
    ValueChangedFcn = @app.doUpdate,...
    Tag = "InitialValueVS",...
    Value = '',...
    Tooltip = app.getMsgText("InitialValueTooltip"));
app.InitialValueVS.Layout.Column = [3 5];
app.InitialValueVS.Grid.ColumnWidth{1} = w1;
L = uilabel(setupgrid,Interpreter = "tex"); % As before, use tex to render t_0
L.Text = "\fontsize{9}\fontname{" + fn + "}" + app.getMsgText("InitialTime") + ": t_0";
L.Layout.Column = 6;
app.InitialTimeEditField = uieditfield(setupgrid,"numeric",...
    ValueChangedFcn = @app.doUpdate, ...
    Value = 0, ...
    Tooltip = app.getMsgText("InitialTimeTooltip"),...
    UpperLimitInclusive = "off",... % disallow nonfinite
    LowerLimitInclusive = "off");
app.InitialTimeEditField.Layout.Column = [7 8];

%%%% Section 2 - Advanced Problem Details %%%%
w1 = 120; % Helper to line up controls
problemgrid = createNewSection(app,app.getMsgText("SectionTitle2Advanced"),...
    {"fit",60,50,"fit","fit","fit",22},6);
% This section is collapsed by default
collapse(problemgrid.Parent);
% Row 1: Button selection
uilabel(problemgrid, Text = app.getMsgText("MoreDetailsLabel"));
for b = (app.AdvancedOptions + "Button")
    app.(b) = uibutton(problemgrid,"state",...
        Text = app.getMsgText(b + "Label"),...
        Tooltip = app.getMsgText(b + "Tooltip"),...
        ValueChangedFcn = @app.doUpdate,...
        Tag = b);
end
% We will never have NonNegVars and InitialSlope at the same time, so place
% those on top of each other
app.NonNegVarsButton.Layout.Row = 1;
app.NonNegVarsButton.Layout.Column = 4;
% Row 2: Jacobian
app.JacobianLabel = uilabel(problemgrid,Text = app.getMsgText("JacobianButtonLabel"));
app.JacobianLabel.Layout.Row = 2;
app.JacobianLabel.Layout.Column = 1;
app.JacobianOps = matlab.internal.mathui.JacobianOptions(...
    Parent = problemgrid,...
    ValueChangedFcn = @app.doUpdate);
app.JacobianOps.Layout.Column = [2 6];
app.JacobianOps.FcnSelector.NewFcnName = app.ExampleJacobianName;
% Row 3: Event definition
app.EventLabel = uilabel(problemgrid,Text = app.getMsgText("EventLabel"));
app.EventLabel.Layout.Row = 3;
app.EventLabel.Layout.Column = 1;
app.EventOps = matlab.internal.mathui.EventOptions(...
    Parent = problemgrid,...
    ValueChangedFcn = @app.doUpdate,...
    Visible = false);
app.EventOps.Layout.Column = [2 7];
app.EventOps.EventfunSelector.NewFcnName = app.ExampleEventName;
app.EventOps.CallbackSelector.NewFcnName = app.ExampleEventCallbackName;
% Row 4: Initial slope
app.InitialSlopeLabel = uilabel(problemgrid,Text = app.getMsgText("InitialSlopeButtonLabel"));
app.InitialSlopeLabel.Layout.Row = 4;
app.InitialSlopeLabel.Layout.Column = 1;
app.InitialSlopeVS = matlab.internal.dataui.VectorSelector(...
    Parent = problemgrid, ...
    TargetSize = app.NumY0,...
    RestrictSize = true,...
    ValueChangedFcn = @app.doUpdate,...
    Tooltip = app.getMsgText("InitialSlopeVSTooltip"));
app.InitialSlopeVS.Layout.Column = [2 6];
app.InitialSlopeVS.Grid.ColumnWidth{1} = w1;
% Row 5: Nonnegative variables
app.NonNegVarsLabel = uilabel(problemgrid,Text = app.getMsgText("NonNegVarsButtonLabel"));
app.NonNegVarsLabel.Layout.Row = 5;
app.NonNegVarsLabel.Layout.Column = 1;
app.NonNegVarsVS = matlab.internal.dataui.VectorSelector(...
    Parent = problemgrid, ...
    TargetSize = app.NumY0,...
    IsVectorOfIndices = true,...
    ValueChangedFcn = @app.doUpdate,...
    Tooltip = app.getMsgText("NonNegVarsVSTooltip"));
app.NonNegVarsVS.Layout.Column = [2 3];
% Row 6: MassSparsity
app.MassSparsityLabel = uilabel(problemgrid,Text = app.getMsgText("MassSparsityButtonLabel"));
app.MassSparsityLabel.Layout.Row = 6;
app.MassSparsityLabel.Layout.Column = 1;
app.MassSparsityDD = matlab.ui.control.internal.model.WorkspaceDropDown(...
    Parent = problemgrid,...
    ValueChangedFcn = @app.doUpdate,...
    Tooltip = app.getMsgText("MassSparsityWSDDTooltip"),...
    ShowNonExistentVariable = true);
app.MassSparsityDD.Layout.Column = [2 3];
app.MassSparsityDD.FilterVariablesFcn = @app.filterSparsity;

%%%% Section 3: Solver and solver options %%%%
efwidth = 60;
solvergrid = createNewSection(app,"",{"fit","fit",efwidth,"fit",efwidth,"fit",efwidth,"fit",efwidth},3);
% Title is set dynamically in doUpdate
collapse(solvergrid.Parent);
% Row 1: pick solver + stiffness CB
uilabel(solvergrid,Text = app.getMsgText("SolverLabel"));
app.SolverDropdown = uidropdown(solvergrid,...
    ValueChangedFcn = @app.doUpdate,...
    Items = [app.getMsgText("SolverAuto") app.getMsgText("SolverStiff") ...
    app.getMsgText("SolverNonStiff") app.SupportedSolvers],...
    ItemsData = ["auto" "stiff" "nonstiff" app.SupportedSolvers],...
    Tag = "SolverDropdown");
app.SolverDropdown.Layout.Column = [2 3];
app.OdeObj = ode();
app.DetectStiffnessCB = uicheckbox(solvergrid,...
    Text = app.getMsgText("DetectStiffness"),...
    Tooltip = app.getMsgText("DetectStiffnessTooltip"),...
    ValueChangedFcn = @app.doUpdate);
app.DetectStiffnessCB.Layout.Column = [4 5];
app.InitialStepLabel = uilabel(solvergrid,Text = app.getMsgText("InitialStep"));
app.InitialStepLabel.Layout.Row = 1;
app.InitialStepLabel.Layout.Column = 4;
app.InitialStepEditField = uieditfield(solvergrid,"numeric",...
    Limits = [0 inf],...
    LowerLimitInclusive = false,...
    AllowEmpty = true,...
    ValueChangedFcn = @app.doUpdate,...
    Placeholder = app.getMsgText("SizePlaceholder"),...
    Tooltip = app.getMsgText("InitialStepTooltip"));
app.InitialStepEditField.Layout.Column = 5;
app.MinStepLabel = uilabel(solvergrid,Text = app.getMsgText("MinStep"));
app.MinStepEditField = uieditfield(solvergrid,"numeric",...
    Limits = [0 inf],...
    LowerLimitInclusive = false,...
    ValueChangedFcn = @app.doUpdate,...
    AllowEmpty = true,...
    Placeholder = app.getMsgText("SizePlaceholder"),...
    Tooltip = app.getMsgText("MinStepTooltip"));
app.MaxStepLabel = uilabel(solvergrid,Text = app.getMsgText("MaxStep"));
app.MaxStepEditField = uieditfield(solvergrid,"numeric",...
    Limits = [0 inf],...
    LowerLimitInclusive = false,...
    ValueChangedFcn = @app.doUpdate,...
    AllowEmpty = true,...
    Placeholder = app.getMsgText("SizePlaceholder"),...
    Tooltip = app.getMsgText("MaxStepTooltip"));
% Row 2: 
L = uilabel(solvergrid,Text = app.getMsgText("AbsTol"));
L.Layout.Row = 2;
L.Layout.Column = [1 2];
app.AbsTolEditField = uieditfield(solvergrid,"numeric",...
    ValueChangedFcn = @app.doUpdate,...
    Limits = [0 inf],...
    LowerLimitInclusive = "off",...
    ValueDisplayFormat = "%1.1e",...
    Tooltip = app.getMsgText("AbsTolTooltip"));
uilabel(solvergrid,Text = app.getMsgText("RelTol"));
app.RelTolEditField = uieditfield(solvergrid,"numeric",...
    ValueChangedFcn = @app.doUpdate,...
    Limits = [100*eps inf],...
    ValueDisplayFormat = "%1.1e",...
    Tooltip = app.getMsgText("RelTolTooltip"));
app.NormControlCB = uicheckbox(solvergrid,...
    Text = app.getMsgText("NormControl"),...
    Tooltip = app.getMsgText("NormControlTooltip") + ": norm(e(i)) <= max(RelTol*norm(y(i)),AbsTol(i))",...
    ValueChangedFcn = @app.doUpdate);
app.NormControlCB.Layout.Column = [6 7];
app.VectorizationCB = uicheckbox(solvergrid,...
    Text = app.getMsgText("Vectorized"),...
    Tooltip = app.getMsgText("VectorizedTooltip"),...
    ValueChangedFcn = @app.doUpdate);
app.VectorizationCB.Layout.Column = [8 9];
% Row 3: 
app.MaxOrderLabel = uilabel(solvergrid,Text = app.getMsgText("MaxOrder"));
app.MaxOrderLabel.Layout.Row = 3;
app.MaxOrderLabel.Layout.Column = [1 2];
app.MaxOrderSpinner = uispinner(solvergrid,...
    Limits = [1 5],...
    RoundFractionalValues = true,...
    ValueChangedFcn = @app.doUpdate,...
    Tooltip = app.getMsgText("MaxOrderTooltip"));
app.BDFCB  = uicheckbox(solvergrid,...
    Text = app.getMsgText("BDF"),...
    Tooltip = app.getMsgText("BDFTooltip"),...
    ValueChangedFcn = @app.doUpdate);

%%%% Section 4: Solution details %%%%
solutiongrid = createNewSection(app,app.getMsgText("SectionTitle4Solve"),...
    {"fit","fit","fit","fit","fit"},2);
collapse(solutiongrid.Parent);
% Row 1: rangeOrVector and (t0 and tf) or t
app.SolutionTypeDD = uidropdown(solutiongrid,...
    Items = [app.getMsgText("SolveTypeRange") app.getMsgText("SolveTypeVector")],...
    ItemsData = ["solveRange" "solveVector"],...
    ValueChangedFcn = @app.doUpdate,...
    Tooltip = app.getMsgText("SolveTypeTooltip"));
app.TimeRangeEditField1 = uieditfield(solutiongrid,"numeric",...
    ValueChangedFcn = @app.doUpdate,...
    Tooltip = app.getMsgText("TimeRangeTooltip1"));
app.TimeRangeEditField2 = uieditfield(solutiongrid,"numeric",...
    ValueChangedFcn = @app.doUpdate,...
    Tooltip = app.getMsgText("TimeRangeTooltip2"));
app.TimeVectorSelector = matlab.internal.dataui.VectorSelector(solutiongrid, ...
    ValueChangedFcn = @app.doUpdate,...
    Tooltip = app.getMsgText("TimeVectorTooltip"));
app.TimeVectorSelector.Layout.Column = 2;
% Row 2: refineOrSolutionFcn and refine or (Extension and help icon)
app.InterpolateTypeDD = uidropdown(solutiongrid,...
    Items = [app.getMsgText("InterpolateRefine") app.getMsgText("InterpolateSolutionFcn")],...
    ItemsData = ["refine" "solutionFcn"],...
    ValueChangedFcn = @app.doUpdate,...
    Tooltip = app.getMsgText("InterpolateTooltip"));
app.InterpolateTypeDD.Layout.Row = 2;
app.InterpolateTypeDD.Layout.Column = [1 3];
app.RefineSpinner = uispinner(solutiongrid, ...
    ValueChangedFcn = @app.doUpdate, ...
    Limits = [1 inf],...
    UpperLimitInclusive = false,...
    RoundFractionalValues = true,...
    Tooltip = app.getMsgText("RefineTooltip"));
app.ExtensionCB = uicheckbox(solutiongrid,...
    ValueChangedFcn = @app.doUpdate,...
    Text = app.getMsgText("Extension"),...
    Tooltip = app.getMsgText("ExtensionTooltip"));
app.ExtensionCB.Layout.Column = 4;
app.SolFcnHelpIcon = uiimage(solutiongrid,...
    ImageClickedFcn = @(~,~)doc("ode/solutionFcn"),...
    ScaleMethod = "fill",...
    Tooltip = app.getMsgText("SolutionFcnHelpTooltip"));
matlab.ui.control.internal.specifyIconID(app.SolFcnHelpIcon,...
    "helpMonoUI",16,16);

%%%% Section 5: Display %%%%
plotgrid = createNewSection(app,app.getMsgText("SectionTitle5Display"),...
    ["fit","fit","fit" "fit" "fit" "fit"],1);
collapse(plotgrid.Parent);
% All 1 row: plottype, during/after, OutputVariables, Events, Sensitivity
app.DisplayDD = uidropdown(plotgrid,...
    ValueChangedFcn = @app.doUpdate,...
    Tooltip = app.getMsgText("DisplayTooltip"),...
    Tag = "DisplayDD");
app.DisplayTypeDD = uidropdown(plotgrid,...
    ValueChangedFcn = @app.doUpdate,...
    Tooltip = app.getMsgText("DisplayTypeTooltip"),...
    Items = [app.getMsgText("DisplayTypeDuring") app.getMsgText("DisplayTypeAfter")],...
    ItemsData = ["live" "final"]);
app.DisplayVariablesLabel = uilabel(plotgrid,Text = app.getMsgText("OutputSelection"));
app.DisplayVariablesVS = matlab.internal.dataui.VectorSelector(plotgrid, ...
    ValueChangedFcn = @app.doUpdate,...
    IsVectorOfIndices = true,...
    Tooltip = app.getMsgText("OutputSelectionTooltip"),...
    Tag = "DisplayVariablesVS");
app.DisplayEventsCB = uicheckbox(plotgrid,...
    Text = app.getMsgText("DisplayEvents"),...
    ValueChangedFcn = @app.doUpdate,...
    Tooltip = app.getMsgText("DisplayEventsTooltip"));
app.DisplaySensitivityCB = uicheckbox(plotgrid,...
    Text = app.getMsgText("DisplaySensitivity"),...
    ValueChangedFcn = @app.doUpdate,...
    Tooltip = app.getMsgText("DisplaySensitivityTooltip"));

%%%% Wrap up setup %%%%
% All controls have been created. Set default values and visibility
setControlsToDefault(app);
doUpdate(app);

% Set up examples for 'new' buttons in FunctionSelectors
setExampleFunctionScripts(app);
end

% Helper function
function G = createNewSection(app,textLabel,colWidths,numRows)
S = matlab.ui.container.internal.AccordionPanel(Parent = app.Accordion,...
    Title = textLabel);
G = uigridlayout(S,...
    ColumnWidth = colWidths,...
    RowHeight = repmat("fit",1,numRows),...
    Padding = [0 5 0 0]);
end