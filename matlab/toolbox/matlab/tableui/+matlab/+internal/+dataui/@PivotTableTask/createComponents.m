function createComponents(app)
% Setup the layout for the PivotTableTask

%   Copyright 2023 The MathWorks, Inc.

% Create and lay out all of the components used in the live task
app.LayoutManager.RowHeight = "fit";
app.LayoutManager.ColumnWidth = "1x";
app.Accordion = matlab.ui.container.internal.Accordion(Parent=app.LayoutManager);

% Accordion 1: Select Data
p1 = matlab.ui.container.internal.AccordionPanel(...
    Parent=app.Accordion,...
    Title=string(message("MATLAB:dataui:DataDelimiter")));
inputgrid = uigridlayout(p1, ...
    RowHeight=app.TextRowHeight,...
    ColumnWidth=["fit" "fit"],...
    Padding=app.GridPadding);
uilabel(inputgrid,Text=getMsgText(app,"InputTable"));
app.InputDropDown = matlab.ui.control.internal.model.WorkspaceDropDown(...
    Parent=inputgrid,...
    ValueChangedFcn=@app.doUpdate,...
    Tag="InputDropDown",...
    Tooltip=getMsgText(app,"InputTableTooltip"),...
    ShowNonExistentVariable=true);
% Supports nonempty tabulars with at least one valid grouping
% variable (timetables can use time)
app.InputDropDown.FilterVariablesFcn = @(t)istabular(t) && ~isempty(t) && ...
    (istimetable(t) || any(varfun(@matlab.internal.dataui.isValidGroupingVar,t,OutputFormat="uniform")));
% Go ahead and populate the dropdown on startup. This updates the 'fit'
% width of the dropdown so it isn't as jarring when it resizes on open.
app.InputDropDown.populateVariables();

% Accordion 2: Filter (Variable Editor)
% Consists of a label, a panel filled with the variable editor component
% and an icon overlaid on the variable component to toggle sparklines
p2 = matlab.ui.container.internal.AccordionPanel(...
    Parent=app.Accordion,...
    Title=getMsgText(app,"SectionHeaderFilter"),...
    Collapsed=true);
% Variable Editor panel
filterSubGrid = uigridlayout(p2,...
    RowHeight={app.TextRowHeight,8,app.IconWidth,1.5*app.PanelHeight},...
    ColumnWidth={4,app.IconWidth,"1x"},...
    Padding=app.GridPadding,RowSpacing=0,ColumnSpacing=2);
app.VELabel = uilabel(filterSubGrid); % dynamic text set in doupdate
app.VELabel.Layout.Column = [1 3];
% Create a panel for the VE component so we can make the thicker border to
% match the other panels
pVE = uipanel(filterSubGrid,...
    BorderWidth=app.PanelBorder,...
    Tooltip=getMsgText(app,"FilterTooltip"));
pVE.Layout.Column = [1 3];
pVE.Layout.Row = [2 4];
% Placing VE in a grid instead of directly to the panel makes
% it be able to resize with the grid
gVE = uigridlayout(pVE,RowHeight="1x",ColumnWidth="1x",Padding=0);
% VE has a workspace so that the display table doesn't change with changes
% in the base workspace. Name the variable in this workspace
% 'filteredTable' for the appropriate code generation.
app.VEWorkspace = matlab.internal.datatoolsservices.AppWorkspace;
assignin(app.VEWorkspace,app.FilterName,table(1));
app.VariableEditor = matlab.ui.control.internal.VariableEditor(Parent=gVE,...
    DataFilterable=true, ...
    Workspace=app.VEWorkspace, ...
    Variable=app.FilterName,...
    DataSortable=false,...
    InfiniteGrid=false,...
    RowHeadersVisible=true);
% When users interact with the VE's filtering, capture the filtering script
app.VariableEditor.UserDataInteractionCallbackFcn= @app.handleFilterInteraction;
% Overlay sparklines icon on top of VE component
app.SparklinesIcon = uiimage(filterSubGrid,...
    ImageClickedFcn=@app.sparklinesIconClicked,...
    Tooltip=getMsgText(app,"SparklinesTooltip"));
app.SparklinesIcon.Layout.Row = 3;
app.SparklinesIcon.Layout.Column = 2;

% Accordion 3: Rows, Columns, Values
% Consist of 3 subpanels, each has an icon and label
p3 = matlab.ui.container.internal.AccordionPanel(...
    Parent=app.Accordion,...
    Title=getMsgText(app,"SectionHeaderPivot"),...
    Collapsed=true);
maingrid = uigridlayout(p3,...
    RowHeight=app.PanelHeight,...
    ColumnWidth=["1x" "1x" "1x"],...
    Padding=app.GridPadding);

% Create Rows and Columns panels, which are nearly identical
createRowsColumnsPanel(app,maingrid,'Rows');
createRowsColumnsPanel(app,maingrid,'Columns');

% Values panel
% values subgrid holds the label, icon, and box
[icon,label,app.ValuesPanel] = setupSubPanel(app,maingrid);
matlab.ui.control.internal.specifyIconID(icon,...
    'tableCellHighlighted',app.IconWidth,app.IconWidth);
icon.Tooltip = getMsgText(app,"ValuesTooltip");
label.Text = getMsgText(app,"Values");
label.Tooltip = getMsgText(app,"ValuesTooltip");
% This panel contains data variable, method, and custom
% function selector
gridInValuesPanel = uigridlayout(app.ValuesPanel, ...
    RowHeight={app.TextRowHeight "fit"},...
    ColumnWidth=["1x" "1x"], ...
    Padding=2,ColumnSpacing=2,RowSpacing=2);
app.DataVarDropDown = uidropdown(gridInValuesPanel,...
    ValueChangedFcn=@app.handleEditableAndDoUpdate,...
    Tag="DataVarDropDown"); % dynamic items with input
app.MethodDropDown = uidropdown(gridInValuesPanel, ...
    ValueChangedFcn=@app.doUpdate); % dynamic items with datavar selection
app.CustomMethodSelector = matlab.internal.dataui.FunctionSelector(gridInValuesPanel,...
    ValueChangedFcn=@app.doUpdate,AutoArrangeGrid=false);
% Rearrange the default layout of the FunctionSelector so it
% fits in the "Values" box
app.CustomMethodSelector.Layout.Column = [1 2];
app.CustomMethodSelector.GridLayout.ColumnWidth = ["2x" "1x"];
app.CustomMethodSelector.GridLayout.RowHeight = [app.TextRowHeight app.TextRowHeight];
app.CustomMethodSelector.GridLayout.ColumnSpacing = 2;
app.CustomMethodSelector.GridLayout.RowSpacing = 2;
app.CustomMethodSelector.FcnTypeDropDown.Layout.Column = [1 2];
app.CustomMethodSelector.LocalFcnDropDown.Layout.Column = 1;
app.CustomMethodSelector.LocalFcnDropDown.Layout.Row = 2;
app.CustomMethodSelector.NewFcnButton.Layout.Column = 2;
app.CustomMethodSelector.NewFcnButton.Layout.Row = 2;
app.CustomMethodSelector.HandleEditField.Layout.Column = [1 2];
app.CustomMethodSelector.HandleEditField.Layout.Row = 2;
% Example custom method
app.CustomMethodSelector.NewFcnName = 'customStatistic';
% Same example as in ComputeByGroup for groupsummary, but with
% different language to match the pivot function
app.CustomMethodSelector.NewFcnText = [newline ...
    'function y = customStatistic(x)' newline ...
    '% ' char(getMsgText(app,"CustomFunctionCodeComment1","x")) newline ...
    '% ' char(getMsgText(app,"CustomFunctionCodeComment2","y")) newline ...
    '% ' char(getMsgText(app,"CustomFunctionCodeComment3")) newline ...
    'y = nnz(isoutlier(x));' newline ...
    'end' newline];

% Accordion 4: Remaining pivot controls/options
p4 = matlab.ui.container.internal.AccordionPanel(...
    Parent=app.Accordion,...
    Title=getMsgText(app,"SectionHeaderOptions"),...
    Collapsed=true);
optionsGrid = uigridlayout(p4,Padding=app.GridPadding,...
    RowHeight=repmat("fit",1,5),...
    ColumnWidth=repmat("fit",1,4));
% row 1: Include totals
uilabel(optionsGrid,...
    Text=getMsgText(app,"IncludeTotals")+":");
app.IncludeRowTotalsCB = uicheckbox(optionsGrid,...
    Text=getMsgText(app,"Rows"), ...
    ValueChangedFcn=@app.doUpdate,...
    Tooltip=getMsgText(app,"IncludeTotalsTooltipRows"));
app.IncludeColumnTotalsCB = uicheckbox(optionsGrid,...
    Text=getMsgText(app,"Columns"), ...
    ValueChangedFcn=@app.doUpdate,...
    Tooltip=getMsgText(app,"IncludeTotalsTooltipColumns"));
% row 2: include missing/empty
L = uilabel(optionsGrid,...
    Text=getMsgText(app,"IncludeGroupsBy")+":");
L.Layout.Row = 2;
L.Layout.Column = 1;
app.IncludeMissingGroupsCB = uicheckbox(optionsGrid,...
    Text=getMsgText(app,"IncludeMissingGroups"),...
    ValueChangedFcn=@app.doUpdate); % tooltip updated dynamically in doupdate
app.IncludeEmptyGroupsCB = uicheckbox(optionsGrid, ...
    Text=getMsgText(app,"IncludeEmptyGroups"),...
    ValueChangedFcn=@app.doUpdate); % tooltip updated dynamically in doupdate
% row 3: Use RowNames
app.RowLabelLocationLabel = uilabel(optionsGrid,...
    Text=getMsgText(app,"RowLabelLocation"));
app.RowLabelLocationLabel.Layout.Row = 3;
app.RowLabelLocationLabel.Layout.Column = 1;
app.RowLabelLocationDropDown = uidropdown(optionsGrid,...
    Items = [getMsgText(app,"RowNames"), getMsgText(app,"FirstTableVariable")],...
    ItemsData = {'rowNames','tableVar'},...
    ValueChangedFcn = @app.doUpdate,...
    Tooltip = getMsgText(app,"UseRowNamesTooltip"));
app.RowLabelLocationDropDown.Layout.Column = [2 3];
% row 4:OutputFormat
app.OutputFormatLabel = uilabel(optionsGrid,...
    Text=getMsgText(app,"OutputFormat"));
app.OutputFormatLabel.Layout.Row = 4;
app.OutputFormatLabel.Layout.Column = 1;
app.OutputFormatDropDown = uidropdown(optionsGrid, ...
    Items=[getMsgText(app,"nested") getMsgText(app,"flat")],...
    ItemsData={'nested','flat'}, ...
    ValueChangedFcn=@app.doUpdate);
app.OutputFormatDropDown.Layout.Column = [2 3];
% row 5: IncludedEdge
app.IncludedEdgeLabel = uilabel(optionsGrid,...
    Text=getMsgText(app,"IncludedEdge"));
app.IncludedEdgeLabel.Layout.Row = 5;
app.IncludedEdgeLabel.Layout.Column = 1;
app.IncludedEdgeDropDown = uidropdown(optionsGrid, ...
    Items=[string(message("MATLAB:tableui:groupingLeft")) string(message("MATLAB:tableui:groupingRight"))],...
    ItemsData={'left','right'},...
    ValueChangedFcn=@app.doUpdate,...
    Tooltip = getMsgText(app,"IncludedEdgeTooltip"));
app.IncludedEdgeDropDown.Layout.Column = [2 3];

% Accordion 5: Display Results
p5 = matlab.ui.container.internal.AccordionPanel( ...
    Parent=app.Accordion,...
    Title=string(message("MATLAB:dataui:Visualizeresults")),...
    Collapsed=true);
g3 = uigridlayout(p5,...
    RowHeight=["fit" "fit"],...
    ColumnWidth=["fit" "fit"],...
    Padding=app.GridPadding);
app.DisplayTableCB = uicheckbox(g3, ...
    Text=getMsgText(app,"DisplayTable"), ...
    ValueChangedFcn=@app.doUpdate);
app.DisplayTableCB.Layout.Column = [1 2];
uilabel(g3,"Text",getMsgText(app,"ChartType"));
app.ChartDropDown = uidropdown(g3,...
    Items = [string(message("MATLAB:dataui:None")) getMsgText(app,"heatmap") ...
    getMsgText(app,"bar3") getMsgText(app,"bar") getMsgText(app,"bars")],...
    ItemsData={'none' 'heatmap' 'bar3' 'bar' 'bars'},...
    ValueChangedFcn=@app.doUpdate);
end

function createRowsColumnsPanel(app,accordionPanelGrid,RC)
% Create a grid that contains the label, icon, and box (panel)
[icon,label,app.([RC 'Panel'])] = setupSubPanel(app,accordionPanelGrid);
tooltip = getMsgText(app,RC + "Tooltip");
% icon ID is tableRowHeaderHighlighted or tableColumnHeaderHighlighted
matlab.ui.control.internal.specifyIconID(icon,...
    ['table' RC(1:end-1) 'HeaderHighlighted'],app.IconWidth,app.IconWidth);
icon.Tooltip = tooltip;
label.Text = getMsgText(app,RC);
label.Tooltip = tooltip;
app.([RC 'Panel']).Tooltip = tooltip;
% Create a grid inside the box for the controls
gridInPanel = uigridlayout(app.([RC 'Panel']), ...
    RowHeight=app.TextRowHeight,...
    ColumnWidth={"fit","1x",app.TextRowHeight,app.IconWidth,app.IconWidth},...
    Scrollable="on", ...
    RowSpacing=2,Padding=2,ColumnSpacing=2);
% Start with an "Add" button
app.([RC 'MainAddButton']) = uibutton(gridInPanel,...
    Text=getMsgText(app,"Add"),...
    ButtonPushedFcn={@app.addRowsColumnsVar RC});
% Other controls added on the fly
end

function [icon,label,panel] = setupSubPanel(app,parentGrid)
subGrid = uigridlayout(parentGrid,...
    RowHeight={app.TextRowHeight,"1x"},...
    ColumnWidth={app.IconWidth,"fit","1x"},...
    Padding=0, RowSpacing=0, ColumnSpacing=2);
icon = uiimage(subGrid, ScaleMethod="none");
label = uilabel(subGrid, VerticalAlignment="bottom");
panel = uipanel(subGrid, BorderWidth=app.PanelBorder);
panel.Layout.Row = 2;
panel.Layout.Column = [1 3];
end