% Run Python Code live task

% Copyright 2023-2024 The MathWorks, Inc.
classdef RunPythonCodeTask < matlab.task.LiveTask
    properties (SetAccess = private, GetAccess = public, Transient, Hidden)
        % main panel
        PLTAccordion                    matlab.ui.container.internal.Accordion

        % Input mode selection widgets -> code vs. file
        PyInputModeSelectionPanel       matlab.ui.container.internal.AccordionPanel
        PyInputModeSelectionGrid        matlab.ui.container.GridLayout
        PyInputModeRadioBtnGroup        matlab.ui.container.ButtonGroup
        PyInputModeCodeRadioBtn         matlab.ui.control.RadioButton
        PyInputModeFileRadioBtn         matlab.ui.control.RadioButton

        % Python code input widgets for pyrun
        PyInputPanel                    matlab.ui.container.internal.AccordionPanel
        InputGrid                       matlab.ui.container.GridLayout
        InputCodeGrid                   matlab.ui.container.GridLayout
        InputCode                       matlab.ui.control.TextArea

        % Python filename input widgets for pyrunfile
        InputFileGrid                   matlab.ui.container.GridLayout
        InputFile                       matlab.ui.control.EditField
        InputFileName                   string
        InputFileBrowseButton           matlab.ui.control.Button
        InputFileOpenButton             matlab.ui.control.Button

        % Optional command line argument section widgets
        NumberCmdArgs                   double
        CmdArgsSelectionPanel           matlab.ui.container.internal.AccordionPanel
        CmdArgsSelectionGrid            matlab.ui.container.GridLayout
        CmdArgsGrid                     matlab.ui.container.GridLayout
        CmdArgsLabel(1,:)               matlab.ui.control.Label
        CmdArgsEdit(1,:)                matlab.ui.control.EditField
        CmdArgsAddButton(1,:)           matlab.ui.control.Image
        CmdArgsRemoveButton(1,:)        matlab.ui.control.Image
        CmdArgsUpButton(1,:)            matlab.ui.control.Image
        CmdArgsDownButton(1,:)          matlab.ui.control.Image

        % Flags to handle long output var names
        LargeOutputVarSizeDetected      logical
        ForceSelectVars                 logical

        % Output options widgets
        OutputOptionsPanel              matlab.ui.container.internal.AccordionPanel
        OutputOptionsGrid               matlab.ui.container.GridLayout
        OutputOptionsRadioButtonGrid    matlab.ui.container.GridLayout
        OutputOptionsLabel              matlab.ui.control.Label
        OutputOptionsRadioBtnGroup      matlab.ui.container.ButtonGroup
        OutputOptionsAllRadioBtn        matlab.ui.control.RadioButton
        OutputOptionsSelectRadioBtn     matlab.ui.control.RadioButton

        % Output option selection widgets
        OutputOptionsSelectGrid         matlab.ui.container.GridLayout
        OutputOptionsSelectLabel        matlab.ui.control.Label
        OutputSelectButton              matlab.ui.control.Button
        OutputDeselectButton            matlab.ui.control.Button
        OutputAvailableVarsLabel        matlab.ui.control.Label
        OutputOptionsSelectListBox      matlab.ui.control.ListBox
        OutputOutputVarsLabel           matlab.ui.control.Label
        OutputOptionsOutputsListBox     matlab.ui.control.ListBox

        % Display output checkbox widgets
        DisplayOutputsGrid              matlab.ui.container.GridLayout
        DisplayOutputLabel              matlab.ui.control.Label
        DisplayOutputCheckBox           matlab.ui.control.CheckBox

        % Helpers for AST parsing of Python code
        codestr                       string % string array of Python statements (each element is a line)
        mlvars                        string % string array of variable names not defined the python code
        pyvars                        string % string array of variable names generated by the python code
    end

    properties(Dependent)
        State
        Summary
    end

    methods (Access = public, Static)
        function addASTParserToPythonPath()
            P = py.sys.path;
            pathtopy = fullfile(matlabroot, 'toolbox','matlab','external','interfaces','python','+python','+internal');
            Pstr = string(P);
            if (~any(Pstr.contains(pathtopy)))
                P.append(pathtopy);
            end
        end
    end

    methods (Access = private, Hidden)

        function createPyInputModeComponent(task)
            task.PyInputModeSelectionPanel = matlab.ui.container.internal.AccordionPanel(Parent=task.PLTAccordion,...
                Title=task.getMsgText('PyInputModeSelectionPanel'));

            task.PyInputModeSelectionGrid = uigridlayout(task.PyInputModeSelectionPanel, Padding=10);
            task.PyInputModeSelectionGrid.RowHeight = {32};
            task.PyInputModeSelectionGrid.ColumnWidth = {600};

            task.PyInputModeRadioBtnGroup = uibuttongroup(task.PyInputModeSelectionGrid,...
                BorderType="none");
            task.PyInputModeRadioBtnGroup.SelectionChangedFcn = @task.updateInputModePanel;

            task.PyInputModeCodeRadioBtn = uiradiobutton(task.PyInputModeRadioBtnGroup,...
                'Text', task.getMsgText('PyInputModeCodeRadioBtn'), 'Position', [10 10 150 30]);
            task.PyInputModeFileRadioBtn = uiradiobutton(task.PyInputModeRadioBtnGroup,...
                'Text', task.getMsgText('PyInputModeFileRadioBtn'), 'Position', [170 10 150 30]);
        end

        function resetInputValues(task,~,~)
            task.InputCode.Value = "";
            task.InputFile.Value = "";
            task.InputFileName = "";
        end

        function resetPanelCollapsedState(task,~,~)
            task.PyInputModeSelectionPanel.Collapsed = false;
            task.PyInputPanel.Collapsed = false;
            task.CmdArgsSelectionPanel.Collapsed = true;
            task.OutputOptionsPanel.Collapsed = true;
        end

        function updateInputModePanel(task,~,~)
            task.resetASTParserInfo();
            task.resetInputValues();

            task.updateInputModeView();

            task.updateOutputOptions();
            task.resetOutputOptions();
            task.resetPanelCollapsedState();
            updateControls(task);
        end

        function updateInputModeView(task,~,~)
            if task.PyInputModeCodeRadioBtn.Value
            	task.AutoRun = true;
                task.PyInputPanel.Title = task.getMsgText('PyInputPanelCode');
                task.InputCode.Visible = "on";
                task.InputFile.Visible = "off";
                task.InputFileBrowseButton.Visible = "off";
                task.InputFileOpenButton.Visible = "off";

                task.CmdArgsSelectionPanel.Visible = "off";
                if task.NumberCmdArgs > 1
                    task.CmdArgsLabel(2:end) = [];
                    task.CmdArgsEdit(2:end) = [];
                    task.CmdArgsRemoveButton(2:end) = [];
                    task.CmdArgsAddButton(2:end) = [];
                    task.CmdArgsUpButton(2:end) = [];
                    task.CmdArgsDownButton(2:end) = [];
                    delete(task.CmdArgsGrid.Children(numel(task.CmdArgsGrid.ColumnWidth)+1:end));
                end

                task.CmdArgsGrid.RowHeight = {30};
                task.CmdArgsLabel.Visible = "off";
                task.CmdArgsEdit.Visible = "off";
                task.CmdArgsEdit.Value = '';
                task.CmdArgsEdit.Enable = "off";
                task.CmdArgsRemoveButton.Visible = "off";
                task.CmdArgsAddButton.Visible = "off";
                task.CmdArgsUpButton.Visible = "off";
                task.CmdArgsDownButton.Visible = "off";

                task.NumberCmdArgs = 0;

                task.InputGrid.RowHeight = {30,160};
            else
            	task.AutoRun = false;
                task.PyInputPanel.Title = task.getMsgText('PyInputPanelFile');
                task.InputCode.Visible = "off";
                task.InputFile.Visible = "on";
                task.InputFileBrowseButton.Visible = "on";
                task.InputFileOpenButton.Visible = "on";

                task.CmdArgsSelectionPanel.Visible = "on";
                task.CmdArgsLabel.Visible = "on";
                task.CmdArgsEdit.Visible = "on";
                task.CmdArgsRemoveButton.Visible = "on";
                task.CmdArgsAddButton.Visible = "on";
                task.CmdArgsUpButton.Visible = "on";
                task.CmdArgsDownButton.Visible = "on";

                task.InputGrid.RowHeight = {30,0};
            end
        end

        function resetASTParserInfo(task)
            task.mlvars = "";
            task.pyvars = "";
            task.codestr = "";
        end

        function s = getMsgText(~,msgId,varargin)
            % gets the appropriate char from the message catalog
            s = getString(message(['MATLAB:Pyrun:' msgId],varargin{:}));
        end

        function [locals, globals] = getPyLocalsGlobals(task)
            [pylocals, pyglobals] = pyrun(["l = locals()", "g = globals()"], ["l", "g"]);
            locals = dictionary(pylocals);
            globals = dictionary(pyglobals);
        end

        function inPy = isVarInPython(task,var)
            [locals, globals] = task.getPyLocalsGlobals();
            localKeys = string(locals.keys('cell'));
            globalKeys = string(globals.keys('cell'));
            inPy = any(strcmp(localKeys, var)) || any(strcmp(globalKeys, var));
        end

        function createPythonInputComponents(task)
            task.PyInputPanel = matlab.ui.container.internal.AccordionPanel(Parent=task.PLTAccordion,...
                Title=task.getMsgText('PyInputPanelCode'));

            task.InputGrid = uigridlayout(task.PyInputPanel, Padding=10, RowHeight={30,160}, ColumnWidth={440,'fit','fit'});

            task.InputCode = uitextarea(task.InputGrid);
            task.InputCode.Value = "";
            task.InputCode.Layout.Row = [1,2];
            task.InputCode.Layout.Column = [1,2];
            task.InputCode.Visible = "on";
            task.InputCode.Placeholder = join([...
                " #" task.getMsgText('CodeTextAreaPlaceholderL1') newline...
                "#" newline...
                "#" task.getMsgText('CodeTextAreaPlaceholderL2') newline...
                "#" task.getMsgText('CodeTextAreaPlaceholderL3','mlarr','pyvar') newline...
                "#" newline...
                "# import numpy as np" newline...
                "#" newline...
                "# pyvar = mlarr" newline...
                "# np.array(pyvar)"]);
            task.InputCode.ValueChangedFcn = @task.updateControls;
            task.InputCode.WordWrap = 'off';

            task.InputFile = uieditfield(task.InputGrid, "Placeholder", task.getMsgText('FileEditFieldPlaceholder'), "ValueChangedFcn",@task.enterFile);
            task.InputFile.Layout.Row = 1;
            task.InputFile.Layout.Column = 1;
            task.InputFile.Visible = "off";
            task.InputFileBrowseButton = uibutton(task.InputGrid,"Text",task.getMsgText('InputFileBrowseButton'),"ButtonPushedFcn",@task.selectFile);
            task.InputFileBrowseButton.Layout.Row = 1;
            task.InputFileBrowseButton.Layout.Column = 2;
            task.InputFileBrowseButton.Visible = "off";
            task.InputFileOpenButton = uibutton(task.InputGrid,"Text",task.getMsgText('InputFileOpenButton'),"ButtonPushedFcn",@task.openFile);
            task.InputFileOpenButton.Layout.Row = 1;
            task.InputFileOpenButton.Layout.Column = 3;
            task.InputFileOpenButton.Visible = "off";
            task.InputFileOpenButton.Enable = "off";
        end

        function updateFileControls(task, file, path)
            if ~isequal(file,0) && ~isequal(path,0) && ~isempty(file) && ~isequal(file, "")
                task.InputFileName = file;
                task.InputFile.UserData = fullfile(path,file);
                task.InputFile.Value = task.InputFile.UserData;
                task.InputFileOpenButton.Enable = "on";
            else
                task.InputFileName = "";
                task.InputFile.Value = "";
                task.InputFile.UserData = "";
                task.InputFileOpenButton.Enable = "off";
                task.resetASTParserInfo();
            end
            updateControls(task);
        end

        function [file, path] = splitPathAndFile(task,pathVal)
           p = string(pathVal);
           file = "";
           path = "";
           if ~p.endsWith(".py")
               return;
           end

           tokenizedPath = p.split(filesep);
           file = tokenizedPath(end);
           path = join(tokenizedPath(1:end-1), filesep) + filesep;
        end

        function enterFile(task,~,~)
            enteredPath = task.InputFile.Value();
            [file, path] = task.splitPathAndFile(enteredPath);
            task.updateFileControls(file, path);
        end

        function selectFile(task,~,~)
            [file,path] = uigetfile(".py");
            task.updateFileControls(file, path);
        end

        function openFile(task,~,~)
            edit(task.InputFile.UserData);
        end

        function createCmdArgsComponents(task)
            task.NumberCmdArgs = 0;
            task.CmdArgsSelectionPanel = matlab.ui.container.internal.AccordionPanel(Parent=task.PLTAccordion,...
                Title=task.getMsgText('CmdArgsSelectionPanel'));
            task.CmdArgsSelectionPanel.Collapsed = true;
            task.CmdArgsGrid = uigridlayout(task.CmdArgsSelectionPanel,"RowHeight", {30},...
                "ColumnWidth",{'fit',360,16,16,16,16},Padding=10);

            task.CmdArgsLabel = uilabel(task.CmdArgsGrid,"Text", task.getMsgText('CmdArgsLabel'));
            task.CmdArgsEdit(task.NumberCmdArgs + 1) = uieditfield(task.CmdArgsGrid,"Enable","off",...
                "ValueChangedFcn",@task.updateControls);

            task.CmdArgsRemoveButton(task.NumberCmdArgs + 1) = uiimage(task.CmdArgsGrid, ...
                "Enable","off","ImageClickedFcn",{@task.removeArgumentRow}, "VerticalAlignment","center");
            matlab.ui.control.internal.specifyIconID(task.CmdArgsRemoveButton(task.NumberCmdArgs + 1), "minusUI", 16);
            task.CmdArgsRemoveButton(task.NumberCmdArgs + 1).Tooltip = task.getMsgText('CmdArgsRemoveButtonToolTip');

            task.CmdArgsAddButton(task.NumberCmdArgs + 1) = uiimage(task.CmdArgsGrid, ...
                "ImageClickedFcn",{@task.addArgumentRow}, "VerticalAlignment","center");
            matlab.ui.control.internal.specifyIconID(task.CmdArgsAddButton(task.NumberCmdArgs + 1), "plusUI", 16);
            task.CmdArgsAddButton(task.NumberCmdArgs + 1).Tooltip = task.getMsgText('CmdArgsAddButtonToolTip');

            task.CmdArgsDownButton(task.NumberCmdArgs + 1) = uiimage(task.CmdArgsGrid,...
                "ImageClickedFcn",{@task.moveArgumentRowDown},"Enable","off");
            matlab.ui.control.internal.specifyIconID(task.CmdArgsDownButton(task.NumberCmdArgs + 1), "navigationArrowSouthUI", 8);
            task.CmdArgsDownButton(task.NumberCmdArgs + 1).Tooltip = task.getMsgText('CmdArgsDownButtonToolTip');

            task.CmdArgsUpButton(task.NumberCmdArgs + 1) = uiimage(task.CmdArgsGrid, ...
                "ImageClickedFcn",{@task.moveArgumentRowUp},"Enable","off");
            matlab.ui.control.internal.specifyIconID(task.CmdArgsUpButton(task.NumberCmdArgs + 1), "navigationArrowNorthUI", 8);
            task.CmdArgsUpButton(task.NumberCmdArgs + 1).Tooltip = task.getMsgText('CmdArgsUpButtonToolTip');

            task.CmdArgsLabel.Visible = "off";
            task.CmdArgsEdit.Visible = "off";
            task.CmdArgsRemoveButton.Visible = "off";
            task.CmdArgsAddButton.Visible = "off";
            task.CmdArgsUpButton.Visible = "off";
            task.CmdArgsDownButton.Visible = "off";

        end

        function addArgumentRow(task, src, ~)
            if task.NumberCmdArgs == 0
                task.NumberCmdArgs = task.NumberCmdArgs + 1;
                task.CmdArgsEdit.Enable = "on";
                task.CmdArgsRemoveButton.Enable = "on";
                return;
            end
            task.CmdArgsGrid.RowHeight = [task.CmdArgsGrid.RowHeight, 30];

            task.NumberCmdArgs = task.NumberCmdArgs + 1;
            newRowLocation = src.Layout.Row + 1;

            % Add new item to the end
            task.CmdArgsLabel(end+1) = uilabel(task.CmdArgsGrid,"Text", task.getMsgText('CmdArgsLabel'));
            task.CmdArgsEdit(end+1) = uieditfield(task.CmdArgsGrid,"ValueChangedFcn",@task.updateControls);

            task.CmdArgsRemoveButton(end+1) = uiimage(task.CmdArgsGrid,...
                "ImageClickedFcn",{@task.removeArgumentRow});
            matlab.ui.control.internal.specifyIconID(task.CmdArgsRemoveButton(end), "minusUI", 16);
            task.CmdArgsRemoveButton(end).Tooltip = task.getMsgText('CmdArgsRemoveButtonToolTip');

            task.CmdArgsAddButton(end+1) = uiimage(task.CmdArgsGrid,...
                "ImageClickedFcn",{@task.addArgumentRow});
            matlab.ui.control.internal.specifyIconID(task.CmdArgsAddButton(end), "plusUI", 16);
            task.CmdArgsAddButton(end).Tooltip = task.getMsgText('CmdArgsAddButtonToolTip');

            task.CmdArgsDownButton(end+1) = uiimage(task.CmdArgsGrid,...
                "ImageClickedFcn",{@task.moveArgumentRowDown});
            matlab.ui.control.internal.specifyIconID(task.CmdArgsDownButton(end), "navigationArrowSouthUI", 8);
            task.CmdArgsDownButton(end).Tooltip = task.getMsgText('CmdArgsDownButtonToolTip');

            task.CmdArgsUpButton(end+1) = uiimage(task.CmdArgsGrid,...
                "ImageClickedFcn",{@task.moveArgumentRowUp});
            matlab.ui.control.internal.specifyIconID(task.CmdArgsUpButton(end), "navigationArrowNorthUI", 8);
            task.CmdArgsUpButton(end).Tooltip = task.getMsgText('CmdArgsUpButtonToolTip');

            % Shift item contents for row insertion
            [task.CmdArgsEdit(newRowLocation+1:end).Value] = task.CmdArgsEdit(newRowLocation:end-1).Value;

            task.CmdArgsEdit(newRowLocation).Value = "";

            % Enable up-down button Enable settings
            task.CmdArgsDownButton(1).Enable = "on";
            if task.NumberCmdArgs > 2
                task.CmdArgsDownButton(end-1).Enable = "on";
            end
            task.CmdArgsDownButton(end).Enable = "off";
        end

        function removeArgumentRow(task, src, ~)
            if task.NumberCmdArgs == 1
                task.CmdArgsEdit.Value = '';
                task.CmdArgsEdit.Enable = "off";
                task.CmdArgsRemoveButton.Enable = "off";
                task.CmdArgsUpButton.Enable = "off";
                task.CmdArgsDownButton.Enable = "off";
            else
                % Identify row to delete
                rowToDelete = src.Layout.Row;

                % shift the rows that come after the deleted row
                [task.CmdArgsEdit(rowToDelete:end-1).Value] = task.CmdArgsEdit(rowToDelete+1:end).Value;
                [task.CmdArgsAddButton(rowToDelete:end-1).Enable] = task.CmdArgsAddButton(rowToDelete+1:end).Enable;
                [task.CmdArgsRemoveButton(rowToDelete:end-1).Enable] = task.CmdArgsRemoveButton(rowToDelete+1:end).Enable;
                [task.CmdArgsUpButton(rowToDelete:end-1).Enable] = task.CmdArgsUpButton(rowToDelete+1:end).Enable;
                [task.CmdArgsDownButton(rowToDelete:end-1).Enable] = task.CmdArgsDownButton(rowToDelete+1:end).Enable;

                % Delete last row
                task.CmdArgsLabel(end) = [];
                task.CmdArgsEdit(end) = [];
                task.CmdArgsAddButton(end) = [];
                task.CmdArgsRemoveButton(end) = [];
                task.CmdArgsUpButton(end) = [];
                task.CmdArgsDownButton(end) = [];

                % remove the ui.control objects for the last row
                delete(task.CmdArgsGrid.Children(end-(numel(task.CmdArgsGrid.ColumnWidth)-1):end));
                task.CmdArgsGrid.RowHeight(end) = [];

                task.CmdArgsDownButton(end).Enable = 'off';
            end
            task.NumberCmdArgs = task.NumberCmdArgs - 1;
        end

        function moveArgumentRowUp(task, src, ~)
            rowMovingUp = src.Layout.Row;

            if rowMovingUp == 1
                return;
            end

            rowUpValue = task.CmdArgsEdit(rowMovingUp - 1).Value;
            task.CmdArgsEdit(rowMovingUp - 1).Value = task.CmdArgsEdit(rowMovingUp).Value;
            task.CmdArgsEdit(rowMovingUp).Value = rowUpValue;
        end

        function moveArgumentRowDown(task, src, ~)
            rowMovingDown = src.Layout.Row;

            if rowMovingDown == numel(task.CmdArgsEdit)
                return;
            end

            rowDownValue = task.CmdArgsEdit(rowMovingDown + 1).Value;
            task.CmdArgsEdit(rowMovingDown + 1).Value = task.CmdArgsEdit(rowMovingDown).Value;
            task.CmdArgsEdit(rowMovingDown).Value = rowDownValue;
        end

        function validLHS = validOutputVarSize(task,~,~)
            sj = join(task.pyvars);
            validLHS = strlength(sj) <= 50;
        end

        function updateOutputOptions(task,~,~)
            if task.OutputOptionsAllRadioBtn.Value
                if task.LargeOutputVarSizeDetected
                    task.ForceSelectVars = false;
                end
            end

            if ~isempty(task.pyvars) && ~isequal(task.pyvars, "")
                task.OutputOptionsSelectListBox.Items = cellstr(task.pyvars);
                if ~task.validOutputVarSize() && ~isscalar(task.pyvars) && task.ForceSelectVars
                    task.LargeOutputVarSizeDetected = true;
                    task.OutputOptionsPanel.Collapsed = false;
                    task.OutputOptionsSelectRadioBtn.Value = true;
                end
            else
                task.OutputOptionsSelectListBox.Items = {};
            end

            if task.OutputOptionsAllRadioBtn.Value
                task.OutputOptionsGrid.RowHeight = {30, 0, 30};
                task.OutputOptionsSelectGrid.RowHeight = {0};
                task.OutputOptionsSelectGrid.Visible = "off";
            else
                task.OutputOptionsGrid.RowHeight = {30, 'fit', 30};
                task.OutputOptionsSelectGrid.RowHeight = {30,30,30,'fit'};
                task.OutputOptionsSelectGrid.Visible = "on";
            end
        end

        function selectVariable(task,~,~)
            chosenVals = task.OutputOptionsSelectListBox.Value;
            if ~isempty(task.OutputOptionsOutputsListBox.Items)
                itemsToAdd = [];
                for i=1:numel(chosenVals)
                    if (~ismember(chosenVals(i), task.OutputOptionsOutputsListBox.Items))
                        itemsToAdd = [itemsToAdd, chosenVals(i)];
                    end
                end

                if ~isempty(itemsToAdd)
                    task.OutputOptionsOutputsListBox.Items = [task.OutputOptionsOutputsListBox.Items, itemsToAdd];
                end
            else
                task.OutputOptionsOutputsListBox.Items = chosenVals;
            end
            task.updateControls();
        end

        function removeVariable(task,~,~)
            itemsToRm = ismember(task.OutputOptionsOutputsListBox.Items, task.OutputOptionsOutputsListBox.Value);
            task.OutputOptionsOutputsListBox.Items(itemsToRm) = [];
        end

        function resetOutputOptions(task)
            task.OutputOptionsAllRadioBtn.Value = true;
            task.OutputOptionsGrid.RowHeight = {30, 0, 30};
            task.OutputOptionsSelectGrid.RowHeight = {0};
            task.LargeOutputVarSizeDetected = false;
            task.ForceSelectVars = true;
            task.OutputOptionsPanel.Collapsed = true;
            task.OutputOptionsSelectGrid.Visible = "off";
            task.OutputOptionsOutputsListBox.Items = {};
            task.OutputOptionsOutputsListBox.Value = {};
            task.OutputOptionsSelectListBox.Items = {};
            task.OutputOptionsSelectListBox.Value = {};
        end

        function createOutputOptionsComponents(task)
            task.OutputOptionsPanel = matlab.ui.container.internal.AccordionPanel(Parent=task.PLTAccordion,...
                Title=task.getMsgText('OutputOptionsPanel'));
            task.OutputOptionsPanel.Collapsed = true;

            task.OutputOptionsGrid = uigridlayout(task.OutputOptionsPanel, Padding=10, RowHeight={30, 30}, ColumnWidth={'fit'});

            % Row 1 - return all or select, radiobutton group
            task.OutputOptionsRadioButtonGrid = uigridlayout(task.OutputOptionsGrid, Padding=0, RowHeight={30}, ColumnWidth={100,500});
            task.OutputOptionsRadioButtonGrid.Layout.Row = 1;
            task.OutputOptionsLabel = uilabel(task.OutputOptionsRadioButtonGrid,"Text",task.getMsgText('OutputOptionsLabel'));
            task.OutputOptionsLabel.Layout.Column = 1;
            task.OutputOptionsRadioBtnGroup = uibuttongroup(task.OutputOptionsRadioButtonGrid, BorderType="none");
            task.OutputOptionsRadioBtnGroup.Layout.Column = 2;
            task.OutputOptionsRadioBtnGroup.SelectionChangedFcn = @task.updateOutputOptions;
            task.OutputOptionsAllRadioBtn = uiradiobutton(task.OutputOptionsRadioBtnGroup,...
                'Text', task.getMsgText('OutputOptionsAllRadioBtn'),...
                'Position', [1 0 150 30]);
            task.OutputOptionsSelectRadioBtn = uiradiobutton(task.OutputOptionsRadioBtnGroup,...
                'Text', task.getMsgText('OutputOptionsSelectRadioBtn'),...
                'Position', [160 0 200 30]);

            % Row 2 - (Optional) Select variable list boxes
            task.OutputOptionsSelectGrid = uigridlayout(task.OutputOptionsGrid, Padding=0, ColumnWidth={100,160,50,160});
            task.OutputOptionsSelectGrid.Layout.Row = 2;
            task.OutputOptionsSelectGrid.Visible = "off";

            task.OutputOptionsSelectLabel = uilabel(task.OutputOptionsSelectGrid,"Text", task.getMsgText('OutputOptionsSelectLabel'));
            task.OutputOptionsSelectLabel.Layout.Row = 2;
            task.OutputOptionsSelectLabel.Layout.Column = 1;

            task.OutputAvailableVarsLabel = uilabel(task.OutputOptionsSelectGrid, "Text", task.getMsgText('OutputAvailableVarsLabel'));
            task.OutputAvailableVarsLabel.Layout.Row = 1;
            task.OutputAvailableVarsLabel.Layout.Column = 2;

            task.OutputOptionsSelectListBox = uilistbox(task.OutputOptionsSelectGrid, Multiselect = "on", Position=[10,10,126,85]);
            task.OutputOptionsSelectListBox.Layout.Row = [2,4];
            task.OutputOptionsSelectListBox.Layout.Column = 2;
            task.OutputOptionsSelectListBox.Items = cellstr(task.pyvars);
            task.OutputOptionsSelectListBox.Value = {};
            task.OutputOptionsSelectListBox.ValueChangedFcn = @task.updateControls;

            task.OutputSelectButton = uibutton(task.OutputOptionsSelectGrid,...
                Text='',...
                Position=[0 0 90 30], ButtonPushedFcn=@task.selectVariable);
            matlab.ui.control.internal.specifyIconID(task.OutputSelectButton, "chevronDoubleEastUI", 12);
            task.OutputSelectButton.Layout.Row = 2;
            task.OutputSelectButton.Layout.Column = 3;

            task.OutputDeselectButton = uibutton(task.OutputOptionsSelectGrid,...
                Text='',...
                Position=[0,0,90,30], ButtonPushedFcn=@task.removeVariable);
            matlab.ui.control.internal.specifyIconID(task.OutputDeselectButton, "chevronDoubleWestUI", 12);
            task.OutputDeselectButton.Layout.Row = 3;
            task.OutputDeselectButton.Layout.Column = 3;

            task.OutputOutputVarsLabel = uilabel(task.OutputOptionsSelectGrid, "Text", task.getMsgText('OutputOutputVarsLabel'));
            task.OutputOutputVarsLabel.Layout.Row = 1;
            task.OutputOutputVarsLabel.Layout.Column = 4;
            task.OutputOptionsOutputsListBox = uilistbox(task.OutputOptionsSelectGrid, Multiselect = "on", Position=[10,10,126,55]);
            task.OutputOptionsOutputsListBox.Layout.Row = [2,4];
            task.OutputOptionsOutputsListBox.Layout.Column = 4;
            task.OutputOptionsOutputsListBox.Items = ["", cellstr(task.pyvars)];
            task.OutputOptionsOutputsListBox.Value = "";
            task.OutputOptionsOutputsListBox.ValueChangedFcn = @task.updateControls;

            % Row 3 - Display checkbox
            task.DisplayOutputsGrid = uigridlayout(task.OutputOptionsGrid, Padding=0, RowHeight={30}, ColumnWidth={100,'fit'});
            task.DisplayOutputsGrid.Layout.Row = 3;
            task.DisplayOutputLabel = uilabel(task.DisplayOutputsGrid, "Text", task.getMsgText('DisplayOutputLabel'));
            task.DisplayOutputCheckBox = uicheckbox(task.DisplayOutputsGrid, "Text", "",...
                "Value", true, "ValueChangedFcn", @task.updateControls);
        end

        function createComponents(task,~,~)
            task.PLTAccordion = matlab.ui.container.internal.Accordion(Parent = task.LayoutManager);
            task.LayoutManager.RowHeight = {'fit', 'fit', 'fit', 'fit'};
            task.LayoutManager.ColumnWidth = {'fit'};

            createPyInputModeComponent(task);
            createPythonInputComponents(task);
            createCmdArgsComponents(task);
            createOutputOptionsComponents(task);
        end

        function updateControls(task,src,~)
            % Trigger the live editor to update the generated script
            notify(task,'StateChanged');
        end

        function parseCode(task,~,~)
            codein = "";
            if task.PyInputModeCodeRadioBtn.Value
                codein = string(task.InputCode.Value);
            else
                if isfile(task.InputFile.Value)
                    codein = readlines(task.InputFile.Value);
                end
            end
            task.codestr = strjoin(codein, newline);
            parser = python.internal.PyASTParser(task.codestr, "code");
            vars = parser.getVars();

            task.mlvars = [];
            smlvars = string(vars.mlvars);
            for i=1:length(smlvars)
                if ~task.isVarInPython(smlvars(i)) || task.PyInputModeFileRadioBtn.Value
                    task.mlvars = [task.mlvars, smlvars(i)];
                end
            end
            task.pyvars = string(vars.pyvars);

            task.updateOutputOptions();
        end

        function setControlsToDefault(task)
            task.PyInputModeCodeRadioBtn.Value = true;
            task.PyInputModeFileRadioBtn.Value = false;
            task.InputCode.Value = "";
            task.InputFile.Value = "";
            task.InputFileName = "";
            task.updateInputModePanel();

            task.LargeOutputVarSizeDetected = false;
            task.ForceSelectVars = true;
            task.NumberCmdArgs = 0;

            task.OutputOptionsSelectListBox.Items = {};
            task.OutputOptionsSelectListBox.Value = {};
            task.OutputOptionsOutputsListBox.Items = {};
            task.OutputOptionsOutputsListBox.Value = {};
            task.DisplayOutputCheckBox.Value = true;
            task.updateOutputOptions();
        end
    end

    methods (Access = protected)
        function setup(task)
            createComponents(task);
            updateControls(task);
            setControlsToDefault(task);
            task.AutoRun = true;
        end
    end

    methods
        function [code, outputs] = generateCode(task)
            % No Python Code
            cmd = 'pyrun';
            code = '';
            outputs = {};
            if task.PyInputModeCodeRadioBtn.Value
                if task.InputCode.Value == ""
                    code = '';
                    return;
                end
            else
                cmd = 'pyrunfile';
                if task.InputFile.Value == ""
                    code = '';
                    return;
                end
            end

            % update sys.path to find ASTParser
            task.addASTParserToPythonPath();

            % get AST from Python code
            task.parseCode();

            % Inputs to Python pyrun
            codeInputs = [];

            % get the variable names in base workspace
            mlvarC = cellstr(task.mlvars);
            codeInputs = [codeInputs, char(strjoin("""" + mlvarC + """" + ", " + mlvarC, ", "))];

            spaces = '    ';
            codeOutputs = [];

            if ~isempty(task.pyvars)
                if task.OutputOptionsAllRadioBtn.Value
                    code = [code, '[' char(strjoin(task.pyvars,', ')),'] = '];
                    outputs = cellstr(task.pyvars);
                    codeOutputs = ['[ "', strjoin(cellstr(task.pyvars), '" "'), '" ]'];
                elseif ~isempty(task.OutputOptionsOutputsListBox.Items)
                    code = [code, '[' char(strjoin(task.OutputOptionsOutputsListBox.Items,', ')),'] = '];
                    outputs = cellstr(task.OutputOptionsOutputsListBox.Items);
                    codeOutputs = ['[ "', strjoin(task.OutputOptionsOutputsListBox.Items, '" "'), '" ]'];
                else
                    code = '';
                end
            else
                code = '';
            end

            if task.PyInputModeCodeRadioBtn.Value
                code = ['try', newline, spaces, code];
            end

            code = [code, cmd, '('];
            if task.PyInputModeCodeRadioBtn.Value
                pythonCode = regexprep(string(task.InputCode.Value),'"','""');
                pythonCode = strjoin(pythonCode, ['",...', newline, '"']);
                pythonCodeInput = char(strjoin(pythonCode, '", "'));
            else
                pythonCodeInput = task.InputFile.Value;
                pythonCodeInput = [pythonCodeInput, ' ',strjoin(cellstr(char(task.CmdArgsEdit(:).Value)), " ")];
            end

            code = ['% Python code input', newline, 'pycode = [...', newline, '"', pythonCodeInput, '"...' newline, '];',...
                newline, newline,...
                code];
            code = [code, 'pycode'];

            if ~isempty(codeOutputs)
                code = [code, ', ...', newline, spaces, spaces, ' ', codeOutputs];
            end

            if ~isempty(codeInputs)
                code = [code, ', ', codeInputs];
            end

            code = [code, ')'];
            if ~task.DisplayOutputCheckBox.Value
                code = [code, ';'];
            end

            % catch - execute clean up functions
            cleanUpCommentLine = '% Clear temporary variables from workspace and from Python';
            if task.PyInputModeCodeRadioBtn.Value
                code = [code, newline, 'catch ME', newline];
                code = [code, spaces, cleanUpCommentLine, newline, spaces, 'clear pycode;'];
                if ~isempty(codeInputs) && task.PyInputModeCodeRadioBtn.Value
                    code = [code, newline, spaces, 'if ME.identifier == "MATLAB:Python:PyException"'];
                    cleanUpInputsStr = [newline, spaces, spaces, string('pyrun("del '), strjoin(mlvarC, ", "), string('");')];
                    code = [code, char(cleanUpInputsStr.join(""))];
                    code = [code, newline, spaces, 'end'];
                end
                code = [code, newline, spaces, 'rethrow(ME)', newline, 'end', newline];
            end

            code = [code, newline, cleanUpCommentLine, newline, 'clear pycode;'];
            if ~isempty(codeInputs) && task.PyInputModeCodeRadioBtn.Value
                cleanUpInputsStr = [newline, string('pyrun("del '), strjoin(mlvarC, ", "), string('");')];
                code = [code, char(cleanUpInputsStr.join(""))];
            end
        end

        function infilename = getInputFilename(task,~,~)
            infilename = task.InputFile;
        end

        function summary = get.Summary(task)
            inputVars = task.mlvars;

            if task.PyInputModeCodeRadioBtn.Value
            % code
                if isscalar(inputVars) && inputVars ~= ""
                    summary = task.getMsgText('SummaryCodeWithSingleVar', ['`', char(inputVars), '`']);
                elseif ~isscalar(inputVars) && ~isempty(inputVars)
                    summary = task.getMsgText('SummaryCodeWithMultiVars', char(strjoin("`" + inputVars + '`',', ')));
                else
                    summary = task.getMsgText('SummaryCodeWithoutVars');
                end
            else
            % file
                if isscalar(inputVars) && inputVars ~= ""
                    summary = task.getMsgText('SummaryFileWithSingleVar', ['`', char(task.InputFileName),'`'], ['`', char(inputVars), '`']);
                elseif ~isscalar(inputVars) && ~isempty(inputVars)
                    summary = task.getMsgText('SummaryFileWithMultiVars', ['`', char(task.InputFileName),'`'], char(strjoin("`" + inputVars + '`',', ')));
                elseif task.InputFileName ~= ""
                    summary = task.getMsgText('SummaryFileWithNameWithoutVars', ['`', char(task.InputFileName),'`']);
                else
                    summary = task.getMsgText('SummaryFileWithoutVars');
                end
            end
        end

        function state = get.State(task)
            state = struct();
            state.PyInputModeCodeRadioBtn.Value = task.PyInputModeCodeRadioBtn.Value;
            state.PyInputModeFileRadioBtn.Value = task.PyInputModeFileRadioBtn.Value;
            state.InputCode.Value = task.InputCode.Value;
            state.InputFile.Value = task.InputFile.Value;
            state.InputFileName = task.InputFileName;

            state.OutputOptionsPanel.Collapsed = task.OutputOptionsPanel.Collapsed;
            state.OutputOptionsAllRadioBtn.Value = task.OutputOptionsAllRadioBtn.Value;
            state.OutputOptionsSelectRadioBtn.Value = task.OutputOptionsSelectRadioBtn.Value;
            state.OutputOptionsGrid.RowHeight = task.OutputOptionsGrid.RowHeight;
            state.OutputOptionsSelectGrid.RowHeight = task.OutputOptionsSelectGrid.RowHeight;
            state.LargeOutputVarSizeDetected = task.LargeOutputVarSizeDetected;
            state.ForceSelectVars = task.ForceSelectVars;
            state.OutputOptionsSelectGrid.Visible = task.OutputOptionsSelectGrid.Visible;
            state.OutputOptionsOutputsListBox.Items = task.OutputOptionsOutputsListBox.Items;
            state.OutputOptionsOutputsListBox.Value = task.OutputOptionsOutputsListBox.Value;
            state.OutputOptionsSelectListBox.Items = task.OutputOptionsSelectListBox.Items;
            state.OutputOptionsSelectListBox.Value = task.OutputOptionsSelectListBox.Value;

            state.DisplayOutputCheckBox.Value = task.DisplayOutputCheckBox.Value;
            
            state.codestr = task.codestr;
            state.mlvars = task.mlvars;
            state.pyvars = task.pyvars;
        end

        function set.State(task, state)
            task.PyInputModeCodeRadioBtn.Value = state.PyInputModeCodeRadioBtn.Value;
            task.PyInputModeFileRadioBtn.Value = state.PyInputModeFileRadioBtn.Value;
            task.InputCode.Value = state.InputCode.Value;
            task.InputFile.Value = state.InputFile.Value;
            task.InputFileName = state.InputFileName;

            task.OutputOptionsPanel.Collapsed = state.OutputOptionsPanel.Collapsed;
            task.OutputOptionsAllRadioBtn.Value = state.OutputOptionsAllRadioBtn.Value;
            task.OutputOptionsSelectRadioBtn.Value = state.OutputOptionsSelectRadioBtn.Value;
            task.OutputOptionsGrid.RowHeight = state.OutputOptionsGrid.RowHeight;
            task.OutputOptionsSelectGrid.RowHeight = state.OutputOptionsSelectGrid.RowHeight;
            task.LargeOutputVarSizeDetected = state.LargeOutputVarSizeDetected;
            task.ForceSelectVars = state.ForceSelectVars;
            task.OutputOptionsSelectGrid.Visible = state.OutputOptionsSelectGrid.Visible;
            
            task.codestr = state.codestr;
            task.mlvars = state.mlvars;
            task.pyvars = state.pyvars;
            
            task.addASTParserToPythonPath();
            task.parseCode();

            if ~isempty(state.OutputOptionsOutputsListBox.Items)
                task.OutputOptionsOutputsListBox.Items = state.OutputOptionsOutputsListBox.Items;
            end

            if ~isempty(state.OutputOptionsOutputsListBox.Value)
                task.OutputOptionsOutputsListBox.Value = state.OutputOptionsOutputsListBox.Value;
            end

            if ~isempty(state.OutputOptionsSelectListBox.Items)
                task.OutputOptionsSelectListBox.Items = state.OutputOptionsSelectListBox.Items;
            end

            if ~isempty(state.OutputOptionsSelectListBox.Value)
                task.OutputOptionsSelectListBox.Value = state.OutputOptionsSelectListBox.Value;
            end

            task.DisplayOutputCheckBox.Value = state.DisplayOutputCheckBox.Value;

            task.updateInputModeView();
            task.updateControls();
        end

        function reset(task)
            setControlsToDefault(task)
        end
    end
end

% LocalWords:  Pyrun mlarr pyvar np pyrun pyrunfile pyvars pycode WML
