
%

% The above white space is needed to prevent this comment from appearing
% in help text for fully qualified classes, e.g. help <fully qualified package>.<Class>
%------------------------------------------------------------------------%
%
%------------------------- DO NOT HAND EDIT THIS FILE ! -----------------%
% 
% M MCOS Class autogenerated from XML file:
% ../../../../toolbox/matlab/graphics/graphics/chart/+matlab/+graphics/+chart/+primitive/@PolarCompassPlot/PolarCompassPlot.hgm.xml
%
%
%------------------------------------------------------------------------%
%-------------------------------------------------------------------------%
%
%-------------------------------------------------------------------------%

classdef (ConstructOnLoad=true, UseClassDefaultsOnLoad=true ,Sealed)PolarCompassPlot < matlab.graphics.primitive.Data & matlab.graphics.mixin.DataProperties & matlab.graphics.internal.GraphicsUIProperties & matlab.graphics.mixin.Selectable & matlab.graphics.mixin.Legendable & matlab.graphics.mixin.ColorOrderUser & matlab.graphics.chart.interaction.DataAnnotatable & matlab.graphics.mixin.PolarAxesParentable


    % Property Definitions:

    % Begin: DataPropInfoDeclaration.tpl
    properties (Dependent, SetObservable, GetObservable)
        ThetaData = zeros(1,0)
    end
    
    properties (SetObservable, NeverAmbiguous)
        ThetaDataMode matlab.internal.datatype.matlab.graphics.datatype.AutoManual = 'auto'
    end
    
    properties (Hidden)
        ThetaData_I = zeros(1,0)
    end
    
    properties (Hidden, Dependent, SetAccess=private)
        ThetaDataCache
    end

    properties (Dependent)
        ThetaVariable = ''
    end

    properties (Hidden, Dependent)
        ThetaVariable_I = ''
    end

    methods
        function set.ThetaData(hObj, value)
            hObj.setDataPropertyValue("Theta", value, false);
        end
        function set.ThetaDataMode(hObj, mode)
            hObj.setDataPropertyMode("Theta", mode);
        end
        function set.ThetaData_I(hObj, value)
            hObj.setDataPropertyValue("Theta", value, true);
        end
        function set.ThetaVariable(hObj, value)
            hObj.setVariablePropertyValue("Theta", value, false);
        end
        function set.ThetaVariable_I(hObj, value)
            hObj.setVariablePropertyValue("Theta", value, true);
        end
        function value = get.ThetaData(hObj)
            value = hObj.getDataPropertyValue("Theta", false);
        end
        function mode = get.ThetaDataMode(hObj)
            mode = hObj.getDataPropertyMode("Theta");
        end
        function value = get.ThetaData_I(hObj)
            value = hObj.getDataPropertyValue("Theta", true);
        end
        function value = get.ThetaVariable(hObj)
            value = hObj.getVariablePropertyValue("Theta", false);
        end
        function value = get.ThetaVariable_I(hObj)
            value = hObj.getVariablePropertyValue("Theta", true);
        end
        function value = get.ThetaDataCache(hObj)
            value = hObj.getDataPropertyNumericValue("Theta", false);
        end
    end
    % End: DataPropInfoDeclaration.tpl


    % Begin: DataPropInfoDeclaration.tpl
    properties (Dependent, SetObservable, GetObservable)
        RData = zeros(1,0)
    end
    
    properties (SetObservable, NeverAmbiguous)
        RDataMode matlab.internal.datatype.matlab.graphics.datatype.AutoManual = 'auto'
    end
    
    properties (Hidden)
        RData_I = zeros(1,0)
    end
    
    properties (Hidden, Dependent, SetAccess=private)
        RDataCache
    end

    properties (Dependent)
        RVariable = ''
    end

    properties (Hidden, Dependent)
        RVariable_I = ''
    end

    methods
        function set.RData(hObj, value)
            hObj.setDataPropertyValue("R", value, false);
        end
        function set.RDataMode(hObj, mode)
            hObj.setDataPropertyMode("R", mode);
        end
        function set.RData_I(hObj, value)
            hObj.setDataPropertyValue("R", value, true);
        end
        function set.RVariable(hObj, value)
            hObj.setVariablePropertyValue("R", value, false);
        end
        function set.RVariable_I(hObj, value)
            hObj.setVariablePropertyValue("R", value, true);
        end
        function value = get.RData(hObj)
            value = hObj.getDataPropertyValue("R", false);
        end
        function mode = get.RDataMode(hObj)
            mode = hObj.getDataPropertyMode("R");
        end
        function value = get.RData_I(hObj)
            value = hObj.getDataPropertyValue("R", true);
        end
        function value = get.RVariable(hObj)
            value = hObj.getVariablePropertyValue("R", false);
        end
        function value = get.RVariable_I(hObj)
            value = hObj.getVariablePropertyValue("R", true);
        end
        function value = get.RDataCache(hObj)
            value = hObj.getDataPropertyNumericValue("R", false);
        end
    end
    % End: DataPropInfoDeclaration.tpl


    % DependentPropInfoDeclaration.tpl
    properties (SetObservable=true, SetAccess='public', GetAccess='public', Dependent=true, Hidden=false , Resettable=false)
        Color  matlab.internal.datatype.matlab.graphics.datatype.RGBAColor = [0 0 0]; % Property is of type 'matlab.graphics.datatype.RGBAColor'
    end

    methods
        function valueToCaller = get.Color(obj)
            if strcmpi(get(obj,'ColorMode'), 'auto')
                forceFullUpdate(obj,'all','Color');
            end
            valueToCaller = obj.Color_I;
        end

        function set.Color(obj, newValue)
            obj.ColorMode = 'manual';
            obj.Color_I = newValue;
        end
    end

    % NewModePropInfoDeclaration.tpl
    properties (SetObservable=true, SetAccess='public', GetAccess='public', Dependent=false, Hidden=false  ,NeverAmbiguous=true)
        ColorMode matlab.internal.datatype.matlab.graphics.datatype.AutoManual = 'auto';
    end

    methods
        function storedValue = get.ColorMode(obj)
            storedValue = obj.ColorMode;
        end

        function set.ColorMode(obj, newValue)
            oldValue = obj.ColorMode;
            reallyDoCopy = ~isequal(oldValue, newValue);

            if reallyDoCopy
                manualToAuto = strcmp(oldValue,'manual');
                obj.ColorMode = newValue;
                if manualToAuto
                    obj.MarkDirty('all');
                end
            end
        end
    end

    % NewInternalPropInfoDeclaration.tpl
    properties (AffectsObject, AbortSet, SetObservable=false, SetAccess='public', GetAccess='public', Hidden=true, AffectsLegend)
        Color_I  matlab.internal.datatype.matlab.graphics.datatype.RGBAColor = [0 0 0]; % Property is of type 'matlab.graphics.datatype.RGBAColor'
    end

    methods
        function set.Color_I(obj, newValue)
            fanChild = obj.Edge;   %#ok<MCSUP>
            % FANOUT property directed to Edge.Color_I
            if ~isempty(fanChild) && isvalid(fanChild)
                hgfilter('RGBAColorToGeometryPrimitive', fanChild, newValue);
            end
            fanChild = obj.ArrowEdge;   %#ok<MCSUP>
            % FANOUT property directed to ArrowEdge.Color_I
            if ~isempty(fanChild) && isvalid(fanChild)
                hgfilter('RGBAColorToGeometryPrimitive', fanChild, newValue);
            end
            obj.Color_I = newValue;
        end
    end

    % DependentPropInfoDeclaration.tpl
    properties (SetObservable=true, SetAccess='public', GetAccess='public', Dependent=true, Hidden=false , Resettable=false)
        LineWidth  matlab.internal.datatype.matlab.graphics.datatype.Positive = .5; % Property is of type 'matlab.graphics.datatype.Positive'
    end

    methods
        function valueToCaller = get.LineWidth(obj)
            valueToCaller = obj.LineWidth_I;
        end

        function set.LineWidth(obj, newValue)
            obj.LineWidthMode = 'manual';
            obj.LineWidth_I = newValue;
        end
    end

    % NewModePropInfoDeclaration.tpl
    properties (SetObservable=false, SetAccess='public', GetAccess='public', Dependent=false, Hidden=true  )
        LineWidthMode matlab.internal.datatype.matlab.graphics.datatype.AutoManual = 'auto';
    end

    methods
        function storedValue = get.LineWidthMode(obj)
            storedValue = obj.LineWidthMode;
        end

        function set.LineWidthMode(obj, newValue)
            oldValue = obj.LineWidthMode;
            reallyDoCopy = ~isequal(oldValue, newValue);

            if reallyDoCopy
                manualToAuto = strcmp(oldValue,'manual');
                obj.LineWidthMode = newValue;
                if manualToAuto
                    obj.MarkDirty('all');
                end
            end
        end
    end

    % NewInternalPropInfoDeclaration.tpl
    properties (AffectsObject, AbortSet, SetObservable=false, SetAccess='public', GetAccess='public', Hidden=true, AffectsLegend)
        LineWidth_I  matlab.internal.datatype.matlab.graphics.datatype.Positive = .5; % Property is of type 'matlab.graphics.datatype.Positive'
    end

    methods
        function set.LineWidth_I(obj, newValue)
            fanChild = obj.Edge;   %#ok<MCSUP>
            % FANOUT property directed to Edge.LineWidth_I
            if ~isempty(fanChild) && isvalid(fanChild)
                if strcmpi(get(fanChild,'LineWidthMode'),'auto')
                    fanChild.LineWidth_I = newValue;
                end
            end
            fanChild = obj.ArrowEdge;   %#ok<MCSUP>
            % FANOUT property directed to ArrowEdge.LineWidth_I
            if ~isempty(fanChild) && isvalid(fanChild)
                if strcmpi(get(fanChild,'LineWidthMode'),'auto')
                    fanChild.LineWidth_I = newValue;
                end
            end
            obj.LineWidth_I = newValue;
        end
    end

    % DependentPropInfoDeclaration.tpl
    properties (SetObservable=true, SetAccess='public', GetAccess='public', Dependent=true, Hidden=false , Resettable=false)
        LineStyle  matlab.internal.datatype.matlab.graphics.datatype.LineStyle = '-'; % Property is of type 'matlab.graphics.datatype.LineStyle'
    end

    methods
        function valueToCaller = get.LineStyle(obj)
            valueToCaller = obj.LineStyle_I;
        end

        function set.LineStyle(obj, newValue)
            obj.LineStyleMode = 'manual';
            obj.LineStyle_I = newValue;
        end
    end

    % NewModePropInfoDeclaration.tpl
    properties (SetObservable=true, SetAccess='public', GetAccess='public', Dependent=false, Hidden=false  ,NeverAmbiguous=true)
        LineStyleMode matlab.internal.datatype.matlab.graphics.datatype.AutoManual = 'auto';
    end

    methods
        function storedValue = get.LineStyleMode(obj)
            storedValue = obj.LineStyleMode;
        end

        function set.LineStyleMode(obj, newValue)
            oldValue = obj.LineStyleMode;
            reallyDoCopy = ~isequal(oldValue, newValue);

            if reallyDoCopy
                manualToAuto = strcmp(oldValue,'manual');
                obj.LineStyleMode = newValue;
                if manualToAuto
                    obj.MarkDirty('all');
                end
            end
        end
    end

    % NewInternalPropInfoDeclaration.tpl
    properties (AffectsObject, AbortSet, SetObservable=false, SetAccess='public', GetAccess='public', Hidden=true, AffectsLegend)
        LineStyle_I  matlab.internal.datatype.matlab.graphics.datatype.LineStyle = '-'; % Property is of type 'matlab.graphics.datatype.LineStyle'
    end

    methods
        function set.LineStyle_I(obj, newValue)
            fanChild = obj.Edge;   %#ok<MCSUP>
            % FANOUT property directed to Edge.LineStyle_I
            if ~isempty(fanChild) && isvalid(fanChild)
                hgfilter('LineStyleToPrimLineStyle', fanChild, newValue);
            end
            obj.LineStyle_I = newValue;
        end
    end

    % DependentPropInfoDeclaration.tpl
    properties (SetObservable=true, SetAccess='public', GetAccess='public', Dependent=true, Hidden=false , Resettable=false)
        Clipping  matlab.lang.OnOffSwitchState = 'on'; % Property is of type 'matlab.lang.OnOffSwitchState'
    end

    methods
        function valueToCaller = get.Clipping(obj)
            valueToCaller = obj.Clipping_I;
        end

        function set.Clipping(obj, newValue)
            obj.ClippingMode = 'manual';
            obj.Clipping_I = newValue;
        end
    end

    % NewModePropInfoDeclaration.tpl
    properties (SetObservable=false, SetAccess='public', GetAccess='public', Dependent=false, Hidden=true  )
        ClippingMode matlab.internal.datatype.matlab.graphics.datatype.AutoManual = 'auto';
    end

    methods
        function storedValue = get.ClippingMode(obj)
            storedValue = obj.ClippingMode;
        end

        function set.ClippingMode(obj, newValue)
            oldValue = obj.ClippingMode;
            reallyDoCopy = ~isequal(oldValue, newValue);

            if reallyDoCopy
                manualToAuto = strcmp(oldValue,'manual');
                obj.ClippingMode = newValue;
                if manualToAuto
                    obj.MarkDirty('all');
                end
            end
        end
    end

    % NewInternalPropInfoDeclaration.tpl
    properties (AffectsObject, AbortSet, SetObservable=false, SetAccess='public', GetAccess='public', Hidden=true, AffectsLegend)
        Clipping_I  matlab.lang.OnOffSwitchState = 'on'; % Property is of type 'matlab.lang.OnOffSwitchState'
    end

    methods
        function set.Clipping_I(obj, newValue)
            fanChild = obj.Edge;   %#ok<MCSUP>
            % FANOUT property directed to Edge.Clipping_I
            if ~isempty(fanChild) && isvalid(fanChild)
                if strcmpi(get(fanChild,'ClippingMode'),'auto')
                    fanChild.Clipping_I = newValue;
                end
            end
            fanChild = obj.SelectionHandle;   %#ok<MCSUP>
            % FANOUT property directed to SelectionHandle.Clipping_I
            if ~isempty(fanChild) && isvalid(fanChild)
                if strcmpi(get(fanChild,'ClippingMode'),'auto')
                    fanChild.Clipping_I = newValue;
                end
            end
            fanChild = obj.ArrowEdge;   %#ok<MCSUP>
            % FANOUT property directed to ArrowEdge.Clipping_I
            if ~isempty(fanChild) && isvalid(fanChild)
                if strcmpi(get(fanChild,'ClippingMode'),'auto')
                    fanChild.Clipping_I = newValue;
                end
            end
            obj.Clipping_I = newValue;
        end
    end

    % DependentPropInfoDeclaration.tpl
    properties (SetObservable=true, SetAccess='protected', GetAccess={?tPolarCompassPlotObject}, Dependent=true, Hidden=true ,Transient=true, Resettable=false)
        Edge  matlab.graphics.primitive.world.LineStrip; % Property is of type 'matlab.graphics.primitive.world.LineStrip'
    end

    methods
        function valueToCaller = get.Edge(obj)
            valueToCaller = obj.Edge_I;
        end

        function set.Edge(obj, newValue)
            obj.EdgeMode = 'manual';
            obj.Edge_I = newValue;
        end
    end

    % NewModePropInfoDeclaration.tpl
    properties (SetObservable=false, SetAccess='public', GetAccess='public', Dependent=false, Hidden=true ,Transient=true , Resettable=false)
        EdgeMode matlab.internal.datatype.matlab.graphics.datatype.AutoManual = 'auto';
    end

    methods
        function storedValue = get.EdgeMode(obj)
            storedValue = obj.EdgeMode;
        end

        function set.EdgeMode(obj, newValue)
            oldValue = obj.EdgeMode;
            reallyDoCopy = ~isequal(oldValue, newValue);

            if reallyDoCopy
                manualToAuto = strcmp(oldValue,'manual');
                obj.EdgeMode = newValue;
                if manualToAuto
                    obj.MarkDirty('all');
                end
            end
        end
    end

    % NewObjectPropInfoDeclaration.tpl
    properties (InternalComponent, AffectsObject,  SetObservable=false, SetAccess='protected', GetAccess={?tPolarCompassPlotObject}, Dependent=false, Hidden=true ,Transient=true , DeepCopy=true , NonCopyable=true, Resettable=false)
        Edge_I; % Property is of type 'matlab.graphics.primitive.world.LineStrip'
    end

    methods
        function set.Edge_I(obj, newValue)
            obj.Edge_I = newValue;
            try %#ok<TRYNC>
                obj.setEdge_IFanoutProps();
            end
        end
    end

    % DependentPropInfoDeclaration.tpl
    properties (SetObservable=true, SetAccess='protected', GetAccess={?tPolarCompassPlotObject}, Dependent=true, Hidden=true ,Transient=true, Resettable=false)
        ArrowEdge  matlab.graphics.primitive.world.LineStrip; % Property is of type 'matlab.graphics.primitive.world.LineStrip'
    end

    methods
        function valueToCaller = get.ArrowEdge(obj)
            valueToCaller = obj.ArrowEdge_I;
        end

        function set.ArrowEdge(obj, newValue)
            obj.ArrowEdgeMode = 'manual';
            obj.ArrowEdge_I = newValue;
        end
    end

    % NewModePropInfoDeclaration.tpl
    properties (SetObservable=false, SetAccess='public', GetAccess='public', Dependent=false, Hidden=true ,Transient=true , Resettable=false)
        ArrowEdgeMode matlab.internal.datatype.matlab.graphics.datatype.AutoManual = 'auto';
    end

    methods
        function storedValue = get.ArrowEdgeMode(obj)
            storedValue = obj.ArrowEdgeMode;
        end

        function set.ArrowEdgeMode(obj, newValue)
            oldValue = obj.ArrowEdgeMode;
            reallyDoCopy = ~isequal(oldValue, newValue);

            if reallyDoCopy
                manualToAuto = strcmp(oldValue,'manual');
                obj.ArrowEdgeMode = newValue;
                if manualToAuto
                    obj.MarkDirty('all');
                end
            end
        end
    end

    % NewObjectPropInfoDeclaration.tpl
    properties (InternalComponent, AffectsObject,  SetObservable=false, SetAccess='protected', GetAccess={?tPolarCompassPlotObject}, Dependent=false, Hidden=true ,Transient=true , DeepCopy=true , NonCopyable=true, Resettable=false)
        ArrowEdge_I; % Property is of type 'matlab.graphics.primitive.world.LineStrip'
    end

    methods
        function set.ArrowEdge_I(obj, newValue)
            obj.ArrowEdge_I = newValue;
            try %#ok<TRYNC>
                obj.setArrowEdge_IFanoutProps();
            end
        end
    end

    % DependentPropInfoDeclaration.tpl
    properties (SetObservable=true, SetAccess='protected', GetAccess='public', Dependent=true, Hidden=true ,Transient=true, Resettable=false)
        SelectionHandle  matlab.graphics.Graphics; % Property is of type 'matlab.mixin.Heterogeneous'
    end

    methods
        function valueToCaller = get.SelectionHandle(obj)
            valueToCaller = obj.SelectionHandle_I;
        end

        function set.SelectionHandle(obj, newValue)
            obj.SelectionHandleMode = 'manual';
            obj.SelectionHandle_I = newValue;
        end
    end

    % NewModePropInfoDeclaration.tpl
    properties (SetObservable=false, SetAccess='public', GetAccess='public', Dependent=false, Hidden=true ,Transient=true , Resettable=false)
        SelectionHandleMode matlab.internal.datatype.matlab.graphics.datatype.AutoManual = 'auto';
    end

    methods
        function storedValue = get.SelectionHandleMode(obj)
            storedValue = obj.SelectionHandleMode;
        end

        function set.SelectionHandleMode(obj, newValue)
            oldValue = obj.SelectionHandleMode;
            reallyDoCopy = ~isequal(oldValue, newValue);

            if reallyDoCopy
                manualToAuto = strcmp(oldValue,'manual');
                obj.SelectionHandleMode = newValue;
                if manualToAuto
                    obj.MarkDirty('all');
                end
            end
        end
    end

    % NewObjectPropInfoDeclaration.tpl
    properties (InternalComponent, AffectsObject,  SetObservable=false, SetAccess='protected', GetAccess='public', Dependent=false, Hidden=true ,Transient=true , DeepCopy=true , NonCopyable=true, Resettable=false)
        SelectionHandle_I; % Property is of type 'matlab.mixin.Heterogeneous'
    end

    methods
        function set.SelectionHandle_I(obj, newValue)
            obj.SelectionHandle_I = newValue;
            try %#ok<TRYNC>
                obj.setSelectionHandle_IFanoutProps();
            end
        end
    end

    % DependentPropInfoDeclaration.tpl
    properties (SetObservable=true, SetAccess='public', GetAccess='public', Dependent=true, Hidden=true ,Transient=true, Resettable=false)
        ScaleArrowHeads  matlab.lang.OnOffSwitchState = matlab.lang.OnOffSwitchState.on; % Property is of type 'matlab.lang.OnOffSwitchState'
    end

    methods
        function valueToCaller = get.ScaleArrowHeads(obj)
            valueToCaller = obj.ScaleArrowHeads_I;
        end

        function set.ScaleArrowHeads(obj, newValue)
            obj.ScaleArrowHeadsMode = 'manual';
            obj.ScaleArrowHeads_I = newValue;
        end
    end

    % NewModePropInfoDeclaration.tpl
    properties (SetObservable=false, SetAccess='public', GetAccess='public', Dependent=false, Hidden=true ,Transient=true )
        ScaleArrowHeadsMode matlab.internal.datatype.matlab.graphics.datatype.AutoManual = 'auto';
    end

    methods
        function storedValue = get.ScaleArrowHeadsMode(obj)
            storedValue = obj.ScaleArrowHeadsMode;
        end

        function set.ScaleArrowHeadsMode(obj, newValue)
            oldValue = obj.ScaleArrowHeadsMode;
            reallyDoCopy = ~isequal(oldValue, newValue);

            if reallyDoCopy
                manualToAuto = strcmp(oldValue,'manual');
                obj.ScaleArrowHeadsMode = newValue;
                if manualToAuto
                    obj.MarkDirty('all');
                end
            end
        end
    end

    % NewInternalPropInfoDeclaration.tpl
    properties (AffectsObject, AbortSet, SetObservable=false, SetAccess='public', GetAccess='public', Hidden=true, Transient, AffectsLegend)
        ScaleArrowHeads_I  matlab.lang.OnOffSwitchState = matlab.lang.OnOffSwitchState.on; % Property is of type 'matlab.lang.OnOffSwitchState'
    end

    % DependentPropInfoDeclaration.tpl
    properties (SetObservable=true, SetAccess='public', GetAccess='public', Dependent=true, Hidden=true ,Transient=true, Resettable=false)
        MarkerSize  matlab.internal.datatype.matlab.graphics.datatype.Positive = 6; % Property is of type 'matlab.graphics.datatype.Positive'
    end

    methods
        function valueToCaller = get.MarkerSize(obj)
            valueToCaller = obj.MarkerSize_I;
        end

        function set.MarkerSize(obj, newValue)
            obj.MarkerSizeMode = 'manual';
            obj.MarkerSize_I = newValue;
        end
    end

    % NewModePropInfoDeclaration.tpl
    properties (SetObservable=false, SetAccess='public', GetAccess='public', Dependent=false, Hidden=true ,Transient=true )
        MarkerSizeMode matlab.internal.datatype.matlab.graphics.datatype.AutoManual = 'auto';
    end

    methods
        function storedValue = get.MarkerSizeMode(obj)
            storedValue = obj.MarkerSizeMode;
        end

        function set.MarkerSizeMode(obj, newValue)
            oldValue = obj.MarkerSizeMode;
            reallyDoCopy = ~isequal(oldValue, newValue);

            if reallyDoCopy
                manualToAuto = strcmp(oldValue,'manual');
                obj.MarkerSizeMode = newValue;
                if manualToAuto
                    obj.MarkDirty('all');
                end
            end
        end
    end

    % NewInternalPropInfoDeclaration.tpl
    properties (AffectsObject, AbortSet, SetObservable=false, SetAccess='public', GetAccess='public', Hidden=true, Transient, AffectsLegend)
        MarkerSize_I  matlab.internal.datatype.matlab.graphics.datatype.Positive = 6; % Property is of type 'matlab.graphics.datatype.Positive'
    end

    % DependentPropInfoDeclaration.tpl
    properties (SetObservable=true, SetAccess='protected', GetAccess={?tPolarCompassPlotObject}, Dependent=true, Hidden=true ,Transient=true, Resettable=false)
        BaseValue  ; % Property is of type 'any'
    end

    methods
        function valueToCaller = get.BaseValue(obj)
            if strcmpi(get(obj,'BaseValueMode'), 'auto')
                forceFullUpdate(obj,'all','BaseValue');
            end
            valueToCaller = obj.BaseValue_I;
        end

        function set.BaseValue(obj, newValue)
            obj.BaseValueMode = 'manual';
            obj.BaseValue_I = newValue;
        end
    end

    % NewModePropInfoDeclaration.tpl
    properties (SetObservable=false, SetAccess='public', GetAccess='public', Dependent=false, Hidden=true ,Transient=true )
        BaseValueMode matlab.internal.datatype.matlab.graphics.datatype.AutoManual = 'auto';
    end

    methods
        function storedValue = get.BaseValueMode(obj)
            storedValue = obj.BaseValueMode;
        end

        function set.BaseValueMode(obj, newValue)
            oldValue = obj.BaseValueMode;
            reallyDoCopy = ~isequal(oldValue, newValue);

            if reallyDoCopy
                manualToAuto = strcmp(oldValue,'manual');
                obj.BaseValueMode = newValue;
                if manualToAuto
                    obj.MarkDirty('all');
                end
            end
        end
    end

    % NewInternalPropInfoDeclaration.tpl
    properties (AffectsObject, AbortSet, SetObservable=false, SetAccess='protected', GetAccess={?tPolarCompassPlotObject}, Hidden=true, Transient, NonCopyable, AffectsLegend)
        BaseValue_I  ; % Property is of type 'any'
    end
    methods(Access='public', Hidden=true)
        function b = isChildProperty(obj, name )
            if strcmp(name,'Edge')
                b = true;
                return;
            end
            if strcmp(name,'Edge_I')
                b = true;
                return;
            end
            if strcmp(name,'ArrowEdge')
                b = true;
                return;
            end
            if strcmp(name,'ArrowEdge_I')
                b = true;
                return;
            end
            if strcmp(name,'SelectionHandle')
                b = true;
                return;
            end
            if strcmp(name,'SelectionHandle_I')
                b = true;
                return;
            end
            b = isChildProperty@matlab.graphics.primitive.Data(obj, name );
            return;
            b = false; %#ok<UNRCH>
        end
    end

    % multimethod_info.tpl
    methods(Access='public', Hidden)
        [graphic,isReverseable] = getLegendGraphic(hObj,fontsize)
    end

    % multimethod_info.tpl
    methods(Access='protected', Hidden)
        [index,interpolationFactor] = doGetInterpolatedPointInDataUnits(hObj,position)
    end

    % multimethod_info.tpl
    methods(Access='protected', Hidden)
        [index,interpolationFactor] = doGetInterpolatedPoint(hObj,position)
    end

    % multimethod_info.tpl
    methods(Access='protected', Hidden)
        [index,interpolationFactor] = doIncrementIndex(hObj,index,direction,interpolationStep)
    end


    % setup_definition.tpl
    methods
        function obj = PolarCompassPlot(varargin)
            %

            % Do not remove above white space.

            obj.Edge_I = matlab.graphics.primitive.world.LineStrip;
            obj.Edge.Description_I = 'PolarCompassPlot Edge';
            obj.Edge.Internal = true;
            obj.ArrowEdge_I = matlab.graphics.primitive.world.LineStrip;
            obj.ArrowEdge.Description_I = 'PolarCompassPlot ArrowEdge';
            obj.ArrowEdge.Internal = true;
            obj.doSetup;
            % Pass any P/V pairs to the object:
            matlab.graphics.chart.internal.ctorHelper(obj, varargin);
        end
    end

    methods( Access=private )
        function setEdge_IFanoutProps(obj)
            % Initialize the fanout property: Color
            hgfilter('RGBAColorToGeometryPrimitive', obj.Edge, obj.Color_I);
            % Initialize the fanout property: LineWidth
            try
                mode = obj.Edge.LineWidthMode;
            catch
                mode = 'auto';
            end
            if strcmp(mode, 'auto')
                obj.Edge.LineWidth_I = obj.LineWidth_I;
            end
            % Initialize the fanout property: LineStyle
            hgfilter('LineStyleToPrimLineStyle', obj.Edge, obj.LineStyle_I);
            % Initialize the fanout property: Clipping
            try
                mode = obj.Edge.ClippingMode;
            catch
                mode = 'auto';
            end
            if strcmp(mode, 'auto')
                obj.Edge.Clipping_I = obj.Clipping_I;
            end
        end
    end
    methods( Access=private )
        function setArrowEdge_IFanoutProps(obj)
            % Initialize the fanout property: Color
            hgfilter('RGBAColorToGeometryPrimitive', obj.ArrowEdge, obj.Color_I);
            % Initialize the fanout property: LineWidth
            try
                mode = obj.ArrowEdge.LineWidthMode;
            catch
                mode = 'auto';
            end
            if strcmp(mode, 'auto')
                obj.ArrowEdge.LineWidth_I = obj.LineWidth_I;
            end
            % Initialize the fanout property: Clipping
            try
                mode = obj.ArrowEdge.ClippingMode;
            catch
                mode = 'auto';
            end
            if strcmp(mode, 'auto')
                obj.ArrowEdge.Clipping_I = obj.Clipping_I;
            end
        end
    end
    % Methods Implementation
    methods(Access='protected', Hidden=true)
        % NOTE: Must implement the following function in file doSetup.m
         doSetup(obj) 
    end
    methods(Access='public', Hidden=true)
        % NOTE: Must implement the following function in file doUpdate.m
         doUpdate(obj, updateState) 
    end
    methods(Access='public', Static=true, Hidden=true)
        % NOTE: Must implement the following function in file validateData.m
         validateData( dataMap) 
    end
    methods(Access='protected', Static=true, Hidden=true)
        % NOTE: Must implement the following function in file validateDataPropertyValue.m
         varargout = validateDataPropertyValue( channelName, data) 
    end
    methods(Access='public', Hidden=true)
        % NOTE: Must implement the following function in file getXYZDataExtents.m
         varargout = getXYZDataExtents(obj, transform, constraints) 
    end
    methods(Access='protected', Hidden=true)
        function varargout = getPropertyGroups(obj) 

                dnames = {'Theta','R'};
                suffix = {'Data' 'Variable'};
                dnames{1} = sprintf('%s%s', dnames{1}, suffix{1 + obj.isDataComingFromDataSource(dnames{1})});
                dnames{2} = sprintf('%s%s', dnames{2}, suffix{1 + obj.isDataComingFromDataSource(dnames{2})});
                varargout{1} = matlab.mixin.util.PropertyGroup(...
                [{'Color', 'LineStyle','LineWidth'} dnames]);
        end
    end
    methods(Access='protected', Hidden=true)
        function varargout = getDescriptiveLabelForDisplay(obj) 

                if ~isempty(obj.Tag)
                varargout{1} = obj.Tag;
                else
                varargout{1} = obj.DisplayName;
                end
        end
    end
    methods(Access='protected', Hidden=true)
        % NOTE: Must implement the following function in file doGetDataDescriptors.m
         varargout = doGetDataDescriptors(obj, index, ~) 
    end
    methods(Access='public', Hidden=true)
        % NOTE: Must implement the following function in file createDefaultDataTipRows.m
         varargout = createDefaultDataTipRows(obj) 
    end
    methods(Access='public', Hidden=true)
        % NOTE: Must implement the following function in file getAllValidValueSources.m
         varargout = getAllValidValueSources(obj) 
    end
    methods(Access='protected', Hidden=true)
        function varargout = doGetNearestIndex(obj, index) 

                % If the index is in range, we will return the index.
                % Otherwise, we will error.
                numPoints = numel(obj.ThetaData);

                % Constrain index to be in the range [1 numPoints]
                if numPoints>0
                    index = max(1, min(index, numPoints));
                end
                varargout{1} = index;
        end
    end
    methods(Access='protected', Hidden=true)
        % NOTE: Must implement the following function in file doGetNearestPoint.m
         varargout = doGetNearestPoint(obj, position) 
    end
    methods(Access='protected', Hidden=true)
        function varargout = doGetEnclosedPoints(obj, verts) 

                % Object does not support brushing, so returning empty.
                varargout{1} = [];
        end
    end
    methods(Access='protected', Hidden=true)
        % NOTE: Must implement the following function in file doGetDisplayAnchorPoint.m
         varargout = doGetDisplayAnchorPoint(obj, index, interp) 
    end
    methods(Access='protected', Hidden=true)
        function varargout = doGetReportedPosition(obj, index, interp) 

                pt = doGetDisplayAnchorPoint(obj, index, interp);
                pt.Is2D = true;
                varargout{1} = pt;
        end
    end
    methods(Access='public', Hidden=true)
        function varargout = setParentImpl(obj, proposedValue) 

            if isa(proposedValue, 'matlab.graphics.primitive.Group') || ...
                    isa(proposedValue, 'matlab.graphics.primitive.Transform')
                childName = fliplr(strtok(fliplr(class(obj)), '.'));
                targetName = fliplr(strtok(fliplr(class(proposedValue)), '.'));
                error(message('MATLAB:hg:InvalidParent',childName, targetName))
            end
            varargout{1} = proposedValue;
        end
    end
end
