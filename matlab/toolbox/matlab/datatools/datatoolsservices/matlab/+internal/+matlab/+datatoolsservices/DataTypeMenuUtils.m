classdef DataTypeMenuUtils < handle
    % Helper class for creating data type list specifications

    % See DataTypeMenuManager.js for more about data type list items
    % == Get a single list item ==
    % item = DTMUtils.getTypeItem('string');
    % item -> struct('dataType', 'string', 'displayType', 'Text');
    %
    % == Create a list ==
    % list = DTMUtils.constructList('string', 'double', 'categorical', 'datetime');
    % 'datetime' -> struct('dataType', 'datetime', 'displayType', 'Datetime')
    %
    % list = DTMUtils.constructList('string', 'double', 'categorical', 'datetime text');
    % 'datetime' -> struct("" "", 'defaultOptions', 1x16 cell, 'customOptions', true)
    % See DTMUtils.optionConstants for predefined options
    % 
    % == Add properties before or after ==
    % numericItem = DTMUtils.mergeIntoItem('double', struct('tooltipDialog', 'My Custom Tooltip'));
    % customItem = struct('dataType', 'custom', 'displayType', 'This could be useful');
    % list = DTMUtils.constructList('string', numericItem, customItem, 'datetime');
    %
    % list = DTMUtils.constructList('string', 'double', 'categorical', 'datetime');
    % list{2}.tooltipDialog = 'My Custom Tooltip';
    %
    % == Intersect or Union (with disabled xor) lists ==
    % list = DTMUtils.intersectLists({'string', 'double', 'datetime'}, {'datetime text', struct('dataType', 'string', 'displayType', 'Text')});
    % list -> {struct('dataType', 'string', 'displayType', 'Text')}
    % 
    % list = DTMUtils.unionListsDisableXor({'string', 'double', 'datetime'}, {'datetime text', struct('dataType', 'string', 'displayType', 'Text')});
    % list -> {struct('dataType', 'string', 'displayType', 'Text'),
    %          struct('dataType', 'double', 'displayType', 'Number', 'disabled', true),
    %          struct('dataType', 'datetime', 'displayType', 'Datetime', 'disabled', true)}
    
    % Copyright 2018-2019 The MathWorks, Inc.
    properties (Constant)
        
        typeConstants = struct( ...
            'string', getString(message('MATLAB:codetools:importtool:TextDisplayValue')), ...
            'char', getString(message('MATLAB:codetools:importtool:TextDisplayValue')), ...
            'double', getString(message('MATLAB:codetools:importtool:NumberDisplayValue')), ...
            'categorical', getString(message('MATLAB:codetools:importtool:CategoricalDisplayValue')), ...
            'datetime', getString(message('MATLAB:codetools:importtool:DatetimeDisplayValue')), ...
            'duration', getString(message('MATLAB:codetools:importtool:DurationDisplayValue')));
        
        typeOptionConstants = struct( ...
            'datetime', containers.Map( ...
                {'',            'posixtime',   'yyyymmdd'}, ...
                {'InputFormat', 'ConvertFrom', 'ConvertFrom'}, ...
                'UniformValues', false), ...
            'duration', containers.Map( ...
                {'',          }, ...
                {'InputFormat'}, ...
                'UniformValues', false));
        
        optionConstants = struct( ...
            'default_options', struct( ...
                'disabled', struct('disabled', true)), ...
            'datetime', struct( ...
                'help', struct('customHelp', getString(message('MATLAB:codetools:datatoolsservices:DatetimeFormatHelp'))), ...
                'textUS', struct( ...
                    'defaultOptions', {{ ...
                        'dd-MMM-yyyy HH:mm:ss', ...
                        'dd-MMM-yyyy', ...
                        'MM/dd/yy HH:mm:ss', ...
                        'MM/dd/yyyy HH:mm:ss', ...
                        'MM/dd/yyyy hh:mm:ss a', ...
                        'MM/dd/yyyy', ...
                        'MM/dd/yy', ...
                        'MM/dd', ...
                        'HH:mm:ss', ...
                        'hh:mm:ss a', ...
                        'HH:mm', ...
                        'hh:mm a', ...
                        'dd-MMM-yyyy HH:mm', ...
                        'dd-MMM-yy', ...
                        'MM/dd/yyyy HH:mm', ...
                        'yyyy-MM-dd'}}, ...
                    'customOptions', true), ...
                'textNonUS', struct( ...
                    'defaultOptions', {{ ...
                        'dd-MMM-yyyy HH:mm:ss', ...
                        'dd-MMM-yyyy', ...
                        'dd/MM/yy HH:mm:ss', ...
                        'dd/MM/yyyy HH:mm:ss', ...
                        'dd/MM/yyyy hh:mm:ss a', ...
                        'dd/MM/yyyy', ...
                        'dd/MM/yy', ...
                        'dd/MM', ...
                        'HH:mm:ss', ...
                        'hh:mm:ss a', ...
                        'HH:mm', ...
                        'hh:mm a', ...
                        'dd-MMM-yyyy HH:mm', ...
                        'dd-MMM-yy', ...
                        'dd/MM/yyyy HH:mm', ...
                        'yyyy-MM-dd'}}, ...
                    'customOptions', true), ...
                'numeric', struct( ...
                    'defaultOptions', {{ ...
                       'posixtime', ...
                       'yyyymmdd', ...
                       'yyyy', ...
                       'yy', ...
                       'MM', ...
                       'dd', ...
                       'HH'}}, ...
                   'expandDefaults', true)), ...
            'duration', struct( ...
                'text', struct( ...
                    'defaultOptions', {{ ...
                        'dd:hh:mm:ss.S', ...
                        'hh:mm:ss.S', ...
                        'mm:ss.S', ...
                        'hh:mm'}}, ...
                    'expandDefaults', true)));
    end
     
    methods(Static, Access='public')
        function typeItem = mergeIntoItem(typeItem, option)
            DTMUtils = internal.matlab.datatoolsservices.DataTypeMenuUtils;
            
            if ~isstruct(typeItem)
                typeItem = DTMUtils.getTypeItem(typeItem);
            end
            
            fields = fieldnames(option);
            for j = 1:length(fields)
                typeItem.(fields{j}) = option.(fields{j});
            end
        end
        
        function typeItem = getTypeItem(dataType, varargin)
            DTMUtils = internal.matlab.datatoolsservices.DataTypeMenuUtils;
            
            C = strsplit(dataType);
            dataType = C{1};
            varargin = horzcat(C(2:end), varargin);
            
            typeItem = struct('dataType', dataType, 'displayType', dataType);
            if isfield(DTMUtils.typeConstants, dataType)
                typeItem.displayType = DTMUtils.typeConstants.(dataType);
            end
            
            lc = internal.matlab.datatoolsservices.LocaleUtils.getCurrLocale();
            isUSLocale = strcmp(lc, 'en_US');

            for i = 1:length(varargin)
                optionName = varargin{i};
                
                % special case for datetime formats - US vs non-US locales
                if strcmp([dataType ' ' optionName], 'datetime text')
                    if isUSLocale
                        optionName = 'textUS';
                    else
                        optionName = 'textNonUS';
                    end
                end
                
                option = [];
                if isfield(DTMUtils.optionConstants, dataType) && isfield(DTMUtils.optionConstants.(dataType), optionName)
                    option = DTMUtils.optionConstants.(dataType).(optionName);
                elseif isfield(DTMUtils.optionConstants.('default_options'), optionName)
                    option = DTMUtils.optionConstants.('default_options').(optionName);
                end
                
                if ~isempty(option)
                    typeItem = DTMUtils.mergeIntoItem(typeItem, option);
                end
            end
        end
        
        function dataTypeList = constructList(varargin)
            DTMUtils = internal.matlab.datatoolsservices.DataTypeMenuUtils;
            
            dataTypeList = repmat(varargin, 1);
            for i = find(cellfun(@(x) ~isstruct(x), dataTypeList))
                dataTypeList{i} = DTMUtils.getTypeItem(dataTypeList{i});
            end
        end
        
        function dataTypeList = intersectLists(varargin)
            DTMUtils = internal.matlab.datatoolsservices.DataTypeMenuUtils;
            
            lists = varargin(cellfun(@(x) ~isempty(x), varargin));
            if isempty(lists)
                dataTypeList = {};
            else
                for i = 1:length(lists)
                    lists{i} = DTMUtils.constructList(lists{i}{:});
                end
                
                % if for all other lists, there is some equal item
                isShared = @(item) all(cellfun( ...
                               @(otherList) any(cellfun( ...
                                   @(otherItem) isequal(otherItem, item), ...
                                   otherList)), ...
                               lists(2:end)));
                sharedItems = cellfun(isShared, lists{1});
                dataTypeList = lists{1}(sharedItems);
            end
        end
        
        function dataTypeList = unionListsDisableXor(varargin)
            DTMUtils = internal.matlab.datatoolsservices.DataTypeMenuUtils;
            
            lists = varargin(cellfun(@(x) ~isempty(x), varargin));
            if isempty(lists)
                dataTypeList = {};
            else
                for i = 1:length(lists)
                    lists{i} = DTMUtils.constructList(lists{i}{:});
                    
                    if i == 1
                        dataTypeList = lists{1};
                        sharedDataTypes = cellfun(@(x) x.dataType, dataTypeList, 'UniformOutput', false);
                    else
                        newTypes = cellfun(@(x) ~ismember(x.dataType, sharedDataTypes), lists{i});
                        newTypeItems = lists{i}(newTypes);
                        dataTypeList = horzcat(dataTypeList, newTypeItems);
                        sharedDataTypes = union(cellfun(@(x) x.dataType, newTypeItems, 'UniformOutput', false), sharedDataTypes);
                    end
                end
                
                % if for all other lists, there is some equal item
                isShared = @(item) all(cellfun( ...
                               @(otherList) any(cellfun( ...
                                   @(otherItem) isequal(otherItem, item), ...
                                   otherList)), ...
                               lists(2:end)));
                           
                sharedItems = cellfun(isShared, dataTypeList);
                for i = find(~sharedItems)
                    dataTypeList{i} = DTMUtils.getTypeItem([dataTypeList{i}.dataType ' disabled']);
                end
            end
        end
        
        function propSpec = getPropertiesForTypeOption(dataType, typeOption)
            typeOptionConstants = internal.matlab.datatoolsservices.DataTypeMenuUtils.typeOptionConstants;
            if isfield(typeOptionConstants, dataType)
                typePropSpecs = typeOptionConstants.(dataType);
                if isKey(typePropSpecs, typeOption)
                    propSpec = typePropSpecs(typeOption);
                else
                    propSpec = typePropSpecs('');
                end
                
                if ~isstruct(propSpec)
                    % propSpec like 'InputFormat', want struct like
                    % propSpec.InputFormat = typeOption
                    propSpec = struct(propSpec, typeOption);
                end
            else
                propSpec = typeOption;
            end
        end
    end
end
