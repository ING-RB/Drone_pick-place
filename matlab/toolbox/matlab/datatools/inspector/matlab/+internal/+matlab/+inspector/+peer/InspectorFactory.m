classdef InspectorFactory < handle
    % This class is unsupported and might change or be removed without
    % notice in a future version.

    % This class is the peer Inspector Factory for the Property Inspector

    % Copyright 2015-2025 The MathWorks, Inc.

    properties (Constant)
        % RemoteChannel
        RemoteChannel = '/InspectorPropertyManager';
    end

    properties (SetAccess = protected)
        % Peer Manager and Channel for the Property Inspector
        Channel;

        FactoryInitialized logical = false;
    end

    properties (SetObservable = true, SetAccess = protected, Hidden=true)
        % ProxyViewMap Property
        ProxyViewMap containers.Map;

        % ProxyViewMapJSON Property
        ProxyViewMapJSON containers.Map;

        RenderedDataMap containers.Map;
    end

    methods (Access = protected)
        function this = InspectorFactory()

            % Defaults
            this.Channel = internal.matlab.inspector.peer.InspectorFactory.RemoteChannel;
            this.ProxyViewMap = containers.Map;
            this.ProxyViewMapJSON = containers.Map;
            this.RenderedDataMap = containers.Map;

            % Creates a new InspectorFactory instance
            this.loadCacheFile();

            % Send the maps to the client
            this.sendProxyViewMapToClient();

            message.subscribe(this.RemoteChannel, @(evt) this.handleMessage(evt), 'enableDebugger', ~internal.matlab.datatoolsservices.WorkspaceListener.getIgnoreBreakpoints);

            this.FactoryInitialized = true;
        end

        function handleMessage(this, event)
            switch(event.name)
                case "getData"
                    this.sendProxyViewMapToClient();
            end
        end

        function loadCacheFile(this)
            [this.ProxyViewMap, this.ProxyViewMapJSON, this.RenderedDataMap] = ...
                internal.matlab.inspector.peer.InspectorCacheManager.loadCacheFile();
        end
        
        function sendProxyViewMapToClient(this)
            jsonStr = this.getProxyViewMapJSON();

            message.publish(this.RemoteChannel, jsonStr);

            if this.FactoryInitialized
                internal.matlab.inspector.peer.InspectorFactory.reinitializeInspectedObjects();
            end
        end
    end

    methods
        % Handles all peer events from the client
        function handleEventFromClient(this, ~, ed)
            if isfield(ed.EventData,'source') && ...
                    strcmp('server',ed.EventData.source)
                % Ignore events generated by the server
                return;
            end

            if isfield(ed.EventData,'type')
                try
                    switch ed.EventData.type
                        case 'CreateInspector'
                            % Fired to start a server peer manager for an
                            % inspector
                            internal.matlab.datatoolsservices.logDebug("pi", "InspectorFactory.handlePeerEvent: CreateInspector");
                            this.createInspector(ed.EventData.application, ...
                                ed.EventData.channel);

                        case 'DeleteInspector'
                            % Fired to delete a server peer manager
                            % inspector
                            internal.matlab.datatoolsservices.logDebug("pi", "InspectorFactory.handlePeerEvent: DeleteInspector");
                            % Get the manager instance and delete it
                            if this.getInspectorInstances.isKey(...
                                    ed.EventData.channel)
                                % Get the Property Inspector which is
                                % referenced by the key
                                manager = this.createInspector(...
                                    ed.EventData.application, ...
                                    ed.EventData.channel);

                                % Delete the Property Inspector
                                delete(manager);
                            end

                        case 'RegisterInspectorView'
                            % Fired to start a server peer manager for an
                            % inspector
                            internal.matlab.datatoolsservices.logDebug("pi", "InspectorFactory.handlePeerEvent: RegisterInspectorView");
                            if isfield(ed.EventData,'defaultObj')
                                obj = ed.EventData.defaultObj;
                            else
                                obj = '';
                            end
                            this.registerInspectorView(...
                                ed.EventData.className,...
                                ed.EventData.application,...
                                ed.EventData.proxyViewClass,...
                                obj);
                    end
                catch e
                    rethrow(e)
                end
            end
        end

        function status = handlePropertySetFromClient(~, ~, ed)
            % Handles properties being set.  ed is the Event Data, and it
            % is expected that ed.EventData.key contains the property which
            % is being set.  Returns a status: empty string for success, an
            % error message otherwise.
            status = '';

            if ~isa(ed.EventData.newValue, 'java.util.HashMap')
                return;
            end

            if ed.EventData.newValue.containsKey('Source') && ...
                    strcmp('server',ed.EventData.newValue.get('Source'))
                % Ignore events generated by the server
                return;
            end
        end

        function jsonStr = getProxyViewMapJSON(this)
            % Generate the JSON Array of all proxy view mappings
            appKeys = keys(this.ProxyViewMapJSON);
            jsonStr = '[';
            for i=1:length(appKeys)
                app = appKeys{i};
                map = this.ProxyViewMapJSON(app);
                classKeys = keys(map);
                for j=1:length(classKeys)
                    class = classKeys{j};
                    classJSON = map(class);

                    % Only send the class data if it contains the defaults for
                    % the class.  (Some objects which could not be accessed at
                    % build time may not have the default data, and so would be
                    % of no use by the client).
                    if contains(classJSON, 'defaults')
                        if length(jsonStr)>1
                            jsonStr = [jsonStr ','];
                        end
                        jsonStr = [jsonStr classJSON];
                    end
                end
            end
            jsonStr = [jsonStr ']'];
        end
    end

    methods(Static)
        % getInstance - returns an instance of the Inspector Factory
        function obj = getInstance()
            mlock; % Keep persistent variables until MATLAB exits
            persistent factoryInstance;
            if isempty(factoryInstance) || ~isvalid(factoryInstance)

                % Create a new Inspector Factory
                factoryInstance = internal.matlab.inspector.peer.InspectorFactory;

                s = dbstack;
                if any(contains(string({s.name}), "TestRunner."))
                    % Test environment, immediately start checks
                    internal.matlab.datatoolsservices.logDebug("pi", "immediately checking cache...");
                    internal.matlab.inspector.peer.InspectorCacheManager.idleCacheCheck();
                else
                    internal.matlab.datatoolsservices.logDebug("pi", "starting factory timer...");
                    cacheCheckDelay = 10;
                    t = timer("StartDelay", cacheCheckDelay, ...
                        "TimerFcn", @(tm,~)internal.matlab.inspector.peer.InspectorCacheManager.startBackgroundCacheCheck(tm));
                    t.start();
                end
            end
            obj = factoryInstance;
        end

        function obj = getInspectorInstances(newInspectorInstances)
            % Returns the list of inspector instances that have been
            % created.
            mlock; % Keep persistent variables until MATLAB exits
            persistent InspectorInstances;

            if nargin > 0
                % Set the new inspector instances
                InspectorInstances = newInspectorInstances;
                internal.matlab.datatoolsservices.logDebug("pi", "InspectorFactory.getInspectorInstances: set");

            elseif isempty(InspectorInstances)
                % Create the inspectorInstances map for the first time
                internal.matlab.datatoolsservices.logDebug("pi", "InspectorFactory.getInspectorInstances: initial creation");
                InspectorInstances = containers.Map();
            end

            % Return the inspector instances map
            obj = InspectorInstances;
        end

        function varargout = createInspector(Application, Channel)
            % Creates a Property Inspector
            mlock; % Keep persistent variables until MATLAB exits
            persistent inspectorCounter;
            persistent deleteListeners;

            if isempty(inspectorCounter)
                inspectorCounter = 0;
            end

            if nargin<1 || isempty(Application)
                % Setup a default application if it wasn't provided
                Application = 'default';
            end

            % Update the counter
            inspectorCounter = inspectorCounter + 1;

            if nargin<2 || isempty(Channel)
                % Setup a default channel if it wasn't provided
                Channel = ['/Inspector_' num2str(inspectorCounter)];
            end

            internal.matlab.datatoolsservices.logDebug("pi", ...
                "InspectorFactory.createInspector: Application = " + Application + ", Channel = " + Channel);

            % Get the list of inspector instances
            InspectorInstances = ...
                internal.matlab.inspector.peer.InspectorFactory.getInspectorInstances;
            if isempty(deleteListeners)
                deleteListeners = containers.Map();
            end

            if ~isKey(InspectorInstances, Channel)
                % Create a new Peer Inspector Manager instance
                provider = internal.matlab.variableeditor.peer.MF0ViewModelVEProvider(Channel);
                managerInstance = ...
                    internal.matlab.inspector.peer.PeerInspectorManager(...
                    Application, provider);
                InspectorInstances(Channel) = managerInstance;

                % Add a listener for when it is destroyed
                deleteListeners(Channel) = event.listener(managerInstance,...
                    'ObjectBeingDestroyed',...
                    @(es,ed) (internal.matlab.inspector.peer.InspectorFactory.getInspectorInstances(...
                    InspectorInstances.remove(Channel))));

                internal.matlab.inspector.peer.InspectorFactory.getInspectorInstances(InspectorInstances);
            end

            % Return the new manager instances
            obj = InspectorInstances(Channel);

            if nargout == 1
                % Return the inspector instance if an argument is expected
                varargout = {obj};
            end
        end

        function destroyInspector(objOrKey)
            % Deletes the specified inspector.  objOrKey can be the
            % Inspector object, or it can be a key (the channel ID)
            inspectorInstances = ...
                internal.matlab.inspector.peer.InspectorFactory.getInspectorInstances;
            if ischar(objOrKey)
                % This is a key, look for it in the list of instances
                if isKey(inspectorInstances, objOrKey)
                    % delete this instance
                    delete(inspectorInstances(objOrKey));
                end
            else
                % This is an inspector instance, find it in the map and
                % delete it
                allKeys = keys(inspectorInstances);
                for i = 1:length(allKeys)
                    key = allKeys{i};
                    if isequal(inspectorInstances(key), objOrKey)
                        delete(objOrKey);
                        break;
                    end
                end
            end
        end

        function registerEditor(className, clientEditorPath)
            % Register an editor for a given class name
            wr = internal.matlab.datatoolsservices.WidgetRegistry.getInstance;
            wr.registerEditor(...
                'internal.matlab.inspector.peer.PeerInspectorViewModel',...
                className, clientEditorPath);
        end

        function registerInPlaceEditor(className, clientEditorPath)
            % Register an in-place editor for a given class name
            wr = internal.matlab.datatoolsservices.WidgetRegistry.getInstance;
            wr.registerInPlaceEditor(...
                'internal.matlab.inspector.peer.PeerInspectorViewModel',...
                className, clientEditorPath);
        end

        function registerRenderer(className, clientRendererPath)
            % Register a renderer for a given class name
            wr = internal.matlab.datatoolsservices.WidgetRegistry.getInstance;
            wr.registerCellRenderer(...
                'internal.matlab.inspector.peer.PeerInspectorViewModel',...
                className, clientRendererPath);
        end

        function registerEditorConverter(variableClass, converter)
            % Register a renderer for a given class name
            wr = internal.matlab.datatoolsservices.WidgetRegistry.getInstance;
            wr.registerEditorConverter('internal.matlab.inspector.peer.PeerInspectorViewModel',...
                variableClass,...
                converter);
        end

        function registerInspectorView(className, propertySheetName, application)
            % Registers a class name to proxy view association, for the given
            % application name.

            arguments
                % Class name to register
                className (1,1) string

                % Proxy view class name to associate it with
                propertySheetName (1,1) string

                % Application name to do the mapping for
                application (1,1) string = 'default'
            end

            % Get the Factory Instance
            factoryInstance = internal.matlab.inspector.peer.InspectorFactory.getInstance;

            if ~isKey(factoryInstance.ProxyViewMap, application)
                factoryInstance.ProxyViewMap(application) = containers.Map;
            end

            % Get the class name maps
            map = factoryInstance.ProxyViewMap(application);
            if isKey(map, className)
                return;
            end

            % Add the association for the className to proxy view
            map(className) = propertySheetName; %#ok<NASGU>
        end

        function deregisterInspectorView(className, application)
            % Deregisters a class name to proxy view association, for the given
            % application name.

            arguments
                % Class name to deregister
                className (1,1) string

                % Application name to do the mapping for
                application (1,1) string = 'default'
            end

            % Get the Factory Instance
            factoryInstance = internal.matlab.inspector.peer.InspectorFactory.getInstance;

            if isKey(factoryInstance.ProxyViewMap, application)
                % Get the class name maps
                map = factoryInstance.ProxyViewMap(application);
                if ~isKey(map, className)
                    return;
                end

                % Remove the association for the className to proxy view
                remove(map, className);
            end
        end

        function [proxyClassName, reuseProxyClass, helpSearchTerm] = getInspectorViewName(className, application, object)
            % Return the proxy class name, to use for the inspector, given the
            % class name, the application name, and the object being inspected.
            % Also return the helpSearchTerm, which is the class name by
            % default, but can be overridden by content in the cache.
            arguments
                className (1,1) string = "default"
                application (1,1) string = "default"
                object = []
            end

            import internal.matlab.inspector.peer.InspectorFactory;
            proxyClassName = [];
            reuseProxyClass = false;
            helpSearchTerm = className;

            % Check for the application in the factory's ProxyViewMap
            factoryInstance = InspectorFactory.getInstance;
            if ~isKey(factoryInstance.ProxyViewMap, application)
                % If it isn't a key, use default.  Sometimes the key can be
                % a unique ID, but fallback to using the default mapping.
                application = "default";
            end

            if ~isKey(factoryInstance.ProxyViewMap, application)
                % This case will happen during build
                return;
            end

            % Get the class name maps
            map = factoryInstance.ProxyViewMap(application);
            if ~isKey(map, className)
                if nargin == 3
                    % If the component was passed in, check if it is a user
                    % authored component (which extend ComponentContainer).  If
                    % so, use a custom proxy class for its display
                    if isa(object, "matlab.ui.componentcontainer.ComponentContainer")
                        proxyClassName = "matlab.graphics.internal.propertyinspector.views.ComponentContainerView";
                    end
                end
            else
                % Return the class name from the map
                proxyClassName = map(className);
            end

            % Note that object can be any object including containers.Map
            % (which does not support arrayfun)
            if (all(isgraphics(object)) || isa(object,'matlab.graphics.datatip.DataTipTemplate')) && ...
                    internal.matlab.inspector.Utils.isComponentInUIFigure(object) && ...
                    isempty(proxyClassName)
                % If no proxy class was found, check the other applications to see
                % if there is a registered class.  This handles the case where a proxy class
                % registered by an app can be reused by the default Property Inspector
                k = keys(factoryInstance.ProxyViewMap);
                for idx = 1:length(k)
                    key = k{idx};
                    if strcmp(key, application)
                        continue;
                    end
                    map = factoryInstance.ProxyViewMap(key);
                    if isKey(map, className)
                        proxyClassName = map(className);
                        reuseProxyClass = true;

                        appJSONDataMap = factoryInstance.ProxyViewMapJSON(key);
                        appData = jsondecode(appJSONDataMap(className));
                        if isfield(appData, "helpSearchTerm")
                            helpSearchTerm = appData.helpSearchTerm;
                        end
                        break;
                    end
                end
            end
        end

        function [proxyClass, proxyClassName] = getInspectorView(className, application, object, varName)
            % Return the proxy class and its name, to use for the inspector,
            % given the class name, the application name, and the object being
            % inspected.
            arguments
                className (1,1) string = "default"
                application (1,1) string = "default"
                object = []
                varName (1,1) string = ""
            end

            import internal.matlab.inspector.peer.InspectorFactory;
            if isempty(application)
                application = "default";
            end
            if isempty(className)
                className = "default";
            end

            [proxyClassName, reuseProxyClass, helpSearchTerm] = InspectorFactory.getInspectorViewName(className, application, object);

            if ~isempty(proxyClassName)
                % Create the proxy class for the object
                proxyClass = eval(proxyClassName + "(object)");
                if ~isobject(proxyClass)
                    proxyClass = object;
                elseif reuseProxyClass && ~isempty(intersect(properties(object), internal.matlab.inspector.UIComponentProxy.PropsToAdd))
                    % Create a wrapper for uicomponent objects if we are reusing a proxy class
                    % definition from another app, and if the object contains properties that
                    % can be added in by the wrapper class
                    proxyClass = internal.matlab.inspector.UIComponentProxy(proxyClass);
                end

                % Assign the helpSearchTerm in the ProxyClass, which is the
                % class which gathers the tooltips for the properties
                proxyClass.HelpSearchTerm = helpSearchTerm;
            elseif isjava(object)
                % Create the wrapper for the java object
                proxyClassName = "internal.matlab.inspector.JavaObjectWrapper";
                proxyClass = internal.matlab.inspector.JavaObjectWrapper(object, varName);
            elseif startsWith(className, "COM.") && ispc
                % Special handling for the actxserver classes created to
                % interface with COM servers like Excel.  These all contain
                % recursive properties which are not "isequal", which causes the
                % Object Browser to hang.  Avoid this by setting it to skip all
                % properties in the Object Browser.
                proxyClassName = "internal.matlab.inspector.DefaultInspectorProxyMixin";
                proxyClass = internal.matlab.inspector.DefaultInspectorProxyMixin(object);
                proxyClass.PropsToSkipInHierarchy = properties(object);
            else
                proxyClass = object;
            end
        end

        function startup()
            % Makes sure the peer manager for the variable editor exists
            internal.matlab.inspector.peer.InspectorFactory.getInstance();
        end
    end

    methods(Static = true, Hidden = true)

        function reinitializeInspectedObjects()
            % Reinspect any manager instances which currently have an open
            % document.  This is called, for example, when the inspector HTML
            % page is refreshed, so that the inspector will redisplay.
            m = internal.matlab.inspector.peer.InspectorFactory.getInspectorInstances();
            appNames = keys(m);
            for idx = 1:length(appNames)
                mgr = m(appNames{idx});
                if ~isempty(mgr.Documents)
                    mgr.Documents.ViewModel.DataModel.stopTimer();
                    mgr.reinspectCurrentObject();
                end
            end
        end
    end
end
