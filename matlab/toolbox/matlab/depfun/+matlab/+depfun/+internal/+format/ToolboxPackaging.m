classdef ToolboxPackaging
%

%   Copyright 2019-2020 The MathWorks, Inc.
    
    methods(Static)
        
        %discover all files within a toolbox root for a toolbox project
        function [toolboxDependencies] = findDependencies(varargin)
            toolboxRoot = varargin{1};
            [path,~,~]=fileparts(toolboxRoot);
            if(isempty(path) && exist(fullfile(pwd,toolboxRoot),'dir'))
                toolboxRoot = fullfile(pwd,toolboxRoot);
            end
            demosHeader = '';%demos.xml will not checked for an empty string header
            if(nargin ==2)
                demosHeader = varargin{2};%demos.xml will be checked for any nonempty header
            end
            allSubdirectories = matlab.depfun.internal.format.CommonUtilities.findSubdirectoriesByBFS(toolboxRoot);
            [demosFile]  = matlab.depfun.internal.format.ToolboxContentUtilities.findDemosXML(allSubdirectories);
            [categorizedExamples, demosFileHadError, demosFileWasAutoGenerated] = matlab.depfun.internal.format.ToolboxContentUtilities.findCategorizedExamples(allSubdirectories, demosFile, demosHeader);
            [apps] = matlab.depfun.internal.format.ToolboxContentUtilities.findApps(allSubdirectories);
            [docFile] = matlab.depfun.internal.format.ToolboxContentUtilities.findDocumentation(allSubdirectories);
            [demosFile]  = matlab.depfun.internal.format.ToolboxContentUtilities.findDemosXML(allSubdirectories);
            toolboxDependencies=struct('CategorizedExamples',{categorizedExamples},'AppsList',{apps},'DocFile',docFile, 'DemosFile',demosFile, 'DemosFileHadError',demosFileHadError, 'DemosWasAutoGenerated', demosFileWasAutoGenerated);
        end
        
        %returns all the dependencies that are not within the toolbox folder
        function [ externalDependencies, productName, productVersion, productNumber, supportPackages] = findExternalDependenciesTopOnly(toolboxRoot,UseTopOnly,varargin)
            if UseTopOnly
                [depfileslist, products] = matlab.depfun.internal.format.ToolboxPackaging.getAllRequiredFilesAndProducts(varargin, 'toponly');
            else
                [depfileslist, products] = matlab.depfun.internal.format.ToolboxPackaging.getAllRequiredFilesAndProducts(varargin);
            end
            [supportPackages] =  matlab.depfun.internal.format.CommonUtilities.findSupportPackages(depfileslist, cellfun(@(x) char(x), {products(:).Name}, 'UniformOutput',false));
            isInToolbox = matlab.depfun.internal.format.ToolboxPackaging.areFilesInToolbox(depfileslist, toolboxRoot);
            externalDependencies = depfileslist(~cell2mat(isInToolbox));
            productName = cellfun(@(x) char(x), {products(:).Name}, 'UniformOutput',false);
            productVersion = cellfun(@(x) char(x), {products(:).Version}, 'UniformOutput',false);
            productNumber = cellfun(@(x) mat2str(x), {products(:).ProductNumber}, 'UniformOutput',false);
        end
        
        
        %ReqQorker translated to MATLAB
        function  [externalDependencies, productName, productVersion, productNumber, supportPackages] = findToolboxDependencies(rootFolder)
            externalDependencies = [];
            productName= [];
            productVersion= [];
            productNumber= [];
            supportPackages= [];
            [fileGroups, filesNeededOnThePath] = matlab.depfun.internal.format.ToolboxPackaging.splitFiles(rootFolder);
            
            addedToPath = [];
            for i = 1:size(filesNeededOnThePath,1)
                onPath = contains(path, strcat(filesNeededOnThePath(i), pathsep));
                addedToPath(end+1) = ~onPath;
                
                if ~onPath
                    addpath(filesNeededOnThePath(i));
                end
            end
            
            onPath = contains(path, [rootFolder, pathsep]);
            %check if already on path, if not add
            for fileGroup = fileGroups
                files =(fileGroup{:});
                files = files';
                [extDep, names, versions, numbers, sPkgs] = ...
                    matlab.depfun.internal.format.ToolboxPackaging.findExternalDependenciesTopOnly(rootFolder, false, files{:});
                %todo collect up all these results
                externalDependencies = [externalDependencies, extDep];
                productName= [productName, names];
                productVersion= [productVersion, versions];
                productNumber= [productNumber, numbers];
                supportPackages= [supportPackages, sPkgs];
            end
            
            %if it was added to the path, remove it
            for i=1:size(filesNeededOnThePath,1)
                if addedToPath(i)
                    rmpath(filesNeededOnThePath(i));
                end
            end
        end
    end
    
    
    methods (Static, Access = 'private')
        
        
        %returns all the dependencies that are not within the toolbox folder
        function [allExternalDependencies] = findExternalDependencies(allFiles, toolboxRoot)
            isInToolbox = matlab.depfun.internal.format.ToolboxPackaging.areFilesInToolbox(allFiles, toolboxRoot);
            allExternalDependencies=allFiles(~cell2mat(isInToolbox));
        end
        
        %returns logical cell array denoting whether or not the file in the
        %corresponding location in the input cell array is in the specified
        %toolbox folder
        function [isInToolbox] = areFilesInToolbox(files, toolboxRoot)
            %windows platforms are case insensitive for file/folder names
            comparisonFunction=@strncmp;
            if(ispc)
                comparisonFunction=@strncmpi;
            end
            %find all the files that do not have the toolbox folder root in
            %the beginning of their path
            isInToolbox=cellfun(@(x) comparisonFunction(x,toolboxRoot,numel(toolboxRoot)), files, 'UniformOutput',false);
        end
        
        
        function  [depfileslist, products] = getAllRequiredFilesAndProducts(filesList, varargin)
            [depfileslist, products] = matlab.codetools.requiredFilesAndProducts(filesList, varargin{:});
        end
        
        %-----------------------------------
        %   matlab.depfun.internal.format.ToolboxPackaging utilities for
        %   reqWorker java transition
        %-----------------------------------
        
        function [fileGroups, filesNeededOnThePath] = splitFiles(rootFolder)
            filesPerGroup = 3;
            fileGroups = [];
            
            %must always use root folder on the path
            filesNeededOnThePath = rootFolder;
            
            %split this root into pieces to plug into the below function call
            subDirs = matlab.depfun.internal.format.CommonUtilities.findSubdirectoriesByBFS(rootFolder);
            hasNext = true;
            
            remainingFiles = [];
            
            while (hasNext)
                
                currDir = subDirs(1);
                name = currDir{:};
                
                if (size(subDirs, 1)>1)
                    subDirs = subDirs(2:end);
                else
                    hasNext = false;
                end
                
                if (matlab.depfun.internal.format.ToolboxPackaging.isAPackageOrAClass(name))
                    files = matlab.depfun.internal.format.ToolboxPackaging.getAllFilesInDir(name);
                    fileGroups{end+1} = files;
                    
                    parent = matlab.depfun.internal.format.ToolboxPackaging.getParentDirNeededOnThePath(name);
                    %if the directory isn't already specified, then add it
                    if ~any(strcmp(filesNeededOnThePath,parent))
                        filesNeededOnThePath = [filesNeededOnThePath; parent];
                    end
                else
                    files = matlab.depfun.internal.format.ToolboxPackaging.getAllFilesInDir(name);
                    remainingFiles = [remainingFiles; files];
                end
            end
            
            %now group all the remaining files
            numberOfGroups = ceil(size(remainingFiles,1)/filesPerGroup);
            
            for i = 1:numberOfGroups
                newGroup = remainingFiles(1:min(filesPerGroup, end));
                if (i~= numberOfGroups)
                    remainingFiles = remainingFiles(filesPerGroup + 1: end);
                end
                fileGroups{end+1} = newGroup;
            end
        end
        
        function parent = getParentDirNeededOnThePath(directory)
            [parent, ~, ~] = fileparts(directory);
            while matlab.depfun.internal.format.ToolboxPackaging.isAPackageOrAClass(parent)
                [parent, ~, ~] = fileparts(parent);
            end
        end
        
        function fileNames = getAllFilesInDir(directory)
            contents = dir(directory);
            fileIndices = arrayfun(@(x) (x.isdir==0), contents);
            files = contents(fileIndices);
            fileNames = arrayfun(@(x) fullfile(x.folder,x.name), files, 'UniformOutput', 0);
        end
        
        function isPackageOrClass = isAPackageOrAClass(directory)
            [~, simpleName, ~] = fileparts(directory);
            isPackageOrClass = regexp(simpleName,'^(@|+)');
        end
        
    end
end

% LocalWords:  toponly Qorker
