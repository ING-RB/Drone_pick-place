classdef (CaseInsensitiveProperties,TruncatedProperties) event
    %tsdata.event class
    %    tsdata.event properties:
    %       EventData - Property is of type 'MATLAB array'
    %       Name - Property is of type 'ustring'
    %       Time - Property is of type 'double'
    %       Units - Property is of type 'string'
    %       StartDate - Property is of type 'ustring'
    %
    %    tsdata.event methods:
    %       display -  Overloaded
    %       eq - Compare event objects
    %       findEvent - Returns an event object based on the specified name
    %       get -  Access/Query event property values.
    %       getTimeStr - Returns a cell array of strings indicating the times of all
    %       set -  Set properties of event object.


    properties
        %EVENTDATA Property is of type 'MATLAB array'
        EventData = [];
        %NAME Property is of type 'ustring'
        Name = '';
        %TIME Property is of type 'double'
        Time = 0;
        %UNITS Property is of type 'string'
        Units = '';
        %STARTDATE Property is of type 'ustring'
        StartDate = '';
    end


    methods  % constructor block
        function h = event(name,time,varargin)
            %TSDATA.EVENT  Construct event object for timeseries object.
            %
            %    E = TSDATA.EVENT(Name,Time) creates an event object with the specified
            %    name that occurs at the time Time. Time can either be a real value or
            %    a date string.
            %
            %    E = TSDATA.EVENT(Name,Time,'Datenum') uses 'Datenum' to indicate that
            %    the Time value is a serial date number generated by the datenum function.
            %    The Time value is converted to a date string after the event is
            %    created.


            if nargin==0
                return
            end

            if nargin>=1
                % Set the name
                if ischar(name) || isstring(name)
                    h.Name = char(name);
                else
                    error(message('MATLAB:tsdata:event:event:misname'))
                end
            end

            if nargin>=2
                % Numeric value
                if isnumeric(time) && length(time)==1
                    % If there is a third input argument called 'datenum', treat the
                    % numeric value as a datenum value supported by MATLAB
                    if nargin == 3
                        if strcmpi(varargin{1},'datenum')
                            h.Time = 0;
                            h.Units = 'days';
                            try
                                h.StartDate = datestr(time,0);
                            catch
                                error(message('MATLAB:tsdata:event:event:datenum'))
                            end
                        else
                            h.Time = time;
                        end
                        % Otherwise, treat the numeric value as a relative time point
                    else
                        h.Time = time;
                        h.Units = 'seconds';
                    end
                    % string which represent an absolute date
                elseif ischar(time) || (isstring(time) && isscalar(string))
                    try
                        Time = datenum(char(time));
                    catch
                        error(message('MATLAB:tsdata:event:event:noValidDateStr'))
                    end
                    h.Time = 0;
                    h.Units = 'days';
                    h.StartDate = datestr(Time,0);
                else
                    error(message('MATLAB:tsdata:event:event:abstime'))
                end
            end


        end  % event

    end  % constructor block

    methods
        function obj = set.Name(obj,value)
            % DataType = 'ustring'
            % no cell string checks yet'
            obj.Name = value;
        end

        function obj = set.Time(obj,value)
            % DataType = 'double'
            validateattributes(value,{'numeric'}, {'scalar'},'','Time')
            value = double(value); %  convert to double
            obj.Time = value;
        end

        function obj = set.Units(obj,value)
            % DataType = 'string'
            validateattributes(value,{'char','string'}, {'row'},'','Units')
            obj.Units = value;
        end

        function obj = set.StartDate(obj,value)
            % DataType = 'ustring'
            % no cell string checks yet'
            obj.StartDate = value;
        end

    end   % set and get functions

    methods  % public methods
        %----------------------------------------
        function display(this)
            % DISPLAY  Overloaded
            %

            if isempty(this)
                builtin('disp',this)
                return
            end
            disp(newline);
            disp(get(this))
        end  % display

        %----------------------------------------
        function I = eq(e1,e2)
            %EQ Compare event objects
            %
            %   E1 == E2 performs element-wise comparisons between tsdata.event arrays
            %   E1 and E2.  E1 and E2 must be of the same dimensions unless one is a scalar.
            %   The result is a logical array of the same dimensions, where each
            %   element is an element-wise equality result.
            %
            %   If one of E1 or E2 is scalar, scalar expansion is performed and the
            %   result will match the dimensions of the array that is not scalar.
            %
            %   I = EQ(E1, E2) stores the result in a logical array of the same
            %   dimensions.


            % First, if e2 is empty, return false instead of error message
            if isempty(e2)
                I = false;
                return
            end

            if numel(e1) == numel(e2)
                for k=numel(e1):-1:1
                    I(k) = localCompare(e1(k),e2(k));
                end
                I = reshape(I,size(e1));
            elseif isscalar(e2)
                for k=numel(e1):-1:1
                    I(k) = localCompare(e1(k),e2);
                end
                I = reshape(I,size(e1));
            elseif isscalar(e1)
                for k=numel(e2):-1:1
                    I(k) = localCompare(e1,e2(k));
                end
                I = reshape(I,size(e2));
            else
                error(message('MATLAB:tsdata:event:eq:sizeMismatch'))
            end
        end  % eq




        %----------------------------------------
        function [event, k] = findEvent(this,name,varargin)
            %FINDEVENT Returns an event object based on the specified name
            %
            %   [E INDEX]=FINDEVENT(EVENTS,NAME) returns the first event object found
            %   in EVENTS, an array of event objects, with NAME as its name. The
            %   function also returns the corresponding array index. If no object is
            %   found, E is empty and INDEX is 0.
            %
            %   [E INDEX]=FINDEVENT(EVENTS,NAME,N) returns the Nth event object found
            %   in the EVENTS array with NAME as its name.
            %
            %   See also TSDATA.EVENT/EVENT, TSDATA.TIMESERIES/ADDEVENT



            % This could be an array of event objects
            if nargin == 2
                pick_which_dups = 1;
            else
                pick_which_dups = varargin{1};
                if isempty(pick_which_dups)
                    pick_which_dups = 1;
                end
            end

            event = [];

            if ~ischar(name) && ~(isstring(name) && isscalar(name))
                error(message('MATLAB:tsdata:event:findevent:misname'))
            end
            if ~isnumeric(pick_which_dups)
                error(message('MATLAB:tsdata:event:findevent:dups'))
            end

            j=1;
            for k=1:length(this)
                if strcmp(this(k).name,name)
                    if j==pick_which_dups
                        event = this(k);
                        return;
                    else
                        j=j+1;
                    end
                end
            end

            k=0;
        end  % findEvent

        %----------------------------------------
        function Value = get(e,varargin)
            %GET  Access/Query event property values.
            %
            %   VALUE = GET(E,'PropertyName') returns the value of the
            %   specified property of the event object.  An equivalent
            %   syntax is
            %
            %       VALUE = E.PropertyName
            %
            %   GET(E) displays all properties of E and their values.
            %
            %   See also EVENT\SET.


            Value = uttsget(e,varargin{:});
        end  % get

        %----------------------------------------
        function eventStr = getTimeStr(this,varargin)
            %GETTIMESTR Returns a cell array of strings indicating the times of all
            %event objects.
            %
            %   STR = GETTIMESTR(EVENTS,UNITS) where EVENTS is an array of event
            %   objects and UNITS is the desired time units.  When the StartDate
            %   property of an event object is empty, STR returns the times in
            %   specified UNITS. Otherwise, UNITS is ignored.


            % This could be an array of event objects
            eventStr = cell(size(this));
            for k=1:length(this)
                if ~isempty(this(k).StartDate)
                    eventStr{k} = datestr(this(k).Time*tsunitconv('days',this(k).Units)+...
                        datenum(this(k).StartDate),0);
                else
                    if nargin>=2 && ~isempty(varargin{1})
                        eventStr{k} = sprintf('%0.3f',this(k).Time*...
                            tsunitconv(varargin{1},this(k).Units));
                    else
                        eventStr{k} = sprintf('%0.3f',this(k).Time);
                    end
                end
            end
        end  % getTimeStr

        %----------------------------------------
        function Out = set(e,varargin)
            %SET  Set properties of event object.
            %
            %   SET(E,'PropertyName',VALUE) sets the property 'PropertyName'
            %   of the event E to the value VALUE.  An equivalent syntax
            %   is
            %       E.PropertyName = VALUE
            %
            %   SET(E,'Property1',Value1,'Property2',Value2,...) sets multiple
            %   event property values with a single statement.
            %
            %   SET(E,'Property') displays values for the specified property in E.
            %
            %   SET(E) displays all properties of E and their values.
            %
            %   See also EVENT\GET.


            if nargin > 1
                [varargin{:}] = convertStringsToChars(varargin{:});
            end

            ni = nargin;
            no = nargout;
            if ~isa(e,'tsdata.event')
                % Call built-in SET. Handles calls like set(gcf,'user',ss)
                builtin('set',e,varargin{:});
                return
            elseif no && ni>2
                error(message('MATLAB:tsdata:event:set:invOutArg'));
            end

            % Get public properties and their assignable values
            if ni<=2
                AllProps = fieldnames(e);
                for k=length(AllProps):-1:1
                    PropValues{k} = get(e,AllProps{k});
                end
                AsgnValues = tspvformat(PropValues(1:length(AllProps)));
            else
                % Add obsolete property Td
                AllProps = fieldnames(e);
            end


            % Handle read-only cases
            if ni==1
                % SET(E) or S = SET(E)
                if no
                    Out = cell2struct(AsgnValues,AllProps,1);
                else
                    disp(tspvformat(AllProps,AsgnValues))
                end
            elseif ni==2
                % SET(E,'Property') or STR = SET(E,'Property')
                % Return admissible property value(s)
                try
                    [Property,imatch] = tspnmatch(varargin{1},AllProps,10);
                    if no
                        Out = AsgnValues{imatch};
                    else
                        disp(AsgnValues{imatch})
                    end
                catch me
                    rethrow(me)
                end

            else
                % SET(E,'Prop1',Value1, ...)
                ename = inputname(1);
                if isempty(ename)
                    error(message('MATLAB:tsdata:event:set:invVarArg'))
                elseif rem(ni-1,2)~=0
                    error(message('MATLAB:tsdata:event:set:invPropValPairs'))
                end

                % Match specified property names against list of public properties and
                % set property values at object level
                % RE: a) Include all properties to appropriately detect multiple matches
                %     b) Limit comparison to first 10 chars (because of qualityinfo)
                try
                    for i=1:2:ni-1
                        varargin{i} = tspnmatch(varargin{i},AllProps,10);
                        e.(tspnmatch(varargin{i},AllProps,10)) = varargin{i+1};
                    end
                catch me
                    rethrow(me)
                end

                % Assign ts in caller's workspace
                assignin('caller',ename,e)

            end



        end  % set

    end  % public methods

end  % classdef

function result = localCompare(e1,e2)

% If e2 is empty, return false instead of error message
if isa(e2,'tsdata.event')
    if isequal(e1.EventData,e2.EventData) && strcmp(e1.Name,e2.Name)
        if ~isempty(e1.StartDate) && ~isempty(e2.StartDate)
            result = (e1.Time*tsunitconv('days',e1.Units)+datenum(e1.StartDate) == ...
                e2.Time*tsunitconv('days',e2.Units)+datenum(e2.StartDate));
        elseif isempty(e1.StartDate) && isempty(e2.StartDate)
            if isequal(e1.Units,e2.Units)
                result = (e1.Time==e2.Time);
            else
                result = (tsunitconv(e1.Time,'seconds')==tsunitconv(e2.Time,'seconds'));
            end
        else
            result = false;
        end
    else
        result = false;
    end
else
    result = false;
end
end  % localCompare
