classdef MLAPPSerializer < handle
    %MLAPPSerializer This is a class that serializes the app's data

    % Copyright 2017-2024 The MathWorks, Inc.

    properties
        % Full file path of the app to be serialized
        FullFileName

        UIFigure

        % 1xN struct array with fields: Id, ParentGroupId
        Groups

        % Nx1 cell array
        EditableSectionCode

        % 1xN array struct array with fields: Name, Code
        Callbacks

        % struct with fields: Name, Code (Legacy, still supported)
        StartupCallback

        % the matlab code to run the app
        MatlabCodeText

        % metadata of the app
        Metadata appdesigner.internal.model.MetadataModel

        % fullfile path to a screenshot image
        ScreenshotPath

        InputParameters

        % an Nx1 cell array of run arguments to be serialized
        RunConfigurations

        % char array representing an enumeration of app singleton behavior
        SingletonMode

        % struct containing app-type specific data
        AppTypeData

        % ClassName of App
        ClassName

        % struct array containing the information about Bindings established in design environment
        Bindings

        % Struct containing the data related to the Simulink-app workflows.
        % Fields: Filename
        Simulink

        % Logical that controls whether or not to create a new MLAPP file
        % at the target save location.  Creation of a new file involves
        % clearing out the entire target file, if it exists on disk.
        % Defaults to false.
        OverwriteTargetFile = false
    end

    properties (SetAccess = private)
        SerializableCodeDataProperties = {
            'EditableSectionCode'
            'Callbacks'
            'StartupCallback'
            'InputParameters'
            'SingletonMode'
            'AppTypeData'
            'Bindings'
            };
    end

    methods
        function obj = MLAPPSerializer(fullFilename, uifigure)
            obj.FullFileName = fullFilename;
            obj.UIFigure = uifigure;
            obj.MatlabCodeText = '';
            obj.Metadata = appdesigner.internal.model.MetadataModel;
            obj.ClassName = '';
        end

        function set.Metadata(obj, newMetadata)
            % While saving the Version 1 app, change the
            % MinimumSupportedMATLABRelease to R2018a.
            import appdesigner.internal.serialization.util.ReleaseUtil;

            if ReleaseUtil.isEarlierThan(newMetadata.MinimumSupportedMATLABRelease, 'R2018a')
                newMetadata.MinimumSupportedMATLABRelease = 'R2018a';
            end
            newMetadata.MLAPPVersion = appdesigner.internal.serialization.app.AppVersion.MLAPPVersionTwo;
            newMetadata.MATLABRelease = appdesigner.internal.serialization.util.ReleaseUtil.getCurrentRelease();
            obj.Metadata = newMetadata;
        end

        function save(obj)
            % This method saves the data of the app.  The data has been
            % set via its public properties

            import appdesigner.internal.serialization.util.ReleaseUtil
            import appdesigner.internal.serialization.app.AppVersion;

            % construct a fileWriter
            fileWriter = appdesigner.internal.serialization.FileWriter(obj.FullFileName);

            if obj.OverwriteTargetFile
                % If needed, create a fresh MLAPP file.
                fileWriter.createOrOverwriteTargetFile();
            end

            % get the components structure
            componentsStructure = obj.getComponentsStructureToSave();

            % instantiate a factory, create the component data adjuster,
            % and adjust the component data.  The returned cleanup object
            % is used to automatically complete post-save procedures
            % specified by the decorators.
            factory = appdesigner.internal.serialization.save.ComponentDataAdjusterFactory();
            componentDataAdjuster = factory.createComponentDataAdjuster(componentsStructure);

            % On deletion, the componentDataAdjuster will restore the
            % components structure to its proper state.  No need for any
            % onCleanup or explicit calls here.
            componentDataAdjuster.adjustComponentDataPreSave();

            % use ClassName if provided
            % It's not using file name as ClassName, inferring class name from file name.
            if ~strcmp(obj.ClassName, '')
                % saveing app in MLAPP merge tool need to keep original Class Name
                % while file name in comparison tool could be different
                % because it is generated by source control system
                name = obj.ClassName;
            else
                [~, name] = fileparts(obj.FullFileName);
            end
            codeStructure = obj.getCodeStructureToSave(name);

            % Because the format has changed in 18a, 18a apps and beyond can no longer
            % be opened in 17b or earlier unless they are converted to the earlier format.
            % For this reason, when opening an 18a app in a previous release, the previous
            % framework requires that an AppData object be created and its
            % MinimumSupportedVersion property be set to 'R2018a'.
            % 19a introduces Responsive app, and its MinimumSupportedVersion
            % is set to 'R2019a' from Metadata on client side.
            % When this is done in AppData, the app opening failure dialog will
            % be popped up when 18a+ apps are opened in 16b, 17a, 17b
            appData = appdesigner.internal.serialization.app.AppData([],[],[]);
            appData.MinimumSupportedVersion =  obj.Metadata.MinimumSupportedMATLABRelease;

            appDataToSerialize = struct();
            appDataToSerialize.components = componentsStructure;
            appDataToSerialize.code = codeStructure;
            appDataToSerialize.appData = appData;

            % the empty arg set {''} is the default set and always present.
            % Serialize if there are more sets than the default
            if (length(obj.RunConfigurations) > 1)
                appDataToSerialize.runConfigurations = obj.RunConfigurations;
            end

            if ( ~isempty(obj.Simulink))
                appDataToSerialize.simulink = obj.Simulink;
            end
            % write the app Metadata
            % MLAPPVersion is no longer used to load apps, but it is
            % it is required for releases of MATLAB from R2018a to R2020a.
            % From 20b onward, the MLAPPVersion is inferred, but in the
            % earlier releases it is used to determine the file format.
            % Thus it must be written to preserve backward compatibility
            % of the file.
            obj.Metadata.MLAPPVersion = AppVersion.MLAPPVersionTwo;
            obj.Metadata.MATLABRelease = ReleaseUtil.getCurrentRelease;
            metadataToWrite = appdesigner.internal.serialization.util.convertMetadataModelToStruct(obj.Metadata);

            % write the app to file
            fileWriter.writeMLAPPFile(obj.MatlabCodeText, appDataToSerialize, metadataToWrite);

            % write the screenshot only if not empty
            if ~isempty(obj.ScreenshotPath)
                try
                    fileWriter.writeAppScreenshot(obj.ScreenshotPath);
                catch
                    % The screenshot is not critical to the app file and so
                    % silently do nothing if writing the screenshot fails.
                    % This may happen if tyring to write to a read-only app
                    % or the user has deleted the screenshot file before
                    % saving.
                end
            end
        end

        function updateAppCodeData(obj)
            % This method update the app code data of the app
            % called from mlapp merge tool to save merged mlapp file code

            import appdesigner.internal.serialization.util.ReleaseUtil
            import appdesigner.internal.serialization.app.AppVersion;

            % construct a fileWriter
            fileWriter = appdesigner.internal.serialization.FileWriter(obj.FullFileName);

            % use ClassName if provided
            % It's not using file name as ClassName, inferring class name from file name.
            if ~strcmp(obj.ClassName, '')
                % saveing app in MLAPP merge tool need to keep original Class Name
                % while file name in comparison tool could be different
                % because it is generated by source control system
                name = obj.ClassName;
            else
                [~, name] = fileparts(obj.FullFileName);
            end
            codeStructure = obj.getCodeStructureToSave(name);

            % Create appData struct to serialize with only code field
            appDataToSerialize = struct();
            appDataToSerialize.code = codeStructure;

            % the empty arg set {''} is the default set and always present.
            % Serialize if there are more sets than the default
            if (length(obj.RunConfigurations) > 1)
                appDataToSerialize.runConfigurations = obj.RunConfigurations;
            end

            % Create the app Metadata, only support version 2
            obj.Metadata.MLAPPVersion = AppVersion.MLAPPVersionTwo;
            obj.Metadata.MATLABRelease = ReleaseUtil.getCurrentRelease;
            metadataToWrite = appdesigner.internal.serialization.util.convertMetadataModelToStruct(obj.Metadata);

            % Write the app code data, code text, and meta data to MLAPP file
            fileWriter.writeAppCodeData(obj.MatlabCodeText, appDataToSerialize, metadataToWrite);
        end

    end

    methods  (Access = private)
        function code = getCodeStructureToSave(obj, className)
            % create code struct from relevant values set on serializer

            code = struct();

            code.ClassName = className;

            propsToSerialize = obj.SerializableCodeDataProperties;

            for m = 1:size(propsToSerialize, 1)
                if (~isempty(obj.(propsToSerialize{m})))
                    code.(propsToSerialize{m}) = obj.(propsToSerialize{m});
                end
            end

        end

        function componentsStruct = getComponentsStructureToSave(obj)
            % create a structure of component data: UIFigure,  Groups
            componentsStruct = struct();
            componentsStruct.UIFigure = obj.UIFigure;
            if( ~isempty(obj.Groups))
                componentsStruct.Groups = obj.Groups;
            end
        end
    end
end
