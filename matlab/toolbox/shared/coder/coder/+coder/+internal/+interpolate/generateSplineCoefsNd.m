function [ppOut, varargout] = generateSplineCoefsNd(nd, y, varargin)
% Generate coefs for ND spline interpolation. The coeffecients are
% generated by running spline in each dimension. Pass grid vectors to
% varargin. 
% Usage : ppOut = generateSplineCoefsNd(nd, v, x1, x2, x3 ....)

%   Copyright 2022 The MathWorks, Inc.

%#codegen
coder.internal.prefer_const(nd);
AUTOGRID = isempty(varargin);

% Transpose sample value to support spline function
vsize = value_size(nd, y);

varargout{nd} = coder.nullcopy(zeros(vsize, 'like', y));
ycols = vsize(1);
yrows = numel(y)/ycols;
k = 1;
for i = 1:yrows
    for j = 0:ycols-1
        varargout{nd}(k) = y(i + yrows*j);
        k = k+1;
    end
end

odr = coder.const([1,nd+1,2:nd]);
coder.unroll(coder.internal.isConst(nd));
for i = nd:-1:2   % carry out coordinatewise interpolation

    if AUTOGRID
        [~,v,l,k] = unmkpp(spline(1:size(y,i), reshape(varargout{i}, ...
            coder.internal.prodsize(varargout{i},'below',nd+1), vsize(nd+1)) ));
    else
        [~,v,l,k] = unmkpp(spline(varargin{i}, reshape(varargout{i}, ...
            coder.internal.prodsize(varargout{i},'below',nd+1), vsize(nd+1)) ));
    end
    
    vsize(nd+1) = l*k; 
    v = reshape(v, vsize);
    
    % Reorder so that the next dimension to be interpolated is pushed to
    % the end.  
    varargout{i-1} = permute(v, odr); 
    vsize(2:nd+1) = vsize([nd+1,2:nd]);
end

if AUTOGRID
    [~,v,l,k] = unmkpp(spline(1:size(y,1), reshape(varargout{1}, ...
            coder.internal.prodsize(varargout{1},'below',nd+1), vsize(nd+1)) ));
else
    [~,v,l,k] = unmkpp(spline(varargin{1}, reshape(varargout{1}, ...
            coder.internal.prodsize(varargout{1},'below',nd+1), vsize(nd+1)) ));
end

vsize(nd+1) = l*k; 
v = reshape(v, vsize);
ppOut = permute(v, odr); 
%--------------------------------------------------------------------------

function sz = value_size(nd, y)

szy = size(y);
sz = coder.nullcopy(zeros(1, nd+1, 'like', szy));

for k = 1:nd
    sz(k+1) = szy(k);
end

assert(coder.internal.ndims(y) >= nd);

sz(1) = coder.internal.prodsize(y,'above',nd);

