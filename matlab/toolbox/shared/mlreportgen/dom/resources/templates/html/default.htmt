<!doctype html>
<html>
<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>Report Template</title>
    <style>/*<![CDATA[*/ 
form.Hole {
  font-size: x-small;
  color: #3333ff;
  font-family: "Courier New",Courier,monospace;
  font-weight: bold;
  padding-right: 2px;
  padding-left: 4 px;
}

div.Hole {
  font-size: x-small;
  color: #3333ff;
  font-family: "Courier New",Courier,monospace;
  font-weight: bold;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-right: 2px;
  padding-left: 8px;
  border-radius: 5px;
  background: #FFF482;
  box-shadow: 0 0 0 2px #FFF482;
}

span.Hole {
  font-size: x-small;
  color: #3333ff;
  font-family: "Courier New",Courier,monospace;
  font-weight: bold;
  padding-top: 2px;
  padding-bottom: 2px;
  padding-right: 2px;
  padding-left: 8px;
  border-radius: 5px;
  background: #FFF482;
  box-shadow: 0 0 0 2px #FFF482;
}

span.HoleId {
  font-size: small;
}

span.HoleDesc {
  margin-left: 5px;
  padding-left: 5px;
  border-style: dotted;
  border-width: 1px;
}

hole::before {
	content: " " attr(id) " ";
	font-family: "Courier New",Courier,monospace;
	font-size: 10pt;
	font-weight: bold;
}

hole {
  display:block;
  font-size: x-small;
  color: #3333ff;
  font-family: "Courier New",Courier,monospace;
  font-weight: bold;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-right: 2px;
  padding-left: 8px;
  border-radius: 5px;
  background: #FFF482;
  box-shadow: 0 0 0 2px #FFF482;
}

p hole {
  display:inline;
  font-size: x-small;
  color: #3333ff;
  font-family: "Courier New",Courier,monospace;
  font-weight: bold;
  padding-top: 2px;
  padding-bottom: 2px;
  padding-right: 2px;
  padding-left: 8px;
  border-radius: 5px;
  background: #FFF482;
  box-shadow: 0 0 0 2px #FFF482;
}

span hole {
  display:inline;
  font-size: x-small;
  color: #3333ff;
  font-family: "Courier New",Courier,monospace;
  font-weight: bold;
  padding-top: 2px;
  padding-bottom: 2px;
  padding-right: 2px;
  padding-left: 8px;
  border-radius: 5px;
  background: #FFF482;
  box-shadow: 0 0 0 2px #FFF482;
}

h1 hole {
  display:inline;
  font-size: x-small;
  color: #3333ff;
  font-family: "Courier New",Courier,monospace;
  font-weight: bold;
  padding-top: 2px;
  padding-bottom: 2px;
  padding-right: 2px;
  padding-left: 8px;
  border-radius: 5px;
  background: #FFF482;
  box-shadow: 0 0 0 2px #FFF482;
}

h2 hole {
  display:inline;
  font-size: x-small;
  color: #3333ff;
  font-family: "Courier New",Courier,monospace;
  font-weight: bold;
  padding-top: 2px;
  padding-bottom: 2px;
  padding-right: 2px;
  padding-left: 8px;
  border-radius: 5px;
  background: #FFF482;
  box-shadow: 0 0 0 2px #FFF482;
}

h3 hole {
  display:inline;
  font-size: x-small;
  color: #3333ff;
  font-family: "Courier New",Courier,monospace;
  font-weight: bold;
  padding-top: 2px;
  padding-bottom: 2px;
  padding-right: 2px;
  padding-left: 8px;
  border-radius: 5px;
  background: #FFF482;
  box-shadow: 0 0 0 2px #FFF482;
}

h4 hole {
  display:inline;
  font-size: x-small;
  color: #3333ff;
  font-family: "Courier New",Courier,monospace;
  font-weight: bold;
  padding-top: 2px;
  padding-bottom: 2px;
  padding-right: 2px;
  padding-left: 8px;
  border-radius: 5px;
  background: #FFF482;
  box-shadow: 0 0 0 2px #FFF482;
}

h5 hole {
  display:inline;
  font-size: x-small;
  color: #3333ff;
  font-family: "Courier New",Courier,monospace;
  font-weight: bold;
  padding-top: 2px;
  padding-bottom: 2px;
  padding-right: 2px;
  padding-left: 8px;
  border-radius: 5px;
  background: #FFF482;
  box-shadow: 0 0 0 2px #FFF482;
}

h6 hole {
  display:inline;
  font-size: x-small;
  color: #3333ff;
  font-family: "Courier New",Courier,monospace;
  font-weight: bold;
  padding-top: 2px;
  padding-bottom: 2px;
  padding-right: 2px;
  padding-left: 8px;
  border-radius: 5px;
  background: #FFF482;
  box-shadow: 0 0 0 2px #FFF482;
}

dptemplate::before{
  content: "" attr(name) "";
  font-family: "Courier New",Courier,monospace;
  font-weight: bold;
  color: #3333ff;
}

dptemplate {
  margin-bottom: 4pt;
  margin-top: 4pt;
  border-style:dotted;
  border-width:thin;
  display:block;
  background: #E6E6E6;
}

@import url(hole.css);
@import url(docpart_templates.css);

ol.toc > li {
  list-style:none;
}

ol.loc > li {
  list-style:none;
}

table {
  border-collapse:collapse;
  border-color:#000000;
}

ttable.ReportGrid {
  color: rgb(0,0,0);
  border: 1px solid black;
  border-collapse:collapse;
}

thead.ReportGrid {
  border: 1px solid black;
  font-weight:bold;
}


th.ReportGrid {
  border: 1px solid black;
  font-weight:bold;
  padding:5px;
}

tr.ReportGrid {
  margin-left: 2%;
}

td.ReportGrid {
  border: 1px solid black;
  padding:5px;
  text-align:center;
}

ol.toc {
  /*counter-reset: numsection;*/
  list-style-type: none;
  padding-left: 32px;
}

ol.toc > li {
  /*counter-increment: numsection;*/
  text-indent: -12px;
  padding-left: 12px;
}

ol.toc > li > * {
  text-indent: 0;
}

ol.loc {
  /*counter-reset: numsection;*/
  list-style-type: none;
  padding-left: 32px;
}

ol.loc > li {
  /*counter-increment: numsection;*/
  text-indent: -12px;
  padding-left: 12px;
}

ol.loc > li > * {
  text-indent: 0;
}

a.toc_sec_title::before {
  /*content: counters(numsection, ".") ". ";*/
  font-weight: bold;
}

a.loc_sec_title::before {
  /*content: counters(numsection, ".") ". ";*/
  font-weight: bold;
}

a.loc_sec_title{
  color:blue;
}

a.toc_no_title {
  font-style: italic;
}

table.rgMATLABTable {
    text-align: center;
    border: none;
}
table.rgMATLABTable th p {
    padding: 0 0 0.03in 0;
    margin: 0 0 0 0;
}
table.rgMATLABTable th {
    font-weight: bold;
    padding: 0 0.04in 0.05in 0.04in;
}
table.rgMATLABTable td p {
    padding: 0 0 0 0;
    margin: 0 0 0 0;
}
table.rgMATLABTable td {
    padding: 0 0.04in 0 0.04in;
}

/* Styles for TOC sidebar */

body {
    margin: 0;
}

.wrapper-sidebar {
    height: 100%;
    width: 200px;
    background-color: #fff;
    position: fixed!important;
    display: none;
    z-index: 5;
    overflow: auto;
    word-break: break-all;
}

.sidebar-animate-left {
    position: relative;
    animation: animateleft 0.4s;
}

@keyframes animateleft {
    from {
        left: -300px;
        opacity: 0;
    }
    to {
        left: 0;
        opacity: 1;
    }
}

.overlay {
    position: fixed;
    display: none;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.2);
    z-index: 2;
}

.animate-opacity {
    animation: opac 0.8s;
}

@keyframes opac {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}

.sidebar-button {
    border: none;
    display: inline-block;
    padding: 8px 16px;
    font-size: 24px!important;
    vertical-align: middle;
    overflow: hidden;
    text-decoration: none;
    color: inherit;
    background-color: inherit;
    text-align: center;
    cursor: pointer;
    white-space: nowrap;
    position: fixed;
}

.sidebar-button:hover {
    color: #000!important;
    background-color: #ccc!important;
}

.container {
    padding: 0.01em 16px 16px 60px;
}

.current-sidebar-item {
    background-color: rgb(247, 175, 175);
}

.collapsible {
    cursor: pointer;
}

.collapsible:hover td {
    background-color: #f9f9f9!important;
}

/*]]>*/</style>
    <script>
        //<![CDATA[
var cssrule;
(function (cssrule) {

    function createStyleSheet() {
        var style = document.createElement("style");

        // Add a media (and/or media query) here if you'd like!
        // style.setAttribute("media", "screen")
        // style.setAttribute("media", "@media only screen and (max-width : 1024px)")

        // WebKit hack :(
        style.appendChild(document.createTextNode(""));

        // Add the <style> element to the page
        document.head.appendChild(style);

        return style.sheet;
    }

    function addCSSRule(selector, rules, index) {
        if (document.styleSheets) {
            var sheet = createStyleSheet();
            if (sheet) {
                if (sheet.insertRule) {
                    return sheet.insertRule(selector + " {" + rules + "}", index);
                }
                else {
                    return sheet.addRule(selector, rules, index);
                }
            }
        }
        return null;
    }
    cssrule.addCSSRule = addCSSRule;

})(cssrule || (cssrule = {}));        
        //]]>
    </script>
  
    <script>
      //<![CDATA[
var sidebar;
(function (sidebar) {

    function createSidebar() {
        // Get all the body content now, this will exclude TOC/LOC. Wrap them in container div
        var contentWrapper = document.createElement('div');
        contentWrapper.className = 'container';

        // Move the body's children into this wrapper and then append wrapper to the body
        while (document.body.firstChild) {
            contentWrapper.appendChild(document.body.firstChild);
        }
        document.body.appendChild(contentWrapper);

        // Add button to open side bar
        var sidebar_button = document.createElement('button');
        sidebar_button.innerHTML = '&#9776';
        sidebar_button.className = 'sidebar-button';

        // Add mouse events to open and close sidebar
        sidebar_button.addEventListener("mouseover", function () {
            openSidebar();

            highlightSelectedEntry();

            var sideBar = document.getElementById("Sidebar");
            sideBar.addEventListener("mouseleave", closeSidebar);
        });

        // Add touch events to open and close Sidebar
        sidebar_button.addEventListener("touchstart", function () {
            openSidebar();

            highlightSelectedEntry();

            var overlay = document.getElementById("SidebarOverlay");
            overlay.addEventListener("touchstart", closeSidebar);
        });

        contentWrapper.parentNode.insertBefore(sidebar_button, contentWrapper);

        // Add div for overlay
        var overlayDiv = document.createElement('div');
        overlayDiv.id = 'SidebarOverlay';
        overlayDiv.className = 'overlay animate-opacity';
        sidebar_button.parentNode.insertBefore(overlayDiv, sidebar_button);

        var sidebarWrapper = document.createElement('div');
        sidebarWrapper.id = 'Sidebar';
        sidebarWrapper.className = 'wrapper-sidebar sidebar-animate-left';
        overlayDiv.parentNode.insertBefore(sidebarWrapper, overlayDiv);

        // Function to open sidebar
        function openSidebar() {
            document.getElementById("Sidebar").style.display = "block";
            document.getElementById("SidebarOverlay").style.display = "block";
        }

        // Function to close sidebar
        function closeSidebar() {
            document.getElementById("Sidebar").style.display = "none";
            document.getElementById("SidebarOverlay").style.display = "none";
        }

        // Function to highlight the selected entry in the Sidebar
        function highlightSelectedEntry() {
            var sidebarItemList = document.getElementsByClassName('sidebar_sec_title');
            for (var i = 0; i < sidebarItemList.length; i++) {
                sidebarItemList[i].addEventListener('click', function (event) {
                    for (var j = 0; j < sidebarItemList.length; j++) {
                        sidebarItemList[j].classList.remove('current-sidebar-item');
                    }
                    event.target.classList.add('current-sidebar-item');
                });
            }
        }
    }
    sidebar.createSidebar = createSidebar;

    function apppendData(data) {
        var sidebarWrapper = document.getElementById("Sidebar");
        sidebarWrapper.appendChild(data);
    }
    sidebar.apppendData = apppendData;

})(sidebar || (sidebar = {}));
    
      //]]>
    </script>

    <script>
      //<![CDATA[
var loc;
(function (loc) {

    function getLOCElements(root, streamName) {
        var str_prefix = streamName + "_loc_caption_id";
        count = 1;
       
        var ol = document.createElement("ol");
        ol.className = "loc";     

        var h4 = document.createElement("h4");
        h4.textContent = "List of " + streamName[0].toUpperCase() +  streamName.slice(1) + "s";
        ol.appendChild(h4);
        
        var captions = document.getElementsByClassName("an_" + streamName);
        for (var i = 0; i < captions.length; i++) {
            var node = captions[i];
            var id = str_prefix + count;
            count = count + 1;
            node.parentElement.id = id;
            var li = document.createElement("li");
            var title = document.createElement("a");
            title.className = "loc_sec_title sidebar_sec_title";

            title.textContent = node.parentElement.textContent;
            title.href = "#" + id;

            title.addEventListener("click", function (event) {
                //event.preventDefault();
                node.scrollIntoView();
            }, false);

            li.appendChild(title);
            ol.appendChild(li);
        }
        return ol;
    }
    loc.getLOCElements = getLOCElements;

})(loc || (loc = {}));

    
        //]]>
    </script>
  
    <script>
        //<![CDATA[
var toc;
(function (toc) {
    var showDetails = false;

    function createOutline(outline, levels, level) {
        if (level <= levels) {
        var ol = document.createElement("ol");
        ol.className = "toc";
        if(level === 1){
            var h4 = document.createElement("h4");
            h4.textContent = "Table of Contents";
            ol.appendChild(h4);
        }
        for (var i = 0; i < outline.length; i++) {
                ol.appendChild(createSection(outline[i], levels, level));
        }
        return ol;
    }
        return null;
    }
    toc.createOutline = createOutline;

    function createSection(section, levels, level) {
        var li = document.createElement("li");

        var title = document.createElement("a");
        title.className = "toc_sec_title sidebar_sec_title";
        li.appendChild(title);

        if (section.heading === null) {
            switch (section.associatedNodes[0].nodeName.toLowerCase()) {
                case "blockquote":
                    title.textContent = "Quoted content";
                    break;
                case "body":
                    title.textContent = "Document";
                    break;
                case "details":
                    title.textContent = "Widget";
                    break;
                case "fieldset":
                    title.textContent = "Form controls";
                    break;
                case "figure":
                    title.textContent = "Figure";
                    break;
                case "td":
                    title.textContent = "Data cell";
                    break;
                case "article":
                    title.textContent = "Article";
                    break;
                case "aside":
                    title.textContent = "Aside";
                    break;
                case "nav":
                    title.textContent = "Navigation";
                    break;
                case "section":
                    title.textContent = "Section";
                    break;
            }
            title.className += "toc_no_title";
        } else {
            title.textContent = section.heading.text;
        }

        var node = section.associatedNodes[0];
        if ((node.sectionType !== 1 && node.sectionType !== 2) ||
            (node.nodeName.toLowerCase() === "body")) {
            node = section.heading;
        }
        title.href = "#" + node.id;

        title.addEventListener("click", function (event) {
            event.preventDefault();
            node.scrollIntoView();
        }, false);

        var nextlevel = createOutline(section.childSections, levels, level+1);
        if (nextlevel) {
            li.appendChild(nextlevel);
        }
        return li;
    }

    function Section() {
        this.parentSection = null;
        this.childSections = [];
        this.firstChild = null;
        this.lastChild = null;
        this.appendChild = function (section) {
            section.parentSection = this;
            this.childSections.push(section);
            if (this.firstChild === null) {
                this.firstChild = section;
            }
            this.lastChild = section;
        };

        this.heading = null;

        this.associatedNodes = [];
    }
    toc.Section = Section;

    function HTMLOutline(root) {
        var currentOutlinee = null;

        var currentSection = null;

        var stack = { "lastIndex": -1, "isEmpty": null, "push": null, "pop": null, "top": null };
        stack.isEmpty = function () {
            return stack.lastIndex === -1;
        };
        stack.push = function (e) {
            stack[++stack.lastIndex] = e;
            stack.top = e;
        };
        stack.pop = function () {
            var e = stack.top;
            delete stack[stack.lastIndex--];
            stack.top = stack[stack.lastIndex];
            return e;
        };

        function enter(node) {
            if (isElement(node)) {
                if (!stack.isEmpty() && (isHeadingElement(stack.top) || isHidden(stack.top))) {
                } else if (isHidden(node)) {
                    stack.push(node);
                } else if (isSectioningContentElement(node) || isSectioningRootElement(node)) {
                    if (currentOutlinee !== null) {
                        stack.push(currentOutlinee);
                    }
                    currentOutlinee = node;
                    currentSection = new Section();
                    associateNodeWithSection(currentOutlinee, currentSection);
                    currentOutlinee.appendSection(currentSection);
                } else if (currentOutlinee === null) {
                } else if (isHeadingElement(node)) {
                    if (currentSection.heading === null)
                        currentSection.heading = node;
else if (currentOutlinee.lastSection.heading === null || node.rank >= currentOutlinee.lastSection.heading.rank) {
                        currentSection = new Section();
                        currentSection.heading = node;
                        currentOutlinee.appendSection(currentSection);
                    } else {
                        var candidateSection = currentSection;
                        do {
                            if (node.rank < candidateSection.heading.rank) {
                                currentSection = new Section();
                                currentSection.heading = node;
                                candidateSection.appendChild(currentSection);
                                break;
                            }
                            var newCandidate = candidateSection.parentSection;
                            candidateSection = newCandidate;
                        } while(true);
                    }
                    stack.push(node);
                }
            }
        }

        function exit(node) {
            if (isElement(node)) {
                if (!stack.isEmpty() && node === stack.top) {
                    stack.pop();
                } else if (!stack.isEmpty() && (isHeadingElement(stack.top) || isHidden(stack.top))) {
                } else if (!stack.isEmpty() && isSectioningContentElement(node)) {
                    currentOutlinee = stack.pop();
                    currentSection = currentOutlinee.lastSection;
                    for (var i = 0; i < node.sectionList.length; i++) {
                        currentSection.appendChild(node.sectionList[i]);
                    }
                } else if (!stack.isEmpty() && isSectioningRootElement(node)) {
                    currentOutlinee = stack.pop();
                    currentSection = currentOutlinee.lastSection;
                    while (currentSection.childSections.length > 0) {
                        currentSection = currentSection.lastChild;
                    }
                } else if (isSectioningContentElement(node) || isSectioningRootElement(node)) {
                    currentOutlinee = null;
                    currentSection = null;
                }
            }
            if (node.associatedSection === null && currentSection !== null) {
                associateNodeWithSection(node, currentSection);
            }
        }

        function associateNodeWithSection(node, section) {
            section.associatedNodes.push(node);
            node.associatedSection = section;
        }

        function isElement(node) {
            return node.nodeType === 1;
        }

        function isHidden(node) {
            return node.hidden;
        }

        function isSectioningContentElement(node) {
            return node.sectionType === 1;
        }

        function isSectioningRootElement(node) {
            return node.sectionType === 2;
        }

        function isHeadingElement(node) {
            return node.rank !== undefined;
        }

        function extend(node) {
            if (node.nodeType === 1) {
                switch (node.nodeName.toLowerCase()) {
                    case "blockquote":
                    case "body":
                    case "details":
                    case "dialog":
                    case "fieldset":
                    case "figure":
                    case "td":
                        extendSectioningRootElement(node);
                        break;
                    case "article":
                    case "aside":
                    case "nav":
                    case "section":
                        extendSectioningContentElement(node);
                        break;
                    case "h1":
                    case "h2":
                    case "h3":
                    case "h4":
                    case "h5":
                    case "h6":
                        extendHeadingElement(node);
                        break;
                    case "hgroup":
                        extendHeadingGroupElement(node);
                        break;
                    default:
                        extendNode(node);
                }
            } else
                extendNode(node);
        }

        function extendNode(node) {
            node.associatedSection = null;
        }

        function extendSectioningElement(node) {
            extendNode(node);
            node.sectionList = [];
            node.firstSection = null;
            node.lastSection = null;

            node.appendSection = function (section) {
                this.sectionList.push(section);
                if (this.firstSection === null) {
                    this.firstSection = section;
                }
                this.lastSection = section;
            };
        }

        function extendSectioningContentElement(node) {
            extendSectioningElement(node);
            node.sectionType = 1;
        }

        function extendSectioningRootElement(node) {
            extendSectioningElement(node);
            node.sectionType = 2;
        }

        function extendHeadingContentElement(node) {
            extendNode(node);
            Object.defineProperty(node, "depth", {
                "get": function () {
                    var section = node.associatedSection;
                    var depth = 1;
                    if (section !== null) {
                        while (section = section.parentSection)
                            ++depth;
                    }
                    return depth;
                },
                "configurable": true,
                "enumerable": true
            });
        }

        function extendHeadingElement(node) {
            extendHeadingContentElement(node);
            node.rank = -parseInt(node.nodeName.charAt(1));
            node.text = node.textContent;
        }

        function extendHeadingGroupElement(node) {
            extendHeadingContentElement(node);

            for (var i = 1; i <= 6; i++) {
                var h = node.getElementsByTagName("h" + i);
                if (h.length > 0) {
                    node.rank = -i;
                    node.text = h[0].textContent;
                    break;
                }
            }

            if (node.rank === undefined) {
                node.rank = -1;
                node.text = "";
            }
        }

        var node = root;
        start:
        while (node) {
            extend(node);
            enter(node);
            if (node.firstChild) {
                node = node.firstChild;
                continue start;
            }
            while (node) {
                exit(node);
                if (node === root) {
                    break start;
                }
                if (node.nextSibling) {
                    node = node.nextSibling;
                    continue start;
                }
                node = node.parentNode;
            }
        }
    }
    toc.HTMLOutline = HTMLOutline;

})(toc || (toc = {}));
        //]]>
    </script>

    <script>
          //<![CDATA[
          var util;
  (function (util) {

      function autoNumber() {
      
            function alphabetize(n) {
                var ordA = 'A'.charCodeAt(0);
                var ordZ = 'Z'.charCodeAt(0);
                var len = ordZ - ordA + 1;
    
                var s = "";
                while(n >= 0) {
                    s = String.fromCharCode(n % len + ordA-1) + s;
                    n = Math.floor(n / len) - 1;
                }
                return s;
            }
    
            function romanize (num) {
            if (!+num){
                return false;
            }           
            var	digits = String(+num).split(""),
            key = ["","C","CC","CCC","CD","D","DC","DCC","DCCC","CM",
                "","X","XX","XXX","XL","L","LX","LXX","LXXX","XC",
                "","I","II","III","IV","V","VI","VII","VIII","IX"],
            roman = "",
            i = 3;
            while (i--) {
                roman = (key[+digits.pop() + (i * 10)] || "") + roman;
            }   
            return Array(+digits.join("") + 1).join("M") + roman;
        }
        
        function formatNumber(number, format) {
            var formattedNumber =  "";
            switch (format) {
                case "n":
                case "N":
                    formattedNumber = number.toString();
                break;
                case "a":
                    formattedNumber = alphabetize(number).toLowerCase();
                    break;
                case "A":
                    formattedNumber = alphabetize(number);
                    break;
                case "i":
                    formattedNumber = romanize(number).toLowerCase();
                break;
                case "I":
                    formattedNumber = romanize(number);
                break;
                default:
                    formattedNumber = number.toString();
            }
            return formattedNumber;
        }
          
      var nodes = document.querySelectorAll("h1, h2, h3, h4, h5, h6, autonumber");
      var h1Counter = 0;
      var h2Counter = 0;
      var h3Counter = 0;
      var h4Counter = 0;
      var h5Counter = 0;
      var h6Counter = 0;
      var dict = {};
      for (var i = 0; i < nodes.length; i++) {
          node = nodes[i];
          switch (node.nodeName.toLowerCase()) {
              case "h1":
                  h1Counter = h1Counter + 1;
                  h2Counter = 0;
                  dict["figure"] = 0;
                  dict["table"] = 0;
                  break;
              case "h2":
                  h2Counter = h2Counter + 1;
                  h3Counter = 0;
                  break;
              case "h3":
                  h3Counter = h3Counter + 1;
                  h4Counter = 0;              
                  break;
              case "h4":
                  h4Counter = h4Counter + 1;
                  h5Counter = 0;
                  break;
              case "h5":
                  h5Counter = h5Counter + 1;
                  h6Counter = 0;
                  break;
              case "h6":
                  h6Counter = h6Counter + 1;
                  break;
              case "autonumber":
                  var counterName = node.getAttribute("stream-name");
                  var number = null;
                  switch (counterName.toLowerCase()) {
                      case "h1":
                          number = h1Counter;
                          break;
                      case "h2":
                          number = h2Counter;
                          break;
                      case "h3":
                          number = h3Counter;             
                          break;
                      case "h4":
                          number = h4Counter;
                          break;
                      case "h5":
                          number = h5Counter;
                          break;
                      case "h6":
                          number = h6Counter;
                          break;
                  }
                  
                  var resetCtrs = node.parentElement.style["counter-reset"].split(" ");
                  for(reset_idx = 0; reset_idx < resetCtrs.length - 1; reset_idx++){
                     dict[resetCtrs[reset_idx]] = 0;
                  }

                  if (number == null) {
                      if (!dict[counterName])
                          dict[counterName] = 0;

                      var incrementCtrs = node.parentElement.style["counter-increment"].split(" ");
                      for(incr_idx = 0; incr_idx < incrementCtrs.length - 1; incr_idx++){
                        if (incrementCtrs[incr_idx] == counterName) {
                            dict[incrementCtrs[incr_idx]] += 1;
                        }
                      }        

                      number = dict[counterName];
                  }
                  var format = node.getAttribute("format");
                  format = format ? format : "n";
                  node.innerHTML = formatNumber(number, format);
                  break
              default:
                  number = "";
          }
          
          
      } 
    }
    
    util.autoNumber = autoNumber;

    function renameSpanToAutonumber() {
        var nodes = document.querySelectorAll("span.an_sect1, span.an_figure, span.an_table, span[stream-name]");
        for (var i = 0; i < nodes.length; i++) {
          node = nodes[i];
          var streamName = node.getAttribute("stream-name");
          if(!streamName){
            switch(node.className){
                case "an_sect1":
                    streamName = "h1";
                    break;
                case "an_table":
                    streamName = "table";
                    break;
                case "an_figure":
                    streamName = "figure";
                    break;
            }
          }
          node.setAttribute("stream-name", streamName);
          node.outerHTML = node.outerHTML.replace(/span/g,"autonumber");
          
        }
    }
    util.renameSpanToAutonumber = renameSpanToAutonumber;

    
  })(util || (util = {}))
                 //]]>
    </script>
    
<script>
   //<![CDATA[
var stIsIE = false;

sorttable = {
    init: function() {
        // quit if this function has already been called
        if (arguments.callee.done) return;
        // flag this function so we don't do the same thing twice
        arguments.callee.done = true;
        // kill the timer
        if (_timer) clearInterval(_timer);

        if (!document.createElement || !document.getElementsByTagName) return;

        sorttable.DATE_RE = /^(\d\d?)[\/\.-](\d\d?)[\/\.-]((\d\d)?\d\d)$/;

        forEach(document.getElementsByTagName('table'), function(table) {
            if (table.className.search(/\bsortable\b/) != -1) {
                sorttable.makeSortable(table);
            }
        });

    },

    makeSortable: function(table) {
        // Safari doesn't support table.tHead, sigh
        if (table.tHead == null) table.tHead = table.getElementsByTagName('thead')[0];

        // work through each column and calculate its type
        rowsinheader = table.tHead.rows.length;
        headrow = table.tHead.rows[rowsinheader-1].cells;
        for (var i=0; i<headrow.length; i++) {
            // manually override the type with a sorttable_type attribute
            if (!headrow[i].className.match(/\bsorttable_nosort\b/)) { // skip this col
                mtch = headrow[i].className.match(/\bsorttable_([a-z0-9]+)\b/);
                if (mtch) { override = mtch[1]; }
                if (mtch && typeof sorttable["sort_"+override] == 'function') {
                    headrow[i].sorttable_sortfunction = sorttable["sort_"+override];
                } else {
                    headrow[i].sorttable_sortfunction = sorttable.guessType(table,i);
                }
                // make it clickable to sort
                headrow[i].sorttable_columnindex = i;
                headrow[i].sorttable_tbody = table.tBodies[0];
                click_addEvent(headrow[i],"click", sorttable.innerSortFunction = function(e) {

                    if (this.className.search(/\bsorttable_sorted\b/) != -1) {
                        // if we're already sorted by this column, just
                        // reverse the table, which is quicker
                        sorttable.reverse(this.sorttable_tbody);
                        this.className = this.className.replace('sorttable_sorted','sorttable_sorted_reverse');
                        this.removeChild(document.getElementById('sorttable_sortfwdind'));
                        sortrevind = document.createElement('span');
                        sortrevind.id = "sorttable_sortrevind";
                        sortrevind.innerHTML = stIsIE ? '&nbsp<font face="webdings">5</font>' : '&nbsp;&#x25B4;';
                        this.appendChild(sortrevind);
                        return;
                    }
                    if (this.className.search(/\bsorttable_sorted_reverse\b/) != -1) {
                        // if we're already sorted by this column in reverse, just
                        // re-reverse the table, which is quicker
                        sorttable.reverse(this.sorttable_tbody);
                        this.className = this.className.replace('sorttable_sorted_reverse',
                                                                'sorttable_sorted');
                        this.removeChild(document.getElementById('sorttable_sortrevind'));
                        sortfwdind = document.createElement('span');
                        sortfwdind.id = "sorttable_sortfwdind";
                        sortfwdind.innerHTML = stIsIE ? '&nbsp<font face="webdings">6</font>' : '&nbsp;&#x25BE;';
                        this.appendChild(sortfwdind);
                        return;
                    }

                    // remove sorttable_sorted classes
                    theadrow = this.parentNode;
                    forEach(theadrow.childNodes, function(cell) {
                        if (cell.nodeType == 1) { // an element
                            cell.className = cell.className.replace('sorttable_sorted_reverse','');
                            cell.className = cell.className.replace('sorttable_sorted','');
                        }
                    });
                    sortfwdind = document.getElementById('sorttable_sortfwdind');
                    if (sortfwdind) { sortfwdind.parentNode.removeChild(sortfwdind); }
                    sortrevind = document.getElementById('sorttable_sortrevind');
                    if (sortrevind) { sortrevind.parentNode.removeChild(sortrevind); }

                    this.className += ' sorttable_sorted';
                    sortfwdind = document.createElement('span');
                    sortfwdind.id = "sorttable_sortfwdind";
                    sortfwdind.innerHTML = stIsIE ? '&nbsp<font face="webdings">6</font>' : '&nbsp;&#x25BE;';
                    this.appendChild(sortfwdind);

                    // build an array to sort. We "decorate" each row with
                    // the actual sort key, sort based on the sort keys,
                    // and then put the rows back in order which is a lot
                    // faster because you only do getInnerText once per row
                    row_array = [];
                    col = this.sorttable_columnindex;
                    rows = this.sorttable_tbody.rows;
                    for (var j=0; j<rows.length; j++) {
                        row_array[row_array.length] = [sorttable.getInnerText(rows[j].cells[col]), rows[j]];
                    }

                    table = theadrow.parentNode.parentNode;
                    
                    // Get the last row
                    // Check if the table has a footer row
                    const hasFooter = table.tFoot !== null;
                    // Get the last row of the table based on the presence of the footer row
                    if (hasFooter) {
                        // If footer row is present, get the row before the footer row
                        lastRow = table.rows[table.rows.length - 2];
                    } else {
                        // If no footer row, directly get the last row
                        lastRow = table.rows[table.rows.length - 1];
                    }

                    // Get the computed styles for the last row and check
                    // whether it has any bottom border set. If the last
                    // row doesn't have any bottom border set, then we need
                    // to check wether the table has any bottom border set.
                    // If the table has any bottom border set, we can
                    // apply that setting to the last row's bottom border.
                    tableRowStyles = getComputedStyle(lastRow);
                    lastRowBottomBorderStyle = tableRowStyles.getPropertyValue("border-bottom-style");
                    if (lastRowBottomBorderStyle === "none") {                      
                    tableStyles = getComputedStyle(table);
                    tableBorderBottomStyle = tableStyles.getPropertyValue("border-bottom-style");
                    if (tableBorderBottomStyle !== "none") {                                   
                    tableBorderBottomColor = tableStyles.getPropertyValue("border-bottom-color");
                    tableBorderBottomWidth = tableStyles.getPropertyValue("border-bottom-width");
                    // Update the row style with the extracted values
                    lastRow.style.borderBottomStyle = tableBorderBottomStyle;
                    lastRow.style.borderBottomColor = tableBorderBottomColor;
                    lastRow.style.borderBottomWidth = tableBorderBottomWidth;
                    }}

                    // sort the array
                    row_array.sort(this.sorttable_sortfunction);

                    tb = this.sorttable_tbody;
                    for (var j=0; j<row_array.length; j++) {
                        tb.appendChild(row_array[j][1]);
                    }
                    delete row_array;
                });
            }
        }
    },

    guessType: function(table, column) {
        // guess the type of a column based on its first non-blank row
        sortfn = sorttable.sort_alpha;
        for (var i=0; i<table.tBodies[0].rows.length; i++) {
            text = sorttable.getInnerText(table.tBodies[0].rows[i].cells[column]);
            if (text != '') {
                if (text.match(/^-?[£$¤]?[\d,.]+%?$/)) {
                    return sorttable.sort_numeric;
                }
                // check for a date: dd/mm/yyyy or dd/mm/yy
                // can have / or . or - as separator
                // can be mm/dd as well
                possdate = text.match(sorttable.DATE_RE)
                if (possdate) {
                    // looks like a date
                    first = parseInt(possdate[1]);
                    second = parseInt(possdate[2]);
                    if (first > 12) {
                        // definitely dd/mm
                        return sorttable.sort_ddmm;
                    } else if (second > 12) {
                        return sorttable.sort_mmdd;
                    } else {
                        // looks like a date, but we can't tell which, so assume
                        // that it's dd/mm (English imperialism!) and keep looking
                        sortfn = sorttable.sort_ddmm;
                    }
                }
            }
        }
        return sortfn;
    },

    getInnerText: function(node) {
        // gets the text we want to use for sorting for a cell.
        // strips leading and trailing whitespace.

        if (!node) return "";

        hasInputs = (typeof node.getElementsByTagName == 'function') &&
            node.getElementsByTagName('input').length;

        if (typeof node.textContent != 'undefined' && !hasInputs) {
            return node.textContent.replace(/^\s+|\s+$/g, '');
        }
        else if (typeof node.innerText != 'undefined' && !hasInputs) {
            return node.innerText.replace(/^\s+|\s+$/g, '');
        }
        else if (typeof node.text != 'undefined' && !hasInputs) {
            return node.text.replace(/^\s+|\s+$/g, '');
        }
        else {
            switch (node.nodeType) {
                case 3:
                    if (node.nodeName.toLowerCase() == 'input') {
                        return node.value.replace(/^\s+|\s+$/g, '');
                    }
                case 4:
                    return node.nodeValue.replace(/^\s+|\s+$/g, '');
                    break;
                case 1:
                case 11:
                    var innerText = '';
                    for (var i = 0; i < node.childNodes.length; i++) {
                        innerText += sorttable.getInnerText(node.childNodes[i]);
                    }
                    return innerText.replace(/^\s+|\s+$/g, '');
                    break;
                default:
                    return '';
            }
        }
    },

    reverse: function(tbody) {
        // reverse the rows in a tbody
        newrows = [];
        for (var i=0; i<tbody.rows.length; i++) {
            newrows[newrows.length] = tbody.rows[i];
        }
        for (var i=newrows.length-1; i>=0; i--) {
            tbody.appendChild(newrows[i]);
        }
        delete newrows;
    },

    /* sort functions
    each sort function takes two parameters, a and b
    you are comparing a[0] and b[0] */
    sort_numeric: function(a,b) {
        aa = parseFloat(a[0].replace(/[^0-9.-]/g,''));
        if (isNaN(aa)) aa = 0;
        bb = parseFloat(b[0].replace(/[^0-9.-]/g,''));
        if (isNaN(bb)) bb = 0;
        return aa-bb;
    },
    sort_alpha: function(a,b) {
        if (a[0]==b[0]) return 0;
        if (a[0]<b[0]) return -1;
        return 1;
    },
    sort_ddmm: function(a,b) {
        mtch = a[0].match(sorttable.DATE_RE);
        y = mtch[3]; m = mtch[2]; d = mtch[1];
        if (m.length == 1) m = '0'+m;
        if (d.length == 1) d = '0'+d;
        dt1 = y+m+d;
        mtch = b[0].match(sorttable.DATE_RE);
        y = mtch[3]; m = mtch[2]; d = mtch[1];
        if (m.length == 1) m = '0'+m;
        if (d.length == 1) d = '0'+d;
        dt2 = y+m+d;
        if (dt1==dt2) return 0;
        if (dt1<dt2) return -1;
        return 1;
    },
    sort_mmdd: function(a,b) {
        mtch = a[0].match(sorttable.DATE_RE);
        y = mtch[3]; d = mtch[2]; m = mtch[1];
        if (m.length == 1) m = '0'+m;
        if (d.length == 1) d = '0'+d;
        dt1 = y+m+d;
        mtch = b[0].match(sorttable.DATE_RE);
        y = mtch[3]; d = mtch[2]; m = mtch[1];
        if (m.length == 1) m = '0'+m;
        if (d.length == 1) d = '0'+d;
        dt2 = y+m+d;
        if (dt1==dt2) return 0;
        if (dt1<dt2) return -1;
        return 1;
    }
}

if (document.addEventListener) {
    document.addEventListener("DOMContentLoaded", sorttable.init, false);
}

if (/WebKit/i.test(navigator.userAgent)) {
    var _timer = setInterval(function() {
        if (/loaded|complete/.test(document.readyState)) {
            sorttable.init(); // call the onload handler
        }
    }, 10);
}

/* for other browsers */
window.onload = sorttable.init;

function click_addEvent(element, type, handler) {
    if (element.addEventListener) {
        element.addEventListener(type, handler, false);
    } else {
        // assign each event handler a unique ID
        if (!handler.$$guid) handler.$$guid = click_addEvent.guid++;
        // create a hash table of event types for the element
        if (!element.events) element.events = {};
        // create a hash table of event handlers for each element/event pair
        var handlers = element.events[type];
        if (!handlers) {
            handlers = element.events[type] = {};
            // store the existing event handler (if there is one)
            if (element["on" + type]) {
                handlers[0] = element["on" + type];
            }
        }
        // store the event handler in the hash table
        handlers[handler.$$guid] = handler;
        // assign a global event handler to do all the work
        element["on" + type] = handleEvent;
    }
};
// a counter used to create unique IDs
click_addEvent.guid = 1;

function removeEvent(element, type, handler) {
    if (element.removeEventListener) {
        element.removeEventListener(type, handler, false);
    } else {
        // delete the event handler from the hash table
        if (element.events && element.events[type]) {
            delete element.events[type][handler.$$guid];
        }
    }
};

function handleEvent(event) {
    var returnValue = true;
    // grab the event object (IE uses a global event object)
    event = event || fixEvent(((this.ownerDocument || this.document || this).parentWindow || window).event);
    // get a reference to the hash table of event handlers
    var handlers = this.events[event.type];
    // execute each event handler
    for (var i in handlers) {
        this.$$handleEvent = handlers[i];
        if (this.$$handleEvent(event) === false) {
            returnValue = false;
        }
    }
    return returnValue;
};

function fixEvent(event) {
    // add W3C standard event methods
    event.preventDefault = fixEvent.preventDefault;
    event.stopPropagation = fixEvent.stopPropagation;
    return event;
};
fixEvent.preventDefault = function() {
    this.returnValue = false;
};
fixEvent.stopPropagation = function() {
    this.cancelBubble = true;
}

// array-like enumeration
if (!Array.forEach) { // mozilla already supports this
    Array.forEach = function(array, block, context) {
        for (var i = 0; i < array.length; i++) {
            block.call(context, array[i], i, array);
        }
    };
}

// generic enumeration
Function.prototype.forEach = function(object, block, context) {
    for (var key in object) {
        if (typeof this.prototype[key] == "undefined") {
            block.call(context, object[key], key, object);
        }
    }
};

// character enumeration
String.forEach = function(string, block, context) {
    Array.forEach(string.split(""), function(chr, index) {
        block.call(context, chr, index, string);
    });
};

// globally resolve forEach enumeration
var forEach = function(object, block, context) {
    if (object) {
        var resolve = Object; // default
        if (object instanceof Function) {
            // functions have a "length" property
            resolve = Function;
        } else if (object.forEach instanceof Function) {
            // the object implements a custom forEach method so use that
            object.forEach(block, context);
            return;
        } else if (typeof object == "string") {
            // the object is a string
            resolve = String;
        } else if (typeof object.length == "number") {
            // the object is array-like
            resolve = Array;
        }
        resolve.forEach(object, block, context);
    }
};  
//]]>
    </script>

    <script>
        //<![CDATA[

        var collapsible;
        (function (collapsible) {

            // Function to handle the click event on collapsible rows
            function handleCollapsibleRowClick(event) {
                const currRow = event.target.closest("tr");
                const nextRow = currRow.nextElementSibling;
                if (nextRow) {
                    const tbl = event.target.closest("table");
                    const rows = tbl.rows;

                    // Determine whether we are expanding or collapsing
                    const expanding = nextRow.style.display === "none";
                    if (expanding) {
                        // Expand the rows
                        toggleRows(currRow, rows, true);
                    } else {
                        // Collapse the rows
                        toggleRows(currRow, rows, false);
                    }
                }
            }
            collapsible.handleCollapsibleRowClick = handleCollapsibleRowClick;

            // Function to recursively collapse/expand all the nested rows beneath a given row
            function toggleRows(currRow, rows, expandOrCollapse) {
                const collapseCount = parseInt(currRow.getAttribute('rows-collapse'));
                let nextRowIndex = currRow.rowIndex + 1;
                for (let i = 1; i <= collapseCount && nextRowIndex < rows.length; i++, nextRowIndex++) {
                    const nextRow = rows[nextRowIndex];
                    toggleRowDisplay(nextRow, expandOrCollapse);

                    // If this row is also collapsible, it might have its own nested rows to collapse/expand
                    if (nextRow.classList.contains('collapsible')) {
                        // Recursively toggle its nested rows
                        toggleRows(nextRow, rows, expandOrCollapse);
                    }
                }
            }

            // Function to toggle the display of a row
            function toggleRowDisplay(row, expandOrCollapse) {
                row.style.display = expandOrCollapse ? "table-row" : "none";
            }

        })(collapsible || (collapsible = {}));


        // Add event listener to collapsible table rows
        document.addEventListener("DOMContentLoaded", function() {
            document.querySelectorAll('.collapsible').forEach(function(row) {
                row.addEventListener('click', collapsible.handleCollapsibleRowClick);
            });
        });

        //]]>
    </script>

    <script>
        //<![CDATA[
        function outline() {
            util.renameSpanToAutonumber();
            util.autoNumber();
            var toc_elements = document.querySelectorAll('div#toc, toc');
            var loc_elements = document.querySelectorAll('div#loc, loc');

            var sidebar_display = false;
            if (toc_elements.length != 0 || loc_elements.length != 0){
                sidebar.createSidebar();
            }
            
            if (toc_elements.length != 0) {
                var content = document.body;
                toc.HTMLOutline(content);
                if (content.sectionList) {
                    for (var toc_index = 0; toc_index < toc_elements.length; ++toc_index) {
                        var toc_element = toc_elements[toc_index];
                        var toc_levels = 6;
                        var toc_levels_attribute = toc_element.getAttribute('number-of-levels');
                        if (toc_levels_attribute) {
                            toc_levels = Number(toc_levels_attribute);
                        }
                        toc_element.appendChild(toc.createOutline(content.sectionList, toc_levels, 1));
                    }
                }
                var toc_element = document.querySelector('div#toc, toc');
                //document.body.removeChild(toc_element);
                sidebar.apppendData(toc_element);
            }

            var loc_elements = document.querySelectorAll('div#loc, loc');
            for (var i = 0; i < loc_elements.length; i++) {
                var loc_element = loc_elements[i];
                var content = document.body;
                var streamName = loc_element.getAttribute("an-stream-name");
                sidebar.apppendData(loc.getLOCElements(content, streamName));
            }
        }
        //]]>
    </script>
</head>
<body onload="outline()">
    <div class="Template">
    <!-- below define a template library entry -->
        <div class="TemplateName">
            <span class="TemplateName">ReportTOC</span>
        </div>
        <div class="TemplateBody">
            <div id="toc">
            </div>
        </div>
    </div> 
</body>
</html>
