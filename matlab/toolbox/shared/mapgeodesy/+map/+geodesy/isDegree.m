function tf = isDegree(angleUnit)
%map.geodesy.isDegree True if string matches 'degree' and false if 'radian'
%
%   TF = map.geodesy.isDegree(angleUnit) returns true if angleUnit is a
%   partial match for 'degree' (or 'degrees') and false if angleUnit is a
%   partial match for 'radian' (or 'radians'). If angleUnit matches neither
%   'degrees' or 'radians', an error is thrown.
%
%   Example
%   -------
%   map.geodesy.isDegree('degree')
%   map.geodesy.isDegree('radian')
%
%   Input Argument
%   --------------
%   angleUnit -- Unit of angle string, specified as 'degree' or
%     'radian'. Data Type: char.
%
%   Output Argument
%   ---------------
%   TF -- True/false flag, returned as a logical scalar.

% Copyright 2012-2020 The MathWorks, Inc.

%#codegen

% For efficiency, perform in-depth validation of angleUnit only if we first
% determine that it is a match for neither 'degrees' nor 'radians'. The
% try-catch blocks are in the main function, not the local validateInput
% function, in order to simplify the stack generated by error().

% Additional performance measures: Handle the char vector case first,
% potentially avoiding an expensive call to isStringScalar. But convert
% char vector input to string, because conversion to string followed by
% startsWith is faster than the strncmpi alternative.

    if ischar(angleUnit) && isrow(angleUnit)
        % Within this block, we know that angleUnit is a 1-by-n char
        % vector.  So, it's safe to convert it to a string scalar using
        % string().  And, from isrow, we know that n >= 1, and therefore
        % strlength(angleUnit) > 0.
        angleUnit = string(angleUnit);
        % The following is now true:
        %    isStringScalar(angleUnit) && strlength(angleUnit) > 0
        if startsWith("degrees", angleUnit, 'IgnoreCase', true)
            tf = true;
        elseif startsWith("radians", angleUnit, 'IgnoreCase', true)
            tf = false;
        else
            coder.ignoreCatch
            try %#ok<EMTC>
                validateInput(angleUnit)
            catch e
                throwAsCaller(e)
            end
        end
    elseif isStringScalar(angleUnit) && strlength(angleUnit) > 0
        if startsWith("degrees", angleUnit, 'IgnoreCase', true)
            tf = true;
        elseif startsWith("radians", angleUnit, 'IgnoreCase', true)
            tf = false;
        else
            coder.ignoreCatch
            try %#ok<EMTC>
                validateInput(angleUnit)
            catch e
                throwAsCaller(e)
            end
        end
    else
        coder.ignoreCatch
        try %#ok<EMTC>
            validateInput(angleUnit)
        catch e
            throwAsCaller(e)
        end
    end
end


function validateInput(angleUnit)
% Call validateattributes first, in order to keep the error message
% simple. If we don't do this, validatestring will throw an error
% that includes an additional 'caused by' section, in the event of
% empty, or non-scalar text input.
    validateattributes(angleUnit,{'char','string'},{'nonempty','scalartext'},'','angleUnit')
    validatestring(angleUnit,{'degrees','radians'},'','angleUnit')
end
