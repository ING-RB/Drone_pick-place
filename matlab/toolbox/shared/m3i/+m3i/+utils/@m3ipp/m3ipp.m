
%

%   Copyright 2008 The MathWorks, Inc.

classdef (Sealed=true) m3ipp < handle
    properties (SetAccess='private')
        % Specifies the output format of the pretty printer
        format = 'text';
        % Specifies whether the output should be sorted
        sort = true;
        % Specifies whether the output should show empty properties
        showEmpty = true;
        % Specifies whether to show values that are unchanged from default
        showDefaults = true;
        % Specifies whether to just show name or the fully qualified name
        showQualifiedName = false;
        % Specifies the location where the output should be sent to
        outputFile = 'pp.html';
        % Counter used to generate unique XML id attributes
        counter = 0;
        % Used to alternate the current CSS style to get striped output
        type = 'tic';
        % Normalized (as a URI) location of the images used by the
        % pretty printer
        loc = m3i.utils.m3ipp.matlab_location ('toolbox/sam/m3i/+m3i/+utils/@m3ipp');
    end

    methods (Access='public')
        function this = m3ipp (format, sort, showEmpty, showDefaults, showQualifiedName, outputFile)
            this.format = format;
            this.sort = sort;
            this.showEmpty = showEmpty;
            this.showDefaults = showDefaults;
            this.showQualifiedName = showQualifiedName;
            this.outputFile = outputFile;
        end

        function output = pretty_print (this, obj)
            indent = [];
            s = this.m3ipp_internal (obj, indent);
            if (strcmpi (this.format, 'html'))
                [fid, errMsg] = fopen (this.outputFile, 'w');
                if (fid == -1)
                    fileName = regexprep(this.outputFile, filesep, '/');
                    ME = MException ('M3I:FileOpenError',...
                        [fileName ' : ' errMsg]);
                    throw (ME);
                end
                name = m3i.utils.m3ipp.getObjectName (obj);
                output = [sprintf(this.prepare_html(name)) sprintf(s) ...
                    sprintf('</body>\n</html>')];
                fprintf (fid, '%s', output);
                fclose (fid);
            else
                output = sprintf(s);
            end
        end
    end

    methods (Access='private')
        function pp = m3ipp_internal (this, obj, indent)
            mc = obj.getMetaClass;
            if this.showQualifiedName
                mcName = mc.qualifiedName;
            else
                mcName = mc.name;
            end
            pp = this.format_header (obj, mcName, indent);
            indent = [indent '  '];
            mcattrs = mc.ownedAttribute;
            if (this.sort)
                attrs = this.attrSort(mcattrs);
            else
                attrs = cell(mcattrs.size, 1);
                for i = 1:mcattrs.size
                    attrs{i} = mcattrs.at(i);
                end
            end
            for i = 1:length(attrs)
                attr = attrs{i};
                prop = M3I.ImmutableProperty.cast(attr);
                if prop.isvalid && ~prop.isDerived() && prop.redefinedProperty.isEmpty
                    if M3I.isM3IHidden
                        owner = prop.owner;
                        if owner.package == M3I.MetaPackage
                            continue;
                        end
                    end
                    if (strcmp (this.type, 'tic'))
                        this.type = 'toc';
                    elseif (strcmp (this.type, 'toc'))
                        this.type = 'tic';
                    end
                    childObjs = obj.get(prop);
                    if (childObjs.size == 0 && this.showEmpty)
                        if ~this.showDefaults && isempty(prop.default)
                            continue;
                        end
                        output = this.format_emptyvalue (prop.name, indent);
                        pp = [pp output];
                    else
                        if (childObjs.size > 1)
                            output = this.format_multivalue (prop.name, indent);
                            pp = [pp output];
                        end
                        for j = 1:childObjs.size
                            childObj = childObjs.at(j);
                            if(~childObj.isvalid())
                                msg = sprintf('In object %s : %s with property %s index %d is invalid', obj.toString, mc.name, prop.name, j);
                                disp(msg);
                                continue;
                            end
                            childClassObj = M3I.ImmutableClassObject.cast(childObj);
                            if (childClassObj.isvalid && prop.isComposite)
                                if prop.type.isSpecializationOf(M3I.FactoryObject.MetaClass)
                                    continue;
                                end
                                pp = [pp this.m3ipp_internal(childClassObj, ...
                                    [indent '  '])];
                            else
                                [value, id] = this.get_univalue(childObj);
                                if ~this.showDefaults && strcmp(prop.default, value)
                                    continue;
                                end
                                output = this.format_univalue (prop.name,...
                                    value, id, indent);
                                pp = [pp output];
                            end
                        end
                        if (childObjs.size > 1)
                            % Close the current <div>
                            output = this.format_footer (this.format);
                            pp = [pp output];
                        end
                    end
                end
            end
            % Close the top-level <div>
            output = this.format_footer (this.format);
            pp = [pp output];
        end


        function output = format_multivalue (this, name, indent)
            if (strcmpi(this.format, 'text'))
                output = [indent name '\n'...
                    indent char(ones (1, length(name)) * '-') '\n'];
            else
                this.counter = this.counter + 1;
                cVal = sprintf ('%d', this.counter);
                output = ['<div class="trigger"\n'...
                    '  onclick="showBranch(''propBranch' cVal ''');\n'...
                    '           swapImage(''property' cVal ''')">\n'...
                    '<span class="multiValuedProperty">\n'...
                    '<img src="' this.loc 'closed.gif" id="property' cVal ...
                    '" alt=""/>\n'...
                    '   ' name '\n'...
                    '</span>\n'...
                    '</div>\n'...
                    '<div class="branch" id="propBranch' cVal '">\n'];
            end
        end

        function output = format_header (this, obj, metaName, indent)
            name = m3i.utils.m3ipp.getObjectName (obj);
            if (strcmpi(this.format, 'text'))
                header = [name ' : ' metaName ];
                output = [indent header '\n' ...
                    indent char(ones(1,length(header))* '-') '\n'];
            else
                this.counter = this.counter + 1;
                cVal = sprintf ('%d', this.counter);
                objId = obj.toString;
                output = ['<div class="trigger"\n'...
                    '  onclick="showBranch(''branch' cVal ''');\n'...
                    '           swapImage(''image' cVal ''')">\n'...
                    '<a id="m3iObj' objId '">\n'...
                    '   <span class="m3iObj">\n'...
                    '   <img src="' this.loc 'closed.gif" id="image' cVal '"'...
                    '      alt=""/>\n'...
                    '    [' objId '] ' name ' : ' metaName '\n'...
                    '</span>\n'...
                    '</a>\n'...
                    '</div>\n'...
                    '<div class="branch" id="branch' cVal '">\n'];
            end
        end

        function output = format_emptyvalue (this, name, indent)
            if (strcmpi(this.format, 'text'))
                output = [indent name ' = []\n'];
            else
                output = ['<div class="' this.type '">\n'...
                    '<img src="' this.loc 'open.gif" alt=""/>\n'...
                    '<span class="uniValuedProperty">' name '</span>\n'...
                    '<span class="empty">&lt;empty&gt;</span><br/>\n'...
                    '</div>\n'];
            end
        end
        
        function [value, id] = get_univalue (~, obj)
            if(~obj.isvalid())
                error('sam:sam:sam:m3i:m3ipp:format_univalueObjInvalid', 'in format_univalue function obj being passed in is invalid');
            end
            classObj = M3I.ImmutableClassObject.cast(obj);
            if (classObj.isvalid)
                value = m3i.utils.m3ipp.getObjectName(classObj);
                id = ['<a href="#m3iObj' classObj.toString '">'...
                    value '</a>\n'];
            else
                value = obj.toString;
                id = value;
            end
        end

        function output = format_univalue (this, name, value, id, indent)
            if (strcmpi(this.format, 'text'))
                output = [indent name ' = ' value '\n'];
            else
                output = ['<div class="' this.type '">\n'...
                    '<img src="' this.loc 'open.gif" alt=""/>\n'...
                    '<span class="uniValuedProperty">' name '</span>\n'...
                    '<span class="value">' id '</span><br/>\n'...
                    '</div>\n'];
            end
        end

        function output = prepare_html (this, name)
            preamble = ['<?xml version="1.0" encoding="utf-8"?>\n'...
                '<!DOCTYPE html\n'...
                '  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"\n'...
                '  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">\n'...
                '<html xmlns="http://www.w3.org/1999/xhtml">\n'...
                '  <head>\n'];
            title = ' <title>%s</title>\n';
            css = [' <style type="text/css">\n'...
                '      body\n'...
                '      {\n'...
                '      font-size: 10pt;\n'...
                '      font-family: Tahoma, Helvetica, Geneva, sans-serif;\n'...
                '      border-style: double;\n'...
                '      border-width: thin\n'...
                '      }\n'...
                '\n'...
                '      h1 {\n'...
                '      text-align: center;\n'...
                '      }\n'...
                '\n'...
                '      .tic {\n'...
                '      background-color: LightGrey;\n'...
                '      border-style: solid;\n'...
                '      border-width: 1px 0px 0px 1px;\n'...
                '      }\n'...
                '\n'...
                '      .toc {\n'...
                '      background-color: white;\n'...
                '      border-style: solid;\n'...
                '      border-width: 1px 0px 0px 1px;\n'...
                '      }\n'...
                '\n'...
                '      .m3iObj {\n'...
                '      border-style: solid;\n'...
                '      border-width: 1px;\n'...
                '      background-color: Lavender;\n'...
                '      font-weight: bold;\n'...
                '      width: 20px;\n'...
                '      }\n'...
                '\n'...
                '      .multiValuedProperty {\n'...
                '      border-style: solid;\n'...
                '      border-width: 1px;\n'...
                '      background-color: LightSkyBlue;\n'...
                '      font-weight: bold;\n'...
                '      width: 20px;\n'...
                '      }\n'...
                '\n'...
                '      .uniValuedProperty {\n'...
                '      width: 10%%;\n'...
                '      text-align: left;\n'...
                '      overflow: auto;\n'...
                '      }\n'...
                '\n'...
                '      .value {\n'...
                '      text-align: left;\n'...
                '      position: absolute;\n'...
                '      left: 50%%;\n'...
                '      }\n'...
                '\n'...
                '      .empty {\n'...
                '      text-align: left;\n'...
                '      position: absolute;\n'...
                '      left: 50%%;\n'...
                '      color: red;\n'...
                '      }\n'...
                '\n'...
                '      img {\n'...
                '      vertical-align: middle;\n'...
                '      }\n'...
                '\n'...
                '      .trigger{\n'...
                '      cursor: pointer;\n'...
                '      cursor: hand;\n'...
                '      }\n'...
                '\n'...
                '      .branch{\n'...
                '      display: none;\n'...
                '      margin-left: 16px;\n'...
                '      }\n'...
                '    </style>\n'];
            js = ['    <script type="text/javascript" language="JavaScript">\n'...
                '      var openImg = new Image();\n'...
                '      openImg.src = "' this.loc 'open.gif";\n'...
                '      var closedImg = new Image();\n'...
                '      closedImg.src = "' this.loc 'closed.gif";\n'...
                '\n'...
                '      function showBranch(branch){\n'...
                '      var objBranch = document.getElementById(branch).style;\n'...
                '      if(objBranch.display=="block")\n'...
                '      objBranch.display="none";\n'...
                '      else\n'...
                '      objBranch.display="block";\n'...
                '      }\n'...
                '\n'...
                '      function swapImage(img){\n'...
                '      objImg = document.getElementById(img);\n'...
                '      if(objImg.src.indexOf(''closed.gif'')>-1)\n'...
                '      objImg.src = openImg.src;\n'...
                '      else\n'...
                '      objImg.src = closedImg.src;\n'...
                '      }\n'...
                '    </script>\n'];
            header = ['    </head>\n'...
                '  <body>\n'...
                '    <h1>%s</h1>\n'...
                '    <hr/>\n'];
            output = [preamble sprintf(title, name) css js sprintf(header, name)];
        end

        function output = format_footer (this, format)
            if (strcmpi (format, 'html'))
                output = '</div>\n';
            else
                output = '';
            end
        end

        function output = attrSort (this, input)
            elems = cell (input.size, 2);
            for i = 1:input.size
                elems{i, 1} = input.at(i).name;
                elems{i, 2} = input.at(i);
            end
            names = elems(:, 1);
            % Use the returned index to get the index into the original
            % array
            [sortedElems, index] = sort(names);
            output = cell (length(index),1);
            for j = 1:length(index)
                output{j} = input.at(index(j));
            end
        end
    end

    methods (Static=true, Access='public')
        function name = getObjectName (obj)
            mc = obj.getMetaClass;
            name = 'Undefined';
            if obj.isvalid
                mcName = mc.getProperty('name');
                if mcName.isvalid
                    objectName = obj.getOne(mcName);
                    if objectName.isvalid 
                        if( ~strcmp(objectName.toString, '') )
                            name = objectName.toString;
                        end
                    end
                end
            end
        end
    end

    methods (Static=true, Access='private')
        function loc = matlab_location (suffix)
            % Normalize all filesep to '/'
            matlabRootVal = regexprep (matlabroot, filesep, '/');
            loc = ['file:///' matlabRootVal '/' suffix '/'];
            % Replace '+' with the equivalent hex value
            loc = regexprep (loc, '+', '%%2b');
            % Replace '@' with the equivalent hex value
            loc = regexprep (loc, '@', '%%40');
        end
    end
end
