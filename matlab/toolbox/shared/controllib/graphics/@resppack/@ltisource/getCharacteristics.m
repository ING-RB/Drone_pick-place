function c = getCharacteristics(this,PlotType)
%getCharacteristics Gets the characteristics associated with the plot type
% for the data source

%  Copyright 1986-2016 The MathWorks, Inc.

%#function resppack.TimeFinalValueData
%#function resppack.TimeFinalValueView
%#function resppack.StepPeakRespData
%#function resppack.StepPeakRespView
%#function resppack.ImpulsePeakRespData
%#function resppack.ImpulsePeakRespView
%#function resppack.SettleTimeData
%#function resppack.SettleTimeView
%#function resppack.TransientTimeData
%#function resppack.TransientTimeView
%#function resppack.StepRiseTimeData
%#function resppack.StepRiseTimeView
%#function resppack.StepSteadyStateView
%#function wavepack.TimePeakAmpData
%#function wavepack.TimePeakAmpView
%#function resppack.SimInputPeakView
%#function wavepack.FreqPeakGainData
%#function wavepack.FreqPeakGainView
%#function resppack.MinStabilityMarginData
%#function resppack.MinDiskMarginData
%#function resppack.BodeStabilityMarginView
%#function resppack.AllStabilityMarginData
%#function resppack.BodeStabilityMarginView
%#function resppack.MinDiskMarginView
%#function resppack.NicholsPeakRespView
%#function resppack.NyquistStabilityMarginView
%#function resppack.SigmaPeakRespData
%#function resppack.SigmaPeakRespView
%#function resppack.NyquistPeakRespView
%#function resppack.FreqPeakRespData
%#function resppack.ConfidenceRegionStepTimeData
%#function resppack.ConfidenceRegionImpulseTimeData
%#function resppack.ConfidenceRegionResidTimeData
%#function resppack.ConfidenceRegionTimeView
%#function resppack.ConfidenceRegionMagPhaseData
%#function resppack.ConfidenceRegionFreqData
%#function resppack.ConfidenceRegionBodeView
%#function resppack.ConfidenceRegionNyquistView
%#function resppack.ConfidenceRegionIOPZData
%#function resppack.ConfidenceRegionIOPZView

switch PlotType
    case 'step'
        c(1) = struct(...
            'CharacteristicLabel', ctrlMsgUtils.message('Controllib:plots:strPeakResponse'), ...
            'CharacteristicID', 'PeakResponse', ...
            'CharacteristicData', 'resppack.StepPeakRespData',...
            'CharacteristicView', 'resppack.StepPeakRespView', ...
            'CharacteristicGroup', 'Characteristic');
        c(2) = struct(...
            'CharacteristicLabel', ctrlMsgUtils.message('Controllib:plots:strRiseTime'), ...
            'CharacteristicID', 'RiseTime', ...
            'CharacteristicData', 'resppack.StepRiseTimeData',...
            'CharacteristicView', 'resppack.StepRiseTimeView', ...
            'CharacteristicGroup', 'Characteristic');
        c(3) = struct(...
            'CharacteristicLabel', ctrlMsgUtils.message('Controllib:plots:strSettlingTime'), ...
            'CharacteristicID', 'SettlingTime', ...
            'CharacteristicData', 'resppack.SettleTimeData',...
            'CharacteristicView', 'resppack.SettleTimeView', ...
            'CharacteristicGroup', 'Characteristic');
        c(4) = struct(...
            'CharacteristicLabel', ctrlMsgUtils.message('Controllib:plots:strTransientTime'), ...
            'CharacteristicID', 'TransientTime', ...
            'CharacteristicData', 'resppack.TransientTimeData',...
            'CharacteristicView', 'resppack.TransientTimeView', ...
            'CharacteristicGroup', 'Characteristic');
        c(5) = struct(...
            'CharacteristicLabel', ctrlMsgUtils.message('Controllib:plots:strSteadyState'), ...
            'CharacteristicID', 'SteadyState', ...
            'CharacteristicData', 'resppack.TimeFinalValueData',...
            'CharacteristicView', 'resppack.StepSteadyStateView', ...
            'CharacteristicGroup', 'Characteristic');
        if isa(this.Model,'idlti') % idnlgrey uses idnlmodelsource
            c(end+1) = struct(...
                'CharacteristicLabel', ctrlMsgUtils.message('Controllib:plots:strConfidenceRegion'),...
                'CharacteristicID', 'ConfidenceRegion', ...
                'CharacteristicData', 'resppack.ConfidenceRegionStepTimeData',...
                'CharacteristicView', 'resppack.ConfidenceRegionTimeView', ...
                'CharacteristicGroup', 'Characteristic');
        end
        
    case 'impulse'
        c(1) = struct(...
            'CharacteristicLabel', ctrlMsgUtils.message('Controllib:plots:strPeakResponse'), ...
            'CharacteristicID', 'PeakResponse', ...
            'CharacteristicData', 'resppack.ImpulsePeakRespData',...
            'CharacteristicView', 'resppack.ImpulsePeakRespView', ...
            'CharacteristicGroup', 'Characteristic');
        c(2) = struct(...
            'CharacteristicLabel', ctrlMsgUtils.message('Controllib:plots:strTransientTime'), ...
            'CharacteristicID', 'TransientTime', ...
            'CharacteristicData', 'resppack.TransientTimeData',...
            'CharacteristicView', 'resppack.TransientTimeView', ...
            'CharacteristicGroup', 'Characteristic');
        if isa(this.Model,'idlti')
            c(end+1) = struct(...
                'CharacteristicLabel', ctrlMsgUtils.message('Controllib:plots:strConfidenceRegion'), ...
                'CharacteristicID', 'ConfidenceRegion', ...
                'CharacteristicData', 'resppack.ConfidenceRegionImpulseTimeData',...
                'CharacteristicView', 'resppack.ConfidenceRegionTimeView', ...
                'CharacteristicGroup', 'Characteristic');
        end
        
    case 'residImpulse'
        c(1) = struct(...
            'CharacteristicLabel', ctrlMsgUtils.message('Controllib:plots:strPeakResponse'), ...
            'CharacteristicID', 'PeakResponse', ...
            'CharacteristicData', 'wavepack.TimePeakAmpData',...
            'CharacteristicView', 'wavepack.TimePeakAmpView', ...
            'CharacteristicGroup', 'Characteristic');
        
        c(end+1) = struct(...
            'CharacteristicLabel', ctrlMsgUtils.message('Controllib:plots:strConfidenceRegion'), ...
            'CharacteristicID', 'ConfidenceRegion', ...
            'CharacteristicData', 'resppack.ConfidenceRegionResidTimeData',...
            'CharacteristicView', 'resppack.ConfidenceRegionTimeView', ...
            'CharacteristicGroup', 'Characteristic');
        
    case 'initial'
        c(1) = struct(...
            'CharacteristicLabel', ctrlMsgUtils.message('Controllib:plots:strPeakResponse'), ...
            'CharacteristicID', 'PeakResponse', ...
            'CharacteristicData', 'wavepack.TimePeakAmpData',...
            'CharacteristicView', 'wavepack.TimePeakAmpView', ...
            'CharacteristicGroup', 'Characteristic');
        c(2) = struct(...
            'CharacteristicLabel', ctrlMsgUtils.message('Controllib:plots:strTransientTime'), ...
            'CharacteristicID', 'TransientTime', ...
            'CharacteristicData', 'resppack.TransientTimeData',...
            'CharacteristicView', 'resppack.TransientTimeView', ...
            'CharacteristicGroup', 'Characteristic');
        
    case 'lsim'
        c = struct(...
            'CharacteristicLabel', ctrlMsgUtils.message('Controllib:plots:strPeakResponse'), ...
            'CharacteristicID', 'PeakResponse', ...
            'CharacteristicData', 'wavepack.TimePeakAmpData',...
            'CharacteristicView', 'wavepack.TimePeakAmpView', ...
            'CharacteristicGroup', 'Characteristic');
        
    case 'bode'
        c(1) = struct(...
            'CharacteristicLabel', ctrlMsgUtils.message('Controllib:plots:strPeakResponse'), ...
            'CharacteristicID', 'PeakResponse', ...
            'CharacteristicData', 'wavepack.FreqPeakGainData',...
            'CharacteristicView', 'wavepack.FreqPeakGainView', ...
            'CharacteristicGroup', 'Characteristic');
        if issiso(this.Model) && ~isempty(ver('control')) && license('test','Control_Toolbox')
            % Margin Characteristics for SISO systems
            c(end+1) = struct(...
                'CharacteristicLabel', ctrlMsgUtils.message('Controllib:plots:strMinimumStabilityMargins'), ...
                'CharacteristicID', 'MinimumStabilityMargins', ...
                'CharacteristicData', 'resppack.MinStabilityMarginData',...
                'CharacteristicView', 'resppack.BodeStabilityMarginView', ...
                'CharacteristicGroup', 'Characteristic');
            c(end+1) = struct(...
                'CharacteristicLabel', ctrlMsgUtils.message('Controllib:plots:strAllStabilityMargins'), ...
                'CharacteristicID', 'AllStabilityMargins', ...
                'CharacteristicData', 'resppack.AllStabilityMarginData',...
                'CharacteristicView', 'resppack.BodeStabilityMarginView', ...
                'CharacteristicGroup', 'Characteristic');
        end
        
        if isa(this.Model,'idlti')
            c(end+1) = struct(...
                'CharacteristicLabel', ctrlMsgUtils.message('Controllib:plots:strConfidenceRegion'), ...
                'CharacteristicID', 'ConfidenceRegion', ...
                'CharacteristicData', 'resppack.ConfidenceRegionMagPhaseData',...
                'CharacteristicView', 'resppack.ConfidenceRegionBodeView', ...
                'CharacteristicGroup', 'Characteristic');
        end
        
    case 'residBode'
        c(1) = struct(...
            'CharacteristicLabel', ctrlMsgUtils.message('Controllib:plots:strPeakResponse'), ...
            'CharacteristicID', 'PeakResponse', ...
            'CharacteristicData', 'wavepack.FreqPeakGainData',...
            'CharacteristicView', 'wavepack.FreqPeakGainView', ...
            'CharacteristicGroup', 'Characteristic');
        
        c(2) = struct(...
            'CharacteristicLabel', ctrlMsgUtils.message('Controllib:plots:strConfidenceRegion'), ...
            'CharacteristicID', 'ConfidenceRegion', ...
            'CharacteristicData', 'resppack.ConfidenceRegionResidMagPhaseData',...
            'CharacteristicView', 'resppack.ConfidenceRegionBodeView', ...
            'CharacteristicGroup', 'Characteristic');
        
    case 'nichols'
        c(1) = struct(...
            'CharacteristicLabel', ctrlMsgUtils.message('Controllib:plots:strPeakResponse'), ...
            'CharacteristicID', 'PeakResponse', ...
            'CharacteristicData', 'wavepack.FreqPeakGainData',...
            'CharacteristicView', 'resppack.NicholsPeakRespView', ...
            'CharacteristicGroup', 'Characteristic');
        
        if issiso(this.Model) && ~isempty(ver('control')) && license('test','Control_Toolbox')
            % Margin Characteristics for SISO systems
            c(2) = struct(...
                'CharacteristicLabel',  ctrlMsgUtils.message('Controllib:plots:strMinimumStabilityMargins'), ...
                'CharacteristicID', 'MinimumStabilityMargins', ...
                'CharacteristicData', 'resppack.MinStabilityMarginData',...
                'CharacteristicView', 'resppack.NicholsStabilityMarginView', ...
                'CharacteristicGroup', 'Characteristic');
            c(3) = struct(...
                'CharacteristicLabel',  ctrlMsgUtils.message('Controllib:plots:strAllStabilityMargins'), ...
                'CharacteristicID', 'AllStabilityMargins', ...
                'CharacteristicData', 'resppack.AllStabilityMarginData',...
                'CharacteristicView', 'resppack.NicholsStabilityMarginView', ...
                'CharacteristicGroup', 'Characteristic');
        end
        
    case 'nyquist'
        c(1) = struct(...
            'CharacteristicLabel', ctrlMsgUtils.message('Controllib:plots:strPeakResponse'), ...
            'CharacteristicID', 'PeakResponse', ...
            'CharacteristicData', 'resppack.FreqPeakRespData',...
            'CharacteristicView', 'resppack.NyquistPeakRespView', ...
            'CharacteristicGroup', 'Characteristic');
        
        if issiso(this.Model) && ~isempty(ver('control')) && license('test','Control_Toolbox')
            % Margin Characteristics for SISO systems
            c(end+1) = struct(...
                'CharacteristicLabel',  ctrlMsgUtils.message('Controllib:plots:strMinimumStabilityMargins'), ...
                'CharacteristicID', 'MinimumStabilityMargins', ...
                'CharacteristicData', 'resppack.MinStabilityMarginData',...
                'CharacteristicView', 'resppack.NyquistStabilityMarginView', ...
                'CharacteristicGroup', 'Characteristic');
            c(end+1) = struct(...
                'CharacteristicLabel',  ctrlMsgUtils.message('Controllib:plots:strAllStabilityMargins'), ...
                'CharacteristicID', 'AllStabilityMargins', ...
                'CharacteristicData', 'resppack.AllStabilityMarginData',...
                'CharacteristicView', 'resppack.NyquistStabilityMarginView', ...
                'CharacteristicGroup', 'Characteristic');
        end
        if isa(this.Model,'idlti')
            c(end+1) = struct(...
                'CharacteristicLabel', ctrlMsgUtils.message('Controllib:plots:strConfidenceRegion'), ...
                'CharacteristicID', 'ConfidenceRegion', ...
                'CharacteristicData', 'resppack.ConfidenceRegionFreqData',...
                'CharacteristicView', 'resppack.ConfidenceRegionNyquistView', ...
                'CharacteristicGroup', 'Characteristic');
        end
        
        
    case 'sigma'
        c = struct(...
            'CharacteristicLabel', ctrlMsgUtils.message('Controllib:plots:strPeakResponse'), ...
            'CharacteristicID', 'PeakResponse', ...
            'CharacteristicData', 'resppack.SigmaPeakRespData',...
            'CharacteristicView', 'resppack.SigmaPeakRespView', ...
            'CharacteristicGroup', 'Characteristic');
        
    case 'sectorplot'
        c = struct(...
            'CharacteristicLabel', ctrlMsgUtils.message('Controllib:plots:strWorstIndex'), ...
            'CharacteristicID', 'WorstRelativeIndex', ...
            'CharacteristicData', 'resppack.SigmaPeakRespData',...
            'CharacteristicView', 'resppack.RelativeIndexWorstView', ...
            'CharacteristicGroup', 'Characteristic');
        
    case 'dirindex'
        c = struct(...
            'CharacteristicLabel', ctrlMsgUtils.message('Controllib:plots:strWorstIndex'), ...
            'CharacteristicID', 'WorstDirectionalIndex', ...
            'CharacteristicData', 'resppack.DirectionalIndexWorstData',...
            'CharacteristicView', 'resppack.DirectionalIndexWorstView', ...
            'CharacteristicGroup', 'Characteristic');
                
    case 'iopzmap'
        if isa(this.Model,'idlti')
            c = struct(...
                'CharacteristicLabel', ctrlMsgUtils.message('Controllib:plots:strConfidenceRegion'), ...
                'CharacteristicID', 'ConfidenceRegion', ...
                'CharacteristicData', 'resppack.ConfidenceRegionIOPZData',...
                'CharacteristicView', 'resppack.ConfidenceRegionIOPZView', ...
                'CharacteristicGroup', 'Characteristic');
        else
            c = [];
        end
        
   case 'diskmargin'
      c = struct(...
         'CharacteristicLabel', ctrlMsgUtils.message('Controllib:plots:strMinDiskMargin'), ...
         'CharacteristicID', 'MinimumDiskMargin', ...
         'CharacteristicData', 'resppack.MinDiskMarginData',...
         'CharacteristicView', 'resppack.MinDiskMarginView', ...
         'CharacteristicGroup', 'Characteristic');
      
    otherwise
        c = [];
end

end
