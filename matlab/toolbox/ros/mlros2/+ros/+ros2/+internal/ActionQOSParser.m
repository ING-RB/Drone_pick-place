classdef(Abstract)ActionQOSParser < handle
%This class is for internal use only. It may be removed in the future.

%ActionClientParser Base class for parsing QoS for Action Client
%   Copyright 2022-2023 The MathWorks, Inc.

    properties (Constant, Access = protected)
        %HistoryValues - Possible values for History property
        HistoryValues = {'keeplast', 'keepall'}

        %ReliabilityValues - Possible values for Reliability property
        ReliabilityValues = {'reliable', 'besteffort'}

        %DurabilityValues - Possible values for Durability property
        DurabilityValues = {'transientlocal', 'volatile'}

        %LivelinessValues
        LivelinessValues = {'automatic','default','manual'}

        %DefaultQoSStruct - Default QoS settings
        DefaultQoSStruct = struct('history',1,'depth',10, ...
                                  'reliability',1, ...
                                  'durability',2, ...
                                  'deadline',Inf, ...
                                  'lifespan',Inf, ...
                                  'liveliness',1, ...
                                  'leaseduration',Inf, ...
                                  'avoidrosnamespaceconventions',logical(false));
    end

    methods (Access=protected)
        function parser = addQoSToParser(obj, parser, className)
            %addQOSToParser Add QOS names and defaults to input parse
            % QOS settings empty by default to use ROS 2 defaults.
            % className is the name to be shown in error messages if the
            % arguments parsed are invalid.

            addParameter(parser, 'History', '', ...
                @(x) validateStringParameter(x, ...
                obj.HistoryValues, ...
                className, ...
                'History'));
            addParameter(parser, 'Depth', [], ...
                @(x) validateattributes(x, ...
                {'numeric'}, ...
                {'scalar', 'nonnegative', 'finite'}, ...
                className, ...
                'Depth'));
            addParameter(parser, 'Reliability', '', ...
                @(x) validateStringParameter(x, ...
                obj.ReliabilityValues, ...
                className, ...
                'Reliability'));
            addParameter(parser, 'Durability', '', ...
                @(x) validateStringParameter(x, ...
                obj.DurabilityValues, ...
                className, ...
                'Durability'));
            addParameter(parser,'Deadline',[], ...
                         @(x) validateattributes(x, ...
                                                 {'double'}, ...
                                                 {'scalar', 'positive', 'nonnan'}, ...
                                                 className, ...
                                                 'Deadline'))
            addParameter(parser,'Lifespan',[], ...
                         @(x) validateattributes(x, ...
                                                 {'double'}, ...
                                                 {'scalar', 'positive', 'nonnan'}, ...
                                                 className, ...
                                                 'Lifespan'))
            addParameter(parser, 'Liveliness', '', ...
                @(x) validateStringParameter(x, ...
                obj.LivelinessValues, ...
                className, ...
                'Liveliness'));
            addParameter(parser,'LeaseDuration',[], ...
                         @(x) validateattributes(x, ...
                                                 {'double'}, ...
                                                 {'scalar', 'positive', 'nonnan'}, ...
                                                 className, ...
                                                 'LeaseDuration'))
            addParameter(parser, 'AvoidROSNamespaceConventions', [], ...
                         @(x) validateattributes(x,{'logical'},{'nonempty'}, ...
                         className,'AvoidROSNamespaceConventions'))

            function validateStringParameter(value, options, className, name)
                % Separate function to suppress output and just validate
                validatestring(value, options, className, name);
            end
        end

        function qosSettings = getQosSettings(obj, qosInputs)
            %getQosSettings Handle input of possible QOS values
            %   Return a structure only containing explicitly set values, set as
            %   integers corresponding to the ROS 2 middleware enumerations

            % Non-existent fields in the QOS structureure will result in
            % the default QOS setting values being used
            % validatestring has already guaranteed unique match with allowed
            % values, so now just needs index
            qosSettings = struct;
            if ~isempty(qosInputs.History)
                historyVal = char(qosInputs.History);
                historyIdx = find(strncmpi(historyVal, ...
                    obj.HistoryValues, ...
                    numel(historyVal)));
                qosSettings.history = int32(historyIdx);
            end
            if ~isempty(qosInputs.Depth)
                qosSettings.depth = uint64(qosInputs.Depth);
            end
            if ~isempty(qosInputs.Reliability)
                reliabilityVal = char(qosInputs.Reliability);
                reliabilityIdx = find(strncmpi(reliabilityVal, ...
                    obj.ReliabilityValues, ...
                    numel(reliabilityVal)));
                qosSettings.reliability = int32(reliabilityIdx);
            end
            if ~isempty(qosInputs.Durability)
                durabilityVal = char(qosInputs.Durability);
                durabilityIdx = find(strncmpi(durabilityVal, ...
                    obj.DurabilityValues, ...
                    numel(durabilityVal)));
                qosSettings.durability = int32(durabilityIdx);
            end
            if ~isempty(qosInputs.Deadline)
                qosSettings.deadline = qosInputs.Deadline;
            end
            if ~isempty(qosInputs.Lifespan)
                qosSettings.lifespan = qosInputs.Lifespan;
            end
            if ~isempty(qosInputs.Liveliness)
                livelinessVal = char(qosInputs.Liveliness);
                livelinessIdx = find(strncmpi(livelinessVal, ...
                                              obj.LivelinessValues, ...
                                              numel(livelinessVal)));
                qosSettings.liveliness = int32(livelinessIdx);
            end
            if ~isempty(qosInputs.LeaseDuration)
                qosSettings.leaseduration = qosInputs.LeaseDuration;
            end
            if ~isempty(qosInputs.AvoidROSNamespaceConventions)
                qosSettings.avoidrosnamespaceconventions = qosInputs.AvoidROSNamespaceConventions;
            end
        end

        function qosString = displayQoS(obj,structQoS)
        %displayQoS Return a string containing QoS name with field in a QoS structure.
        %No need to check the input structure since they have been verified during
        %object creation.

            qosString = sprintf(['History: %s, Depth: %d, Reliability: %s, ' ...
                'Durability: %s, Deadline: %f, Lifespan: %f, Liveliness: %s, Lease Duration: %f'], ...
                obj.HistoryValues{structQoS.history}, structQoS.depth, ...
                obj.ReliabilityValues{structQoS.reliability}, ...
                obj.DurabilityValues{structQoS.durability}, ...
                structQoS.deadline, ...
                structQoS.lifespan, ...
                obj.LivelinessValues{structQoS.liveliness}, ...
                structQoS.leaseduration);
        end

        function qosString = getQoSString(obj, qosSettings, qosName)
        %getQoSString Return a QoS string for display given QoS name

            qosStruct = obj.DefaultQoSStruct;
            try
                fs = fieldnames(qosSettings.(qosName));
                for i = 1:length(fs)
                    qosStruct.(fs{i}) = qosSettings.(qosName).(fs{i});
                end
            catch
                % If there is no fields, skip to next QoS
            end
            qosString = obj.displayQoS(qosStruct);
        end
    end
end
