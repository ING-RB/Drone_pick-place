
classdef EgoVehicleControlTarget < ros.Message
    %EgoVehicleControlTarget MATLAB implementation of carla_ackermann_msgs/EgoVehicleControlTarget
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'carla_ackermann_msgs/EgoVehicleControlTarget' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'f1f09cb4036d07c40bb9c47fb2889e9c' % The MD5 Checksum of the message definition
        PropertyList = { 'SteeringAngle' 'Speed' 'SpeedAbs' 'Accel' 'Jerk' } % List of non-constant message properties
        ROSPropertyList = { 'steering_angle' 'speed' 'speed_abs' 'accel' 'jerk' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        SteeringAngle
        Speed
        SpeedAbs
        Accel
        Jerk
    end
    methods
        function set.SteeringAngle(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'EgoVehicleControlTarget', 'SteeringAngle');
            obj.SteeringAngle = single(val);
        end
        function set.Speed(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'EgoVehicleControlTarget', 'Speed');
            obj.Speed = single(val);
        end
        function set.SpeedAbs(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'EgoVehicleControlTarget', 'SpeedAbs');
            obj.SpeedAbs = single(val);
        end
        function set.Accel(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'EgoVehicleControlTarget', 'Accel');
            obj.Accel = single(val);
        end
        function set.Jerk(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'EgoVehicleControlTarget', 'Jerk');
            obj.Jerk = single(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.carla_ackermann_msgs.EgoVehicleControlTarget.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.carla_ackermann_msgs.EgoVehicleControlTarget(strObj);
        end
    end
end
