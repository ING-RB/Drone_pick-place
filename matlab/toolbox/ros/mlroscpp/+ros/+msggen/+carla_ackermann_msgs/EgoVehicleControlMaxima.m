
classdef EgoVehicleControlMaxima < ros.Message
    %EgoVehicleControlMaxima MATLAB implementation of carla_ackermann_msgs/EgoVehicleControlMaxima
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'carla_ackermann_msgs/EgoVehicleControlMaxima' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '9895ba8c0c51c81d773f7d191f9aeb3e' % The MD5 Checksum of the message definition
        PropertyList = { 'MaxSteeringAngle' 'MaxSpeed' 'MaxAccel' 'MaxDecel' 'MinAccel' 'MaxPedal' } % List of non-constant message properties
        ROSPropertyList = { 'max_steering_angle' 'max_speed' 'max_accel' 'max_decel' 'min_accel' 'max_pedal' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        MaxSteeringAngle
        MaxSpeed
        MaxAccel
        MaxDecel
        MinAccel
        MaxPedal
    end
    methods
        function set.MaxSteeringAngle(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'EgoVehicleControlMaxima', 'MaxSteeringAngle');
            obj.MaxSteeringAngle = single(val);
        end
        function set.MaxSpeed(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'EgoVehicleControlMaxima', 'MaxSpeed');
            obj.MaxSpeed = single(val);
        end
        function set.MaxAccel(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'EgoVehicleControlMaxima', 'MaxAccel');
            obj.MaxAccel = single(val);
        end
        function set.MaxDecel(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'EgoVehicleControlMaxima', 'MaxDecel');
            obj.MaxDecel = single(val);
        end
        function set.MinAccel(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'EgoVehicleControlMaxima', 'MinAccel');
            obj.MinAccel = single(val);
        end
        function set.MaxPedal(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'EgoVehicleControlMaxima', 'MaxPedal');
            obj.MaxPedal = single(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.carla_ackermann_msgs.EgoVehicleControlMaxima.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.carla_ackermann_msgs.EgoVehicleControlMaxima(strObj);
        end
    end
end
