
classdef EgoVehicleControlStatus < ros.Message
    %EgoVehicleControlStatus MATLAB implementation of carla_ackermann_msgs/EgoVehicleControlStatus
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'carla_ackermann_msgs/EgoVehicleControlStatus' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '5794a514157c1217dfba31bd9e6ca33c' % The MD5 Checksum of the message definition
        PropertyList = { 'Status' 'SpeedControlActivationCount' 'SpeedControlAccelDelta' 'SpeedControlAccelTarget' 'AccelControlPedalDelta' 'AccelControlPedalTarget' 'BrakeUpperBorder' 'ThrottleLowerBorder' } % List of non-constant message properties
        ROSPropertyList = { 'status' 'speed_control_activation_count' 'speed_control_accel_delta' 'speed_control_accel_target' 'accel_control_pedal_delta' 'accel_control_pedal_target' 'brake_upper_border' 'throttle_lower_border' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Status
        SpeedControlActivationCount
        SpeedControlAccelDelta
        SpeedControlAccelTarget
        AccelControlPedalDelta
        AccelControlPedalTarget
        BrakeUpperBorder
        ThrottleLowerBorder
    end
    methods
        function set.Status(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'EgoVehicleControlStatus', 'Status');
            obj.Status = char(val);
        end
        function set.SpeedControlActivationCount(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'EgoVehicleControlStatus', 'SpeedControlActivationCount');
            obj.SpeedControlActivationCount = uint8(val);
        end
        function set.SpeedControlAccelDelta(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'EgoVehicleControlStatus', 'SpeedControlAccelDelta');
            obj.SpeedControlAccelDelta = single(val);
        end
        function set.SpeedControlAccelTarget(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'EgoVehicleControlStatus', 'SpeedControlAccelTarget');
            obj.SpeedControlAccelTarget = single(val);
        end
        function set.AccelControlPedalDelta(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'EgoVehicleControlStatus', 'AccelControlPedalDelta');
            obj.AccelControlPedalDelta = single(val);
        end
        function set.AccelControlPedalTarget(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'EgoVehicleControlStatus', 'AccelControlPedalTarget');
            obj.AccelControlPedalTarget = single(val);
        end
        function set.BrakeUpperBorder(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'EgoVehicleControlStatus', 'BrakeUpperBorder');
            obj.BrakeUpperBorder = single(val);
        end
        function set.ThrottleLowerBorder(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'EgoVehicleControlStatus', 'ThrottleLowerBorder');
            obj.ThrottleLowerBorder = single(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.carla_ackermann_msgs.EgoVehicleControlStatus.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.carla_ackermann_msgs.EgoVehicleControlStatus(strObj);
        end
    end
end
