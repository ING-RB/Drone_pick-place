
classdef CarlaWeatherParameters < ros.Message
    %CarlaWeatherParameters MATLAB implementation of carla_msgs/CarlaWeatherParameters
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'carla_msgs/CarlaWeatherParameters' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'bb273e4588ee8778c1dac74839d4709e' % The MD5 Checksum of the message definition
        PropertyList = { 'Cloudiness' 'Precipitation' 'PrecipitationDeposits' 'WindIntensity' 'FogDensity' 'FogDistance' 'Wetness' 'SunAzimuthAngle' 'SunAltitudeAngle' } % List of non-constant message properties
        ROSPropertyList = { 'cloudiness' 'precipitation' 'precipitation_deposits' 'wind_intensity' 'fog_density' 'fog_distance' 'wetness' 'sun_azimuth_angle' 'sun_altitude_angle' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Cloudiness
        Precipitation
        PrecipitationDeposits
        WindIntensity
        FogDensity
        FogDistance
        Wetness
        SunAzimuthAngle
        SunAltitudeAngle
    end
    methods
        function set.Cloudiness(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'CarlaWeatherParameters', 'Cloudiness');
            obj.Cloudiness = single(val);
        end
        function set.Precipitation(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'CarlaWeatherParameters', 'Precipitation');
            obj.Precipitation = single(val);
        end
        function set.PrecipitationDeposits(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'CarlaWeatherParameters', 'PrecipitationDeposits');
            obj.PrecipitationDeposits = single(val);
        end
        function set.WindIntensity(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'CarlaWeatherParameters', 'WindIntensity');
            obj.WindIntensity = single(val);
        end
        function set.FogDensity(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'CarlaWeatherParameters', 'FogDensity');
            obj.FogDensity = single(val);
        end
        function set.FogDistance(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'CarlaWeatherParameters', 'FogDistance');
            obj.FogDistance = single(val);
        end
        function set.Wetness(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'CarlaWeatherParameters', 'Wetness');
            obj.Wetness = single(val);
        end
        function set.SunAzimuthAngle(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'CarlaWeatherParameters', 'SunAzimuthAngle');
            obj.SunAzimuthAngle = single(val);
        end
        function set.SunAltitudeAngle(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'CarlaWeatherParameters', 'SunAltitudeAngle');
            obj.SunAltitudeAngle = single(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.carla_msgs.CarlaWeatherParameters.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.carla_msgs.CarlaWeatherParameters(strObj);
        end
    end
end
