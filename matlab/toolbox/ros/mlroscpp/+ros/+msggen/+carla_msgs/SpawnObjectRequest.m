
classdef SpawnObjectRequest < ros.Message
    %SpawnObjectRequest MATLAB implementation of carla_msgs/SpawnObjectRequest
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'carla_msgs/SpawnObjectRequest' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '692b34e8d779943f044d478da31f4ec5' % The MD5 Checksum of the message definition
        PropertyList = { 'Attributes' 'Transform' 'Type' 'Id' 'AttachTo' 'RandomPose' } % List of non-constant message properties
        ROSPropertyList = { 'attributes' 'transform' 'type' 'id' 'attach_to' 'random_pose' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.diagnostic_msgs.KeyValue' ...
            'ros.msggen.geometry_msgs.Pose' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Attributes
        Transform
        Type
        Id
        AttachTo
        RandomPose
    end
    methods
        function set.Attributes(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.diagnostic_msgs.KeyValue.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.diagnostic_msgs.KeyValue'};
            validateattributes(val, validClasses, validAttributes, 'SpawnObjectRequest', 'Attributes')
            obj.Attributes = val;
        end
        function set.Transform(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Pose'};
            validateattributes(val, validClasses, validAttributes, 'SpawnObjectRequest', 'Transform')
            obj.Transform = val;
        end
        function set.Type(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'SpawnObjectRequest', 'Type');
            obj.Type = char(val);
        end
        function set.Id(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'SpawnObjectRequest', 'Id');
            obj.Id = char(val);
        end
        function set.AttachTo(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SpawnObjectRequest', 'AttachTo');
            obj.AttachTo = uint32(val);
        end
        function set.RandomPose(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SpawnObjectRequest', 'RandomPose');
            obj.RandomPose = logical(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.carla_msgs.SpawnObjectRequest.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.carla_msgs.SpawnObjectRequest(strObj);
        end
    end
end
