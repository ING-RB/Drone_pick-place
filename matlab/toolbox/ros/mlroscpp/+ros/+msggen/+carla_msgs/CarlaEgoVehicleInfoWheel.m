
classdef CarlaEgoVehicleInfoWheel < ros.Message
    %CarlaEgoVehicleInfoWheel MATLAB implementation of carla_msgs/CarlaEgoVehicleInfoWheel
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'carla_msgs/CarlaEgoVehicleInfoWheel' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '192cba6d0621954855f8c957508a83b4' % The MD5 Checksum of the message definition
        PropertyList = { 'Position' 'TireFriction' 'DampingRate' 'MaxSteerAngle' 'Radius' 'MaxBrakeTorque' 'MaxHandbrakeTorque' } % List of non-constant message properties
        ROSPropertyList = { 'position' 'tire_friction' 'damping_rate' 'max_steer_angle' 'radius' 'max_brake_torque' 'max_handbrake_torque' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.geometry_msgs.Vector3' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Position
        TireFriction
        DampingRate
        MaxSteerAngle
        Radius
        MaxBrakeTorque
        MaxHandbrakeTorque
    end
    methods
        function set.Position(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Vector3'};
            validateattributes(val, validClasses, validAttributes, 'CarlaEgoVehicleInfoWheel', 'Position')
            obj.Position = val;
        end
        function set.TireFriction(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'CarlaEgoVehicleInfoWheel', 'TireFriction');
            obj.TireFriction = single(val);
        end
        function set.DampingRate(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'CarlaEgoVehicleInfoWheel', 'DampingRate');
            obj.DampingRate = single(val);
        end
        function set.MaxSteerAngle(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'CarlaEgoVehicleInfoWheel', 'MaxSteerAngle');
            obj.MaxSteerAngle = single(val);
        end
        function set.Radius(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'CarlaEgoVehicleInfoWheel', 'Radius');
            obj.Radius = single(val);
        end
        function set.MaxBrakeTorque(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'CarlaEgoVehicleInfoWheel', 'MaxBrakeTorque');
            obj.MaxBrakeTorque = single(val);
        end
        function set.MaxHandbrakeTorque(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'CarlaEgoVehicleInfoWheel', 'MaxHandbrakeTorque');
            obj.MaxHandbrakeTorque = single(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.carla_msgs.CarlaEgoVehicleInfoWheel.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.carla_msgs.CarlaEgoVehicleInfoWheel(strObj);
        end
    end
end
