<?xml version="1.0" encoding="UTF-8"?>
<rsccat version="1.0"
        locale="en_US"
        product="rich_text_component"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="../../schema/msgcat.xsd">
	<message>
		<entry key="persistentTooltipMessage">The scope of variable &#39;\{0}&#39; persists across calls to the same function.</entry>
		<entry key="persistentExtendedTooltipMessage">&lt;strong&gt;Additional Information&lt;/strong&gt;&lt;br/&gt;&lt;p&gt;A variable declared as persistent is local to the function in which you declare it; yet MATLAB retains its value in memory between calls to that function. Persistent variables are known only to the function in which you declare them. This prevents other functions or the MATLAB command line from changing the value of the persistent variable.&lt;/p&gt;&lt;p&gt; When you clear or modify a function that is in memory, MATLAB also clears all persistent variables declared by that function. To keep a function in memory until MATLAB quits, use &lt;code&gt;&lt;a href=\&quot;matlab:doc mlock\&quot; target=\&quot;_blank\&quot;&gt;mlock&lt;/a&gt;&lt;/code&gt;. &lt;/p&gt;&lt;p&gt; MATLAB returns an error if:&lt;ul&gt;&lt;li&gt;&lt;p&gt;You attempt to declare a variable persistent and another variable with the same name exists in the current workspace. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;You specify a variable as a function input or output argument, and then try to declare that variable as persistent within the same function. For example, the following persistent declaration is invalid: &lt;/p&gt;&lt;p&gt;&lt;code&gt;function&amp;nbsp;myfun(argA)&lt;br/&gt;persistent&amp;nbsp;argA&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;For more information on variables and the workspace, see &lt;a href=\&quot;matlab:helpview([docroot &#39;/techdoc/matlab_prog/matlab_prog.map&#39;],&#39;persistent_variables&#39;)\&quot; target=\&quot;_blank\&quot;&gt;Persistent Variables&lt;/a&gt;.&lt;/p&gt;&lt;br/&gt;</entry>
		<entry key="usedAcrossFunctionsTooltipMessage">The scope of variable &#39;\{0}&#39; spans multiple functions.</entry>
		<entry key="usedAcrossFunctionsExtendedTooltipMessage">&lt;strong&gt;Additional Information&lt;/strong&gt;&lt;br/&gt;&lt;p&gt;Variables within nested functions are accessible to more than just their immediate function. A variable, &lt;code&gt;x&lt;/code&gt;, to which you assign a value or use within a nested function resides in the workspace of the outermost function that both contains the nested function and accesses &lt;code&gt;x&lt;/code&gt;. Therefore, the scope of &lt;code&gt;x&lt;/code&gt; is the function to which this workspace belongs, and all functions nested to any level within that function.&lt;/p&gt;&lt;p&gt;If you intentionally use a variable in this manner, it is not a problem. For examples, see the MATLAB Programming Demo on Nested Functions.&lt;/p&gt;&lt;p&gt;However, if you unintentionally use a variable in this manner, it can result in unexpected behavior. If the highlighting indicates that the scope of a variable spans multiple functions, and that was not your intent, consider:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Renaming the nested function variable so it does not match the outer function variable name.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Passing the variable into the function as an input argument instead of using the variable directly within the nested function.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;For more information, see &lt;a href=\&quot;matlab:helpview([docroot &#39;/techdoc/matlab_prog/matlab_prog.map&#39;],&#39;nested_functions_scope&#39;)\&quot; target=\&quot;_blank\&quot;&gt;Variable Scope in Nested Functions&lt;/a&gt;.&lt;/p&gt;&lt;br/&gt;</entry>
	</message>
</rsccat>
