<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright 2024 The MathWorks, Inc.-->

<rsccat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" locale="ja_JP" product="rich_text_component" xsi:noNamespaceSchemaLocation="../../resources/schema/msgcat.xsd">
  <message>
    <entry key="persistentTooltipMessage">変数 '\{0}' のスコープは同じ関数に対する複数の呼び出し間で変わりません。</entry>
    <entry key="persistentExtendedTooltipMessage">&lt;strong&gt;追加情報&lt;/strong&gt;&lt;br/&gt;&lt;p&gt;永続と宣言された変数は、宣言を行った関数に対してローカルですが、MATLAB ではその関数に対する複数の呼び出し間で値がメモリに維持されます。永続変数は、宣言を行った関数内でのみ参照できます。このため、他の関数や MATLAB コマンド ラインで、永続変数の値が変更されることはありません。&lt;/p&gt;&lt;p&gt; メモリ内の関数を消去したり、変更したりすると、この関数によって宣言された永続変数もすべて消去されます。MATLAB を終了するまで関数をメモリ内に保持するには、&lt;code&gt;&lt;a href=\"matlab:doc mlock\" target=\"_blank\"&gt;mlock&lt;/a&gt;&lt;/code&gt; を使用します。 &lt;/p&gt;&lt;p&gt; 次の場合、MATLAB ではエラーが返されます。&lt;ul&gt;&lt;li&gt;&lt;p&gt;変数を永続として宣言する際に、同じ名前の変数が現在のワークスペース内に存在する場合。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;変数を関数の入力引数または出力引数として指定し、次にこの変数を同じ関数内で永続として宣言しようとする場合。たとえば、次の persistent 宣言は無効です: &lt;/p&gt;&lt;p&gt;&lt;code&gt;function&amp;nbsp;myfun(argA)&lt;br/&gt;persistent&amp;nbsp;argA&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;変数とそのワークスペースの詳細については、「&lt;a href=\"matlab:helpview([docroot '/techdoc/matlab_prog/matlab_prog.map'],'persistent_variables')\" target=\"_blank\"&gt;永続変数&lt;/a&gt;」を参照してください。&lt;/p&gt;&lt;br/&gt;</entry>
    <entry key="usedAcrossFunctionsTooltipMessage">変数 '\{0}' のスコープは複数の関数にまたがります。</entry>
    <entry key="usedAcrossFunctionsExtendedTooltipMessage">&lt;strong&gt;追加情報&lt;/strong&gt;&lt;br/&gt;&lt;p&gt;入れ子関数内の変数には、直接の関数だけでなく、他の関数もアクセスすることができます。入れ子関数内で値を割り当てたり、使用したりする変数 &lt;code&gt;x&lt;/code&gt; は、この入れ子関数を含み &lt;code&gt;x&lt;/code&gt; にアクセス可能な一番外側の関数のワークスペース内に格納されます。このため、&lt;code&gt;x&lt;/code&gt; のスコープは、ワークスペースを所有する関数と、この関数内の任意のレベルにある入れ子関数となります。&lt;/p&gt;&lt;p&gt;この方法で意図的に変数を使用する場合、問題はありません。たとえば、入れ子関数に関する MATLAB Programming デモを参照してください。&lt;/p&gt;&lt;p&gt;ただし、この方法で意図せず変数を使用する場合は、予期しない動作が発生する可能性があります。強調表示によって変数のスコープが複数の関数にまたがっていることが示されており、これが意図的でない場合は、以下を検討してください。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;入れ子関数の変数名を変更して、外側の関数の変数名と一致しないようにする。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;入れ子関数内で直接変数を使用する代わりに、入力引数として関数に変数を渡す。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;詳細については、「&lt;a href=\"matlab:helpview([docroot '/techdoc/matlab_prog/matlab_prog.map'],'nested_functions_scope')\" target=\"_blank\"&gt;入れ子関数の変数のスコープ&lt;/a&gt;」を参照してください。&lt;/p&gt;&lt;br/&gt;</entry>
  </message>
</rsccat>
