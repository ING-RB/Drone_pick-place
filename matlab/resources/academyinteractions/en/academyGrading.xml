<?xml version="1.0" encoding="UTF-8" ?>
<rsccat version="1.0" locale="en_US" product="academyinteractions" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../schema/msgcat.xsd">
    <message>
        <entry key="zeroth">zeroth</entry>
        <entry key="first">first</entry>
        <entry key="second">second</entry>
        <entry key="third">third</entry>
        <entry key="fourth">fourth</entry>
        <entry key="fifth">fifth</entry>
        <entry key="sixth">sixth</entry>
        <entry key="seventh">seventh</entry>
        <entry key="eighth">eighth</entry>
        <entry key="ninth">ninth</entry>
        <entry key="tenth">tenth</entry>
        <entry key="MINUS">subtraction operator</entry>
        <entry key="MUL">matrix multiplication operator</entry>
        <entry key="DIV">divide operator</entry>
        <entry key="LDIV">backslash operator</entry>
        <entry key="EXP">exponent operator</entry>
        <entry key="DOTMUL">dot multiply operator</entry>
        <entry key="DOTDIV">dot divide operator</entry>
        <entry key="DOTLDIV">dot backslash operator</entry>
        <entry key="DOTEXP">dot exponent operator</entry>
        <entry key="ANDAND">logical AND operator</entry>
        <entry key="OROR">logical OR operator</entry>
        <entry key="LT">less than operator</entry>
        <entry key="GT">greater than operator</entry>
        <entry key="LE">less than or equal to operator</entry>
        <entry key="GE">greater than or equal to operator</entry>
        <entry key="PLUS">addition operator</entry>
        <entry key="AND">logical AND operator</entry>
        <entry key="OR">logical OR operator</entry>
        <entry key="EQ">equality operator</entry>
        <entry key="NE">inequality operator</entry>
        <entry key="NOT">logical NOT operator</entry>
        <entry key="UMINUS">unary minus operator</entry>
        <entry key="UPLUS">unary plus operator</entry>
        <entry key="DOTTRANS">transpose operator</entry>
        <entry key="TRANS">transpose operator</entry>
        <entry key="AT">function handle operator</entry>
        <entry key="BANG">bang operator</entry>
        <entry key="syntaxError">Syntax error. </entry>
        <entry key="correct">Correct! </entry>
        <entry key="incorrect">Incorrect! </entry>
        <entry key="example">Example: </entry>
        <entry key="missingSingleQuotes">Use single quotes (&apos;&apos;) around the string &lt;code&gt;{0}&lt;/code&gt; to treat it as a MATLAB character array. </entry>
        <entry key="squareBracketForArrayAccess">If you are trying to use [] for accessing array elements, remember that MATLAB uses (). </entry>
        <entry key="shouldCallAFunction">Your solution should use the &lt;code&gt;{0}&lt;/code&gt; function. </entry>
        <entry key="shouldNotCallAFunction">Your solution does not need to use the &lt;code&gt;{0}&lt;/code&gt; function. </entry>
        <entry key="shouldIndexIntoVariable">Your solution should index into the &lt;code&gt;{0}&lt;/code&gt; variable. </entry>
        <entry key="shouldNotIndexIntoVariable">Your solution does not need to index into the &lt;code&gt;{0}&lt;/code&gt; variable. </entry>
        <entry key="shouldUseVariable">Your solution should access the &lt;code&gt;{0}&lt;/code&gt; variable. </entry>
        <entry key="shouldNotUseVariable">Your solution does not need to access the &lt;code&gt;{0}&lt;/code&gt; variable. </entry>
        <entry key="shouldModifyVariable">Your solution should modify the &lt;code&gt;{0}&lt;/code&gt; variable. </entry>
        <entry key="shouldNotModifyVariable">Your solution does not need to modify the &lt;code&gt;{0}&lt;/code&gt; variable. </entry>
        <entry key="shouldExtractContentFrom">Your solution should use curly braces to extract contents from the &lt;code&gt;{0}&lt;/code&gt; array. </entry>
        <entry key="shouldNotExtractContentFrom">Your solution does not need to extract contents from the &lt;code&gt;{0}&lt;/code&gt; array. </entry>
        <entry key="shouldModifyContentWithin">Your solution should use curly braces to modify the content within the &lt;code&gt;{0}&lt;/code&gt; array. </entry>
        <entry key="shouldNotModifyContentWithin">Your solution should use curly braces to modify the content within the &lt;code&gt;{0}&lt;/code&gt; array. </entry>
        <entry key="functionCallShouldUseParentheses">The call to &lt;code&gt;{0}&lt;/code&gt; should use parentheses &lt;code&gt;()&lt;/code&gt; to pass the arguments. </entry>
        <entry key="indexShouldUseParentheses">Try using parentheses &lt;code&gt;()&lt;/code&gt; when indexing into &lt;code&gt;{0}&lt;/code&gt;. </entry>
        <entry key="indexShouldUseCurlyBraces">Try using curly braces &lt;code&gt;'{''}'&lt;/code&gt; when indexing into &lt;code&gt;{0}&lt;/code&gt;. </entry>
        <entry key="callShouldHaveDifferentNumberOfInputs">The call to the &lt;code&gt;{0}&lt;/code&gt; function should contain {1} input(s). </entry>
        <entry key="indexShouldHaveDifferentNumberOfInputs">When indexing into &lt;code&gt;{0}&lt;/code&gt;, consider using {1} input(s). </entry>
        <entry key="inputsAreIncorrect">The inputs to &lt;code&gt;{0}&lt;/code&gt; are incorrect. </entry>
        <entry key="inputWasExpectedToBeDifferent">The {0} input was expected to have the value &lt;code&gt;{1}&lt;/code&gt;. </entry>
        <entry key="inputArgumentIsNotInCorrectSpot">&lt;code&gt;{0}&lt;/code&gt; was expected to be the {1} input, not the {2}. </entry>
        <entry key="noNeedToObtainMultipleOutputArguments">Your solution does not need to obtain multiple outputs. </entry>
        <entry key="shouldObtainMultipleOutputArguments">Try using square brackets (&lt;code&gt;[]&lt;/code&gt;) to obtain multiple outputs. </entry>
        <entry key="noNeedToManuallyCreateArray">Your solution does not need to manually create arrays with square brackets (&lt;code&gt;[]&lt;/code&gt;). </entry>
        <entry key="shouldManuallyCreateArray">Try using square brackets to manually enter an array (&lt;code&gt;[3 5 8]&lt;/code&gt;) . </entry>
        <entry key="noNeedToRemoveArrayElements">Your solution does not need to remove array elements (&lt;code&gt;... = []&lt;/code&gt;). </entry>
        <entry key="shouldRemoveArrayElements">Try removing array elements by making an assignment to the empty array (&lt;code&gt;... = []&lt;/code&gt;). </entry>
        <entry key="noNeedToCreateAnEmptyArray">Your solution does not need to create an empty array (&lt;code&gt;[]&lt;/code&gt;). </entry>
        <entry key="shouldCreateAnEmptyArray">Try using an empty array (&lt;code&gt;[]&lt;/code&gt;) in your submission. </entry>
        <entry key="noNeedToManuallyCreateCellArray">Your solution does not need to manually create cell arrays with curly braces (&lt;code&gt;'{''}'&lt;/code&gt;). </entry>
        <entry key="shouldManuallyCreateCellArray">Try using curly braces to manually create a cell array (&lt;code&gt;'{'3 &apos;foo&apos; 8'}'&lt;/code&gt;) . </entry>
        <entry key="noNeedToCreateEmptyCellArray">Your solution does not need to create an empty cell array (&lt;code&gt;'{''}'&lt;/code&gt;). </entry>
        <entry key="shouldCreateEmptyCellArray">Try using an empty cell array (&lt;code&gt;'{''}'&lt;/code&gt;) in your submission. </entry>
        <entry key="incorrectUseOfMultipleOutputArgs">The output argument expression seems incorrect. </entry>
        <entry key="incorrectUseOfManuallyCreatingArrays">The array being created using square brackets (&lt;code&gt;[]&lt;/code&gt;) seems incorrect. </entry>
        <entry key="incorrectUseOfRemovingArrayElements">There is an issue with the way array elements are being removed. </entry>
        <entry key="incorrectUseOfCreatingEmptyArray">There is an issue with the way the empty array is created. </entry>
        <entry key="incorrectUseOfManuallyCreatingCellArrays">The cell array being created using curly braces (&lt;code&gt;'{''}'&lt;/code&gt;) seems incorrect. </entry>
        <entry key="incorrectUseOfCreatingEmptyCellArray">There is an issue with the way the empty cell array is created. </entry>
        <entry key="expectedMRows">There were expected to be {0} row(s). </entry>
        <entry key="rowSeparationTip">Remember that you can use a semicolon (&lt;code&gt;;&lt;/code&gt;) to separate rows. </entry>
        <entry key="expectedNColumns">The {0} row was expected to have {1} columns. </entry>
        <entry key="columnSeparationTip">Remember that you can use a comma (&lt;code&gt;,&lt;/code&gt;) or space to separate columns. </entry>
        <entry key="expectedDifferentRowArgument">The {0} value of the {1} row was expected to be &lt;code&gt;{2}&lt;/code&gt;. </entry>
        <entry key="switchedArgumentOrderInRow">In the {0} row, &lt;code&gt;{1}&lt;/code&gt; should be the {2} argument. </entry>
        <entry key="shouldNotUseColon">Your solution does not need to use the colon (&lt;code&gt;:&lt;/code&gt;) operator. </entry>
        <entry key="useColonToAccessAllElements">Try using the colon operator (&lt;code&gt;{0}&lt;/code&gt;) to access all elements of an array. </entry>
        <entry key="useColonToAccessAllRows">Try using the colon operator (&lt;code&gt;{0}&lt;/code&gt;) to access all rows. </entry>
        <entry key="useColonToAccessAllColumns">Try using the colon operator (&lt;code&gt;{0}&lt;/code&gt;) to access all columns. </entry>
        <entry key="useColonToAccessAllElementsOfADimension">Try using the colon operator (&lt;code&gt;{0}&lt;/code&gt;) to access all elements of a particular dimension. </entry>
        <entry key="useColonToCreateVector">Try using the colon operator (&lt;code&gt;{0}&lt;/code&gt;) to create a vector. </entry>
        <entry key="needToUseALoneColon">Use a single colon (&lt;code&gt;{0}&lt;/code&gt;) within a subscript to select an entire row or column. </entry>
        <entry key="needToSpecifyInitialAndFinalValue">The initial and final value of the vector should be specified in the colon (&lt;code&gt;{0}&lt;/code&gt;) operator. </entry>
        <entry key="badStartValueInColonExpression">The initial value of the vector should be &lt;code&gt;{0}&lt;/code&gt;. </entry>
        <entry key="badSpacingValueInColonExpression">The spacing of the vector should be &lt;code&gt;{0}&lt;/code&gt;. </entry>
        <entry key="badEndValueInColonExpression">The final value of the vector should be &lt;code&gt;{0}&lt;/code&gt;. </entry>
        <entry key="unnecessaryStatement">Your solution does not need to use a &lt;code&gt;{0}&lt;/code&gt; statement. </entry>
        <entry key="missingStatement">Use a &lt;code&gt;{0}&lt;/code&gt; statement in your solution. </entry>
        <entry key="noNeedToUseDotOperator">You do not need to use the dot operator (&lt;code&gt;a.b&lt;/code&gt;) in your submission. </entry>
        <entry key="shouldUseDotOperator">Try using the dot operator (&lt;code&gt;a.b&lt;/code&gt;) in your submission. </entry>
        <entry key="useDotOperatorOnVariable">Your solution should reference a field of the variable &lt;code&gt;{0}&lt;/code&gt; (try using the dot operator).</entry>
        <entry key="checkVariableNameCapitalization">Check the variable name capitalization. </entry>
        <entry key="useDotOperatorForField">Use the dot operator (&lt;code&gt;.&lt;/code&gt;) to reference the property &lt;code&gt;{0}&lt;/code&gt;. </entry>
        <entry key="noAssignmentNecessary">Your solution does not need to assign the value to an output variable. </entry>
        <entry key="shouldUseAssignment">Your solution should assign the value to &lt;code&gt;{0}&lt;/code&gt;. </entry>
        <entry key="valueAssignedIncorrect">The value being assigned is incorrect. </entry>
        <entry key="wrongVariableInAssignment">Your solution should assign the value to &lt;code&gt;{0}&lt;/code&gt;. </entry>
        <entry key="switchedAssignmentOrder">The inputs of the assignment are switched. They should be &lt;code&gt;{0}&lt;/code&gt;. </entry>
        <entry key="valueBeingAssignedShouldBeOutput">The value being assigned ( &lt;code&gt;{0}&lt;/code&gt; ) should be the output argument. </entry>
        <entry key="outputShouldBeValueBeingAssigned">The output argument of the assignment ( &lt;code&gt;{0}&lt;/code&gt; ) should instead be the value being assigned. </entry>
        <entry key="anonymousFunction">anonymous function</entry>
        <entry key="anonymousFunctionUnnecessary">Your solution does not need to use an {0}. </entry>
        <entry key="tryUsingAnonymousFunction">Try using an {0} in your solution. </entry>
        <entry key="anonFunctionHasWrongNumInputs">The anonymous function was expected to contain {0} inputs. </entry>
        <entry key="noNeedToUseOperator">Your solution does not need to use the {0} (&lt;a target="_blank" href="{1}"&gt;{2}&lt;/a&gt;). </entry>
        <entry key="shouldUseOperator">Your solution should use the {0} (&lt;a target="_blank" href="{1}"&gt;{2}&lt;/a&gt;). </entry>
        <entry key="left">left</entry>
        <entry key="right">right</entry>
        <entry key="badOperatorArgument">The {0} input to the {1} was expected to be &lt;code&gt;{2}&lt;/code&gt;. </entry>
        <entry key="switchedBothOperatorArguments">The inputs to the {0} are switched. They should be &lt;code&gt;{1}&lt;/code&gt;. </entry>        
        <entry key="switchedOneOperatorArgument">The {0} input to the {1} ( &lt;code&gt;{2}&lt;/code&gt; ) should be the {3} input. </entry>
        <entry key="shouldUseInt">Your solution should contain an integer with the value &lt;code&gt;{0}&lt;/code&gt;. </entry>
        <entry key="noNeedToUseInt">Your solution does not need to contain an integer with the value &lt;code&gt;{0}&lt;/code&gt;. </entry>
        <entry key="shouldUseDouble">Your solution should contain a number with the value &lt;code&gt;{0}&lt;/code&gt;. </entry>
        <entry key="noNeedToUseDouble">Your solution does not need to contain a number with the value &lt;code&gt;{0}&lt;/code&gt;. </entry>
        <entry key="shouldUseString">Your solution should contain a character array with the value &lt;code&gt;{0}&lt;/code&gt;. </entry>
        <entry key="noNeedToUseString">Your solution does not need to contain a character array with the value &lt;code&gt;{0}&lt;/code&gt;. </entry>
        <entry key="shouldUseId">Your solution should contain a reference to the identifier &lt;code&gt;{0}&lt;/code&gt;. </entry>
        <entry key="noNeedToUseId">Your solution does not need to contain a reference to the identifier &lt;code&gt;{0}&lt;/code&gt;. </entry>
        <entry key="variableHasIncorrectDimensions">The variable &lt;code&gt;{0}&lt;/code&gt; has incorrect dimensions. &lt;br/&gt;Expected size: [{1}] &lt;br/&gt;Actual size: [{2}]</entry>
        <entry key="variableHasIncorrectDataType">The variable &lt;code&gt;{0}&lt;/code&gt; has incorrect datatype. &lt;br/&gt;Expected type: [{1}] &lt;br/&gt;Actual type: [{2}]</entry>
        <entry key="variableIsIncorrect">The variable &lt;code&gt;{0}&lt;/code&gt; appears to be incorrect. </entry>
        <entry key="checkCapitalizationOfCharacters">Check the case of each character in the string &lt;code&gt;{0}&lt;/code&gt;. </entry>
        <entry key="stateDesiredValue">The desired value of &lt;code&gt;{0}&lt;/code&gt; is: {1} &lt;br/&gt;The actual value is: {2}</entry>
        <entry key="variableWasNotCreated">The variable &lt;code&gt;{0}&lt;/code&gt; was not created. </entry>
        <entry key="checkMisspelledVariableName">Check if you have misspelled the variable name &lt;code&gt;{0}&lt;/code&gt;. </entry>
        <entry key="scalarValueDifference">The value differs from the desired value by an amount on the order of &lt;code&gt;{0}&lt;/code&gt;. </entry>
        <entry key="nonscalarValueDifference">One or more elements differ the desired value by an amount on the order of &lt;code&gt;{0}&lt;/code&gt;. </entry>
        <entry key="missingStructField">The field &lt;code&gt;{0}&lt;/code&gt; is missing from the structure. </entry>
        <entry key="missingSeveralStructFields">These fields are missing from the structure: &lt;code&gt;{0}&lt;/code&gt;. </entry>
        <entry key="checkMisspelledFieldName">Check if you have misspelled the field name(s) {0}. </entry>
        <entry key="checkMisspelledFieldNameGeneric">Check if you misspelled any of the field names. </entry>
        <entry key="checkFieldValue">Check the value of the field(s): {0}</entry>
        <entry key="incorrectTableVariableOrder">The variables of the table are not in the correct order. </entry>
        <entry key="tableVariableCapitalizationIssue">The table&apos;s variable names are case sensitive. Check if the variable names have the proper case. </entry>
        <entry key="checkTableVariableValues">Check the value of the following variables of the table: {0}</entry>
    </message>
</rsccat>