<?xml version="1.0" encoding="UTF-8" ?>
<!-- Copyright 2015-2024 The MathWorks, Inc. -->
<rsccat version="1.0" locale="en_US" product="shared_tracking" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../schema/msgcat.xsd">
    <message>
        <!-- Entries shared among EKF/UKF/PF blocks -->
        <entry key="maskPromptDouble" translate="false">double</entry>
        <entry key="maskPromptSingle" translate="false" >single</entry>        
        <entry key="maskPromptDataType">Data type:</entry>
        <entry key="maskPromptSampleTime">Sample time:</entry>
        <entry key="maskPromptSampleTimeNoInheritance">Sample times</entry>
        <entry key="maskPromptOutputStateCovariance">Output state estimation error covariance</entry>
        <entry key="maskPromptAddMeasurement">Add Measurement</entry>
        <entry key="maskPromptRemoveMeasurement">Remove Measurement</entry>        
        <entry key="maskPromptEnablePort">Add Enable port</entry>
        <entry key="maskPromptFunction">Function:</entry>
        <entry key="maskPromptEnableMultirate">Enable multirate operation</entry>
        <entry key="maskPromptStateTransition">State Transition</entry>
        <entry key="maskPromptInitialization">Initialization</entry>
        <entry key="maskPromptMeasurement1">Measurement 1</entry>
        <entry key="maskPromptMeasurement2">Measurement 2</entry>
        <entry key="maskPromptMeasurement3">Measurement 3</entry>
        <entry key="maskPromptMeasurement4">Measurement 4</entry>
        <entry key="maskPromptMeasurement5">Measurement 5</entry>        
        <entry key="maskPromptSystemModel">System Model</entry>
        <entry key="maskPromptCovariance">Covariance:</entry>
        <entry key="maskPromptCircularVariables">Circular variables:</entry>
        <entry key="maskPromptUseCurrentEstimator">Use the current measurements to improve state estimates</entry>
        
        <!-- Entries shared among EKF/UKF blocks -->
        <entry key="maskPromptEKFUKFAdditiveNoise">Additive</entry>
        <entry key="maskPromptEKFUKFNonAdditiveNoise">Nonadditive</entry>
        <entry key="maskPromptEKFUKFTimeVarying">Time-varying</entry>
        <entry key="maskPromptEKFUKFInitialState">Initial state:</entry>
        <entry key="maskPromptEKFUKFInitialCovariance">Initial covariance:</entry>
        <entry key="maskPromptEKFUKFMeasurementNoise">Measurement noise:</entry>
        <entry key="maskPromptEKFUKFMeasurementWrapping">Enable measurement wrapping</entry>
        <entry key="maskPromptEKFUKFProcessNoise">Process noise:</entry>        
        <entry key="maskPromptEKFUKFSettings">Settings</entry>
        <entry key="maskPromptEKFUKFMultirate">Multirate</entry>
        
        <!-- PF block -->
        <entry key="maskPromptPFTitle" translate="false">Particle Filter</entry>              
        <entry key="maskPromptPFDescription">
            Estimate states of a nonlinear plant model using a particle 
            filter algorithm. Use Simulink Function blocks or .m MATLAB 
            Functions to specify state transition and measurement likelihood 
            functions.
        </entry>
        <entry key="maskPromptPFInitialDistribution" note="statistical distribution">Distribution:</entry>
        <entry key="maskPromptPFGaussian">Gaussian</entry>
        <entry key="maskPromptPFUniform">Uniform</entry>        
        <entry key="maskPromptPFCustom">Custom</entry>
        <entry key="maskPromptPFNumParticles">Number of particles:</entry>
        <entry key="maskPromptPFMean">Mean:</entry>
        <entry key="maskPromptPFStateBounds">State bounds:</entry>
        <entry key="maskPromptPFParticles">Particles:</entry>
        <entry key="maskPromptPFWeights">Weights:</entry>
        <entry key="maskPromptPFResampling">Resampling</entry>
        <entry key="maskPromptPFResamplingMethod" note="gerund+noun">Resampling method:</entry>
        <entry key="maskPromptPFMultinomial">Multinomial</entry>
        <entry key="maskPromptPFSystematic">Systematic</entry>
        <entry key="maskPromptPFStratified">Stratified</entry>
        <entry key="maskPromptPFResidual">Residual</entry>
        <entry key="maskPromptPFTriggerMethod">Trigger method:</entry>
        <entry key="maskPromptPFRatio">Ratio</entry>
        <entry key="maskPromptPFMinEffectiveParticleRatio">Minimum effective particle ratio:</entry>
        <entry key="maskPromptPFInterval">Interval</entry>
        <entry key="maskPromptPFSamplingInterval" note="gerund+noun">Sampling interval:</entry>
        <entry key="maskPromptPFRandomNumberGeneratorOptions">Random Number Generator Options</entry>
        <entry key="maskPromptPFRandomness">Randomness:</entry>
        <entry key="maskPromptPFRepeatable">Repeatable</entry>
        <entry key="maskPromptPFNotRepeatable">Not repeatable</entry>
        <entry key="maskPromptPFSeed">Seed:</entry>
        <entry key="maskPromptPFStateOrientation">State orientation:</entry>
        <entry key="maskPromptPFRow">Row</entry>
        <entry key="maskPromptPFColumn">Column</entry>
        <entry key="maskPromptPFOutputs">Outputs</entry>
        <entry key="maskPromptPFStateEstimationMethod">State estimation method:</entry>
        <entry key="maskPromptPFStateEstMethodMean">Mean</entry>
        <entry key="maskPromptPFStateEstMethodMaxWeight" note="short for maximum weight">Maxweight</entry>
        <entry key="maskPromptPFStateEstMethodNone">None</entry>
        <entry key="maskPromptPFOutputParticles">Output all particles</entry>
        <entry key="maskTooltipPFOutputParticles">Output all particles (state hypotheses). This option is always enabled if the state estimation method is 'none'.</entry>
        <entry key="maskPromptPFOutputWeights">Output weights</entry>
        <entry key="maskPromptPFBlockOutputsMultirate">Block outputs, Multirate</entry>
        <entry key="maskTooltipPFOutputStateCovariance">Output state estimation error covariance. This option is only valid when the state estimation method is 'mean'.</entry>
        
        <!-- EKF block -->
        <entry key="maskPromptEKFTitle" translate="false">Extended Kalman Filter</entry>
        <entry key="maskPromptEKFDescription">
            Discrete-time extended Kalman filter. Estimate states of a 
            nonlinear plant model. Use Simulink Function blocks or .m 
            MATLAB Functions to specify state transition and measurement 
            functions.\n\nSee block help for function syntaxes, which 
            depend on if noise is additive or nonadditive. 
        </entry>        
        <entry key="maskPromptEKFJacobian">Jacobian</entry>
        
        <!-- UKF block -->
        <entry key="maskPromptUKFTitle" translate="false">Unscented Kalman Filter</entry>
        <entry key="maskPromptUKFDescription">
            Discrete-time unscented Kalman filter. Estimate states of a 
            nonlinear plant model. Use Simulink Function blocks or .m 
            MATLAB Functions to specify state transition and measurement 
            functions.\n\nSee block help for function syntaxes, which 
            depend on if noise is additive or nonadditive.
        </entry>         
        <entry key="maskPromptUKFUTParameters">Unscented Transformation Parameters</entry>
        <entry key="maskPromptUKFAlpha" translate="false">Alpha:</entry>
        <entry key="maskPromptUKFBeta" translate="false">Beta:</entry>
        <entry key="maskPromptUKFKappa" translate="false">Kappa:</entry>        
        
        
        
        
        <!-- Error Messages -->
        <entry key="errorLicenseRequired">Requires Control System Toolbox or System Identification Toolbox license.</entry>
        <entry key="errorExpectedNumeric">{0} must be a number.</entry>
        <entry key="errorExpectedNumericOrLogical">{0} must be a number or a logical.</entry>
        <entry key="errorExpectedFloat">Block parameter "{0}" must be double or single, instead of {1}.</entry>
        <entry key="errorExpectedNonempty">{0} must be nonempty.</entry>
        <entry key="errorExpectedReal">{0} must be real.</entry>
        <entry key="errorExpectedFinite">{0} must be finite.</entry>
        <entry key="errorExpectedVector">{0} must be a vector.</entry>
        <entry key="errorExpectedMatrix">{0} must be a 2-dimensional matrix.</entry>
        <entry key="errorExpectedScalar">{0} must be a scalar.</entry>
        <entry key="errorExpectedNonsparse">Invalid {0}. Sparse matrices are not supported.</entry>
        <entry key="errorExpectedPositive">{0} must be positive.</entry>
        <entry key="errorExpectedNonnegative">{0} must be nonnegative.</entry>
        <entry key="errorExpectedInteger">{0} must be an integer.</entry>
        <entry key="errorExpectedNonNaN">{0} must be non-NaN</entry>
        <entry key="errorIncorrectNumel">{0} expects {1} elements, but contains {2}.</entry>
        <entry key="errorIncorrectSize">{0} must be of size {1}, but it is {2}.</entry>
        <entry key="errorNotLessEqual">{0} must be less than or equal to {1}, but it is {2}.</entry>
        <entry key="errorNotGreaterEqual">{0} must be greater than or equal to {1}, but it is {2}.</entry>        
        <entry key="errorIncorrectNumberOfColumns">{0} must have {1,number,integer} columns, but it has {2,number,integer}.</entry>
        <entry key="errorIncorrectNumberOfRows">{0} must have {1,number,integer} rows, but it has {2,number,integer}.</entry>
        <entry key="errorMustBeScalarVectorMatrix">{0} must be a scalar, vector or a matrix.</entry>  
        <entry key="errorFcnNotFound">Unable to find function {0}. Specify name of a MATLAB function on the path (without the file extension), or a Simulink function.</entry>
        <entry key="errorSimulinkFcnCommentedOut">Simulink function block {0} is commented out.</entry>
        <entry key="errorFcnNotSpecified">Specify state transition and 
        measurement function names.</entry>
        <entry key="errorNargCheck">Encountered an error when checking 
        number of input and output arguments of function {0}. Likely cause is that this is a script and not a function.</entry>
        <entry key="errorAnonymousFcn">Anonymous functions are not 
        supported. Specify {0} as a MATLAB or Simulink function.</entry>
        <entry key="errorSLFcnNargin">Simulink function {0} expects 
        {1,number,integer} input arguments, but receives {2,number,integer}.</entry>
        <entry key="errorSLFcnNargout">Simulink function {0} expects 
        {1,number,integer} output arguments, but receives 
        {2,number,integer}.</entry>
        <entry key="errorMLFcnNargin">Function {0} expects {1,number,integer} 
        inputs, or {2,number,integer} if it has an optional extra input. 
        Instead it receives {3,number,integer}.</entry>        
        <entry key="errorMLFcnNargout">Function {0} expects 
        {1,number,integer} outputs, but receives {2,number,integer}.</entry>
        <entry key="errorJacobianFcnTypeMismatch">Function {0} and its 
        Jacobian {1} either must both be MATLAB functions or both be 
        Simulink functions.</entry>
        <entry key="errorJacobianFcnNarginMismatch">Number of inputs in 
        function "{0}", {1,number,integer}, must match the number of inputs 
        in its Jacobian "{2}", {3,number,integer}.</entry>    
        <entry key="errorInheritedTs">Inherited sample time (-1) is not 
        supported. Specify {0} as a positive number.</entry>
        <entry key="errorNonIntegerMultipleSampleTime">Measurement {0} sample 
        time must be a positive integer multiple of the state transition 
        sample time.</entry>        
        <entry key="errorSignalCT"><![CDATA[<sldiag objui="inport" objparam="{0}" objname="{1}">Input port {0}</sldiag> of block "{1}" expects a 
        discrete-time signal, but receives a continuous-time signal.
        Consider using a "Zero-Order Hold" or "Rate Transition" block.]]></entry>
        <entry key="errorSignalSampleTimeMismatch"><![CDATA[<sldiag objui="inport" objparam="{0}" objname="{1}">Input port {0}</sldiag> of block "{1}" 
        expects a signal with sample time {2}, but its sample time is {3}.
        Consider using a "Zero-Order Hold" or "Rate Transition" block.]]></entry>
        <entry key="errorComplexSignal"><![CDATA[<sldiag objui="inport" objparam="{0}" objname="{1}">Input port {0}</sldiag> of block "{1}" 
        expects a signal of numeric type real, but receives complex-valued 
        signal.]]></entry>
        <entry key="errorDataTypeMismatchFloatingPoint"><![CDATA[<sldiag objui="inport" objparam="{2}" objname="{1}">Input port {2}</sldiag> of 
        block "{1}" expects a signal of data type "{0}", but receives "{3}". 
        Consider changing the data type specified in the block, or use a 
        "Data Type Conversion" block.]]></entry>
        <entry key="errorDataTypeMismatchEnable"><![CDATA[<sldiag objui="inport" objparam="{1}" objname="{0}">Input port {1}</sldiag> of block 
        "{0}" expects a signal of type double, single or boolean, but it 
        receives "{2}".]]></entry>
        <entry key="errorSignalDimensionMismatchEnable"><![CDATA[<sldiag objui="inport" objparam="{0}" objname="{1}">Input port {0}</sldiag> of 
        block "{1}" expects a scalar signal, but receives {2,number,integer} 
        elements.]]></entry>
        <entry key="errorSignalDimensionMismatchQ"><![CDATA[Input signal to <sldiag objui="inport" objparam="{0}" objname="{1}">port {0}</sldiag> of block 
        "{1}" must have dimensions [{2,number,integer}-by-{3,number,integer}].]]></entry>
        <entry key="errorSignalDimensionMismatchY"><![CDATA[Input signal to <sldiag objui="inport" objparam="{0}" objname="{1}">port {0}</sldiag>
        of block "{1}" must be {2,number,integer} element vector to match 
        the measurement noise covariance dimensions [{3,number,integer}-by-{4,number,integer}].]]></entry>
        <entry key="errorSignalDimensionNotSquare">Input signal to "{0}" 
        port of block "{1}" must be a square matrix.</entry>        
        <entry key="errorAdditiveMeasNoiseYAndRMismatch">Row and column 
        length of measurement noise covariance (R) in block "{0}", 
        {2,number,integer} and {3,number,integer}, must match the length of 
        measurement (y), {1,number,integer}, because measurement noise is 
        additive.</entry>
        <entry key="errorMultirateEnableMultiTasking">Multirate operation 
        is not supported when the Simulink model setting 
        'Treat each discrete rate as a separate task' is 'on'.</entry>
        <entry key="errorMaxNumberOfMeasurementModels">Maximum {0,number,integer}
        measurement models are supported in {1}.</entry>
        <entry key="errorMinNumberOfMeasurementModels">At least one measurement 
        model is required in {0}.</entry>
        <entry key="errorMaxNumberOfStates">Number of estimated states must 
        be less than 2^31.</entry>
        <!-- The following are used within the error messages, for referring to the 
        correct widget on the dialog with sufficient detail -->
        <entry key="errorPromptStateTransitionTs">State transition sample time</entry>
        <entry key="errorPromptMeasurementTs">Measurement {0} sample time</entry>   
        <entry key="errorPromptEKFUKFMeasurementNoiseCovariance">Measurement noise covariance</entry>
        <entry key="errorPromptEKFUKFProcessNoiseCovariance">Process noise covariance</entry>
		
        <!--Tracking Utilities Library --> 
        <entry key="DetectionConcatenationTitle">Detection Concatenation</entry>
        <entry key="DetectionConcatenationDesc">Combines object detection buses from multiple sensors onto a single output bus. Sensors include the Radar Detection Generator and Vision Detection Generator blocks. This is useful when detections from multiple sensor blocks are passed into a Multi-Object Tracker block.</entry>
        <entry key="trackConcatTitle">Track Concatenation</entry>
        <entry key="trackConcatDesc">The Track Concatenation block concatenates track buses originating from multiple sources into a single list of object tracks. The sources to this block must all use the objectTrack format and can be sensors, trackers, other track concatenation blocks, or other track-to-track fusion blocks. Use this block to concatenate tracks from multiple sources before passing them into the track-to-track fuser block.</entry> 		
    </message>
</rsccat>

<!-- LocalWords:  nonadditive nonsparse -->
