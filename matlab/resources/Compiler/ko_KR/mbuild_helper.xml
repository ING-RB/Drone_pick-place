<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright 2024 The MathWorks, Inc.-->

<rsccat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" locale="ko_KR" product="Compiler" xsi:noNamespaceSchemaLocation="../../resources/schema/msgcat.xsd">
  <message>
    <entry key="genericFailure">성공적으로 완료할 수 없습니다.\n{0}</entry>
    <entry key="responseFileError">응답 파일 {0} 읽기 오류</entry>
    <entry key="OutputSwitchMisuse">-output 스위치 다음에는 파일 이름이 와야 합니다.</entry>
    <entry key="OutdirSwitchMisuse">-outdir 스위치 다음에는 디렉터리 이름이 와야 합니다.</entry>
    <entry key="RspFilePermissionOpen">파일 "{0}"을(를) 열어서 쓸 수 없음: {1}.</entry>
    <entry key="RspFilePermissionWrite">파일 "{0}"에 쓸 수 없음: {1}.</entry>
    <entry key="unableToDisplayHelp">Cannot display help for function MBUILD.</entry>
    <entry key="mbuildHelp">MBUILD\t소스 파일을 컴파일하고, MATLAB에서 생성된 공유 라이브러리에 링크\n\n 사용법:\n \tmbuild [options ...] file [files ...]\n\n 설명:\n \tMBUILD는 고객이 작성한 C 또는 C++ 코드를 컴파일하고, \n \t이를 MATLAB 파일에서 생성된 C 또는 C++ 공유 라이브러리에 링크합니다. 결과는 \n \t독립형 실행 파일입니다. \n\n \tMBUILD는 소스 파일과 오브젝트 파일, 라이브러리 파일의 \n \t모든 조합을 인수로 받습니다. \n\n \tMBUILD에 대한 명령줄 옵션은 아래 "명령줄 \n \t옵션" 섹션에 정의되어 있습니다. \n\n \tMATLAB 명령 프롬프트, Windows 명령 프롬프트 또는 UNIX 셸에서 \n \tMBUILD를 실행할 수 있습니다. MBUILD는 Windows에서는 이름이 mbuild.bat이고 \n \tUNIX에서는 이름이 mbuild인 스크립트로, \n \t[matlabroot '/bin']으로 지정된 디렉터리에 있습니다. \n\n \t지정된 첫 번째 파일 이름(파일 이름 확장자 제외)이 \n \t결과로 생성되는 실행 파일의 이름이 됩니다. 외부 참조를 충족하기 위해 소스, 객체 또는 \n \t라이브러리 파일을 추가로 지정할 수 있습니다. 실행 파일을 빌드할 때 \n \tC 또는 C++ 소스 파일을 지정할 수 있습니다. \n\n \tMBUILD는 옵션 파일을 사용하여 변수와 값을 지정하며, \n \t이러한 변수와 값은 컴파일러와 링커, 기타 툴에 인수로 전달됩니다. \n \tMBUILD에 대한 명령줄 옵션은 옵션 파일 내용을 보충하거나 재정의할 수 있으며, \n \tMBUILD 동작의 기타 측면을 제어할 수도 \n \t있습니다. 자세한 내용은 아래 "옵션 파일 세부 정보" \n \t섹션을 참조하십시오.\n\n \t"-setup" 옵션 및 "-setup -client mbuild_com" 옵션을 사용하면 \n \tMBUILD는 설치된 컴파일러를 검색하며 \n \t사용자가 향후 MBUILD 호출을 위한 디폴트 값으로 사용할 옵션 파일을 선택할 수 \n \t있게 됩니다. 자세한 내용은 아래에서 관련 옵션을 참조하십시오. \n\n \t이 릴리스에서 지원되는 컴파일러 목록은 다음을 참조하십시오: \n \thttps://www.mathworks.com/support/compilers/current_release/ \n\n 모든 플랫폼에서 사용 가능한 명령줄 옵션: \n \t-c \n \t 컴파일 전용. 오브젝트 파일은 생성하지만 실행 파일은 생성하지 않습니다. \n \t-D&lt;name&gt; \n \t C 전처리기에 대한 기호 이름을 정의합니다. 소스의 \n \t "#define &lt;name&gt;" 지시문과 동일합니다. 이 스위치 다음에 \n \t 공백을 추가하지 마십시오. \n \t-D&lt;name&gt;=&lt;value&gt; \n \t C 전처리기에 대한 기호 이름과 값을 정의합니다. 소스의 \n \t "#define &lt;name&gt; &lt;value&gt;" 지시문과 동일합니다. 이 스위치 다음에 \n \t 공백을 추가하지 마십시오. \n \t-f &lt;optionsfile&gt; \n \t 사용할 옵션 파일의 위치와 이름을 지정합니다. MBUILD의 \n \t 디폴트 옵션 파일 검색 메커니즘을 재정의합니다. \n \t-g \n \t 디버그에 사용할 추가 기호 정보를 포함한 \n \t 실행 파일을 만듭니다. 이 옵션은 작성된 오브젝트 코드를 \n \t 최적화하는 MBUILD의 디폴트 동작을 비활성화합니다(-O 옵션 참조). \n \t-h[elp] \n \t 이 메시지를 출력합니다. \n \t-I&lt;pathname&gt; \n \t &lt;pathname&gt;을 #include 파일을 검색할 디렉터리 목록에 \n \t 추가합니다. 이 스위치 다음에 공백을 추가하지 마십시오. \n \t-l&lt;name&gt; \n \t 오브젝트 라이브러리에 링크합니다. Windows에서는 &lt;name&gt;은 \n \t "&lt;name&gt;.lib" 또는 "lib&lt;name&gt;.lib"로 확장되고, UNIX에서는 "lib&lt;name&gt;.so" \n \t 또는 "lib&lt;name&gt;.dylib"로 확장됩니다. 이 스위치 다음에 공백을 추가하지 마십시오. \n \t-L&lt;directory&gt; \n \t &lt;directory&gt;를 -l 옵션으로 지정된 라이브러리를 검색할 \n \t 디렉터리 목록에 추가합니다. UNIX 시스템에서는 \n \t 런타임 라이브러리 경로도 설정해야 합니다. 이 스위치 다음에 \n \t 공백을 추가하지 마십시오. \n \t-n \n \t 비실행 모드. MBUILD가 실행할 모든 명령을 \n \t 출력하지만, 실제로 실행하지는 않습니다. \n \t-O \n \t 오브젝트 코드를 최적화합니다. 이 옵션을 명령줄에 포함하면 최적화가 \n \t 기본적으로 활성화됩니다. -g 옵션이 \n \t -O 옵션 없이 표시되면 최적화가 비활성화된 것입니다. \n \t-outdir &lt;dirname&gt; \n \t 디렉터리 &lt;dirname&gt;에 모든 출력 파일을 둡니다. \n \t-output &lt;resultname&gt; \n \t &lt;resultname&gt;이라는 이름의 실행 파일을 생성합니다. 적절한 실행 파일 \n \t 확장자가 자동으로 추가됩니다. MBUILD의 디폴트 \n \t 실행 파일 이름 지정 메커니즘을 재정의합니다. \n \t-setup \n \t C/C++ 컴파일러 옵션 파일을 사용자 프로파일 \n \t 폴더(PREFDIR 명령에 의해 반환됨)에 배치하여, \n \t 향후 MBUILD 호출을 위한 디폴트 값으로 사용할 C/C++ 컴파일러 옵션 파일을 대화형 방식으로 지정합니다. 이 옵션이 \n \t 지정되면 다른 명령줄 입력은 허용되지 않습니다. \n \t-setup -client mbuild_com \n \t COM 컴파일러 옵션 파일을 사용자 프로파일 \n \t 폴더(PREFDIR 명령에 의해 반환됨)에 배치하여, 향후 MBUILD 호출을 위한 \n \t 디폴트 값으로 사용할 COM 컴파일러 옵션 파일을 대화형 방식으로 지정합니다. 이 옵션이 \n \t 지정되면 다른 명령줄 입력은 허용되지 않습니다. \n \t-U&lt;name&gt; \n \t C 전처리기 기호 &lt;name&gt;의 초기 정의를 \n \t 제거합니다. (-D 옵션과 반대임.) 이 스위치 다음에 \n \t 공백을 추가하지 마십시오. \n \t-v \n \t 세부 정보 표시 모드. 옵션 파일이 처리되고 모든 명령줄 인수가 \n \t 고려되고 난 후 중요한 내부 변수 값을 \n \t 출력합니다. 완전히 실행된 각 컴파일 단계와 \n \t 최종 링크 단계를 출력합니다. \n \t&lt;name&gt;=&lt;value&gt; \n \t 변수 &lt;name&gt;에 대한 옵션 파일 변수를 재정의합니다. \n \t 옵션 파일이 처리되고 모든 명령줄 인수가 고려된 후 \n \t 이 옵션이 처리됩니다. 자세한 내용은 \n \t 아래 "옵션 재지정 세부 정보" 섹션을 참조하십시오. \n\n \tWindows 플랫폼에서만 사용 가능한 명령줄 옵션: \n \t @&lt;rspfile&gt; \n \t 텍스트 파일 &lt;rspfile&gt;의 내용을 MBUILD에 대한 명령줄 \n \t 인수로 포함합니다. \n\n \t옵션 파일 세부 정보: \n \t MBUILD에서 지원되는 컴파일러의 템플릿 옵션 파일이 \n \t 있습니다. 이러한 템플릿은 다음 위치에 있습니다. \n \t Windows의 경우 [matlabroot '\\bin\\win64\\mexopts'], \n\n \t Linux의 경우 [matlabroot '/bin/glnxa64/mexopts'], \n\n \t Mac의 경우 [matlabroot '/bin/maci64/mexopts']. \n\n \t 이러한 템플릿 옵션 파일은 "-setup" 및 \n \t "-setup -client mbuild_com" 옵션에서 선택한 디폴트 옵션 파일을 정의하는 데 \n \t 사용됩니다. \n\n \t옵션 재지정 세부 정보: \n \t 명령줄에서 옵션 파일에 지정된 변수를 재지정하려면 \n \t name=value 명령줄 인수를 사용하십시오. 이 옵션을 \n \t 사용할 경우, 셸의 따옴표 지정 구문을 사용하여 셸 구문에서 \n \t 의미를 갖는 공백과 같은 문자를 보호해야 할 수 있습니다. \n\n \t Windows 플랫폼의 MATLAB 프롬프트 또는 Windows 명령 프롬프트에서는 \n \t 큰따옴표(")를 사용하십시오: \n \t mbuild -v COMPFLAGS="$COMPFLAGS -Wall" ... \n \t LINKFLAGS="$LINKFLAGS /VERBOSE" filename.c \n\n \t UNIX 플랫폼의 MATLAB 명령줄에서는 큰따옴표(")를 사용하십시오: \n \t mbuild -v CFLAGS="$CFLAGS -Wall" LDFLAGS="$LDFLAGS -w" filename.c \n\n \t UNIX 플랫폼의 셸 명령줄에서는 작은따옴표(')를 사용하십시오: \n \t mbuild -v CFLAGS='$CFLAGS -Wall' LDFLAGS='$LDFLAGS -w' filename.c \n\n \t gcc/g++에 기반한 MinGW-w64 컴파일러에서는 작은따옴표(')를 \n \t 사용하십시오. \n \t예제: \n\n \t 외부 C 프로그램 foo.c를 컴파일하고 libfoo에 링크하려면 다음을 사용하십시오. \n \t mbuild foo.c -L. -lfoo(UNIX의 경우) \n \t mbuild foo.c libfoo.lib(Windows의 경우) \n\n \t 여기서는 foo.c와 라이브러리가 모두 현재 작업 폴더에 있다고 가정합니다. \n\n \t COMPUTER, MCC, PREFDIR도 참조하십시오 \n       
</entry>
  </message>
</rsccat>
