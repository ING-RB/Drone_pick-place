<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright 2025 The MathWorks, Inc.-->

<rsccat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" locale="zh_CN" product="Compiler" xsi:noNamespaceSchemaLocation="../../resources/schema/msgcat.xsd">
  <message>
    <entry key="genericFailure">无法成功完成。\n{0}</entry>
    <entry key="responseFileError">读取响应文件 {0} 时出错</entry>
    <entry key="OutputSwitchMisuse">-output 开关必须后跟文件名。</entry>
    <entry key="OutdirSwitchMisuse">-outdir 开关必须后跟目录名称。</entry>
    <entry key="RspFilePermissionOpen">无法打开要写入的文件 "{0}": {1}。</entry>
    <entry key="RspFilePermissionWrite">无法写入文件 "{0}": {1}。</entry>
    <entry key="unableToDisplayHelp">Cannot display help for function MBUILD.</entry>
    <entry key="mbuildHelp">MBUILD\t结合 MATLAB 生成的共享库编译和链接源文件\n\n 用法:\n \tmbuild [options ...] file [files ...]\n\n 描述:\n \tMBUILD 结合从 MATLAB 文件生成的 \n \tC 或 C++ 共享库编译和链接客户编写的 C 或 C+C++ 代码。结果\n \t是一个独立的可执行文件。\n\n \tMBUILD 接受源文件、目标文件和库文件的\n \t任意组合作为参量。\n\n \tMBUILD 的命令行选项在下面的 "命令行\n \t选项" 部分定义。\n\n \t您可以从 MATLAB 命令提示符、Windows 命令\n \t提示符或 UNIX shell 运行 MBUILD。MBUILD 是一个脚本，在 \n \tWindows 上名为 mbuild.bat，在 UNIX 上名为 mbuild，位于 \n \t[matlabroot '/bin'] 指定的目录中。\n\n \t提供的第一个文件名(不包括任何文件扩展名)将是\n \t生成的可执行文件的名称。可以提供其他源文件、目标文件或\n \t库文件以满足外部引用的要求。编译可执行文件时，您可以\n \t指定 C 或 C++ 源文件。\n\n \tMBUILD 使用选项文件来指定变量和值，这些变量和值将\n \t作为参量传递给编译器、链接器和其他工具。\n \tMBUILD 的命令行选项可以补充或覆盖\n \t选项文件的内容，也可以控制 MBUILD 行为的\n \t其他方面。有关详细信息，请参阅下面的 "选项文件详细信息" \n \t部分。\n\n \t使用 "-setup" 和 "-setup -client mbuild_com" 选项会使 MBUILD \n \t搜索已安装的编译器，并允许您选择一个选项\n \t文件作为将来调用 MBUILD 的默认文件。有关详细\n \t信息，请参阅以下选项。\n\n \t有关此版本支持的编译器列表，请参阅: \n \thttps://www.mathworks.com/support/compilers/current_release/ \n\n 所有平台上均可用的命令行选项: \n \t-c \n \t 仅编译。创建目标文件，但不创建可执行文件。\n \t-D&lt;name&gt; \n \t 为 C 预处理器定义符号名称。相当于源代码中的 \n \t "#define &lt;name&gt;" 指令。不要在此开关后\n \t 添加空格。\n \t-D&lt;name&gt;=&lt;value&gt; \n \t 为 C 预处理器定义符号名称和值。相当于\n \t 源代码中的 "#define &lt;name&gt; &lt;value&gt;" 指令。不要\n \t 在此开关后添加空格。\n \t-f &lt;optionsfile&gt; \n \t 指定要使用的选项文件的位置和名称。覆盖\n \t MBUILD 的默认选项文件搜索机制。\n \t-g \n \t 创建包含用于调试的额外符号信息的\n \t 可执行文件。此选项会禁用 MBUILD 优化编译目标代码\n \t 的默认行为(请参阅 -O 选项)。\n \t-h[elp] \n \t 输出此消息。\n \t-I&lt;pathname&gt; \n \t 将 &lt;pathname&gt; 添加到目录列表中，以搜索 #include \n \t 文件。不要在此开关后添加空格。\n \t-l&lt;name&gt; \n \t 与对象库链接。在 Windows 上，&lt;name&gt; 会扩展为 \n \t "&lt;name&gt;.lib" 或 "lib&lt;name&gt;.lib"；在 UNIX 上，则会扩展为 "lib&lt;name&gt;.so" \n \t 或 "lib&lt;name&gt;.dylib"。不要在此开关后添加空格。\n \t-L&lt;directory&gt; \n \t 将 &lt;directory&gt; 添加到目录列表中，以搜索\n \t 使用 -l 选项指定的库。在 UNIX 系统上，\n \t 还必须设置运行时库路径。不要在此开关后\n \t 添加空格。\n \t-n \n \t 非执行模式。显示 MBUILD 将要\n \t 执行的所有命令，但实际上并不真正执行它们。\n \t-O \n \t 优化目标代码。默认情况下，优化处于启用状态，\n \t 是通过在命令行中添加此选项来启用的。如果出现 -g 选项\n \t 而没有 -O 选项，说明优化已禁用。\n \t-outdir &lt;dirname&gt; \n \t 将所有输出文件放在目录 &lt;dirname&gt; 中。\n \t-output &lt;resultname&gt; \n \t 创建名为 &lt;resultname&gt; 的可执行文件。系统将自动追加\n \t 相应的可执行文件扩展名。覆盖 MBUILD 的默认\n \t 可执行文件命名机制。\n \t-setup \n \t 通过将 C/C++ 编译器选项文件放在用户配置文件夹\n \t (通过 PREFDIR 命令返回)中，以交互方式指定该文件\n \t 用作将来调用 MBUILD 的默认文件。如果\n \t 指定此选项，系统将不接受其他命令行输入。\n \t-setup -client mbuild_com \n \t 通过将 COM 编译器选项文件放在用户配置文件夹\n \t (通过 PREFDIR 命令返回)中，以交互方式指定该文件\n \t 用作将来调用 MBUILD 的默认文件。如果\n \t 指定此选项，系统将不接受其他命令行输入。\n \t-U&lt;name&gt; \n \t 删除 C 预处理器符号 &lt;name&gt; 的任何初始\n \t 定义。(与 -D 选项相反的操作。)不要在此开关后添加\n \t 空格。\n \t-v \n \t 详尽模式。在处理完选项文件并考虑\n \t 所有命令行参量后，输出\n \t 重要内部变量的值。输出完全计算的每个编译步骤和最终\n \t 链接步骤。\n \t&lt;name&gt;=&lt;value&gt; \n \t 覆盖变量 &lt;name&gt; 的选项文件变量。\n \t 在处理完选项文件并考虑了所有命令行参量之后，\n \t将处理此选项。有关详细信息，\n \t请参阅下面的 "覆盖选项详细信息" 部分。\n\n \t命令行选项仅在 Windows 平台上可用: \n \t @&lt;rspfile&gt; \n \t 将文本文件 &lt;rspfile&gt; 的内容作为命令行\n \t 参量包含在 MBUILD 中。\n\n \t选项文件详细信息: \n \t MBUILD 支持的编译器\n \t 有模板选项文件。这些模板在 Windows 上位于 \n \t [matlabroot '\\bin\\win64\\mexopts']，在 Linux 位于 \n\n \t [matlabroot '/bin/glnxa64/mexopts']，在 Mac 上位于 \n\n \t [matlabroot '/bin/maci64/mexopts']。\n\n \t 这些模板选项文件由 "-setup" 和 \n \t "-setup -client mbuild_com" 选项使用，用于定义选定的默认\n \t 选项文件。\n\n \t覆盖选项详细信息: \n \t 使用 name=value 命令行参量在命令行中\n \t 覆盖选项文件中指定的变量。使用此\n \t 选项时，可能需要使用 shell 的引号语法来保护\n \t 空格等字符，这些字符在 shell 语法中是有含义的。\n\n \t 在 Windows 平台上，在 MATLAB 提示符或 Windows \n \t 命令提示符下，使用双引号("): \n \t mbuild -v COMPFLAGS="$COMPFLAGS -Wall" ... \n \t LINKFLAGS="$LINKFLAGS /VERBOSE" filename.c \n\n \t 在 UNIX 平台上的 MATLAB 命令行中，使用双引号("): \n \t mbuild -v CFLAGS="$CFLAGS -Wall" LDFLAGS="$LDFLAGS -w" filename.c \n\n \t 在 UNIX 平台上的 shell 命令行中，使用单引号('): \n \t mbuild -v CFLAGS='$CFLAGS -Wall' LDFLAGS='$LDFLAGS -w' filename.c \n\n \t 对于基于 gcc/g++ 的 MinGW-w64 编译器，使用单\n \t 引号(')。\n \t示例: \n\n \t 要针对 libfoo 编译和链接外部 C 程序 foo.c，请使用 \n \t mbuild foo.c -L. -lfoo (在 UNIX 上) \n \t mbuild foo.c libfoo.lib (在 Windows 上) \n\n \t 这假定 foo.c 和库都在当前工作文件夹中。\n\n \t 另请参阅 COMPUTER、MCC、PREFDIR \n       
</entry>
  </message>
</rsccat>
