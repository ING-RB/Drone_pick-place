<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright 2024 The MathWorks, Inc.-->

<rsccat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" locale="zh_CN" product="fixed" xsi:noNamespaceSchemaLocation="../../resources/schema/msgcat.xsd">
  <message>
    <entry key="abs_X_Var1_Var1MustBeConstant">在 abs(x,var1) 中，var1 必须为常量。</entry>
    <entry key="abs_X_Var1_Var2_VarsMustBeConstant">在 abs(x,var1,var2) 中，var1 和 var2 必须为常量。</entry>
    <entry key="absComplexFiBooleanUnsupported">当 fi 对象或指定的 numerictype 对象为布尔值时，abs 函数不支持复数 fi 对象。</entry>
    <entry key="absFIFixPtBPSOnly">abs 函数支持纯二进制小数点定标。对于与 abs 函数结合使用的任何 numerictype 或 fi 对象，小数斜率必须为 1 且偏置必须为零。</entry>
    <entry key="argMustBeConstant">''{1}'' 的 {0} 参数必须为常量。</entry>
    <entry key="autoDimIncompatibility">工作维度是自动选择的，长度可变，在运行时长度为 1。系统不支持这种情况。请通过提供 DIM 参数手动选择工作维度。</entry>
    <entry key="bitOpsIndexArgsNotSameClass">索引参数必须属于同一类。</entry>
    <entry key="bitOpsLeftIdxNotCnstSclrGTZ">左索引必须为常量、标量且大于零。</entry>
    <entry key="bitOpsLeftIdxNotGTEqRightIdx">左索引值必须大于或等于右索引值。</entry>
    <entry key="bitOpsLeftIdxNotLTEqWordLength">左索引必须小于或等于输入操作数的字长。</entry>
    <entry key="bitOpsLeftIndexArgTypeInvalid">左索引参数必须为数值。</entry>
    <entry key="bitOpsRightIndexArgTypeInvalid">右索引参数必须为数值。</entry>
    <entry key="bitOpsRightIndexNotCnstSclrGTZ">右索引必须为常量、标量且大于零。</entry>
    <entry key="bitRepCannotRepBits">位复制不能超过 {0, number, integer} 位。</entry>
    <entry key="bitRepInvalid2ndInpArg">第二个输入参数(复制常量)必须为内置数值类型的常实标量。</entry>
    <entry key="bitsraInpWLMustBeGTOne">bitsra 输入操作数的字长必须大于 1。</entry>
    <entry key="bitsxxInpWLMustBeGTOne">{0} 输入操作数的字长必须大于 1。</entry>
    <entry key="dimArgMustBeAConstant">维度参数必须为常量。</entry>
    <entry key="divide_T_a_b_aMustBeNumeric">在 divide(T,a,b) 中，a 必须为数值。</entry>
    <entry key="divide_T_a_b_bMustBeNumeric">在 divide(T,a,b) 中，b 必须为数值。</entry>
    <entry key="divideFi_NonFi_NonFiMustBeConstant">在 divide(t,fi,non-fi) 中，non-fi 必须为常量。</entry>
    <entry key="divideNonFi_Fi_NonFiMustBeConstant">在 divide(t,non-fi,fi) 中，non-fi 必须为常量。</entry>
    <entry key="divideNotDefinedFor1stArgType">函数 divide 没有定义为支持类 {0} 的第一个参数。它必须为 embedded.numerictype。</entry>
    <entry key="eml_FcnNameArgMustBeConst">{0} 函数名称参数必须为常量。</entry>
    <entry key="eml_FcnNameArgUnsupported">不支持的 {0} funstr 参数: {1}。</entry>
    <entry key="fiFilterNumeratorSizeNotConst">分子的维度不能更改。</entry>
    <entry key="fiFilterZiLeadingDimNotConst">初始条件的前导维数不能更改。</entry>
    <entry key="fiFilterAllInpArgsMustBeFiObjects">滤波器系数、输入数据和初始条件(如果存在)都必须为 FI 对象。</entry>
    <entry key="fiFilterAllInpArgsMustHaveSameDType">滤波器系数、输入数据和初始条件(如果存在)必须都具有相同的数据类型。</entry>
    <entry key="fiFilterZiDTypeMustMatchOutput">状态必须为与输出 numerictype 匹配的 FI 对象，其 DataType = {0}，Signedness = {1}，WordLength = {2, number, integer}，FractionLength = {3, number, integer}。</entry>
    <entry key="fiFilterZiCplxMustMatchOutput">初始条件的复/实性必须与输出的复/实性匹配。</entry>
    <entry key="fiFunctionDataTypeError">{0} 函数只能用于具有定点、定标双精度、双精度或单精度数据类型的 fi 对象。</entry>
    <entry key="fiFunctionScalarInputOnly">定点 {0} 函数不支持非标量 fi 输入。</entry>
    <entry key="fiFcnDTypeErrorOnlyFixBPSDblSgl">{0} 函数只能用于具有定点(二进制小数点定标)、双精度或单精度数据类型的 fi 对象。</entry>
    <entry key="fiFcnDTypeErrorFixPtOnly">The {0} function can only be used with fi objects that have a fixed-point data type.</entry>
    <entry key="fiFcnDTypeErrNumericOnly">{0} 函数只能用于具有数值数据类型的 fi 对象。</entry>
    <entry key="fiCompareNonFI_NonFIMustBeConst">当比较 fi 和 non-fi 时，non-fi 必须为常量。</entry>
    <entry key="fiInputArgMustBeConstant">fi(var1, var2,..varN) 调用中的输入 var2..varN 必须为常量。输入 {0} 不是常量。</entry>
    <entry key="fiInvalidMethodSignature">对于 embedded.fi 类，找不到具有匹配签名的方法 {0}。</entry>
    <entry key="fimathInvalidArgs">FIMATH 参数无效。</entry>
    <entry key="fimathInvalidMethodSignature">对于 embedded.fimath 类，找不到具有匹配签名的方法 {0}。</entry>
    <entry key="fimathMustBeConst">Fimath 必须为常量。</entry>
    <entry key="fiMathOpsFullPrecisionCastBeforeSum">fi math operations require CastBeforeSum to be true when SumMode is not FullPrecision.</entry>
    <entry key="fiMethodNotSupportedForCodegen">FI 对象上的 {0} 方法不支持代码生成。</entry>
    <entry key="fiNonFiFcnForm_NonFiMustBeConstant">在 {0}(fi,non-fi) 或 {1}(non-fi,fi) 中，non-fi 必须为常量。</entry>
    <entry key="fiNonFiOpForm_NonFiMustBeConstant">在 fi {0} non-fi 或 non-fi {1} fi 中，non-fi 必须为常量。</entry>
    <entry key="fiPVPairsDataPropSizeMustMatchFIFirstInpArgSize">If the first input to the fi constructor is numeric and you use property value pairs to specify the stored-data property of the fi object, the size of the corresponding stored-data property value must match the size of the first input to the fi constructor.</entry>
    <entry key="fiShiftArgDataTypeUnsupported">{0} 中不支持 shift 参数数据类型。</entry>
    <entry key="fixedBinaryPointOnlyCodegen"> The {0} function only supports code generation for binary point scaled fixed point inputs.</entry>
    <entry key="fiVar1InpMustBeNumericOrAConstant">fi(var1,...) 中的输入 var1 必须为数值或常量。</entry>
    <entry key="fiVar2toNInpArgsMustBeConstant">在 fi(var1,var2,...varN) 中，如果 var1 不是常量，则 var2 到 varN 必须为常量或指定完整的 numerictype。</entry>
    <entry key="fiVar2MustBeConstant">fi(var1,var2) 中的输入 var2 必须为常量。</entry>
    <entry key="fiVar2MustBeTorF">如果 var1 不是常量，则 fi(var1,var2) 中的输入 var2 必须为 numerictype 或 fimath。</entry>
    <entry key="fiVar2TofUnspecifiedScalingNotSupported">如果 var1 不是常量，则 fi(var1,var2) 中的输入 var2 不能是未指定定标的 numerictype。</entry>
    <entry key="fitoolNotSupportedForCodegen">代码生成不支持 FITOOL。</entry>
    <entry key="functionNotDefinedFor1stArgType">函数 ''{0}'' 没有定义为支持类 {1} 的第一个参数。</entry>
    <entry key="fxpUArgValsMustBeNumericNonemptyFinite">u 参数值必须为非空有限数值。</entry>
    <entry key="globalfimathFcnNotSupportedForCodegen">代码生成不支持 GLOBALFIMATH 函数。</entry>
    <entry key="incorrectNumberOfInputs">输入数目错误。</entry>
    <entry key="incorrectNumberOfInputsGet">输入数目错误。不支持语法 get(a)。</entry>
    <entry key="inputMustBeConstant">{1} 中的输入 {0} 必须为常量。</entry>
    <entry key="inputMustBeConstantOrAFI">{1} 中的输入 {0} 必须为常量或 fi。</entry>
    <entry key="inputMustBeNumeric">输入必须为数值。</entry>
    <entry key="inputTypeUnsupported">{1} 不支持类型为 {0} 的输入。</entry>
    <entry key="invalidEnumValue">Argument {0} must have a value belonging to the set {1}.</entry>
    <entry key="invalidInputArg">输入参量无效。</entry>
    <entry key="invalidUseGet">Function ''get'' is resolved in the MATLAB workspace. Please call this function using coder.extrinsic(''get'') or feval when the input is not a fi, numerictype or a fimath.</entry>
    <entry key="mpowerProductModeForNonConstExponent">当输入 a 是标量且 mpower 指数输入不是常量时，ProductMode 必须为 SpecifyPrecision。这样能确保输出数据类型可以在编译时确定。</entry>
    <entry key="mpowerSumModeForNonConstExponent">当输入 a 不是标量且 mpower 指数输入不是常量时，SumMode 必须为 SpecifyPrecision。这样能确保输出数据类型可以在编译时确定。</entry>
    <entry key="mustBeConstant">{0} 必须为常量。</entry>
    <entry key="notEnoughInputArguments">输入参数的数目不足。</entry>
    <entry key="numerictypeMustBeConst">Numerictype 必须为常量。</entry>
    <entry key="onlyDotForProperty">{0} is not a property of the {1} object: X.{2}.  In code generation, only properties of the {3} object can be used with dot notation.  For methods of {4} objects, use function notation instead: {5}(X).</entry>
    <entry key="outputWLExceedsMaxWLLimit">输出类型超过最大位数({0, number, integer})。</entry>
    <entry key="powerProductModeForNonConstExponent">当幂指数输入不是常量时，ProductMode 必须为 SpecifyPrecision。这样能确保输出数据类型可以在编译时确定。</entry>
    <entry key="reinterpretcastWordLengthMismatch">数值类型的字长必须等于要强制转换的 fi 对象的字长。</entry>
    <entry key="reinterpretcastFirstInputInvalidDType">第一个输入必须为定点或定标双精度 fi 对象。</entry>
    <entry key="reinterpretcastSecondInputNotNumerictype">第二个输入必须为 numerictype。</entry>
    <entry key="relOpArgsHaveUnequalBias">当偏置值不相等时，不支持关系运算符。</entry>
    <entry key="rescaleFiDoubleSingleBooleanInvalidPropChange">当数据类型模式为 Double、Single 或 Boolean 时，无法更改指定的属性。该属性尚未更改。</entry>
    <entry key="slopeBiasInputsNotSupported">不支持斜率偏置定标输入。</entry>
    <entry key="sqrtSlopeBiasInputsNotSupported">对于 FI 对象 A 和 NumbericType T，只有在 A 和 T 的定标小数斜率为 1、偏置为 0 (即纯二进制小数点定标)时，才能计算 SQRT(A) 和 SQRT(A,T)。</entry>
    <entry key="sumModeRestrictedForVarS">进行代码生成时，如果输入的大小在运行时可变，则对于 ''{0}''，SumModes 必须为 ''SpecifyPrecision'' 或 ''KeepLSB''。</entry>
    <entry key="unsupportedBooleanNumerictype">A fixed-point numeric object (fi) of DataTypeMode = ''Boolean'' is not supported in MATLAB for code generation. You should use a MATLAB logical variable instead.</entry>
    <entry key="unsupportedSumMode">进行代码生成时，如果输入的大小在运行时可变，则对于 ''{0}''，SumMode 必须为 ''SpecifyPrecision'' 或 ''KeepLSB''。</entry>
    <entry key="wordLengthExceedsMaxWL">The specified word length exceeds the maximum number of bits ({0, number, integer}).</entry>
    <entry key="wordLengthMustBeLTEQ32">字长必须小于或等于 32。</entry>
    <entry key="colonBitWidthMax64">在代码生成中，冒号输出的位宽不能超过 64。</entry>
    <entry key="sqrt_X_Var1_Var1MustBeConstant">在 sqrt(x,var1) 中，var1 必须为常量。</entry>
  </message>
</rsccat>
