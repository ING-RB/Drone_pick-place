<?xml version="1.0" encoding="UTF-8" ?>
<!-- Copyright 2012-2022 The MathWorks, Inc. -->
<rsccat version="1.0" locale="en_US" product="fixed" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../schema/msgcat.xsd">
  <message>
      <entry key="abs_X_Var1_Var1MustBeConstant">In abs(x,var1), var1 must be a constant.</entry>
      <entry key="abs_X_Var1_Var2_VarsMustBeConstant">In abs(x,var1,var2), var1 and var2 must be constants.</entry>
      <entry key="absComplexFiBooleanUnsupported">The abs function does not support complex fi objects when the fi object or the specified numerictype object is Boolean.</entry>
      <entry key="absFIFixPtBPSOnly">The abs function supports binary point-only scaling. For any numerictype or fi object used with the abs function, the fractional slope must be 1 and the bias must be zero.</entry>
      <entry key="argMustBeConstant">{0} argument to ''{1}'' must be constant.</entry>
      <entry key="autoDimIncompatibility">The working dimension was selected automatically, is variable-length, and has length 1 at run-time. This is not supported. Manually select the working dimension by supplying the DIM argument.</entry>
      <entry key="bitOpsIndexArgsNotSameClass">The index arguments must be of the same class.</entry>
      <entry key="bitOpsLeftIdxNotCnstSclrGTZ">The left index must be a constant, scalar, and greater than zero.</entry>
      <entry key="bitOpsLeftIdxNotGTEqRightIdx">The left index value must be greater than or equal to the right index value.</entry>
      <entry key="bitOpsLeftIdxNotLTEqWordLength">The left index must be less than or equal to the word length of the input operand.</entry>
      <entry key="bitOpsLeftIndexArgTypeInvalid">The left index argument must be numeric.</entry>
      <entry key="bitOpsRightIndexArgTypeInvalid">The right index argument must be numeric.</entry>
      <entry key="bitOpsRightIndexNotCnstSclrGTZ">The right index must be a constant, scalar, and greater than zero.</entry>
      <entry key="bitRepCannotRepBits">Cannot replicate bits to more than {0, number, integer} bits.</entry>
      <entry key="bitRepInvalid2ndInpArg">The second input argument (replication constant) must be a constant, real, scalar, built-in numeric type.</entry>
      <entry key="bitsraInpWLMustBeGTOne">bitsra input operand word length must be greater than one.</entry>
      <entry key="bitsxxInpWLMustBeGTOne">{0} input operand word length must be greater than one.</entry>
      <entry key="dimArgMustBeAConstant">Dimension argument must be a constant.</entry>
      <entry key="divide_T_a_b_aMustBeNumeric">In divide(T,a,b) a must be numeric.</entry>
      <entry key="divide_T_a_b_bMustBeNumeric">In divide(T,a,b) b must be numeric.</entry>
      <entry key="divideFi_NonFi_NonFiMustBeConstant">In divide(t,fi,non-fi), the non-fi must be a constant.</entry>
      <entry key="divideNonFi_Fi_NonFiMustBeConstant">In divide(t,non-fi,fi), the non-fi must be a constant.</entry>
      <entry key="divideNotDefinedFor1stArgType">Function divide is not defined for first argument of class {0}. It must be an embedded.numerictype.</entry>
      <entry key="eml_FcnNameArgMustBeConst">The {0} function name argument must be a constant.</entry>
      <entry key="eml_FcnNameArgUnsupported">Unsupported {0} funstr argument: {1}.</entry>
      <entry key="fiFilterNumeratorSizeNotConst">The dimensions of the numerator must not change.</entry>
      <entry key="fiFilterZiLeadingDimNotConst">The leading dimension of the initial conditions must not change.</entry>
      <entry key="fiFilterAllInpArgsMustBeFiObjects">The filter coefficients, input data, and initial conditions (if present) must all be FI objects.</entry>
      <entry key="fiFilterAllInpArgsMustHaveSameDType">The filter coefficients, input data, and initial conditions (if present) must all have the same data type.</entry>
      <entry key="fiFilterZiDTypeMustMatchOutput">The states must be a FI object matching the output numerictype, which is DataType = {0}, Signedness = {1}, WordLength = {2, number, integer}, FractionLength = {3, number, integer}.</entry>
      <entry key="fiFilterZiCplxMustMatchOutput">The complexity of the initial conditions must match the complexity of the output.</entry>
      <entry key="fiFunctionDataTypeError">The {0} function can only be used with fi objects that have a fixed-point, scaled double, double, or single data type.</entry>
      <entry key="fiFunctionScalarInputOnly">The fixed-point {0} function is not supported for a fi input that is not a scalar.</entry>
      <entry key="fiFcnDTypeErrorOnlyFixBPSDblSgl">The {0} function can only be used with fi objects that have a fixed-point (binary point scaling), double, or single data type.</entry>
      <entry key="fiFcnDTypeErrorFixPtOnly">The {0} function can only be used with fi objects that have a fixed-point data type.</entry>
      <entry key="fiFcnDTypeErrNumericOnly">The {0} function can only be used with fi objects that have a numeric data type.</entry>
      <entry key="fiCompareNonFI_NonFIMustBeConst">When comparing a fi with a non-fi, the non-fi must be a constant.</entry>
      <entry key="fiInputArgMustBeConstant">Inputs var2..varN in call to fi(var1, var2,..varN) must be constant. Input {0} is not a constant.</entry>
      <entry key="fiInvalidMethodSignature">No method {0} with matching signature found for class embedded.fi.</entry>
      <entry key="fimathInvalidArgs">Invalid FIMATH arguments.</entry>
      <entry key="fimathInvalidMethodSignature">No method {0} with matching signature found for class embedded.fimath.</entry>
      <entry key="fimathMustBeConst">Fimath must be constant.</entry>
      <entry key="fiMathOpsFullPrecisionCastBeforeSum">fi math operations require CastBeforeSum to be true when SumMode is not FullPrecision.</entry>
      <entry key="fiMethodNotSupportedForCodegen">{0} method on a FI object is not supported for code generation.</entry>
      <entry key="fiNonFiFcnForm_NonFiMustBeConstant">In {0}(fi,non-fi), or {1}(non-fi,fi), the non-fi must be a constant.</entry>
      <entry key="fiNonFiOpForm_NonFiMustBeConstant">In fi {0} non-fi, or non-fi {1} fi, the non-fi must be a constant.</entry>
      <entry key="fiPVPairsDataPropSizeMustMatchFIFirstInpArgSize">If the first input to the fi constructor is numeric and you use property value pairs to specify the stored-data property of the fi object, the size of the corresponding stored-data property value must match the size of the first input to the fi constructor.</entry>
      <entry key="fiShiftArgDataTypeUnsupported">Unsupported shift argument data type in {0}.</entry>
      <entry key="fixedBinaryPointOnlyCodegen"> The {0} function only supports code generation for binary point scaled fixed point inputs.</entry>
      <entry key="fiVar1InpMustBeNumericOrAConstant">Input var1 in fi(var1,...) must be numeric or a constant.</entry>
      <entry key="fiVar2toNInpArgsMustBeConstant">In fi(var1,var2,...varN) if var1 is not a constant then var2 to varN must be or specify a complete numerictype.</entry>
      <entry key="fiVar2MustBeConstant">Input var2 in fi(var1,var2) must be a constant.</entry>
      <entry key='fiVar2MustBeTorF'>Input var2 in fi(var1,var2) must be a numerictype or a fimath if var1 is not a constant.</entry>
      <entry key='fiVar2TofUnspecifiedScalingNotSupported'>Input var2 in fi(var1,var2) cannot be a numerictype of unspecified scaling if var1 is not a constant.</entry>
      <entry key="fitoolNotSupportedForCodegen">FITOOL is not supported for code generation.</entry>
      <entry key="functionNotDefinedFor1stArgType">Function ''{0}'' is not defined for the first argument of class {1}.</entry>
      <entry key="fxpUArgValsMustBeNumericNonemptyFinite">The u argument values must be numeric, non-empty, and finite.</entry>
      <entry key="globalfimathFcnNotSupportedForCodegen">The GLOBALFIMATH function is not supported for code generation.</entry>
      <entry key="incorrectNumberOfInputs">Incorrect number of inputs.</entry>
      <entry key="incorrectNumberOfInputsGet">Incorrect number of inputs. The syntax get(a) is not supported.</entry>
      <entry key="inputMustBeConstant">Input {0} in {1} must be a constant.</entry>
      <entry key="inputMustBeConstantOrAFI">Input {0} in {1} must be a constant or a fi.</entry>
      <entry key="inputMustBeNumeric">Input must be numeric.</entry>
      <entry key="inputTypeUnsupported">Input of type {0} is unsupported for {1}.</entry>
      <entry key="invalidEnumValue">Argument {0} must have a value belonging to the set {1}.</entry>
      <entry key="invalidInputArg">Invalid input argument.</entry>
      <entry key="invalidUseGet">Function ''get'' is resolved in the MATLAB workspace. Please call this function using coder.extrinsic(''get'') or feval when the input is not a fi, numerictype or a fimath.</entry>
      <entry key="mpowerProductModeForNonConstExponent">ProductMode must be SpecifyPrecision when the input a is scalar and the mpower exponent input is not constant. This assures that the output data type can be determined at compile time.</entry>
      <entry key="mpowerSumModeForNonConstExponent">SumMode must be SpecifyPrecision when the input a is not scalar and the mpower exponent input is not constant. This assures that the output data type can be determined at compile time.</entry>
      <entry key="mustBeConstant">The {0} must be a constant.</entry>
      <entry key="notEnoughInputArguments">Not enough input arguments.</entry>
      <entry key="numerictypeMustBeConst">Numerictype must be constant.</entry>
      <entry key="onlyDotForProperty">{0} is not a property of the {1} object: X.{2}.  In code generation, only properties of the {3} object can be used with dot notation.  For methods of {4} objects, use function notation instead: {5}(X).</entry>
      <entry key="outputWLExceedsMaxWLLimit">The output type exceeds the maximum number of bits ({0, number, integer}).</entry>
      <entry key="powerProductModeForNonConstExponent">ProductMode must be SpecifyPrecision when the power exponent input is not constant. This assures that the output data type can be determined at compile time.</entry>
      <entry key="reinterpretcastWordLengthMismatch">The word length of the numeric type must be equal to the word length of the fi object being cast.</entry>
      <entry key="reinterpretcastFirstInputInvalidDType">The first input must be a fixed-point or scaled double fi object.</entry>
      <entry key="reinterpretcastSecondInputNotNumerictype">The second input must be a numerictype.</entry>
      <entry key="relOpArgsHaveUnequalBias">Relational operator is not supported when bias values are unequal.</entry>
      <entry key="rescaleFiDoubleSingleBooleanInvalidPropChange">Cannot change the specified property when the data type mode is Double, Single, or Boolean. That property has not been changed.</entry>
      <entry key="slopeBiasInputsNotSupported">Slope bias scaled inputs are not supported.</entry>
      <entry key="sqrtSlopeBiasInputsNotSupported">SQRT(A) or SQRT(A,T) can only be calculated for FI object A and NumericType T when the scaling of A and T have a fractional slope of 1 and 0 bias (binary-point only scaling).</entry>
      <entry key="sumModeRestrictedForVarS">For code generation, SumModes must be ''SpecifyPrecision'' or ''KeepLSB'' for ''{0}'' when the size of the input can vary at run-time.</entry>
      <entry key="unsupportedBooleanNumerictype">A fixed-point numeric object (fi) of DataTypeMode = ''Boolean'' is not supported in MATLAB for code generation. You should use a MATLAB logical variable instead.</entry>
      <entry key="unsupportedSumMode">For code generation, SumMode must be ''SpecifyPrecision'' or ''KeepLSB'' for ''{0}'' when the size of the input can vary at run-time.</entry>
      <entry key="wordLengthExceedsMaxWL">The specified word length exceeds the maximum number of bits ({0, number, integer}).</entry>
      <entry key="wordLengthMustBeLTEQ32">Wordlength must be less than or equal to 32.</entry>
      <entry key="colonBitWidthMax64">In code generation, the bit width of colon output cannot exceed 64.</entry>
      <entry key="sqrt_X_Var1_Var1MustBeConstant">In sqrt(x,var1), var1 must be a constant.</entry>
   </message>
</rsccat>

<!-- LocalWords:  funstr FITOOL GLOBALFIMATH
-->
