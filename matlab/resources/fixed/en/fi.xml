<?xml version="1.0" encoding="UTF-8" ?>
<!-- Copyright 2011-2024 The MathWorks, Inc. -->
<rsccat version="1.0" locale="en_US" product="fixed" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../schema/msgcat.xsd">
    <message>
        <entry key="AllFloatSameClassOrBinaryPoint">{0} must all be floating-point with the same class or all fixed-point with binary-point scaling.</entry>
        <entry key="AllRealFloatSameClassOrBinaryPoint">{0} must be real and all be floating-point with the same class or all fixed-point with binary-point scaling.</entry>
        <entry key="DimAgree">Matrix dimensions must agree.</entry>
        <entry key="DimensionMustBePositiveInteger">Dimension argument must be a positive integer scalar within indexing range.</entry>
        <entry key="DimsIncompatible">Input dimensions are incompatible.</entry>
        <entry key="DivideNoComplexDivisor">Divide does not support a complex divisor.</entry>
        <entry key="FloatOrBinaryPoint">{0} must be floating-point or fixed-point with binary-point scaling.</entry>
        <entry key="IndexAssignElementCountMismatch">In an assignment A(I) = B, the number of elements in B and I must be the same.</entry>
        <entry key="InterpNoExtrap">{0} does not support the ''extrap'' extrapolation strategy.</entry>
        <entry key="InvalidFiConstructorUse">Invalid inputs to the fi constructor.</entry>
        <entry key="InvalidFixedNumberInput">Expected input of class fixed.BinaryScaling, found something else.</entry>
        <entry key="InvalidInputNotNumeric">Value must be numeric.</entry>
        <entry key="InvalidInputNotReal">Value must be real.</entry>
        <entry key="InvalidInputNotRealScalar">{0} must be a real scalar quantity.</entry>
        <entry key="InvalidInputNotScalarBuiltinNumericOrLogical">''{0}'' must be a scalar built-in numeric or logical type.</entry>
        <entry key="InvalidInputNotString" note="stringDatatypeUpdate">{0} must be a character vector.</entry>
        <entry key="InvalidInputNotStringOrNumericOrLogical" note="stringDatatypeUpdate">{0} must be numeric, logical, or a character vector that evaluates to numeric or logical.</entry>
        <entry key="InvalidOverflowMode">Overflowmode must be ''wrap'' or ''saturate''.</entry>
        <entry key="InvalidRoundMode">RoundMode must be one of ''zero'', ''nearest'', ''ceiling'', ''floor'', ''simplest'', ''round'' or ''convergent''.</entry>
        <entry key="InvalidSizeParameter">The SIZE parameter must be a double array in {0}.</entry>
        <entry key="InvalidSumDimParameter">The sumDim parameter must be greater than 1 in {0}.</entry>
        <entry key="InvalidWordLength">Invalid WordLength specified. It must be greater than 0 and less than 65536.</entry>
        <entry key="MustBeFinite">Parameter ''{0}'' must be finite.</entry>
        <entry key="MustBeNonnegative">Input {0} must be nonnegative.</entry>
        <entry key="MustBeNumber">Parameter ''{0}'' must be a number.</entry>
        <entry key="MustBeReal">{0} must be real.</entry>
        <entry key="MustNotBeEmpty">Parameter ''{0}'' must not be empty.</entry>
        <entry key="RealFloatOrBinaryPoint">{0} must be real and floating-point or fixed-point with binary-point scaling.</entry>
        <entry key="SubsrefBadIndex">Index exceeds matrix dimensions.</entry>
        <entry key="TooManyFixedPointInputs">Fixed-point {0} only supports {1} input arguments.</entry>
        <entry key="UnsupportedInterpolationMethod">{0} only supports {1} and {2} interpolation.</entry>
        <entry key="XYBothFixedOrFloat">Inputs {0} and {1} must either be both floating-point or both fixed-point types</entry>
        <entry key="allTypesEquivalent">The types of all inputs must be equivalent.</entry>
        <entry key="antiDiagonalConflict">Last element of input column does not match first element of input row. \nColumn wins anti-diagonal conflict.</entry>
        <entry key="argSizeMismatch">The {0} and {1} arguments to {2} must be the same size.</entry>
        <entry key="badIndex">Index exceeds matrix dimensions.</entry>
        <entry key="badSubscript">Subscript indices must either be real positive integers or logical values.</entry>
        <entry key="baseMustBeNumeric">Base must be numeric.</entry>
        <entry key="baseOutOfRange">Base value must be &gt;= 2 and &lt;= {0, number, integer}.</entry>
        <entry key="binaryPointOnlyFi_NT">{0} can only be calculated for FI object A and \n numerictype T when the scaling of A and T have an integer power of 2 slope, \n and a bias of 0 (binary-point only scaling).</entry>
        <entry key="binaryPointOnlyInputs">Fixed-point and Scaled-double inputs must be binary-point scaled.</entry>
        <entry key="binaryPointOnlyMath">''{0}'' is only supported for FI object operands that have an integer power of 2 slope, and a bias of 0.</entry>
        <entry key="binaryopSignatureNotFound">Signature not found.</entry>
        <entry key="bitIndicesNotInRange">In ''{0}'' the WordLength &gt;= Left Index &gt;= Right Index &gt;= 1.</entry>
        <entry key="bitMustBeInteger">BIT must be integer in ''{0}''.</entry>
        <entry key="bitPositionInvalid">Invalid bit position: {0} must be positive and also less than or equal to {1}.WordLength in {2}.</entry>
        <entry key="bitRotateIndexFINotSupported">The {0} rotate index cannot be a FI object.</entry>
        <entry key="bitRotateIndexMustBeReal">The {0} rotate index operand must be real.</entry>
        <entry key="bitShiftNotInteger">K must be an integer in BITSHIFT(A,K) when A is a FI object.</entry>
        <entry key="bitShiftNotReal">K must be real in BITSHIFT(A,K) when A is a FI object.</entry>
        <entry key="bitsetValueInvalid">The value V in BITSET(A,BIT,V) must be a built-in numeric or logical type.</entry>
        <entry key="bothInputsSameBias">Both inputs must have the same Bias.</entry>
        <entry key="bothInputsSameSlopeAdjustmentFactor">Both inputs must have the same SlopeAdjustmentFactor.</entry>
        <entry key="cannotOperateOnMatrix">Cannot operate on a matrix-valued fi object; must be a row or column vector.</entry>
        <entry key="colonOperandsMustBeIntegerValued">Colon operands must have integer values when interacting with type ''embedded.fi''.</entry>
        <entry key="columnNumberOutOfRange">Column number out of range in {0}.</entry>
        <entry key="complexNoLogicalInput">Input arguments to COMPLEX cannot be boolean.</entry>
        <entry key="complexNotSupported">Complex values are not supported by the unified fixed-point cast.</entry>
        <entry key="convIncorrectShapeInput">Shape must be one of ''FULL'', ''SAME'' or ''VALID''.</entry>
        <entry key="dataTypeNotSupported">Data type not supported.</entry>
        <entry key="diagonalConflict">First element of input column does not match first element \nof input row. Column wins diagonal conflict.</entry>
        <entry key="dialogDataTypePrompt">Data Type:</entry>
        <entry key="dialogLocalFimathPrompt">Local fimath:</entry>
        <entry key="dialogTitle" translate="false">embedded.fi: {0}</entry>
        <entry key="dialogValuePrompt">Value:</entry>
        <entry key="digitsOfPrecisionOutOfRange">The number of digits of precision must be a positive integer less than 65536.</entry>
        <entry key="dimInputMustBeNumeric">Dimension input to ''{0}'' must be of type ''numeric''.</entry>
        <entry key="divideByZero">Division by zero occurred. Quotient was saturated.</entry>
        <entry key="divideDenominatorNotReal">In A./B and A/B, the denominator B must be real if either A or B is a fi object.</entry>
        <entry key="divideNonDoubleUnsupported">Fixed-point DIVIDE not supported for (built-in non-double)/(built-in non-double).</entry>
        <entry key="divideNonScalarDivisor">For fi objects, B must be a scalar in A/B.</entry>
        <entry key="divideNonSpecifiedScaling">DIVIDE(T,A,B) is not supported when numerictype T has unspecified scaling.</entry>
        <entry key="divideNonSpecifiedSign">DIVIDE(T,A,B) is only supported when the SIGNEDNESS of NUMERICTYPE object T is SIGNED or UNSIGNED.</entry>
        <entry key="divideSignatureNotFound">Signature not found.</entry>
        <entry key="divideUnhandledIntegerType">Unrecognized integer type in fixed-point divide.</entry>
        <entry key="divideUnhandledOutputType">Unable to compute output data type for fixed-point divide.</entry>
        <entry key="emptyArgumentUnsupported">Argument {0} in {1} cannot be empty.</entry>
        <entry key="emptyNotAllowed">Empty input not allowed in function {0}.</entry>
        <entry key="evenspacingFailed">The attempt to produce an exactly evenly spaced vector failed. The minimum spacing was {0} and the maximum spacing was {1}.</entry>
        <entry key="exactPowerOfTwo">Must be an exact power of 2.</entry>
        <entry key="filterIncorrectStateNumerictype">The states must be a fi object matching the output numerictype, which is DataType = {0}, Signedness = {1}, WordLength = {2,number,integer}, FractionLength = {3,number,integer}.</entry>
        <entry key="filterInsufficientMaxProdWordLength">The minimum number of bits required to guarantee that this product can be computed with no loss of precision exceeds the MaxProductWordLength setting</entry>
        <entry key="filterInsufficientMaxSumWordLength">The minimum number of bits required to guarantee that this sum can be computed with no loss of precision exceeds the MaxSumWordLength setting</entry>
        <entry key="filterInvalidInitialConditionSize">Initial conditions must be a vector of length length(b)-1 or an array with the leading dimension of size length(b)-1 and with remaining dimensions matching those of x.</entry>
        <entry key="filterNumVectorOnly">The numerator must be a vector.</entry>
        <entry key="filterSupportFIROnly">FILTER only supports denominators equal to 1 (FIR).</entry>
        <entry key="fimathMismatch">The embedded.fimath of both operands must be equal.</entry>
        <entry key="firstDimensionMustNotBeVariableSized">The first dimension of the input to ''{0}'' must not be variable sized.</entry>
        <entry key="firstInputMustBe2D">First input must be 2D.</entry>
        <entry key="firstInputNotFi">The first input argument must be a fi object.</entry>
        <entry key="fixedAndFloatInputArgs">The combination of fixed-point and floating-point inputs is not supported.</entry>
        <entry key="floatAndNonFloatInputArgsNotSupported">The combination of floating-point and non-floating point inputs is not supported.</entry>
        <entry key="indexMustBeNumeric">{0} index must be numeric.</entry>
        <entry key="indexMustBePositiveInteger">{0} index only valid for positive integers.</entry>
        <entry key="indexNotDouble">Index argument must be double.</entry>
        <entry key="indexNotNumeric">Index must be numeric.</entry>
        <entry key="indexNotScalar">Index must be scalar.</entry>
        <entry key="indexOutOfRange">{0} exceeds original matrix size in {1}.</entry>
        <entry key="indexToRemoveExceedsMatrixDimensions">Index of element to remove exceeds matrix dimensions.</entry>
        <entry key="innerDimAgree">Inner matrix dimensions must agree.</entry>
        <entry key="inputArgMustBeNonScalar">Input argument A must have at least two elements in {0}(A).</entry>
        <entry key="inputArgMustBeSigned">Input argument {0} must be signed.</entry>
        <entry key="inputArgsNotFis">Input arguments must be fi objects.</entry>
        <entry key="inputEitherFirstTwoMustBeFixed">The first or second input must be fixed-point. The first two input types are {0} and {1}.</entry>
        <entry key="inputFiMustBeBinPtScaled">Input argument {0} must have binary-point scaling when it is a fi object.</entry>
        <entry key="inputFloatingPoint">The type of the inputs must be floating-point.</entry>
        <entry key="inputMustBe2D">Input to ''{0}'' must be two-dimensional.</entry>
        <entry key="inputMustBeDouble">Input value must be a double.</entry>
        <entry key="inputMustBeFi">Input must be a fi object.</entry>
        <entry key="inputMustBeFixedPointNumericType">The {0} function only supports integer, fixed-point, and ScaledDouble inputs.</entry>
        <entry key="inputMustBeFullNumericType">Input must be a fully specified numerictype. Unspecified scaling and auto signedness are not supported.</entry>
        <entry key="inputMustBeIntFixPtOrBool">Input must be an integer, fixed-point, or logical.</entry>
        <entry key="inputMustBeIntFixPtOrScaledDouble">Input must be an integer, fixed-point, or scaled double.</entry>
        <entry key="inputMustBeIntLogicalOrNonFloatingPointFi">Input to ''{0}'' must be a built-in integer type, logical type, or a fixed point number with the ''DataType'' property set to ''Fixed''.</entry>
        <entry key="inputMustBeIntOrFixPt">Input must be an integer or fixed-point.</entry>
        <entry key="inputMustBeScalarInteger">Input must be scalar and integer valued.</entry>
        <entry key="inputMustHaveZeroBias">The fixed-point scaling of the input must have zero bias.</entry>
        <entry key="inputOutOfRange">Input ''{0}'' to ''{1}'' must be &gt;= {2} and &lt;={3}.</entry>
        <entry key="inputsFirstTwoMustHaveSameDatatype">The first two inputs must have equivalent numerictypes. The types are {0} and {1}.</entry>
        <entry key="inputsMustBe2D">Input arguments must be 2D.</entry>
        <entry key="inputsMustBeFixPtBPSOrFloatSameDTMode">Input arguments must have the same ''DataTypeMode'' property. This property setting must be ''Fixed-point: binary point scaling'', ''Scaled double: binary point scaling'', ''double'', or ''single''.</entry>
        <entry key="inputsMustBeFixPtBPSOrNumTypeOrInt">Input arguments must be binary point scaled FI or NUMERICTYPE objects, or integer types.</entry>
        <entry key="inputsMustBeIntOrFixPtBPSOrSDBPS">Input argument must be an integer or a binary point scaled FI object with fixed-point or scaled double data type or a floating-point FI object.</entry>
        <entry key="inputsMustBeNumeric">Inputs must be numeric.</entry>
        <entry key="inputsMustHaveSameDatatypeMode">All inputs to {0} must have the same ''DataTypeMode'' property.</entry>
        <entry key="inputsNotNumericVectors">Inputs to ''{0}'' must be numeric vectors.</entry>
        <entry key="intOver64Bits">Integers greater than 64 bits not supported in the INT method.  Returning DOUBLE instead. Roundoff error may be introduced in the return value from the INT method for word lengths greater than 64 bits. To get exact integer representation for any word length, use BIN, OCT, DEC, or HEX.</entry>
        <entry key="intarrayInvalidDataType">The integer array must be of class double or single when \n fi is double, single or scaled-double.</entry>
        <entry key="intarrayLeadingDim">First dimension of integer array must be divisible by {0, number,integer}.</entry>
        <entry key="intarrayNot32or64BitInt">Integer array must be uint32, uint64, or int64 when word length is greater than 32 bits.</entry>
        <entry key="intarrayNotUint32">Integer array must be uint32 when wordLength is greater than 32.</entry>
        <entry key="invalidBitAndVRange">BIT must be integer and V must be 0 or 1.</entry>
        <entry key="invalidBitReplicationConstant">The bit replication constant must be greater than 0.</entry>
        <entry key="invalidConstructor">Fixed-Point Designer: Invalid call to dummy {0} constructor.  Please report this problem \nto support@mathworks.com, including sample code that reproduces the error.</entry>
        <entry key="invalidConstructorInput">Inputs to the fi constructor cannot be of class {0}.</entry>
        <entry key="invalidConstructorNonNumericInputs">FI constructor only valid for numeric data.</entry>
        <entry key="invalidConstructorNumericInputs">Too many initial numeric arguments.</entry>
        <entry key="invalidConstructorPVPairs">Invalid parameter/value pair arguments.</entry>
        <entry key="invalidConstructorSignedValue">The SIGNED property of the FI object must be 1 (true) or 0 (false).</entry>
        <entry key="invalidDataType">The data type ''{0}'' is not supported for input {1} to function {2}.</entry>
        <entry key="invalidDimInput">Dimension must be a real, positive, integer scalar.</entry>
        <entry key="invalidElement">Input array invalid at element ({0,number,integer},{1,number,integer}).</entry>
        <entry key="invalidExponent">Exponent input to ''{0}'' must be a real scalar and the value must be a non-negative integer.</entry>
        <entry key="invalidInputDataTypeCombination">Unsupported input data type combination.</entry>
        <entry key="invalidLogType">Invalid logtype argument to GETQLOGGERSTRUCT.</entry>
        <entry key="invalidNumberOfInputArgs">Invalid number of input arguments.</entry>
        <entry key="invalidPropertyEnum">PropertyEnum out of range. Valid values are {0,number,integer} through {1,number,integer}, and {2,number,integer} was entered.</entry>
        <entry key="invalidShiftIndex">The shift index must be greater than or equal to 0.</entry>
        <entry key="invalidSyntax">This syntax is not supported by the {0} function. See the Function Reference page in the Fixed-Point Designer documentation for a list of supported syntaxes.</entry>
        <entry key="kMustBeNumeric">K must be numeric in {0} when A is a FI object.</entry>
        <entry key="kMustBeScalar">K must be scalar in {0} when A is a FI object.</entry>
        <entry key="kthDiagonalInputNotFinite">K-th diagonal input must be finite for the vector input form of DIAG.</entry>
        <entry key="kthDiagonalInputNotInteger">K-th diagonal input must be an integer scalar.</entry>
        <entry key="legacyArithmeticRule1or2inputs">The fi object only has legacy {0} rules for one or two inputs.</entry>
        <entry key="licenseCheckoutFailed">Unable to check out a license for the Fixed-Point Designer.</entry>
        <entry key="localFimathMismatch"> The local embedded.fimath objects attached to the fi objects must be equal.</entry>
        <entry key="mathModeSlopeBiasNotDefined">Math is only supported for slope-bias FIs when the {0}Mode is SpecifyPrecision.</entry>
        <entry key="maxProductWordLengthExceeded">MaxProductWordLength is {0,number,integer} bits and a minimum word length of {1,number,integer} bits is necessary so that this product can be computed with no loss of precision. Increase MaxProductWordLength if you want the product to grow to a larger word length. To constrain the result to a type with a smaller word length, use colon-equals assignment, A(:) = B, or the CAST function.</entry>
        <entry key="maxSumWordLengthExceeded">MaxSumWordLength is {0,number,integer} bits and a minimum word length of {1,number,integer} bits is necessary so that this sum or difference can be computed with no loss of precision. Increase MaxSumWordLength if you want the sum to grow to a larger word length. To constrain the result to a type with a smaller word length, use colon-equals assignment, A(:) = B, or the CAST function.</entry>
        <entry key="maxVariableSizeExceeded">Maximum variable size allowed by the program is exceeded.</entry>
        <entry key="maxWordLengthExceeded">The computed word length of the result is {0,number,integer} bits. This exceeds the maximum supported wordlength of {1,number,integer} bits.</entry>
        <entry key="mismatchedNumericTypes"> The fixed-point inputs to the {0} function must have matching types.</entry>
        <entry key="mixedNumericTypes">{0} must have matching operand types.</entry>
        <entry key="noBuiltinIntegerInputs">Built-in integer inputs are not supported.</entry>
        <entry key="noMixedTypes">A combination of {0} and {1} inputs is not supported.</entry>
        <entry key="noNaN">NaN is not allowed in FI.</entry>
        <entry key="noOpLeadingToComplexSlopeBias">All complex FI objects created by Fixed-Point Designer operations \n must have an integer power of 2 slope, and a bias of 0.</entry>
        <entry key="noSignalToolboxLicense">There must be a Signal Processing Toolbox license available to use the ''{0}'' command with fi objects.</entry>
        <entry key="notCharArray">{0} input array not a character array.</entry>
        <entry key="notDefinedForComplexFi">Function ''{0}'' is not defined for complex-valued FI objects.</entry>
        <entry key="notDefinedForComplexSlopeBiasFi">Function {0} is only supported for complex-value FI objects that have an integer power of 2 slope, and a bias of 0.</entry>
        <entry key="notDefinedForOneBitFi">The function ''{0}'' is not defined for 1 bit fi objects.</entry>
        <entry key="notDefinedFunction">Function ''{0}'' is not defined for FI objects of data type ''{1}''.</entry>
        <entry key="notNumericDataType">{0} is only valid for built-in numeric data types.</entry>
        <entry key="numerictypeMismatch">NUMERICTYPE of both operands must be equal.</entry>
        <entry key="onlyBinaryPointMath">Math is supported only for binary-point scaling.</entry>
        <entry key="operandMustBeNumeric">Operand must be numeric.</entry>
        <entry key="outOfMemory">Not enough memory to allocate new fi object.</entry>
        <entry key="overflow">{0, number, integer}{1} overflow(s) occurred in the fi {2} operation.</entry>
        <entry key="parameterMustBeFi">This parameter must be a fi.</entry>
        <entry key="pow2BinaryPointOnly">pow2(A,K) can only be calculated for FI object A when the scaling of A has a fractional slope of 1 and 0 bias (binary-point only scaling).</entry>
        <entry key="pow2NotSupported">POW2(A) is not supported when A is a FI object.</entry>
        <entry key="qrEconomyModeNotSupported">Economy size decomposition is not supported for fixed-point inputs.</entry>
        <entry key="qrLeastSquaresNotSupported">The least-squares-solution form is not supported for fixed-point inputs.</entry>
        <entry key="qrPivotingNotSupported">Pivoting is not supported for fixed-point inputs.</entry>
        <entry key="quantizerFromFiBadDataType">DataType not recognized.</entry>
        <entry key="quantizerFromFiBadScaling">Scaling value not recognized.</entry>
        <entry key="quantizerFromFiNTArgMustBeFixedPoint">Only fixed-point NUMERICTYPE input arguments are supported by QUANTIZER objects.</entry>
        <entry key="quantizerFromFiNoSlopeBias">SlopeBias scaling not supported by QUANTIZER objects.</entry>
        <entry key="quantizerFromFiNoUnspecifiedScaling">Unspecified scaling not supported by QUANTIZER objects.</entry>
        <entry key="realAndNumeric">Input argument must be real and numeric.</entry>
        <entry key="realAndSigned">Input must be real and signed.</entry>
        <entry key="reinterpretcastNotAllowed">Function ''reinterpretcast'' is not defined for inputs of data type ''{0}''.</entry>
        <entry key="reinterpretcastUnspecifiedScaling">REINTERPRETCAST(A,T) is not supported when numerictype T has unspecified scaling.</entry>
        <entry key="reinterpretcastUnspecifiedSign">REINTERPRETCAST(A,T) is only supported when the SIGNEDNESS of \n NUMERICTYPE object T is SIGNED or UNSIGNED.</entry>
        <entry key="reinterpretcastWordLengthMismatch">In calls to REINTERPRETCAST(A, T), the word length of A and T must match. Presently, A is of data type ''{0}'' and T.WordLength is {1}.</entry>
        <entry key="rescaleInvalidParamValuePair">Invalid parameter/value pair arguments.</entry>
        <entry key="rescaleInvalidPropertyChange">Changing the {0} is not allowed in RESCALE.</entry>
        <entry key="rescaleNoSignChange">Changing the Sign is not allowed in RESCALE.</entry>
        <entry key="rescaleNoUnspecifiedScaling">Unspecified scaling is not allowed in RESCALE.</entry>
        <entry key="rescaleNoWordLengthChange">Changing the WordLength is not allowed in RESCALE.</entry>
        <entry key="rescaleTooManyNumericArgs">Too many initial numeric arguments.</entry>
        <entry key="reshapeDimsNotDivisible">Product of known dimensions, {0}, not divisible into total number of elements, {1}.</entry>
        <entry key="reshapeDimsNotRealInt">Size arguments must be real integers.</entry>
        <entry key="reshapeNotSameNumel">To RESHAPE the number of elements must not change.</entry>
        <entry key="reshapeSizNotDouble">FI_RESHAPE expecting DOUBLE for the SIZ vector.</entry>
        <entry key="reshapeSizeIsNegative">Size vector elements should be nonnegative.</entry>
        <entry key="reshapeSizeIsScalar">Size vector must have at least two elements.</entry>
        <entry key="reshapeSizeNotVector">Size vector must be a row vector with integer elements.</entry>
        <entry key="reshapeUnknownDim">Size can only have one unknown dimension.</entry>
        <entry key="roundingMethodUnknown">Rounding Method {0} is unknown.</entry>
        <entry key="saturateToMaxCodegenWordlength">The maximum word length of {0,number,integer} for Simulink and code generation has been exceeded.  Setting the word length to the maximum.</entry>
        <entry key="saturateToMaxWordlength">The maximum word length of {0,number,integer} has been exceeded.  Setting the word length to the maximum.</entry>
        <entry key="setBestPrecisionMustBeNumeric">Set Best Precision only valid for numeric data.</entry>
        <entry key="setBestPrecisionUnspecifiedSign">Sign must be specified true (signed) or false (unsigned) to compute best precision.</entry>
        <entry key="simulinkData128Bits">Fixed-point data types in Simulink must have word lengths less than or equal to 128 bits.</entry>
        <entry key="sortInvalidFiDimInput">DIM and MODE arguments to SORT cannot be FI objects.</entry>
        <entry key="sqrtMethodAmbiguous">The method name specified is ambiguous.</entry>
        <entry key="sqrtMethodNotFound">The ''{0}'' square-root method is not found.</entry>
        <entry key="sqrtNoBoolean">The sqrt function is not supported when A or T are of data type boolean.</entry>
        <entry key="sqrtNoNegative">The sqrt function is not supported for negative valued fi.</entry>
        <entry key="sqrtOutputRangeTooSmall">The range of the output type cannot represent the square root of the range of the input type.</entry>
        <entry key="sqrtUnspecifiedScaling">sqrt(A,T) or sqrt(A,T,F) is not supported when numerictype T has unspecified scaling.</entry>
        <entry key="sqrtUnspecifiedSign">sqrt(A,T) or sqrt(A,T,F) is not supported when numerictype T has unspecified sign.</entry>
        <entry key="staticEmptyMethodUnsupported">Static method empty is not supported by class embedded.fi. Use ''fi()'' to create an empty fi object.</entry>
        <entry key="storedIntegerOver64bits">Integers greater than 64 bits are not supported in the ''{0}'' function. For exact integer representation for any word length, use BIN, OCT, DEC, or HEX. To convert a stored integer value to double for any word length, use storedIntegerToDouble. </entry>
        <entry key="subsasgnRhsOfUnsupportedType">The operand on the right hand side of operator '=' in the \n subscripted assignment operation must belong to a type that can be cast \n into a FI object.</entry>
        <entry key="subscriptedIndexParenthesisLast">Subscripted indexing must appear last in an index expression.</entry>
        <entry key="sumRepeatedFlagNaN">Invalid option combination. Can only set one of ''omitnan'' and ''includenan''.</entry>
        <entry key="sumUnknownFlag">Invalid option. Option must be ''double'', ''native'', ''default'', ''omitnan'', or ''includenan''.</entry>
        <entry key="tooManyBits">The word length of the fi object is shorter than the number of bits \nyou were trying to assign. Only the {0, number, integer} least-significant bits were used.</entry>
        <entry key="tooManyInputs">Too many input arguments.</entry>
        <entry key="tooManyOutputs">Too many output arguments.</entry>
        <entry key="transposeNDArray">Transpose on ND array is not defined.</entry>
        <entry key="twoInpArgsNonScalarNotSameSize">If both input arguments are non-scalar, then they must be the same size.</entry>
        <entry key="undefinedFunction">Undefined function ''{0}'' for input arguments of type ''embedded.fi''.</entry>
        <entry key="undefinedFunctionGeneral">Undefined function ''{0}'' for input arguments of type ''{1}''.</entry>
        <entry key="underflow">{0, number, integer}{1} underflow(s) occurred in the fi {2} operation.</entry>
        <entry key="unrecognizedProperty">Property ''{0}'' is not recognized as valid.</entry>
        <entry key="unsupportedBooleanMath">Math operations are not allowed on fi objects with a boolean data type.</entry>
        <entry key="unsupportedCastBeforeSumFalseSlopeBias">Function {0} is not defined for FI objects with slope and bias scaling when CastBeforeSum is false.</entry>
        <entry key="unsupportedComplexArguments">The input arguments to the ''{0}'' function must be real.</entry>
        <entry key="unsupportedComplexBoolean"> The ''{0}'' function does not support complex fi objects of data type ''boolean''.</entry>
        <entry key="unsupportedComplexDatatype">Complex FI objects with ''DataType'' {0} are unsupported as inputs to the ''{1}'' function.</entry>
        <entry key="unsupportedComplexInput">The {0} function is not supported for complex fi.</entry>
        <entry key="unsupportedComplexSlopeBias">Complex FI objects must have an integer power of 2 slope, and a bias of 0.</entry>
        <entry key="unsupportedDataType">FI objects of data type ''{0}'' are not supported.</entry>
        <entry key="unsupportedFiMixedMath">Math operations are not allowed on fi objects with different data types.</entry>
        <entry key="unsupportedFloat16Math">Math operations are not allowed on fi objects with a half precision data type.</entry>
        <entry key="unsupportedInfInput">Inf is not supported for best-precision scaling fixed-point.  To use Inf as a fixed-point value, fully specify the numeric type.</entry>
        <entry key="unsupportedMixedMath">Data type mismatches between fi object operands of the ''{0}'' function are only allowed when the mismatch occurs between a ''Fixed'' and ''ScaledDouble'' data type.</entry>
        <entry key="unsupportedNanInput">NaN is not supported for best-precision scaling fixed-point. To use NaN as a fixed-point value, fully specify the numeric type.</entry>
        <entry key="unsupportedNumericTypeFirstInput">The first input to the fi constructor cannot be of type embedded.numerictype or Simulink.NumericType.</entry>
        <entry key="unsupportedPropCodeGen">Property ''{0}'' is not supported in code generation.</entry>
        <entry key="unsupportedScaledDoubleFunction">''{0}'' is not supported when the DataType is ''ScaledDouble''.</entry>
        <entry key="unsupportedScaledDoubleSlopeBiasMath">Math is not supported for slope-bias FIs when DataTypeMode \n is ''Scaled double: slope and bias scaling''.</entry>
        <entry key="unsupportedSlopeBias">The ''{0}'' function only supports fi objects that have a power of 2 slope and a bias of 0.</entry>
        <entry key="unsupportedSlopeBiasObj">The object ''{0}'' only support fi inputs with a power of 2 slope and a bias of 0.</entry>
        <entry key="unsupportedSparseInput">The {0} does not support inputs with sparse attributes.</entry>
        <entry key="unsupportedSparseInputs">The {0} do not support inputs with sparse attributes.</entry>
        <entry key="unsupportedSparseOperations">The fi object does not support operations on sparse matrices.</entry>
        <entry key="unsupportedStructFirstInput">The first input to the fi constructor cannot be of type struct.</entry>
        <entry key="unsupportedSyntax">The {0} syntax is not supported in the {1} function.</entry>
        <entry key="unsupportedType">Inputs of class ''{0}'' are not supported.</entry>
        <entry key="wordLengthTooBig">The word length of the FI object must be equal to or less than 32-bits.</entry>
        <entry key="wrongWordlength">The word length of the numeric type must be equal to \nthe word length of the fi object being cast.</entry>

        <!-- fi properties -->
        <entry key="DataTypeModeBoolean" translate="false" note="TranslateFalseBatch;">Boolean</entry>
        <entry key="DataTypeModeSingle" translate="false" note="TranslateFalseBatch;">Single</entry>
        <entry key="DataTypeModeDouble" translate="false" note="TranslateFalseBatch;">Double</entry>
        <entry key="DataTypeModeFixedUnspecified">Fixed-point: unspecified scaling</entry>
        <entry key="DataTypeModeFixedBinaryPoint">Fixed-point: binary point scaling</entry>
        <entry key="DataTypeModeFixedSlopeAndBias">Fixed-point: slope and bias scaling</entry>
        <entry key="DataTypeModeScaledDoubleUnspecified">Scaled double: unspecified scaling</entry>
        <entry key="DataTypeModeScaledDoubleBinaryPoint">Scaled double: binary point scaling</entry>
        <entry key="DataTypeModeScaledDoubleSlopeAndBias">Scaled double: slope and bias scaling</entry>
        <entry key="RoundingMethodCeiling">Ceiling</entry>
        <entry key="RoundingMethodConvergent">Convergent</entry>
        <entry key="RoundingMethodZero">Zero</entry>
        <entry key="RoundingMethodFloor">Floor</entry>
        <entry key="RoundingMethodNearest">Nearest</entry>
        <entry key="RoundingMethodRound">Round</entry>
        <entry key="SignednessSigned">Signed</entry>
        <entry key="SignednessUnsigned">Unsigned</entry>
        <entry key="SignednessAuto">Auto</entry>
        <entry key="OverflowActionSaturate">Saturate</entry>
        <entry key="OverflowActionWrap">Wrap</entry>
        <entry key="ProductModeFullPrecision">FullPrecision</entry>
        <entry key="ProductModeKeepLSB">KeepLSB</entry>
        <entry key="ProductModeKeepMSB">KeepMSB</entry>
        <entry key="ProductModeSpecifyPrecision">SpecifyPrecision</entry>
        <entry key="SumModeFullPrecision">FullPrecision</entry>
        <entry key="SumModeKeepLSB">KeepLSB</entry>
        <entry key="SumModeKeepMSB">KeepMSB</entry>
        <entry key="SumModeSpecifyPrecision">SpecifyPrecision</entry>

        <!-- fi Button -->
        <entry key="DialogTitle">Insert {0} Constructor</entry>
        <entry key="InsertFiButtonText">Insert fi constructor...</entry>
        <entry key="InsertFiButtonDescription">Specify fixed-point data</entry>
        <entry key="InsertNumericTypeText">Insert numerictype constructor...</entry>
        <entry key="InsertNumericTypeDescription">Define fixed-point data type attributes</entry>
        <entry key="InsertFiMathButtonText">Insert fimath constructor...</entry>
        <entry key="InsertFiMathButtonDescription">Control fixed-point arithmetic behavior</entry>

        <!-- insert constructor dialogs -->
        <entry key="dialogValuePlaceholder">For example, pi, 2.718, or x/2</entry>
        <entry key="numericTypePanelText">numerictype</entry>
    </message>
</rsccat>

<!-- LocalWords:  Roundoff logtype GETQLOGGERSTRUCT th SIZ subscripted FIs fis
-->
