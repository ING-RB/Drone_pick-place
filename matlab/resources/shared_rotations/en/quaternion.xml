<?xml version="1.0"?>
<!-- Copyright 2017-2023 The MathWorks, Inc. -->
<rsccat version="1.0" locale="en_US" product="shared_rotations">
  <message>
    <entry key="QuatAddReals">Quaternion addition requires operands to be quaternions or real, double or single precision numbers.</entry>
    <entry key="QuatSubReals">Quaternion subtraction requires operands to be quaternions or real, double or single precision numbers.</entry>
    <entry key="QuatTimesReals">Quaternion multiplication requires operands to be quaternions or real, double or single precision numbers.</entry>
    <entry key="QuatMtimesArg">One argument to mtimes must be scalar for quaternions.</entry>
    <entry key="QuatMldivideArg">One argument to mldivide must be scalar for quaternions.</entry>
    <entry key="QuatMrdivideArg">One argument to mrdivide must be scalar for quaternions.</entry>
    <entry key="QuatPointFrame">The last argument should be either 'point' or 'frame'.</entry>
    <entry key="QuatRotvecConv">To convert from a rotation vector in radians, use quaternion(x,'rotvec').</entry>
    <entry key="QuatRotvecdConv">To convert from a rotation vector in degrees, use quaternion(x,'rotvecd').</entry>
    <entry key="QuatRotmatConv">To convert from a rotation matrix use quaternion(x,'rotmat', pf) where pf is 'point' or 'frame'.</entry>
    <entry key="QuatUnexpectedConv">Invalid quaternion constructor syntax. Type <![CDATA[<a href="matlab:help quaternion">''help quaternion''</a>]]> to see accepted syntaxes.</entry>
    <entry key="QuatEulerConv">To convert from Euler angles in radians use quaternion(x,'euler', cv, pf) where cv is a conversion string, like 'ZYX', and pf is 'point' or 'frame'.</entry>
    <entry key="QuatEulerdConv">To convert from Euler angles in degrees use quaternion(x,'eulerd', cv, pf) where cv is a conversion string, like 'ZYX', and pf is 'point' or 'frame'.</entry>
    <entry key="ExpectedQuat">The first argument must be an N-by-1 or 1-by-N quaternion.</entry>
    <entry key="RotArgs">Arguments do not have compatible sizes.</entry>
    <entry key="RotmatDims">Invalid rotation matrix dimensions. Specify a rotation matrix with 2 or 3 dimensions.</entry>
    <entry key="AllQuat">All inputs must be quaternions.</entry>
    <entry key="CatQuat">Error using cat. The dimension must be a real, scalar, positive integer. All other inputs must be quaternions.</entry>
    <entry key="NoSeqConv">{0} is not a valid rotation sequence.</entry>
    <entry key="SameClass">All inputs to the quaternion constructor must be the same class (double or single).</entry>
    <entry key="MustBeReal">All inputs to the quaternion constructor must be real.</entry>
    <entry key="SameSize">All inputs to the quaternion constructor must be the same size.</entry>
    <entry key="Constructor4Inputs">To create a quaternion from parts, use quaternion(a,b,c,d). All four parts are required.</entry>
    <entry key="QuatExpected">Expected a quaternion as the first argument in cast(a, 'like', b).</entry>
    <entry key="QuatAllArgs">All arguments must be quaternions.</entry>
    <entry key="QuatRHS">Expected a quaternion on the right-hand side.</entry>
    <entry key="RotArg2">The second argument must be a double or single, N-by-3 array.</entry>
    <entry key="SingleDouble">{0} is not a valid underlying class for a quaternion. Choose either 'single' or 'double'.</entry>
    <entry key="ValAttrNonzero">Attribute 'nonzero' not supported for quaternion input.</entry>
    <entry key="ValAttrReal">Attribute 'real' not supported for quaternion input.</entry>
    <entry key="QuatOrNumeric">All arguments must be quaternions or numeric.</entry>
    <entry key="QuatDivReals">Quaternion division requires operands to be quaternions or real numbers (double or single precision).</entry>
    <entry key="QuatPowerReal">Quaternion power requires exponent to be a real number (double or single precision).</entry>
    <entry key="MeanRot2Arg">Expected the second argument to meanrot to be either a dimension or a string indicating how to handle NaNs.</entry>
    <entry key="MeanRotDimInt">Dimension argument must be a positive integer scalar.</entry>
    <entry key="MeanRotNanFlag">Valid values for the NANFLAG are ''{0}'' and ''{1}''.</entry>
    <entry key="QuatExpectedArg">Expected input {0} to be a quaternion.</entry>
  </message>
</rsccat>
