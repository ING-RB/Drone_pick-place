<?xml version="1.0" encoding="UTF-8" ?>
<!-- Copyright 2022-2023 The MathWorks, Inc. -->
<rsccat version="1.0" locale="en_US" product="ros" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../schema/msgcat.xsd">
  <message>
    <entry key="MainWindowTitle">ROS Middleware Configuration</entry>
    <entry key="SelectRMWConfigurationTitle">Select ROS Middleware (RMW) Implementation</entry>
    <entry key="RMWFastrtpsCpp" translate="false">rmw_fastrtps_cpp</entry>
    <entry key="RMWFastrtpsDynamicCpp" translate="false">rmw_fastrtps_dynamic_cpp</entry>
    <entry key="RMWCycloneddsCpp" translate="false">rmw_cyclonedds_cpp</entry>
    <entry key="RMWConnextdds" translate="false">rmw_connextdds</entry>
    <entry key="SelectRMWConfigurationLabel" translate="false">RMW Implementation:</entry>
    <entry key="SelectRMWDescription">Select RMW implementation to configure.</entry>
    <entry key="SelectRMWFastRTPS">The default RMW implementation is ''rmw_fastrtps_cpp'', which uses static type support with eProsima Fast DDS as the underlying DDS implementation.</entry>
    <entry key="SelectRMWWhatToConsider">ROS Middleware configuration enables ROS 2 node to use selected RMW implementation. ROS Toolbox provides inbuilt support for eProsima Fast DDS (&lt;b&gt;v2.14.3&lt;/b&gt;) and Eclipse Cyclone DDS (&lt;b&gt;v0.10.5&lt;/b&gt;) middleware. You can also use custom RMW implementation based on a different middleware.&lt;br&gt;&lt;/br&gt;&lt;br&gt;RMW implementation with static type support is faster than the dynamic type support alternative.&lt;/br&gt;</entry>
    <entry key="SelectRMWFastRTPSDynamic">''rmw_fastrtps_dynamic_cpp'' uses dynamic type support with eProsima Fast DDS as the underlying DDS implementation.</entry>
    <entry key="SelectRMWCycloneDDS">''rmw_cyclonedds_cpp'' lets ROS 2 use dynamic type support with Eclipse Cyclone DDS as the underlying DDS implementation.</entry>
    <entry key="SelectRMWConnextProDDS">''rmw_connextdds'' lets ROS 2 use dynamic type support with RTI Connext DDS Professional as the underlying DDS implementation.</entry>
    <entry key="ScreenTwoTitle">Validate DDS Installation</entry>
    <entry key="BrowseButton">Browse</entry>
    <entry key="VerifyInstallationButton">Verify Installation</entry>
    <entry key="VerifyDDSInstallationSteps">Ensure that RTI Connext DDS Professional is available on your host platform by following the instructions for &lt;a href=&quot;http://www.mathworks.com/rti/downloading-connext-dds&quot;&gt;Downloading Connext DDS&lt;/a&gt; and &lt;a href=&quot;http://www.mathworks.com/rti/setting-up-a-license&quot;&gt;Setting Up a License&lt;/a&gt;.&lt;/br&gt;&lt;br&gt;Once the RTI Connext Professional installation is available, click &lt;b&gt;'Browse'&lt;/b&gt; to select the installation directory on your host platform and then click &lt;b&gt;'Verify installation'&lt;/b&gt;.</entry>
    <entry key="VerifyDDSInstallationHelp">&lt;b&gt;''rmw_connextdds''&lt;/b&gt; requires RTI Connext DDS Professional (version &lt;b&gt;6.0.1&lt;/b&gt; or later) to be installed on your host platform.</entry>
    <entry key="SelectDDSInstallation_InvalidFolder">Unable to find RTI Connext DDS Professional installation. Specify the correct location of the installation.</entry>
    <entry key="BrowseDDSInstallation">Browse RTI Connext DDS Professional installation directory</entry>
    <entry key="DDSInstallation_Validation">Validating the RTI Connext DDS Professional installation</entry>
    <entry key="InvalidLicense">Unable to find RTI Connext DDS Professional license file. Ensure that the license file ''rti_license.dat'' is present in the installed location.</entry>
    <entry key="DDSValidationSuccessStatus">RTI Connext DDS Professional installation is valid. Click &lt;b&gt;'Next'&lt;/b&gt; to build and register &lt;b&gt;''rmw_connextdds''&lt;/b&gt; with MATLAB/Simulink.</entry>
    <entry key="RMWConnextDDSWhatToConsider">Ensure that the parent directory follows valid naming conventions and no additional packages are present alongside ''rmw_connextdds'' in the directory.</entry>
    <entry key="Screen_Loading">Screen Loading</entry>
    <entry key="ScreenThreeTitle">Build RMW Implementation Package</entry>
    <entry key="ScreenThreeDescription">Download &lt;b&gt;''rmw_connextdds''&lt;/b&gt; from the &lt;a href=&quot;http://www.mathworks.com/ros/jazzy/rmw_connextdds&quot;&gt;repository&lt;/a&gt; on your host platform and follow the steps below to build the package.</entry>
    <entry key="RMWConnextDDSPackageBrowse">&lt;br&gt;1. Browse to the parent directory of the ''rmw_connextdds'' package.&lt;/br&gt;</entry>
    <entry key="BuildRMWArtifactsStep">&lt;br&gt;2. Click the ''Build RMW Artifacts'' button to build ''rmw_connextdds''.&lt;/br&gt;</entry>
    <entry key="BuildRMWArtifactsButton">Build RMW Artifacts</entry>
    <entry key="BrowseRMWPlaceHolder">Browse ''rmw_connextdds'' package location</entry>
    <entry key="TestRMWButton">Test RMW</entry>
    <entry key="PackageBuildProgress">Build is in progress. This may take several minutes...</entry>
    <entry key="BuildRMWAboutSelection">Building the ''rmw_connextdds'' package can take several minutes. Wait until the build process is completed successfully.</entry>
    <entry key="BuildRMWPackageSuccess">Build succeeded: <![CDATA[<a href="matlab:web(''{0}'')">build_log</a>]]></entry>
    <entry key="ClickTestRMWMessage">Click ''Test RMW''.</entry>
    <entry key="BuildRMWPackageFailedLogFile">Build failed: <![CDATA[<a href="matlab:web(''{0}'')">build_log</a>]]></entry>
    <entry key="BuildRMWPackageFailedStatus">Build failed: {0}</entry>
    <entry key="NodeCreationSuccess">Test succeeded. Click ''Finish'' to use ''{0}'' as the RMW implementation with MATLAB/Simulink.</entry>
    <entry key="NodeCreationFailed">Test failed: {0}</entry>
    <entry key="TestRMWBusySpinnerLabel">Creating a ROS 2 node with RMW implementation as ''{0}''</entry>
    <entry key="AboutFinishSelection">Click ''Finish'' once the test node is created successfully, to close this window. The selected RMW implementation is configured with the ROS Toolbox preferences.</entry>
    <entry key="TestRMWImplementationTitle">Test RMW Implementation</entry>
    <entry key="TestRMWImplementationWithBuiltinDDS">Click the &lt;b&gt;''Test RMW''&lt;/b&gt; button, to validate creation of a ROS 2 node with RMW implementation as &lt;b&gt;''{0}''&lt;/b&gt;.</entry>

    <!-- Iceoryx Screen 1 - Select the RMW implementation -->
    <entry key="RMWIceoryxCpp" translate="false">rmw_iceoryx_cpp</entry>
    <entry key="RMWIceoryxHelpText">''rmw_iceoryx_cpp'' lets ROS 2 use dynamic type support with Eclipse iceoryx as the inter-process communication (IPC) middleware.</entry>
    <entry key="OtherRMW" translate="false">other</entry>

    <!-- Iceoryx Screen 2 - Validate iceoryx middleware installation -->
    <entry key="IceoryxValidationScreenTitle">Validate Iceoryx Middleware Installation</entry>
    <entry key="IceoryxMiddlewareWhatToConsider">Ensure that there are no additional packages in the location where ''iceoryx'' is present.&lt;br&gt;&lt;b&gt;''rmw_iceoryx_cpp''&lt;/b&gt; requires Eclipse iceoryx to be installed on your system. Recommended version is &lt;b&gt;v2.0.3&lt;/b&gt; (Blueberry).</entry>
    <entry key="VerifyIceoryxInstallationSteps">&lt;br&gt;Ensure that Eclipse iceoryx is available on your host platform by following the instructions to &lt;a href=&quot;http://www.mathworks.com/iceoryx/v2.0.3/installating-iceoryx&quot;&gt;Build and install iceoryx&lt;/a&gt;.&lt;/br&gt;&lt;br&gt;Once the Eclipse iceoryx installation is available, click &lt;b&gt;'Browse'&lt;/b&gt; to select the installation directory on your system and then click &lt;b&gt;'Verify installation'&lt;/b&gt;.</entry>

    <entry key="IceoryxValidationProgress">Validating the Eclipse iceoryx installation</entry>
    <entry key="BrowseIceoryxInstallation">Browse Eclipse iceoryx installation directory</entry>
    <entry key="IceoryxValidationSuccessStatus">Verification successful. Click &lt;b&gt;'Next'&lt;/b&gt; to build and register &lt;b&gt;''rmw_iceoryx_cpp''&lt;/b&gt; with MATLAB/Simulink.</entry>
    <entry key="IceoryxValidationFailedStatus">Verification failed. Specify correct location to ''iceoryx''.</entry>

    <!-- Iceoryx Screen 3 - Build RMW Package -->
    <entry key="RMWIceoryxCppScreenDescription">Download &lt;b&gt;''rmw_iceoryx_cpp''&lt;/b&gt; from the &lt;a href=&quot;http://www.mathworks.com/ros/humble/rmw_iceoryx_cpp&quot;&gt;repository&lt;/a&gt; on your system and follow the steps below to build the package.</entry>
    <entry key="RMWIceoryxCppPackageBrowse" >&lt;br&gt;1. Browse to the parent directory of ''rmw_iceoryx_cpp'' package.&lt;/br&gt;</entry>
    <entry key="BuildRMWIceoryxCppStep">&lt;br&gt;2. Click the 'Build RMW Artifacts' button to build ''rmw_iceoryx_cpp''.&lt;/br&gt;</entry>
    <entry key="BrowseRMWIceoryxCppPlaceHolder">Browse ''rmw_iceoryx_cpp'' package location</entry>
    <entry key="BuildRMWIceoryxCppSelection">Building ''rmw_iceoryx_cpp'' package can take several minutes. Wait until the build process is completed successfully.</entry>
    <entry key="RMWIceoryxCppWhatToConsider">Ensure that the parent directory follows valid naming conventions and no additional packages are present alongside ''rmw_iceoryx_cpp'' in the directory.</entry>

    <entry key="RMWReconfigurationTitle">Reconfigure ROS Middleware Implementation</entry>
    <entry key="RMWConfigurationAvailable">ROS middleware implementation ''{0}'' is already configured on your system. Click ''Next'' if you wish to re-configure the RMW implementation.</entry>
    <entry key="RMWAvailableConfigurationAboutSelection">Click ''Cancel'' to close this window.</entry>

    <!--Other RMW Implementation -->
    <entry key="SelectCustomRMWAboutSelection">To build a custom RMW implementation package, set &lt;b&gt;RMW Implementation&lt;/b&gt; to other.</entry>

    <!-- Validate RMW Implementation Package Screen -->
    <entry key="RMWValidationScreenTitle">Validate ROS Middleware (RMW) Implementation Package</entry>
    <entry key="RMWValidationScreenInstructions">Ensure that a ROS middleware implementation package is available on your host platform. Browse to its location and click &lt;b&gt;''Validate RMW Package''&lt;/b&gt; button.</entry>
    <entry key="RMWValidationScreenButton">Validate RMW Package</entry>
    <entry key="RMWValidationScreenBrowse">Browse RMW implementation package location</entry>
    <entry key="RMWValidationScreenSpinnerText">Validating the ROS middleware (RMW) implementation package.</entry>
    <entry key="RMWPackageEmptyPathError">Path to ROS middleware implementation package must not be empty.</entry>
    <entry key="RMWPackageNotFoundError">Unable to find a valid ROS middleware implementation package in the location provided. Specify the correct location of the package.</entry>
    <entry key="RMWPackageAvailable">RMW implementation package &lt;b&gt;''{0}''&lt;/b&gt; is available in the location provided, which is based on {1} type support.</entry>
    <entry key="RMWValidationNextActionDynamic">Click &lt;b&gt;''Next''&lt;/b&gt; to provide the middleware installation environment.</entry>
    <entry key="RMWValidationNextActionStatic">Click &lt;b&gt;''Next''&lt;/b&gt; to continue.</entry>
    <entry key="RMWValidationStatusSameTypeSupport">RMW implementation packages &lt;b&gt;''{0}''&lt;/b&gt; and &lt;b&gt;''{1}''&lt;/b&gt; are available in the location provided. Both are based on {2} type support.</entry>
    <entry key="RMWValidationStatusDifferentTypeSupport">RMW implementations packages &lt;b&gt;''{0}''&lt;/b&gt; and &lt;b&gt;''{1}''&lt;/b&gt; are available in the location provided. They are based on {2} and {3} type supports respectively.</entry>
    <entry key="RMWValidationNextActionMultipleRMW">Click &lt;b&gt;''Next''&lt;/b&gt; to choose the RMW implementation package to be built.</entry>
    <entry key="RMWValidationStatusMultipleRMW">Multiple RMW implementation packages are available in the location provided.</entry>
    <entry key="RMWValidationScreenAboutSelection">Click the Validate RMW Package button to verify that the location provided contains a RMW implementation package.</entry>
    <entry key="RMWValidationScreenWhatToConsider">The RMW implementation package name starts with ''rmw_''. Browse to the location of the RMW implementation package or folder containing one or multiple RMW implementation packages for a particular middleware.</entry>

    <!-- Choose RMW Implementation -->
    <entry key="ChooseRMWPackageScreenTitle">Choose RMW Implementation Package(s)</entry>
    <entry key="ChooseRMWPackageScreenInstructions">Choose the RMW implementation package(s) available in the package location provided to build.</entry>
    <entry key="RMWPackageSelectionLabel">RMW Implementation Package(s):</entry>
    <entry key="ChooseRMWPackageScreenAboutSelection">Selecting ''all'' option will build all the available RMW implementations in the RMW package location provided.</entry>

    <!-- Validate ROS IDL Type Support Package Screen -->
    <entry key="ValidateTSPkgScreenTitle">Validate ROS IDL Type Support Package</entry>
    <entry key="ValidateTSPkgScreenInstructions">The RMW implementation package &lt;b&gt;''{0}''&lt;/b&gt; in the location requires a static based ROS IDL type support package. If the required type support package is not available in <![CDATA[<a href="matlab:{1}">this</a>]]> directory, then copy it to the directory and click &lt;b&gt;''Validate Type Support''&lt;/b&gt; button.</entry>
    <entry key="ValidateTSPkgScreenButton">Validate Type Support</entry>
    <entry key="ValidateTSPkgScreenAboutSelection">Click the Validate Type Support button to verify that the location provided contains a ROS IDL type support package.</entry>
    <entry key="ValidateTSPkgScreenWhatToConsider">ROS IDL type support package name starts with ''rosidl_typesupport_'' and follows valid ROS naming conventions.</entry>
    <entry key="ValidatingTSPkgScreenSpinnerText">Validating the ROS IDL type support package.</entry>
    <entry key="NoIDLTypeSupportPkgFound">Unable to find ROS IDL type support package in the parent directory.</entry>
    <entry key="IDLTypeSupportIsAvailable">ROS IDL type support package is available.</entry>

    <!-- Middleware Installation Environment Screen -->
    <entry key="MiddlewareInstallationEnvScreen">Middleware Installation Environment Settings</entry>
    <entry key="MiddlewareInstallationEnvScreenInstructions">Browse to the middleware installation platform location and set the environment variables required to build the RMW implementation package.</entry>
    <entry key="EnvironmentVariablesLabel">Environment Variables:</entry>
    <entry key="AddEnvButton">Add</entry>
    <entry key="RemoveEnvButton">Remove</entry>
    <entry key="MiddlewareInstallationEnvScreenWhatToConsider">Click &lt;b&gt;''Add''&lt;/b&gt; button to add an environment variable. Click &lt;b&gt;''Remove''&lt;/b&gt; button to remove an environment variable.</entry>
    <entry key="MiddlewareInstallationEnvScreenSpinnerText">Applying middleware environment settings.</entry>
    <entry key="MiddlewareInstallationEnvScreenBrowse">Browse middleware installation directory</entry>

    <!-- Build Custom RMW Package Screen -->
    <entry key="BuildCustomRMWAboutSelection">Build process may take several minutes. Wait until the process is completed successfully.</entry>
    <entry key="BuildCustomRMWScreenInstructions">Click &lt;b&gt;''Build RMW Artifacts''&lt;/b&gt; button to build &lt;b&gt;''{0}''&lt;/b&gt; package artifacts.</entry>
    <entry key="BuildCustomRMWForAllPkg">Click &lt;b&gt;''Build RMW Artifacts''&lt;/b&gt; button to build RMW Implementation package artifacts.</entry>
    <entry key="BuildCustomRMWScreenWhatToConsider">RMW implementation artifacts will be generated under ''install'' directory of the selected RMW implementation location.</entry>

    <!--Build ROS 2 Message Packages Screen -->
    <entry key="BuildMessagesScreenTitle">Build ROS 2 Message Packages</entry>
    <entry key="BuildMessagesScreenInstructions">Artifacts for all the ROS 2 message packages including custom messages must be regenerated. Click &lt;b&gt;Build Message Artifacts&lt;/b&gt; button to rebuild the message packages.</entry>
    <entry key="BuildMessagesButton">Build Message Artifacts</entry>
    <entry key="BuildMessagesScreenAboutSelection">Clicking the Build Message Artifacts button will build ROS 2 message packages for all the available RMW implementations that are registered with MATLAB/Simulink.</entry>
    <entry key="BuildMessagesScreenWhatToConsider">All ROS 2 messages will be copied into the RMW implementation package location provided. Building ROS 2 messages artifacts may take up to an hour. These artifacts will be generated under ''matlab_msg_gen'' directory in the same location.</entry>
    <entry key="BuildMessagesScreenSpinnerOne">Copying message packages, this may take few minutes.</entry>
    <entry key="BuildMessagesScreenSpinnerTwo">Build is in progress. This may usually take less than an hour.</entry>

  </message>
</rsccat>