<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright 2025 The MathWorks, Inc.-->

<rsccat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" locale="ja_JP" product="ros" xsi:noNamespaceSchemaLocation="../../resources/schema/msgcat.xsd">
  <message>
    <entry key="PubSubMainTab">メイン</entry>
    <entry key="PubSubQOSTab">QoS</entry>
    <entry key="QOSHistoryPrompt">History:</entry>
    <entry key="QOSDepthPrompt">Depth:</entry>
    <entry key="QOSReliabilityPrompt">Reliability:</entry>
    <entry key="QOSDurabilityPrompt">Durability:</entry>
    <entry key="QOSDeadlinePrompt">Deadline:</entry>
    <entry key="QOSLifespanPrompt">Lifespan:</entry>
    <entry key="QOSLivelinessPrompt">Liveliness:</entry>
    <entry key="QOSLeaseDurationPrompt">Lease Duration:</entry>
    <entry key="QOSAvoidROSNamespaceConventionsPrompt">ROS の名前空間規則を回避</entry>
    <entry key="TopicSourceFromNetwork">ROS ネットワークから選択</entry>
    <entry key="TopicSourceSpecifyOwn">独自に指定</entry>
    <entry key="NoTopicsAvailableError">ROS 2 ネットワークからの使用可能なトピックはありません。</entry>
    <entry key="BlankMsgDescription">
      指定されたメッセージ、サービス、またはアクションのタイプで空白のメッセージを作成します。 \n \nブロック出力は空白の ROS 2 メッセージ (バス信号) です。ROS 2 メッセージ、サービス リクエストとサービス応答、アクション フィードバック、アクション ゴール、およびアクションの結果のメッセージから選択するように [クラス] パラメーターを設定します。Bus Assignment ブロックを使用してバス信号の特定のフィールドを変更します。 \n \nバス信号はゼロ値 (グラウンド) に初期化されます。
    </entry>
    <entry key="ConfigNetworkAddrLinkText">ROS 2 ドメイン ID と ROS ミドルウェア (RMW) の構成</entry>
    <entry key="DialogTitle">ROS 2 メッセージ タイプの選択</entry>
    <entry key="VariableSizeOutputsPrompt">可変サイズの信号の出力</entry>
    <entry key="ConfigureUsingROS2Label">ROS 2 を使用した構成</entry>
    <entry key="OutputSettingsPrompt">出力設定</entry>
    <entry key="ReadImageTitle">ROS 2 Read Image</entry>
    <entry key="ReadImageDescription">
      ROS 2 イメージ メッセージからイメージ信号を抽出します。\n \nMsg 端子は、イメージを表す ROS 2 メッセージ (バス信号) を受け入れます。Image 端子は、グレースケール イメージに対しては [M 行 N 列] の配列を、カラー イメージに対しては [MxNx3] の配列を出力します。Alpha 端子は、アルファ (透明度) チャネルを指定するイメージに対して [M 行 N 列] の配列を出力します。ErrorCode 端子はイメージ変換ステータスを整数値として出力します。\n \n[ROS 2 を使用した構成] を押して、ROS 2 トピックの内容を基に [イメージの最大サイズ] と [イメージのエンコード] を設定します。
    </entry>
    <entry key="ImagePropertiesPrompt">イメージの設定</entry>
    <entry key="MaximumImageSizePrompt">イメージの最大サイズ:</entry>
    <entry key="ImageEncodingPrompt">イメージのエンコード:</entry>
    <entry key="ShowAlphaOutputPortPrompt">Alpha 出力端子の表示</entry>
    <entry key="ReadPointCloudTitle">ROS 2 Read Point Cloud</entry>
    <entry key="ReadPointCloudDescription">
      ROS 2 点群メッセージから点群データを抽出します。\n \nMsg 端子は、点群を表す ROS 2 メッセージ (バス信号) を受け入れます。[点群の構造の保持] がオフになっている場合 (既定)、XYZ 端子は点の直交座標を [P 行 3 列] の配列として出力します。ここで、P は入力される点群内の点の数です。それ以外の場合、XYZ 端子は点の直交座標を [MxNx3] の配列として出力します。ここで、M と N はそれぞれ、入力される点群の高さと幅です。ErrorCode 端子はイメージ変換ステータスを整数値として出力します。 \n \n予測される [点群の最大サイズ] を [高さ, 幅] として指定します。[ROS 2 を使用した構成] を押して、ライブ ROS 2 ネットワーク上のトピックから [点群の最大サイズ] を設定します。
    </entry>
    <entry key="PointCloudPropertiesPrompt">点群の設定</entry>
    <entry key="PreserveStructurePrompt">点群の構造の保持</entry>
    <entry key="MaximumPointCloudSizePrompt">点群の最大サイズ:</entry>
    <entry key="PointCloudDataTypePrompt">点群のデータ型:</entry>
    <entry key="ShowRGBOutputPrompt">RGB 出力端子の表示</entry>
    <entry key="ShowIntensityOutputPrompt">Intensity 出力端子の表示</entry>
    <entry key="ReadScanTitle">ROS 2 Read Scan</entry>
    <entry key="ScanPropertiesPrompt">スキャンの設定</entry>
    <entry key="MaximumArrayLengthPrompt">配列の最大長:</entry>
    <entry key="ReadScanDescription">
      ROS 2 レーザー スキャン メッセージからスキャン データを抽出します。 \n \nMsg 端子は、レーザー スキャンを表す ROS 2 メッセージ (バス信号) を受け入れます。Angles、Intensities、および ErrorCode の出力端子は、[出力設定] を使用してオンとオフを切り替えることができます。Ranges、Angles、および Intensities の各端子は、対応する [N 行 1 列] の配列を ROS 2 メッセージから出力します。ErrorCode 端子は、読み取りスキャンのステータスを整数値として出力します。 \n \n予想される配列の最大長をスカラー値として指定してください。[ROS 2 を使用した構成] を押して、ライブ ROS 2 ネットワーク上のトピックから [配列の最大長] を設定します。
    </entry>
    <entry key="ShowAnglesOutputPrompt">Angles 出力端子の表示</entry>
    <entry key="WriteImageTitle">ROS 2 Write Image</entry>
    <entry key="WriteImageDescription">
  イメージ データから ROS 2 メッセージを書き込みます。 \n \nImage 端子には、単一チャネルのイメージに対しては [M 行 N 列] の配列、マルチチャネルのイメージに対しては [MxNxC] の配列が必要です。Alpha 端子には、アルファ (透明度) チャネルを指定するイメージに対し [M 行 N 列] の配列が必要です。イメージのエンコードは [イメージの設定] で指定します。出力は、イメージを表す ROS 2 メッセージ (バス信号) です。
</entry>
    <entry key="WritePointCloudTitle">ROS 2 Write Point Cloud</entry>
    <entry key="WritePointCloudDescription">
  点群データから ROS 2 メッセージを書き込みます。 \n \nXYZ 端子は、点の直交座標を [P 行 3 列] の配列 (P は点の数) または [MxNx3] の配列 (M と N はそれぞれ点群の高さと幅) として指定します。RGB 端子と Alpha 端子は、選択した場合、色と透明度をそれぞれ指定します。XYZ が [P 行 3 列] の配列の場合、RGB は [P 行 3 列] の配列でなければならず、Alpha は [P 行 1 列] の配列でなければなりません。XYZ が [MxNx3] の配列の場合、RGB は [MxNx3] の配列でなければならず、Alpha は [M 行 N 列] の配列でなければなりません。カラー フィールドは [入力設定] で指定します。出力は、点群を表す ROS 2 メッセージ (バス信号) です。
</entry>
    <entry key="ShowRGBInputPortPrompt">RGB 入力端子の表示</entry>
    <entry key="SelectRGBInputPrompt">カラー フィールドの選択</entry>
    <entry key="InputConfiguration">入力設定:</entry>
    <entry key="ShowAlphaInputPortPrompt">Alpha 入力端子の表示</entry>
    <entry key="ServiceCallerMaskTitle">ROS 2 Call Service</entry>
    <entry key="ServiceCallerDescription">
      ROS 2 ネットワークでサービスを呼び出します。\n \nReq ブロックの入力は ROS 2 サービス リクエスト メッセージ (バス信号) を受け入れます。Resp ブロックの出力はサービス応答メッセージを返します。\n \nアクティブな ROS 2 ネットワークで利用可能なサービスのリストから選択するには、[ソース] パラメーターを [ROS ネットワークから選択] に設定して [選択] ボタンを使用します。アクティブなサービスのリストを入手するには、ROS 2 ネットワークに接続していなければなりません。選択したサービスのタイプは自動的に設定されます。 \n \nアクティブな ROS 接続なしでカスタム サービスの入力またはサービス名の指定を行うには、[ソース] を [独自に指定] に設定します。[名前] パラメーターを使用してサービス名を指定し、[選択] ボタンを使用してサービス タイプを選択します。
    </entry>
    <entry key="NoServicesAvailableError">ROS 2 ネットワークから使用可能なサービスはありません。</entry>
    <entry key="ServiceDialogTitle">ROS 2 サービスの選択</entry>
    <entry key="ServiceTypeDialogTitle">ROS 2 サービス タイプの選択</entry>
    <entry key="CurrentTimeMaskTitle">ROS 2 Current Time</entry>
    <entry key="CurrentTimeMaskDescription">現在の ROS 2 時間またはシステム時間を取得します。\n\nTime ブロックの出力は、ROS 2 ノードで使用される現在の時間に対応する信号です。[出力形式] パラメーターの選択内容に応じて、出力は bus または double となります。</entry>
    <entry key="ParamContainerTitle">ROS 2 パラメーター</entry>
    <entry key="GetParamMaskTitle">ROS 2 Get Parameter</entry>
    <entry key="GetParamMaskDescription">
     ROS パラメーター サーバーから値を取得します。\n\nValue 端子は取得した ROS 2 パラメーターの値を出力します。Length 端子は取得した ROS 2 パラメーター配列のサイズを出力します。
    </entry>
    <entry key="GetParamInvalidName">無効なパラメーター名 ''{0}''。パラメーター名は 1 つの有効な MATLAB 変数名か、ドットで区切られた複数の有効な MATLAB 変数名でなければなりません。</entry>
    <entry key="GetParamMaxLenPrompt">最大長:</entry>
    <entry key="GetParamInvalidInitValue">{0} は {1} であることが想定されています。実際のタイプは {2} でした。</entry>
    <entry key="GetParamTruncateVal">
          ROS 2 パラメーター ''{0}'' の値は最大で {1,number,integer} 項目をもつことができますが、受信したメッセージには {2,number,integer} 項目があります。\n出力値は最初の {1,number,integer} 項目に打ち切られます。 &lt;actions exclusiveFixIts="yes"&gt; &lt;action type="fixit" retvalue="false"&gt; &lt;cmd&gt;set_param(''{3}'','ParameterMaxArrayLength',''{1,number,integer}'');&lt;/cmd&gt; &lt;txt&gt;Get Parameter ブロック ''{3}'' の [最大長] を {2,number,integer} に増やす。&lt;/txt&gt; &lt;/action&gt; &lt;/actions&gt;
        
      </entry>
    <entry key="GetParamInvalidDataType">
          ROS 2 Get Parameter ブロック ''{0}'' のデータ型は ''{1}'' に設定されていますが、受信した値は ''{2}'' 型です。\nSimulink での ROS 2 パラメーターの動的なデータ型変更はサポートされていません。最後の有効な出力が再生されます。 &lt;actions exclusiveFixIts="yes"&gt; &lt;action type="fixit" retvalue="false"&gt; &lt;cmd&gt;set_param(''{0}'','ParameterType',''{1}'');&lt;/cmd&gt; &lt;txt&gt; "block name" ブロックの [データ型] を [uint8] に設定する。&lt;/txt&gt; &lt;/action&gt; &lt;/actions&gt;
            
      </entry>
    <entry key="SetFrameIdPrompt">フレーム ID の設定:</entry>
    <entry key="SetTimestampPrompt">タイムスタンプの設定</entry>
    <entry key="SetHdrFldNamePrompt">ヘッダー フィールド名:</entry>
    <entry key="HdrFldNameDefault">既定のヘッダー フィールド名を使用</entry>
    <entry key="HdrFldNameSpecifyOwn">独自に指定</entry>
    <entry key="HdrAssignDescription">
        ROS 2 メッセージ ヘッダーのフィールドを更新します。 \n \nブロック入力は ROS 2 メッセージ バスを受け入れ、ブロック出力は同じタイプの ROS 2 メッセージ バスのフィールドを更新して送信します。 \n \n[フレーム ID の設定] チェックボックスを使用して、ROS 2 メッセージ ヘッダーの frame_id フィールドを設定します。[タイムスタンプの設定] チェックボックスを使用して、ROS 2 メッセージのタイム スタンプを更新します。[ヘッダー フィールド名] を [既定のヘッダー フィールド名を使用] に設定して、ROS 2 メッセージのヘッダー フィールド名を [ヘッダー] に設定します。ROS 2 メッセージのヘッダー フィールド名を手動で指定するには、ヘッダー フィールド名を [独自に指定] に設定します。
      </entry>
    <entry key="InvalidHdrFldError">入力 ROS 2 メッセージにフィールド "{0}" がありません。</entry>
    <entry key="ShortFrameIdError">フレーム ID は {0} 文字ですが、バス要素の最大サイズは {1} です。フレーム ID の長さを減らすか、std_msgs/Header で frame_id プロパティの最大長を増やしてください。</entry>
    <entry key="WriteIntensityFieldPrompt">[強度] フィールドへの書き込み</entry>
    <entry key="FrameSourcePrompt">フレーム ソース:</entry>
    <entry key="TargetPrompt">ターゲット:</entry>
    <entry key="SourcePrompt">ソース:</entry>
    <entry key="SelectPrompt">選択</entry>
    <entry key="OutputFormatPrompt">出力形式:</entry>
    <entry key="SampleTimePrompt">サンプル時間:</entry>
    <entry key="DynamicListenerQoSPrompt">DynamicListenerQoS</entry>
    <entry key="StaticListenerQoSPrompt">StaticListenerQoS</entry>
    <entry key="GetTransformDescription">
        ROS 2 ネットワークから変換を取得します \n \nIsAvail 端子は、指定した変換が使用可能かどうかを示すブール値を出力します。Value 端子は、出力形式の選択に基づいて、メッセージ バスまたは 4 行 4 列の double の行列を出力します。
      </entry>
    <entry key="EntityMsgPrompt">エンティティ メッセージ タイプ:</entry>
    <entry key="ApplyTransformDescription">
        入力エンティティ メッセージにフォワード変換を適用します \n \nTFMsg 端子は geometry_msgs/TransformStamped メッセージを受け入れ、Entity 端子は次のメッセージ タイプのいずれかを受け入れます。\n \u2022 geometry_msgs/QuaternionStamped \n \u2022 geometry_msgs/Vector3Stamped \n \u2022 geometry_msgs/PointStamped \n \u2022 geometry_msgs/PoseStamped \n変換の適用後、TFEntity 端子は、入力エンティティ メッセージと同じタイプのメッセージ バスを出力します。
      </entry>
    <entry key="PairedReceiveBlkPrompt">ペアの Receive Request ブロック:</entry>
    <entry key="PairedSendBlkPrompt">ペアの Send Response ブロック:</entry>
    <entry key="NoSendResponsePairedBlkPrompt">ペアの Send Response ブロックを作成</entry>
    <entry key="NoReceiveRequestPairedBlkPrompt">ペアの Receive Request ブロックを作成</entry>
    <entry key="NoSvcPairedBlkError">ROS 2 {0} ブロックがモデル内に存在しません。 &lt;actions exclusiveFixIts="yes"&gt; &lt;action type="fixit" retvalue="false"&gt; &lt;cmd&gt;ros.slros.internal.ROSUtil.addServerResponseBlockPair(bdroot,''{1}'',''{2}'')&lt;/cmd&gt; &lt;txt&gt;ROS 2 {0} ブロックをモデル ワークスペースに追加する。&lt;/txt&gt; &lt;/action&gt; &lt;/actions&gt;
      </entry>
    <entry key="ShowRespOutportPrompt">Default Response 出力端子を表示</entry>
    <entry key="ReceiveRequestDescription">
          ROS 2 ネットワークからサービス リクエストを受信します。 \n \nReq 出力はサービス リクエスト メッセージを返します。IsNew 出力は、新しいリクエストを受信したかどうかを示す boolean を返します。オプションの DefaultResp 出力は、常に既定の応答メッセージ バスを空で返します。 \n[名前] パラメーターを使用してサービス名を指定し、[選択] ボタンを使用してサービス タイプを選択します。 \nペアの Send Service Response ブロックを作成するには、[ペアの Send Response ブロックを作成] をクリックします。
      </entry>
    <entry key="SendResponseDescription">
          サービス応答をサービス クライアントに送信します。 \n \nResp 入力はサービス応答メッセージを受け入れます。対応する Receive Request ブロックを使用してサーバー設定を構成します。 \nこのブロックを Enable Subsystem に配置すると、リクエストごとに 1 回だけ応答が送信されます。 \nペアの Receive Service Request ブロックを作成するには、[ペアの Receive Request ブロックを作成] をクリックします。
      </entry>
    <entry key="NameAlreadyExists">指定した "{0}" は、このモデルの別のブロックで使用されているため、{1} ブロックの "{0}" には他の有効な名前を使用してください。</entry>
    <entry key="SendActionGoalDescription">
        アクション ゴール メッセージを ROS 2 アクション サーバーに送信します。 \n \n[ゴール] の入力は ROS 2 アクション ゴール メッセージ (バス信号) を受け入れます。イネーブル端子はブール値を受け入れます。ブール値が true で、進行中のゴール実行がない場合、ブロックは受信ゴール メッセージを送信します。UUID 出力はゴールの一意の ID を unique_identifier_msgs/UUID メッセージ (バス信号) として返します。ErrorCode 端子はエラー コードを整数値として返します。ゴールを監視するには、[ペアの Monitor Action Goal ブロックを作成] をクリックします。 \n \nアクティブな ROS 2 ネットワークで使用可能なアクションから選択するには、[ソース] パラメーターを [ROS ネットワークから選択] に設定し、[選択] ボタンをクリックします。アクティブなアクションのリストを取得するには、ROS 2 ネットワークに接続していることを確認してください。選択したアクション タイプが自動的に設定されます。カスタム アクションの場合や、アクティブな ROS 接続を使用せずにアクション名を指定する場合は、[ソース] を [独自に指定] に設定します。[名前] パラメーターを使用してアクション名を指定し、[選択] ボタンをクリックしてアクション タイプを選択します。
      </entry>
    <entry key="InvalidActionName">
            "ROS 2 アクション名 "{0}" は無効です。最初の文字は、アルファベット (a-z) またはスラッシュ (/) でなければなりません。残りの文字は、英数字 (a-z、0-9)、アンダースコア (_)、またはスラッシュ (/) でなければなりません。
      </entry>
    <entry key="NoActionsAvailableError">ROS 2 ネットワークから使用可能なアクションはありません。</entry>
    <entry key="ActionSourcePrompt">ソース:</entry>
    <entry key="ActionNamePrompt">名前:</entry>
    <entry key="ActionTypePrompt">タイプ:</entry>
    <entry key="GoalServiceQoSPrompt">ゴール サービス QoS</entry>
    <entry key="ResultServiceQoSPrompt">結果サービス QoS</entry>
    <entry key="CancelServiceQoSPrompt">キャンセル サービス QoS</entry>
    <entry key="FeedbackTopicQoSPrompt">フィードバック トピック QoS</entry>
    <entry key="StatusTopicQoSPrompt">ステータス トピック QoS</entry>
    <entry key="ShowErrorCodePortPrompt">ErrorCode 出力端子の表示</entry>
    <entry key="ShowFeedbackPortPrompt">フィードバック出力端子の表示</entry>
    <entry key="PairedSendGoalBlkPrompt">ペアの Send Action Goal ブロック:</entry>
    <entry key="PairedMonitorGoalBlkPrompt">ペアの Monitor Action Goal ブロック:</entry>
    <entry key="NoSendGoalPairedBlkPrompt">ペアの Send Action Goal ブロックを作成</entry>
    <entry key="NoMonitorGoalPairedBlkPrompt">ペアの Monitor Action Goal ブロックを作成</entry>
    <entry key="NoSendGoalPairedBlkError">
          ROS 2 Send Action Goal ブロックがモデル内に存在しません。 &lt;actions exclusiveFixIts="yes"&gt; &lt;action type="fixit" retvalue="false"&gt; &lt;cmd&gt;ros.slros.internal.ROSUtil.addMonitorAndSendActionGoalBlockPair(bdroot,''{0}'',''{1}'');&lt;/cmd&gt; &lt;txt&gt;ROS 2 Send Action Goal ブロックをモデル ワークスペースに追加する。&lt;/txt&gt; &lt;/action&gt; &lt;/actions&gt;
            
      </entry>
    <entry key="NoSendGoalBlkError">
          ゴールをキャンセルするには、少なくとも 1 つの ROS 2 Send Action Goal ブロックがモデル内に存在している必要があります。 &lt;actions exclusiveFixIts="yes"&gt; &lt;action type="fixit" retvalue="false"&gt; &lt;cmd&gt;ros.slros.internal.ROSUtil.bringSendActionGoalBlockIntoModel(bdroot);&lt;/cmd&gt; &lt;txt&gt;ROS 2 Send Action Goal ブロックをモデル ワークスペースに追加する。&lt;/txt&gt; &lt;/action&gt; &lt;/actions&gt;
            
      </entry>
    <entry key="MonitorActionGoalDescription">
        ROS 2 ネットワーク内のアクティブなゴールを監視します。 \n \nUUID 入力は監視対象のゴールの unique_identifier_msgs/UUID メッセージ (バス信号) を受け入れます。 \n \nStatusCode 端子はゴールの現在の状態を整数値として出力します。結果端子は最終結果メッセージ (バス信号) を返します。フィードバック端子は、アクティブなゴールの進捗を追跡するためのフィードバック メッセージ (バス信号) を返します。ErrorCode の出力はエラー コードを整数値として返します。 \n \n[出力設定] を使用して、フィードバック出力端子と ErrorCode 出力端子のオンとオフを切り替えることができます。 \nアクション ゴールを送信するには、[ペアの Send Action Goal ブロックを作成] をクリックします。
      </entry>
    <entry key="CancelActionGoalDescription">
        ROS 2 ネットワーク内のアクティブなゴールをキャンセルします。 \n \nUUID 入力はキャンセル対象のアクティブなゴールの unique_identifier_msgs/UUID メッセージ (バス信号) を受け入れます。イネーブル端子はブール値を受け入れます。ブール値が true の場合、ブロックは同じタイム ステップのアクティブなゴールをキャンセルするための信号を送信します。 \n \n応答出力はゴールのキャンセル応答メッセージを action_msgs/CancelGoalResponse メッセージ (バス信号) として返します。ErrorCode の出力はエラー コードを整数値として返します。 \n \n[出力設定] を使用して、ErrorCode 出力端子のオンとオフを切り替えることがます。
      </entry>
    <entry key="ROS2PacerDescription">
          ROS 2 ネットワークを介してロックステップ コシミュレーションを使用して、ROS 2 対応シミュレーターで Simulink をコシミュレーションします。 \n \nブロックは同期ステータスを Status として出力します。この Status が uint8(0) の場合はロックステップ コシミュレーションの成功を示し、uint8(1) の場合はロックステップ コシミュレーション実行のエラーを示します。 \n \n[リセット動作] ドロップダウンから、コシミュレーションの開始時にシミュレーター シーン全体をリセットするか、シミュレーター クロックをリセットするかを選択します。 \n \n[サンプル時間] パラメーターを設定して、Simulink が外部シミュレーターと同期する頻度を定義します。この値は、シミュレーターのタイム ステップ プロパティ値の倍数でなければなりません。 \n \nSimulink モデルでは 1 つの ROS 2 Pacer ブロックのみを使用する必要があります。
      </entry>
    <entry key="QOSKeepAll">Keep all</entry>
    <entry key="QOSKeepLast">Keep last</entry>
    <entry key="QOSBesetEffort">Best effort</entry>
    <entry key="QOSReliable">Reliable</entry>
    <entry key="QOSTransient">Transient local</entry>
    <entry key="QOSVolatile">Volatile</entry>
    <entry key="QOSAutomatic">Automatic</entry>
    <entry key="QOSManual">Manual</entry>
    <entry key="GetTransformMaskTitle">ROS 2 Get Transform</entry>
    <entry key="ApplyTransformMaskTitle">ROS 2 Apply Transform</entry>
    <entry key="ReceiveRequestMaskTitle">ROS 2 Receive Service Request</entry>
    <entry key="SendResponseMaskTitle">ROS 2 Send Service Response</entry>
    <entry key="SendActionGoalMaskTitle">ROS 2 Send Action Goal</entry>
    <entry key="MonitorActionGoalMaskTitle">ROS 2 Monitor Action Goal</entry>
    <entry key="CancelActionGoalMaskTitle">ROS 2 Cancel Action Goal</entry>
  </message>
</rsccat>
