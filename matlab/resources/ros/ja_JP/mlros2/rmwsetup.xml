<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright 2025 The MathWorks, Inc.-->

<rsccat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" locale="ja_JP" product="ros" xsi:noNamespaceSchemaLocation="../../resources/schema/msgcat.xsd">
  <message>
    <entry key="MainWindowTitle">ROS ミドルウェア構成</entry>
    <entry key="SelectRMWConfigurationTitle">ROS ミドルウェア (RMW) 実装の選択</entry>
    <entry key="SelectRMWDescription">構成する RMW 実装を選択します。</entry>
    <entry key="SelectRMWFastRTPS">既定の RMW 実装は ''rmw_fastrtps_cpp'' です。これは静的型サポートを使用し、ベースとなる DDS 実装は eProsima Fast DDS です。</entry>
    <entry key="SelectRMWWhatToConsider">ROS ミドルウェア構成により、選択した RMW 実装を ROS 2 ノードで使用できるようになります。ROS Toolbox には、eProsima Fast DDS (&lt;b&gt;v2.14.3&lt;/b&gt;) および Eclipse Cyclone DDS (&lt;b&gt;v0.10.5&lt;/b&gt;) のミドルウェアの組み込みサポートが用意されています。また、異なるミドルウェアをベースとするカスタム RMW 実装も使用できます。&lt;br&gt;&lt;/br&gt;&lt;br&gt;静的型サポートを使用した RMW 実装は、動的型サポートによる代替方法よりも高速です。&lt;/br&gt;</entry>
    <entry key="SelectRMWFastRTPSDynamic">''rmw_fastrtps_dynamic_cpp'' は動的型サポートを使用し、ベースとなる DDS 実装は eProsima Fast DDS です。</entry>
    <entry key="SelectRMWCycloneDDS">''rmw_cyclonedds_cpp'' では、ROS 2 は動的型サポートを使用でき、ベースとなる DDS 実装は Eclipse Cyclone DDS です。</entry>
    <entry key="SelectRMWConnextProDDS">''rmw_connextdds'' では、ROS 2 は動的型サポートを使用でき、ベースとなる DDS 実装は RTI Connext DDS Professional です。</entry>
    <entry key="ScreenTwoTitle">DDS インストールの検証</entry>
    <entry key="BrowseButton">参照</entry>
    <entry key="VerifyInstallationButton">インストールを検証</entry>
    <entry key="VerifyDDSInstallationSteps">&lt;a href="http://www.mathworks.com/rti/downloading-connext-dds"&gt;Connext DDS のダウンロード&lt;/a&gt;と&lt;a href="http://www.mathworks.com/rti/setting-up-a-license"&gt;ライセンスの設定&lt;/a&gt;に関する指示に従って、RTI Connext DDS Professional がご使用のホスト プラットフォームで使用可能であることを確認してください。&lt;/br&gt;&lt;br&gt;RTI Connext Professional のインストールが使用可能になったら、&lt;b&gt;[参照]&lt;/b&gt; をクリックしてホスト プラットフォームのインストール ディレクトリを選択し、&lt;b&gt;[インストールを検証]&lt;/b&gt; をクリックします。</entry>
    <entry key="VerifyDDSInstallationHelp">&lt;b&gt;''rmw_connextdds''&lt;/b&gt; を使用するには、RTI Connext DDS Professional (version &lt;b&gt;6.0.1&lt;/b&gt; 以降) がホスト プラットフォームにインストールされている必要があります。</entry>
    <entry key="SelectDDSInstallation_InvalidFolder">RTI Connext DDS Professional のインストールが見つかりません。正しいインストール場所を指定してください。</entry>
    <entry key="BrowseDDSInstallation">RTI Connext DDS Professional のインストール ディレクトリを参照</entry>
    <entry key="DDSInstallation_Validation">RTI Connext DDS Professional のインストールを検証中</entry>
    <entry key="InvalidLicense">RTI Connext DDS Professional のライセンス ファイルが見つかりません。ライセンス ファイル ''rti_license.dat'' がインストール場所にあることを確認してください。</entry>
    <entry key="DDSValidationSuccessStatus">RTI Connext DDS Professional のインストールは有効です。&lt;b&gt;[次へ]&lt;/b&gt;をクリックし、&lt;b&gt;''rmw_connextdds''&lt;/b&gt; をビルドして、MATLAB/Simulink に登録してください。</entry>
    <entry key="RMWConnextDDSWhatToConsider">親ディレクトリが有効な命名規則に従っていて、そのディレクトリに ''rmw_connextdds'' 以外のパッケージがないことを確認してください。</entry>
    <entry key="Screen_Loading">画面の読み込み中</entry>
    <entry key="ScreenThreeTitle">RMW 実装パッケージのビルド</entry>
    <entry key="ScreenThreeDescription">ホスト プラットフォームの&lt;a href="http://www.mathworks.com/ros/jazzy/rmw_connextdds"&gt;リポジトリ&lt;/a&gt;から &lt;b&gt;''rmw_connextdds''&lt;/b&gt; をダウンロードし、次の手順に従ってパッケージをビルドします。</entry>
    <entry key="RMWConnextDDSPackageBrowse">&lt;br&gt;1. ''rmw_connextdds'' パッケージの親ディレクトリを参照します。&lt;/br&gt;</entry>
    <entry key="BuildRMWArtifactsStep">&lt;br&gt;2. [RMW アーティファクトのビルド] ボタンをクリックして、''rmw_connextdds'' をビルドします。&lt;/br&gt;</entry>
    <entry key="BuildRMWArtifactsButton">RMW アーティファクトのビルド</entry>
    <entry key="BrowseRMWPlaceHolder">''rmw_connextdds'' パッケージの場所を参照します</entry>
    <entry key="TestRMWButton">RMW のテスト</entry>
    <entry key="PackageBuildProgress">ビルドが進行中です。これには数分かかることがあります...</entry>
    <entry key="BuildRMWAboutSelection">''rmw_connextdds'' パッケージのビルドには数分かかることがあります。ビルド プロセスが正常に完了するまでお待ちください。</entry>
    <entry key="BuildRMWPackageSuccess">ビルドが成功: &lt;a href="matlab:web(''{0}'')"&gt;build_log&lt;/a&gt;</entry>
    <entry key="ClickTestRMWMessage">[RMW のテスト] をクリックしてください。</entry>
    <entry key="BuildRMWPackageFailedLogFile">ビルドに失敗: &lt;a href="matlab:web(''{0}'')"&gt;build_log&lt;/a&gt;</entry>
    <entry key="BuildRMWPackageFailedStatus">ビルドに失敗: {0}</entry>
    <entry key="NodeCreationSuccess">テストが成功しました。[終了] をクリックして、MATLAB/Simulink で RMW 実装として ''{0}'' を使用してください。</entry>
    <entry key="NodeCreationFailed">テストに失敗: {0}</entry>
    <entry key="TestRMWBusySpinnerLabel">RMW 実装をもつ ROS 2 ノードを ''{0}'' として作成中</entry>
    <entry key="AboutFinishSelection">テスト ノードが正常に作成されたら [終了] をクリックして、このウィンドウを閉じてください。選択した RMW 実装は、ROS Toolbox の基本設定を使用して構成されています。</entry>
    <entry key="TestRMWImplementationTitle">RMW 実装のテスト</entry>
    <entry key="TestRMWImplementationWithBuiltinDDS">&lt;b&gt;[RMW のテスト]&lt;/b&gt; ボタンをクリックして、RMW 実装を &lt;b&gt;''{0}''&lt;/b&gt; として作成された ROS 2 ノードを検証します。</entry>
    <entry key="RMWIceoryxHelpText">''rmw_iceoryx_cpp'' では、ROS 2 は動的型サポートを使用でき、プロセス間通信 (IPC) ミドルウェアは Eclipse iceoryx です。</entry>
    <entry key="IceoryxValidationScreenTitle">iceoryx ミドルウェアのインストールの検証</entry>
    <entry key="IceoryxMiddlewareWhatToConsider">''iceoryx'' が存在する場所にその他のパッケージが存在しないことを確認します。&lt;br&gt;&lt;b&gt;''rmw_iceoryx_cpp''&lt;/b&gt; を使用するには、Eclipse iceoryx がシステムにインストールされている必要があります。推奨バージョンは &lt;b&gt;v2.0.3&lt;/b&gt; (Blueberry) です。</entry>
    <entry key="VerifyIceoryxInstallationSteps">&lt;br&gt;&lt;a href="http://www.mathworks.com/iceoryx/v2.0.3/installating-iceoryx"&gt;iceoryx のビルドとインストール&lt;/a&gt;に関する指示に従って、Eclipse iceoryx がご使用のホスト プラットフォームで使用可能であることを確認してください。&lt;/br&gt;&lt;br&gt;Eclipse iceoryx のインストールが使用可能になったら、&lt;b&gt;[参照]&lt;/b&gt; をクリックしてシステムのインストール ディレクトリを選択し、&lt;b&gt;[インストールを検証]&lt;/b&gt; をクリックします。</entry>
    <entry key="IceoryxValidationProgress">Eclipse iceoryx のインストールの検証中</entry>
    <entry key="BrowseIceoryxInstallation">Eclipse iceoryx のインストール ディレクトリを参照</entry>
    <entry key="IceoryxValidationSuccessStatus">検証が成功しました。&lt;b&gt;[次へ]&lt;/b&gt;をクリックし、&lt;b&gt;''rmw_iceoryx_cpp''&lt;/b&gt; をビルドして、MATLAB/Simulink に登録してください。</entry>
    <entry key="IceoryxValidationFailedStatus">検証に失敗しました。''iceoryx'' の正しい場所を指定してください。</entry>
    <entry key="RMWIceoryxCppScreenDescription">システムの&lt;a href="http://www.mathworks.com/ros/humble/rmw_iceoryx_cpp"&gt;リポジトリ&lt;/a&gt;から &lt;b&gt;''rmw_iceoryx_cpp''&lt;/b&gt; をダウンロードし、次の手順に従ってパッケージをビルドします。</entry>
    <entry key="RMWIceoryxCppPackageBrowse">&lt;br&gt;1. ''rmw_iceoryx_cpp'' パッケージの親ディレクトリを参照します。&lt;/br&gt;</entry>
    <entry key="BuildRMWIceoryxCppStep">&lt;br&gt;2. [RMW アーティファクトのビルド] ボタンをクリックして、'''rmw_iceoryx_cpp'' をビルドします。&lt;/br&gt;</entry>
    <entry key="BrowseRMWIceoryxCppPlaceHolder">''rmw_iceoryx_cpp'' パッケージの場所を参照します</entry>
    <entry key="BuildRMWIceoryxCppSelection">''rmw_iceoryx_cpp'' パッケージのビルドには数分かかることがあります。ビルド プロセスが正常に完了するまでお待ちください。</entry>
    <entry key="RMWIceoryxCppWhatToConsider">親ディレクトリが有効な命名規則に従っていて、そのディレクトリに ''rmw_iceoryx_cpp'' 以外のパッケージがないことを確認してください。</entry>
    <entry key="RMWReconfigurationTitle">ROS ミドルウェア実装の再構成</entry>
    <entry key="RMWConfigurationAvailable">ROS ミドルウェア実装 ''{0}'' は既にシステム上に構成されています。RMW 実装を再構成する場合は、[次へ] をクリックしてください。</entry>
    <entry key="RMWAvailableConfigurationAboutSelection">このウィンドウを閉じるには [キャンセル] をクリックしてください。</entry>
    <entry key="SelectCustomRMWAboutSelection">カスタム RMW 実装パッケージをビルドするには、&lt;b&gt;[RMW 実装]&lt;/b&gt; を [その他] に設定します。</entry>
    <entry key="RMWValidationScreenTitle">ROS ミドルウェア (RMW) 実装パッケージの検証</entry>
    <entry key="RMWValidationScreenInstructions">ご使用のホスト プラットフォームで ROS ミドルウェア実装パッケージが使用できることを確認します。その場所を参照して、&lt;b&gt;[RMW パッケージの検証]&lt;/b&gt; ボタンをクリックします。</entry>
    <entry key="RMWValidationScreenButton">RMW パッケージの検証</entry>
    <entry key="RMWValidationScreenBrowse">RMW 実装パッケージの場所を参照</entry>
    <entry key="RMWValidationScreenSpinnerText">ROS ミドルウェア (RMW) 実装パッケージを検証しています。</entry>
    <entry key="RMWPackageEmptyPathError">ROS ミドルウェア実装パッケージのパスを空にしてはなりません。</entry>
    <entry key="RMWPackageNotFoundError">有効な ROS ミドルウェア実装パッケージが、指定された場所に見つかりません。パッケージの正しい場所を指定してください。</entry>
    <entry key="RMWPackageAvailable">RMW 実装パッケージ &lt;b&gt;''{0}''&lt;/b&gt; が指定された場所にあります。これは {1} 型のサポートをベースにしています。</entry>
    <entry key="RMWValidationNextActionDynamic">&lt;b&gt;[次へ]&lt;/b&gt; をクリックして、ミドルウェアのインストール環境を指定します。</entry>
    <entry key="RMWValidationNextActionStatic">&lt;b&gt;[次へ]&lt;/b&gt; をクリックして続行します。</entry>
    <entry key="RMWValidationStatusSameTypeSupport">RMW 実装パッケージ &lt;b&gt;''{0}''&lt;/b&gt; および &lt;b&gt;''{1}''&lt;/b&gt; が指定された場所にあります。いずれも {2} 型のサポートをベースにしています。</entry>
    <entry key="RMWValidationStatusDifferentTypeSupport">RMW 実装パッケージ &lt;b&gt;''{0}''&lt;/b&gt; および &lt;b&gt;''{1}''&lt;/b&gt; が指定された場所にあります。それらはそれぞれ {2} 型と {3} 型のサポートをベースにしています。</entry>
    <entry key="RMWValidationNextActionMultipleRMW">&lt;b&gt;[次へ]&lt;/b&gt; をクリックして、ビルドする RMW 実装パッケージを選択します。</entry>
    <entry key="RMWValidationStatusMultipleRMW">指定された場所に、複数の RMW 実装パッケージがあります。</entry>
    <entry key="RMWValidationScreenAboutSelection">[RMW パッケージの検証] ボタンをクリックして、指定された場所に RMW 実装パッケージがあることを確認します。</entry>
    <entry key="RMWValidationScreenWhatToConsider">RMW 実装パッケージの名前は ''rmw_'' で始まります。特定のミドルウェアに対する RMW 実装パッケージの場所、あるいは 1 つまたは複数の RMW 実装パッケージを含むフォルダーを参照します。</entry>
    <entry key="ChooseRMWPackageScreenTitle">RMW 実装パッケージの選択</entry>
    <entry key="ChooseRMWPackageScreenInstructions">指定されたパッケージの場所で、ビルドする RMW 実装パッケージを選択します。</entry>
    <entry key="RMWPackageSelectionLabel">RMW 実装パッケージ:</entry>
    <entry key="ChooseRMWPackageScreenAboutSelection">[すべて] オプションを選択すると、指定された RMW パッケージの場所にあるすべての使用可能な RMW 実装がビルドされます。</entry>
    <entry key="ValidateTSPkgScreenTitle">ROS IDL 型サポート パッケージの検証</entry>
    <entry key="ValidateTSPkgScreenInstructions">その場所にある RMW 実装パッケージ &lt;b&gt;''{0}''&lt;/b&gt; には、静的ベースの ROS IDL 型サポート パッケージが必要です。必要な型サポート パッケージが&lt;a href="matlab:{1}"&gt;この&lt;/a&gt;ディレクトリにない場合は、それをディレクトリにコピーしてから &lt;b&gt;[型サポートの検証]&lt;/b&gt; ボタンをクリックしてください。</entry>
    <entry key="ValidateTSPkgScreenButton">型サポートの検証</entry>
    <entry key="ValidateTSPkgScreenAboutSelection">[型サポートの検証] ボタンをクリックして、指定された場所に ROS IDL 型サポート パッケージがあることを確認します。</entry>
    <entry key="ValidateTSPkgScreenWhatToConsider">ROS IDL 型サポート パッケージの名前は ''rosidl_typesupport_'' で始まり、有効な ROS 命名規則に従います。</entry>
    <entry key="ValidatingTSPkgScreenSpinnerText">ROS IDL 型サポート パッケージを検証しています。</entry>
    <entry key="NoIDLTypeSupportPkgFound">親ディレクトリに ROS IDL 型サポート パッケージが見つかりません。</entry>
    <entry key="IDLTypeSupportIsAvailable">ROS IDL 型サポート パッケージを使用できます。</entry>
    <entry key="MiddlewareInstallationEnvScreen">ミドルウェアのインストール環境の設定</entry>
    <entry key="MiddlewareInstallationEnvScreenInstructions">ミドルウェアのインストール プラットフォームの場所を参照して、RMW 実装パッケージのビルドに必要な環境変数を設定します。</entry>
    <entry key="EnvironmentVariablesLabel">環境変数:</entry>
    <entry key="AddEnvButton">追加</entry>
    <entry key="RemoveEnvButton">削除</entry>
    <entry key="MiddlewareInstallationEnvScreenWhatToConsider">環境変数を追加するには、&lt;b&gt;[追加]&lt;/b&gt; ボタンをクリックします。環境変数を削除するには、&lt;b&gt;[削除]&lt;/b&gt; ボタンをクリックします。</entry>
    <entry key="MiddlewareInstallationEnvScreenSpinnerText">ミドルウェアの環境設定を適用しています。</entry>
    <entry key="MiddlewareInstallationEnvScreenBrowse">ミドルウェアのインストール ディレクトリの参照</entry>
    <entry key="BuildCustomRMWAboutSelection">ビルド プロセスには数分かかることがあります。プロセスが正常に完了するまでお待ちください。</entry>
    <entry key="BuildCustomRMWScreenInstructions">&lt;b&gt;[RMW アーティファクトのビルド]&lt;/b&gt; ボタンをクリックして、&lt;b&gt;''{0}''&lt;/b&gt; パッケージのアーティファクトをビルドします。</entry>
    <entry key="BuildCustomRMWForAllPkg">&lt;b&gt;[RMW アーティファクトのビルド]&lt;/b&gt; ボタンをクリックして、RMW 実装パッケージのアーティファクトをビルドします。</entry>
    <entry key="BuildCustomRMWScreenWhatToConsider">RMW 実装のアーティファクトは、選択した RMW 実装の場所の ''install'' ディレクトリの下に生成されます。</entry>
    <entry key="BuildMessagesScreenTitle">ROS 2 メッセージ パッケージのビルド</entry>
    <entry key="BuildMessagesScreenInstructions">カスタム メッセージを含めて、すべての ROS 2 メッセージ パッケージのアーティファクトを再生成する必要があります。&lt;b&gt;[メッセージ アーティファクトのビルド]&lt;/b&gt; ボタンをクリックして、メッセージ パッケージをリビルドします。</entry>
    <entry key="BuildMessagesButton">メッセージ アーティファクトのビルド</entry>
    <entry key="BuildMessagesScreenAboutSelection">[メッセージ アーティファクトのビルド] ボタンをクリックすると、MATLAB/Simulink に登録されたすべての使用可能な RMW 実装用の ROS 2 メッセージ パッケージがビルドされます。</entry>
    <entry key="BuildMessagesScreenWhatToConsider">すべての ROS 2 メッセージが、指定された RMW 実装パッケージの場所にコピーされます。ROS 2 メッセージ アーティファクトのビルドには、最長で 1 時間かかることがあります。これらのアーティファクトは、同じ場所の ''matlab_msg_gen'' ディレクトリの下に生成されます。</entry>
    <entry key="BuildMessagesScreenSpinnerOne">メッセージ パッケージをコピーしています。これには数分かかることがあります。</entry>
    <entry key="BuildMessagesScreenSpinnerTwo">ビルドが進行中です。これは通常、最長で 1 時間かかることがあります。</entry>
    <entry key="RMWFastrtpsCpp">rmw_fastrtps_cpp</entry>
    <entry key="RMWFastrtpsDynamicCpp">rmw_fastrtps_dynamic_cpp</entry>
    <entry key="RMWCycloneddsCpp">rmw_cyclonedds_cpp</entry>
    <entry key="RMWConnextdds">rmw_connextdds</entry>
    <entry key="SelectRMWConfigurationLabel">RMW Implementation:</entry>
    <entry key="RMWIceoryxCpp">rmw_iceoryx_cpp</entry>
    <entry key="OtherRMW">other</entry>
  </message>
</rsccat>
