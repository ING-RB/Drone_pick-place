<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright 2021 The MathWorks, Inc. -->
<rsccat locale="en_US" product="appdesigner" version="1.0">
	<message>
        <entry key="addSliderContext">Let's build a simple custom UI component that consists of a slider and a spinner with their values connected together.</entry>
        <entry key="addSliderAction" note="holes are to add html formatting tags">Drag a {0}Slider{1} component onto the canvas.</entry>
        <entry key="addSpinnerAction" note="holes are to add html formatting tags">Drag a {0}Spinner{1} component onto the canvas.</entry>
        <entry key="clickAddPublicPropertyContext" note="holes are to add html formatting tags">Create a public property named {0}Value{1} to allow app creators to set the slider-spinner component value when they use the component to build an app.</entry>
        <entry key="clickAddPublicPropertyAction" note="holes are to add html formatting tags">Select the component node in the {0} and click the {1} button to add a new public property.</entry>
        <entry key="doAddPublicPropertyContext" note="holes are to add html formatting tags">Fill out the dialog with the following values and then click {0} to create the property:</entry>
        <entry key="switchToCodeViewContext">App Designer has a design view for designing your component and a code view for programming your component.</entry>
        <entry key="switchToCodeViewAction">Click {0} to begin programming your component.</entry>
        <entry key="addSliderCallbackContext">Create a callback function for the slider to respond when a user changes the slider value.</entry>
        <entry key="addSliderCallbackAction">In the {0}, right-click {1} and select {2} > {3}.</entry>
        <entry key="addSpinnerCallbackContext">Next, do the same thing for the spinner. Instead of creating a new callback function, you can reuse the slider callback.</entry>
        <entry key="addSpinnerCallbackAction">In the {0}, right-click {1} and select {2} > {3}. Then select the existing callback for the slider from the dialog.</entry>
        <entry key="addSetValuePropertyCodeContext">When the slider value changes and this callback function is executed, update the {0} property of your component to match the new slider value.</entry>
        <entry key="addSetValuePropertyCodeAction">Do this by replacing the callback code with the following code:</entry>
        <entry key="addUpdateCodeContext">Your component's {0} property now updates when the value of the slider or the spinner changes. Next, conversely, update the slider and spinner value when someone sets your component's {1} property programmatically.</entry>
        <entry key="addUpdateCodeAction">Write the following code to do this in the {0} function, which executes every time the value of a public property changes:</entry>
        <entry key="clickAddEventContext">Create a public callback to allow users of your component to program a response to an interaction in the context of their app. App Designer creates a public callback when you add an event.</entry>
        <entry key="clickAddEventAction">Click on the {0} tab and then click the {1} button to add a new event.</entry>
        <entry key="doAddEventContext">When you add an event, App Designer creates a public callback of the same name with {0} appended. This callback is available when the component is added to an app.</entry>
        <entry key="doAddEventAction">Specify the name of the event to be {0}.</entry>
        <entry key="addNotifyCodeContext">To trigger the {0} callback at the right time, you need to notify the event whenever you change your component's {1} property.</entry>
        <entry key="addNotifyCodeAction">Do this by adding the following code to the end of this callback:</entry>
        <entry key="runComponentAction">Click {0} to save and run the component to verify its interactive behavior.</entry>
        <entry key="testInCommandWindowAction">To verify that your component's {0} callback is triggered when the component value changes, execute the following code in the MATLAB Command Window:</entry>
        <entry key="configureComponentContext">Congratulations, you just built your first custom UI component!</entry>
        <entry key="configureComponentAction">Click {0} to enable your component to appear in the App Designer Component Library. You can use the component in your apps or share it with others.</entry>
	</message>
</rsccat>