<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright 2016-2023 The MathWorks, Inc. -->
<rsccat locale="en_US" product="appdesigner" version="1.0">
	<message>
		<entry key="addAxesContext">Letâ€™s build a simple app where a slider controls the plot in an axes.</entry>
        <entry key="addAxesAction" note="holes are to add html formatting tags">Drag an {0}Axes{1} component onto the canvas.</entry>
        <entry key="addSliderAction" note="holes are to add html formatting tags">Drag a {0}Slider{1} component onto the canvas.</entry>
        <entry key="editSliderLabelAction" note="do not translate Amplitude">Replace the default label text for the slider by typing {0}Amplitude{1}.</entry>
        <entry key="switchToCodeViewContext">App Designer has a design view for designing your app and a code view for programming your app.</entry>
        <entry key="switchToCodeViewAction">Click {0} to begin programming your app.</entry>
        <entry key="addCallbackContext">A callback function allows your app to respond to user interactions such as button clicks.</entry>
        <entry key="addCallbackAction">In the Component Browser, right-click {0} and select {1}.</entry>
        <entry key="plotInAxesContext">To plot in an axes, you need to use the axes component as the first input argument to the plot command.</entry>
        <entry key="plotInAxesAction">Add the following code:</entry>
        <entry key="setPropertyContext" note="do not translate app.Component.Property">Use {0}app.Component.Property{1} to get or set a component property in the code.</entry>
        <entry key="setPropertyAction">Add the following code to set the axes ylim property:</entry>
        <entry key="runAppAction">Click {0} to save and run the app.</entry>
        <entry key="showTipsContext">Congratulations, you just built your first app using App Designer!</entry>
        <entry key="showTipsAction" note="holes 1,2 are to add html formatting tags">Click {0} to see additional help for programming in App Designer, or try the {1}App Building Onramp{2} to learn more techniques.</entry>
        <entry key="responsify_newAppCreated">Your app has been converted to use auto-reflowing behaviors.</entry>
        <entry key="responsify_canvas">Components have been automatically placed into new panels.  You can now adjust the position of the components as needed.</entry>
        <entry key="responsify_sizeChanged">Your original app had a SizeChangedFcn callback on the Figure. This callback has been disconnected to allow automatic resizing behaviors.</entry>
        <entry key="responsify_saveAndRun">Save and run your new auto-reflowing app.\n\nTry resizing the app window to see how the app content adapts and responds to changes in screen size.</entry>
        <entry key="responsify_hierarchyChanged_2panel">app.{0} and app.{1} have been applied to the figure. Run your app to view the new automatic reflow and resize behaviors.</entry>
        <entry key="responsify_hierarchyChanged_3panel">app.{0}, app.{1}, and app.{2} have been applied to the figure. Run your app to view the new automatic reflow and resize behaviors.</entry>
        <entry key="responsify_hierarchyChanged">In some cases, you may need to update your callback code to work with these new preconfigured panels.</entry>
        <entry key="responsify_nextButton">Next</entry>
        <entry key="responsify_skipButton">Skip Tutorial</entry>
        <entry key="responsify_finishButton">Finish</entry>
        <entry key="gridify_tutorial_title">Changes We Made for You</entry>
        <entry key="gridify_tutorial_message_part1">{0}.{1} has been applied to {0}.{2}.  The components' positions are now managed by the grid layout manager.  Run your {0} to view the new layout behavior.</entry>
        <entry key="gridify_tutorial_message_part2">In some cases, you may need to update your callback code to work with the grid layout manager.</entry>
    </message>
</rsccat>