<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright 2024 The MathWorks, Inc. -->
<rsccat locale="en_US" product="appdesigner" version="1.0">
	<message>
        <!-- step 1 -->
        <entry key="introductionContext">Let's create an app to interact with a Simulink model.{0}This tutorial uses the {1}bouncingBall.slx{2} model, which simulates a bouncing ball. Let's build an app to:</entry>
        <entry key="introductionBullet1">Start, stop, and pause the simulation.</entry>
        <entry key="introductionBullet2">Modify a model variable while the simulation is running.</entry>
        <entry key="introductionBullet3">Visualize the logged signals in the simulation.</entry>
        <entry key="introductionAction">Select the {0}Simulink{1} tab to see tools for configuring the model in App Designer.</entry>
        <!-- step 2 -->
        <entry key="openModelContext">The {0}bouncingBall.slx{1} model has been added to the path and associated with this app.</entry>
        <entry key="openModelAction">Open and familiarize yourself with the model by clicking the {0}Open Model{1} button, then click {0}Next{1}.</entry>
        <entry key="nextButton">Next</entry>
        <!-- step 3 -->
        <entry key="addSimulationControlsContext">The Simulink components automate common tasks for Simulink apps.</entry>
        <entry key="addSimulationControlsAction">Add a button to start, stop, and pause the simulation from your app by dragging a {0}Simulation Controls{1} component onto the canvas.</entry>
        <!-- step 4 -->
        <entry key="addSliderContext">To tune a model variable while the app is running, use a slider.</entry>
        <entry key="addSliderAction">Drag a {0}Slider{1} component onto the canvas.</entry>
        <!-- step 5 -->
        <entry key="configureSliderContext">Configure the slider properties to reflect the model variable.</entry>
        <entry key="configureSliderAction">Specify {0}Limits{1} as {0}[-1 0]{1} and {0}Value{1} as {0}-0.8{1}.</entry>
        <!-- step 6 -->
        <entry key="bindSliderContext">To control the elasticity of the ball collisions, use a slider to tune the coefficient of restitution model variable.</entry>
        <entry key="bindAction1">Right-click the {0} and select {1}Add Binding{2}.\u0020</entry>
        <entry key="bindSliderAction">Then, click the {0} block in the Simulink model and select the model variable in the {1}Connect{2} options.</entry>
        <!-- step 7 -->
        <entry key="addScopeContext">Add a way to visualize the signals in your app as the simulation runs.</entry>
        <entry key="addScopeAction">Drag a {0}Time Scope{1} component onto the canvas.</entry>
        <!-- step 8 -->
        <entry key="bindSignalContext">Connect the logged {0} signal to the time scope component.</entry>
        <entry key="bindSignalAction">Then, click the {0} signal in the Simulink model and select the logged signal in the {1}Connect{2} options.</entry>
        <!-- step 9 -->
        <entry key="bindVelocitySignalAction">You can also add bindings from the {0}Component Browser{1}. In the {0}Bindings{1} tab, click the {2} button to add a new binding.\u0020</entry>
        <!-- Step 10-->
        <entry key="runAppContext">Click {0}Run{1} to save and run the app and interact with the model.</entry>
        <entry key="runAppAction">For more information about building apps with Simulink models, see {0}.</entry>
        <entry key="simulinkAppsDocLink">Create Apps to Control Simulations</entry>
        <entry key="finishButton">Finish</entry>

        <!-- For substitutions -->
        <entry key="sliderNoCaps">slider</entry>
        <entry key="scopeNoCaps">time scope</entry>
        <!-- Model element names, do not translate-->
        <entry key="coeffOfRestitution" translate="false">Coefficient of Restitution</entry>
        <entry key="positionSignal" translate="false">Position</entry>
        <entry key="velocitySignal" translate="false">Velocity</entry>
    </message>
</rsccat>