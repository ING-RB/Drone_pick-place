<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright 2024 The MathWorks, Inc.-->

<rsccat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" locale="zh_CN" product="appdesigner" xsi:noNamespaceSchemaLocation="../../../../resources/schema/msgcat.xsd">
  <message>
    <entry key="addSliderContext">让我们构建一个简单的自定义 UI 组件，它由一个滑块和一个微调器组成，这两项的值联动。</entry>
    <entry key="addSliderAction">将{0}滑块{1}组件拖放到画布上。</entry>
    <entry key="addSpinnerAction">将{0}微调器{1}组件拖到画布上。</entry>
    <entry key="clickAddPublicPropertyContext">创建一个名为 {0}Value{1} 的公共属性，以允许 App 创建者在使用该组件构建 App 时设置滑块-微调器组件值。</entry>
    <entry key="clickAddPublicPropertyAction">在 {0} 中选择组件节点，然后点击 {1} 按钮以添加新公共属性。</entry>
    <entry key="doAddPublicPropertyContext">用以下值填充对话框，然后点击 {0} 以创建属性:</entry>
    <entry key="switchToCodeViewContext">App 设计工具包含一个设计视图和一个代码视图，前者用于设计组件，后者用于编写组件代码。</entry>
    <entry key="switchToCodeViewAction">点击 {0} 以开始编写组件代码。</entry>
    <entry key="addSliderCallbackContext">为滑块创建一个回调函数，以便在用户更改滑块值时作出响应。</entry>
    <entry key="addSliderCallbackAction">在 {0} 中，右键点击 {1}，然后选择 {2} &gt; {3}。</entry>
    <entry key="addSpinnerCallbackContext">接下来，对微调器执行相同的操作。您可以重用滑块回调，而不是创建新的回调函数。</entry>
    <entry key="addSpinnerCallbackAction">在 {0} 中，右键点击 {1}，然后选择 {2} &gt; {3}。然后从对话框中选择滑块的现有回调。</entry>
    <entry key="addSetValuePropertyCodeContext">当滑块值更改并执行此回调函数时，更新组件的 {0} 属性以匹配新滑块值。</entry>
    <entry key="addSetValuePropertyCodeAction">为此，用以下代码替换回调代码:</entry>
    <entry key="addUpdateCodeContext">当滑块或微调器的值更改时，组件的 {0} 属性现在会更新。接下来，反向为之，当有人以编程方式设置组件的 {1} 属性时，更新滑块和微调器的值。</entry>
    <entry key="addUpdateCodeAction">在 {0} 函数中编写以下代码来实现这一点，该函数在每次公共属性值更改时执行:</entry>
    <entry key="clickAddEventContext">创建一个公共回调，以允许组件的用户在其 App 的上下文中对交互进行编程响应。在您添加事件时，App 设计工具会创建一个公共回调。</entry>
    <entry key="clickAddEventAction">点击 {0} 选项卡，然后点击 {1} 按钮以添加新事件。</entry>
    <entry key="doAddEventContext">添加事件时，App 设计工具会创建一个具有相同名称但追加了 {0} 的公共回调。当组件添加到 App 时，此回调可用。</entry>
    <entry key="doAddEventAction">将事件的名称指定为 {0}。</entry>
    <entry key="addNotifyCodeContext">为了在正确的时间触发 {0} 回调，您需要在每次更改组件的 {1} 属性时通知事件。</entry>
    <entry key="addNotifyCodeAction">为此，请在此回调的末尾添加以下代码:</entry>
    <entry key="runComponentAction">点击 {0} 以保存并运行组件，以验证其交互行为。</entry>
    <entry key="testInCommandWindowAction">要验证组件值更改时会触发组件的 {0} 回调，请在 MATLAB 命令行窗口中执行以下代码:</entry>
    <entry key="configureComponentContext">恭喜，您刚刚构建了您的第一个自定义 UI 组件!</entry>
    <entry key="configureComponentAction">点击 {0} 以使您的组件出现在 App 设计工具组件库中。您可以在 App 中使用该组件，或将其与他人共享。</entry>
  </message>
</rsccat>
