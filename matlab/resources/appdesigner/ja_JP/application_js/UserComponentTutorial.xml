<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright 2024 The MathWorks, Inc.-->

<rsccat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" locale="ja_JP" product="appdesigner" xsi:noNamespaceSchemaLocation="../../../../resources/schema/msgcat.xsd">
  <message>
    <entry key="addSliderContext">それぞれの値が相互に関連付けられたスライダーとスピナーから構成される、シンプルなカスタム UI コンポーネントを作成してみましょう。</entry>
    <entry key="addSliderAction">{0}スライダー{1}コンポーネントをキャンバスにドラッグします。</entry>
    <entry key="addSpinnerAction">{0}スピナー{1} コンポーネントをキャンバスにドラッグします。</entry>
    <entry key="clickAddPublicPropertyContext">アプリ作成者がコンポーネントを使用してアプリを作成するときにスライダーとスピナーのコンポーネント値を設定できるように、{0}Value{1} という名前のパブリック プロパティを作成します。</entry>
    <entry key="clickAddPublicPropertyAction">{0} のコンポーネント ノードを選択し、{1} ボタンをクリックして新しいパブリック プロパティを追加します。</entry>
    <entry key="doAddPublicPropertyContext">ダイアログで以下の値を入力した後、{0} をクリックしてプロパティを作成します。</entry>
    <entry key="switchToCodeViewContext">App Designer には、コンポーネントを設計するための設計ビューと、コンポーネントをプログラミングするためのコード ビューがあります。</entry>
    <entry key="switchToCodeViewAction">{0} をクリックしてコンポーネントのプログラミングを開始します。</entry>
    <entry key="addSliderCallbackContext">ユーザーがスライダーの値を変更したときにスライダーが応答するためのコールバック関数を作成します。</entry>
    <entry key="addSliderCallbackAction">{0} で {1} を右クリックし、{2} &gt; {3} を選択します。</entry>
    <entry key="addSpinnerCallbackContext">次に、スピナーに対して同じことを行います。新しいコールバック関数を作成する代わりに、スライダー コールバックを再利用できます。</entry>
    <entry key="addSpinnerCallbackAction">{0} で {1} を右クリックし、{2} &gt; {3} を選択します。次に、ダイアログから既存のスライダー コールバックを選択します。</entry>
    <entry key="addSetValuePropertyCodeContext">スライダー値が変更され、このコールバック関数が実行されたときに、新しいスライダー値に一致するようにコンポーネントの {0} プロパティを更新します。</entry>
    <entry key="addSetValuePropertyCodeAction">これを行うには、コールバック コードを次のコードに置き換えます。</entry>
    <entry key="addUpdateCodeContext">これで、スライダーまたはスピナーの値が変更されると、コンポーネントの {0} プロパティが更新されます。次は逆に、コンポーネントの {1} プロパティがプログラムによって設定されたときに、スライダーとスピナーの値を更新します。</entry>
    <entry key="addUpdateCodeAction">これを行うには、関数 {0} 内に次のコードを記述します。この関数は、パブリック プロパティの値が変更されるたびに実行されます。</entry>
    <entry key="clickAddEventContext">コンポーネントのユーザーがアプリのコンテキストで操作への応答をプログラムできるように、パブリック コールバックを作成します。イベントを追加すると、App Designer によってパブリック コールバックが作成されます。</entry>
    <entry key="clickAddEventAction">{0} タブをクリックしてから {1} ボタンをクリックして新しいイベントを追加します。</entry>
    <entry key="doAddEventContext">イベントを追加すると、同じ名前に {0} が付加されたパブリック コールバックが App Designer によって作成されます。アプリにコンポーネントが追加されると、このコールバックは使用可能になります。</entry>
    <entry key="doAddEventAction">イベントの名前を {0} に指定します。</entry>
    <entry key="addNotifyCodeContext">{0} コールバックを適切なタイミングでトリガーするには、コンポーネントの {1} プロパティを変更するたびにこのイベントを通知する必要があります。</entry>
    <entry key="addNotifyCodeAction">これを行うには、次のコードをこのコールバックの最後に追加します。</entry>
    <entry key="runComponentAction">{0} をクリックしてコンポーネントを保存して実行し、その対話型動作を確認します。</entry>
    <entry key="testInCommandWindowAction">コンポーネント値が変更されたときにコンポーネントの {0} コールバックがトリガーされることを確認するには、MATLAB コマンド ウィンドウで次のコードを実行します。</entry>
    <entry key="configureComponentContext">おめでとうございます。最初のカスタム UI コンポーネントが作成されました。</entry>
    <entry key="configureComponentAction">App Designer の [コンポーネント ライブラリ] にコンポーネントを表示するには、{0} をクリックします。コンポーネントはアプリで使用したり、他のユーザーと共有したりできます。</entry>
  </message>
</rsccat>
