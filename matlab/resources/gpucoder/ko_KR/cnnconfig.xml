<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright 2024 The MathWorks, Inc.-->

<rsccat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" locale="ko_KR" product="gpucoder" xsi:noNamespaceSchemaLocation="../../resources/schema/msgcat.xsd">
  <message>
    <entry key="MissingCppTarget">''{0}'' 타깃 라이브러리에 coder.DeepLearningConfig를 사용하려면 TargetLang을 'C++'로 설정해야 합니다. 코드 구성 객체에서 TargetLang을 'C++'로 설정합니다.</entry>
    <entry key="MissingCppTargetError">코드 구성 객체의 TargetLang 속성이 'C++'로 설정되지 않았습니다. ''{0}'' 타깃 라이브러리에 coder.DeepLearningConfig를 사용하려면 TargetLang을 'C++'로 설정해야 합니다.</entry>
    <entry key="MissingCppTargetErrorSimulinkSimulation">'SimTargetLang' 속성에 대한 설정이 유효하지 않습니다. 딥러닝 신경망을 사용하는 시뮬레이션의 경우 타깃 언어를 'C++'로 설정해야 합니다.</entry>
    <entry key="MissingGpuConfig">Using coder.DeepLearningConfig for the ''{0}'' target library requires GpuConfig property to be enabled. Enabling GpuConfig property of the code configuration object.</entry>
    <entry key="GpuCoderNotInstalled">GPU Coder must be installed to use coder.DeepLearningConfig for ''{0}'' target library.</entry>
    <entry key="MissingGpuCoderLicense">GPU Coder 라이선스를 찾을 수 없습니다. 타깃 라이브러리 ''{0}''에 대해 coder.DeepLearningConfig를 사용하려면 유효한 GPU Coder 라이선스가 필요합니다.</entry>
    <entry key="unsupported_compute_host">Code generation with ''{0}'' data type is only supported for GPU device with compute capability greater than or equal to ''{1}''.</entry>
    <entry key="unsupported_compute">Code generation for ''{0}'' data type is not supported on devices with compute capability less than ''{1}''. Set the GpuConfig.ComputeCapability property of the code configuration object to a compute capability supported for ''{0}'' data type.</entry>
    <entry key="int8_unsupported_hardware">GPU device with a compute capability of 6.2 does not support 8-bit integer precision.</entry>
    <entry key="unsupported_target_lib">Target library ''{0}'' is invalid. Supported values for target library are {1}.</entry>
    <entry key="unsupported_target_lib_cnncodegen">Target library ''{0}'' is not supported for cnncodegen. cnncodegen supports only {1}.</entry>
    <entry key="empty_target_lib_cnncodegen">No valid target library is specified for cnncodegen. cnncodegen supports only {0}.</entry>
    <entry key="InvalidInputForDeepLearningConfig">Invoke coder.DeepLearningConfig with no arguments or with a 'TargetLibrary' name-value argument. For example, coder.DeepLearningConfig(TargetLibrary=targetLib).</entry>
    <entry key="ValidDeepLearningTargets">타깃 라이브러리에 대해 지원되는 값은 {0}입니다. </entry>
    <entry key="GpuConfigEnabledForCPUTargets">Using coder.DeepLearningConfig for target library ''{0}'' requires GpuConfig to be disabled. Set GpuConfig.Enabled to false on the code configuration object.</entry>
    <entry key="MissingHardwareConfigurationObject">구성 객체의 Hardware 속성이 비어 있거나 ARM Compute Library와 호환되지 않는 것으로 확인되므로 코드 구성 객체의 GenCodeOnly 옵션을 true로 설정합니다. </entry>
    <entry key="UnsupportedConfigurationObject">Deep learning code generation with ARM Compute library is not supported for MEX build target. Use 'LIB', 'EXE' or 'DLL' as the build target type. </entry>
    <entry key="InvalidHwtarget">유효하지 않은 하드웨어 타깃 ''{0}''이(가) 지정되었습니다. 지원되는 하드웨어 타깃은 'NVIDIA Jetson'과 'NVIDIA Drive'입니다.</entry>
    <entry key="UnsupportedHWtarget">ARM Compute Library를 사용하여 코드를 생성하려면 하드웨어 타깃이 NEON 명령어 집합을 지원하는 ARM 프로세서여야 합니다.</entry>
    <entry key="InvalidDeviceParams">NEON 명령어 집합 지원을 확인하기 위해 ''{0}'' 타깃 하드웨어에 연결할 수 없습니다. 타깃 하드웨어에 연결하려면 사용자 이름, 비밀번호, 장치 주소와 같은 파라미터를 올바르게 지정해야 합니다.</entry>
    <entry key="UnsupportedToolchainSpecified">Configured toolchain ''{0}'' is not supported for cross-compilation on {1}. Cross-compilation for deep learning on ARM is supported only in Linux.</entry>
    <entry key="InvaidToolchainPathSpecified">Specified Linaro {1} toolchain path ''{0}'' does not contain Linaro {1} binaries. Set a valid path for cross-compilation.</entry>
    <entry key="UnsupportedBatchSize">Code generation for ''{0}'' is supported only when number of observations equals to 1.</entry>
    <entry key="TargetArchitectureMismatch">arm-compute 타깃이 ''{1}'' 툴체인을 사용하기 위해 coder.DeepLearningConfig에 지정한 ArmArchitecture ''{0}''이(가) 잘못되었습니다. ArmArchitecture를 ''{2}''(으)로 강제 지정됩니다.</entry>
    <entry key="UnspecifiedEnvironmentVariable">Environment Variable ''{0}'' must be set pointing to the ''{1}''.</entry>
    <entry key="MissingARMComputeLibraries">Cross-compiled ARM Compute libraries ''{0}'' must be present in ''{1}'' to build the generated code.</entry>
    <entry key="ARMComputeArchitectureMismatch">Found ARM Compute library built with incorrect arch option. ARM Compute library must be built with arch option set to ''{0}'' when Toolchain property was specified as ''{1}''.</entry>
    <entry key="ARMComputeVersionMismatch">ARM Compute library version ''{1}'' used in cross-compilation does not match the ''{0}'' specified on the ArmComputeVersion property of coder.DeepLearningConfig.</entry>
    <entry key="UnsupportedCrossCompilation">''{0}'' 툴체인을 사용한 크로스 컴파일은 지원되지 않습니다.</entry>
    <entry key="UnspecifiedMKLDNNlibrary">INTEL_MKLDNN environment variable is not specified. Set INTEL_MKLDNN environment variable to the root folder of the Intel MKL-DNN library installation.</entry>
    <entry key="IncorrectMKLDNNlibrary">The specified INTEL_MKLDNN path ''{0}'' does not exist. Set INTEL_MKLDNN environment variable to the root folder of the Intel MKL-DNN library installation.</entry>
    <entry key="unsupported_cnncodegen_remote">cnncodegen is not supported for remote clients.</entry>
    <entry key="unsupportedOS">Target library ''{0}'' is not supported in macOS.</entry>
    <entry key="DLTargetLibUnsetSfun">For deep learning, the simulation target language must be set to C++.</entry>
    <entry key="SimulinkNotSupportCustomLayer">사용자 지정 계층이 있는 딥러닝 신경망은 Simulink에서 지원되지 않습니다.</entry>
    <entry key="InvalidInputForGetDeepLearningLayers">Invoke coder.getDeepLearningLayers with no arguments or with a 'TargetLibrary' name-value argument. For example, coder.getDeepLearningLayers(TargetLibrary=targetLib).</entry>
    <entry key="InvalidEnableOpenMPFlag">Using target library ''{0}'' requires OpenMP library. In the code configuration object, set the 'EnableOpenMP' property to true. Alternatively, in the MATLAB Coder app, select the 'Enable OpenMP library if possible' check box.</entry>
    <entry key="InvalidEnableOpenMPFlagForMKLDNN">MEX 코드 생성에 타깃 라이브러리 'mkldnn'을 사용하려면 OpenMP 라이브러리가 필요합니다. coder.MexCodeConfig 객체에서 'EnableOpenMP' 속성을 true로 설정하십시오. 또는 MATLAB Coder 앱에서 '가능한 경우 OpenMP 라이브러리 활성화' 체크박스를 선택합니다.</entry>
    <entry key="UnsupportedCmsisnnConfigOption">Deep learning code generation with cmsis-nn is not supported for MEX build target. Use 'LIB' as the build target type. </entry>
    <entry key="UnsupportedCmsisnnBuildType">Deep learning code generation with cmsis-nn does not support 'C++' TargetLang option. Use 'C' as the TargetLang option. </entry>
    <entry key="EmptyCalibrationResultFile">No valid CalibrationResultFile property specified. Save the results from the calibrate function to a MAT-file and specify the location of this MAT-file using this property.</entry>
    <entry key="UnsupportedToolchainForMkldnn"> Deep learning code generation using {0} toolchain is not supported for {1} target.</entry>
    <entry key="UnsupportedTargetArchitectureForMacOS">Deep learning code generation for MKL-DNN target library is not supported for macOS platform with ARM-based architecture. </entry>
    <entry key="LearnablesCompressionUnsupportedForGpu">Setting LearnablesCompression to 'bfloat16' is not supported for GPU code generation with TargetLibrary 'none'. 'bfloat16' is only supported for CPU code generation. Set LearnablesCompression to 'None' for GPU code generation. </entry>
  </message>
</rsccat>
