<?xml version="1.0" encoding="UTF-8" ?>
<!-- Copyright 2016-2025 The MathWorks, Inc. -->
<rsccat version="1.0" locale="en_US" product="gpucoder">
  <message>
    <entry key="unsupported_macos">GPU acceleration is not supported on MAC OS.</entry>
    <entry key="incompatible_gpu_driver">Acceleration using GPUs is not available because of issues with the graphics driver.\n{0}</entry>
    <!-- checkDlAccel messages -->
    <entry key="no_gpus_dlaccel">A compatible GPU device is not found on the host system. Acceleration using GPUs is not available.</entry>
    <entry key="unsupported_gpu_accel">Selected GPU device with index {0} is not supported. Acceleration using GPUs is not available.</entry>
    <entry key="unsupported_cc_accel">Compute capability {1} of the selected GPU with index {0} is not supported. Acceleration using GPUs is not available.</entry>

    <!--checkGpuInstall messages-->
    <entry key="no_supported_host_compiler">Unable to find a supported C++ host compiler. For a list of supported compilers, see &lt;a href="https://www.mathworks.com/support/requirements/supported-compilers.html"&gt;supported compilers&lt;/a&gt; </entry>
    <entry key="unsupported_host_compiler">Selected C++ host compiler ''{0}'' is not supported for CUDA code generation. Use ''{1}'' to select a supported compiler. For a list of supported compilers, see &lt;a href="https://www.mathworks.com/support/requirements/supported-compilers.html"&gt;supported compilers&lt;/a&gt; </entry>
    <entry key="no_gpus">A compatible GPU device is not found on the host system. Execution and profiling of the generated GPU MEX will not be available.</entry>
    <entry key="no_compatible_driver">There is a problem with the graphics driver or with this GPU device. Code execution will not be available. Check that you have a supported GPU and the latest graphics driver.</entry>
    <entry key="unsupported_gpu">Selected GPU device with index {0} is not supported by the Parallel Computing Toolbox. Execution of the generated GPU MEX will not be available.</entry>
    <entry key="unsupported_cc">Compute capability {1} of the selected GPU with index {0} is not supported by GPU Coder. Execution of the generated GPU MEX will not be available.</entry>
    <entry key="no_cuda_env_var">Unable to find the 'CUDA_PATH' environment variable. Set 'CUDA_PATH' to point to the root directory of the installed CUDA Toolkit.</entry>
    <entry key="nvcc_cmd_failed">Unable to execute the nvcc command. Check your CUDA Toolkit installation.</entry>
    <entry key="nvcc_cmd_failed_board">Unable to find nvcc on the system path. Update the .bashrc shell login script on the target to set the 'PATH' environment variable.</entry>
    <entry key="no_cuda_library">Unable to find the {0} library. Install all the libraries available in the CUDA Toolkit.</entry>
    <entry key="no_cuda_library_board">Unable to find the {0} library. Update the .bashrc shell login script on the target to set the 'LD_LIBRARY_PATH' environment variable.</entry>
    <entry key="codegen_failed_report"><![CDATA[GPU code generation failed with the error ''{0}''. View report for further information: <a href="matlab:open(''{1}'')">View report</a>]]></entry>
    <entry key="codegen_failed_report_noerrorid"><![CDATA[GPU code generation failed with an error. View report for further information: <a href="matlab:open(''{0}'')">View report</a>]]></entry>
    <entry key="codegen_failed_reporterror_noerrorid"><![CDATA[GPU code generation failed with an error. Unable to generate report in the current working folder, check whether the folder is writable.]]></entry>
    <entry key="mex_compiler_not_found">Selected C++ MEX compiler ''{0}'' is not supported for MEX acceleration. Use {1} to select a supported C++ MEX compiler.</entry>
    <entry key="code_execution_failed">Generated GPU code execution did not match MATLAB.</entry>
    <entry key="timeout_board_exec">Timeout exceeded during code execution. Increase the value of the ExecTimeout property of the coder.gpuEnvConfig object.</entry>
    <entry key="timeout_board_exec_app">Timeout exceeded during code execution. Increase Execution Timeout value.</entry>
    <entry key="no_cudnn_env_var">Unable to find the 'NVIDIA_CUDNN' environment variable. Set 'NVIDIA_CUDNN' to point to the root directory of the cuDNN installation.</entry>
    <entry key="no_tensorrt_env_var">Unable to find the 'NVIDIA_TENSORRT' environment variable. Set 'NVIDIA_TENSORRT' to point to the root directory of the TensorRT installation.</entry>
    <entry key="invalid_parameter">Invalid input parameter ''{0}''. See 'help {1}' to learn more about the supported parameters.</entry>
    <entry key="no_cudnn_header">Unable to find cuDNN header files in directory ''{0}''. Check that the cuDNN headers are installed with the specified cuDNN SDK.</entry>
    <entry key="no_cudnn_library">Unable to find cuDNN library in directory ''{0}''. Check that the cuDNN library is installed with the specified cuDNN SDK.</entry>
    <entry key="no_tensorrt_header">Unable to find TensorRT header file ''{1}'' in ''{0}''. Check that the TensorRT SDK installation contains the specified header file.</entry>
    <entry key="no_tensorrt_library">Unable to find TensorRT library ''{1}'' in ''{0}''. Check that the TensorRT SDK installation contains the specified library file.</entry>
    <entry key="no_tensorrt_library_in_llp">Unable to find TensorRT libraries in ''{0}'' environment variable for mex target. Add TensorRT library path to ''{0}'' before launching MATLAB.</entry>
    <entry key="invalid_cc_arch">Jetson cross-compilation is supported only on Linux platforms.</entry>
    <entry key="no_crosscompile_env_var">Unable to find the ''{0}'' environment variable. This environment variable must be set for cross-compilation.</entry>
    <entry key="no_crosscompiler">Unable to find the  ''{1}'' cross-compiler for the Jetson ''{0}''. Check that this tool is installed with your specified cross-compiler.</entry>
    <entry key="gpu_sys_check">One or more of the system checks failed with the following errors:\n{0}</entry>
    <entry key="code_execution_error">Generated GPU code failed to execute properly with the following error ''{0}''.</entry>
    <entry key="unsupported_tensorrt_datatype">TensorRT {2} requires a compute capability of {1}. The selected GPU with compute capability of {0} is not supported for {2} inference.</entry>
    <entry key="no_nvtx_lib">Unable to find NVTX library ''{0}''. Check that the NVTX SDK installation contains the specified library file. </entry>
    <entry key="no_nvtx_env_var">Unable to find the 'NVTOOLSEXT_PATH' environment variable. Set 'NVTOOLSEXT_PATH' to point to the root directory of the NVTX installation.</entry>
    <entry key="gpu_check_config">{0} Consider using coder.gpuEnvConfig object as the input argument to coder.checkGpuInstall instead of string arguments.</entry>
    <entry key="gpu_check_crosscompile">Argument {0} is invalid. The cross-compilation workflow will be deprecated in a future release.</entry>
    <entry key="invalid_gpu_id">Invalid CUDA device id: {0}. Select a device id from the range {1}.</entry>
    <entry key="library_ver_mismatch_warn">Warning: Deep learning code generation has been tested with {0} v{1}. The provided {0} library v{2} may not be fully compatible.</entry>
    <entry key="library_ver_error">Error generated while determining {0} library version ''{1}''.</entry>
    <entry key="device_deprecated_warn">Warning: Support for GPU devices with compute capability {0} will be removed in a future MATLAB release. For more information, see &lt;a href=&quot;matlab:web('https://www.mathworks.com/help/parallel-computing/gpu-support-by-release.html','-browser')&quot;&gt;GPU Support by Release&lt;/a&gt;.</entry> 

    <entry key="GPUAccelerationOnWithNoLicense"> 
      <![CDATA[
      {0}\n\n
      ''GPUAcceleration'' parameter is enabled in ''{1}'' even though a valid GPU Coder license is not available. Consider running set_param(''{1}'', ''GPUAcceleration'', ''off'') to turn off GPU acceleration.
      <actions exclusiveFixIts="yes">
        <action type="fixit">
            <cmd>configset.internal.fixIt(''{1}'',''GPUAcceleration'',''off'')</cmd>
            <txt>Turn off <sldiag objui="configset" objparam="GPUAcceleration">GPU Acceleration</sldiag></txt>
        </action>
      </actions>]]>
    </entry>     
    <entry key="GenerateGPUCodeOnWithNoLicense"><![CDATA[
      {0}\n\n
      CUDA code generation is enabled in ''{1}'' even though a valid GPU Coder license is not available. Consider disabling CUDA code generation by running set_param(''{1}'', ''GenerateGPUCode'', ''None'').
      <actions exclusiveFixIts="yes">
        <action type="fixit">
            <cmd>configset.internal.fixIt(''{1}'',''GenerateGPUCode'',''None'')</cmd>
            <txt>Turn off <sldiag objui="configset" objparam="GenerateGPUCode">Generate GPU Code</sldiag></txt>
        </action>
      </actions>]]>
    </entry>  
    
    <!-- coder.gpuEnvConfig messages-->
    <entry key="gpu_check_hwobj_empty">HardwareObject property of the coder.gpuEnvConfig object is empty. Set this property to a {0} object.</entry>
    <entry key="gpu_check_hwobj">HardwareObject property of the {0} coder.gpuEnvConfig object must be a {0} object.</entry>
    <entry key="gpu_check_timeout">ExecTimeout property of the coder.gpuEnvConfig object must be a scalar double greater than zero.</entry>
    <entry key="gpu_check_no_hsp">This feature requires the &lt;a href="matlab: matlab.addons.supportpackage.internal.explorer.showSupportPackages(''nvidia'', ''tripwire'')&quot;&gt;MATLAB Coder Support Package for NVIDIA Jetson and NVIDIA DRIVE Platforms&lt;/a&gt; support package.</entry>
    <entry key="gpu_computecheck_tensorrt">DataType property of the coder.gpuEnvConfig object requires the DeepLibTarget property be set to 'tensorrt'.</entry>
    <entry key="gpu_check_config_validate">Error setting property {0} of class {1}: \n{2}.</entry>
    <entry key="gpu_profiling_check_deprecate">The Profiling property of coder.gpuEnvConfig is deprecated.</entry>
    <entry key="gpu_library_check_error_hsp">Encountered the following error while searching for {0} library on the NVIDIA Jetson hardware:\n{1}</entry>

    <!-- gpucoderSetup App messages-->
    <entry key="gpu_check_no_hsp_app">This feature requires NVIDIA support package. Install from the Add-On Explorer.</entry>
    <entry key="file_open_error_script">Unable to create 'gpuEnvSettings.m' script in the current working folder.</entry>
    <entry key="file_open_error_report">Unable to create HTML report in the current working folder.</entry>
    <entry key="app_open_error">GPU Environment Check application is already running.</entry>
    <entry key="error_board_connection">Error connecting to board: \n{0}.</entry>
    <entry key="success_board_connection">Connection successful.</entry>
    <entry key="script_saved_message">'gpuEnvSettings.m' script is saved in current working folder.</entry>
    <entry key="incomplete_board_settings">Not enough input arguments. You must provide all the board settings.</entry>
    <entry key="invalid_input_timeout">Execution Timeout must be a scalar double greater than zero.</entry>    
    <entry key="compatible_gpu_not_found">A compatible GPU device is not found on the host system. Execution and profiling of the generated \nGPU MEX will not be available.</entry>
    <entry key="compatible_driver_not_found">There is a problem with the graphics driver or with this GPU device. Code execution will not be available. Check that you have a supported GPU and the latest graphics driver.</entry>

    <!-- gpucoderSetup report column names -->
    <entry key="gpucodersetup_report_name">GPU Code Generation Environment Check Report</entry>
    <entry key="gpucodersetup_report_gpuname">Results for {0} : {1}</entry>
    <entry key="gpucodersetup_passed">PASSED</entry>
    <entry key="gpucodersetup_failed">FAILED</entry>
    <entry key="table_host_compiler">Host Compiler</entry>
    <entry key="table_compatible_gpu">Compatible GPU</entry>
    <entry key="table_cuda_env">CUDA Environment</entry>
    <entry key="table_cudnn_env">cuDNN Environment</entry>
    <entry key="table_tensorrt_env">TensorRT Environment</entry>
    <entry key="table_basic_codegen">Basic Code Generation</entry>
    <entry key="table_basic_codeexec">Basic Code Execution</entry>
    <entry key="table_dl_codegen">Deep Learning ({0}) Code Generation</entry>
    <entry key="table_dl_codeexec">Deep Learning ({0}) Code Execution</entry>
    <entry key="table_dl_tensorrt_cc_check">TensorRT {0} Compute Capability Check</entry>
    <entry key="table_profiling_env">Profiling Environment</entry>
    <entry key="table_libname_runtime">Runtime</entry>
    <entry key="table_libname_cufft">cuFFT</entry>
    <entry key="table_libname_cusolver">cuSOLVER</entry>
    <entry key="table_libname_cublas">cuBLAS</entry>
    <entry key="table_colname_check" note="Column name for table in html report which indicates what check was run">Check</entry>
    <entry key="table_colname_result" note="Column name for table in html report which indicates what is the result of running the check i.e. pass/fail">Result</entry>
    <entry key="table_colname_message" note="Column name for table in html report which provides more information about a check that failed">Message</entry>
    
    <!-- gpucoderSetup report header names -->
    <entry key="table_header_env_checks">ENVIRONMENT CHECKS</entry>
    <entry key="table_header_basic_codegen_checks">BASIC CODE GENERATION CHECKS</entry>
    <entry key="table_header_dl_codegen_checks">DEEP LEARNING CODE GENERATION CHECKS - {0} {1}</entry>

    <!-- gpucoderSetup App Message strings -->
    <entry key="gpucodersetup_uistr_fileopen">File Open Error</entry>
    <entry key="gpucodersetup_uistr_savesettings">Save Settings</entry>
    <entry key="gpucodersetup_uistr_incompinputs">Incomplete Inputs</entry>
    <entry key="gpucodersetup_uistr_invalidinput">Invalid Input</entry>
    <entry key="gpucodersetup_uistr_connboard">Connecting to board</entry>
    <entry key="gpucodersetup_uistr_connfailure">Connection Failure</entry>
    <entry key="gpucodersetup_uistr_connsuccess">Success</entry>
    <entry key="gpucodersetup_uistr_connected">Connected to {0}</entry>
    <entry key="gpucodersetup_uistr_running_chks">Running Checks</entry>
    <entry key="gpucodersetup_uistr_checking_env">Checking the environment</entry>
    <entry key="gpucodersetup_uistr_gen_report">Generating Report</entry>
    <entry key="gpucodersetup_cudaenv_not_found">CUDA environment not found.</entry>
    <entry key="gpucodersetup_cudnn_not_found">cuDNN environment not found.</entry>
    <entry key="gpucodersetup_tensorrt_not_found">TensorRT environment not found.</entry>
    <entry key="gpucodersetup_nvtx_not_found">Path to NVTX library not found.</entry>
    <entry key="gpucodersetup_uialert_msg">File Open Error</entry>
    <entry key="gpucodersetup_script_msg">%% This script is created from gpucoderSetup on {0} \n \n</entry>
    <entry key="gpucodersetup_script_selecting_gpu">\n%% Selecting Gpu \n</entry>
    <entry key="gpucodersetup_script_cuda_path">\n\n%% CUDA Installation Path \n</entry>
    <entry key="gpucodersetup_script_cudnn_path">\n\n%% cuDNN Installation Path \n</entry>
    <entry key="gpucodersetup_script_tensorrt_path">\n\n%% TensorRT Installation Path \n</entry>
    <entry key="gpucodersetup_script_nvtx_path">\n\n%% NVTX Library Path \n</entry>
    <entry key="gpucodersetup_select_cuda_path">Select path to CUDA installation</entry>
    <entry key="gpucodersetup_select_cudnn_path">Select path to cuDNN installation</entry>
    <entry key="gpucodersetup_select_tensorrt_path">Select path to TensorRT installation</entry>
    <entry key="gpucodersetup_select_nvtx_path">Select path to NVTX Library</entry>

    <!-- gpucoderSetup App Property strings - Figure -->
    <entry key="gpucodersetup_prop_fig_name">GPU Environment Check</entry>
    <entry key="gpucodersetup_prop_fig_desc">GPU Code Generation Environment Check / Setup</entry>
    <entry key="gpucodersetup_prop_hwmenu_label">Select Hardware</entry>
    <entry key="gpucodersetup_prop_gpumenu_label">Select GPU</entry>

    <!-- gpucoderSetup App Property strings - Workflow -->
    <entry key="gpucodersetup_prop_workchecks_panel">Workflow Checks</entry>
    <entry key="gpucodersetup_prop_basiccodegen">\ \ \ \ \ \ \ \ Basic Code Generation</entry>
    <entry key="gpucodersetup_prop_dlcodegen">\ \ \ \ \ \ \ \ Deep Learning Code Generation</entry>
    <entry key="gpucodersetup_prop_gencode">Generate Code</entry>
    <entry key="gpucodersetup_prop_execcode">Generate and Execute</entry>
    <entry key="gpucodersetup_prop_silprof">SIL Profiling</entry>
    <entry key="gpucodersetup_prop_target">Target</entry>
    <entry key="gpucodersetup_prop_data_type">Data Type</entry>

    <!-- gpucoderSetup App Property strings - Environment -->
    <entry key="gpucodersetup_prop_envchecks_panel">Environment Checks</entry>
    <entry key="gpucodersetup_prop_cudapath_label">CUDA Installation Path</entry>
    <entry key="gpucodersetup_prop_cudnnpath_label">cuDNN</entry>
    <entry key="gpucodersetup_prop_tensorrtpath_label">TensorRT</entry>
    <entry key="gpucodersetup_prop_nvtxpath_label">NVTX Library Path</entry>  
    <entry key="gpucodersetup_prop_cudapath_tooltip">Browse CUDA installation path</entry>
    <entry key="gpucodersetup_prop_cudnnpath_tooltip">Browse cuDNN installation path</entry>
    <entry key="gpucodersetup_prop_tensorrtpath_tooltip">Browse TensorRT installation path</entry>
    <entry key="gpucodersetup_prop_nvtxpath_tooltip">Browse NVTX library path</entry>
    <entry key="gpucodersetup_prop_doc_tooltip">GPU Coder documentation</entry>

    <!-- gpucoderSetup App Property strings - Buttons -->
    <entry key="gpucodersetup_prop_runchks_button">Run Checks</entry>
    <entry key="gpucodersetup_prop_runchks_tooltip">Run selected checks</entry>
    <entry key="gpucodersetup_prop_export_button">Export Settings</entry>
    <entry key="gpucodersetup_prop_export_tooltip">Export current settings as MATLAB script</entry>
    <entry key="gpucodersetup_prop_clear_button">Clear</entry>
    <entry key="gpucodersetup_prop_clear_tooltip">Clear board settings</entry>
    <entry key="gpucodersetup_prop_connect_button">Connect</entry>
    <entry key="gpucodersetup_prop_connect_tooltip">Connect to board</entry>
    
    <!-- gpucoderSetup App Property strings - Board -->
    <entry key="gpucodersetup_prop_board_panel">Board Settings</entry>
    <entry key="gpucodersetup_prop_device_addr">Device Address</entry>
    <entry key="gpucodersetup_prop_device_addr_tooltip">Board address</entry>
    <entry key="gpucodersetup_prop_device_usrn">Username</entry>
    <entry key="gpucodersetup_prop_device_usrn_tooltip">Username to access board</entry>
    <entry key="gpucodersetup_prop_device_pswd">Password</entry>
    <entry key="gpucodersetup_prop_device_pswd_tooltip">Password to access board</entry>
    <entry key="gpucodersetup_prop_device_devid">GPU Device Id</entry>
    <entry key="gpucodersetup_prop_device_devid_tooltip">Index of GPU device on Drive board</entry>
    <entry key="gpucodersetup_prop_device_exectimeout">Execution Timeout</entry>
    <entry key="gpucodersetup_prop_device_exectimeout_tooltip">Maximum time in seconds to wait until code execution completes</entry>

    <!-- gpucoderSetup MATLAB Online error -->
    <entry key="gpucoder_fcn_not_supp_platform">Unable to run the {0} function because it is not supported for {1}.</entry>
    
  </message>
</rsccat>
                                                                                        
