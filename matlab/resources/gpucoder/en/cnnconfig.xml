<?xml version="1.0" encoding="UTF-8" ?>
<!-- Copyright 2017-2024 The MathWorks, Inc. -->
<rsccat version="1.0" locale="en_US" product="gpucoder">
  <message>
    <entry key="MissingCppTarget">Using coder.DeepLearningConfig for the ''{0}'' target library requires TargetLang to be set to 'C++'. Setting TargetLang to 'C++' on the code configuration object.</entry>
    <entry key="MissingCppTargetError">TargetLang property on code configuration object not set to 'C++'. Using coder.DeepLearningConfig for ''{0}'' target library requires TargetLang to be set to 'C++'.</entry>
    <entry key="MissingCppTargetErrorSimulinkSimulation">Invalid setting for the 'SimTargetLang' property. Simulation with deep learning network requires target language to be set to 'C++'.</entry>
    <entry key="MissingGpuConfig">Using coder.DeepLearningConfig for the ''{0}'' target library requires GpuConfig property to be enabled. Enabling GpuConfig property of the code configuration object.</entry>
    <entry key="GpuCoderNotInstalled">GPU Coder must be installed to use coder.DeepLearningConfig for ''{0}'' target library.</entry>
    <entry key="MissingGpuCoderLicense">Unable to locate GPU Coder license. A valid GPU Coder license is required for using coder.DeepLearningConfig for target library ''{0}''.</entry>
    <entry key="unsupported_compute_host">Code generation with ''{0}'' data type is only supported for GPU device with compute capability greater than or equal to ''{1}''.</entry>
    <entry key="unsupported_compute">Code generation for ''{0}'' data type is not supported on devices with compute capability less than ''{1}''. Set the GpuConfig.ComputeCapability property of the code configuration object to a compute capability supported for ''{0}'' data type.</entry>
    <entry key="int8_unsupported_hardware">GPU device with a compute capability of 6.2 does not support 8-bit integer precision.</entry>
    <entry key="unsupported_target_lib">Target library ''{0}'' is invalid. Supported values for target library are {1}.</entry>
    <entry key="unsupported_target_lib_cnncodegen">Target library ''{0}'' is not supported for cnncodegen. cnncodegen supports only {1}.</entry>
    <entry key="empty_target_lib_cnncodegen">No valid target library is specified for cnncodegen. cnncodegen supports only {0}.</entry>
    <entry key="InvalidInputForDeepLearningConfig">Invoke coder.DeepLearningConfig with no arguments or with a 'TargetLibrary' name-value argument. For example, coder.DeepLearningConfig(TargetLibrary=targetLib).</entry>
    <entry key="ValidDeepLearningTargets">Supported values for target library are {0}. </entry>
    <entry key="GpuConfigEnabledForCPUTargets">Using coder.DeepLearningConfig for target library ''{0}'' requires GpuConfig to be disabled. Set GpuConfig.Enabled to false on the code configuration object.</entry>
    <entry key="MissingHardwareConfigurationObject">Setting GenCodeOnly option on code configuration object to true, as the Hardware property of configuration object was found to be empty or incompatible with ARM Compute library. </entry>
    <entry key="UnsupportedConfigurationObject">Deep learning code generation with ARM Compute library is not supported for MEX build target. Use 'LIB', 'EXE' or 'DLL' as the build target type. </entry>
    <entry key="InvalidHwtarget">Invalid hardware target ''{0}'' specified. Supported hardware targets are 'NVIDIA Jetson' and 'NVIDIA Drive'.</entry>
    <entry key="UnsupportedHWtarget">For code generation with ARM Compute Library, the hardware target must be an ARM processor that supports NEON instruction set.</entry>
    <entry key="InvalidDeviceParams">Unable to connect to ''{0}'' target hardware to check for NEON instruction set support. To connect to target hardware,  parameters such as username, password, and device address must be specified correctly.</entry>
    <entry key="UnsupportedToolchainSpecified">Configured toolchain ''{0}'' is not supported for cross-compilation on {1}. Cross-compilation for deep learning on ARM is supported only in Linux.</entry>
    <entry key="InvaidToolchainPathSpecified">Specified Linaro {1} toolchain path ''{0}'' does not contain Linaro {1} binaries. Set a valid path for cross-compilation.</entry>
    <entry key="UnsupportedBatchSize">Code generation for ''{0}'' is supported only when number of observations equals to 1.</entry>
    <entry key="TargetArchitectureMismatch">Incorrect ArmArchitecture ''{0}'' specified in coder.DeepLearningConfig for arm-compute target to use ''{1}'' toolchain. Forcing the ArmArchitecture to ''{2}''.</entry>
    <entry key="UnspecifiedEnvironmentVariable">Environment Variable ''{0}'' must be set pointing to the ''{1}''.</entry>
    <entry key="MissingARMComputeLibraries">Cross-compiled ARM Compute libraries ''{0}'' must be present in ''{1}'' to build the generated code.</entry>
    <entry key="ARMComputeArchitectureMismatch">Found ARM Compute library built with incorrect arch option. ARM Compute library must be built with arch option set to ''{0}'' when Toolchain property was specified as ''{1}''.</entry>
    <entry key="ARMComputeVersionMismatch">ARM Compute library version ''{1}'' used in cross-compilation does not match the ''{0}'' specified on the ArmComputeVersion property of coder.DeepLearningConfig.</entry>
    <entry key="UnsupportedCrossCompilation">Cross-compilation is not supported using ''{0}'' toolchain.</entry>
    <entry key="UnspecifiedMKLDNNlibrary">INTEL_MKLDNN environment variable is not specified. Set INTEL_MKLDNN environment variable to the root folder of the Intel MKL-DNN library installation.</entry>
    <entry key="IncorrectMKLDNNlibrary">The specified INTEL_MKLDNN path ''{0}'' does not exist. Set INTEL_MKLDNN environment variable to the root folder of the Intel MKL-DNN library installation.</entry>
    <entry key="unsupported_cnncodegen_remote">cnncodegen is not supported for remote clients.</entry>
    <entry key="unsupportedOS">Target library ''{0}'' is not supported in macOS.</entry>
    <entry key="DLTargetLibUnsetSfun">For deep learning, the simulation target language must be set to C++.</entry>
    <entry key="SimulinkNotSupportCustomLayer">Deep learning network with custom layer is not supported in Simulink.</entry>
    <entry key="InvalidInputForGetDeepLearningLayers">Invoke coder.getDeepLearningLayers with no arguments or with a 'TargetLibrary' name-value argument. For example, coder.getDeepLearningLayers(TargetLibrary=targetLib).</entry>
    <entry key="InvalidEnableOpenMPFlag">Using target library ''{0}'' requires OpenMP library. In the code configuration object, set the 'EnableOpenMP' property to true. Alternatively, in the MATLAB Coder app, select the 'Enable OpenMP library if possible' check box.</entry>
    <entry key="InvalidEnableOpenMPFlagForMKLDNN">Using target library 'mkldnn' for MEX code generation requires OpenMP library. In the coder.MexCodeConfig object, set the 'EnableOpenMP' property to true. Alternatively, in the MATLAB Coder app, select the 'Enable OpenMP library if possible' check box.</entry>
    <entry key="UnsupportedCmsisnnConfigOption">Deep learning code generation with cmsis-nn is not supported for MEX build target. Use 'LIB' as the build target type. </entry>
    <entry key="UnsupportedCmsisnnBuildType">Deep learning code generation with cmsis-nn does not support 'C++' TargetLang option. Use 'C' as the TargetLang option. </entry>
    <entry key="EmptyCalibrationResultFile">No valid CalibrationResultFile property specified. Save the results from the calibrate function to a MAT-file and specify the location of this MAT-file using this property.</entry>
    <entry key="UnsupportedToolchainForMkldnn"> Deep learning code generation using {0} toolchain is not supported for {1} target.</entry>
    <entry key="UnsupportedTargetArchitectureForMacOS">Deep learning code generation for MKL-DNN target library is not supported for macOS platform with ARM-based architecture. </entry>
    <entry key="LearnablesCompressionUnsupportedForGpu">Setting LearnablesCompression to 'bfloat16' is not supported for GPU code generation with TargetLibrary 'none'. 'bfloat16' is only supported for CPU code generation. Set LearnablesCompression to 'None' for GPU code generation. </entry>
  </message>
</rsccat>

<!-- LocalWords:  targetlib cnncodegen Jetson ARMNEON armv Linaro toolchain MKLDNN MKL TFLITE
     LocalWords:  Tensorflow tflite mkldnn dlarray cmsis nn
-->
