<?xml version="1.0"?>
<!-- Copyright 2011-2023 The MathWorks, Inc. -->
<rsccat version="1.0" locale="en_US" product="MATLAB">
  <message>
	<!-- Negative Error Messages -->
    <entry key="Sparse">Sparse matrices are not supported.</entry>
	<entry key="Complex">Complex values are not supported.</entry>
    <entry key="CellArray">Conversion to double from cell is not possible</entry>
	<entry key="CharArray">Value must be numeric.</entry>
    <entry key="NaN">Missing values, such as NaN, NaT, and &lt;undefined&gt;, are not supported.</entry>
	<entry key="Inf">Inf is not supported.</entry>
	
	
	<!-- Positive Error Messages -->
    <entry key="AlphaMapPredicate">Value must be either:\na vector of type single or double in the range [0 1]\na vector of an integer or logical type.</entry>
    <entry key="AlphaMapRange">Value must be either:\na vector of type single or double in the range [0 1]\na vector of an integer or logical type.</entry>
    <entry key="AlphaMapSize">Value must be either:\na vector of type single or double in the range [0 1]\na vector of an integer or logical type.</entry>
    <entry key="AlphaMapType">Value must be either:\na vector of type single or double in the range [0 1]\na vector of an integer or logical type.</entry>
    <entry key="AxesViewPredicate">Value must be a two element vector of type double.</entry>
    <entry key="AxesViewRange">Value must be a two element vector of type double.</entry>
    <entry key="AxesViewSize">Value must be a two element vector of type double.</entry>
    <entry key="AxesViewType">Value must be a two element vector of type double.</entry>
    <entry key="CDataPredicate">Value must be a three-dimensional matrix of RGB values that defines a truecolor image. Each value must be between 0.0 and 1.0 or NaN.</entry>
    <entry key="CDataRange">Value must be a three-dimensional matrix of RGB values that defines a truecolor image. Each value must be between 0.0 and 1.0 or NaN.</entry>
    <entry key="CDataSize">Value must be a three-dimensional matrix of RGB values that defines a truecolor image. Each value must be between 0.0 and 1.0 or NaN.</entry>
    <entry key="CDataType">Value must be a three-dimensional matrix of RGB values that defines a truecolor image. Each value must be between 0.0 and 1.0 or NaN.</entry>
    <entry key="ColorbarTickLengthSize">Value must be a scalar of type double.</entry>
    <entry key="ColorbarTickLengthType">Value must be a scalar of type double.</entry>
    <entry key="ColorbarTickLengthScalar">The colorbar TickLength is a scalar quantity. Only the first value will be used.</entry>
    <entry key="ColorMapPredicate">Value must be either:\nan Mx3 array of type single or double in the range [0 1]\nan Mx3 array of type uint8.</entry>
    <entry key="ColorMapRange">Value must be either:\nan Mx3 array of type single or double in the range [0 1]\nan Mx3 array of type uint8.</entry>
    <entry key="ColorMapSize">Value must be either:\nan Mx3 array of type single or double in the range [0 1]\nan Mx3 array of type uint8.</entry>
    <entry key="ColorMapType">Value must be either:\nan Mx3 array of type single or double in the range [0 1]\nan Mx3 array of type uint8.</entry>
    <entry key="ColorOrderPredicate">Value must be a non-empty Mx3 array of type single or double in the range [0 1].</entry>
    <entry key="ColorOrderRange">Value must be a non-empty Mx3 array of type single or double in the range [0 1].</entry>
    <entry key="ColorOrderSize">Value must be a non-empty Mx3 array of type single or double in the range [0 1].</entry>
    <entry key="ColorOrderType">Value must be a non-empty Mx3 array of type single or double in the range [0 1].</entry>
    <entry key="CompositeColorDataPredicate">Value must be either:\nTruecolor - a 4xN array of type numeric or logical type\nColormapped - an MxN vector of numeric or logical type.</entry>
    <entry key="CompositeColorDataRange">Value must be either:\nTruecolor - a 4xN array of type numeric or logical type\nColormapped - an MxN vector of numeric or logical type.</entry>
    <entry key="CompositeColorDataSize">Value must be either:\nTruecolor - a 4xN array of type numeric or logical type\nColormapped - an MxN vector of numeric or logical type.</entry>
    <entry key="CompositeColorDataType">Value must be either:\nTruecolor - a 4xN array of type numeric or logical type\nColormapped - an MxN vector of numeric or logical type.</entry>
    <entry key="CurvaturePredicate">Value must be either:\na scalar of type double\na 1x2 vector of type double in the range [0 1].</entry>
    <entry key="CurvatureRange">Value must be either:\na scalar of type double\na 1x2 vector of type double in the range [0 1].</entry>
    <entry key="CurvatureSize">Value must be either:\na scalar of type double\na 1x2 vector of type double in the range [0 1].</entry>
    <entry key="CurvatureType">Value must be either:\na scalar of type double\na 1x2 vector of type double in the range [0 1].</entry>
    <entry key="DataBoundsPredicate">Value must be a 1x2 vector of type single or double in which the second element is equal to or larger than the first.</entry>
    <entry key="DataBoundsRange">Value must be a 1x2 vector of type single or double in which the second element is equal to or larger than the first.</entry>
    <entry key="DataBoundsSize">Value must be a 1x2 vector of type single or double in which the second element is equal to or larger than the first.</entry>
    <entry key="DataBoundsType">Value must be a 1x2 vector of type single or double in which the second element is equal to or larger than the first.</entry>
    <entry key="FigureNumberPredicate">Value must be a scalar double or the empty matrix.</entry>
    <entry key="FigureNumberSize">Value must be a scalar double or the empty matrix.</entry>
    <entry key="FigureNumberType">Value must be a scalar double or the empty matrix.</entry>
    <entry key="GridSizePredicate">Value must be a 2x1 vector of type single or double.</entry>
    <entry key="GridSizeRange">Value must be a 2x1 vector of type single or double.</entry>
    <entry key="GridSizeSize">Value must be a 2x1 vector of type single or double.</entry>
    <entry key="GridSizeType">Value must be a 2x1 vector of type single or double.</entry>
    <entry key="GridWeightPredicate">Value must be a 1xN vector of type single or double.</entry>
    <entry key="GridWeightRange">Value must be a 1xN vector of type single or double.</entry>
    <entry key="GridWeightSize">Value must be a 1xN vector of type single or double.</entry>
    <entry key="GridWeightType">Value must be a 1xN vector of type single or double.</entry>
    <entry key="ImageXYDataLimits">Infinite and missing values, such as NaN, NaT, and &lt;undefined&gt;, are not valid XData or YData.</entry>
    <entry key="ImageXYDataPredicate">Value must be a scalar or vector of numeric, logical, datetime, duration, or categorical data.</entry>
    <entry key="ImageXYDataRange">Value must be a scalar or vector of numeric, logical, datetime, duration, or categorical data.</entry>
    <entry key="ImageXYDataSize">Value must be a scalar or vector of numeric, logical, datetime, duration, or categorical data.</entry>
    <entry key="ImageXYDataType">Value must be a scalar or vector of numeric, logical, datetime, duration, or categorical data.</entry>
    <entry key="IndexVectorPredicate">Value must be a vector of positive integers.</entry>
    <entry key="IndexVectorRange">Value must be a vector of positive integers.</entry>
    <entry key="IndexVectorSize">Value must be a vector of positive integers.</entry>
    <entry key="IndexVectorType">Value must be a vector of positive integers.</entry>
    <entry key="LimitsPositive">Value must be a 1x2 vector of positive numbers in which the second element is larger than the first.</entry>
    <entry key="LimitsPredicate">Value must be a 1x2 vector of numeric type in which the second element is larger than the first.</entry>
    <entry key="LimitsRange">Value must be a 1x2 vector of numeric type in which the second element is larger than the first.</entry>
    <entry key="LimitsSize">Value must be a 1x2 vector of numeric type in which the second element is larger than the first.</entry>
    <entry key="LimitsType">Value must be a 1x2 vector of numeric type in which the second element is larger than the first.</entry>
    <entry key="LimitsWithInfsPredicate">Value must be a 1x2 vector of numeric type in which the second element is greater than the first element or is Inf.</entry>
    <entry key="LimitsWithInfsRange">Value must be a 1x2 vector of numeric type in which the second element is greater than the first element or is Inf.</entry>
    <entry key="LimitsWithInfsSize">Value must be a 1x2 vector of numeric type in which the second element is greater than the first element or is Inf.</entry>
    <entry key="LimitsWithInfsType">Value must be a 1x2 vector of numeric type in which the second element is greater than the first element or is Inf.</entry>
	<entry key="NColorPtrPredicate">Value must be either:\nan 2x3 array of type single or double\nan Nx3 array of type single or double between 0 and 1.</entry>
    <entry key="NColorPtrRange">Value must be either:\nan 2x3 array of type single or double\nan Nx3 array of type single or double between 0 and 1.</entry>
    <entry key="NColorPtrSize">Value must be either:\nan 2x3 array of type single or double\nan Nx3 array of type single or double between 0 and 1.</entry>
    <entry key="NColorPtrType">Value must be either:\nan 2x3 array of type single or double\nan Nx3 array of type single or double between 0 and 1.</entry>
    <entry key="Numeric2D3DMatrixPredicate">Value must be an array of numeric type with 3 or fewer dimensions.</entry>
    <entry key="Numeric2D3DMatrixRange">Value must be an array of numeric type with 3 or fewer dimensions.</entry>
    <entry key="Numeric2D3DMatrixSize">Value must be an array of numeric type with 3 or fewer dimensions.</entry>
    <entry key="Numeric2D3DMatrixType">Value must be an array of numeric type with 3 or fewer dimensions.</entry>
    <entry key="NumericMatrixPredicate">Value must be a scalar, vector or array of numeric type.</entry>
    <entry key="NumericMatrixRange">Value must be a scalar, vector or array of numeric type.</entry>
    <entry key="NumericMatrixSize">Value must be a scalar, vector or array of numeric type.</entry>
    <entry key="NumericMatrixType">Value must be a scalar, vector or array of numeric type.</entry>
    <entry key="NumericOrLogicalMatrixPredicate">Value must be a scalar, vector or array of numeric or logical type.</entry>
    <entry key="NumericOrLogicalMatrixRange">Value must be a scalar, vector or array of numeric or logical type.</entry>
    <entry key="NumericOrLogicalMatrixSize">Value must be a scalar, vector or array of numeric or logical type.</entry>
    <entry key="NumericOrLogicalMatrixType">Value must be a scalar, vector or array of numeric or logical type.</entry>
    <entry key="ParallelPrimitiveVertexDataPredicate">Value must be a 3xN array of type single.</entry>
    <entry key="ParallelPrimitiveVertexDataRange">Value must be a 3xN array of type single.</entry>
    <entry key="ParallelPrimitiveVertexDataSize">Value must be a 3xN array of type single.</entry>
    <entry key="ParallelPrimitiveVertexDataType">Value must be a 3xN array of type single.</entry>
    <entry key="ParallelPrimitiveStripDataPredicate">Value must be a 1xN vector of type uint32 in which all values are greater than 0.</entry>
    <entry key="ParallelPrimitiveStripDataRange">Value must be a 1xN vector of type uint32 in which all values are greater than 0.</entry>
    <entry key="ParallelPrimitiveStripDataSize">Value must be a 1xN vector of type uint32 in which all values are greater than 0.</entry>
    <entry key="ParallelPrimitiveStripDataType">Value must be a 1xN vector of type uint32 in which all values are greater than 0.</entry>
    <entry key="PatchFacesPredicate">Value must be of numeric type and greater than 1.</entry>
    <entry key="PatchFacesRange">Value must be of numeric type and greater than 1.</entry>
    <entry key="PatchFacesSize">Value must be of numeric type and greater than 1.</entry>
    <entry key="PatchFacesType">Value must be of numeric type and greater than 1.</entry>
    <entry key="PatchFaceVertexAlphaDataPredicate">Value must be an Mx1 vector of alpha values or alpha map indices.</entry>
    <entry key="PatchFaceVertexAlphaDataRange">Value must be an Mx1 vector of alpha values or alpha map indices.</entry>
    <entry key="PatchFaceVertexAlphaDataSize">Value must be an Mx1 vector of alpha values or alpha map indices.</entry>
    <entry key="PatchFaceVertexAlphaDataType">Value must be an Mx1 vector of alpha values or alpha map indices.</entry>
    <entry key="PatchFaceVertexCDataPredicate">Value must be an Nx1 or Nx3 array of numeric type.</entry>
    <entry key="PatchFaceVertexCDataRange">Value must be an Nx1 or Nx3 array of numeric type.</entry>
    <entry key="PatchFaceVertexCDataSize">Value must be an Nx1 or Nx3 array of numeric type.</entry>
    <entry key="PatchFaceVertexCDataType">Value must be an Nx1 or Nx3 array of numeric type.</entry>
    <entry key="PatchNormalsPredicate">Value must be an Nx3 array of numeric type where N is the number of rows of patch faces.</entry>
    <entry key="PatchNormalsRange">Value must be an Nx3 array of numeric type where N is the number of rows of patch faces.</entry>
    <entry key="PatchNormalsSize">Value must be an Nx3 array of numeric type where N is the number of rows of patch faces.</entry>
    <entry key="PatchNormalsType">Value must be an Nx3 array of numeric type where N is the number of rows of patch faces.</entry>
    <entry key="PatchVerticesPredicate">Value must be a 1x2 or 1x3 vector of numeric type.</entry>
    <entry key="PatchVerticesRange">Value must be a 1x2 or 1x3 vector of numeric type.</entry>
    <entry key="PatchVerticesSize">Value must be a 1x2 or 1x3 vector of numeric type.</entry>
    <entry key="PatchVerticesType">Value must be a 1x2 or 1x3 vector of numeric type.</entry>
    <entry key="PointerShapeCDataPredicate">Value must be a 16x16 or 32x32 array containing only the values 1, 2 and NaN.</entry>
    <entry key="PointerShapeCDataRange">Value must be a 16x16 or 32x32 array containing only the values 1, 2 and NaN.</entry>
    <entry key="PointerShapeCDataSize">Value must be a 16x16 or 32x32 array containing only the values 1, 2 and NaN.</entry>
    <entry key="PointerShapeCDataType">Value must be a 16x16 or 32x32 array containing only the values 1, 2 and NaN.</entry>
    <entry key="PointerShapeHotSpotPredicate">Value must be a 1x2 vector of type double in which both values are in the range [1 32].</entry>
    <entry key="PointerShapeHotSpotRange">Value must be a 1x2 vector of type double in which both values are in the range [1 32].</entry>
    <entry key="PointerShapeHotSpotSize">Value must be a 1x2 vector of type double in which both values are in the range [1 32].</entry>
    <entry key="PointerShapeHotSpotType">Value must be a 1x2 vector of type double in which both values are in the range [1 32].</entry>
    <entry key="PolygonClipNodeDataSize">Value must be a 2xN array of type single.</entry>
    <entry key="PolygonClipNodeDataType">Value must be a 2xN array of type single.</entry>
    <entry key="PrimitiveColorDataPredicate">Value must be one of the following:\nTruecolor - a 4xN array of type uint8\nColormapped - a 1xN vector of type single\nTexturemapped - a 2xN array of type single.</entry>
    <entry key="PrimitiveColorDataRange">Value must be one of the following:\nTruecolor - a 4xN array of type uint8\nColormapped - a 1xN vector of type single\nTexturemapped - a 2xN array of type single.</entry>
    <entry key="PrimitiveColorDataSize">Value must be one of the following:\nTruecolor - a 4xN array of type uint8\nColormapped - a 1xN vector of type single\nTexturemapped - a 2xN array of type single.</entry>
    <entry key="PrimitiveColorDataType">Value must be one of the following:\nTruecolor - a 4xN array of type uint8\nColormapped - a 1xN vector of type single\nTexturemapped - a 2xN array of type single.</entry>
    <entry key="PrimitiveNormalsDataPredicate">Value must be a 3xN array of type single in the range [-1 1].</entry>
    <entry key="PrimitiveNormalsDataRange">Value must be a 3xN array of type single in the range [-1 1].</entry>
    <entry key="PrimitiveNormalsDataSize">Value must be a 3xN array of type single in the range [-1 1].</entry>
    <entry key="PrimitiveNormalsDataType">Value must be a 3xN array of type single in the range [-1 1].</entry>
    <entry key="PrimitiveRGBADataPredicate">Value must be a 4xN array of type uint8.</entry>
    <entry key="PrimitiveRGBADataRange">Value must be a 4xN array of type uint8.</entry>
    <entry key="PrimitiveRGBADataSize">Value must be a 4xN array of type uint8.</entry>
    <entry key="PrimitiveRGBADataType">Value must be a 4xN array of type uint8.</entry>
    <entry key="PrimitiveRGBAScalarPredicate">Value must be a 4x1 array of type uint8.</entry>
    <entry key="PrimitiveRGBAScalarRange">Value must be a 4x1 array of type uint8.</entry>
    <entry key="PrimitiveRGBAScalarSize">Value must be a 4x1 array of type uint8.</entry>
    <entry key="PrimitiveRGBAScalarType">Value must be a 4x1 array of type uint8.</entry>
    <entry key="PrimitiveStripDataPredicate">Value must be a 1xN vector of type uint32 in which all values are greater than 0.</entry>
    <entry key="PrimitiveStripDataRange">Value must be a 1xN vector of type uint32 in which all values are greater than 0.</entry>
    <entry key="PrimitiveStripDataSize">Value must be a 1xN vector of type uint32 in which all values are greater than 0.</entry>
    <entry key="PrimitiveStripDataType">Value must be a 1xN vector of type uint32 in which all values are greater than 0.</entry>
    <entry key="PrimitiveVertexDataPredicate">Value must be a 3xN array of type single.</entry>
    <entry key="PrimitiveVertexDataRange">Value must be a 3xN array of type single.</entry>
    <entry key="PrimitiveVertexDataSize">Value must be a 3xN array of type single.</entry>
    <entry key="PrimitiveVertexDataType">Value must be a 3xN array of type single.</entry>
    <entry key="PrimitiveVertexIndicesPredicate">Value must be a 1xN vector of type uint32.</entry>
    <entry key="PrimitiveVertexIndicesRange">Value must be a 1xN vector of type uint32.</entry>
    <entry key="PrimitiveVertexIndicesSize">Value must be a 1xN vector of type uint32.</entry>
    <entry key="PrimitiveVertexIndicesType">Value must be a 1xN vector of type uint32.</entry>
    <entry key="PrimitiveAlignmentDataPredicate">Value must be a vector of type single.</entry>
    <entry key="PrimitiveAlignmentDataRange">Value must be a vector of type single.</entry>
    <entry key="PrimitiveAlignmentDataSize">Value must be a vector of type single.</entry>
    <entry key="PrimitiveAlignmentDataType">Value must be a vector of type single.</entry>
    <entry key="ScribePositionPredicate">Value must be a 1x4 vector of numeric type.</entry>
    <entry key="ScribePositionRange">Value must be a 1x4 vector of numeric type.</entry>
    <entry key="ScribePositionSize">Value must be a 1x4 vector of numeric type.</entry>
    <entry key="ScribePositionType">Value must be a 1x4 vector of numeric type.</entry>
    <entry key="StripDataPredicate">This is a positive error message for StripData.</entry>
    <entry key="SurfaceCDataPredicate">Value must be a 2D or 3D array of numeric type.</entry>
    <entry key="SurfaceCDataRange">Value must be a 2D or 3D array of numeric type.</entry>
    <entry key="SurfaceCDataSize">Value must be a 2D or 3D array of numeric type.</entry>
    <entry key="SurfaceCDataType">Value must be a 2D or 3D array of numeric type.</entry>
    <entry key="SurfaceVertexNormalsPredicate">Value must be an NxMx3 array of type single or double.</entry>
    <entry key="SurfaceVertexNormalsRange">Value must be an NxMx3 array of type single or double.</entry>
    <entry key="SurfaceVertexNormalsSize">Value must be an NxMx3 array of type single or double.</entry>
    <entry key="SurfaceVertexNormalsType">Value must be an NxMx3 array of type single or double.</entry>
    <entry key="SurfaceXYDataPredicate">Value must be a vector or 2D array of numeric type.</entry>
    <entry key="SurfaceXYDataRange">Value must be a vector or 2D array of numeric type.</entry>
    <entry key="SurfaceXYDataSize">Value must be a vector or 2D array of numeric type.</entry>
    <entry key="SurfaceXYDataType">Value must be a vector or 2D array of numeric type.</entry>
    <entry key="TableCellSelectionPredicate">Value must be a Nx2 array of type double.</entry>
    <entry key="TableCellSelectionRange">Value must be a Nx2 array of type double.</entry>
    <entry key="TableCellSelectionSize">Value must be a Nx2 array of type double.</entry>
    <entry key="TableCellSelectionType">Value must be a Nx2 array of type double.</entry>
    <entry key="TextPositionPredicate">Value must be a 2 or 3 element vector of numeric or logical type.</entry>
    <entry key="TextPositionRange">Value must be a 2 or 3 element vector of numeric or logical type.</entry>
    <entry key="TextPositionSize">Value must be a 2 or 3 element vector of numeric or logical type.</entry>
    <entry key="TextPositionType">Value must be a 2 or 3 element vector of numeric or logical type.</entry>
    <entry key="TextureColorDataPredicate">Value must be a 4xMxN array of type uint8.</entry>
    <entry key="TextureColorDataRange">Value must be a 4xMxN array of type uint8.</entry>
    <entry key="TextureColorDataSize">Value must be a 4xMxN array of type uint8.</entry>
    <entry key="TextureColorDataType">Value must be a 4xMxN array of type uint8.</entry>
    <entry key="TickPredicate">Value must be a numeric vector whose values increase.</entry>
    <entry key="TickRange">Value must be a numeric vector whose values increase.</entry>
    <entry key="TickSize">Value must be a numeric vector whose values increase.</entry>
    <entry key="TickType">Value must be a numeric vector whose values increase.</entry>
    <entry key="TickLengthPredicate">Value must be a 2x1 vector of numeric type.</entry>
    <entry key="TickLengthRange">Value must be a 2x1 vector of numeric type.</entry>
    <entry key="TickLengthSize">Value must be a 2x1 vector of numeric type.</entry>
    <entry key="TickLengthType">Value must be a 2x1 vector of numeric type.</entry>
    <entry key="TipInterpolationFactorTypePredicate">Value must be a scalar of type single or double in the range [0 1].</entry>
    <entry key="TipInterpolationFactorTypeRange">Value must be a scalar of type single or double in the range [0 1].</entry>
    <entry key="TipInterpolationFactorTypeSize">Value must be a scalar of type single or double in the range [0 1].</entry>
    <entry key="TipInterpolationFactorTypeType">Value must be a scalar of type single or double in the range [0 1].</entry>
    <entry key="VectorDataPredicate">Value must be a vector of numeric type.</entry>
    <entry key="VectorDataRange">Value must be a vector of numeric type.</entry>
    <entry key="VectorDataSize">Value must be a vector of numeric type.</entry>
    <entry key="VectorDataType">Value must be a vector of numeric type.</entry>
    <entry key="PositiveVectorDataSize">Value must be a vector of positive numeric type.</entry>
    <entry key="PositiveVectorDataPredicate">Value must be a vector of positive numeric type.</entry>
    <entry key="PositiveVectorDataType">Value must be a vector of positive numeric type.</entry>
    <entry key="PositiveOrNanVectorDataSize">Value must be a vector of positive numeric type or nan.</entry>
    <entry key="PositiveOrNanVectorDataPredicate">Value must be a vector of positive numeric type or nan.</entry>
    <entry key="PositiveOrNanVectorDataType">Value must be a vector of positive numeric type or nan.</entry>
    <entry key="TiledGridSizeType">Value must be a two element vector of integers less than intmax.</entry>
    <entry key="TiledGridSizeSize">Value must be a two element vector of integers less than intmax.</entry>
    <entry key="TiledGridSizePredicate">Value must be a two element vector of integers less than intmax.</entry>
  </message>
</rsccat>
