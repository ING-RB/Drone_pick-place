<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright 2024 The MathWorks, Inc.-->

<rsccat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" locale="ja_JP" product="Slvnv" xsi:noNamespaceSchemaLocation="../../resources/schema/msgcat.xsd">
  <message>
    <entry key="MSG_SF_HIST_CHILD_CALL_A">ヒストリ テスト</entry>
    <entry key="MSG_SF_HIST_CHILD_CALL_S">ヒストリ サブステート</entry>
    <entry key="MSG_SF_HIST_CHILD_CALL_D">ヒストリに基づき以前にアクティブであったサブステートに移行</entry>
    <entry key="MSG_SF_STATE_ON_DECISION_A">オン判定</entry>
    <entry key="MSG_SF_STATE_ON_DECISION_S">イベント "{0}"</entry>
    <entry key="MSG_SF_STATE_ON_DECISION_D">トリガー イベント "{0}"</entry>
    <entry key="MSG_SF_TRANSITION_TEST_A">テスト</entry>
    <entry key="MSG_SF_TRANSITION_TEST_S">遷移</entry>
    <entry key="MSG_SF_TRANSITION_TEST_D">遷移のトリガー式</entry>
    <entry key="MSG_SF_TRANS_PRED_D">条件 {0}、"{1}"</entry>
    <entry key="MSG_SF_ACTIVE_CHILD_CALL_A">実行された子</entry>
    <entry key="MSG_SF_ACTIVE_CHILD_CALL_S">実行されたサブステート</entry>
    <entry key="MSG_SF_ACTIVE_CHILD_CALL_D">実行されたサブステート</entry>
    <entry key="MSG_SF_INACTIVE_BEFORE_EXIT_A">子の終了</entry>
    <entry key="MSG_SF_INACTIVE_BEFORE_EXIT_S">間接的に終了したサブステート</entry>
    <entry key="MSG_SF_INACTIVE_BEFORE_EXIT_D">親の終了時に終了したサブステート</entry>
    <entry key="MSG_SF_ACTIVE_CHILD_AT_EXIT_A">子の終了</entry>
    <entry key="MSG_SF_ACTIVE_CHILD_AT_EXIT_S">間接的に終了したサブステート</entry>
    <entry key="MSG_SF_ACTIVE_CHILD_AT_EXIT_D">親の終了時に終了したサブステート</entry>
    <entry key="MSG_SF_ACTIVE_CHILD_EXIT_A">子の終了</entry>
    <entry key="MSG_SF_ACTIVE_CHILD_EXIT_S">間接的に終了したサブステート</entry>
    <entry key="MSG_SF_ACTIVE_CHILD_EXIT_D">親の終了時に終了したサブステート</entry>
    <entry key="MSG_SL_TESTOBJECTIVE_VECT_D">入力 ({0})</entry>
    <entry key="MSG_SL_SATURATE_ON_INTEGER_OVERFLOW_S">整数オーバーフローで飽和</entry>
    <entry key="MSG_SL_SATURATE_ON_INTEGER_OVERFLOW_D">整数オーバーフローで飽和</entry>
    <entry key="MSG_SL_BLOCK_COVERAGE_S">実行されたブロック</entry>
    <entry key="MSG_SL_BLOCK_COVERAGE_D">実行されたブロック</entry>
    <entry key="MSG_SL_ABSVAL_SCAL_D">入力 {0} 0</entry>
    <entry key="MSG_SL_ABSVAL_VECT_D">入力 ({0}) {1} 0</entry>
    <entry key="MSG_SL_ABSVAL_VECTC_D">入力(:) {0} 0</entry>
    <entry key="MSG_SL_RELATIONALOP_SCAL_S">入力 1 {0} 入力 2</entry>
    <entry key="MSG_SL_RELATIONALOP_SCAL_D">入力 1 {0} 入力 2</entry>
    <entry key="MSG_SL_RELATIONALOP_VEC_A">入力 1 ({0}) {1} 入力 2 ({2})</entry>
    <entry key="MSG_SL_RELATIONALOP_VEC_S">入力 1 ({0}) {1} 入力 2 ({2})</entry>
    <entry key="MSG_SL_RELATIONALOP_VEC_D">入力 1 ({0}) {1} 入力 2 ({2})</entry>
    <entry key="MSG_SL_RELATIONALOP_VEC_SCAL_A">入力 1 ({0}) {1} 入力 2</entry>
    <entry key="MSG_SL_RELATIONALOP_VEC_SCAL_S">入力 1 ({0}) {1} 入力 2</entry>
    <entry key="MSG_SL_RELATIONALOP_VEC_SCAL_D">入力 1 ({0}) {1} 入力 2</entry>
    <entry key="MSG_SL_RELATIONALOP_SCAL_VEC_A">入力 1 {0} 入力 2 ({1})</entry>
    <entry key="MSG_SL_RELATIONALOP_SCAL_VEC_S">入力 1 {0} 入力 2 ({1})</entry>
    <entry key="MSG_SL_RELATIONALOP_SCAL_VEC_D">入力 1 {0} 入力 2 ({1})</entry>
    <entry key="MSG_SL_RELATIONALOP_COND_UNARY_A">入力 1 {0}</entry>
    <entry key="MSG_SL_RELATIONALOP_COND_UNARY_S">入力 1 {0}</entry>
    <entry key="MSG_SL_RELATIONALOP_COND_UNARY_D">入力 1 {0}</entry>
    <entry key="MSG_SL_RELATIONALOP_COND_UNARY_VEC_A">入力 1 ({0}) {1}</entry>
    <entry key="MSG_SL_RELATIONALOP_COND_UNARY_VEC_S">入力 1 ({0}) {1}</entry>
    <entry key="MSG_SL_RELATIONALOP_COND_UNARY_VEC_D">入力 1 ({0}) {1}</entry>
    <entry key="MSG_SL_RELAY_ON_SCAL_A">オンにする</entry>
    <entry key="MSG_SL_RELAY_ON_SCAL_D">入力 {0} オンのしきい値</entry>
    <entry key="MSG_SL_RELAY_ON_VECTU_A">オンにする</entry>
    <entry key="MSG_SL_RELAY_ON_VECTU_D">入力 ({0}) {1} オンのしきい値</entry>
    <entry key="MSG_SL_RELAY_ON_VECTP_A">オンにする</entry>
    <entry key="MSG_SL_RELAY_ON_VECTP_D">入力 {0} オンのしきい値 ({1})</entry>
    <entry key="MSG_SL_RELAY_ON_VECTUP_A">オンにする</entry>
    <entry key="MSG_SL_RELAY_ON_VECTUP_D">入力 ({0}) {1} オンのしきい値 ({2})</entry>
    <entry key="MSG_SL_RELAY_OFF_SCAL_A">オフにする</entry>
    <entry key="MSG_SL_RELAY_OFF_SCAL_D">入力 {0} オフのしきい値</entry>
    <entry key="MSG_SL_RELAY_OFF_VECTU_A">オフにする</entry>
    <entry key="MSG_SL_RELAY_OFF_VECTU_D">入力 ({0}) {1} オフのしきい値</entry>
    <entry key="MSG_SL_RELAY_OFF_VECTP_A">オフにする</entry>
    <entry key="MSG_SL_RELAY_OFF_VECTP_D">入力 {0} オフのしきい値 ({1})</entry>
    <entry key="MSG_SL_RELAY_OFF_VECTUP_A">オフにする</entry>
    <entry key="MSG_SL_RELAY_OFF_VECTUP_D">入力 ({0}) {1} オフのしきい値 ({2})</entry>
    <entry key="MSG_SL_SATURATE_UL_SCAL_A">UL より上</entry>
    <entry key="MSG_SL_SATURATE_UL_SCAL_D">入力 {0} 上限</entry>
    <entry key="MSG_SL_SATURATE_UL_VECTU_A">UL より上</entry>
    <entry key="MSG_SL_SATURATE_UL_VECTU_D">入力 ({0}) {1} 上限</entry>
    <entry key="MSG_SL_SATURATE_UL_VECTP_A">UL より上</entry>
    <entry key="MSG_SL_SATURATE_UL_VECTP_D">入力 {0} 上限 ({1})</entry>
    <entry key="MSG_SL_SATURATE_UL_VECTUP_A">UL より上</entry>
    <entry key="MSG_SL_SATURATE_UL_VECTUP_D">入力 ({0}) {1} 上限 ({2})</entry>
    <entry key="MSG_SL_SATURATE_LL_SCAL_A">LL より上</entry>
    <entry key="MSG_SL_SATURATE_LL_SCAL_D">入力 {0} 下限</entry>
    <entry key="MSG_SL_SATURATE_LL_VECTU_A">LL より上</entry>
    <entry key="MSG_SL_SATURATE_LL_VECTU_D">入力 ({0}) {1} 下限</entry>
    <entry key="MSG_SL_SATURATE_LL_VECTP_A">LL より上</entry>
    <entry key="MSG_SL_SATURATE_LL_VECTP_D">入力 {0} 下限 ({1})</entry>
    <entry key="MSG_SL_SATURATE_LL_VECTUP_A">LL より上</entry>
    <entry key="MSG_SL_SATURATE_LL_VECTUP_D">入力 ({0}) {1} 下限 ({2})</entry>
    <entry key="MSG_SL_DEADZONE_UL_SCAL_A">UL より上</entry>
    <entry key="MSG_SL_DEADZONE_UL_SCAL_D">入力 {0} 上限</entry>
    <entry key="MSG_SL_DEADZONE_UL_VECTU_A">UL より上</entry>
    <entry key="MSG_SL_DEADZONE_UL_VECTU_D">入力 ({0}) {1} 上限</entry>
    <entry key="MSG_SL_DEADZONE_UL_VECTP_A">UL より上</entry>
    <entry key="MSG_SL_DEADZONE_UL_VECTP_D">入力 {0} 上限 ({1})</entry>
    <entry key="MSG_SL_DEADZONE_UL_VECTUP_A">UL より上</entry>
    <entry key="MSG_SL_DEADZONE_UL_VECTUP_D">入力 ({0}) {1} 上限 ({2})</entry>
    <entry key="MSG_SL_DEADZONE_LL_SCAL_A">LL より上</entry>
    <entry key="MSG_SL_DEADZONE_LL_SCAL_D">入力 {0} 下限</entry>
    <entry key="MSG_SL_DEADZONE_LL_VECTU_A">LL より上</entry>
    <entry key="MSG_SL_DEADZONE_LL_VECTU_D">入力 ({0}) {1} 下限</entry>
    <entry key="MSG_SL_DEADZONE_LL_VECTP_A">LL より上</entry>
    <entry key="MSG_SL_DEADZONE_LL_VECTP_D">入力 {0} 下限 ({1})</entry>
    <entry key="MSG_SL_DEADZONE_LL_VECTUP_A">LL より上</entry>
    <entry key="MSG_SL_DEADZONE_LL_VECTUP_D">入力 ({0}) {1} 下限 ({2})</entry>
    <entry key="MSG_SL_DINTEGRATOR_RESET_SCAL_A">リセット</entry>
    <entry key="MSG_SL_DINTEGRATOR_RESET_SCAL_S">リセット</entry>
    <entry key="MSG_SL_DINTEGRATOR_RESET_SCAL_D">リセット</entry>
    <entry key="MSG_SL_DINTEGRATOR_RESET_VECT_A">リセット [i]</entry>
    <entry key="MSG_SL_DINTEGRATOR_RESET_VECT_S">リセット [{0}]</entry>
    <entry key="MSG_SL_DINTEGRATOR_RESET_VECT_D">リセット ({0})</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_SCAL_A">UL より上</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_SCAL_D">積分結果 &gt;= 上限</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_VECTU_A">UL より上</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_VECTU_D">積分結果 ({0}) &gt;= 上限</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_VECTP_A">UL より上</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_VECTP_D">積分結果 &gt;= 上限 ({0})</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_VECTUP_A">UL より上</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_VECTUP_D">積分結果 ({0}) &gt;= 上限 ({1})</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_SCAL_A">LL より下</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_SCAL_D">積分結果 &lt;= 下限</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_VECTU_A">LL より下</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_VECTU_D">積分結果 ({0}) &lt;= 下限</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_VECTP_A">LL より下</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_VECTP_D">積分結果 &lt;= 下限 ({0})</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_VECTUP_A">LL より下</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_VECTUP_D">積分結果 ({0}) &lt;= 下限 ({1})</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_STRICT_SCAL_A">UL より上</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_STRICT_SCAL_D">積分結果 &gt; 上限</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_STRICT_VECTU_A">UL より上</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_STRICT_VECTU_D">積分結果 ({0}) &gt; 上限</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_STRICT_VECTP_A">UL より上</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_STRICT_VECTP_D">積分結果 &gt; 上限 ({0})</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_STRICT_VECTUP_A">UL より上</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_STRICT_VECTUP_D">積分結果 ({0}) &gt; 上限 ({1})</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_STRICT_SCAL_A">LL より下</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_STRICT_SCAL_D">積分結果 &lt; 下限</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_STRICT_VECTU_A">LL より下</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_STRICT_VECTU_D">積分結果 ({0}) &lt; 下限</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_STRICT_VECTP_A">LL より下</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_STRICT_VECTP_D">積分結果 &lt; 下限 ({0})</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_STRICT_VECTUP_A">LL より下</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_STRICT_VECTUP_D">積分結果 ({0}) &lt; 下限 ({1})</entry>
    <entry key="MSG_SL_RATELIMITER_UL_SCAL_A">UL より上</entry>
    <entry key="MSG_SL_RATELIMITER_UL_SCAL_D">スルー レート {0} 上限</entry>
    <entry key="MSG_SL_RATELIMITER_UL_VECTU_A">UL より上</entry>
    <entry key="MSG_SL_RATELIMITER_UL_VECTU_D">スルー レート ({0}) {1} 上限</entry>
    <entry key="MSG_SL_RATELIMITER_UL_VECTP_A">UL より上</entry>
    <entry key="MSG_SL_RATELIMITER_UL_VECTP_D">スルー レート {0} 上限 ({1})</entry>
    <entry key="MSG_SL_RATELIMITER_UL_VECTUP_A">UL より上</entry>
    <entry key="MSG_SL_RATELIMITER_UL_VECTUP_D">スルー レート ({0}) {1} 上限 ({2})</entry>
    <entry key="MSG_SL_RATELIMITER_LL_SCAL_A">LL より上</entry>
    <entry key="MSG_SL_RATELIMITER_LL_SCAL_D">スルー レート {0} 下限</entry>
    <entry key="MSG_SL_RATELIMITER_LL_VECTU_A">LL より上</entry>
    <entry key="MSG_SL_RATELIMITER_LL_VECTU_D">スルー レート ({0}) {1} 下限</entry>
    <entry key="MSG_SL_RATELIMITER_LL_VECTP_A">LL より上</entry>
    <entry key="MSG_SL_RATELIMITER_LL_VECTP_D">スルー レート {0} 下限 ({1})</entry>
    <entry key="MSG_SL_RATELIMITER_LL_VECTUP_A">LL より上</entry>
    <entry key="MSG_SL_RATELIMITER_LL_VECTUP_D">スルー レート ({0}) {1} 下限 ({2})</entry>
    <entry key="MSG_SL_FCN_CONDITION_A">条件</entry>
    <entry key="MSG_SL_FCN_TEST_A">式</entry>
    <entry key="MSG_SL_FCN_TEST_S">式</entry>
    <entry key="MSG_SL_FCN_TEST_D">論理値</entry>
    <entry key="MSG_SL_LOGIC_SCAL_A">端子 i</entry>
    <entry key="MSG_SL_LOGIC_SCAL_S">端子 {0}</entry>
    <entry key="MSG_SL_LOGIC_SCAL_D">入力端子 {0}</entry>
    <entry key="MSG_SL_LOGIC_VECT_S">端子 {0}[{1}]</entry>
    <entry key="MSG_SL_LOGIC_VECT_D">入力端子 {0}({1})</entry>
    <entry key="MSG_SL_LOGIC_SCAL_OUT_S">出力</entry>
    <entry key="MSG_SL_LOGIC_SCAL_OUT_D">出力</entry>
    <entry key="MSG_SL_LOGIC_VECT_OUT_S">出力 [{0}]</entry>
    <entry key="MSG_SL_LOGIC_VECT_OUT_D">出力 ({0})</entry>
    <entry key="MSG_SL_LOGIC_DEC_SCAL_OUT_S">出力</entry>
    <entry key="MSG_SL_LOGIC_DEC_SCAL_OUT_D">出力</entry>
    <entry key="MSG_SL_LOGIC_DEC_VECT_OUT_S">出力 [{0}]</entry>
    <entry key="MSG_SL_LOGIC_DEC_VECT_OUT_D">出力 ({0})</entry>
    <entry key="MSG_SL_LOGIC_CASCMCDC_CONDITION">C{0} ({2} 内の {1})</entry>
    <entry key="MSG_SL_CMBLOGIC_SCAL_S">IF (入力)</entry>
    <entry key="MSG_SL_CMBLOGIC_SCAL_D">入力論理値</entry>
    <entry key="MSG_SL_CMBLOGIC_VECT_S">等価なインデックス</entry>
    <entry key="MSG_SL_CMBLOGIC_VECT_D">整数のインデックス値</entry>
    <entry key="MSG_SL_CMBLOGIC_ELM_S">入力 [{0}]</entry>
    <entry key="MSG_SL_CMBLOGIC_ELM_D">入力 ({0})</entry>
    <entry key="MSG_SL_CMBLOGIC_OUT_A">ケース i</entry>
    <entry key="MSG_SL_CMBLOGIC_OUT_S">{0} (入力 ={1})</entry>
    <entry key="MSG_SL_CMBLOGIC_OUT_D">入力 {1} に基づいて {0} を算出</entry>
    <entry key="MSG_SL_IF_SING_IF_D">入力論理値</entry>
    <entry key="MSG_SL_IF_MULT_IF_S">入力 {0}</entry>
    <entry key="MSG_SL_IF_MULT_IF_D">入力 {0} の "if" 条件</entry>
    <entry key="MSG_SL_IF_MULT_ELSEIF_D">入力 {0} の "elseif" 条件</entry>
    <entry key="MSG_SL_FOR_CHECK_S">ループ テスト</entry>
    <entry key="MSG_SL_FOR_CHECK_D">ループ条件</entry>
    <entry key="MSG_SL_LOOPEXEC_A">実行済み</entry>
    <entry key="MSG_SL_LOOPEXEC_S">実行済み</entry>
    <entry key="MSG_SL_LOOPEXEC_D">実行済み</entry>
    <entry key="MSG_SL_WHILE_WHILETEST_S">while 条件</entry>
    <entry key="MSG_SL_WHILE_WHILETEST_D">while ループ条件</entry>
    <entry key="MSG_SL_WHILE_DOWHILETEST_S">do-while 条件</entry>
    <entry key="MSG_SL_WHILE_DOWHILETEST_D">do-while ループ条件</entry>
    <entry key="MGG_SL_WHILE_MAXITERS_S">最大反復回数</entry>
    <entry key="MGG_SL_WHILE_MAXITERS_D">最大反復回数を超えました</entry>
    <entry key="MSG_SL_MINMAX_SCAL_S">出力</entry>
    <entry key="MSG_SL_MINMAX_SCAL_D">出力の判定ロジック</entry>
    <entry key="MSG_SL_MINMAX_VECT_S">出力 [{0}]</entry>
    <entry key="MSG_SL_MINMAX_VECT_D">出力要素 {0} の判定ロジック</entry>
    <entry key="MSG_SL_MIN_IDX_S">入力 {0}</entry>
    <entry key="MSG_SL_MIN_IDX_D">入力 {0} は最小です</entry>
    <entry key="MSG_SL_MAX_IDX_S">入力 {0}</entry>
    <entry key="MSG_SL_MAX_IDX_D">入力 {0} は最大です</entry>
    <entry key="MSG_SL_MIN_ELEM_IDX_S">入力要素 {0}</entry>
    <entry key="MSG_SL_MIN_ELEM_IDX_D">入力要素 {0} は最小です</entry>
    <entry key="MSG_SL_MAX_ELEM_IDX_S">入力要素 {0}</entry>
    <entry key="MSG_SL_MAX_ELEM_IDX_D">入力要素 {0} は最大です</entry>
    <entry key="MSG_SL_MIN_IDX_COLLAPSED_S">折りたたまれた次元にまたがる入力 {0}</entry>
    <entry key="MSG_SL_MIN_IDX_COLLAPSED_D">折りたたまれた次元にまたがる入力 {0} は最小です</entry>
    <entry key="MSG_SL_MAX_IDX_COLLAPSED_S">折りたたまれた次元にまたがる入力 {0}</entry>
    <entry key="MSG_SL_MAX_IDX_COLLAPSED_D">折りたたまれた次元にまたがる入力 {0} は最大です</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_SCAL_BEFORE_S">入力 {0} - min(入力 {0} の前の入力)</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_SCAL_BEFORE_D">入力 {0} - min(入力 {0} の前の入力)</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_SCAL_AFTER_S">入力 {0} - min(入力 {0} の後の入力)</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_SCAL_AFTER_D">入力 {0} - min(入力 {0} の後の入力)</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_SCAL_VECT_BEFORE_S">入力 {0} - min(入力 {0} の前の入力要素 {1})</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_SCAL_VECT_BEFORE_D">入力 {0} - min(入力 {0} の前の入力要素 {1})</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_SCAL_VECT_AFTER_S">入力 {0} - min(入力 {0} の後の入力要素 {1})</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_SCAL_VECT_AFTER_D">入力 {0} - min(入力 {0} の後の入力要素 {1})</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_VECT_VECT_BEFORE_S">入力 {0}({1}) - min(入力 {0} の前の入力要素 {1})</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_VECT_VECT_BEFORE_D">入力 {0}({1}) - min(入力 {0} の前の入力要素 {1})</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_VECT_VECT_AFTER_S">入力 {0}({1}) - min(入力 {0} の後の入力要素 {1})</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_VECT_VECT_AFTER_D">入力 {0}({1}) - min(入力 {0} の後の入力要素 {1})</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_SCAL_BEFORE_S">入力 {0} - max(入力 {0} の前の入力)</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_SCAL_BEFORE_D">入力 {0} - max(入力 {0} の前の入力)</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_SCAL_AFTER_S">入力 {0} - max(入力 {0} の後の入力)</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_SCAL_AFTER_D">入力 {0} - max(入力 {0} の後の入力)</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_SCAL_VECT_BEFORE_S">入力 {0} - max(入力 {0} の前の入力要素 {1})</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_SCAL_VECT_BEFORE_D">入力 {0} - max(入力 {0} の前の入力要素 {1})</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_SCAL_VECT_AFTER_S">入力 {0} - max(入力 {0} の後の入力要素 {1})</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_SCAL_VECT_AFTER_D">入力 {0} - max(入力 {0} の後の入力要素 {1})</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_VECT_VECT_BEFORE_S">入力 {0}({1}) - max(入力 {0} の前の入力要素 {1})</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_VECT_VECT_BEFORE_D">入力 {0}({1}) - max(入力 {0} の前の入力要素 {1})</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_VECT_VECT_AFTER_S">入力 {0}({1}) - max(入力 {0} の後の入力要素 {1})</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_VECT_VECT_AFTER_D">入力 {0}({1}) - max(入力 {0} の後の入力要素 {1})</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_AFTER_COLLAPSED_S">入力要素 {0} - min(折りたたまれた次元にまたがる入力要素 {0} の後の入力要素)</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_AFTER_COLLAPSED_D">入力要素 {0} - min(折りたたまれた次元にまたがる入力要素 {0} の後の入力要素)</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_BEFORE_COLLAPSED_S">入力要素 {0} - min(折りたたまれた次元にまたがる入力要素 {0} の前の入力要素)</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_BEFORE_COLLAPSED_D">入力要素 {0} - min(折りたたまれた次元にまたがる入力要素 {0} の前の入力要素)</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_AFTER_COLLAPSED_S">入力要素 {0} - max(折りたたまれた次元にまたがる入力要素 {0} の後の入力要素)</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_AFTER_COLLAPSED_D">入力要素 {0} - max(折りたたまれた次元にまたがる入力要素 {0} の後の入力要素)</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_BEFORE_COLLAPSED_S">入力要素 {0} - max(折りたたまれた次元にまたがる入力要素 {0} の前の入力要素)</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_BEFORE_COLLAPSED_D">入力要素 {0} - max(折りたたまれた次元にまたがる入力要素 {0} の前の入力要素)</entry>
    <entry key="MSG_SL_SIGNUM_SCAL_S">出力</entry>
    <entry key="MSG_SL_SIGNUM_SCAL_D">出力の判定ロジック</entry>
    <entry key="MSG_SL_SIGNUM_VECT_S">出力 [{0}]</entry>
    <entry key="MSG_SL_SIGNUM_VECT_D">出力要素 {0} の判定ロジック</entry>
    <entry key="MSG_SL_SIGNUM_OUTCOME_NEGATIVE_S">-1</entry>
    <entry key="MSG_SL_SIGNUM_OUTCOME_NEGATIVE_D">入力は負</entry>
    <entry key="MSG_SL_SIGNUM_OUTCOME_ZERO_S">0</entry>
    <entry key="MSG_SL_SIGNUM_OUTCOME_ZERO_D">入力は 0</entry>
    <entry key="MSG_SL_SIGNUM_OUTCOME_POSITIVE_S">1</entry>
    <entry key="MSG_SL_SIGNUM_OUTCOME_POSITIVE_D">入力は正</entry>
    <entry key="MSG_SL_SIGNUM_REL_SCAL_S">入力 {0} 0 </entry>
    <entry key="MSG_SL_SIGNUM_REL_SCAL_D">入力 {0} 0</entry>
    <entry key="MSG_SL_SIGNUM_REL_VECT_S">入力 ({0}) {1} 0 </entry>
    <entry key="MSG_SL_SIGNUM_REL_VECT_D">入力 ({0}) {1} 0</entry>
    <entry key="MSG_SL_ASINACOS_SCAL_S">出力</entry>
    <entry key="MSG_SL_ASINACOS_SCAL_D">出力の判定ロジックの</entry>
    <entry key="MSG_SL_ASINACOS_VECT_S">出力 [{0}]</entry>
    <entry key="MSG_SL_ASINACOS_VECT_D">出力要素 {0} の判定ロジックの</entry>
    <entry key="MSG_SL_ASINACOS_OUTCOME_MINUSONE_S">-1 より小さい</entry>
    <entry key="MSG_SL_ASINACOS_OUTCOME_MINUSONE_D">入力が -1 より小さい</entry>
    <entry key="MSG_SL_ASINACOS_OUTCOME_NUMBER_S">-1 ～ 1 の間</entry>
    <entry key="MSG_SL_ASINACOS_OUTCOME_NUMBER_D">入力が -1 ～ 1 の間</entry>
    <entry key="MSG_SL_ASINACOS_OUTCOME_PLUSONE_S">1 より大きい</entry>
    <entry key="MSG_SL_ASINACOS_OUTCOME_PLUSONE_D">入力が 1 より大きい</entry>
    <entry key="MSG_SL_ASINACOS_REL_SCAL_MINUSONE_S">入力 {0} (-1) </entry>
    <entry key="MSG_SL_ASINACOS_REL_SCAL_MINUSONE_D">入力 {0} (-1)</entry>
    <entry key="MSG_SL_ASINACOS_REL_SCAL_PLUSONE_S">入力 {0} 1 </entry>
    <entry key="MSG_SL_ASINACOS_REL_SCAL_PLUSONE_D">入力 {0} 1</entry>
    <entry key="MSG_SL_ASINACOS_REL_VECT_MINUSONE_S">入力 ({0}) {1} (-1) </entry>
    <entry key="MSG_SL_ASINACOS_REL_VECT_MINUSONE_D">入力 ({0}) {1} (-1)</entry>
    <entry key="MSG_SL_ASINACOS_REL_VECT_PLUSONE_S">入力 ({0}) {1} 1 </entry>
    <entry key="MSG_SL_ASINACOS_REL_VECT_PLUSONE_D">入力 ({0}) {1} 1</entry>
    <entry key="MSG_SL_SUBSYS_FCALL_S">関数呼び出し</entry>
    <entry key="MSG_SL_SUBSYS_FCALL_D">関数呼び出し</entry>
    <entry key="MSG_SL_SUBSYS_ENBLS_S">有効</entry>
    <entry key="MSG_SL_SUBSYS_ENBLS_D">イネーブル制御が有効</entry>
    <entry key="MSG_SL_SUBSYS_ENBLV_S">ベクトル イネーブル</entry>
    <entry key="MSG_SL_SUBSYS_ENBLV_D">サブシステムの有効な式、(enable(1) || enable(2) || ...)</entry>
    <entry key="MSG_SL_SUBSYS_RESETS_S">リセット</entry>
    <entry key="MSG_SL_SUBSYS_RESETS_D">リセット制御が有効</entry>
    <entry key="MSG_SL_SUBSYS_TRIGS_S">トリガー</entry>
    <entry key="MSG_SL_SUBSYS_TRIGS_D">トリガー エッジが発生</entry>
    <entry key="MSG_SL_SUBSYS_TRIGV_S">ベクトル トリガー</entry>
    <entry key="MSG_SL_SUBSYS_TRIGV_D">トリガー エッジが発生</entry>
    <entry key="MSG_SL_SUBSYS_ENBLS_TRIGS_D">イネーブルな状態でトリガー エッジが発生</entry>
    <entry key="MSG_SL_SUBSYS_ENBLS_TRIGV_S">IF (任意の TRIG &amp;&amp; ENBL)</entry>
    <entry key="MSG_SL_SUBSYS_ENBLS_TRIGV_D">イネーブルな状態でトリガー エッジが発生</entry>
    <entry key="MSG_SL_SUBSYS_ENBLV_TRIGS_S">IF (TRIG &amp;&amp; 任意の ENBL)</entry>
    <entry key="MSG_SL_SUBSYS_ENBLV_TRIGS_D">(enable(1) || enable(2) || ...) が true の状態でトリガー エッジが発生</entry>
    <entry key="MSG_SL_SUBSYS_ENBLV_TRIGV_S">IF (任意の TRIG &amp;&amp; 任意の ENBL)</entry>
    <entry key="MSG_SL_SUBSYS_ENBLV_TRIGV_D">(enable(1) || enable(2) || ...) が true の状態でトリガー エッジが発生</entry>
    <entry key="MSG_SL_SUBSYS_ENBL_COND_S">有効</entry>
    <entry key="MSG_SL_SUBSYS_ENBL_COND_D">有効</entry>
    <entry key="MSG_SL_SUBSYS_ENBLV_COND_S">イネーブル [{0}]</entry>
    <entry key="MSG_SL_SUBSYS_ENBLV_COND_D">イネーブル ({0})</entry>
    <entry key="MSG_SL_SUBSYS_TRIG_COND_S">トリガー</entry>
    <entry key="MSG_SL_SUBSYS_TRIG_COND_D">トリガー エッジが発生</entry>
    <entry key="MSG_SL_SUBSYS_TRIGV_COND_S">トリガー [{0}]</entry>
    <entry key="MSG_SL_SUBSYS_TRIGV_COND_D">トリガー ({0}) エッジが発生</entry>
    <entry key="MSG_SL_SWITCH_BOOL_SCAL_S">スイッチのトリガー</entry>
    <entry key="MSG_SL_SWITCH_BOOL_SCAL_D">論理トリガー入力</entry>
    <entry key="MSG_SL_SWITCH_BOOL_VECT_S">スイッチのトリガー {0}</entry>
    <entry key="MSG_SL_SWITCH_BOOL_VECT_D">論理トリガー入力 ({0})</entry>
    <entry key="MSG_SL_SWITCH_REAL_SCAL_S">トリガー {0} しきい値</entry>
    <entry key="MSG_SL_SWITCH_REAL_SCAL_D">トリガー {0} しきい値</entry>
    <entry key="MSG_SL_SWITCH_REAL_VECTU_S">トリガー [{0}] {1} しきい値</entry>
    <entry key="MSG_SL_SWITCH_REAL_VECTU_D">トリガー ({0}) {1} しきい値</entry>
    <entry key="MSG_SL_SWITCH_REAL_VECTP_S">トリガー {0} しきい値 [{1}]</entry>
    <entry key="MSG_SL_SWITCH_REAL_VECTP_D">トリガー {0} しきい値 ({1})</entry>
    <entry key="MSG_SL_SWITCH_REAL_VECTUP_S">トリガー [{0}] {1} しきい値 [{2}]</entry>
    <entry key="MSG_SL_SWITCH_REAL_VECTUP_D">トリガー ({0}) {1} しきい値 ({2})</entry>
    <entry key="MSG_SL_SWITCH_REAL_GT_SCAL_S">トリガー {0} しきい値</entry>
    <entry key="MSG_SL_SWITCH_REAL_GT_SCAL_D">トリガー {0} しきい値</entry>
    <entry key="MSG_SL_SWITCH_REAL_GT_VECTU_S">トリガー [{0}] {1} しきい値</entry>
    <entry key="MSG_SL_SWITCH_REAL_GT_VECTU_D">トリガー ({0}) {1} しきい値</entry>
    <entry key="MSG_SL_SWITCH_REAL_GT_VECTP_S">トリガー {0} しきい値 [{1}]</entry>
    <entry key="MSG_SL_SWITCH_REAL_GT_VECTP_D">トリガー {0} しきい値 ({1})</entry>
    <entry key="MSG_SL_SWITCH_REAL_GT_VECTUP_S">トリガー [{0}] {1} しきい値 [{2}]</entry>
    <entry key="MSG_SL_SWITCH_REAL_GT_VECTUP_D">トリガー ({0}) {1} しきい値 ({2})</entry>
    <entry key="MSG_SL_SWITCH_OUTCOME_T_D">true (第 1 入力端子からの出力)</entry>
    <entry key="MSG_SL_SWITCH_OUTCOME_F_D">false (第 3 入力端子からの出力)</entry>
    <entry key="MSG_SL_SWITCH_REAL_SCAL_0_S">トリガー {0} 0</entry>
    <entry key="MSG_SL_SWITCH_REAL_SCAL_0_D">トリガー {0} 0</entry>
    <entry key="MSG_SL_SWITCH_REAL_VECTU_0_S">トリガー [{0}] {1} 0</entry>
    <entry key="MSG_SL_SWITCH_REAL_VECTU_0_D">トリガー ({0}) {1} 0</entry>
    <entry key="MSG_SL_SWITCH_REAL_VECTP_0_S">トリガー {0} 0[{1}]</entry>
    <entry key="MSG_SL_SWITCH_REAL_VECTP_0_D">トリガー {0} 0 ({1})</entry>
    <entry key="MSG_SL_SWITCH_REAL_VECTUP_0_S">トリガー [{0}] {1} 0[{2}]</entry>
    <entry key="MSG_SL_SWITCH_REAL_VECTUP_0_D">トリガー ({0}) {1} 0 ({2})</entry>
    <entry key="MSG_SL_SWTCHCASE_S">switch 入力</entry>
    <entry key="MSG_SL_SWTCHCASE_D">打ち切られた入力</entry>
    <entry key="MCG_SL_SWTCHCASE_OUTI_A">ケース i</entry>
    <entry key="MSG_SC_MODE_A">モード {0}</entry>
    <entry key="MSG_SC_MODE_S">モード {0}</entry>
    <entry key="MSG_SC_MODE_D">モード {0}</entry>
    <entry key="MSG_SC_MODE_OUTI_A">モード m</entry>
    <entry key="MSG_SC_MODE_OUTI_S">{0}</entry>
    <entry key="MSG_SC_MODE_OUTI_D">{0}</entry>
    <entry key="MSG_SL_MPSWITCH_OUTCOME_PORT_A">ケース i</entry>
    <entry key="MSG_SL_MPSWITCH_OUTCOME_PORT_S">ケース {0} (出力 = 入力 {1})</entry>
    <entry key="MSG_SL_MPSWITCH_OUTCOME_PORT_D">= {0} (入力端子 {1} からの出力)</entry>
    <entry key="MSG_SL_MPSWITCH_OUTCOME_ELMNT_A">ケース i</entry>
    <entry key="MSG_SL_MPSWITCH_OUTCOME_ELMNT_S">ケース {0} (出力 = 入力 [{1}])</entry>
    <entry key="MSG_SL_MPSWITCH_OUTCOME_ELMNT_D">= {0} (入力 ({1}) からの出力)</entry>
    <entry key="MSG_SL_MPSWITCH_INT_SCAL_PORT_S">制御入力</entry>
    <entry key="MSG_SL_MPSWITCH_INT_SCAL_PORT_D">整数入力値</entry>
    <entry key="MSG_SL_MPSWITCH_INT_SCAL_ELMNT_S">制御入力</entry>
    <entry key="MSG_SL_MPSWITCH_INT_SCAL_ELMNT_D">整数入力値</entry>
    <entry key="MSG_SL_MPSWITCH_INT_VECT_S">制御入力 [{0}]</entry>
    <entry key="MSG_SL_MPSWITCH_INT_VECT_D">整数入力 ({0}) 値</entry>
    <entry key="MSG_SL_MPSWITCH_REAL_SCAL_PORT_S">制御入力</entry>
    <entry key="MSG_SL_MPSWITCH_REAL_SCAL_PORT_D">打ち切られた入力値</entry>
    <entry key="MSG_SL_MPSWITCH_REAL_SCAL_ELMNT_S">制御入力</entry>
    <entry key="MSG_SL_MPSWITCH_REAL_SCAL_ELMNT_D">打ち切られた入力値</entry>
    <entry key="MSG_SL_MPSWITCH_REAL_VECT_S">制御入力 [{0}]</entry>
    <entry key="MSG_SL_MPSWITCH_REAL_VECT_D">打ち切られた入力 ({0}) 値</entry>
    <entry key="MSG_OUT_CALL_A">実行済み</entry>
    <entry key="MSG_OUT_CALL_S">実行済み</entry>
    <entry key="MSG_OUT_CALL_D">実行済み</entry>
    <entry key="MSG_OUT_IMPLICIT_DFLT_A"> 暗黙的な既定</entry>
    <entry key="MSG_OUT_IMPLICIT_DFLT_S"> 暗黙的な既定</entry>
    <entry key="MSG_OUT_IMPLICIT_DFLT_D"> 暗黙的な既定</entry>
    <entry key="MSG_OUT_EXPLICIT_A"> そうでない場合</entry>
    <entry key="MSG_OUT_EXPLICIT_S"> そうでない場合</entry>
    <entry key="MSG_OUT_EXPLICIT_D"> そうでない場合</entry>
    <entry key="MSG_OUT_CASE_S">ケース {0}</entry>
    <entry key="MSG_OUT_CASE_D">ケース {0}</entry>
    <entry key="MSG_OUT_STATE_A">ステート i</entry>
    <entry key="MSG_OUT_STATE_D">ステート {0}</entry>
    <entry key="MSG_SL_SATURATE_ON_INTEGER_OVERFLOW">整数オーバーフローで飽和</entry>
    <entry key="MSG_SF_TRANS_PRED_A">CND({0})</entry>
    <entry key="MSG_SF_TRANS_PRED_S">"{0}"</entry>
    <entry key="MSG_SL_TESTPOINT_A">TP</entry>
    <entry key="MSG_SL_TESTPOINT_S">{0}</entry>
    <entry key="MSG_SL_TESTPOINT_D">{0}</entry>
    <entry key="MSG_SL_TESTINTERVAL_A">TI</entry>
    <entry key="MSG_SL_TESTINTERVAL_S">{0}</entry>
    <entry key="MSG_SL_TESTINTERVAL_D">{0}</entry>
    <entry key="MSG_SL_TESTOBJECTIVE_SCAL_A">TO</entry>
    <entry key="MSG_SL_TESTOBJECTIVE_SCAL_S">{0}</entry>
    <entry key="MSG_SL_TESTOBJECTIVE_SCAL_D">{0}</entry>
    <entry key="MSG_SL_TESTOBJECTIVE_VECT_A">U({0})</entry>
    <entry key="MSG_SL_TESTOBJECTIVE_VECT_S">U({0})</entry>
    <entry key="MSG_SL_SATURATE_ON_INTEGER_OVERFLOW_A">SO</entry>
    <entry key="MSG_SL_BLOCK_COVERAGE_A">BC</entry>
    <entry key="MSG_SL_ABSVAL_SCAL_A">U&lt;0</entry>
    <entry key="MSG_SL_ABSVAL_VECT_A">U&lt;0</entry>
    <entry key="MSG_SL_ABSVAL_VECTC_A">U&lt;0</entry>
    <entry key="MSG_SL_ABSVAL_SCAL_S">U {0} 0</entry>
    <entry key="MSG_SL_ABSVAL_VECT_S">U({0}) {1} 0</entry>
    <entry key="MSG_SL_ABSVAL_VECTC_S">U(:) {0} 0</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_INT_LESS_A">-1</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_INT_LESS_S">-1</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_INT_LESS_D">-1</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_FIXPT_LESS_A">-LSB</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_FIXPT_LESS_S">-LSB</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_FIXPT_LESS_D">-LSB</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_REAL_LESS_A">[-tol..0)</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_REAL_LESS_S">[-tol..0)</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_REAL_LESS_D">[-tol..0)</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_REAL_LESS_CLOSED_A">[-tol..0]</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_REAL_LESS_CLOSED_S">[-tol..0]</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_REAL_LESS_CLOSED_D">[-tol..0]</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_INT_EQ_A">0</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_INT_EQ_S">0</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_INT_EQ_D">0</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_FIXPT_EQ_A">0</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_FIXPT_EQ_S">0</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_FIXPT_EQ_D">0</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_INT_GREATER_A">+1</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_INT_GREATER_S">+1</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_INT_GREATER_D">+1</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_FIXPT_GREATER_A">+LSB</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_FIXPT_GREATER_S">+LSB</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_FIXPT_GREATER_D">+LSB</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_REAL_GREATER_A">(0..tol]</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_REAL_GREATER_S">(0..tol]</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_REAL_GREATER_D">(0..tol]</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_REAL_GREATER_CLOSED_A">[0..tol]</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_REAL_GREATER_CLOSED_S">[0..tol]</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_REAL_GREATER_CLOSED_D">[0..tol]</entry>
    <entry key="MSG_SL_RELATIONALOP_SCAL_A">{0}</entry>
    <entry key="MSG_SL_RELAY_ON_SCAL_S">U {0} OnThresh</entry>
    <entry key="MSG_SL_RELAY_ON_VECTU_S">U[{0}] {1} OnThresh</entry>
    <entry key="MSG_SL_RELAY_ON_VECTP_S">U {0} OnThresh[{1}]</entry>
    <entry key="MSG_SL_RELAY_ON_VECTUP_S">U[{0}] {1} OnThresh[{2}]</entry>
    <entry key="MSG_SL_RELAY_OFF_SCAL_S">U {0} OffThresh</entry>
    <entry key="MSG_SL_RELAY_OFF_VECTU_S">U[{0}] {1} OffThresh</entry>
    <entry key="MSG_SL_RELAY_OFF_VECTP_S">U {0} OffThresh[{1}]</entry>
    <entry key="MSG_SL_RELAY_OFF_VECTUP_S">U[{0}] {1} OffThresh[{2}]</entry>
    <entry key="MSG_SL_SATURATE_UL_SCAL_S">U {0} UL</entry>
    <entry key="MSG_SL_SATURATE_UL_VECTU_S">U[{0}] {1} UL</entry>
    <entry key="MSG_SL_SATURATE_UL_VECTP_S">U {0} UL[{1}]</entry>
    <entry key="MSG_SL_SATURATE_UL_VECTUP_S">U[{0}] {1} UL[{2}]</entry>
    <entry key="MSG_SL_SATURATE_LL_SCAL_S">U {0} LL</entry>
    <entry key="MSG_SL_SATURATE_LL_VECTU_S">U[{0}] {1} LL</entry>
    <entry key="MSG_SL_SATURATE_LL_VECTP_S">U {0} LL[{1}]</entry>
    <entry key="MSG_SL_SATURATE_LL_VECTUP_S">U[{0}] {1} LL[{2}]</entry>
    <entry key="MSG_SL_DEADZONE_UL_SCAL_S">U {0} UL</entry>
    <entry key="MSG_SL_DEADZONE_UL_VECTU_S">U[{0}] {1} UL</entry>
    <entry key="MSG_SL_DEADZONE_UL_VECTP_S">U {0} UL[{1}]</entry>
    <entry key="MSG_SL_DEADZONE_UL_VECTUP_S">U[{0}] {1} UL[{2}]</entry>
    <entry key="MSG_SL_DEADZONE_LL_SCAL_S">U {0} LL</entry>
    <entry key="MSG_SL_DEADZONE_LL_VECTU_S">U[{0}] {1} LL</entry>
    <entry key="MSG_SL_DEADZONE_LL_VECTP_S">U {0} LL[{1}]</entry>
    <entry key="MSG_SL_DEADZONE_LL_VECTUP_S">U[{0}] {1} LL[{2}]</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_SCAL_S">X &gt;= UL</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_VECTU_S">X({0}) &gt;= UL</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_VECTP_S">X &gt;= UL({0})</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_VECTUP_S">X({0}) &gt;= UL({1})</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_SCAL_S">X &lt;= LL</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_VECTU_S">X({0}) &lt;= LL</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_VECTP_S">X &lt;= LL({0})</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_VECTUP_S">X({0}) &lt;= LL({1})</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_STRICT_SCAL_S">X &gt; UL</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_STRICT_VECTU_S">X({0}) &gt; UL</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_STRICT_VECTP_S">X &gt; UL({0})</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_STRICT_VECTUP_S">X({0}) &gt; UL({1})</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_STRICT_SCAL_S">X &lt; LL</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_STRICT_VECTU_S">X({0}) &lt; LL</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_STRICT_VECTP_S">X &lt; LL({0})</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_STRICT_VECTUP_S">X({0}) &lt; LL({1})</entry>
    <entry key="MSG_SL_RATELIMITER_UL_SCAL_S">X {0} UL</entry>
    <entry key="MSG_SL_RATELIMITER_UL_VECTU_S">X[{0}] {1} UL</entry>
    <entry key="MSG_SL_RATELIMITER_UL_VECTP_S">X {0} UL[{1}]</entry>
    <entry key="MSG_SL_RATELIMITER_UL_VECTUP_S">X[{0}] {1} UL[{2}]</entry>
    <entry key="MSG_SL_RATELIMITER_LL_SCAL_S">X {0} LL</entry>
    <entry key="MSG_SL_RATELIMITER_LL_VECTU_S">X[{0}] {1} LL</entry>
    <entry key="MSG_SL_RATELIMITER_LL_VECTP_S">X {0} LL[{1}]</entry>
    <entry key="MSG_SL_RATELIMITER_LL_VECTUP_S">X[{0}] {1} LL[{2}]</entry>
    <entry key="MSG_SL_FCN_CONDITION_S">"{0}"</entry>
    <entry key="MSG_SL_FCN_CONDITION_D">"{0}"</entry>
    <entry key="MSG_SL_LOGIC_VECT_A">INi[J]</entry>
    <entry key="MSG_SL_LOGIC_SCAL_OUT_A">OUT</entry>
    <entry key="MSG_SL_LOGIC_VECT_OUT_A">OUT[i]</entry>
    <entry key="MSG_SL_LOGIC_DEC_SCAL_OUT_A">OUT</entry>
    <entry key="MSG_SL_LOGIC_DEC_VECT_OUT_A">OUT[i]</entry>
    <entry key="MSG_SL_CMBLOGIC_SCAL_A">IF (in)</entry>
    <entry key="MSG_SL_CMBLOGIC_VECT_A">SWITCH (IN)</entry>
    <entry key="MSG_SL_CMBLOGIC_ELM_A">IN[i]</entry>
    <entry key="MSG_SL_IF_SING_IF_A">IF</entry>
    <entry key="MSG_SL_IF_SING_IF_S">IF</entry>
    <entry key="MSG_SL_IF_MULT_IF_A">IF</entry>
    <entry key="MSG_SL_IF_MULT_ELSEIF_A">ElseIF</entry>
    <entry key="MSG_SL_IF_MULT_ELSEIF_S">Else IF #{0}</entry>
    <entry key="MSG_SL_FOR_CHECK_A">FOR</entry>
    <entry key="MSG_SL_WHILE_WHILETEST_A">WHILE</entry>
    <entry key="MSG_SL_WHILE_DOWHILETEST_A">DO-WHILE</entry>
    <entry key="MGG_SL_WHILE_MAXITERS_A">MX ITER</entry>
    <entry key="MSG_SL_MINMAX_SCAL_A">Out LGC</entry>
    <entry key="MSG_SL_MINMAX_VECT_A">OUTi LGC</entry>
    <entry key="MSG_SL_MIN_IDX_A">INi</entry>
    <entry key="MSG_SL_MAX_IDX_A">INi</entry>
    <entry key="MSG_SL_MIN_ELEM_IDX_A">INELEMi</entry>
    <entry key="MSG_SL_MAX_ELEM_IDX_A">INELEMi</entry>
    <entry key="MSG_SL_MIN_IDX_COLLAPSED_A">INCOLLAPSEDi</entry>
    <entry key="MSG_SL_MAX_IDX_COLLAPSED_A">INCOLLAPSEDi</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_SCAL_BEFORE_A">in - min(before)</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_SCAL_AFTER_A">in - min(after)</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_SCAL_VECT_BEFORE_A">in - min(input elements i before)</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_SCAL_VECT_AFTER_A">in - min(input elements i after)</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_VECT_VECT_BEFORE_A">in i - min(input elements i before)</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_VECT_VECT_AFTER_A">in i - min(input elements i after)</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_SCAL_BEFORE_A">in - max(before)</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_SCAL_AFTER_A">in - max(after)</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_SCAL_VECT_BEFORE_A">in - max(input elements i before)</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_SCAL_VECT_AFTER_A">in - max(input elements i after)</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_VECT_VECT_BEFORE_A">in i - max(input elements i before)</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_VECT_VECT_AFTER_A">in i - max(input elements i after)</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_AFTER_COLLAPSED_A">in i - min(input elements i after collapsed)</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_BEFORE_COLLAPSED_A">in i - min(input elements i before collapsed)</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_AFTER_COLLAPSED_A">in i - max(input elements i after collapsed)</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_BEFORE_COLLAPSED_A">in i - max(input elements i before collapsed)</entry>
    <entry key="MSG_SL_SIGNUM_SCAL_A">Out LGC</entry>
    <entry key="MSG_SL_SIGNUM_VECT_A">OUTi LGC</entry>
    <entry key="MSG_SL_SIGNUM_OUTCOME_NEGATIVE_A">INPUT NEGATIVE</entry>
    <entry key="MSG_SL_SIGNUM_OUTCOME_ZERO_A">INPUT ZERO</entry>
    <entry key="MSG_SL_SIGNUM_OUTCOME_POSITIVE_A">INPUT POSITIVE</entry>
    <entry key="MSG_SL_SIGNUM_REL_SCAL_A">input - 0 </entry>
    <entry key="MSG_SL_SIGNUM_REL_VECT_A">input[i] - 0 </entry>
    <entry key="MSG_SL_ASINACOS_SCAL_A">Out LGC</entry>
    <entry key="MSG_SL_ASINACOS_VECT_A">OUTi LGC</entry>
    <entry key="MSG_SL_ASINACOS_OUTCOME_MINUSONE_A">INPUT IS LESS THAN -1</entry>
    <entry key="MSG_SL_ASINACOS_OUTCOME_NUMBER_A">INPUT IS BETWEEN -1 AND 1</entry>
    <entry key="MSG_SL_ASINACOS_OUTCOME_PLUSONE_A">INPUT IS GREATER THAN 1</entry>
    <entry key="MSG_SL_ASINACOS_REL_SCAL_MINUSONE_A">input - (-1) </entry>
    <entry key="MSG_SL_ASINACOS_REL_SCAL_PLUSONE_A">input - 1 </entry>
    <entry key="MSG_SL_ASINACOS_REL_VECT_MINUSONE_A">input[i] - (-1) </entry>
    <entry key="MSG_SL_ASINACOS_REL_VECT_PLUSONE_A">input[i] - 1 </entry>
    <entry key="MSG_SL_SUBSYS_FCALL_A">FCALL</entry>
    <entry key="MSG_SL_SUBSYS_ENBLS_A">IF (ENBL)</entry>
    <entry key="MSG_SL_SUBSYS_ENBLV_A">IF (ENBL)</entry>
    <entry key="MSG_SL_SUBSYS_RESETS_A">IF (RESET)</entry>
    <entry key="MSG_SL_SUBSYS_TRIGS_A">IF (TRIG)</entry>
    <entry key="MSG_SL_SUBSYS_TRIGV_A">IF (TRIG)</entry>
    <entry key="MSG_SL_SUBSYS_ENBLS_TRIGS_A">IF (TRIG &amp; ENBL)</entry>
    <entry key="MSG_SL_SUBSYS_ENBLS_TRIGS_S">IF (TRIG &amp; ENBL)</entry>
    <entry key="MSG_SL_SUBSYS_ENBLS_TRIGV_A">IF (TRIG &amp; ENBL)</entry>
    <entry key="MSG_SL_SUBSYS_ENBLV_TRIGS_A">IF (TRIG &amp; ENBL)</entry>
    <entry key="MSG_SL_SUBSYS_ENBLV_TRIGV_A">IF (TRIG &amp; ENBL)</entry>
    <entry key="MSG_SL_SUBSYS_ENBL_COND_A">ENBL</entry>
    <entry key="MSG_SL_SUBSYS_ENBLV_COND_A">ENBL[i]</entry>
    <entry key="MSG_SL_SUBSYS_TRIG_COND_A">TRIG</entry>
    <entry key="MSG_SL_SUBSYS_TRIGV_COND_A">TRIG[i]</entry>
    <entry key="MSG_SL_SWITCH_BOOL_SCAL_A">IF TRIG</entry>
    <entry key="MSG_SL_SWITCH_BOOL_VECT_A">If TRIG[i]</entry>
    <entry key="MSG_SL_SWITCH_REAL_SCAL_A">TRIG &gt;= THRESH</entry>
    <entry key="MSG_SL_SWITCH_REAL_VECTU_A">TRIG[i] &gt;= THRESH</entry>
    <entry key="MSG_SL_SWITCH_REAL_VECTP_A">TRIG &gt;= THRESH[i]</entry>
    <entry key="MSG_SL_SWITCH_REAL_VECTUP_A">TRIG[i] &gt;= THRESH[i]</entry>
    <entry key="MSG_SL_SWITCH_REAL_GT_SCAL_A">TRIG &gt; THRESH</entry>
    <entry key="MSG_SL_SWITCH_REAL_GT_VECTU_A">TRIG[i] &gt; THRESH</entry>
    <entry key="MSG_SL_SWITCH_REAL_GT_VECTP_A">TRIG &gt; THRESH[i]</entry>
    <entry key="MSG_SL_SWITCH_REAL_GT_VECTUP_A">TRIG[i] &gt; THRESH[i]</entry>
    <entry key="MSG_SL_SWITCH_OUTCOME_T_A">T =&gt; IN1</entry>
    <entry key="MSG_SL_SWITCH_OUTCOME_T_S">true (out = in1)</entry>
    <entry key="MSG_SL_SWITCH_OUTCOME_F_A">F =&gt; IN3</entry>
    <entry key="MSG_SL_SWITCH_OUTCOME_F_S">false (out = in3)</entry>
    <entry key="MSG_SL_SWITCH_REAL_SCAL_0_A">TRIG - 0 </entry>
    <entry key="MSG_SL_SWITCH_REAL_VECTU_0_A">TRIG[i] - 0</entry>
    <entry key="MSG_SL_SWITCH_REAL_VECTP_0_A">TRIG - 0[i]</entry>
    <entry key="MSG_SL_SWITCH_REAL_VECTUP_0_A">TRIG[i] - 0[i]</entry>
    <entry key="MSG_SL_SWTCHCASE_A">Switch(in)</entry>
    <entry key="MCG_SL_SWTCHCASE_OUTI_S">{0}</entry>
    <entry key="MCG_SL_SWTCHCASE_OUTI_D">= {0}</entry>
    <entry key="MSG_SL_MPSWITCH_INT_SCAL_PORT_A">SWITCH(IN0)</entry>
    <entry key="MSG_SL_MPSWITCH_INT_SCAL_ELMNT_A">SWITCH(IN0)</entry>
    <entry key="MSG_SL_MPSWITCH_INT_VECT_A">SWITCH(IN0[i])</entry>
    <entry key="MSG_SL_MPSWITCH_REAL_SCAL_PORT_A">SWITCH(IN0)</entry>
    <entry key="MSG_SL_MPSWITCH_REAL_SCAL_ELMNT_A">SWITCH(IN0)</entry>
    <entry key="MSG_SL_MPSWITCH_REAL_VECT_A">SWITCH(IN0[i])</entry>
    <entry key="MSG_OUT_CASE_A"> </entry>
    <entry key="MSG_OUT_GENERIC_TXT_A">{0}</entry>
    <entry key="MSG_OUT_GENERIC_TXT_S">{0}</entry>
    <entry key="MSG_OUT_GENERIC_TXT_D">{0}</entry>
    <entry key="MSG_OUT_T_A">T</entry>
    <entry key="MSG_OUT_T_S">true</entry>
    <entry key="MSG_OUT_T_D">true</entry>
    <entry key="MSG_OUT_F_A">F</entry>
    <entry key="MSG_OUT_F_S">false</entry>
    <entry key="MSG_OUT_F_D">false</entry>
    <entry key="MSG_OUT_STATE_S">{0}</entry>
    <entry key="MSG_CUSTOM_TXT_A">{0}</entry>
    <entry key="MSG_CUSTOM_TXT_S">{0}</entry>
    <entry key="MSG_CUSTOM_TXT_D">{0}</entry>
  </message>
</rsccat>
