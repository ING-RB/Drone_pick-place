<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright 2024 The MathWorks, Inc.-->

<rsccat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" locale="zh_CN" product="Slvnv" xsi:noNamespaceSchemaLocation="../../resources/schema/msgcat.xsd">
  <message>
    <entry key="MSG_SF_HIST_CHILD_CALL_A">历史测试</entry>
    <entry key="MSG_SF_HIST_CHILD_CALL_S">历史子状态</entry>
    <entry key="MSG_SF_HIST_CHILD_CALL_D">由于历史而进入的先前激活子状态</entry>
    <entry key="MSG_SF_STATE_ON_DECISION_A">On 决策</entry>
    <entry key="MSG_SF_STATE_ON_DECISION_S">事件 "{0}"</entry>
    <entry key="MSG_SF_STATE_ON_DECISION_D">触发事件 "{0}"</entry>
    <entry key="MSG_SF_TRANSITION_TEST_A">测试</entry>
    <entry key="MSG_SF_TRANSITION_TEST_S">转移</entry>
    <entry key="MSG_SF_TRANSITION_TEST_D">转移触发器表达式</entry>
    <entry key="MSG_SF_TRANS_PRED_D">条件 {0}，"{1}"</entry>
    <entry key="MSG_SF_ACTIVE_CHILD_CALL_A">执行的子级</entry>
    <entry key="MSG_SF_ACTIVE_CHILD_CALL_S">执行的子状态</entry>
    <entry key="MSG_SF_ACTIVE_CHILD_CALL_D">执行的子状态</entry>
    <entry key="MSG_SF_INACTIVE_BEFORE_EXIT_A">子级退出</entry>
    <entry key="MSG_SF_INACTIVE_BEFORE_EXIT_S">间接退出的子状态</entry>
    <entry key="MSG_SF_INACTIVE_BEFORE_EXIT_D">父状态退出时退出的子状态</entry>
    <entry key="MSG_SF_ACTIVE_CHILD_AT_EXIT_A">子级退出</entry>
    <entry key="MSG_SF_ACTIVE_CHILD_AT_EXIT_S">间接退出的子状态</entry>
    <entry key="MSG_SF_ACTIVE_CHILD_AT_EXIT_D">父状态退出时退出的子状态</entry>
    <entry key="MSG_SF_ACTIVE_CHILD_EXIT_A">子级退出</entry>
    <entry key="MSG_SF_ACTIVE_CHILD_EXIT_S">间接退出的子状态</entry>
    <entry key="MSG_SF_ACTIVE_CHILD_EXIT_D">父状态退出时退出的子状态</entry>
    <entry key="MSG_SL_TESTOBJECTIVE_VECT_D">输入({0})</entry>
    <entry key="MSG_SL_SATURATE_ON_INTEGER_OVERFLOW_S">对整数溢出进行饱和处理</entry>
    <entry key="MSG_SL_SATURATE_ON_INTEGER_OVERFLOW_D">对整数溢出进行饱和处理</entry>
    <entry key="MSG_SL_BLOCK_COVERAGE_S">执行的模块</entry>
    <entry key="MSG_SL_BLOCK_COVERAGE_D">执行的模块</entry>
    <entry key="MSG_SL_ABSVAL_SCAL_D">输入 {0} 0</entry>
    <entry key="MSG_SL_ABSVAL_VECT_D">输入({0}) {1} 0</entry>
    <entry key="MSG_SL_ABSVAL_VECTC_D">输入(:) {0} 0</entry>
    <entry key="MSG_SL_RELATIONALOP_SCAL_S">输入 1 {0} 输入 2</entry>
    <entry key="MSG_SL_RELATIONALOP_SCAL_D">输入 1 {0} 输入 2</entry>
    <entry key="MSG_SL_RELATIONALOP_VEC_A">输入 1({0}) {1} 输入 2({2})</entry>
    <entry key="MSG_SL_RELATIONALOP_VEC_S">输入 1({0}) {1} 输入 2({2})</entry>
    <entry key="MSG_SL_RELATIONALOP_VEC_D">输入 1({0}) {1} 输入 2({2})</entry>
    <entry key="MSG_SL_RELATIONALOP_VEC_SCAL_A">输入 1({0}) {1} 输入 2</entry>
    <entry key="MSG_SL_RELATIONALOP_VEC_SCAL_S">输入 1({0}) {1} 输入 2</entry>
    <entry key="MSG_SL_RELATIONALOP_VEC_SCAL_D">输入 1({0}) {1} 输入 2</entry>
    <entry key="MSG_SL_RELATIONALOP_SCAL_VEC_A">输入 1 {0} 输入 2({1})</entry>
    <entry key="MSG_SL_RELATIONALOP_SCAL_VEC_S">输入 1 {0} 输入 2({1})</entry>
    <entry key="MSG_SL_RELATIONALOP_SCAL_VEC_D">输入 1 {0} 输入 2({1})</entry>
    <entry key="MSG_SL_RELATIONALOP_COND_UNARY_A">输入 1 {0}</entry>
    <entry key="MSG_SL_RELATIONALOP_COND_UNARY_S">输入 1 {0}</entry>
    <entry key="MSG_SL_RELATIONALOP_COND_UNARY_D">输入 1 {0}</entry>
    <entry key="MSG_SL_RELATIONALOP_COND_UNARY_VEC_A">输入 1({0}) {1}</entry>
    <entry key="MSG_SL_RELATIONALOP_COND_UNARY_VEC_S">输入 1({0}) {1}</entry>
    <entry key="MSG_SL_RELATIONALOP_COND_UNARY_VEC_D">输入 1({0}) {1}</entry>
    <entry key="MSG_SL_RELAY_ON_SCAL_A">开启</entry>
    <entry key="MSG_SL_RELAY_ON_SCAL_D">输入 {0} 开启阈值</entry>
    <entry key="MSG_SL_RELAY_ON_VECTU_A">开启</entry>
    <entry key="MSG_SL_RELAY_ON_VECTU_D">输入({0}) {1} 开启阈值</entry>
    <entry key="MSG_SL_RELAY_ON_VECTP_A">开启</entry>
    <entry key="MSG_SL_RELAY_ON_VECTP_D">输入 {0} 开启阈值({1})</entry>
    <entry key="MSG_SL_RELAY_ON_VECTUP_A">开启</entry>
    <entry key="MSG_SL_RELAY_ON_VECTUP_D">输入({0}) {1} 开启阈值({2})</entry>
    <entry key="MSG_SL_RELAY_OFF_SCAL_A">关闭</entry>
    <entry key="MSG_SL_RELAY_OFF_SCAL_D">输入 {0} 关闭阈值</entry>
    <entry key="MSG_SL_RELAY_OFF_VECTU_A">关闭</entry>
    <entry key="MSG_SL_RELAY_OFF_VECTU_D">输入({0}) {1} 关闭阈值</entry>
    <entry key="MSG_SL_RELAY_OFF_VECTP_A">关闭</entry>
    <entry key="MSG_SL_RELAY_OFF_VECTP_D">输入 {0} 关闭阈值({1})</entry>
    <entry key="MSG_SL_RELAY_OFF_VECTUP_A">关闭</entry>
    <entry key="MSG_SL_RELAY_OFF_VECTUP_D">输入({0}) {1} 关闭阈值({2})</entry>
    <entry key="MSG_SL_SATURATE_UL_SCAL_A">高于 UL</entry>
    <entry key="MSG_SL_SATURATE_UL_SCAL_D">输入 {0} 上限</entry>
    <entry key="MSG_SL_SATURATE_UL_VECTU_A">高于 UL</entry>
    <entry key="MSG_SL_SATURATE_UL_VECTU_D">输入({0}) {1} 上限</entry>
    <entry key="MSG_SL_SATURATE_UL_VECTP_A">高于 UL</entry>
    <entry key="MSG_SL_SATURATE_UL_VECTP_D">输入 {0} 上限({1})</entry>
    <entry key="MSG_SL_SATURATE_UL_VECTUP_A">高于 UL</entry>
    <entry key="MSG_SL_SATURATE_UL_VECTUP_D">输入({0}) {1} 上限({2})</entry>
    <entry key="MSG_SL_SATURATE_LL_SCAL_A">高于 LL</entry>
    <entry key="MSG_SL_SATURATE_LL_SCAL_D">输入 {0} 下限</entry>
    <entry key="MSG_SL_SATURATE_LL_VECTU_A">高于 LL</entry>
    <entry key="MSG_SL_SATURATE_LL_VECTU_D">输入({0}) {1} 下限</entry>
    <entry key="MSG_SL_SATURATE_LL_VECTP_A">高于 LL</entry>
    <entry key="MSG_SL_SATURATE_LL_VECTP_D">输入 {0} 下限({1})</entry>
    <entry key="MSG_SL_SATURATE_LL_VECTUP_A">高于 LL</entry>
    <entry key="MSG_SL_SATURATE_LL_VECTUP_D">输入({0}) {1} 下限({2})</entry>
    <entry key="MSG_SL_DEADZONE_UL_SCAL_A">高于 UL</entry>
    <entry key="MSG_SL_DEADZONE_UL_SCAL_D">输入 {0} 上限</entry>
    <entry key="MSG_SL_DEADZONE_UL_VECTU_A">高于 UL</entry>
    <entry key="MSG_SL_DEADZONE_UL_VECTU_D">输入({0}) {1} 上限</entry>
    <entry key="MSG_SL_DEADZONE_UL_VECTP_A">高于 UL</entry>
    <entry key="MSG_SL_DEADZONE_UL_VECTP_D">输入 {0} 上限({1})</entry>
    <entry key="MSG_SL_DEADZONE_UL_VECTUP_A">高于 UL</entry>
    <entry key="MSG_SL_DEADZONE_UL_VECTUP_D">输入({0}) {1} 上限({2})</entry>
    <entry key="MSG_SL_DEADZONE_LL_SCAL_A">高于 LL</entry>
    <entry key="MSG_SL_DEADZONE_LL_SCAL_D">输入 {0} 下限</entry>
    <entry key="MSG_SL_DEADZONE_LL_VECTU_A">高于 LL</entry>
    <entry key="MSG_SL_DEADZONE_LL_VECTU_D">输入({0}) {1} 下限</entry>
    <entry key="MSG_SL_DEADZONE_LL_VECTP_A">高于 LL</entry>
    <entry key="MSG_SL_DEADZONE_LL_VECTP_D">输入 {0} 下限({1})</entry>
    <entry key="MSG_SL_DEADZONE_LL_VECTUP_A">高于 LL</entry>
    <entry key="MSG_SL_DEADZONE_LL_VECTUP_D">输入({0}) {1} 下限({2})</entry>
    <entry key="MSG_SL_DINTEGRATOR_RESET_SCAL_A">重置</entry>
    <entry key="MSG_SL_DINTEGRATOR_RESET_SCAL_S">重置</entry>
    <entry key="MSG_SL_DINTEGRATOR_RESET_SCAL_D">重置</entry>
    <entry key="MSG_SL_DINTEGRATOR_RESET_VECT_A">重置[i]</entry>
    <entry key="MSG_SL_DINTEGRATOR_RESET_VECT_S">重置[{0}]</entry>
    <entry key="MSG_SL_DINTEGRATOR_RESET_VECT_D">重置({0})</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_SCAL_A">高于 UL</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_SCAL_D">积分结果 &gt;= 上限</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_VECTU_A">高于 UL</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_VECTU_D">积分结果({0}) &gt;= 上限</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_VECTP_A">高于 UL</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_VECTP_D">积分结果 &gt;= 上限({0})</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_VECTUP_A">高于 UL</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_VECTUP_D">积分结果({0}) &gt;= 上限({1})</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_SCAL_A">低于 LL</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_SCAL_D">积分结果 &lt;= 下限</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_VECTU_A">低于 LL</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_VECTU_D">积分结果({0}) &lt;= 下限</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_VECTP_A">低于 LL</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_VECTP_D">积分结果 &lt;= 下限({0})</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_VECTUP_A">低于 LL</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_VECTUP_D">积分结果({0}) &lt;= 下限({1})</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_STRICT_SCAL_A">高于 UL</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_STRICT_SCAL_D">积分结果 &gt; 上限</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_STRICT_VECTU_A">高于 UL</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_STRICT_VECTU_D">积分结果({0}) &gt; 上限</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_STRICT_VECTP_A">高于 UL</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_STRICT_VECTP_D">积分结果 &gt; 上限({0})</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_STRICT_VECTUP_A">高于 UL</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_STRICT_VECTUP_D">积分结果({0}) &gt; 上限({1})</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_STRICT_SCAL_A">低于 LL</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_STRICT_SCAL_D">积分结果 &lt; 下限</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_STRICT_VECTU_A">低于 LL</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_STRICT_VECTU_D">积分结果({0}) &lt; 下限</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_STRICT_VECTP_A">低于 LL</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_STRICT_VECTP_D">积分结果 &lt; 下限({0})</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_STRICT_VECTUP_A">低于 LL</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_STRICT_VECTUP_D">积分结果({0}) &lt; 下限({1})</entry>
    <entry key="MSG_SL_RATELIMITER_UL_SCAL_A">高于 UL</entry>
    <entry key="MSG_SL_RATELIMITER_UL_SCAL_D">压摆率 {0} 上限</entry>
    <entry key="MSG_SL_RATELIMITER_UL_VECTU_A">高于 UL</entry>
    <entry key="MSG_SL_RATELIMITER_UL_VECTU_D">压摆率({0}) {1} 上限</entry>
    <entry key="MSG_SL_RATELIMITER_UL_VECTP_A">高于 UL</entry>
    <entry key="MSG_SL_RATELIMITER_UL_VECTP_D">压摆率 {0} 上限({1})</entry>
    <entry key="MSG_SL_RATELIMITER_UL_VECTUP_A">高于 UL</entry>
    <entry key="MSG_SL_RATELIMITER_UL_VECTUP_D">压摆率({0}) {1} 上限({2})</entry>
    <entry key="MSG_SL_RATELIMITER_LL_SCAL_A">高于 LL</entry>
    <entry key="MSG_SL_RATELIMITER_LL_SCAL_D">压摆率 {0} 下限</entry>
    <entry key="MSG_SL_RATELIMITER_LL_VECTU_A">高于 LL</entry>
    <entry key="MSG_SL_RATELIMITER_LL_VECTU_D">压摆率({0}) {1} 下限</entry>
    <entry key="MSG_SL_RATELIMITER_LL_VECTP_A">高于 LL</entry>
    <entry key="MSG_SL_RATELIMITER_LL_VECTP_D">压摆率 {0} 下限({1})</entry>
    <entry key="MSG_SL_RATELIMITER_LL_VECTUP_A">高于 LL</entry>
    <entry key="MSG_SL_RATELIMITER_LL_VECTUP_D">压摆率({0}) {1} 下限({2})</entry>
    <entry key="MSG_SL_FCN_CONDITION_A">条件</entry>
    <entry key="MSG_SL_FCN_TEST_A">表达式</entry>
    <entry key="MSG_SL_FCN_TEST_S">表达式</entry>
    <entry key="MSG_SL_FCN_TEST_D">逻辑表达式值</entry>
    <entry key="MSG_SL_LOGIC_SCAL_A">端口i</entry>
    <entry key="MSG_SL_LOGIC_SCAL_S">端口{0}</entry>
    <entry key="MSG_SL_LOGIC_SCAL_D">输入端口 {0}</entry>
    <entry key="MSG_SL_LOGIC_VECT_S">端口{0}[{1}]</entry>
    <entry key="MSG_SL_LOGIC_VECT_D">输入端口{0}({1})</entry>
    <entry key="MSG_SL_LOGIC_SCAL_OUT_S">输出</entry>
    <entry key="MSG_SL_LOGIC_SCAL_OUT_D">输出表达式</entry>
    <entry key="MSG_SL_LOGIC_VECT_OUT_S">输出[{0}]</entry>
    <entry key="MSG_SL_LOGIC_VECT_OUT_D">输出表达式({0})</entry>
    <entry key="MSG_SL_LOGIC_DEC_SCAL_OUT_S">输出</entry>
    <entry key="MSG_SL_LOGIC_DEC_SCAL_OUT_D">输出</entry>
    <entry key="MSG_SL_LOGIC_DEC_VECT_OUT_S">输出[{0}]</entry>
    <entry key="MSG_SL_LOGIC_DEC_VECT_OUT_D">输出({0})</entry>
    <entry key="MSG_SL_LOGIC_CASCMCDC_CONDITION">C{0} ({1} In{2})</entry>
    <entry key="MSG_SL_CMBLOGIC_SCAL_S">IF (输入)</entry>
    <entry key="MSG_SL_CMBLOGIC_SCAL_D">输入逻辑值</entry>
    <entry key="MSG_SL_CMBLOGIC_VECT_S">等效索引</entry>
    <entry key="MSG_SL_CMBLOGIC_VECT_D">整数索引值</entry>
    <entry key="MSG_SL_CMBLOGIC_ELM_S">输入[{0}]</entry>
    <entry key="MSG_SL_CMBLOGIC_ELM_D">输入({0})</entry>
    <entry key="MSG_SL_CMBLOGIC_OUT_A">Case i</entry>
    <entry key="MSG_SL_CMBLOGIC_OUT_S">{0} (输入={1})</entry>
    <entry key="MSG_SL_CMBLOGIC_OUT_D">基于输入 {1} 的计算结果为 {0}</entry>
    <entry key="MSG_SL_IF_SING_IF_D">输入逻辑值</entry>
    <entry key="MSG_SL_IF_MULT_IF_S">输入{0}</entry>
    <entry key="MSG_SL_IF_MULT_IF_D">输入 {0} "if" 条件</entry>
    <entry key="MSG_SL_IF_MULT_ELSEIF_D">输入 {0} "elseif" 条件</entry>
    <entry key="MSG_SL_FOR_CHECK_S">循环测试</entry>
    <entry key="MSG_SL_FOR_CHECK_D">循环条件</entry>
    <entry key="MSG_SL_LOOPEXEC_A">已执行</entry>
    <entry key="MSG_SL_LOOPEXEC_S">已执行</entry>
    <entry key="MSG_SL_LOOPEXEC_D">已执行</entry>
    <entry key="MSG_SL_WHILE_WHILETEST_S">While 条件</entry>
    <entry key="MSG_SL_WHILE_WHILETEST_D">While 循环条件</entry>
    <entry key="MSG_SL_WHILE_DOWHILETEST_S">Do-While 条件</entry>
    <entry key="MSG_SL_WHILE_DOWHILETEST_D">Do-While 循环条件</entry>
    <entry key="MGG_SL_WHILE_MAXITERS_S">最大迭代数</entry>
    <entry key="MGG_SL_WHILE_MAXITERS_D">超过最大迭代次数</entry>
    <entry key="MSG_SL_MINMAX_SCAL_S">输出</entry>
    <entry key="MSG_SL_MINMAX_SCAL_D">确定输出的逻辑</entry>
    <entry key="MSG_SL_MINMAX_VECT_S">输出[{0}]</entry>
    <entry key="MSG_SL_MINMAX_VECT_D">确定输出元素 {0} 的逻辑</entry>
    <entry key="MSG_SL_MIN_IDX_S">输入 {0}</entry>
    <entry key="MSG_SL_MIN_IDX_D">输入 {0} 是最小值</entry>
    <entry key="MSG_SL_MAX_IDX_S">输入 {0}</entry>
    <entry key="MSG_SL_MAX_IDX_D">输入 {0} 是最大值</entry>
    <entry key="MSG_SL_MIN_ELEM_IDX_S">输入元素 {0}</entry>
    <entry key="MSG_SL_MIN_ELEM_IDX_D">输入元素 {0} 是最小值</entry>
    <entry key="MSG_SL_MAX_ELEM_IDX_S">输入元素 {0}</entry>
    <entry key="MSG_SL_MAX_ELEM_IDX_D">输入元素 {0} 是最大值</entry>
    <entry key="MSG_SL_MIN_IDX_COLLAPSED_S">折叠维度中的输入 {0}</entry>
    <entry key="MSG_SL_MIN_IDX_COLLAPSED_D">折叠维度中的输入 {0} 是最小值</entry>
    <entry key="MSG_SL_MAX_IDX_COLLAPSED_S">折叠维度中的输入 {0}</entry>
    <entry key="MSG_SL_MAX_IDX_COLLAPSED_D">折叠维度中的输入 {0} 是最大值</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_SCAL_BEFORE_S">输入 {0} - min(输入 {0} 之前的输入)</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_SCAL_BEFORE_D">输入 {0} - min(输入 {0} 之前的输入)</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_SCAL_AFTER_S">输入 {0} - min(输入 {0} 之后的输入)</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_SCAL_AFTER_D">输入 {0} - min(输入 {0} 之后的输入)</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_SCAL_VECT_BEFORE_S">输入 {0} - min(输入 {0} 之前的输入元素 {1})</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_SCAL_VECT_BEFORE_D">输入 {0} - min(输入 {0} 之前的输入元素 {1})</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_SCAL_VECT_AFTER_S">输入 {0} - min(输入 {0} 之后的输入元素 {1})</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_SCAL_VECT_AFTER_D">输入 {0} - min(输入 {0} 之后的输入元素 {1})</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_VECT_VECT_BEFORE_S">输入 {0}({1}) - min(输入 {0} 之前的输入元素 {1})</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_VECT_VECT_BEFORE_D">输入 {0}({1}) - min(输入 {0} 之前的输入元素 {1})</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_VECT_VECT_AFTER_S">输入 {0}({1}) - min(输入 {0} 之后的输入元素 {1})</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_VECT_VECT_AFTER_D">输入 {0}({1}) - min(输入 {0} 之后的输入元素 {1})</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_SCAL_BEFORE_S">输入 {0} - max(输入 {0} 之前的输入)</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_SCAL_BEFORE_D">输入 {0} - max(输入 {0} 之前的输入)</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_SCAL_AFTER_S">输入 {0} - max(输入 {0} 之后的输入)</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_SCAL_AFTER_D">输入 {0} - max(输入 {0} 之后的输入)</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_SCAL_VECT_BEFORE_S">输入 {0} - max(输入 {0} 之前的输入元素 {1})</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_SCAL_VECT_BEFORE_D">输入 {0} - max(输入 {0} 之前的输入元素 {1})</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_SCAL_VECT_AFTER_S">输入 {0} - max(输入 {0} 之后的输入元素 {1})</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_SCAL_VECT_AFTER_D">输入 {0} - max(输入 {0} 之后的输入元素 {1})</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_VECT_VECT_BEFORE_S">输入 {0}({1}) - max(输入 {0} 之前的输入元素 {1})</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_VECT_VECT_BEFORE_D">输入 {0}({1}) - max(输入 {0} 之前的输入元素 {1})</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_VECT_VECT_AFTER_S">输入 {0}({1}) - max(输入 {0} 之后的输入元素 {1})</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_VECT_VECT_AFTER_D">输入 {0}({1}) - max(输入 {0} 之后的输入元素 {1})</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_AFTER_COLLAPSED_S">输入元素 {0} - min(折叠维度中的输入元素 {0} 后的输入元素)</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_AFTER_COLLAPSED_D">输入元素 {0} - min(折叠维度中的输入元素 {0} 后的输入元素)</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_BEFORE_COLLAPSED_S">输入元素 {0} - min(折叠维度中的输入元素 {0} 前的输入元素)</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_BEFORE_COLLAPSED_D">输入元素 {0} - min(折叠维度中的输入元素 {0} 前的输入元素)</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_AFTER_COLLAPSED_S">输入元素 {0} - max(折叠维度中的输入元素 {0} 后的输入元素)</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_AFTER_COLLAPSED_D">输入元素 {0} - max(折叠维度中的输入元素 {0} 后的输入元素)</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_BEFORE_COLLAPSED_S">输入元素 {0} - max(折叠维度中的输入元素 {0} 前的输入元素)</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_BEFORE_COLLAPSED_D">输入元素 {0} - max(折叠维度中的输入元素 {0} 前的输入元素)</entry>
    <entry key="MSG_SL_SIGNUM_SCAL_S">输出</entry>
    <entry key="MSG_SL_SIGNUM_SCAL_D">确定输出的逻辑</entry>
    <entry key="MSG_SL_SIGNUM_VECT_S">输出[{0}]</entry>
    <entry key="MSG_SL_SIGNUM_VECT_D">确定输出元素 {0} 的逻辑</entry>
    <entry key="MSG_SL_SIGNUM_OUTCOME_NEGATIVE_S">-1</entry>
    <entry key="MSG_SL_SIGNUM_OUTCOME_NEGATIVE_D">输入为负值</entry>
    <entry key="MSG_SL_SIGNUM_OUTCOME_ZERO_S">0</entry>
    <entry key="MSG_SL_SIGNUM_OUTCOME_ZERO_D">输入为零</entry>
    <entry key="MSG_SL_SIGNUM_OUTCOME_POSITIVE_S">1</entry>
    <entry key="MSG_SL_SIGNUM_OUTCOME_POSITIVE_D">输入为正值</entry>
    <entry key="MSG_SL_SIGNUM_REL_SCAL_S">输入 {0} 0 </entry>
    <entry key="MSG_SL_SIGNUM_REL_SCAL_D">输入 {0} 0</entry>
    <entry key="MSG_SL_SIGNUM_REL_VECT_S">输入({0}) {1} 0 </entry>
    <entry key="MSG_SL_SIGNUM_REL_VECT_D">输入({0}) {1} 0</entry>
    <entry key="MSG_SL_ASINACOS_SCAL_S">输出</entry>
    <entry key="MSG_SL_ASINACOS_SCAL_D">确定输出的逻辑</entry>
    <entry key="MSG_SL_ASINACOS_VECT_S">输出[{0}]</entry>
    <entry key="MSG_SL_ASINACOS_VECT_D">确定输出元素 {0} 的逻辑</entry>
    <entry key="MSG_SL_ASINACOS_OUTCOME_MINUSONE_S">小于 -1</entry>
    <entry key="MSG_SL_ASINACOS_OUTCOME_MINUSONE_D">输入小于 -1</entry>
    <entry key="MSG_SL_ASINACOS_OUTCOME_NUMBER_S">在 -1 和 1 之间</entry>
    <entry key="MSG_SL_ASINACOS_OUTCOME_NUMBER_D">输入在 -1 和 1 之间</entry>
    <entry key="MSG_SL_ASINACOS_OUTCOME_PLUSONE_S">大于 1</entry>
    <entry key="MSG_SL_ASINACOS_OUTCOME_PLUSONE_D">输入大于 1</entry>
    <entry key="MSG_SL_ASINACOS_REL_SCAL_MINUSONE_S">输入 {0} (-1) </entry>
    <entry key="MSG_SL_ASINACOS_REL_SCAL_MINUSONE_D">输入 {0} (-1)</entry>
    <entry key="MSG_SL_ASINACOS_REL_SCAL_PLUSONE_S">输入 {0} 1 </entry>
    <entry key="MSG_SL_ASINACOS_REL_SCAL_PLUSONE_D">输入 {0} 1</entry>
    <entry key="MSG_SL_ASINACOS_REL_VECT_MINUSONE_S">输入({0}) {1} (-1) </entry>
    <entry key="MSG_SL_ASINACOS_REL_VECT_MINUSONE_D">输入({0}) {1} (-1)</entry>
    <entry key="MSG_SL_ASINACOS_REL_VECT_PLUSONE_S">输入({0}) {1} 1 </entry>
    <entry key="MSG_SL_ASINACOS_REL_VECT_PLUSONE_D">输入({0}) {1} 1</entry>
    <entry key="MSG_SL_SUBSYS_FCALL_S">函数调用</entry>
    <entry key="MSG_SL_SUBSYS_FCALL_D">函数调用</entry>
    <entry key="MSG_SL_SUBSYS_ENBLS_S">使能</entry>
    <entry key="MSG_SL_SUBSYS_ENBLS_D">已激活使能控制</entry>
    <entry key="MSG_SL_SUBSYS_ENBLV_S">向量使能</entry>
    <entry key="MSG_SL_SUBSYS_ENBLV_D">子系统使能表达式 (enable(1) || enable(2) || ...)</entry>
    <entry key="MSG_SL_SUBSYS_RESETS_S">重置</entry>
    <entry key="MSG_SL_SUBSYS_RESETS_D">已激活重置控制</entry>
    <entry key="MSG_SL_SUBSYS_TRIGS_S">触发器</entry>
    <entry key="MSG_SL_SUBSYS_TRIGS_D">出现触发器边沿</entry>
    <entry key="MSG_SL_SUBSYS_TRIGV_S">向量触发器</entry>
    <entry key="MSG_SL_SUBSYS_TRIGV_D">出现触发器边沿</entry>
    <entry key="MSG_SL_SUBSYS_ENBLS_TRIGS_D">使能时出现触发器边沿</entry>
    <entry key="MSG_SL_SUBSYS_ENBLS_TRIGV_S">IF (任一 TRIG &amp;&amp; ENBL)</entry>
    <entry key="MSG_SL_SUBSYS_ENBLS_TRIGV_D">使能时出现触发器边沿</entry>
    <entry key="MSG_SL_SUBSYS_ENBLV_TRIGS_S">IF (TRIG &amp;&amp; 任一 ENBL)</entry>
    <entry key="MSG_SL_SUBSYS_ENBLV_TRIGS_D">当 (enable(1) || enable(2) || ...) 为 true 时，出现触发器边沿</entry>
    <entry key="MSG_SL_SUBSYS_ENBLV_TRIGV_S">IF (任一 TRIG &amp;&amp; 任一 ENBL)</entry>
    <entry key="MSG_SL_SUBSYS_ENBLV_TRIGV_D">当 (enable(1) || enable(2) || ...) 为 true 时，出现触发器边沿</entry>
    <entry key="MSG_SL_SUBSYS_ENBL_COND_S">使能</entry>
    <entry key="MSG_SL_SUBSYS_ENBL_COND_D">使能</entry>
    <entry key="MSG_SL_SUBSYS_ENBLV_COND_S">使能[{0}]</entry>
    <entry key="MSG_SL_SUBSYS_ENBLV_COND_D">使能({0})</entry>
    <entry key="MSG_SL_SUBSYS_TRIG_COND_S">触发器</entry>
    <entry key="MSG_SL_SUBSYS_TRIG_COND_D">出现触发器边沿</entry>
    <entry key="MSG_SL_SUBSYS_TRIGV_COND_S">触发器[{0}]</entry>
    <entry key="MSG_SL_SUBSYS_TRIGV_COND_D">出现触发器({0})边沿</entry>
    <entry key="MSG_SL_SWITCH_BOOL_SCAL_S">切换触发器</entry>
    <entry key="MSG_SL_SWITCH_BOOL_SCAL_D">逻辑触发器输入</entry>
    <entry key="MSG_SL_SWITCH_BOOL_VECT_S">切换触发器 {0}</entry>
    <entry key="MSG_SL_SWITCH_BOOL_VECT_D">逻辑触发器输入({0})</entry>
    <entry key="MSG_SL_SWITCH_REAL_SCAL_S">触发器 {0} 阈值</entry>
    <entry key="MSG_SL_SWITCH_REAL_SCAL_D">触发器 {0} 阈值</entry>
    <entry key="MSG_SL_SWITCH_REAL_VECTU_S">触发器[{0}] {1} 阈值</entry>
    <entry key="MSG_SL_SWITCH_REAL_VECTU_D">触发器({0}) {1} 阈值</entry>
    <entry key="MSG_SL_SWITCH_REAL_VECTP_S">触发器 {0} 阈值[{1}]</entry>
    <entry key="MSG_SL_SWITCH_REAL_VECTP_D">触发器 {0} 阈值({1})</entry>
    <entry key="MSG_SL_SWITCH_REAL_VECTUP_S">触发器[{0}] {1} 阈值[{2}]</entry>
    <entry key="MSG_SL_SWITCH_REAL_VECTUP_D">触发器({0}) {1} 阈值({2})</entry>
    <entry key="MSG_SL_SWITCH_REAL_GT_SCAL_S">触发器 {0} 阈值</entry>
    <entry key="MSG_SL_SWITCH_REAL_GT_SCAL_D">触发器 {0} 阈值</entry>
    <entry key="MSG_SL_SWITCH_REAL_GT_VECTU_S">触发器[{0}] {1} 阈值</entry>
    <entry key="MSG_SL_SWITCH_REAL_GT_VECTU_D">触发器({0}) {1} 阈值</entry>
    <entry key="MSG_SL_SWITCH_REAL_GT_VECTP_S">触发器 {0} 阈值[{1}]</entry>
    <entry key="MSG_SL_SWITCH_REAL_GT_VECTP_D">触发器 {0} 阈值({1})</entry>
    <entry key="MSG_SL_SWITCH_REAL_GT_VECTUP_S">触发器[{0}] {1} 阈值[{2}]</entry>
    <entry key="MSG_SL_SWITCH_REAL_GT_VECTUP_D">触发器({0}) {1} 阈值({2})</entry>
    <entry key="MSG_SL_SWITCH_OUTCOME_T_D">true (输出来自第一个输入端口)</entry>
    <entry key="MSG_SL_SWITCH_OUTCOME_F_D">false (输出来自第三个输入端口)</entry>
    <entry key="MSG_SL_SWITCH_REAL_SCAL_0_S">触发器 {0} 0</entry>
    <entry key="MSG_SL_SWITCH_REAL_SCAL_0_D">触发器 {0} 0</entry>
    <entry key="MSG_SL_SWITCH_REAL_VECTU_0_S">触发器[{0}] {1} 0</entry>
    <entry key="MSG_SL_SWITCH_REAL_VECTU_0_D">触发器({0}) {1} 0</entry>
    <entry key="MSG_SL_SWITCH_REAL_VECTP_0_S">触发器 {0} 0[{1}]</entry>
    <entry key="MSG_SL_SWITCH_REAL_VECTP_0_D">触发器 {0} 0 ({1})</entry>
    <entry key="MSG_SL_SWITCH_REAL_VECTUP_0_S">触发器[{0}] {1} 0[{2}]</entry>
    <entry key="MSG_SL_SWITCH_REAL_VECTUP_0_D">触发器({0}) {1} 0({2})</entry>
    <entry key="MSG_SL_SWTCHCASE_S">切换输入</entry>
    <entry key="MSG_SL_SWTCHCASE_D">截断输入</entry>
    <entry key="MCG_SL_SWTCHCASE_OUTI_A">Case i</entry>
    <entry key="MSG_SC_MODE_A">模式 {0}</entry>
    <entry key="MSG_SC_MODE_S">模式 {0}</entry>
    <entry key="MSG_SC_MODE_D">模式 {0}</entry>
    <entry key="MSG_SC_MODE_OUTI_A">模式 m</entry>
    <entry key="MSG_SC_MODE_OUTI_S">{0}</entry>
    <entry key="MSG_SC_MODE_OUTI_D">{0}</entry>
    <entry key="MSG_SL_MPSWITCH_OUTCOME_PORT_A">Case i</entry>
    <entry key="MSG_SL_MPSWITCH_OUTCOME_PORT_S">Case {0} (out = in{1})</entry>
    <entry key="MSG_SL_MPSWITCH_OUTCOME_PORT_D">= {0} (输出来自输入端口 {1})</entry>
    <entry key="MSG_SL_MPSWITCH_OUTCOME_ELMNT_A">Case i</entry>
    <entry key="MSG_SL_MPSWITCH_OUTCOME_ELMNT_S">Case {0} (out = in[{1}])</entry>
    <entry key="MSG_SL_MPSWITCH_OUTCOME_ELMNT_D">= {0} (输出来自输入({1}))</entry>
    <entry key="MSG_SL_MPSWITCH_INT_SCAL_PORT_S">控制输入</entry>
    <entry key="MSG_SL_MPSWITCH_INT_SCAL_PORT_D">整数输入值</entry>
    <entry key="MSG_SL_MPSWITCH_INT_SCAL_ELMNT_S">控制输入</entry>
    <entry key="MSG_SL_MPSWITCH_INT_SCAL_ELMNT_D">整数输入值</entry>
    <entry key="MSG_SL_MPSWITCH_INT_VECT_S">控制输入[{0}]</entry>
    <entry key="MSG_SL_MPSWITCH_INT_VECT_D">整数输入({0})值</entry>
    <entry key="MSG_SL_MPSWITCH_REAL_SCAL_PORT_S">控制输入</entry>
    <entry key="MSG_SL_MPSWITCH_REAL_SCAL_PORT_D">截断输入值</entry>
    <entry key="MSG_SL_MPSWITCH_REAL_SCAL_ELMNT_S">控制输入</entry>
    <entry key="MSG_SL_MPSWITCH_REAL_SCAL_ELMNT_D">截断输入值</entry>
    <entry key="MSG_SL_MPSWITCH_REAL_VECT_S">控制输入[{0}]</entry>
    <entry key="MSG_SL_MPSWITCH_REAL_VECT_D">截断输入({0})值</entry>
    <entry key="MSG_OUT_CALL_A">已执行</entry>
    <entry key="MSG_OUT_CALL_S">已执行</entry>
    <entry key="MSG_OUT_CALL_D">已执行</entry>
    <entry key="MSG_OUT_IMPLICIT_DFLT_A"> implicit default</entry>
    <entry key="MSG_OUT_IMPLICIT_DFLT_S"> implicit default</entry>
    <entry key="MSG_OUT_IMPLICIT_DFLT_D"> implicit default</entry>
    <entry key="MSG_OUT_EXPLICIT_A"> otherwise</entry>
    <entry key="MSG_OUT_EXPLICIT_S"> otherwise</entry>
    <entry key="MSG_OUT_EXPLICIT_D"> otherwise</entry>
    <entry key="MSG_OUT_CASE_S">Case {0}</entry>
    <entry key="MSG_OUT_CASE_D">Case {0}</entry>
    <entry key="MSG_OUT_STATE_A">状态 i</entry>
    <entry key="MSG_OUT_STATE_D">状态 {0}</entry>
    <entry key="MSG_SL_SATURATE_ON_INTEGER_OVERFLOW">对整数溢出进行饱和处理</entry>
    <entry key="MSG_SF_TRANS_PRED_A">CND({0})</entry>
    <entry key="MSG_SF_TRANS_PRED_S">"{0}"</entry>
    <entry key="MSG_SL_TESTPOINT_A">TP</entry>
    <entry key="MSG_SL_TESTPOINT_S">{0}</entry>
    <entry key="MSG_SL_TESTPOINT_D">{0}</entry>
    <entry key="MSG_SL_TESTINTERVAL_A">TI</entry>
    <entry key="MSG_SL_TESTINTERVAL_S">{0}</entry>
    <entry key="MSG_SL_TESTINTERVAL_D">{0}</entry>
    <entry key="MSG_SL_TESTOBJECTIVE_SCAL_A">TO</entry>
    <entry key="MSG_SL_TESTOBJECTIVE_SCAL_S">{0}</entry>
    <entry key="MSG_SL_TESTOBJECTIVE_SCAL_D">{0}</entry>
    <entry key="MSG_SL_TESTOBJECTIVE_VECT_A">U({0})</entry>
    <entry key="MSG_SL_TESTOBJECTIVE_VECT_S">U({0})</entry>
    <entry key="MSG_SL_SATURATE_ON_INTEGER_OVERFLOW_A">SO</entry>
    <entry key="MSG_SL_BLOCK_COVERAGE_A">BC</entry>
    <entry key="MSG_SL_ABSVAL_SCAL_A">U&lt;0</entry>
    <entry key="MSG_SL_ABSVAL_VECT_A">U&lt;0</entry>
    <entry key="MSG_SL_ABSVAL_VECTC_A">U&lt;0</entry>
    <entry key="MSG_SL_ABSVAL_SCAL_S">U {0} 0</entry>
    <entry key="MSG_SL_ABSVAL_VECT_S">U({0}) {1} 0</entry>
    <entry key="MSG_SL_ABSVAL_VECTC_S">U(:) {0} 0</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_INT_LESS_A">-1</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_INT_LESS_S">-1</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_INT_LESS_D">-1</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_FIXPT_LESS_A">-LSB</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_FIXPT_LESS_S">-LSB</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_FIXPT_LESS_D">-LSB</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_REAL_LESS_A">[-tol..0)</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_REAL_LESS_S">[-tol..0)</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_REAL_LESS_D">[-tol..0)</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_REAL_LESS_CLOSED_A">[-tol..0]</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_REAL_LESS_CLOSED_S">[-tol..0]</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_REAL_LESS_CLOSED_D">[-tol..0]</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_INT_EQ_A">0</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_INT_EQ_S">0</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_INT_EQ_D">0</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_FIXPT_EQ_A">0</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_FIXPT_EQ_S">0</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_FIXPT_EQ_D">0</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_INT_GREATER_A">+1</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_INT_GREATER_S">+1</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_INT_GREATER_D">+1</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_FIXPT_GREATER_A">+LSB</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_FIXPT_GREATER_S">+LSB</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_FIXPT_GREATER_D">+LSB</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_REAL_GREATER_A">(0..tol]</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_REAL_GREATER_S">(0..tol]</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_REAL_GREATER_D">(0..tol]</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_REAL_GREATER_CLOSED_A">[0..tol]</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_REAL_GREATER_CLOSED_S">[0..tol]</entry>
    <entry key="MSG_SL_RELATIONALOP_OUTCOME_REAL_GREATER_CLOSED_D">[0..tol]</entry>
    <entry key="MSG_SL_RELATIONALOP_SCAL_A">{0}</entry>
    <entry key="MSG_SL_RELAY_ON_SCAL_S">U {0} OnThresh</entry>
    <entry key="MSG_SL_RELAY_ON_VECTU_S">U[{0}] {1} OnThresh</entry>
    <entry key="MSG_SL_RELAY_ON_VECTP_S">U {0} OnThresh[{1}]</entry>
    <entry key="MSG_SL_RELAY_ON_VECTUP_S">U[{0}] {1} OnThresh[{2}]</entry>
    <entry key="MSG_SL_RELAY_OFF_SCAL_S">U {0} OffThresh</entry>
    <entry key="MSG_SL_RELAY_OFF_VECTU_S">U[{0}] {1} OffThresh</entry>
    <entry key="MSG_SL_RELAY_OFF_VECTP_S">U {0} OffThresh[{1}]</entry>
    <entry key="MSG_SL_RELAY_OFF_VECTUP_S">U[{0}] {1} OffThresh[{2}]</entry>
    <entry key="MSG_SL_SATURATE_UL_SCAL_S">U {0} UL</entry>
    <entry key="MSG_SL_SATURATE_UL_VECTU_S">U[{0}] {1} UL</entry>
    <entry key="MSG_SL_SATURATE_UL_VECTP_S">U {0} UL[{1}]</entry>
    <entry key="MSG_SL_SATURATE_UL_VECTUP_S">U[{0}] {1} UL[{2}]</entry>
    <entry key="MSG_SL_SATURATE_LL_SCAL_S">U {0} LL</entry>
    <entry key="MSG_SL_SATURATE_LL_VECTU_S">U[{0}] {1} LL</entry>
    <entry key="MSG_SL_SATURATE_LL_VECTP_S">U {0} LL[{1}]</entry>
    <entry key="MSG_SL_SATURATE_LL_VECTUP_S">U[{0}] {1} LL[{2}]</entry>
    <entry key="MSG_SL_DEADZONE_UL_SCAL_S">U {0} UL</entry>
    <entry key="MSG_SL_DEADZONE_UL_VECTU_S">U[{0}] {1} UL</entry>
    <entry key="MSG_SL_DEADZONE_UL_VECTP_S">U {0} UL[{1}]</entry>
    <entry key="MSG_SL_DEADZONE_UL_VECTUP_S">U[{0}] {1} UL[{2}]</entry>
    <entry key="MSG_SL_DEADZONE_LL_SCAL_S">U {0} LL</entry>
    <entry key="MSG_SL_DEADZONE_LL_VECTU_S">U[{0}] {1} LL</entry>
    <entry key="MSG_SL_DEADZONE_LL_VECTP_S">U {0} LL[{1}]</entry>
    <entry key="MSG_SL_DEADZONE_LL_VECTUP_S">U[{0}] {1} LL[{2}]</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_SCAL_S">X &gt;= UL</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_VECTU_S">X({0}) &gt;= UL</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_VECTP_S">X &gt;= UL({0})</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_VECTUP_S">X({0}) &gt;= UL({1})</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_SCAL_S">X &lt;= LL</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_VECTU_S">X({0}) &lt;= LL</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_VECTP_S">X &lt;= LL({0})</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_VECTUP_S">X({0}) &lt;= LL({1})</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_STRICT_SCAL_S">X &gt; UL</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_STRICT_VECTU_S">X({0}) &gt; UL</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_STRICT_VECTP_S">X &gt; UL({0})</entry>
    <entry key="MSG_SL_DINTEGRATOR_UL_STRICT_VECTUP_S">X({0}) &gt; UL({1})</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_STRICT_SCAL_S">X &lt; LL</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_STRICT_VECTU_S">X({0}) &lt; LL</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_STRICT_VECTP_S">X &lt; LL({0})</entry>
    <entry key="MSG_SL_DINTEGRATOR_LL_STRICT_VECTUP_S">X({0}) &lt; LL({1})</entry>
    <entry key="MSG_SL_RATELIMITER_UL_SCAL_S">X {0} UL</entry>
    <entry key="MSG_SL_RATELIMITER_UL_VECTU_S">X[{0}] {1} UL</entry>
    <entry key="MSG_SL_RATELIMITER_UL_VECTP_S">X {0} UL[{1}]</entry>
    <entry key="MSG_SL_RATELIMITER_UL_VECTUP_S">X[{0}] {1} UL[{2}]</entry>
    <entry key="MSG_SL_RATELIMITER_LL_SCAL_S">X {0} LL</entry>
    <entry key="MSG_SL_RATELIMITER_LL_VECTU_S">X[{0}] {1} LL</entry>
    <entry key="MSG_SL_RATELIMITER_LL_VECTP_S">X {0} LL[{1}]</entry>
    <entry key="MSG_SL_RATELIMITER_LL_VECTUP_S">X[{0}] {1} LL[{2}]</entry>
    <entry key="MSG_SL_FCN_CONDITION_S">"{0}"</entry>
    <entry key="MSG_SL_FCN_CONDITION_D">"{0}"</entry>
    <entry key="MSG_SL_LOGIC_VECT_A">INi[J]</entry>
    <entry key="MSG_SL_LOGIC_SCAL_OUT_A">OUT</entry>
    <entry key="MSG_SL_LOGIC_VECT_OUT_A">OUT[i]</entry>
    <entry key="MSG_SL_LOGIC_DEC_SCAL_OUT_A">OUT</entry>
    <entry key="MSG_SL_LOGIC_DEC_VECT_OUT_A">OUT[i]</entry>
    <entry key="MSG_SL_CMBLOGIC_SCAL_A">IF (in)</entry>
    <entry key="MSG_SL_CMBLOGIC_VECT_A">SWITCH (IN)</entry>
    <entry key="MSG_SL_CMBLOGIC_ELM_A">IN[i]</entry>
    <entry key="MSG_SL_IF_SING_IF_A">IF</entry>
    <entry key="MSG_SL_IF_SING_IF_S">IF</entry>
    <entry key="MSG_SL_IF_MULT_IF_A">IF</entry>
    <entry key="MSG_SL_IF_MULT_ELSEIF_A">ElseIF</entry>
    <entry key="MSG_SL_IF_MULT_ELSEIF_S">Else IF #{0}</entry>
    <entry key="MSG_SL_FOR_CHECK_A">FOR</entry>
    <entry key="MSG_SL_WHILE_WHILETEST_A">WHILE</entry>
    <entry key="MSG_SL_WHILE_DOWHILETEST_A">DO-WHILE</entry>
    <entry key="MGG_SL_WHILE_MAXITERS_A">MX ITER</entry>
    <entry key="MSG_SL_MINMAX_SCAL_A">Out LGC</entry>
    <entry key="MSG_SL_MINMAX_VECT_A">OUTi LGC</entry>
    <entry key="MSG_SL_MIN_IDX_A">INi</entry>
    <entry key="MSG_SL_MAX_IDX_A">INi</entry>
    <entry key="MSG_SL_MIN_ELEM_IDX_A">INELEMi</entry>
    <entry key="MSG_SL_MAX_ELEM_IDX_A">INELEMi</entry>
    <entry key="MSG_SL_MIN_IDX_COLLAPSED_A">INCOLLAPSEDi</entry>
    <entry key="MSG_SL_MAX_IDX_COLLAPSED_A">INCOLLAPSEDi</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_SCAL_BEFORE_A">in - min(before)</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_SCAL_AFTER_A">in - min(after)</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_SCAL_VECT_BEFORE_A">in - min(input elements i before)</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_SCAL_VECT_AFTER_A">in - min(input elements i after)</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_VECT_VECT_BEFORE_A">in i - min(input elements i before)</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_VECT_VECT_AFTER_A">in i - min(input elements i after)</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_SCAL_BEFORE_A">in - max(before)</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_SCAL_AFTER_A">in - max(after)</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_SCAL_VECT_BEFORE_A">in - max(input elements i before)</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_SCAL_VECT_AFTER_A">in - max(input elements i after)</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_VECT_VECT_BEFORE_A">in i - max(input elements i before)</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_VECT_VECT_AFTER_A">in i - max(input elements i after)</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_AFTER_COLLAPSED_A">in i - min(input elements i after collapsed)</entry>
    <entry key="MSG_SL_MIN_RELBOUNDARY_BEFORE_COLLAPSED_A">in i - min(input elements i before collapsed)</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_AFTER_COLLAPSED_A">in i - max(input elements i after collapsed)</entry>
    <entry key="MSG_SL_MAX_RELBOUNDARY_BEFORE_COLLAPSED_A">in i - max(input elements i before collapsed)</entry>
    <entry key="MSG_SL_SIGNUM_SCAL_A">Out LGC</entry>
    <entry key="MSG_SL_SIGNUM_VECT_A">OUTi LGC</entry>
    <entry key="MSG_SL_SIGNUM_OUTCOME_NEGATIVE_A">INPUT NEGATIVE</entry>
    <entry key="MSG_SL_SIGNUM_OUTCOME_ZERO_A">INPUT ZERO</entry>
    <entry key="MSG_SL_SIGNUM_OUTCOME_POSITIVE_A">INPUT POSITIVE</entry>
    <entry key="MSG_SL_SIGNUM_REL_SCAL_A">input - 0 </entry>
    <entry key="MSG_SL_SIGNUM_REL_VECT_A">input[i] - 0 </entry>
    <entry key="MSG_SL_ASINACOS_SCAL_A">Out LGC</entry>
    <entry key="MSG_SL_ASINACOS_VECT_A">OUTi LGC</entry>
    <entry key="MSG_SL_ASINACOS_OUTCOME_MINUSONE_A">INPUT IS LESS THAN -1</entry>
    <entry key="MSG_SL_ASINACOS_OUTCOME_NUMBER_A">INPUT IS BETWEEN -1 AND 1</entry>
    <entry key="MSG_SL_ASINACOS_OUTCOME_PLUSONE_A">INPUT IS GREATER THAN 1</entry>
    <entry key="MSG_SL_ASINACOS_REL_SCAL_MINUSONE_A">input - (-1) </entry>
    <entry key="MSG_SL_ASINACOS_REL_SCAL_PLUSONE_A">input - 1 </entry>
    <entry key="MSG_SL_ASINACOS_REL_VECT_MINUSONE_A">input[i] - (-1) </entry>
    <entry key="MSG_SL_ASINACOS_REL_VECT_PLUSONE_A">input[i] - 1 </entry>
    <entry key="MSG_SL_SUBSYS_FCALL_A">FCALL</entry>
    <entry key="MSG_SL_SUBSYS_ENBLS_A">IF (ENBL)</entry>
    <entry key="MSG_SL_SUBSYS_ENBLV_A">IF (ENBL)</entry>
    <entry key="MSG_SL_SUBSYS_RESETS_A">IF (RESET)</entry>
    <entry key="MSG_SL_SUBSYS_TRIGS_A">IF (TRIG)</entry>
    <entry key="MSG_SL_SUBSYS_TRIGV_A">IF (TRIG)</entry>
    <entry key="MSG_SL_SUBSYS_ENBLS_TRIGS_A">IF (TRIG &amp; ENBL)</entry>
    <entry key="MSG_SL_SUBSYS_ENBLS_TRIGS_S">IF (TRIG &amp; ENBL)</entry>
    <entry key="MSG_SL_SUBSYS_ENBLS_TRIGV_A">IF (TRIG &amp; ENBL)</entry>
    <entry key="MSG_SL_SUBSYS_ENBLV_TRIGS_A">IF (TRIG &amp; ENBL)</entry>
    <entry key="MSG_SL_SUBSYS_ENBLV_TRIGV_A">IF (TRIG &amp; ENBL)</entry>
    <entry key="MSG_SL_SUBSYS_ENBL_COND_A">ENBL</entry>
    <entry key="MSG_SL_SUBSYS_ENBLV_COND_A">ENBL[i]</entry>
    <entry key="MSG_SL_SUBSYS_TRIG_COND_A">TRIG</entry>
    <entry key="MSG_SL_SUBSYS_TRIGV_COND_A">TRIG[i]</entry>
    <entry key="MSG_SL_SWITCH_BOOL_SCAL_A">IF TRIG</entry>
    <entry key="MSG_SL_SWITCH_BOOL_VECT_A">If TRIG[i]</entry>
    <entry key="MSG_SL_SWITCH_REAL_SCAL_A">TRIG &gt;= THRESH</entry>
    <entry key="MSG_SL_SWITCH_REAL_VECTU_A">TRIG[i] &gt;= THRESH</entry>
    <entry key="MSG_SL_SWITCH_REAL_VECTP_A">TRIG &gt;= THRESH[i]</entry>
    <entry key="MSG_SL_SWITCH_REAL_VECTUP_A">TRIG[i] &gt;= THRESH[i]</entry>
    <entry key="MSG_SL_SWITCH_REAL_GT_SCAL_A">TRIG &gt; THRESH</entry>
    <entry key="MSG_SL_SWITCH_REAL_GT_VECTU_A">TRIG[i] &gt; THRESH</entry>
    <entry key="MSG_SL_SWITCH_REAL_GT_VECTP_A">TRIG &gt; THRESH[i]</entry>
    <entry key="MSG_SL_SWITCH_REAL_GT_VECTUP_A">TRIG[i] &gt; THRESH[i]</entry>
    <entry key="MSG_SL_SWITCH_OUTCOME_T_A">T =&gt; IN1</entry>
    <entry key="MSG_SL_SWITCH_OUTCOME_T_S">true (out = in1)</entry>
    <entry key="MSG_SL_SWITCH_OUTCOME_F_A">F =&gt; IN3</entry>
    <entry key="MSG_SL_SWITCH_OUTCOME_F_S">false (out = in3)</entry>
    <entry key="MSG_SL_SWITCH_REAL_SCAL_0_A">TRIG - 0 </entry>
    <entry key="MSG_SL_SWITCH_REAL_VECTU_0_A">TRIG[i] - 0</entry>
    <entry key="MSG_SL_SWITCH_REAL_VECTP_0_A">TRIG - 0[i]</entry>
    <entry key="MSG_SL_SWITCH_REAL_VECTUP_0_A">TRIG[i] - 0[i]</entry>
    <entry key="MSG_SL_SWTCHCASE_A">Switch(in)</entry>
    <entry key="MCG_SL_SWTCHCASE_OUTI_S">{0}</entry>
    <entry key="MCG_SL_SWTCHCASE_OUTI_D">= {0}</entry>
    <entry key="MSG_SL_MPSWITCH_INT_SCAL_PORT_A">SWITCH(IN0)</entry>
    <entry key="MSG_SL_MPSWITCH_INT_SCAL_ELMNT_A">SWITCH(IN0)</entry>
    <entry key="MSG_SL_MPSWITCH_INT_VECT_A">SWITCH(IN0[i])</entry>
    <entry key="MSG_SL_MPSWITCH_REAL_SCAL_PORT_A">SWITCH(IN0)</entry>
    <entry key="MSG_SL_MPSWITCH_REAL_SCAL_ELMNT_A">SWITCH(IN0)</entry>
    <entry key="MSG_SL_MPSWITCH_REAL_VECT_A">SWITCH(IN0[i])</entry>
    <entry key="MSG_OUT_CASE_A"> </entry>
    <entry key="MSG_OUT_GENERIC_TXT_A">{0}</entry>
    <entry key="MSG_OUT_GENERIC_TXT_S">{0}</entry>
    <entry key="MSG_OUT_GENERIC_TXT_D">{0}</entry>
    <entry key="MSG_OUT_T_A">T</entry>
    <entry key="MSG_OUT_T_S">true</entry>
    <entry key="MSG_OUT_T_D">true</entry>
    <entry key="MSG_OUT_F_A">F</entry>
    <entry key="MSG_OUT_F_S">false</entry>
    <entry key="MSG_OUT_F_D">false</entry>
    <entry key="MSG_OUT_STATE_S">{0}</entry>
    <entry key="MSG_CUSTOM_TXT_A">{0}</entry>
    <entry key="MSG_CUSTOM_TXT_S">{0}</entry>
    <entry key="MSG_CUSTOM_TXT_D">{0}</entry>
  </message>
</rsccat>
