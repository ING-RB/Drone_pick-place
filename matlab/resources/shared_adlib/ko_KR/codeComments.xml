<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright 2024 The MathWorks, Inc.-->

<rsccat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" locale="ko_KR" product="shared_adlib" xsi:noNamespaceSchemaLocation="../../resources/schema/msgcat.xsd">
  <message>
    <entry key="AutoGenerated" context="diagnostic">prob2struct에 의해 {0}에 자동 생성됨</entry>
    <entry key="VarIndices" context="diagnostic">변수 인덱스입니다.</entry>
    <entry key="MapVariables" context="diagnostic">솔버 기반 변수를 문제 기반 변수에 매핑합니다.</entry>
    <entry key="CreateVariableJacobians" context="diagnostic">변수의 야코비 행렬을 만듭니다.</entry>
    <entry key="ComputeObjective" context="diagnostic">목적 함수를 구합니다.</entry>
    <entry key="ComputeEquation" context="diagnostic">방정식 값을 구합니다.</entry>
    <entry key="ComputeObjectiveGradient" context="diagnostic">목적 함수 {0}을(를) 계산합니다.</entry>
    <entry key="ComputeEquationJacobian" context="diagnostic">방정식의 야코비 행렬을 계산합니다.</entry>
    <entry key="InsertGradient" context="diagnostic">여기에 {0} 계산을 삽입합니다.</entry>
    <entry key="ComputeInequalityConstraints" context="diagnostic">부등식 제약 조건을 구합니다.</entry>
    <entry key="ComputeEqualityConstraints" context="diagnostic">등식 제약 조건을 구합니다.</entry>
    <entry key="ComputeConstraintGradient" context="diagnostic">제약 조건 기울기를 계산합니다.</entry>
    <entry key="SpecifyGradientHelp" context="diagnostic">{0} 코드를 호출하기 위해 {1} 옵션을 true로 설정하여 솔버에 알립니다.</entry>
    <entry key="ObjectiveFunctionHeader" context="diagnostic">목적 함수 값을 구합니다.\n\n 이 함수는 목적 함수의 값을 구합니다.\n 목적 함수의 {0} 계산을 추가하려면 생성 코드를 업데이트하십시오.</entry>
    <entry key="ObjectiveFunctionHeaderWithGradient" context="diagnostic">목적 함수의 값과 {0} 구하기</entry>
    <entry key="ObjectiveFunctionSyntax" context="diagnostic">은(는) 점 {1}에서 목적 함수 값 {0}을(를) 구합니다.</entry>
    <entry key="ObjectiveFunctionSyntaxWithExtraParams" context="diagnostic">은(는) {2}의 추가 파라미터를 사용하여 점 {1}에서 목적 함수 값 {0}을(를) 구합니다.</entry>
    <entry key="ObjectiveFunctionSyntaxWithExtraParamsAndParams" context="diagnostic">은(는) {2}의 추가 파라미터와 {3}의 파라미터를 사용하여 점 {1}에서 목적 함수 값 {0}을(를) 구합니다.</entry>
    <entry key="ObjectiveGradientSyntax" context="diagnostic">은(는) 현재 점에서 목적 함수의 {0} 값 {1}을(를) 추가로 구합니다.</entry>
    <entry key="ConstraintFunctionHeader" context="diagnostic">제약 조건 값을 구합니다.\n\n 이 함수는 제약 조건의 값을 구합니다.\n 제약 조건의 기울기 계산을 추가하려면 생성 코드를 업데이트하십시오.</entry>
    <entry key="ConstraintFunctionHeaderWithGradient" context="diagnostic">제약 조건의 값과 기울기 구하기</entry>
    <entry key="ConstraintFunctionSyntax" context="diagnostic">은(는) 점 {2}에서 부등식 제약 조건 값 {0}과(와) 등식 제약 조건 값 {1}을(를) 구합니다.</entry>
    <entry key="ConstraintFunctionSyntaxWithExtraParams" context="diagnostic">은(는) {3}의 추가 파라미터를 사용하여 점 {2}에서 부등식 제약 조건 값 {0}과(와) 등식 제약 조건 값 {1}을(를) 구합니다.</entry>
    <entry key="ConstraintFunctionSyntaxWithExtraParamsAndParams" context="diagnostic">은(는) {3}의 추가 파라미터와 {4}의 파라미터를 사용하여 점 {2}에서 부등식 제약 조건 값 {0}과(와) 등식 제약 조건 값 {1}을(를) 구합니다.</entry>
    <entry key="ConstraintGradientSyntax" context="diagnostic">은(는) 현재 점에서 부등식 제약 조건 기울기 값 {0}과(와) 등식 제약 조건 기울기 값 {1}을(를) 추가로 구합니다.</entry>
    <entry key="EquationFunctionHeader" context="diagnostic">방정식 값을 구합니다.\n\n 이 함수는 방정식 값을 구합니다.\n 방정식의 야코비 행렬 계산을 추가하려면 생성 코드를 업데이트하십시오.</entry>
    <entry key="EquationFunctionHeaderWithJacobian" context="diagnostic">방정식 값과 야코비 행렬을 구합니다.\n\n 이 함수는 방정식 값과 야코비 행렬 값을 구합니다.</entry>
    <entry key="EquationFunctionSyntax" context="diagnostic">는 점 {1}에서 방정식 값 {0}을(를) 구합니다.</entry>
    <entry key="EquationFunctionSyntaxWithExtraParams" context="diagnostic">는 {2}의 추가 파라미터를 사용하여 점 {1}에서 방정식 값 {0}을(를) 구합니다.</entry>
    <entry key="EquationFunctionSyntaxWithExtraParamsAndParams" context="diagnostic">은(는) {2}의 추가 파라미터와 {3}의 파라미터를 사용하여 점 {1}에서 방정식 값 {0}을(를) 구합니다.</entry>
    <entry key="EquationGradientSyntax" context="diagnostic">는 현재 점에서 방정식의 야코비 행렬 값 {0}을(를) 추가로 구합니다.</entry>
    <entry key="ReuseEvaluationFunctionHeader" context="diagnostic">함수 값을 구하고 가능한 경우 이전 값을 다시 사용합니다.</entry>
    <entry key="ReuseEvaluationFunctionSyntax" context="diagnostic">은(는) 입력값에서 구한 함수 값을 반환합니다. 입력값이 이전 값과 동일한 경우 함수는 영속 변수에 저장된 값을 반환합니다.</entry>
    <entry key="ReuseEvaluationPreviousInputs" context="diagnostic">이전 입력값입니다.</entry>
    <entry key="ReuseEvaluationPreviousOutputs" context="diagnostic">이전 출력값입니다.</entry>
    <entry key="ReuseEvaluationReuseStoredOutputs" context="diagnostic">함수가 이전 입력값으로 실행 중입니다.\n저장된 출력값을 반환합니다.</entry>
    <entry key="ReuseEvaluationComputeOutputs" context="diagnostic">함수가 새 입력값에서 실행 중입니다.\n함수를 실행하고 현재 입력값과 출력값을 저장합니다.</entry>
    <entry key="ReuseEvaluationSaveValues" context="diagnostic">입력값과 출력값을 저장합니다.</entry>
  </message>
</rsccat>
