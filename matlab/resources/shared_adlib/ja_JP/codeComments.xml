<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright 2024 The MathWorks, Inc.-->

<rsccat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" locale="ja_JP" product="shared_adlib" xsi:noNamespaceSchemaLocation="../../resources/schema/msgcat.xsd">
  <message>
    <entry key="AutoGenerated" context="diagnostic">{0} に prob2struct により自動生成</entry>
    <entry key="VarIndices" context="diagnostic">変数のインデックス。</entry>
    <entry key="MapVariables" context="diagnostic">ソルバーベースの変数を問題ベースにマップします。</entry>
    <entry key="CreateVariableJacobians" context="diagnostic">可変ヤコビアンを作成します。</entry>
    <entry key="ComputeObjective" context="diagnostic">目的関数を計算します。</entry>
    <entry key="ComputeEquation" context="diagnostic">方程式の値を計算します。</entry>
    <entry key="ComputeObjectiveGradient" context="diagnostic">目的関数の {0} を計算します。</entry>
    <entry key="ComputeEquationJacobian" context="diagnostic">方程式のヤコビアンを計算します。</entry>
    <entry key="InsertGradient" context="diagnostic">{0} の計算をここに挿入します。</entry>
    <entry key="ComputeInequalityConstraints" context="diagnostic">不等式制約を計算します。</entry>
    <entry key="ComputeEqualityConstraints" context="diagnostic">等式制約を計算します。</entry>
    <entry key="ComputeConstraintGradient" context="diagnostic">制約の勾配を計算します。</entry>
    <entry key="SpecifyGradientHelp" context="diagnostic">{0} コードを呼び出すには、{1} オプションを true に設定してソルバーに通知します。</entry>
    <entry key="ObjectiveFunctionHeader" context="diagnostic">目的関数の値を計算\n\n この関数は目的値を計算します。\n 生成されたコードを更新して、目的関数の {0} の計算を追加します。</entry>
    <entry key="ObjectiveFunctionHeaderWithGradient" context="diagnostic">目的関数の値と {0} を計算します</entry>
    <entry key="ObjectiveFunctionSyntax" context="diagnostic"> は、点 {1} における目的値 {0} を計算します。</entry>
    <entry key="ObjectiveFunctionSyntaxWithExtraParams" context="diagnostic"> は、{2} の追加パラメーターを使用して、点 {1} における目的値 {0} を計算します。</entry>
    <entry key="ObjectiveFunctionSyntaxWithExtraParamsAndParams" context="diagnostic"> は、{2} の追加パラメーターと {3} のパラメーターを使用して、点 {1} における目的値 {0} を計算します。</entry>
    <entry key="ObjectiveGradientSyntax" context="diagnostic"> はさらに、現在の点における目的関数の {0} の値 {1} を計算します。</entry>
    <entry key="ConstraintFunctionHeader" context="diagnostic">制約の値を計算\n\n この関数は制約の値を計算します。\n 生成されたコードを更新して、制約の勾配の計算を追加します。</entry>
    <entry key="ConstraintFunctionHeaderWithGradient" context="diagnostic">制約の値と勾配を計算します</entry>
    <entry key="ConstraintFunctionSyntax" context="diagnostic"> は、点 {2} における不等式制約の値 {0} および等式制約の値 {1} を計算します。</entry>
    <entry key="ConstraintFunctionSyntaxWithExtraParams" context="diagnostic"> は、{3} の追加パラメーターを使用して、点 {2} における不等式制約の値 {0} および等式制約の値 {1} を計算します。</entry>
    <entry key="ConstraintFunctionSyntaxWithExtraParamsAndParams" context="diagnostic"> は、{3} の追加パラメーターと {4} のパラメーターを使用して、点 {2} における不等式制約の値 {0} および等式制約の値 {1} を計算します。</entry>
    <entry key="ConstraintGradientSyntax" context="diagnostic"> はさらに、現在の点における不等式制約の勾配値 {0} および等式制約の勾配値 {1} を計算します。</entry>
    <entry key="EquationFunctionHeader" context="diagnostic">方程式の値を計算\n\n この関数は方程式の値を計算します。\n 生成されたコードを更新して、方程式のヤコビアンの計算を追加します。</entry>
    <entry key="EquationFunctionHeaderWithJacobian" context="diagnostic">方程式の値とヤコビアンを計算\n\n この関数は方程式の値とヤコビアンを計算します。</entry>
    <entry key="EquationFunctionSyntax" context="diagnostic"> は、点 {1} における方程式の値 {0} を計算します。</entry>
    <entry key="EquationFunctionSyntaxWithExtraParams" context="diagnostic"> は、{2} の追加パラメーターを使用して、点 {1} における方程式の値 {0} を計算します。</entry>
    <entry key="EquationFunctionSyntaxWithExtraParamsAndParams" context="diagnostic"> は、{2} の追加パラメーターと {3} のパラメーターを使用して、点 {1} における方程式の値 {0} を計算します。</entry>
    <entry key="EquationGradientSyntax" context="diagnostic"> はさらに、現在の点における方程式のヤコビアン値 {0} を計算します。</entry>
    <entry key="ReuseEvaluationFunctionHeader" context="diagnostic">可能な限り、関数値を計算して前の値を再利用してください。</entry>
    <entry key="ReuseEvaluationFunctionSyntax" context="diagnostic"> は、入力において計算された関数値を返します。この関数は、入力が前回の値と等しい場合に永続変数に保存されている値を返します。</entry>
    <entry key="ReuseEvaluationPreviousInputs" context="diagnostic">前回の入力値。</entry>
    <entry key="ReuseEvaluationPreviousOutputs" context="diagnostic">前回の出力値。</entry>
    <entry key="ReuseEvaluationReuseStoredOutputs" context="diagnostic">関数は前回の入力値で評価されています。\n格納されている出力が返されます。</entry>
    <entry key="ReuseEvaluationComputeOutputs" context="diagnostic">関数は新しい入力において評価されています。\n関数が評価され、現在の入力値と出力値が格納されます。</entry>
    <entry key="ReuseEvaluationSaveValues" context="diagnostic">入力値と出力値を保存してください。</entry>
  </message>
</rsccat>
