<?xml version="1.0"?>
<!-- Copyright 2018-2020 The MathWorks, Inc. -->
<rsccat version="1.0" locale="en_US" product="shared_adlib">
  <message>
    <!--Resource entries for non-error/warning strings-->
    <entry key="AutoGenerated" note="hole is date and time"  context="diagnostic">Auto-generated by prob2struct on {0}</entry>
    <entry key="VarIndices" note=""  context="diagnostic">Variable indices.</entry>
    <entry key="MapVariables" note=""  context="diagnostic">Map solver-based variables to problem-based.</entry>
    <entry key="CreateVariableJacobians" note=""  context="diagnostic">Create variable Jacobians.</entry>
    <entry key="ComputeObjective" note=""  context="diagnostic">Compute objective function.</entry>
    <entry key="ComputeEquation" note=""  context="diagnostic">Compute equation values.</entry>
    <entry key="ComputeObjectiveGradient" note=""  context="diagnostic">Compute objective {0}.</entry>
    <entry key="ComputeEquationJacobian" note=""  context="diagnostic">Compute equation Jacobian.</entry>
    <entry key="InsertGradient" note="The hole is an option name."  context="diagnostic">Insert {0} calculation here.</entry>
    <entry key="ComputeInequalityConstraints" note=""  context="diagnostic">Compute inequality constraints.</entry>
    <entry key="ComputeEqualityConstraints" note=""  context="diagnostic">Compute equality constraints.</entry>
    <entry key="ComputeConstraintGradient" note=""  context="diagnostic">Compute constraint gradients.</entry>
    <entry key="SpecifyGradientHelp" note=""  context="diagnostic">To call the {0} code, notify the solver by setting the {1} option to true.</entry>
    <entry key="ObjectiveFunctionHeader" note=""  context="diagnostic">Compute objective function value\n\n   This function computes the objective value.\n   Update the generated code to add the objective {0} computation.</entry>
    <entry key="ObjectiveFunctionHeaderWithGradient" note=""  context="diagnostic">Compute objective function value and {0}</entry>
    <entry key="ObjectiveFunctionSyntax" note="Before the sentence is the function syntax y = f(x), thus the sentence starts with lower case. First hole is output name, second hole is input name."  context="diagnostic">computes the objective value {0} at the point {1}.</entry>
    <entry key="ObjectiveFunctionSyntaxWithExtraParams" note="Before the sentence is the function syntax y = f(x,e), thus the sentence starts with lower case. First hole is output name, second hole is first input name, third hole is second input name."  context="diagnostic">computes the objective value {0} at the point {1}, using the extra parameters in {2}.</entry>
    <entry key="ObjectiveFunctionSyntaxWithExtraParamsAndParams" note="Before the sentence is the function syntax y = f(x,e,p), thus the sentence starts with lower case. First hole is output name, second hole is first input name, third hole is second input name, fourth hole is third input name."  context="diagnostic">computes the objective value {0} at the point {1}, using the extra parameters in {2} and parameters in {3}.</entry>
    <entry key="ObjectiveGradientSyntax" note="Before the sentence is the function syntax y = f(x,e), thus the sentence starts with lower case. The hole is an output name."  context="diagnostic">additionally computes the objective {0} value {1} at the current point.</entry>
    <entry key="ConstraintFunctionHeader" note=""  context="diagnostic">Compute constraint values\n\n   This function computes the constraint values.\n   Update the generated code to add the constraints gradient computation.</entry>
    <entry key="ConstraintFunctionHeaderWithGradient" note=""  context="diagnostic">Compute constraint values and gradients</entry>    
    <entry key="ConstraintFunctionSyntax" note="Before the sentence is the function syntax [c,d] = f(x), thus the sentence starts with lower case. First hole is first output name, second hole is second output name, third hole is input name."  context="diagnostic">computes the inequality constraint values {0} and the equality constraint values {1} at the point {2}.</entry>
    <entry key="ConstraintFunctionSyntaxWithExtraParams" note="Before the sentence is the function syntax [c,d] = f(x,e), thus the sentence starts with lower case. First hole is first output name, second hole is second output name, third hole is first input name, fourth hole is second input name."  context="diagnostic">computes the inequality constraint values {0} and the equality constraint values {1} at the point {2}, using the extra parameters in {3}.</entry>
    <entry key="ConstraintFunctionSyntaxWithExtraParamsAndParams" note="Before the sentence is the function syntax [c,d] = f(x,e), thus the sentence starts with lower case. First hole is first output name, second hole is second output name, third hole is first input name, fourth hole is second input name."  context="diagnostic">computes the inequality constraint values {0} and the equality constraint values {1} at the point {2}, using the extra parameters in {3} and parameters in {4}.</entry>
    <entry key="ConstraintGradientSyntax" note="Before the sentence is the function syntax y = f(x,e), thus the sentence starts with lower case. The two holes are output names."  context="diagnostic">additionally computes the inequality constraint gradient values {0} and the equality constraint gradient values {1} at the current point.</entry>
    <entry key="EquationFunctionHeader" note=""  context="diagnostic">Compute equation values\n\n   This function computes the value of the equations.\n   Update the generated code to add the equation Jacobian computation.</entry>
    <entry key="EquationFunctionHeaderWithJacobian" note=""  context="diagnostic">Compute equation values and the Jacobian\n\n   This function computes the value of the equations and the Jacobian.</entry>    
    <entry key="EquationFunctionSyntax" note="Before the sentence is the function syntax y = f(x), thus the sentence starts with lower case. First hole is output name, second hole is input name."  context="diagnostic">computes the value of the equations {0} at the point {1}.</entry>
    <entry key="EquationFunctionSyntaxWithExtraParams" note="Before the sentence is the function syntax y = f(x,e), thus the sentence starts with lower case. First hole is output name, second hole is first input name, third hole is second input name."  context="diagnostic">computes the value of the equations {0} at the point {1}, using the extra parameters in {2}.</entry>
    <entry key="EquationFunctionSyntaxWithExtraParamsAndParams" note="Before the sentence is the function syntax y = f(x,e,p), thus the sentence starts with lower case. First hole is output name, second hole is first input name, third hole is second input name, fourth hole is third input name."  context="diagnostic">computes the value of the equations {0} at the point {1}, using the extra parameters in {2} and parameters in {3}.</entry>
    <entry key="EquationGradientSyntax" note="Before the sentence is the function syntax y = f(x,e), thus the sentence starts with lower case. The hole is an output name."  context="diagnostic">additionally computes the equation Jacobian value {0} at the current point.</entry>
    <entry key="ReuseEvaluationFunctionHeader" note=""  context="diagnostic">Compute function values and reuse previous values whenever possible.</entry>
    <entry key="ReuseEvaluationFunctionSyntax" note="Before the sentence is the function syntax y = f(x,e), thus the sentence starts with lower case."  context="diagnostic">returns the function values computed at the inputs. The function returns the values stored in persistent variables if the inputs are equal to their previous values.</entry>
    <entry key="ReuseEvaluationPreviousInputs" note=""  context="diagnostic">Previous input values.</entry>
	<entry key="ReuseEvaluationPreviousOutputs" note=""  context="diagnostic">Previous output values.</entry>
	<entry key="ReuseEvaluationReuseStoredOutputs" note=""  context="diagnostic">The function is being evaluated with the previous input values.\nReturn the stored outputs.</entry>
	<entry key="ReuseEvaluationComputeOutputs" note=""  context="diagnostic">The function is being evaluated at new inputs.\nEvaluate the function and store the current input and output values.</entry>
	<entry key="ReuseEvaluationSaveValues" note=""  context="diagnostic">Save the input and output values.</entry>
  </message>
</rsccat>

<!--Please use note attribute to describe note="" context of message-->
