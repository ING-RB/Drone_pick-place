<?xml version="1.0" encoding="UTF-8" ?>
<rsccat version="1.0" locale="en_US" product="Coder">
  <message>
    <entry key="minrhs">Not enough input arguments.</entry>
    <entry key="nearlySingularMatrix">Matrix is close to singular or badly scaled. Results may be inaccurate. RCOND = {0}.</entry>
    <entry key="rankDeficientMatrix">Rank deficient, rank = {0,number,integer}, tol = {1}.</entry>
    <entry key="illConditionedMatrix">Matrix is singular, close to singular or badly scaled. Results may be inaccurate. RCOND = {0}.</entry>
    <entry key="dimagree">Matrix dimensions must agree.</entry>
    <entry key="posdef">Matrix must be positive definite.</entry>
    <entry key="integerPower">Integers can only be raised to positive integral powers.</entry>
    <entry key="square">Matrix must be square.</entry>
    <entry key="NonIntegerInput">Size argument must be an integer in the range: {0,number,integer} to {1,number,integer}.</entry>
    <entry key="pmaxsize">Maximum variable size allowed by the program is exceeded.</entry>
    <entry key="mixedClasses">Integers can only be combined with integers of the same class, or scalar doubles.</entry>
    <entry key="oneOperandMustBeScalar">Integer data types are not fully supported for this operation. At least one operand must be a scalar.</entry>
    <entry key="complexInts">Complex integer arithmetic is not supported.</entry>
    <entry key="quadgk_increasedRelTol">RelTol was increased to 100*eps(''{0}'') = {1}.</entry>
    <entry key="quadgk_MaxIntervalCountReached">Reached the limit on the maximum number of intervals in use. Approximate bound on error is{0}. The integral may not exist, or it may be difficult to approximate numerically. Increase MaxIntervalCount to {1} to enable QUADGK to continue for another iteration.</entry>
    <entry key="quadgk_MinStepSize">Minimum step size reached near x = {0}; singularity possible.</entry>
    <entry key="fzero_checkfun_NaNFval">User function returned NaN when evaluated at {0}; FZERO cannot continue.</entry>
    <entry key="quad2d_increasedRelTol">RelTol was increased to 100*eps(''{0}'') = {1}.</entry>
    <entry key="quad2d_maxFunEvalsFail">Reached the maximum number of function evaluations ({0,number,integer}). The result fails the global error test.</entry>
    <entry key="quad2d_maxFunEvalsPass">Reached the maximum number of function evaluations ({0,number,integer}). The result passes the global error test.</entry>
    <entry key="betaincinv_FailedToConverge">Inverse incomplete beta did not converge for p = {0}, a = {1}, b = {2}.</entry>
    <entry key="gammaincinv_StartingValueFailedToConverge">Inverse incomplete gamma unable to find an initial value with p = {0}, a = {1}.</entry>
    <entry key="gammaincinv_FailedToConverge">Inverse incomplete gamma did not converge for p = {0}, a = {1}.</entry>
    <entry key="bitSetGet_BITOutOfRange">BIT must be integers between 1 and {0,number,integer} for {1}.</entry>
    <entry key="conv2_firstTwoInputsNotVectors">HCOL and HROW must be vectors.</entry>
    <entry key="corrcoef_invalidAlpha">The ''alpha'' parameter must be a scalar between 0 and 1.</entry>
    <entry key="corrcoef_invalidRowChoice">Valid row choices are ''all'', ''complete'', and ''pairwise''.</entry>
    <entry key="cov_inputMustBe2D">Input must be 2-D.</entry>
    <entry key="cumtrapz_LengthXMismatchY">numel(x) must equal the length of the first non-singleton dimension of y.</entry>
    <entry key="cumtrapz_LengthXMismatchYDIM">numel(x) must equal the length of the DIM''th dimension of Y.</entry>
    <entry key="del2_InvalidInputs">Invalid inputs to DEL2.</entry>
    <entry key="detrend_BPnonfinite">The BP vector must contain only integer values.</entry>
    <entry key="detrend_BPnonunique">All elements of the BP vector must be unique.</entry>
    <entry key="detrend_BPnotsorted">The BP vector must be sorted in ascending order.</entry>
    <entry key="detrend_BPoutofrange">The BP vector must contain values in the interval [1,N-2] for data of length N.</entry>
    <entry key="detrend_InvalidTrendType">Invalid trend type.</entry>
    <entry key="fftfcn_outputSizeLessThanNdimsElements">FFTN output size must have at least NDIMS elements.</entry>
    <entry key="filter_firstElementOfDenominatorFilterNotFinite">First denominator filter coefficient must be finite.</entry>
    <entry key="filter_firstElementOfDenominatorFilterZero">First denominator filter coefficient must be non-zero.</entry>
    <entry key="filter_invalidInitialConditions">Initial conditions must be a vector of length max(length(a),length(b))-1,\nor an array with the leading dimension of size max(length(a),length(b))-1\nand with remaining dimensions matching those of x.</entry>
    <entry key="gradient_InvalidInputs">Invalid inputs to GRADIENT.</entry>
    <entry key="histc_InvalidInput3">Edges vector must be monotonically non-decreasing.</entry>
    <entry key="SORTROWS_inputDimensionMismatch">X must be a 2-D matrix.</entry>
    <entry key="sortrows_COLmismatchX">COL must be a vector of column indices into X.</entry>
    <entry key="trapz_LengthXmismatchY">numel(x) must equal the length of the first non-singleton dimension of y.</entry>
    <entry key="trapz_LengthXmismatchYDIM">numel(x) must equal the length of the DIM''th dimension of Y.</entry>
    <entry key="typecastc_notEnoughInputElements">Too few input values to make output type.</entry>
    <entry key="bsxfun_arrayDimensionsMustMatch">Non-singleton dimensions of the two input arrays must match each other.</entry>
    <entry key="catenate_dimensionMismatch">CAT arguments dimensions are not consistent.</entry>
    <entry key="concatenation_integerInteraction">Concatenation with dominant (left-most) ,integer class may overflow other operands on conversion to return class.</entry>
    <entry key="find_NotScalarInt">Second argument must be a positive scalar integer.</entry>
    <entry key="hankel_AntiDiagonalConflict">Last element of input column does not match first element of input row. Column wins anti-diagonal conflict.</entry>
    <entry key="ind2sub_IndexOutOfRange">Out of range subscript.</entry>
    <entry key="ltitr_invalidInitialCondition">Initial condition vector has incorrect dimensions.</entry>
    <entry key="rand_invalidTwisterState">State must be a scalar double or the output of RAND(''twister'').</entry>
    <entry key="getReshapeDims_notSameNumel">To RESHAPE the number of elements must not change.</entry>
    <entry key="getReshapeDims_sizeVector">Size vector must have at least two elements.</entry>
    <entry key="getReshapeDims_unknownDim">Size can only have one unknown dimension.</entry>
    <entry key="halfMulNoComplexGPU">For GPU Coder, half precision matrix multiplication can only be performed with real inputs.</entry>
    <entry key="toeplitz_DiagonalConflict">First element of input column does not match first element of input row. Column wins diagonal conflict.</entry>
    <entry key="tril_firstInputMustBe2D">First input must be 2D.</entry>
    <entry key="tril_kthDiagInputNotInteger">K-th diagonal input must be an integer scalar.</entry>
    <entry key="triu_firstInputMustBe2D">First input must be 2D.</entry>
    <entry key="triu_kthDiagInputNotInteger">K-th diagonal input must be an integer scalar.</entry>
    <entry key="getdimarg_dimensionMustBePositiveInteger">Dimension must be a real positive integer scalar.</entry>
    <entry key="svd_NoConvergence">SVD fails to converge</entry>
    <entry key="quad2d_FunVectorization">Integrand function outputs did not match to the required tolerance when the same input values were supplied in two separate calls with different size input matrices.  Check that the function is vectorized properly.</entry>
    <entry key="quad2d_maxRectanglesFail">Exceeded the maximum number of rectangles queued for refinement. The result fails the global error test.</entry>
    <entry key="quad2d_maxRectanglesPass">Exceeded the maximum number of rectangles queued for refinement. The result passes the global error test.</entry>
    <entry key="quadgk_invalidWaypoints">Waypoints must be a vector.</entry>
    <entry key="quadgk_nonfiniteWaypoints">Waypoints must be finite.</entry>
    <entry key="chol_matrixMustBePosDefWithRealDiag">Matrix must be positive definite with real diagonal.</entry>
    <entry key="linsolve_CombinationOfFieldsNotCurrentlySupported">The option selected by the combination of fields in the structure array is currently not supported.</entry>
    <entry key="linsolve_inputDim">First and second arguments must be 2D.</entry>
    <entry key="linsolve_inputType">First and second arguments must be single or double.</entry>
    <entry key="norm_unknownNorm">The only matrix norms available are 1, 2, inf, and ''fro''.</entry>
    <entry key="qr_unknownOptionForEconomySizeDecomposition">Use qr(X,0) for economy size decomposition.</entry>
    <entry key="svd_matrixWithNaNInf">Input to SVD must not contain NaN or Inf.</entry>
    <entry key="andOrXor_sizeMismatch">Inputs must have the same size.</entry>
    <entry key="bitcmp_bitArgMustBeIntInAppropriateRange">The BIT argument to BITCMP must be a real scalar integer in the appropriate range.</entry>
    <entry key="bitshift_inputsMustBeIntegers">Inputs must be integers.</entry>
    <entry key="colon_OutOfRange">Colon operands must be in range of the data
    type and exactly representable without loss of precision.</entry>
    <entry key="colon_scalarDoubleMustBeIntegerValued">Double operands interacting with integer or char operands must have integer values.</entry>
    <entry key="setxor_AandBColnumAgree">A and B must have the same number of columns.</entry>
    <entry key="ISMEMBER_AandBColnumAgree">A and B must have the same number of columns.</entry>
    <entry key="mldivide_inputsMustBe2D">Input arguments must be 2-D.</entry>
    <entry key="mrdivide_inputsMustBe2D">Input arguments must be 2-D.</entry>
    <entry key="mtimes_inputsMustBe2D">Input arguments must be 2-D.</entry>
    <entry key="interp1_YInvalidLength">X and Y must be of the same length.</entry>
    <entry key="interp1_YInvalidNumRows">Y must have length(X) rows.</entry>
    <entry key="padecoef_TZeroNotSupported">T=0 is not supported.</entry>
    <entry key="polyfit_RepeatedPoints">Polynomial is badly conditioned. Add points with distinct X values or reduce the degree of the polynomial.</entry>
    <entry key="polyfit_RepeatedPointsOrRescale">Polynomial is badly conditioned. Add points with distinct X values, reduce the degree of the polynomial, or try centering and scaling as described in HELP POLYFIT.</entry>
    <entry key="polyval_ZeroDOF">Zero degrees of freedom implies infinite error bounds.</entry>
    <entry key="betaincinv_PositiveW">W must be real and non-negative.</entry>
    <entry key="betaincinv_PositiveZ">Z must be real and non-negative.</entry>
    <entry key="betaincinv_YOutOfRange">Y must be in the interval [0,1].</entry>
    <entry key="betainc_PositiveW">W must be real and non-negative.</entry>
    <entry key="betainc_PositiveZ">Z must be real and non-negative.</entry>
    <entry key="betainc_XOutOfRange">X must be in the interval [0,1].</entry>
    <entry key="gammainc_NegativeArg">A must be real and non-negative.</entry>
    <entry key="gammainc_InvalidTailArg">TAIL must be ''lower'' or ''upper''.</entry>
    <entry key="gammaincinv_NegativeArg">A must be real and non-negative.</entry>
    <entry key="gammaincinv_YOutOfRange">Y must be in the interval [0,1].</entry>
    <entry key="gcd_largestFlint">Inputs contain values larger than the largest consecutive flint. Result may be inaccurate.</entry>
    <entry key="nchoosek_LargeCoefficient">Result may not be exact.</entry>
    <entry key="hex2dec_InvalidInputClass" note="stringDatatypeUpdate">Input must be a character vector.</entry>
    <entry key="structfun_functionHandle">First input must be a function handle.</entry>
    <entry key="structfun_UnimplementedOutputArrayType">{0} output type is not currently implemented.</entry>
    <entry key="structfun_NotAScalarOutput">Output {0,number,integer} is not a fixed-size scalar. Set ''UniformOutput'' to false.</entry>
    <entry key="badsubscript">Subscript indices must either be real positive integers or logicals.</entry>
    <entry key="subsdeldimmismatch">Matrix index is out of range for deletion.</entry>
    <entry key="strjust_inputMustBe2D">Input must be 2-D.</entry>
    <entry key="strtok_inputMustBeVector">Input must be a vector.</entry>
    <entry key="bin2decInvalidCharacters">Binary text must consist of characters 0 and 1.</entry>
    <entry key="bin2decTooManyDigits">Binary text has too many digits for specified or implied type suffix.</entry>
    <entry key="bin2decSuffixRequiresPrefix">Use of type suffix in binary text requires the use of 0b prefix.</entry>
    <entry key="hex2decInvalidCharacters">Hexadecimal text must consist of characters 0-9 and A-F.</entry>
    <entry key="hex2decTooManyDigits">Hexadecimal text has too many digits for specified or implied type suffix.</entry>
    <entry key="hex2decSuffixRequiresPrefix">Use of type suffix in hexadecimal text requires the use of 0x prefix.</entry>
    <entry key="ToDecInputType">Input argument must be a character vector, string, or cell array of character vectors.</entry>
    <entry key="CoderLicenseNotUsableByMATLAB">coder.license can only be used by a code generation target.</entry>
  </message>
</rsccat>
