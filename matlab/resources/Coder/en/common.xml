<?xml version="1.0" encoding="UTF-8" ?>
<!-- Copyright 1994-2024 The MathWorks, Inc. -->
<rsccat version="1.0" locale="en_US" product="Coder">
  <message>
    <entry key="Test" translate="false">Some Message: ''{0}'', {1, number, integer}. </entry>
    <entry key="TestNumNum" translate="false">Some Message: {0, number, integer}, {1, number, integer}. </entry>
    <entry key="NotEnoughInputs">Not enough input arguments.</entry>
    <entry key="TooManyInputs">Too many input arguments.</entry>
    <entry key="NotRealInput">Inputs must be real.</entry>
    <entry key="NoWritePermissions">Ensure that the project file {0} is located in a writable directory.</entry>
    <entry key="ProjectFileNotFound">File ''{0}'' not found.</entry>
    <entry key="ScreeningMathWorksFile">This tool does not analyze MathWorks files.</entry>
    <entry key="ScreenerCodeInputStruct">The input to the '-code' option must be a struct with fields 'Code' and 'Path'</entry>
    <entry key="NonMFile">File must be a MATLAB code file ({0}).</entry>
    <entry key="ProjectFileInvalid">File ''{0}'' is not a valid project that generates a library or executable or is incompatible with this version of MATLAB.</entry>
    <entry key="RequireSameUIntOrDouble">Inputs must be unsigned integers of the same class or one input may be a scalar double.</entry>
    <entry key="EMLCDeprecation">EMLC is obsolete and will be removed in a future release. For code generation use CODEGEN. Use CODER.UPGRADE to help convert your code to the new syntax. </entry>
    <entry key="EMLMEXDeprecation">EMLMEX is obsolete and will be removed in a future release. For general purpose acceleration and code generation use CODEGEN (requires a MATLAB Coder license). Use CODER.UPGRADE to help convert your code to the new syntax. </entry>
    <entry key="EMLMEXDeprecationFIACCEL">EMLMEX is obsolete and will be removed in a future release. To accelerate Fixed-point MATLAB code use FIACCEL. For general purpose acceleration and code generation use CODEGEN (requires a MATLAB Coder license). Use CODER.UPGRADE to help convert your code to the new syntax. </entry>
    <entry key="EMLCDeprecated">EMLC is obsolete. For code generation use CODEGEN. Use CODER.UPGRADE to help convert your code to the new syntax. </entry>
    <entry key="EMLMEXDeprecated">EMLMEX is obsolete. For general purpose acceleration and code generation use CODEGEN (requires a MATLAB Coder license). Use CODER.UPGRADE to help convert your code to the new syntax. </entry>
    <entry key="EMLMEXDeprecatedFIACCEL">EMLMEX is obsolete. To accelerate Fixed-point MATLAB code use FIACCEL. For general purpose acceleration and code generation use CODEGEN (requires a MATLAB Coder license). Use CODER.UPGRADE to help convert your code to the new syntax. </entry>
    <entry key="NoShortPathName">There is no short path form of ''{0}'' available. Short path names do not include embedded spaces. The short path name feature may be disabled in your operating system. Short path names are required for successful code generation, therefore it may not be possible to successfully complete the code generation process. To avoid this problem, enable short path name support in your operating system, or do not attempt code generation in paths containing spaces.</entry>
    <entry key="MultipleUserNumOutputs">'-nargout' option must not be specified more than once per function.</entry>
    <entry key="InvalidOptionBeforeFunction">''{0}'' option can only be used after specifying a function name.</entry>
    <entry key="InputArgUntypeable">Function input at {0} does not have a valid type.</entry>
    <entry key="GlobalInitValueUntypeable">The initialization value of global ''{0}'' does not have a valid type.</entry>
    <entry key="GlobalValueTypeMismatch">The initialization value of global ''{0}'' has a type different from its type specification at {1}. The types must be the same.</entry>
    <entry key="MissingGlobalInitialValue">Missing initialization value for global ''{0}''.</entry>
    <entry key="GlobalTypeValuePair">The specification for the global ''{0}'' at {1} is not of the correct format.\nThe correct format requires a cell array whose first element is a coder.Type object and the second element is the initialization value.</entry>
    <entry key="GlobalConstantTypeValuePair">The specification for the global ''{0}'' at {1} is not of the correct syntax.\nTo specify a non-constant global, provide a cell array whose first element is a coder.Type object that is not a coder.Constant, and whose second element is the initialization value.</entry>
    <entry key="MultipleConfigObjs">Specification of more than one configuration object is not supported.</entry>
    <entry key="ConfigTypeNotString" note="stringDatatypeUpdate">The first input to coder.config must be a character vector constant.</entry>
    <entry key="MathWorksUseOnlyMethod">This method is for MathWorks use only.</entry>
    <entry key="InvalidTargetLanguage">Invalid language specified in targetLang(). Allowed values include: ''GPU'',''CUDA'',''C++'' and ''C''.</entry>
    <entry key="InvalidInputTypeClass">Invalid input type class ''{0}'' specified for ''{1}''.</entry>
    <entry key="InvalidToolchainWarning">Invalid toolchain ''{0}'' specified. Reverting to default toolchain.</entry>

    <!-- Messages used by coder.newtype, coder.typeof and coder.resize -->
    <entry key="PathException">Error occurred while decomposing object.</entry>
    <entry key="OpaqueTypesEntryMustSupportEntryPointIO">This coder.opaque type is not supported as entry-point function argument.</entry>
    <entry key="InvalidConstantValue"><![CDATA[Invalid value found at <obj>{0}]]></entry>
    <entry key="InvalidInputClass">Inconsistent input arguments: expected class ''{0}'', found ''{1}''</entry>
    <entry key="MethodNotFound">Unable to find method ''{0}''. Available methods are: {1}.</entry>
    <entry key="InvalidMethodsIndexing">To access the Methods property of a coder.ClassType object, provide a method name.</entry>
    <entry key="InvalidMethodName">Invalid method name ''{0}''. Method names must have the format "MethodName", "set.PropertyName", or "get.PropertyName", where MethodName and PropertyName are valid variable names.</entry>
    <entry key="InvalidDeleteMethod">To delete a method, assign ''classType.Methods.{0}'' to [].</entry>
    <entry key="EntryPointMethodNameMismatch">The name of method ''{0}'' must be the same as the name of entry-point function ''{1}''.</entry>
    <entry key="DuplicateEntryPointClass">Remove duplicate specifications of entry-point class ''{0}''.</entry>
    <entry key="PrivateClassMethod">''{0}'' is a private method in the ''{1}'' class. addMethod() only accepts public or protected methods.</entry>
    <entry key="HandleClassAsIOArgument">''{0}'' is not supported as an I/O argument to entry-point function as it is a handle class.</entry>
    <entry key="TypeConversion"><![CDATA[Type conversion failed at <obj>{0}.]]></entry>
    <entry key="Resize"><![CDATA[Resize failed at <obj>{0}]]></entry>
    <entry key="TypeOfArrayOfTypes">coder.typeof cannot be applied on an array of coder.type objects.</entry>
    <entry key="TypeOfEmptyStruct">coder.typeof cannot be applied to a structure with no fields.</entry>
    <entry key="TypeCannotContainInitialValue">The type ''{0}'' cannot contain the specified initial value.</entry>
    <entry key="UnionClassName">Unable to merge coder.Types due to mutually incompatible coder.Types ''{0}'' and ''{1}''.</entry>
    <entry key="UnionCoderOpaque">Unable to merge different coder.OpaqueType objects.</entry>
    <entry key="UnionOutputTypeEntryPointName">Unable to merge coder.OutputTypes with different entry-point function names.</entry>
    <entry key="UnionOutputTypeEntryPointOutputIndex">Unable to merge coder.OutputTypes with different entry-point function output indices.</entry>
    <entry key="UnionTypeMismatch">Unable to merge {0} objects due to: {1}</entry>
    <entry key="UnionConstant">Unable to merge coder.Constants with different constants.</entry>
    <entry key="UnionMxArrayConstant">Unable to merge coder.internal.MxArrayConstants with different constants.</entry>
    <entry key="UnionSparse">Unable to merge a sparse and a non-sparse coder.Types.</entry>
    <entry key="UnionCStructName">Unable to merge coder.StructTypes with different TypeName properties.</entry>
    <entry key="UnionCStructExtern">Unable to merge coder.StructTypes with different Extern properties.</entry>
    <entry key="UnionCStructHeader">Unable to merge coder.StructTypes with different HeaderFile properties.</entry>
    <entry key="UnionCStructAlignment">Unable to merge coder.StructTypes with different Alignment properties.</entry>
    <entry key="UnionStructFields">Unable to merge coder.StructTypes with different sets of fields.</entry>
    <entry key="UnionClassProperties">Unable to merge coder.ClassTypes with different sets of properties.</entry>
    <entry key="UnionCellElements">Unable to merge coder.CellType objects that are heterogeneous but have different sizes.</entry>
    <entry key="UnionCellHomogeneity">Unable to merge coder.CellTypes with different homogeneity.</entry>
    <entry key="UnionNumericTypes">Unable to merge coder.FiTypes with different numeric types.</entry>
    <entry key="UnionFiMath">Unable to merge coder.FiTypes with different Fimath.</entry>
    <entry key="UnionLocalFiMath">Unable to merge a coder.FiType with local Fimath with a coder.FiType without local Fimath.</entry>
    <entry key="UnionEmptyStructArray">Cannot create a type from an empty array of structures.</entry>
    <entry key="UnionEnumName">Cannot union coder.EnumTypes with different enumeration names.</entry>
    <entry key="UnionNonScalarType">Code generation does not support the union of non-scalar coder.Type objects.</entry>
    <entry key="TypeSpecHandleClassNotSupported">Class {0} is not supported by coder.Type as it is a handle class.</entry>
    <entry key="TypeSpecClassName">Class name must be specified as a character vector or string scalar.</entry>
    <entry key="CoderTypeObjectParameterNonScalar">Invalid object. Value must be a scalar.</entry>
    <entry key="SizeVecReal">Size dimension specification must be real.</entry>
    <entry key="SizeVecNonNegative">Size dimension specification must be non negative.</entry>
    <entry key="SizeVecIntegerOrInf">Size dimension specification must be an integer or Inf.</entry>
    <entry key="TypeSpecDynamicEmpty">Dimension with size zero at {0, number, integer} is always treated as static.</entry>
    <entry key="TypeSpecLargeDimSize">Fixed size {0} at dimension {1, number, integer} is larger than or equal to intmax(). This is not supported.</entry>
    <entry key="TypeSpecLargeStaticMatrix">Fixed-size matrix with numel larger than or equal to intmax(). This is not supported.</entry>
    <entry key="TypeSpecScalarStructField">Field specification must be a scalar structure with at least one field.</entry>
    <entry key="TypeSpecEmptyStruct">Structure field specification must have at least one field.</entry>
    <entry key="TypeSpecStructFieldConstant">Struct fields specification cannot contain a coder.Constant object.</entry>
    <entry key="TypeSpecCStructName" note="stringDatatypeUpdate">TypeName specification must be a character vector constant.</entry>
    <entry key="TypeSpecCStructHeader" note="stringDatatypeUpdate">HeaderFile specification must be a character vector constant.</entry>
    <entry key="TypeSpecCStructExtern">Extern specification must be a logical constant.</entry>
    <entry key="TypeSpecCStructAlignment">Alignment must be either -1 or a power of 2 that is less than or equal to 128.</entry>
    <entry key="TypeSpecAlignmentOnNonExternStruct">Alignment property only supported for externally defined coder.StructType objects.</entry>
    <entry key="TypeSpecCellArray">Cell array specification must be a cell array.</entry>
    <entry key="TypeSpecCellElementConstant">Cell array specification cannot contain a coder.Constant object.</entry>
    <entry key="TypeSpecCellHomogeneousFixed">Cell array is set to homogeneous and cannot be changed to heterogeneous.</entry>
    <entry key="TypeSpecCellHomogeneousSizeOfEmpty">When defining a nonempty cell type, the cell array elements must have known types. This issue can occur if you use empty cell arrays to construct cell types.</entry>
    <entry key="TypeSpecCellHomogeneousFixedSize">Growing cells property not supported for locked homogeneous cell array type.</entry>
    <entry key="TypeSpecCellCannotBeHomogeneous">Cannot set cell array to homogeneous because it contains elements whose types cannot be unified.</entry>
    <entry key="TypeSpecCellHeterogeneousFixed">Cell array is set to heterogeneous and cannot be changed to homogeneous.</entry>
    <entry key="TypeSpecCellHeterogeneousVardims">A heterogeneous cell array cannot be variable size.</entry>
    <entry key="TypeSpecCellHeterogeneousNumel">A heterogeneous cell array containing {0, number, integer} elements cannot be resized to have {1, number, integer} elements.</entry>
    <entry key="TypeSpecCellSizeMismatch">Cell array size vector must match underlying Cell array size.</entry>
    <entry key="TypeSpecFimath">Fimath specification must be an embedded.fimath.</entry>
    <entry key="TypeSpecScalarFimath">Fimath specification must be a scalar fimath.</entry>
    <entry key="TypeSpecNumericType">Numeric type specification must be an embedded.numerictype value.</entry>
    <entry key="TypeSpecScalarNumericType">Numeric type specification must be a scalar numerictype.</entry>
    <entry key="TypeSpecConstantTypeValue">A coder.Constant cannot contain {0} objects.</entry>
    <entry key="TypeSpecConstantTypeValuePath">A coder.Constant cannot contain a {0}. coder.Constant.Value{1} is a {0}.</entry>
    <entry key="TypeSpecUnknownClass">Class {0} is not supported by coder.Type.</entry>
    <entry key="ClassDefNotFound">Unable to find the definition of class ''{0}''.</entry>
    <entry key="CoderThisTypeClassDef">coder.ThisType is not supported to create a class type because it is a placeholder for the current class object.</entry>
    <entry key="TypeSpecUnsupportedNotAnEnum">Class {0} is not an enumeration.</entry>
    <entry key="TypeSpecAbstractClass">Class {0} is not supported by coder.Type as it is abstract.</entry>
    <entry key="TypeSpecSelfReferencingClass">Class {0} is not supported by coder.Type because it is a self-referencing class.</entry>
    <entry key="TypeSpecMCOSArrayNotSupported">Arrays of classes are not supported for code generation. Provided input is an array of class ''{0}''.</entry>
    <entry key="TypeSpecNullValue">Uninitialized values are not supported by coder.Type. Uninitialized values might indicate a corrupt MATLAB session, inaccessible classdefs, or inaccessible enumerations.</entry>
    <entry key="TypeSpecNullValueWithPath">ConstantValue{0} contains an uninitialized value. (ConstantValue is the value passed to coder.Constant.) The coder.Type class does not support uninitialized values. Uninitialized values might indicate a corrupt MATLAB session, inaccessible classdefs, or inaccessible enumerations.</entry>
    <entry key="TypeSpecValueOfUnknownClass">Values of class {0} are not supported by coder.Type objects.</entry>
    <entry key="TypeSpecBadUTF162LCPCompat" note="stringDatatypeUpdate">Unable to convert some Unicode characters to local code page.</entry>
    <entry key="TypeSpecConstantSparse">coder.Constant does not support sparse matrix inputs or inputs containing sparse matrices.</entry>
    <entry key="TypeSpecConstantSparsePath">Found a sparse matrix at ConstantValue{0}. (ConstantValue is the value passed to coder.Constant.) coder.Constant does not support sparse matrix inputs or inputs containing sparse matrices.</entry>
    <entry key="TypeSpecDependentProperty">Setting dependent properties of coder.ClassType object is not supported.</entry>
    <entry key="TypeSpecStringLengthNonNaN">String length cannot be NaN.</entry>
    <entry key="TypeSpecStringLengthInvalid">StringLength must be a nonnegative integer.</entry>
    <!-- Messages used by custom coder types -->
    <entry key="CoderTypeInitializer">Custom coder types must be initialized only with coder.Type objects.</entry>
    <entry key="CoderTypeFailedInitialization">Failed to initialize coder type.</entry>
    <entry key="CoderTypeComplexIndex">Indexing into custom coder types by using smooth parentheses or curly braces is not supported.</entry>
    <entry key="CoderTypeMixedTypes">Either all or none of the elements of a cell array must be coder.Type objects.</entry>
    <entry key="CoderTypeInvalidPropertyMapping">Property mapping must be specified as a character scalar or function handle.</entry>
    <entry key="CoderTypeInvalidDefaultPropertyMapping">Could not determine default property mapping for ''{0}''.</entry>
    <entry key="CoderTypeInvalidInstance">Instance must be a ''{0}''.</entry>
    <entry key="CoderTypeResizeNotSupported">{0} does not support resizing.</entry>
    <entry key="CoderTypeRequiredConstant">Property ''{0}'' must be a coder.Constant.</entry>
    <entry key="CoderTypeMismatchingTypes">Incompatible types ''{0}'' and ''{1}''.</entry>
    <entry key="CoderTypeInvalidPropertyName">Invalid property name ''{0}'' specified in property mapping.</entry>
    <entry key="CoderTypeInvalidSizeVector">Size and Vardim vectors must have the same dimensions.</entry>
    <entry key="CoderTypeNoDefaultConstructor">Using ''{0}'' with coder.newtype is not supported because ''{0}'' does not have a default constructor.</entry>
    <entry key="CoderTypeSizeAssignmentError">This method must only be used to set 'Size' and 'VarDims' properties.</entry>
    <entry key="CoderTypeInvalidResizeProp">You must specify a nonempty property name or function handle in the type's resize specification.</entry>
    <entry key="CoderTypeInvalidAnnotation">Invalid annotation specified. Valid annotations are ''{0}''.</entry>
    <entry key="CoderTypeFailedConstantInitialization">Failed to initialize constant property ''{0}''.</entry>
    <entry key="CoderTypeInvalidFeatureSwitch">Invalid feature toggle switch. Permissible values are ''CLI'', ''GUI'' or ''ALL''.</entry>
    <entry key="CoderTypeRecursiveResize">The 'recursive' argument for coder.resize is not supported for this type.</entry>
    <entry key="CoderTypeInvalidSize">Invalid size value specified. Size must be numeric value.</entry>
    <entry key="CoderTypeInvalidVarDims">Invalid vardims value specified. VarDims must be a logical value.</entry>

    <entry key="EnumTypeName">The class {0} is not a valid enumeration type.</entry>
    <entry key="EnumValidValues">The enumeration ''{0}'' is not supported for code generation because it contains nonreal values or values greater than intmax('int32').</entry>
    <entry key="ResizeRequireType">coder.resize should be applied on a coder.Type object or a cell array of coder.Type objects.</entry>
    <entry key="ResizeSizeLimitsNumel">Expected SIZELIMITS to be an array with number of elements less than or equal to 2.</entry>
    <entry key="ResizeOnClassTypeNotSupported">coder.resize is not supported for a coder.ClassType object.</entry>
    <entry key="ResizeOnStringTypeNotSupported">coder.resize is not supported for a coder.StringType object.</entry>
    <entry key="ResizeOnEmptyClassTypeNotSupported">coder.resize is not supported for coder.ClassType objects created with coder.newtype.</entry>
    <entry key="ContainsRequireScalarType">The method ''contains'' should be applied on a scalar coder.Type object.</entry>
    <entry key="TypeElementUnassigned">Cell element at index {0, number, integer} is not assigned.</entry>
    <!-- Messages used by example2type and type2idp -->
    <entry key="TypeSpecFiWordLength">Fixed-point type exceeds {0} bits. This is not supported.</entry>
    <entry key="FiModeNotSupported">Numeric type contains an unsupported ''{0}'' embedded.fi object.</entry>
    <entry key="FiAutoSignednessNotSupported">Numeric types with inherited signedness are not supported. Please specify whether the type is signed or unsigned. </entry>
    <entry key="IllegalExampleInput">Illegal example specification is found at {0}:\n{1}</entry>
    <entry key="ExampleUnequalClasses">Unequal classes for example input {0} ({1}) and {2} ({3}).</entry>
    <entry key="ExampleUnequalConstants">Unequal constants for example input {0} and {1}.</entry>
    <entry key="ExampleUnequalSizes">Unequal sizes for example input {0} and {1}.</entry>
    <entry key="ExampleUnequalComplexity">Mixed real and complex examples for example input {0} and {1}.</entry>
    <entry key="ExampleUnequalSparse">Mixed sparse and non-sparse examples for example input {0} and {1}.</entry>
    <entry key="ExampleUnequalNumerictype">Unequal embedded.numericType for example input {0} and {1}.</entry>
    <entry key="ExampleUnequalFimath">Unequal embedded.fimath for example input {0} and {1}.</entry>
    <entry key="ExampleUnequalEnum">Unequal enumeration names for example input {0}({1}) and {2}({3}).</entry>
    <entry key="ExampleUnequalFieldName">Example input {0} has field {1}, which does not appear in example {2}.</entry>
    <entry key="ExampleSizeEmpty">Example input {0} size has a empty example value. This is not supported.</entry>
    <entry key="ExampleSizeDynamicEmpty">Dimension with size zero of example input {0} is always treated as static.</entry>
    <entry key="ExampleSysObjNotSupported">Function input at {0} cannot be a System object.</entry>
    <entry key="RequireScalarExample">Function input at {0} is an array of coder.Types. This is not supported.</entry>
    <entry key="ExampleCoderTypeNotSupported">Example input at {0} cannot be a coder.Type object.</entry>
    <entry key="RequireCoderType">Type specification at {0} should be a scalar coder.Type object.</entry>
    <entry key="HDLCodeTabTitle">HDL Code</entry>
    <entry key="DesignMustHaveOutputs">Design must have at least one output variable for hdl code generation.</entry>
    <entry key="TBAndInputDataPropsFoundWarning">Both test bench and input data types are specified, ignoring input data types. Using test bench to infer input data types for code generation.</entry>
    <entry key="NoHDLCoderTargetEnabled">MATLAB HDLCoder is not currently enabled.</entry>
    <entry key="FixptDirMissingAfterFixptConversion">The directory ''{0}'' was not found after float to fixed point conversion. Please run float to fixed conversion again.</entry>
    <entry key="FixPtConverterUnsupportedCoderBuild">The ''codegen [project file]'' or ''coder -build [project file]'' commands are not supported for Fixed-point Converter projects. To generate code using the project settings, first convert the project to a script. Then, execute the script.</entry>
    <entry key="FPToleranceValueULP">FPToleranceValue must be a positive integer when the FPToleranceStrategy is set to 'ULP'.</entry>
    <entry key="MLCoderFixPtTypesMissing">Input fixed-point types not found. Make sure fixed-point conversion was successful.</entry>
    <entry key="HDLSourceCodeGenSubtitle">HDL source code generated on:</entry>
    <entry key="codingTargetHDL" translate="false" note="TranslateFalseBatch;">HDL</entry>
    <entry key="HDLTargetSourceFiles">HDL Code</entry>
    <entry key="ConfigObjectWithProjectFile">Cannot supply configuration set object along with project file argument.</entry>
    <entry key="NoFieldStruct">struct with no fields</entry>
    <entry key="NoPropertyClass">class with no properties</entry>
    <entry key="NoElementCell">cell with no elements</entry>
    <entry key="UpgradeNoSuchFile">Could not find a file or directory named "{0}".</entry>
    <entry key="UpgradeInvalidExtensionSkipping">Unrecognized extension "{0}".  Skipping file "{1}".</entry>
    <entry key="UpgradeParseError">File does not appear to contain valid MATLAB syntax.  Please fix parse errors before attempting to upgrade.</entry>
    <entry key="UpgradeCreationFailed">Creation of file "{0}" failed.</entry>
    <entry key="UpgradeSkippingFile">Skipping "{0}"</entry>
    <entry key="UpgradeBackingUp">Backing up "{0}" to "{1}".</entry>
    <entry key="UpgradeBackupFailed">Backup of "{0}" failed.</entry>
    <entry key="UpgradeNoChange">NO CHANGE</entry>
    <entry key="UpgradeDifference">Difference</entry>
    <entry key="UpgradeLogExists">Log directory "{0}" already exists.</entry>
    <entry key="UpgradeCreateLog">Creating log directory "{0}".</entry>
    <entry key="UpgradeLogFileFailed">Failed to open log file "{0}" for writing.</entry>
    <entry key="UpgradeLogFileCreated">Log file "{0}" created at "{1}"</entry>
    <entry key="UpgradeNoFilesFound">Did not find any files to process.</entry>
    <entry key="UpgradeFilesToProcess">Processing:</entry>
    <entry key="UpgradeArchiving">Archiving previous contents to "{0}"</entry>
    <entry key="UpgradeLine">Line</entry>
    <entry key="UpgradeNote">Note</entry>
    <entry key="UpgradeFailedToOpen">Failed to open file "{0}": {1}</entry>
    <entry key="UpgradeUnrecognizedOption">Unrecognized option: {0}</entry>
    <entry key="UpgradeMissingParameter">Expected an argument following {0}.</entry>
    <entry key="UpgradeNonStringOption" note="stringDatatypeUpdate">All options must be specified as character vectors.</entry>
    <entry key="UpgradeEMLMEX">FIACCEL or CODEGEN may both be valid.  Choosing {0} as directed by options.</entry>
    <entry key="UpgradeRTWConfig">Options to emlcoder.RTWConfig were not recognized.  Simply replacing with coder.config may not be right.</entry>
    <entry key="UpgradeExample">Semantics of CODER.TYPEOF are different from EMLCODER.EXAMPLE. Please review your code.</entry>
    <entry key="UpgradeExampleSize">Semantics of CODER.TYPEOF are different from EMLCODER.EXAMPLE('size',...). Please review your code.</entry>
    <entry key="UpgradeEGS">CODER.TYPEOF does not have exactly the same behavior as EMLCODER.EGS.  Please review your code.</entry>
    <entry key="UpgradeEMLCoder">Replacing EMLCODER. with CODER. is usually but not always the right thing to do.</entry>
    <entry key="UpgradeDashT">Unrecognized argument to -T.  Please examine your code.</entry>
    <entry key="UpgradeMultipleConfigs">After conversion found multiple configuration objects on a single line.  The new commands only accept one configuration.  The HardwareImplementation is now a property of the primary configuration. </entry>
    <entry key="UpgradeNoLogDir">Log directory does not exist.  Nothing to cleanup.</entry>
    <entry key="UpgradeConfirmCleanup">This operation will delete all temporary files created by the last run of coder.upgrade.</entry>
    <entry key="UpgradeContinue">Continue? (Y/N)</entry>
    <entry key="UpgradeYOrN">Please enter Y or N.</entry>
    <entry key="UpgradeAbort">Aborting.</entry>
    <entry key="UpgradeCleanupLogDir">Please remove the directory {0} when you are done.</entry>
    <entry key="UpgradeExplainNotes">Please refer to the help for an explanation of the numbered notes.</entry>
    <entry key="UpgradeCellOfStrings" note="stringDatatypeUpdate">Expected a cell array of character vectors; not a {0}.</entry>
    <entry key="NonComplexPrimitive">Values of class ''{0}'' cannot be complex.</entry>
    <entry key="MoreInfo">More information</entry>
    <entry key="UnknownAction">Unknown action: {0}</entry>
    <entry key="UnknownComponent" translate="false">Unknown component: {0}.  Expected one of ''coder_coder'', ''coder_matlabcoder''.</entry>
    <entry key="InvalidSize" note="stringDatatypeUpdate">Character vector ''{0}'' is not a valid size specification.</entry>
    <entry key="UnknownTag">Unknown tag: {0}</entry>
    <entry key="UnknownType">Unknown type: {0}</entry>
    <entry key="InvalidHelpTopic">Invalid help topic ''{0}''. Opening default help page.</entry>
    <entry key="UnsupportedOutputTypeInAggregate">Usage of a coder.OutputType object inside a struct, cell array, or class type is not supported.</entry>
    <entry key="UnsupportedNonTypeInAggregate">Usage of non coder.Type objects inside a struct, cell array, or class type is not supported.</entry>
    <entry key="UnsupportedNonScalarInAggregate">Use exactly one coder.Type when setting the type of a struct field, cell element, or class property.</entry>
    <entry key="UnsupportedNonCellElementsProperty">Elements property of a struct, cell array, or class type must be a cell array of coder.Type objects.</entry>
    <!-- Messages used in coder.internal.feature -->
    <entry key="UnrecognizedFeatureSwitch">{0}: Unrecognized feature switch "{1}".</entry>
    <entry key="InvalidFeatureSwitchAction">{0}: You entered an invalid action.</entry>
    <entry key="FeatureSwitchHelp">{0} switches on/off the specified feature. \n\nExample usage:\n  % Get the feature''s state \n  {1}\n\n  % Turn on/off feature\n  {2}\n\n</entry>
    <entry key="NotAFixPtConfig">'-float2fixed' option must be followed by a fixpt configuration object.</entry>
    <entry key="NoPropertyWithThisNameInClass">Class ''{0}'' has no property ''{1}''.</entry>
    <entry key="StringPropertyCharRowVector">For code generation, the contents of a string must be a character row vector with fixed size 1 in the first dimension or the value ''''.</entry>
    <entry key="NoMatlabCodegenToRedirected">Class {0} not supported as input to entry-point function, output from extrinsic function, or initial value of a property.</entry>
    <entry key="MatlabCodegenRedirectIsaHandle">{0}.matlabCodegenRedirect must return a class name that, for a given instance, returns the same result from isa(instance, 'handle') as an instance of {0}.</entry>
    <entry key="MatlabCodegenRedirectClassNotOnPath">Unable to find class name ''{1}'' returned by ''{0}.matlabCodegenRedirect''.</entry>
    <entry key="TestBenchvariadically">Calls to the same entry-point function must use a consistent number of input arguments.</entry>
    <entry key="NoNDSparseType">N-dimensional sparse arrays are not supported.</entry>
    <entry key="UnsupportedSparseType">Sparse matrix type ''{0}'' not supported.</entry>
    <entry key="GenericCosDupName">Invalid input arguments: duplicate name ''{0}''.</entry>
    <entry key="GenericCosAllocFail">Memory allocation failed.</entry>
    <entry key="GenericCosNoInterfacePtr">Failed to get COS interface pointer from mxArray.</entry>
    <!-- Messages used for gpuArray support -->
    <entry key="UnsupportedGpuArrayConfig">''{0}'' is not supported when using CODER.TYPEOF to represent GPU inputs.</entry>
    <entry key="UnsupportedGpuCoderTypeofSyntax">Use of CODER.TYPEOF to represent GPU inputs is not supported with a coder.type input.</entry>
    <entry key="UnsupportedGpuInputType">GPU inputs support only fundamental numeric or logical data types.</entry>
    <entry key="UnsupportedGpuInputSparse">Sparse arrays are not supported for GPU inputs.</entry>
    <entry key="UnsupportedGpuInputCoder">Use of CODER.TYPEOF to represent GPU inputs is supported only with GPU Coder.</entry>
    <entry key="UnsupportedGpuInputAggregate">GPU inputs do not support struct, cell array and class data types.</entry>
    <entry key="UnsupportedGpuInputScalar">GPU inputs do not support scalar primitive data type.</entry>
    <entry key="UnsupportedGpuInputCoderArrayUnbounded">Passing dynamic allocated GPU input using C++ dynamic memory allocation interface is not supported.</entry>
    <entry key="CustomBLASCallbackGPU">Configuration setting CustomBLASCallback is not supported for code generation with GPU Coder.</entry>
    <!-- UDD -->
    <entry key="UnsupportedClassType">Object type ''{0}'' is not supported for code generation.</entry>

    <!-- Messages related to CLI-to-Project -->
    <entry key="CliToAppFixPtUnsupported">Generation of MATLAB Coder projects does not support fixed-point conversion.</entry>
    <entry key="CliToAppNotEmlc">Generation of projects is only supported in MATLAB Coder.</entry>
    <entry key="CliToAppJavaProject">Arguments already contain a MATLAB Coder project</entry>
    <entry key="CliToAppConstantUnsupported">Generation of MATLAB Coder projects with constant inputs or globals will discard their values.</entry>
    <entry key="CliToAppOpenProject">Project file ''{0}'' already exists and is currently open.</entry>
    <entry key="CliToAppFileAlreadyExists">Project file ''{0}'' already exists.</entry>
    <entry key="CliToAppProjectCreationFailure">Generation of project ''{0}'' failed.</entry>
    <entry key="CliToAppProjectImportFailure">Import of settings into project ''{0}'' failed.</entry>
    <entry key="CliToAppInvalidFileExtension">Project files can only have a '.prj' extension.</entry>
    <entry key="CliToAppFileUnwritable">Failed to open file ''{0}'' for writing.</entry>
    <entry key="CliToAppProjectFileNotFound">Project file ''{0}'' does not exist.</entry>
    <entry key="CliToAppEntryPointFileNotFound">Entry-point function ''{0}'' does not exist.</entry>
    <entry key="CliToAppExportGenericFailure">Project file ''{0}'' could not be loaded.</entry>
    <entry key="CliToAppExportUnsupportedProject">Project ''{0}'' does not support exporting.</entry>
    <entry key="CliToAppProjectAlreadyOpen">Importing of settings into projects is only supported for projects that are not currently open in the app.</entry>
    <entry key="CliToAppProjectCreated">Project file ''{0}'' was successfully created.</entry>
    <entry key="CliToAppProjectCreatedLink"><![CDATA[<a href="matlab: open(''{0}'')">Open Project</a>]]></entry>
    <entry key="CliToAppImportSuccessful">Importing of settings into project ''{0}'' was successful.</entry>
    <entry key="CliToAppScriptBlobDesc">Load constant and global values</entry>
    <entry key="CliToAppScriptBlobAssert">MAT-file ''''{0}'''' containing constant and global values not found</entry>
    <entry key="CliToAppValueSizeExceeded">The total size of constant and global values is too large to embed within a project file. Open the generated project and specify the value from the app.</entry>
    <entry key="P2PFailedToLoadProject">Failed to load project file ''{0}''.</entry>
    <entry key="P2PIncompatibleProjectTypes">The source and destination project files ''{0}'' and ''{1}'' must be of the same type.</entry>
    <entry key="P2PProjectOpenInApp">Project export and import requires that projects be closed.</entry>
    <entry key="P2PProjectCreated">Settings from project ''{0}'' were successfully used to create project ''{1}''.</entry>
    <entry key="P2PProjectApplied">Settings from project ''{0}'' were successfully imported into project ''{1}''.</entry>
    <entry key="CliToAppNamedInputEmbedFailed">Input ''{0}'' of entry-point ''{1}''</entry>
    <entry key="CliToAppInputEmbedFailed">Input #{0} of entry-point ''{1}''</entry>
    <entry key="CliToAppGlobalEmbedFailed">Global ''{0}''</entry>
    <entry key="CliToAppValueEmbedFailures">The values of the following constants and globals could not be embedded into the project file:\n{0}\nPlease specify these values using the app.</entry>
    <entry key="CliToAppPFilesNotSupported">Project generation does not support P-coded entry points.</entry>
    <entry key="CliToAppExportHdlCoderUnsupported">HDL Coder projects do not support exporting.</entry>
    <entry key="CliToAppInvalidToConfigArgument">Project arguments should be specified as file names or paths.</entry>
    <entry key="CliToAppInputCountMismatch">Expected at least {0} input arguments for ''{1}'', but found only {2}. In the app, either specify the missing input types using the ''Define Input Types'' pane or select the ''Determine input types from code preconditions or validation'' option. Alternatively, in the original codegen command, specify the missing input types using the -args option.</entry>
    <entry key="CliToAppCgtUnsupported">Generation of MATLAB Coder projects does not support code generation templates.</entry>
    <entry key="CliToAppMultiSignatureUnsupported">Generation of MATLAB Coder projects does not support multiple signatures.</entry>

    <!-- MATLAB Online -->
    <entry key="HDLMOError">HDL Coder does not support MATLAB Online.</entry>
    <entry key="ScreneerMOError">coder.screener does not support MATLAB Online</entry>
    <entry key="Table2D">Tables must be 2-dimensional.</entry>
    <entry key="TableResizeNumVars">Changing the number of variables in a table by using coder.typeof or coder.resize is not supported. Construct a table with the desired number of variables.</entry>
    <entry key="TableVariableNumVars">The number of variables in a table must be a constant. In other words, the second dimension of a table must be fixed-size.</entry>

    <!-- Verbose print -->
    <entry key="VerboseCompleFunc">### Compiling function(s) {0} ...\n</entry>
    <entry key="VerboseGenreport">### Generating compilation report ...\n</entry>

    <!-- Code descriptor -->
    <entry key="CodeDescriptorAlreadyExists">Unable to write codedescriptor.dmr file because the existing file in the output folder could not be deleted. Manually delete the file to avoid this warning.</entry>

    <!-- Error messages when user runs coder.XXConfig.empty -->
    <entry key="EmptyConfigNotSupported">Creation of an empty ''{0}'' object is not supported\n<![CDATA[For more information, see <a href="matlab:doc(coder.{0})">coder.{0}</a>.]]></entry>

    <!-- CompilationContextToCode -->
    <entry key="ProjectTocodeMEXTitle">{0}   Generate MEX-function {1} from {2}.</entry>
    <entry key="ProjectTocodeLIBTitle">{0}   Generate static library {1} from {2}.</entry>
    <entry key="ProjectTocodeDLLTitle">{0}   Generate dynamic library {1} from {2}.</entry>
    <entry key="ProjectTocodeEXETitle">{0}   Generate executable {1} from {2}.</entry>
    <entry key="ProjectTocodeProlog">Script generated from project ''{0}'' on {1}.</entry>
    <entry key="ProjectTocodeEpilog">See also CODER, CODER.CONFIG, CODER.TYPEOF, CODEGEN.</entry>
    <entry key="ProjectTocodeConfig">Create configuration object of class ''{0}''.</entry>
    <entry key="ProjectTocodeArgs">Define argument types for entry-point ''{0}''.</entry>
    <entry key="ProjectTocodeGlobals">Define global types and initial values.</entry>
    <entry key="CannotOpenProjectTocodeScript">Cannot create script file ''{0}'': {1}.</entry>
    <entry key="CannotConvertProjectType">Cannot convert project to a ''{0}'' object.</entry>
    <entry key="ProjectTocodeNoMatlabCoder" context="error">Conversion of a MATLAB Coder project to a script requires MATLAB Coder.</entry>
    <entry key="ProjectTocodeInvokeCompiler">Invoke MATLAB Coder.</entry>
    <entry key="ProjectTocodeInvokeF2FCompiler">Invoke fixed-point conversion.</entry>
    <entry key="FixedPointConversionProjectTocodeTitle">{0}   Perform fixed-point conversion on {1}.</entry>
    <entry key="FixedPointConverterProjectTocodeEpilog">See also fixedPointConverter, CODER.CONFIG, CODER.TYPEOF, fiaccel</entry>
  </message>
</rsccat>

<!-- LocalWords:  typeof SIZELIMITS FIACCEL CStruct EGS classdefs matlabcoder multisignature FP ULP
     LocalWords:  tmf nonreal toolchain newtype Vardim CLI vardims idp BLS Aprj screener BLAS prj
     LocalWords:  codedescriptor
-->
