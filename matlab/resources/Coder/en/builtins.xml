<?xml version="1.0" encoding="UTF-8" ?>
<!-- Copyright 1994-2024 The MathWorks, Inc. -->
<rsccat version="1.0" locale="en_US" product="Coder"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../schema/msgcat.xsd">
  <message>
    <entry key="Empty" translate="false"></entry>
    <!-- A message created from Explicit does not have a proper message ID. Try to avoid to use it whenever you can. -->
    <entry key="Explicit" translate="false" note="TranslateFalseBatch;">{0}</entry>
    <entry key="LineSeparator" translate="false" note="TranslateFalseBatch;">\n</entry>
    <entry key="AggregateClass">Non-scalars of class ''{0}'' are not supported.</entry>
    <entry key="Arg2D">Input arguments must be 2-D.</entry>
    <entry key="ImageDataUnderlyingMustHaveThreeDimensions">Image must have three dimensions.</entry>
    <entry key="ArgumentMClassMismatch">Cannot pass argument with unknown MATLAB class to function whose input has known MATLAB class.</entry>
    <entry key="ArityInput">Too many inputs to function ''{0}''.</entry>
    <entry key="ArityInputCausedBy">Error calling ''{0}''. This call-site passes more inputs to this function than it can accept. This is likely caused by: {1}</entry>
    <entry key="ArityInputFunctionCallEvent">Function arguments cannot be passed to function call event triggers.</entry>
    <entry key="IllegalUseOfFunctionCallEvent">Illegal use of function call output event in this context.</entry>
    <entry key="ArityInputSF">Number of inputs required by this Simulink or Stateflow function does not match the call site.</entry>
    <entry key="ArityOutput">Error calling ''{0}''. This call-site expects more outputs than this function can supply.</entry>

    <entry key="ArrayDeletionOnFixedSizeDimension">Unable to delete elements from this array because dimension {0,number,integer} has fixed size {1,number,integer}.</entry>

    <entry key="AssertMustBeTopLevel">assert() must be a statement; it may not be nested inside an expression.</entry>
    <entry key="AssertionFailed">Assertion failed.</entry>
    <entry key="AssignmentFromMatlabTypeAmbiguousSSS">Variable ''{0}'' has conflicting type definitions. To resolve, verify that all preceding definitions of ''{1}'' are consistent.</entry>
    <entry key="BuiltinInvalidFcn">Cannot resolve built-in function {0}.</entry>
    <entry key="BuiltinMustBeInFOR">coder.unroll must either be on a line by itself immediately before a for-loop or be in the for-loop header.</entry>
    <entry key="BuiltinDuplicateCall">coder.unroll supported either before for-loop or in for-loop header. Both uses for the same for-loop not supported.</entry>
    <entry key="BuiltinMustBeBeforeFOR">When coder.unroll is used outside of a for-loop header, it must immediately precede the for-loop statement.</entry>
    <entry key="BuiltinMustBeBeforeTryCatch">coder.ignoreTryCatch must be placed immediately before a try-catch block.</entry>
    <entry key="IllegalInvocationInternalBuiltin">Calling code generation implementation function ''{0}'' from user function ''{1}'' is not supported. Please contact Technical Support for assistance.</entry>
    <entry key="BifAtExitSyntax">The builtin ''{0}'' requires a single argument that is a function handle to a void/void function.</entry>
    <entry key="BifAtExitThreadArgument">Invalid flag argument: ''{0}''. Valid inputs are: "OnEachThread" and "OnMainThread".</entry>
    <entry key="BifAtExitRuntimeArguments">The function handle ''{0}'' registered with builtin ''{1}'' is inferred to have runtime arguments. Registered atexit functions must only have compile time arguments.</entry>
    <entry key="BifNeedsLValue">The builtin ''{0}'' requires an assignable location, e.g. a variable.</entry>
    <entry key="BifRequiresNTBeforeFimath">Builtin operators require a numerictype to precede the fimath.</entry>
    <entry key="BifUnrecognizedOption">Unrecognized option of type ''{0}'' to builtin operator.</entry>
    <entry key="BifUnsupported">This builtin function is not yet supported.</entry>
    <entry key="BitConcatArg1">First argument to EML_BIT_CONCAT must be a fixed-point or an integer.</entry>
    <entry key="BitConcatArg2">Second argument to EML_BIT_CONCAT must be a fixed-point or an integer.</entry>
    <entry key="BitSliceNegative">Bit slice must have positive width.</entry>
    <entry key="BitopArg">First argument to EML_BIT_OP must be a fixed-point or an integer.</entry>
    <entry key="BitwiseOperatorClass">Both inputs to a bitwise operator must have the same class.</entry>
    <entry key="BreakMisplaced">A BREAK statement appeared outside of a loop. Use RETURN instead.</entry>
    <entry key="BuiltinSizeQualifier">\nEvery input to this builtin must be the same size. The expected size is the size of the first input.</entry>
    <entry key="CClassUnrecognized">Unrecognized C class.</entry>
    <entry key="CDeclDuplicateDeclaration">EML_CDECL, variable being declared already has a declaration.</entry>
    <entry key="CDeclFirstArg">EML_CDECL, first argument should be a variable.</entry>
    <entry key="BadCatalogID">Use of 'CatalogID' requires inputs of the form 'CatalogID', 'My:Catalog:ID', 'ReportedID', 'My:Reported:ID'</entry>
    <entry key="CannotBeCalledHere">Function ''{0}'' cannot be called here.</entry>
    <entry key="CellArgsMustBeNonEmpty">Cell arguments to ''{0}'' cannot be empty.</entry>
    <entry key="CEvalHeaderFileMissing">The ''{0}'' argument must be followed by a header file name.</entry>
    <entry key="CEvalHeaderFileMultiple">Use the ''{0}'' argument only once in each call to ''{1}''. To include additional headers, use ''{2}''.</entry>
    <entry key="CEvalUnrecognizedOption">Unrecognized ''coder.ceval'' option ''{0}''.</entry>
    <entry key="CEvalMissingFunction">Missing name of function to call. Expected a function name as the first non-optional argument.</entry>
    <entry key="CEvalAmbiguousTypeSSS">Cannot assign ''{0}'' from ''coder.ceval'' because preceding assignments to ''{1}'' have conflicting types. To fix, preinitialize ''{2}''.</entry>
    <entry key="CEvalNoTypeSSS">Cannot assign ''{0}'' from ''coder.ceval'' because the type and size of ''{1}'' are not known. To fix, preinitialize ''{2}''.</entry>
    <entry key="CEvalType">Output of ''coder.ceval'' has unknown type. The enclosing expression cannot be evaluated.\nSpecify the output type by assigning the output of ''coder.ceval'' to a variable with a known type.</entry>
    <entry key="CEvalWithoutCstructname">C structure name not specified. Use coder.cstructname to name structures that are passed to external C functions with coder.ceval.</entry>
    <entry key="CEvalPropSetterGetter">Code generation does not support taking address of property ''{0}'' because it has a setter method, a getter method, or an attribute.</entry>
    <entry key="CEvalTypeDisplay">Value cannot be displayed because the output of ''coder.ceval'' does not have a known type. To display the output, first assign the result to a variable of known type.</entry>
    <entry key="CHelperMisapplied">''{0}'' may only be applied to an expression of type V or V(E) where V is a variable and E is a numeric expression.</entry>
    <entry key="CInterfaceMisuse">''{0}'' may only be used within a C call context.</entry>
    <entry key="CScalarReturn">C function calls always return scalar values but a non-scalar value is expected here.</entry>
    <entry key="CevalReturnDynamicMatrix">Return value ''{0}'' of C function call is a variable-size matrix which is not allowed. Consider passing it as an argument to the C function.</entry>
    <entry key="CevalExtrinsicParadox">Function ''{0}'' has been declared extrinsic, but is being called as a C function.</entry>
    <entry key="CevalGpuMultipleFunctionTypes">Unable to specify multiple gpu function types for coder.ceval. Use only one option from acceptable values that include: ''-gpudevicefcn'' or ''-gpuhostdevicefcn''.</entry>
    <entry key="CStructNameArg1">First argument to ''{0}'' must be a variable or a sub-structure expression, e.g. ''s.sub.two''.</entry>
    <entry key="CStructNameEmptyTypeName" note="stringDatatypeUpdate">Structure name for ''{0}'' must be a nonempty string scalar or character vector.</entry>
    <entry key="CstructNameContainsSpace">Spaces in structure name for ''{0}'' not supported because structure is not externally defined.</entry>
    <entry key="CStructNameArg1Class">First argument to ''{0}'' must be a structure or cell array.</entry>
    <entry key="CStructNameArg3" note="stringDatatypeUpdate">The optional third argument to ''{0}'' must be ''extern''.</entry>
    <entry key="CStructNameArgExtern">The optional ''extern'' argument to ''{0}'' is not supported for class ''{1}''.</entry>
    <entry key="CStructNameArg" note="stringDatatypeUpdate">The optional argument number {0,number,integer} to ''{1}'', must be either ''HeaderFile'' or ''Alignment''.</entry>
    <entry key="CStructNameHomogeneousCellUnsupported">''{0}'' does not support cell arrays that are homogeneous.</entry>
    <entry key="CStructNameMissingAlignmentValue">Not enough inputs: an integer value must be specified for ''Alignment'' property in ''{0}''.</entry>
    <entry key="CStructNameMissingHeaderFileValue" note="stringDatatypeUpdate">Not enough input arguments. Specify a filename for the ''HeaderFile'' property in ''{0}''.</entry>
    <entry key="CStructNameInvalidAlignmentValue">{0,number,integer} is not a valid alignment boundary. A valid alignment boundary must be a power of two no more than 128.</entry>
    <entry key="CStructNameHeaderNeedsExtern" note="stringDatatypeUpdate">The optional fourth argument to ''{0}'' requires that the third argument be ''extern''.</entry>
    <entry key="CStructNameDefined">The name ''{0}'' has already been defined using a different type. Was defined as ''{1}''; tried to redefine it as ''{2}''.</entry>
    <entry key="CStructNameGlobal">coder.cstructname cannot be applied directly to a global variable. Instead, specify the C type name to use with the type that is assigned to the global variable.</entry>
    <entry key="CStructNameEntryPointInput">coder.cstructname with an entry-point function must be applied before any run-time control flow. coder.cstructname is not supported for a top-level function input in a MATLAB Function block.</entry>
    <entry key="CStructNameInput">coder.cstructname with an input to a non-entry-point function must be applied before calling the function.</entry>
    <entry key="CStructNameLocked">coder.cstructname must be applied to a variable before using it.</entry>
    <entry key="CStructNameRedefinition">Conflicting coder.cstructname directives are applied to the same object {0}.</entry>
    <entry key="CStructNameTypeName">This variable already has a type name ''{0}''.</entry>
    <entry key="CStructNameInconsistentUseOfExtern">The structure ''{0}'' must be externally defined because it is the type of a field of an externally defined structure. Use coder.cstructname with the ''extern'' option.</entry>
    <entry key="CStructNameInconsistentUseOfExternForEnum">The enumeration ''{0}'' must be externally defined because it is the type of a field of an externally defined structure. Use the static method ''getHeaderFile()'' in the enumeration classdef for ''{1}''.</entry>
    <entry key="CStructNameNestedFunction">coder.cstructname cannot be applied to a variable from another function. Move this coder.cstructname to the function where the variable is first assigned.</entry>
    <entry key="CStructNameVarSizeCellArray">Using coder.cstructname to name the C structure type for a variable-size cell array is not supported.</entry>
    <entry key="CStructNameCellParenIndexingUnsupported">coder.cstructname does not support indexing into cell arrays using ''()''. Use '''{}''' indexing to access the elements, or no indexing to access the cell array itself.</entry>
    <entry key="CStructNameCellTypeAlignmentUnsupported">Alignment property not supported for coder.CellType objects.</entry>
    <entry key="CoderVarsizeNestedFunction">coder.varsize cannot be applied to a variable from another function. Move this coder.varsize to the function where the variable is first assigned.</entry>

    <entry key="CVariableUntyped">Variable explicitly declared as defined is untyped.</entry>
    <entry key="CanNotUseEndInVarargoutAssign">Using ''end'' to index into repeating output variable ''{0}'' on the left side of an assignment is not supported for code generation.\nUse an explicit index expression instead.</entry>
    <entry key="CaseInsensitiveMatch">Could not find an exact (case-sensitive) match for ''{0}''. Closest match was ''{1}''.</entry>
    <entry key="CaseSensitiveMatlabResolution">Function ''{0}'' resolved in the MATLAB workspace as ''{1}''. Case-insensitive resolution of MATLAB functions is not supported for code generation.</entry>
    <entry key="CastToUnknown">Cannot cast a value of unknown class.</entry>
    <entry key="CastOpaqueComplex">Unable to cast type ''{0}'' to type ''{1}'' because code generation does not support conversion between coder.opaque types and complex types. Use real or imag to extract the real or imaginary part of the complex variable before conversion.</entry>
    <entry key="CastOpaqueMultiword">Unable to cast type ''{0}'' to type ''{1}'' because code generation does not support conversion between coder.opaque types and types that are too large to be represented by the target hardware. Only types that can be represented by the target hardware can be converted to or from coder.opaque types.</entry>
    <entry key="CastOpaqueToUnsupportedType">Code generation does not support casting a coder.opaque type to type ''{0}''. When casting an opaque value, the target type must be: int8, uint8, int16, uint16, int32, uint32, int64, uint64, double, or single. First cast the coder.opaque value to one of these types and then cast to type ''{1}''.</entry>
    <entry key="CatArgsInconsisent">CAT argument dimensions are inconsistent. The size of argument {0,number,integer} is {1}. The size of argument {2,number,integer} is {3}.</entry>
    <entry key="CatResultDynamicEmpty">CAT result is an empty variable-size array of indeterminate shape.</entry>
    <entry key="CatRiskyEmpty">An empty matrix of size {0} cannot be concatenated with a matrix of unknown size.</entry>
    <entry key="CatRiskyEmptyGrow">Growing an empty array {0} into an array of size {1} is not supported. The non-growing dimension does not match.</entry>
    <entry key="Ccast">C cast</entry>
    <entry key="LogicalToChar">Conversion to char from logical is not allowed.</entry>
    <entry key="ClassDoesNotHaveMethodOrProperty">Class ''{0}'' does not have a method or property with name ''{1}''.</entry>
    <entry key="ClassDoesNotHaveProperty">Class ''{0}'' does not have a property with name ''{1}''.</entry>
    <entry key="ClassMismatch">Unable to assign a value with class ''{1}'' to a variable with class ''{0}''.</entry>
    <entry key="ClassMismatchAssign">Unable to write a value of type {0} into a variable of type {1}. Code generation does not support changing types through assignment. To investigate the cause of the type mismatch, check preceding assignments or input type specifications.</entry>
    <entry key="EntryPointIOClassMismatchAssign">Input ''{0}'' of entry-point function ''{1}'' is a {2} but is assigned a {3}. If you use the same variable as both input and output, its type and size must be consistent throughout the function body for code generation.</entry>
    <entry key="EntryPointIOSizeMismatchAssign">Input ''{0}'' of entry-point function ''{1}'' has size {2} but is assigned with size {3}. If you use the same variable as both input and output, its type and size must be consistent throughout the function body for code generation.</entry>
    <entry key="NonWebrenamedBuiltinClassMismatchAssign">Variable ''{0}'' is a {1} but is assigned a {2}. If a variable is passed to {3}, its type and size must be consistent throughout the function body for code generation.</entry>
    <entry key="NonWebrenamedBuiltinSizeMismatchAssign">Variable ''{0}'' has size {1} but is assigned with size {2}. If a variable is passed to {3}, its type and size must be consistent throughout the function body for code generation.</entry>
    <entry key="NonWebrenamedVectorVarsizeMismatchAssign">Variable {0} is constrained to size {1} by coder.varsize, but this variable is assigned a value of size {2}. To resize a singleton dimension, explicitly specify an upper bound.</entry>
    <entry key="NonWebrenamedVarsizeMismatchAssign">Variable {0} is constrained to size {1} by coder.varsize, but this variable is assigned a value of size {2}.</entry>
    <entry key="ClassMismatchAssignOnField">This assignment writes a ''{0}'' value into a ''{1}'' type in field ''{2}''. Code generation does not support changing types through assignment. Check preceding assignments or input type specifications for type mismatches.</entry>
    <entry key="ClassMismatchAssignOnCell">This assignment writes a ''{0}'' value into a ''{1}'' type in element ''{2}''. Code generation does not support changing types through assignment. Check preceding assignments or input type specifications for type mismatches.</entry>
    <entry key="ClassMismatchOnField">In field ''{2}'', unable to assign a value with class ''{1}'' to a variable with class ''{0}''.</entry>
    <entry key="ClassdefInvalidEnumeration">Cannot load the definition for ''{0}'': {1}</entry>
    <entry key="ClassdefNotAnEnumeration">''{0}'' is not a supported enumeration. For code generation, enumerations must inherit from one of: ''int8'', ''uint8'', ''int16'', ''uint16'', ''int32'', ''uint32'' or ''Simulink.IntEnumType''.</entry>
    <entry key="TunableEnumerationNotImported">''{0}'' is not an imported tunable enumeration. For code generation, tunable enumerations must be imported.</entry>
    <entry key="EnumerationDataScopeInvalid">Invalid data scope returned by ''{0}.getDataScope'': ''{1}''. Data scope  must be "Auto", "Imported", or "Exported".</entry>
    <entry key="UnsupportedExportedEnumerationHeaderPath">Invalid header file returned by ''{0}.getHeaderFile'': ''{1}''. For exported enumerations, ''getHeaderFile'' must return the name of a header file without a path.</entry>
    <entry key="ExportedEnumerationHeaderInvalid">Invalid header file returned by ''{0}.getHeaderFile'': {1}. Header file must have a ''.h'' extension.</entry>
    <entry key="ImportedEnumerationNoHeader">Unable to import enumeration ''{0}'' because no header file was specified. Use ''{0}.getHeaderFile'' to specify a header file.</entry>
    <entry key="EnumClassdefNotfound">Enumeration class definition is missing. Enumeration class ''{0}'' must have a definition for code generation.</entry>
    <entry key="ClassdefBadEnumDefaultValue">The default value returned by ''{0}.getDefaultValue'' must be one of the enumerated values defined in the class definition for ''{1}''. Found a ''{2}'' with {3,number,integer} element(s) instead.</entry>
    <entry key="ClassdefEnumBadHeader" note="stringDatatypeUpdate">The value returned by ''{0}.getHeaderFile'' must be a file name.</entry>
    <entry key="ClassdefEnumBadPrefixFlag">The value returned by ''{0}.addClassNameToEnumNames'' must be scalar logical.</entry>
    <entry key="ClassdefEnumLoad">Error while loading the enumeration ''{0}'' for code generation: {1}</entry>
    <entry key="ClassdefEnumStaticMethod">Error invoking the enumeration static method ''{0}.{1}'': {2}</entry>
    <entry key="EnumElementValueDoesNotFitInTargetInt">Enumeration element ''{0}'' with value ''{1,number,integer}'' does not fit within the production and/or test hardware integer. Because  this type is implemented as a C enumeration type, each element must fit in the current test and production "int" types (in the range {2,number,integer}-{3,number,integer})</entry>
    <entry key="ColonLogical">Function ''colon'' is not defined for values of class ''logical''.</entry>
    <entry key="ColonMixed">Colon operands must be all the same type, or mixed with real scalar doubles.</entry>
    <entry key="ColonNaN">COLON expression with NaN are not supported.</entry>
    <entry key="ColonObjEnum">Enumerations in colon expressions are not supported for code generation. Cast enumeration ''{0}'' to an integer type before use.</entry>
    <entry key="ColonStride">The stride in this COLON expression does not appear to be constant. Only constant strides are supported for code generation.</entry>
    <entry key="ColonInput">Input arguments to function include colon operator. To input the colon character, use '':'' instead.</entry>
    <entry key="CommandDuality">Command-duality is not supported.</entry>
    <entry key="ComplexIntegerArithmetic">Complex integer arithmetic is not supported for code generation.</entry>
    <entry key="ComplexIntegerRelational">Comparison operations on complex integers are not supported.</entry>
    <entry key="ComplexSlopeBiasFiUnsupported">Complex FI objects must have an integer power of 2 slope, and a bias of 0.</entry>
    <entry key="ComplexToCharOrLogical">Cannot convert complex values into logical or character values.</entry>
    <entry key="ComplexToLogical">Cannot convert complex values into logical values.</entry>
    <entry key="NonNumericToComplex">Unsupported conversion to complex from {0}.</entry>
    <entry key="ConditionMustBeScalarLogical">The condition input argument must be a scalar logical.</entry>
    <entry key="ConditionMustBeScalar">The condition input argument must be a scalar.</entry>
    <entry key="ConditionMustBeConvertibleToLogical">The condition input argument must be convertible to logical.</entry>

    <entry key="AssertAlwaysFalse">Assert will always fail. To delay detection until run time use coder.ignoreConst on the condition.</entry>
    <entry key="AssertMithMsgIDAlwaysFalseRuntimeParams">Internal Error: Assert fails at compile time but has a run-time parameter. To generate a proper error, ensure all message parameters are compile-time constants if the condition is compile-time false.\nError ID: ''{0}''\nError text without parameters: {1}</entry>
    <entry key="ConflictingDirectives">Function ''{0}'' contains conflicting ''{1}'' and ''{2}'' directives.</entry>
    <entry key="Conjugate">Complex conjugation is not defined for this class.</entry>
    <entry key="ConstantFoldingOverFlow">Overflow or saturation occurred during constant folding. Value of this expression cannot be exactly represented in its type.</entry>
    <entry key="ConstantNotEliminated">This ''{0}'' constant could not be eliminated.</entry>
    <entry key="CoderLoadUnassignedNotSupported">Code generation does not support loading of unassigned elements using ''{0}''. ''{1}'' is unassigned.</entry>
    <entry key="CoderLoadConstructedOnLoadNotSupported">Code generation does not support loading of classes with the ConstructOnLoad attribute using ''{0}''. ''{1}'' is a class marked as ConstructOnLoad.</entry>
    <entry key="CoderLoadSparseMatrixNotSupported">Code generation does not support loading of sparse matrices.  ''{0}'' is a sparse matrix.</entry>
    <entry key="ConflictingMethodAttributesWarning">Method ''{0}'' is both {1} and {2}.</entry>
    <entry key="ConflictingMethodAttributesWarningSecondAttrIgnored">Method ''{0}'' is both {1} and {2}. {2} will be ignored.</entry>
    <entry key="ConstantNotFunction">This constant cannot be called. It is not a function.</entry>
    <entry key="ConstantNotLValue">The constant ''{0}'' was found on the left-hand side of an assignment. Variables alone are allowed in these contexts.</entry>
    <entry key="ConstantRequired">Non-constant expression or empty matrix. This expression must be constant because its value determines the size or class of some expression.</entry>
    <entry key="ConstantCellValuelistIndexRequired">Non-constant expression. This expression must be constant because its value determines the size or class of some expression.</entry>
    <entry key="ContainsDynamicMatrixType">Found dynamic matrix type.</entry>
    <entry key="ContinueMisplaced">A CONTINUE may only be used within a FOR or WHILE loop.</entry>
    <entry key="ConversionNotPossible">Conversion to {0} from {1} is not possible.</entry>
    <entry key="CouldNotReduceToConstant">\nFailed to reduce expression to a constant.</entry>
    <entry key="CreateThroughIndexing">If defining variable ''{0}'' for the first time through field access, the left-hand-side components cannot contain indexing parentheses, and all left-hand-side components except for the final field must be scalar. To create an array of structs, use ''repmat'' or the ''struct'' function.</entry>
    <entry key="CreateArrayLikeStringNoFillValue">When creating a scalar string array using createArray, the 'FillValue' argument is required.</entry>
    <entry key="CreateArrayAbstractClassname">When generating code for createArray, the classname argument must be a concrete class.</entry>
    <entry key="CreateArrayInvalidClassname">When generating code for createArray, the classname argument does not support type ''{0}''.</entry>
    <entry key="CreateArrayInvalidDefaultCtorLikeArg">To generate code for createArray when the 'Like' argument is an object, the object class must implement the createArrayLike method. Alternatively, the object class must have a default constructor that returns a scalar value.</entry>
    <entry key="CreateArrayInvalidDefaultCtorClassnameArg">To generate code for createArray when the classname argument is an object class, this class must implement the createArray method. Alternatively, the object class must have a default constructor that returns a scalar value.</entry>
    <entry key="CreateArrayLikeStruct">When generating code for createArray, the 'Like' argument does not support struct values. Instead, either use the 'FillValue' argument or specify the class of array elements using the classname argument.</entry>
    <entry key="CreateArrayLikeUnsupportedType">When generating code for createArray, the 'Like' argument does not support values of type ''{0}''.</entry>
    <entry key="CreateArrayLikeUnsupportedSuperclassLikeArg">When generating code for createArray, the 'Like' argument does not support instances of classes that inherit from ''{0}''.</entry>
    <entry key="CreateArrayLikeUnsupportedSuperclassClassnameArg">When generating code for createArray, the classname argument does not support classes that inherit from ''{0}''.</entry>
    <entry key="CreateArrayLikeUnsupportedMethodLikeArg">When generating code for createArray, the 'Like' argument does not support instances of classes that implement method ''{0}''.</entry>
    <entry key="CreateArrayLikeUnsupportedMethodClassnameArg">When generating code for createArray, the classname argument does not support classes that implement method ''{0}''.</entry>
    <entry key="CSizeOfInvalidType" note="stringDatatypeUpdate">Valid arguments for the type are: ''char'', ''short'', ''int'', ''long'', ''long long'' but the argument passed is ''{0}''.</entry>
    <entry key="DefBeforeUsePropertyUndefined">Property ''{0}'' is undefined on some execution paths. For code generation, all variables must be fully defined before use.</entry>
    <entry key="DefBeforeUseFieldUndefined">Structure field ''{0}'' is undefined on some execution paths. For code generation, all variables must be fully defined before use.</entry>
    <entry key="DefBeforeUsePropertyUndefinedSub">Unable to perform subscripted assignment of property ''{0}'' because property ''{1}'' is undefined on some execution paths. For code generation, all variables must be fully defined before use.</entry>
    <entry key="DefBeforeUseFieldUndefinedSub">Unable to perform subscripted assignment of structure field ''{0}'' because field ''{1}'' is undefined on some execution paths. For code generation, all variables must be fully defined before use.</entry>
    <entry key="DefBeforeUsePropUndefinedFcnCall">Property ''{0}'' is undefined on some execution paths but is used inside the called function. For code generation, all variables must be fully defined before use.</entry>
    <entry key="DefBeforeUseInitalValueTypeMismatch">For the property ''{0}'', the type of the initial value ''{1}'' does not match the type of the assigned value ''{2}''.</entry>
    <entry key="DefBeforeUseInitalValueContainsUnassigned">Property ''{0}'' has an initial value that contains unassigned cell array elements. For code generation, all cell array elements must be fully defined before use.</entry>
    <entry key="DefBeforeUseInitalValueValueMismatch">The value of nontunable property ''{0}'' is not the same on all paths. Code generation requires that nontunable property is assigned same constant value on all execution paths.</entry>
    <entry key="DefBeforeUseDeleterPreconditionNotMetByConstructor">Code generation requires that the property ''{0}'' used in the handle class destructor function ''{1}'' be initialized along all execution paths of the constructor function ''{2}''.</entry>
    <entry key="DefBeforeUseFieldUsedFromFcnOutput">Property ''{0}'' returned by function ''{1}'' is undefined on some execution paths. For code generation, all variables must be fully defined before use.</entry>
    <entry key="DesignRangeInvalidTargetVariable">First argument to coder.designRange must be an argument of the current function.</entry>
    <entry key="DesignRangeMustAppearBelowSignature">coder.designRange entries must be placed immediately after the function signature.</entry>
    <entry key="DesignRangeMustApplyToNumericData">coder.designRange supports only variables containing numeric data.</entry>
    <entry key="DesignRangeRedefinition">Another design range constraint already applies to this variable.</entry>
    <entry key="DesignRangeBoundsMustBeConstants">Design range minimum and maximum must be compile-time constants.</entry>
    <entry key="DesignRangeBoundsMustBeScalarDouble">Design range minimum and maximum must be scalar doubles.</entry>
    <entry key="DesignRangeBoundsCannotBeNaN">Design range minimum and maximum must not be NaN.</entry>
    <entry key="DesignRangeUpperBoundBelowLowerBound">Design range maximum must be greater than or equal to the design range minimum.</entry>
    <entry key="PersistentVariableSometimesUndefined">Persistent variable ''{0}'' is undefined on some execution paths. For code generation, all variables must be fully defined before use.</entry>
    <entry key="FunctionOutputNotAlwaysAssigned">Output argument ''{0}'' is undefined on some execution paths. For code generation, all variables must be fully defined before use.</entry>
    <entry key="SEAOneDefinition">For code generation, System objects must be constructed and stored in persistent variables using an ''if isempty'' code block.</entry>
    <entry key="SEAPersistentAssign">System objects must be assigned to persistent variables for code generation.</entry>
    <entry key="SubVariableSometimesUndefined">Unable to perform subscripted assignment of variable {0} because variable {0} is undefined on some execution paths. For code generation, all variables must be fully defined before use.</entry>
    <entry key="VariableSometimesUndefined">Variable ''{0}'' is not fully defined on some execution paths. For code generation, all variables must be fully defined before use.</entry>
    <entry key="VariableUndefined">Variable ''{0}'' is undefined. For code generation, all variables must be fully defined before use.</entry>
    <entry key="DynamicCellArrayNotProvedFullyDefined">Unable to determine whether every element of cell array ''{0}'' is assigned before this line. For code generation, all cell array elements must be defined before use.</entry>
    <entry key="DynamicCellArrayNotProvedFullyDefinedExitingEntryPoint">Unable to determine whether every element of cell array ''{0}'' is assigned before exiting the function. For code generation, all cell array elements must be defined before use.</entry>
    <entry key="DynamicCellArrayNotProvedFullyDefinedInRecursiveFunction">Unable to determine whether every element of cell array ''{0}'' is assigned in a recursively called function. For code generation, all cell array elements must be defined before use.</entry>
    <entry key="IllegalEntryPointMatlabString">Variable ''{1}'' of entry-point function ''{0}'' contains a string that uses operations that are not supported for code generation.</entry>
    <entry key="IllegalGlobalMatlabString">Global variable ''{0}'' is or contains a string that uses operations that are not supported for code generation.</entry>
    <entry key="IllegalSimulinkBusWithMatlabString">Simulink Bus type variable ''{0}'' contains a string which is used in an operation that is not supported for code generation.</entry>
    <entry key="PersistentSimulinkStringsNotSupported">In a MATLAB Function block, persistent variables that contain Simulink strings are not supported.</entry>
    <entry key="VariableSizingSimulinkStringNotSupported">In a MATLAB Function block, if support for variable-size data is disabled, Simulink strings are not supported.</entry>
    <entry key="IsmethodDoesNotSupportChar">Code generation support calls to ismethod only if the first input is an object. Here the first input is ''{0}''.</entry>
    <entry key="IsmethodDoesNotSupportHalf">Code generation does not support calls to ismethod if the first input is of type ''{0}''.</entry>
    <entry key="IncompatibleEmptyAssignment">Treating expression of size 0 x 0 as {0} {1} to match later assignments.</entry>
    <entry key="IncompatibleEmptyCellArray">Treating '{}' as cell({0}) to match later assignments.</entry>
    <entry key="DMTUnknownUpperBound">Computed maximum size is not bounded.</entry>
    <entry key="DMTUnknownUpperBoundCall">Computed maximum size of the output of function ''{0}'' is not bounded.</entry>
    <entry key="DMTUnknownUpperBoundMultiCall">Computed maximum size of output #{0, number, integer} of function ''{1}'' is not bounded.</entry>
    <entry key="DMTUnknownUpperBoundVar">Computed maximum size of variable ''{0}'' is not bounded.</entry>
    <entry key="DMTUnknownUpperBoundExplanation">\nStatic memory allocation requires all sizes to be bounded.</entry>
    <entry key="DMTUnknownUpperBoundForStrings">Computed maximum size is not bounded.</entry>
    <entry key="DMTUnknownUpperBoundHDLExplanation">\nHDL Code generation requires all dimensions to be fixed in size.</entry>
    <entry key="DMTExceedMaxSize">Computed maximum size exceeds maximum allowed number of elements ({0, number, integer}).</entry>
    <entry key="DMTExceedMaxSize2">Computed array size {0} exceeds maximum allowed number of elements {1}.</entry>
    <entry key="DMTExceedMaxSizeCall">Computed maximum size of the output of function ''{0}'' exceeds maximum allowed number of elements ({1, number, integer}).</entry>
    <entry key="DMTExceedMaxSizeMultiCall">Computed maximum size of output #{0, number, integer} of function ''{1}'' exceeds maximum allowed number of elements ({2, number, integer}).</entry>
    <entry key="DMTStructFdErr">\nThe computed size of structure field ''{0}'' is {1}.</entry>
    <entry key="DMTClassPropErr">\nThe computed size of class property ''{0}'' is {1}.</entry>
    <entry key="DMTCellElemErr">\nThe computed size of the cell element ''{0}'' is {1}.</entry>
    <entry key="DMTExceedMaxSizeVar">Computed maximum size of variable ''{0}'' exceeds maximum allowed number of elements ({1, number, integer}).</entry>
    <entry key="DMTErrWoPath">\nThe computed size is {0}.</entry>

    <entry key="ArrayDimensionExceedMaxSize">Size {0} of array dimension number {1, number, integer} exceeds maximum supported value ({2, number, integer}).</entry>

    <entry key="DMTErrorUnknownSrc">\nThis error may be reported because of a limitation of the underlying analysis.</entry>

    <entry key="DSPLicense">This requires the DSP System Toolbox license.</entry>
    <entry key="DimSubMismatchFewer">Assignment has fewer non-singleton rhs dimensions than non-singleton subscripts.</entry>
    <entry key="DimSubMismatchMore">Assignment has more non-singleton rhs dimensions than non-singleton subscripts.</entry>
    <entry key="DimensionIsStaticCanNotMakeDynamic">\nDimension {0,number,integer} cannot be made dynamic: it has previously been set to have fixed size {1,number,integer}.</entry>
    <entry key="DuplicateFunctionAttributesTag">coder.preserveFunction or coder.MethodAttributes may only be specified once per function or method.</entry>
    <entry key="DuplicateStructFieldName">Duplicate field name ''{0}''</entry>
    <entry key="DynamicMemoryAllocationOptionOff">\nPlease consider enabling dynamic memory allocation to allow unbounded sizes.</entry>
    <entry key="EMLAssert">EML_ASSERT only recognizes message kinds of ''error'' and ''warning''.</entry>

    <entry key="EMLInvariantIllegalInputs">A call to eml_invariant should takes one of the following forms: \n  eml_invariant(cond, eml_message(...)) \n  eml_invariant(cond, eml_message(...), "IfNotConst", "CheckAtRunTime") \n  eml_invariant(cond, eml_message(...), "IfNotConst", "Fail").</entry>
    <entry key="EMLInvariantStringMsgId" note="stringDatatypeUpdate">The second input must be a message identifier.</entry>
    <entry key="EMLMessageIllegalInput" note="stringDatatypeUpdate">Error using eml_message. Holes in a message should be character vectors or integers.</entry>
    <entry key="EmbeddedComponentPropagationError" translate="false" note="TranslateFalseBatch;">{0}</entry>
    <entry key="EmbeddedComponentsConcatenationUndefined">The operation of concatenation is not defined for System objects.</entry>
    <entry key="EmbeddedComponentsNotSupported">This System object does not support code generation.</entry>
    <entry key="EmbeddedComponentsmxArrayInput">Input must be an mxArray.</entry>
    <entry key="EmlCInterfaceNotAvailable">FIACCEL does not support {0}. To call C functions, use CODEGEN (requires a MATLAB Coder license).</entry>
    <entry key="EmlCInterfaceNotAvailableDV">{0} is not supported by Simulink Design Verifier.</entry>
    <entry key="EmlCInterfaceAnyLayoutNotAvailableDV"> '-layout:any' flag in 'coder.ceval' is not supported by Simulink Design Verifier.</entry>
    <entry key="EmlUpdateBuildInfoNotSupported">{0} is not supported by Simulink Design Verifier. Update the custom code information in the 'Simulation Target' tab in the 'Configuration parameters' window and select the 'Enable custom code analysis' option instead.</entry>

    <entry key="CannotComputeConstantValue">Expression could not be reduced to a constant.</entry>

    <entry key="CannotComputeConstantValue_WithReason">Expression could not be reduced to a constant: {0}</entry>

    <entry key="CannotComputeConstantValue_SeeNextError">Expression could not be reduced to a constant. See next error for more information.</entry>

    <entry key="CannotComputeConstantValue_NextError">The preceding error is caused by: {0}</entry>

    <entry key="CoderConstWrongMultipleOutputs">Use syntax [a,b,...] = coder.const(@fcn,x,y,...) when the function fcn returns multiple outputs.</entry>

    <entry key="EmlNamespaceFunctionName">{0} is an unrecognized keyword.</entry>
    <entry key="EmlPlaceVarsizeBeforeUse">\nPlace the coder.varsize() declaration before the first use of {0}.</entry>
    <entry key="EmlPlaceVarsizeAfterDef">Place the {1} declaration after the first assignment to {0}.</entry>
    <entry key="EmlUpperboundsNotDynamicMatrix">eml_upperbounds() can only be applied to a variable-size array.</entry>
    <entry key="EmlUpperboundsWrongDimensions">This array has {0,number,integer} dimensions, but the size vector has {1,number,integer} elements.</entry>
    <entry key="EmlUpperboundsNonReal">The size vector must have real numeric values.</entry>
    <entry key="EmlUpperboundsSizeNotConst">The size vector must be constant.</entry>
    <entry key="EmlVarsizeDimensionCanNotBeFixed">\nDimension {0,number,integer} of {1} has variable size and cannot be fixed.</entry>
    <entry key="EmlVarsizeHasNoEffectOnGlobals">coder.varsize() has no effect on global variables.\n Use a coder.Type inside the command-line -globals switch to define variable-size globals.</entry>
    <entry key="EmlVarsizeInfFixedDimSize">Fixed size dimension {0,number,integer} has upper bound Inf. This is not supported.</entry>
    <entry key="EmlVarsizeLargeFixedDimSize">Fixed size {0,number,integer} at dimension {1,number,integer} is larger than or equal to intmax(). This is not supported.</entry>
    <entry key="EmlVarsizeLargeStaticMatrix">Fixed-size matrix with numel larger than or equal to intmax(). This is not supported.</entry>
    <entry key="EmlVarsizeOnlyColonIndexAllowed" note="stringDatatypeUpdate">Only colon indexing is allowed in the input to coder.varsize(): coder.varsize(''variable.field1(:).field2'') but not coder.varsize(''var.field1(1).field2'').</entry>
    <entry key="EmlVarsizeRedefinition">Conflicting coder.varsize() directives are applied to the same object {0}.</entry>
    <entry key="EmlVarsizeSuggestedUpperBoundDiffersFromPresetOne">Cannot change a predefined upper bound on dimension {0,number,integer}. Predefined upper bound {1,number,integer}, requested upper bound {2,number,integer}.</entry>
    <entry key="EmlVarsizeSyntaxErrorInPath" note="stringDatatypeUpdate">Syntax error in the input to coder.varsize().</entry>
    <entry key="EmlVarsizeThirdInputMustBeLogicalVector">The last input of coder.varsize() must be a vector of logical values.</entry>
    <entry key="EmlVarsizeThirdInputSizeMismatch">Number of dimensions of the variable (the first input) and size of the last input must match.</entry>
    <entry key="EmlVarsizeTooFewDimensionsGiven"><![CDATA[The object ''{0}'' has more dimensions than provided in coder.varsize(): {1,number,integer} > {2,number,integer}.]]></entry>
    <entry key="EmlVarsizeUseInfWithoutMalloc">Declaration of upper bound size as Inf requires the use of dynamic memory allocation. To allow unbounded sizes, enable dynamic memory allocation.</entry>
    <entry key="EmlVarsizeVariableIsLocked">Size of {0} cannot be modified as the variable ''{1}'' is already locked.</entry>
    <entry key="EmlVarsizeZeroUpperBoundUnsupported">Zero upper bound is specified for dimension {0,number,integer}.</entry>
    <entry key="EmlVarsizeUnsupportedClass">coder.varsize() is not applicable to ''{0}''.</entry>
    <entry key="EmlVarsizeHeterogeneousCellUnsupported">coder.varsize() does not support heterogeneous cell arrays.</entry>
    <entry key="EmlVarsizeCellParenIndexingUnsupported">coder.varsize() does not support indexing into cell arrays using ''()''. Use '''{}''' indexing to access the elements, or no indexing to access the cell array itself.</entry>
    <entry key="EmptyIndexStructArray">Indexing results in an empty array of structures. Empty arrays of structures are not supported.</entry>
    <entry key="EmptyPersistent">Assigning empty arrays to persistent variables is not supported.</entry>
    <entry key="EmptyStructArray">Empty arrays of structures are not supported.</entry>
    <entry key="EnumCannotConvert">The input array could not be converted to the ''{0}'' enumeration class because not all of the elements were in the enumerated list.</entry>
    <entry key="EnumEmptyConstructorCall">''{0}'' is an enumeration and cannot be used as an empty function call.</entry>
    <entry key="EnumInvalidConst">The enumeration value ''{0}'' is not defined in ''{1}''.</entry>
    <entry key="EnumInvalidUse">Attempt to use enumeration ''{0}'' without an element reference.</entry>
    <entry key="EnumsNotAllowed">Enumeration types are not allowed here. The expression is of class ''{0}'' which is an enumeration.</entry>
    <entry key="EnumsNotAllowedForLibraryFcn">Function ''{0}'' does not allow enumeration types. The argument is of class ''{1}'' which is an enumeration.</entry>
    <entry key="HalfNotAllowedForLibraryFcn">Function ''{0}'' does not allow half type.</entry>
    <entry key="HalfComplexSupport">Half complex type is not supported for code generation.</entry>
    <entry key="NativeHalfTypeCPPSupport">Native Half types are supported only for C targets. C++ Targets are supported using Emulated Half Library.</entry>
    <entry key="HalfArithmeticOperationUnsupported">For half types, code generation only supports arithmetic operations on numeric types. One of the operands is of type ''{0}''.</entry>
    <entry key="HalfRelationalOperationUnsupported">For half types, code generation only supports relational operations on numeric or logical types. One of the operands is of type ''{0}''.</entry>
    <entry key="EntryPointMustBeExported">''{0}'' is an entry-point function and must be exported.</entry>
    <entry key="EnumCompareString">Code generation does not support comparing an enumeration to a character array, string, or cell array with the operators '==', '~=', or 'isequal'.</entry>
    <entry key="EnumOverloadedRelop">The enumeration ''{0}'' is overloading operator ''{1}'' which is not supported for code generation.</entry>
    <entry key="ErrorLimitReached">Error limit reached. Suppressing further error messages.</entry>
    <entry key="ExpectedAnEnum">Expected an enumeration.</entry>
    <entry key="ExpectedCharString" note="stringDatatypeUpdate">Expected a character vector.</entry>
    <entry key="ExpectedCellstr">Expected a cell array of character vectors.</entry>
    <entry key="ExpectedFIMATH">Expected a FIMATH object but did not find one.</entry>
    <entry key="ExpectedFunctionHandle">Expected a function handle. Found a {0}.</entry>
    <entry key="ExpectedFunctionHandleOrDirectCall">Expected a function handle, or direct call with parentheses.</entry>
    <entry key="AmbiguousCallInMatlabExecution">This call syntax, one function handle with no arguments, would be ambiguous in MATLAB execution. Call the function argument directly with parentheses.</entry>
    <entry key="Unexpected">Unexpected {0}.</entry>
    <entry key="ExpectedNonEnumerationClass">Expected non-enumeration class. Found {0}.</entry>
    <entry key="ExpectedInteger">Expected an integer. Found class {0}.</entry>
    <entry key="ExpectedIntegerValue">Expected an integer value representable in ''int32''.</entry>
    <entry key="ExpectedIntegerValueInRangeOf">Expected an integer value in the range {0,number,integer}-{1,number,integer}.</entry>
    <entry key="ExpectedNonnegativeIntegerValue">Expected a nonnegative integer value.</entry>
    <entry key="ExpectedNonComplex">Found a complex value. A real value was expected. Use the functions REAL or IMAG to make this value real if appropriate.</entry>
    <entry key="ExpectedNumeric">Expected a numeric value. Found a {0}.</entry>
    <entry key="ExpectedNumericType">Expected a numeric type.</entry>
    <entry key="ExpectedNumericVector">Expected a numeric vector.</entry>
    <entry key="ExpectedScalarBoolean">Expected a scalar boolean value.</entry>
    <entry key="ExpectedScalarNumeric">Expected a scalar numeric value.</entry>
    <entry key="ExpectedScalarStruct">Expected a scalar structure.</entry>
    <entry key="ExpectedScalarNumericAsDouble">Expected a scalar numeric value representable as double.</entry>
    <entry key="OutOfIndexingRange">Value ''{0}'' is out of range for indexing with type ''{1}''.</entry>
    <entry key="ExpectedScalarString" note="stringDatatypeUpdate">Expected a vector not a matrix of characters.</entry>
    <entry key="ExpectedScalarVerbose">Expected a scalar value. This expression has size {0}.</entry>
    <entry key="ExpectedTargetIntegerValue">Expected an integer value representable as a target ''int'' type.</entry>
    <entry key="ExpectedUnsignedInteger">Expected an unsigned integer. Found class {0}.</entry>
    <entry key="ExpectedVector">Vector expression expected.</entry>
    <entry key="ExpectedVectorOfPositiveIntegers">Expected a vector of positive integers.</entry>
    <entry key="ExpressionTooLarge">This expression is too large. Store partial results in temporary variables to split the expression into smaller parts.</entry>
    <entry key="ExpressionUnsupported">This kind of expression is not supported.</entry>
    <entry key="ExtrinsicArg" note="stringDatatypeUpdate">Arguments to coder.extrinsic must be function names.</entry>
    <entry key="ExtrinsicCallInsideParallelRegion">Calls to extrinsic functions inside Parallel FOR loops are not supported.</entry>
    <entry key="ExtrinsicMisplaced">Function ''{0}'' marked coder.extrinsic after use.</entry>
    <entry key="ExtrinsicTopLevel">Calls to coder.extrinsic may only appear at the top-level.</entry>
    <entry key="FailSharedRestricted">Caller ''{0}'' is not authorized to share restricted resource ''{1}''.</entry>
    <entry key="FailSharedRestrictedCallerPath">Path of caller of shared restricted resource ''{0}'': ''{1}''.</entry>
    <entry key="FailSharedRestrictedCalleePath">Path of shared restricted resource ''{0}'': ''{1}''.</entry>
    <entry key="FailSharedRestrictedNoDispatcher">Unable share restricted resource ''{0}'': MATLAB dispatcher not present.</entry>
    <entry key="FailSharedRestrictedNotOnMATLABPath">Unable share restricted resource ''{0}'': ''{1}'' is not on the MATLAB path.</entry>
    <entry key="FailSharedRestrictedNotValidDirectory">Unable share restricted resource ''{0}'': path ''{1}'' does not contain a valid directory.</entry>
    <entry key="FailSharedRestrictedNotDirCaller">Unable share restricted resource ''{0}'': path ''{1}'' does not contain a licensed directory.</entry>
    <entry key="FcnNeedsRuntime">''{0}'' requires the use of EMLRT and can only be used with MEX and S-Function targets.</entry>
    <entry key="FieldNameConstantQualifier">\nField name must be constant.</entry>
    <entry key="FieldValuePair">Field and value input arguments must come in pairs.</entry>
    <entry key="FileMgrCmdNotConst" note="stringDatatypeUpdate">The supplied operation is not valid. It must be one of the following: ''open'', ''close'', ''filestar'', ''autoflush'', ''list'', ''closeall'.</entry>
    <entry key="FileMgrCmdNotFound">The supplied operation ''{0}'' is not valid. It must be one of: open, close, filestar, autoflush, list, closeall.</entry>
    <entry key="FileMgrNargin">The supplied operation ''{0}'' requires ''{1}'' arguments.</entry>
    <entry key="FimathIsLocalArg1">First argument to EML_FIMATHISLOCAL must be a fixed-point.</entry>
    <entry key="FimathMismatch">Properties of fimath object must match.</entry>
    <entry key="FimathMismatchOnField">Properties of fimath object in field ''{0}'' must match.</entry>
    <entry key="FimathMismatchOnCell">Properties of fimath object in cell ''{0}'' must match.</entry>
    <entry key="FixedPointLicense">This requires the Fixed-Point Designer license.</entry>
    <entry key="FixedPointSize">Fixed point type cannot exceed {0,number,integer} bits; got {1,number,integer} bits.</entry>
    <entry key="FixedPointSubsAsgnLhsFIRhsEnum">The operand on the right hand side of operator ''='' in the subsasgn operation cannot be an enumeration.</entry>
    <entry key="EndPlus1SubsAsgnLhsNdVectorNotSupported">Subscripting into vector with more than two dimensions with ''end + 1'' not supported.</entry>
    <entry key="EndPlus1RequiresVariableSizing">To subscript into a cell array or array with ''end + 1'', enable support for variable-size arrays in code generation. Set the code configuration property EnableVariableSizing to true, or enable the "Enable variable-sizing" parameter in the MATLAB Coder app.</entry>
    <entry key="EndPlus1ConflictsWithCoderVarsize">Unable to grow array {0} using (end + 1) because the coder.varsize directive indicates that all of the dimensions of {0} are fixed-size. Modify the coder.varsize directive to make at least one dimension of {0} variable-size.</entry>
    <entry key="EndPlus1SubsAsgnLhsMultiIndexingNotSupported">Multi-dimensional indexing into a cell array or array with ''end+1'' is not supported.</entry>
    <entry key="EndPlus1SubsAsgnLhsMultiOutputNotSupported">Subscripting with ''end+1'' is not supported when assigning from a function that returns multiple outputs.</entry>
    <entry key="EndPlus1SubsAsgnLhsModularIndexingNotSupported">Subscripting into ''{0}'' with ''end + 1'' is not supported for code generation.</entry>
    <entry key="EndPlus1SubsAsgnLhsNonVectorNotSupported">Subscripting into nonvector cell array or array with ''end + 1'' not supported.</entry>
    <entry key="EndPlus1SubsAsgnLhsFieldOrClosureNotSupported">Subscripting with ''end + 1'' is not supported for struct fields, object properties, or nested function variables that belong to the parent function's workspace.</entry>
    <entry key="EndPlus1SubsAsgnLhsNonVariableNotSupported">Subscripting with ''end + 1'' is supported for variables only.</entry>
    <entry key="EndPlus1GrowColumnAsRow">Variable ''{0}'' is specified as a column vector with size {1}, but this subscripting with ''end + 1'' produces a row vector with size {2}. To append to ''{0}'' as a column, use ''{0} = [{0}; newValue];''.</entry>
    <entry key="EnumerationDataScopeIncorrecValue">Invalid data scope returned by ''{0}.getDataScope''. Data scope must be "Auto", "Imported", or "Exported".</entry>
    <entry key="FixedPointType">Unsupported fixed point type.</entry>
    <entry key="FixedVariableSizeMismatch">\nMismatched varying and fixed sizes indicate a probable run-time error. If this diagnostic is incorrect, use indexing to explicitly make the varying size fixed.</entry>
    <entry key="ForLoopIndexMCOS">FOR loop iteration over MATLAB classes is not supported.</entry>
    <entry key="ForLoopCellOneRow">To use FOR loop iteration over cell arrays in code generation, the size of the first dimension of the cell array must be exactly 1.</entry>
    <entry key="ForLoopCellUnassignedElement">When using FOR loop iteration over cell arrays, code generation only supports usage of cell arrays where all elements have been assigned.</entry>
    <entry key="ForLoopCellHeterogeneousRequireUnroll">When using FOR loop iteration over a heterogeneous cell array, unroll the loop using ''coder.unroll''.</entry>
    <entry key="ForLoopIndexFi">For-loop iteration over embedded.fi objects is not supported. Rewrite the loop to use an independent index variable to access the data in the embedded.fi object.</entry>
    <entry key="ForLoopIndexFunctionHandle">FOR loop iteration over function handles is not supported.</entry>
    <entry key="ForLoopIndexIncompatible">Index variable {0} is used outside its corresponding FOR loop. The run-time behavior will differ from MATLAB if the loop is not executed.</entry>
    <entry key="ForLoopIndexGlobalIncompatible">Index variable {0} is a global variable so it may be used outside its corresponding FOR loop. The run-time behavior will differ from MATLAB if the loop is not executed.</entry>
    <entry key="ForLoopIndexMxArray">FOR loops with mxArray indices are not supported.</entry>
    <entry key="ForLoopIndexOutputIncompatibility">Output {0} is used as a FOR loop index variable. The run-time behavior will differ from MATLAB if the loop is not executed.</entry>
    <entry key="ForLoopIndexRowsUnknown">FOR loop index expression had unknown number of rows.</entry>
    <entry key="ForLoopIndexUnknown">FOR loop index expression has unknown class.</entry>
    <entry key="ForLoopUnknownSpecial">FOR loop index expressions of unknown size are only supported if they are of the form A:B or A:B:C.</entry>
    <entry key="FunctionCallFailed">Function call failed.</entry>
    <entry key="FunctionCallFailedFAV">Function call failed: Invalid argument at position {0,number,integer}.</entry>
    <entry key="FunctionCallFailedFAVDefault">Function call failed: Invalid default value at position {0,number,integer}.</entry>
    <entry key="FunctionCallFailedName">Call to function ''{0}'' failed.</entry>
    <entry key="FunctionCallWarned">Called function produced warnings.</entry>
    <entry key="FunctionHandleCanNotBeUsedHere">Function handle cannot be used here.</entry>
    <entry key="FunctionHandleTypeMismatch">Type mismatch: MATLAB Coder cannot determine the equivalence of function handles {0} versus {1}.</entry>
    <entry key="FunctionHandleUnsupportedForCcalls">Function handles are unsupported for C calls.</entry>
    <entry key="FunctionHandleUnsupportedForCcallsWithin">A(n) {0} containing a function handle is unsupported for C calls.</entry>
    <entry key="FunctionHandleUnsupportedForCeval">Function handles are unsupported for ''coder.ceval.''</entry>
    <entry key="FunctionHandleUnsupportedForCevalWithin">A(n) {0} containing a function handle is unsupported for ''coder.ceval''.</entry>
    <entry key="FunctionHandleUnsupportedForMATLABCalls">Function handles cannot be passed to extrinsic functions.</entry>
    <entry key="FunctionHandleUnsupportedForMATLABCallsWithin">A(n) {0} containing a function handle cannot be passed to extrinsic functions.</entry>
    <entry key="FunctionHandleUnsupportedForMxArrayValues">Function handles are not convertible to or from mxArray values.</entry>
    <entry key="FunctionHandleUnsupportedForMxArrayValuesWithin">A(n) {0} containing a function handle is not convertible to or from mxArray values.</entry>
    <entry key="FunctionHandleUnsupportedForOutput">Function output ''{0}'' cannot be a function handle.</entry>
    <entry key="FunctionHandleUnsupportedForOutputWithin">Function output ''{0}'' cannot be a(n) {1} containing a function handle.</entry>
    <entry key="FunctionHandleUnsupportedForSave">Function handles cannot be passed to ''save''.</entry>
    <entry key="FunctionHandleUnsupportedForSaveWithin">A(n) {0} containing a function handle cannot be passed to ''save''.</entry>
    <entry key="FunctionHandleUnsupportedForStateflowCalls">Function handles are unsupported for Stateflow calls.</entry>
    <entry key="FunctionHandleUnsupportedForStateflowCallsWithin">A(n) {0} containing a function handle is unsupported for Stateflow calls.</entry>
    <entry key="FunctionPointerNotSupportedHere">Function pointers are not supported here.</entry>
    <entry key="FunctionPointerNotSupported">Function pointers are not supported for code generation.</entry>

    <entry key="FunctionHasNoVararg">This function has no ''{0}''.</entry>
    <entry key="FunctionInputArity">The function ''{0}'' expects {1,number,integer} inputs; {2,number,integer} were found.</entry>
    <entry key="FunctionNotLValue">The function ''{0}'' was found on the left-hand side of an assignment. Variables alone are allowed in these contexts.</entry>
    <entry key="FunctionNotSupportedForCodeGeneration">Function ''{0}'' not supported for code generation.</entry>
    <entry key="FunctionOutputMxArray">Code generation does not support mxArray output from this function in this context. Initialize output variable {0} with a known type.</entry>
    <entry key="FunctionOutputSEA">Function output ''{0}'' cannot be a System object.</entry>
    <entry key="FunctionSizeQualifier">\nThe size to the left is the specified size of the function input.</entry>
    <entry key="FunctionStructClassQualifier">\nThe struct to the left is the specified class of the function input.</entry>
    <entry key="GetFieldIndex">Index ''{0,number,integer}'' is not a valid field index.</entry>
    <entry key="GetfieldArg1">First argument must be of type struct.</entry>
    <entry key="GlobalMisplaced">Declare ''{0}'' as global variable before use.</entry>
    <entry key="GlobalTopLevel">GLOBAL declarations may only appear at the top-level.</entry>
    <entry key="GlobalUnexpectedValue">Found unsupported global data initialization class for global variable ''{0}''.</entry>
    <entry key="GlobalUninitialized">Could not find initial value for global variable ''{0}''.</entry>
    <entry key="GlobalUnsupported">Unsupported: GLOBAL variables.</entry>
    <entry key="GlobalMCOSUnsupported">Code generation does not support global variables holding instances of MATLAB classes.</entry>
    <entry key="GlobalHandleSEAUnsupported">Code generation does not support global variables containing handle classes or System objects.</entry>
    <entry key="MultiInheritanceSameNamedPropertyAbstractUnsupported">Code generation does not support multiple inheritance from superclasses when each superclass has a property of the same name and the property is abstract in one of the superclasses. Property ''{0}'' is abstract in superclass ''{1}'' and not abstract in superclass ''{2}''.</entry>
    <entry key="GlobalSparseUnsupported">Code generation does not support global variables that are sparse matrices or contain sparse matrices.</entry>
    <entry key="GlobalOpaqueUnsupported">Code generation does not support global variables that are of coder.opaque type.</entry>
    <entry key="GlobalIncompatibleValue">Initial value of global variable ''{0}'' does not match its type.</entry>
    <entry key="LoadFailed">Failed to load file ''{0}''.</entry>
    <entry key="LoadFailedWithCause">Failed to load file ''{0}'': {1}</entry>
    <entry key="HalfPrecisionLicense">Use of half-precision data type requires Fixed-Point Designer or MATLAB Coder license.</entry>
    <entry key="HalfTypeNotSupportedForTarget">The current code generation target does not support 'half' type.</entry>
    <entry key="BuiltInFcnConstArg">All arguments to the ''{0}'' function must be compile-time constants.</entry>
    <entry key="UpdateBuildInfoFailed">Failed to apply the ''{0}'' method to the BuildInfo.</entry>
    <entry key="UpdateBuildInfoFailedWithCause">Failed to apply the ''{0}'' method to the BuildInfo: {1}</entry>
    <entry key="LoadFileNotFound">Failed to locate file ''{0}'' specified in the load function.</entry>
    <entry key="LoadNeedsMATLAB">Function {0} is not supported for standalone code generation. Either change the target to generate a MEX or S-function with extrinsic calls enabled or use {1} to load the MAT file at compile time.</entry>
    <entry key="LoadFileNameNotConstant">The filename argument to ''load'' must be a constant string or character vector.</entry>
	<entry key="LoadSimpleAssignment">Function ''{0}'' can only be used as the right-hand side of a simple assignment to a struct or array variable without subscripting.</entry>
    <entry key="LoadSingleOutput">The output of a call to ''{0}'' is not assigned to a variable. Assign its output to a variable without subscripting.</entry>
    <entry key="LoadUnexpectedValue">Found unsupported class for variable using function ''{0}''.</entry>
    <entry key="LoadUnexpectedValueHint">Use the command ''whos -file {0}'' to view the variables in the MAT file.</entry>
    <entry key="CoderHardwareSettingsUndefined">Information about coder hardware settings is not available in the current context.</entry>
    <entry key="CoderHardwareSettingUndefined">The coder hardware setting ''{0}'' is not available in the current context.</entry>
    <entry key="CoderHardwareFailedWithCause">Failed to get coder hardware setting ''{0}'': {1}</entry>
    <entry key="CoderHardwareFailed">Failed to get coder hardware setting ''{0}''.</entry>
    <entry key="IBifUnsupported">This builtin is not yet supported.</entry>
    <entry key="IDPCountMismatch">Incorrect number of input arguments for ''{0}''. Expected {1,number,integer}, but found {2,number,integer}.</entry>
    <entry key="IDPCountMismatchCausedBy">Too many input arguments specified for entry-point ''{0}''. This is likely caused by: {1}</entry>
    <entry key="ODPCountMismatch">Incorrect number of output arguments for ''{0}''. Expected {1,number,integer}, but found {2,number,integer}.</entry>
    <entry key="IfWhileNonScalar">Logical operations on nonscalars are not supported for code generation. Use the functions ''any'' or ''all'' to reduce logical matrices to their scalar equivalents.</entry>
    <entry key="IllegalBaseTypeConversion">Cannot cast between these two base types.</entry>
    <entry key="IllegalExtrinsic">The {0} directive cannot be applied to ''{1}''. Remove the call to {2} for this function.</entry>
    <entry key="IllegalLogicalType">Expected either a logical, char, int, single, double or fi that can represent zero. Found a {0}.</entry>
    <entry key="IllegalMatlabType">Expected either a logical, char, int, fi, single, or double. Found an mxArray. MxArrays are returned from calls to the MATLAB interpreter and are not supported inside expressions. They may only be used on the right-hand side of assignments and as arguments to extrinsic functions.</entry>
    <entry key="IllegalMultiOutput">The function ''{0}'' cannot return multiple outputs.</entry>
    <entry key="IllegalMultiOutputUnknown">This function cannot return multiple outputs.</entry>
    <entry key="IllegalSizeVector">Size vector must be a row vector with integer elements.</entry>
    <entry key="IllegalType">Expected either a logical, char, int, fi, single, or double. Found a {0}.</entry>
    <entry key="IllegalTypeConversion">Cannot cast between these two types.</entry>
    <entry key="IllegalUseOfEnd">Illegal use of reserved keyword ''end''.</entry>
    <entry key="IllegalUseOfStrcmp">STRCMP can only be applied to character values.</entry>
    <entry key="ImplicitMatlabResolution">Function {0} is not supported for code generation. Use coder.extrinsic(''{1}'') to bypass code generation for this function.</entry>
    <entry key="ImplicitMatlabMethodResolution">Method {0} of class {1} is not supported for code generation. Use coder.extrinsic(''{2}'') to bypass code generation for this function.</entry>
    <entry key="ImplicitMatlabEnumMethodResolution">Method {0} of enumeration {1} is not supported for code generation. Use coder.extrinsic(''{2}'') to bypass code generation for this function.</entry>
    <entry key="ImplicitMatlabResolutionUnsupported">Function ''{0}'' is not supported for code generation and the {1} directive cannot be applied to ''{2}''.</entry>
    <entry key="ImportNotAllowedHere">Import statements are only allowed as leading statements after a function definition.</entry>
    <entry key="ImportNamespaceMustBeEmlpkg">Only emlpkg.* is supported as namespace for import statements.</entry>
    <entry key="ImportNamespaceNotConstant">\nImport namespace must be a constant expression.</entry>
    <entry key="ImportUnsupported">Import statements are currently unsupported.</entry>
    <entry key="ImproperOperarorUse">Operator is used improperly.</entry>
    <entry key="IncorrectInputArgumentCounts">Incorrect number of input arguments. {0} accepts exactly {1,number,integer} inputs (found {2,number,integer}).</entry>
    <entry key="IndexComplex">Subscript indices may not be complex.</entry>
    <entry key="IndexLogical">Logical indexing requires support of variable-sized arrays, which is currently disabled.</entry>
    <entry key="IndexLogicalVarsizeBlocked">To use logical indexing, enable variable-size arrays.</entry>
    <entry key="IndexMatrixDynamic">Size of subscripted matrix is not statically known.</entry>
    <entry key="IndexMxArray">mxArray indices are not supported. Assign the index expression to a variable with a known type and then use this variable to index into the array.</entry>
    <entry key="IndexNonNumeric">Subscript indices must be of a builtin numeric class. This index has class ''{0}''.</entry>
    <entry key="IndexOutOfBounds">Array element {0,number,integer} is out-of-bounds. Modify the index expression to access elements in the range {1,number,integer}-{2,number,integer}.</entry>
    <entry key="IndexOutOfBoundsLhs">Array element {0,number,integer} is out-of-bounds because code generation does not support growing arrays using indexing in this manner. Modify the index expression to access elements in the range {1,number,integer}-{2,number,integer} or explicitly define the array as variable-size.</entry>
    <entry key="VariableCreatedByIndexing">Variable ''{0}'' has not been assigned. To assign the variable, use a complete assignment and not a subscript. Code generation does not support creating arrays via indexing.</entry>
    <entry key="VariableCreatedByIndexingConst">Variable ''{0}'' has not been assigned. To assign the variable, use a complete assignment and not a subscript. Code generation does not support creating arrays via indexing.</entry>
    <entry key="IndexIntOutOfBounds">Index expression out of bounds. Attempted to access element {0,number,integer}. The maximum value representable by the target integer type is {1}.</entry>
    <entry key="IndexSizeDimensionMismatch">This indexing expression has {0,number,integer} dimensions, but the size vector has {1,number,integer} elements.</entry>
    <entry key="IndexSizeDynamic">Size of index expression is not statically known.</entry>
    <entry key="InlineParadox">Contradictory directives are both forcing and preventing inlining of this function. The last setting will be honored.</entry>
    <entry key="ExportParadox">Contradictory directives are both forcing and preventing exporting this function. The last setting will be honored.</entry>
    <entry key="MajorityParadox">Unable to specify array layout of a function more than once.</entry>
    <entry key="MajoritySetAfterCheck">Unable to specify array layout in a function after a call to coder.isRowMajor or coder.isColumnMajor.</entry>
    <entry key="MajorityNoClasses">Classes not supported for row-major functions.</entry>
    <entry key="MajorityCevalMultipleDefinitions">Unable to use multiple array layout definitions for the same coder.ceval declaration.</entry>
    <entry key="MajorityWrongExternalFcnMajority">Invalid global array layout mode for the external functions ''{0}''. Supported modes are : ''column'', ''row'' or ''any''.</entry>
    <entry key="MajorityUnsupportedClient">Current code generation workflow does not support row-major data types in {0}.</entry>
    <entry key="ImageUnsupportedClient">Current code generation workflow does not support image data type in {0}.</entry>
    <entry key="MajorityNoVarSizeIOWhenHaveRowMajor">Entry-point parameters that contain variable-size matrices or symbolic dimensions are not supported because {0} contains row-major data types.</entry>
    <entry key="MajorityHeterogenousVarRow">Variable ''{0}'' contains data stored in row-major array layout. This conflicts with the column-major array layout specified for the first entry-point function. Use column-major layout for all data contained in this variable.</entry>
    <entry key="MajorityHeterogenousVarColumn">Variable ''{0}'' contains data stored in column-major array layout. This conflicts with the row-major array layout specified for the first entry-point function. Use row-major layout for all data contained in this variable.</entry>
    <entry key="MajorityHeterogenousFcnRow">Function ''{0}'' must use column-major array layout. All entry-point functions must have the same array layout specification as the first entry-point function.</entry>
    <entry key="MajorityHeterogenousFcnColumn">Function ''{0}'' must use row-major array layout. All entry-point functions must have the same array layout specification as the first entry-point function.</entry>
    <entry key="MajorityAliasBreakForOverlaps">When arguments {0,number,integer} and {1,number,integer} potentially overlap in memory, changing their array layout is not supported. Combine the arguments into a single argument.</entry>
    <entry key="MethodAttributesOutsideClass">''{0}'' can only be used within a class method.</entry>
    <entry key="MethodMajorityNotAllowed">Methods cannot have coder.rowMajor or coder.columnMajor directives.</entry>
    <entry key="MaxNumberDimensions">Code generation does not support arrays with more than {0,number,integer} dimensions. This array has {1,number,integer} dimensions.</entry>
    <entry key="ClassMajorityMismatch">Base and subclass array layout do not match.</entry>
    <entry key="MajorityCheckOnNonMatrixVar">Argument to coder.isRowMajor and coder.isColumnMajor must be a matrix variable.</entry>
    <entry key="GlobalTopMajorityMismatch">Majority of the top-level function cannot be different from the global majority.</entry>
    <entry key="IndexRangeError">Index {0,number,integer} exceeds the number of elements ({1,number,integer}).</entry>
    <entry key="InputSizeMismatch">Size mismatch. Input {0,number,integer} expected value of size {1}. Found size {2}.</entry>
    <entry key="InrecognizedOperatorOption">Unrecognized option to operator.</entry>
    <entry key="IntegerCombination">Cannot combine ''{0}'' with ''{1}''. Integers can only be combined with integers of the same class or with scalar doubles.</entry>
    <entry key="InternalError">\nInternal Error: This error occurred inside a MathWorks function.</entry>
    <entry key="InvalidCClassName">Invalid C class name.</entry>
    <entry key="InvalidClassName" note="stringDatatypeUpdate">Invalid value ''{0}'' for the last argument.</entry>
    <entry key="InvalidComplexToNonComplexAssignment">Cannot assign a complex value into a non-complex location.</entry>
    <entry key="InvalidEnumField">Enumeration class ''{1}'' has no member named ''{0}''.</entry>
    <entry key="InvalidEnumAccess">Unable to access the enumeration constant ''{0}'' from a variable. Use the enumeration name: ''{1}.{0}''.</entry>
    <entry key="InvalidFloatClassName" note="stringDatatypeUpdate">Trailing input must be ''single'' or ''double''.</entry>
    <entry key="InvalidInlineMode">Invalid inline mode ''{0}''. Only ''always'', ''never'' and ''default'' are supported.</entry>
    <entry key="InvalidAttributeName">''{0}'' is not a valid option name for ''{1}''.</entry>
    <entry key="ConflictingMethodAttributes">Method ''{0}'' is ''{1}'', so attribute ''{1}'' is not applicable.</entry>
    <entry key="InvalidPropertyMode">Invalid property mode ''{0}''. Only ''associative'' and ''commutative'' are supported.</entry>
    <entry key="InvalidReductionOperation">Invalid reduction operation.</entry>
    <entry key="DifferentReductionTypes">A reduction uses different types. Current type is ''{0}''. Previous type was ''{1}''.</entry>
    <entry key="InvalidReductionOperationCommAssoc">Unsupported reduction operation.</entry>
    <entry key="InvalidReductionOperationNonBinary">Invalid reduction operation. Only binary operations are supported.</entry>
    <entry key="InvalidReductionOperationConcat">Invalid reduction operation. Concatenation is not supported as reductions in MATLAB Coder.</entry>
    <entry key="InvalidNonComplexToComplexAssignment">Assigning a non-complex value implicitly to a nested complex location (field ''{0}'') is unsupported.</entry>
    <entry key="InvalidOption">The value of code generation option ''{0}'' is invalid.</entry>
    <entry key="InvalidStructFieldName">Invalid field name ''{0}''</entry>
    <entry key="IsDefinedExpectsObjectProperty">Input to this builtin must be ''object.property''.</entry>
    <entry key="MCOSBuiltinRequiresNontunableProperty">This builtin only supports nontunable properties.</entry>
    <entry key="LhsClassQualifier">\nThe class to the left is the class of the left-hand side of the assignment.</entry>
    <entry key="LhsRhsComplexMismatch">The left-hand side has been constrained to be non-complex, but the right-hand side is complex. To correct this problem, make the right-hand side real using the function REAL, or change the initial assignment to the left-hand side variable to be a complex value using the COMPLEX function.</entry>
    <entry key="LhsRhsSizeMismatch">The right and left hand sides must have the same number of elements.</entry>
    <entry key="LhsSizeQualifier">\nThe size to the left is the size of the left-hand side of the assignment.</entry>
    <entry key="LhsStructClassQualifier">\nThe struct to the left is the class of the left-hand side of the assignment.</entry>
    <entry key="LibAssertRequiresExactlyThreeInputs">eml_lib_assert() requires three inputs: condition, message id, message text.</entry>
    <entry key="LicenseCheck">Compilation of this function requires a license for the feature ''{0}''.</entry>
    <entry key="LicenseCheckoutFailed">Failed to obtain license ''{0}'' required by function ''{1}''.</entry>
    <entry key="LicenseMode">First input to coder.license must be 'checkout'.</entry>
    <entry key="LicenseListMustBeConstant">List of licenses must be constant.</entry>
    <entry key="LockedOption">The option ''{0}'' is locked and cannot be changed.</entry>
    <entry key="LooksLikeScript">Code generation does not support scripts. Define an entry-point function.</entry>
    <entry key="LoopTooBigForAutomaticUnroll">Loop unrolling failed because the size of the unrolled loop body exceeds maximum size for automatic unrolling. Use coder.unroll() to force unrolling behavior if desired.</entry>
    <entry key="LoopUnrollParforVararg">Loop unrolling of parfor loops is not supported.</entry>
    <entry key="LoopUnrollCountUnknown">Loop unrolling failed because the number of iterations is unknown.</entry>
    <entry key="LoopUnrollCountUnknownOrNegative">Loop unrolling failed because the number of iterations is unknown or negative.</entry>
    <entry key="LoopUnrollCountUnreasonable">Loop unrolling failed because number of iterations {1,number,integer} exceeds maximum permitted {0,number,integer}.</entry>
    <entry key="VarargIndex">Unable to determine the value of the index for the repeating variable ''{0}'' because of failed loop unrolling.</entry>
    <entry key="DynamicField">Unable to determine dynamic field name because of failed loop unrolling.</entry>
    <entry key="UndefinedProp">Unable to determine if property ''{0}'' is initialized for all elements because of failed loop unrolling.</entry>
    <entry key="LoopUnrollCommonCellType">Unable to determine a common type for all cell elements because of failed loop unrolling.</entry>
    <entry key="MCOSCloningRequiredOnInput">Input #{0,number,integer} has different types at different call sites to function {1}: {2} and {3}.</entry>
    <entry key="MCOSCloningRequiredOnOutput">Output #{0,number,integer} has different types at different call sites to function {1}: {2} and {3}.</entry>
    <entry key="MCOSOperationUnsupportedHere">Detected the use of MATLAB classes. Classes are not supported for code generation.</entry>
    <entry key="MCOSOperationUnsupportedInThisFunction">Detected the use of MATLAB Classes. These are not supported for code generation.</entry>
    <entry key="MCOSOperationUnsupportedNearHere">Detected the use of MATLAB Classes near this location. This is not supported for code generation.</entry>

    <entry key="MCOSOperationUnsupported">This operation is not supported for code generation.</entry>
    <entry key="MCOSPropertyDoesNotExist">Class ''{0}'' does not have property ''{1}''.</entry>
    <entry key="MCOSPropertyNotDefined">Property ''{0}'' is undefined.</entry>
    <entry key="MCOSPropertyInitialValueUnsupportedType">Property ''{0}'' has initial value of unsupported type.</entry>
    <entry key="MCOSPropertyInitialPropertyUnsupportedType">Cannot generate code for the initial value of property ''{1}'' of class ''{0}''.</entry>
    <entry key="MCOSNoClass">No class {0}.</entry>
    <entry key="MCOSNonConstPropertyInitialValueClassType">Code generation only supports initial values of class type for constant properties. Property ''{0}'' of class ''{1}'' is not constant.</entry>
    <entry key="MCOSPropertyInitialValueClassTypeUnsupportedUse">Invalid constant property access. Use ''{0}.{1}.someProp'', but not ''{0}.{1}'' or ''{0}.{1}.getProp()''.</entry>
    <entry key="MCOSPropertyMismatchUnassigned">This statement must either leave property ''{0}'' unassigned or all incoming execution paths must assign property ''{0}'' a value of type ''{1}''.</entry>
    <entry key="MCOSCannotCallProtectedMethod">Cannot call protected method ''{0}''.</entry>
    <entry key="MCOSTunablePropertyNoRuntimeValue">Code generation requires that all properties containing ''{0}'' are marked nontunable.</entry>
    <entry key="MCOSCannotCallPrivateMethod">Cannot call private method ''{0}''.</entry>
    <entry key="MCOSConstructorCannotHaveTwoOutputs">Class constructor cannot have more than one output.</entry>
    <entry key="MCOSCannotCreateAbstractClassInstance">Cannot create instance of the abstract class ''{0}''.</entry>
    <entry key="MCOSUnsupportedFunctionOutputsUsed">This function or method is not supported for code generation but its outputs are used.</entry>
    <entry key="MCOSMethodNotFound">Method ''{0}'' is not found in class ''{1}''.</entry>
    <entry key="MCOSClassNotFound">Class ''{0}'' is not found.</entry>

    <entry key="MCOSMethodIsStatic">Method ''{1}'' of class ''{0}'' is a static method.</entry>
    <entry key="MCOSMethodIsNotStatic">Method ''{1}'' of class ''{0}'' is not a static method.</entry>

    <entry key="MCOSNonscalar">Code generation does not support {0} arrays.</entry>
    <entry key="MCOSCannotSetProtected">Cannot set protected property ''{0}''.</entry>
    <entry key="MCOSCannotGetProtected">Cannot get protected property ''{0}''.</entry>
    <entry key="MCOSCannotSetPrivate">Cannot set private property ''{0}''.</entry>
    <entry key="MCOSCannotGetPrivate">Cannot get private property ''{0}''.</entry>
    <entry key="MCOSCannotSetImmutable">Cannot set immutable property ''{0}'' outside the constructor of class ''{1}''.</entry>
    <entry key="MCOSSetPropUnsupportedValueClasses">Value classes with set.prop method are not supported for code generation.</entry>
    <entry key="MCOSSetMethodPropertyAccess">In class ''{0}'', the set method for dependent property ''{1}'' attempts to access the stored property value. Dependent properties do not store a value and cannot be accessed from their set method.</entry>
    <entry key="MCOSGetMethodPropertyAccess">In class ''{0}'', the get method for dependent property ''{1}'' attempts to access the stored property value. Dependent properties do not store a value and cannot be accessed from their get method.</entry>
    <entry key="MCOSNoSetMethod">In class ''{0}'', no set method is defined for dependent property ''{1}''. A Dependent property needs a set method to modify its value.</entry>
    <entry key="MCOSNoGetMethod">In class ''{0}'', no get method is defined for dependent property ''{1}''. A Dependent property needs a get method to access its value.</entry>
    <entry key="MCOSNontunableUsedBeforeAssigned">This non-tunable property has not been assigned yet. Non-tunable properties must be fully assigned before the first use.</entry>
    <entry key="MCOSNontunableDependentNotAllowed">Code generation does not support dependent properties which are nontunable. Property ''{0}'' is dependent and nontunable.</entry>
    <entry key="MCOSNontunablePropertyValueMismatch">The value of non-tunable property ''{0}'' does not match.</entry>
    <entry key="MCOSNontunablePropertyValueMismatchLeftHasValue">The value of non-tunable property ''{0}'' does not match. The property is assigned a constant value on the left-hand side, and no constant value on the right-hand side.</entry>
    <entry key="MCOSNontunablePropertyValueMismatchRightHasValue">The value of non-tunable property ''{0}'' does not match. The property is assigned a constant value on the right-hand side, and no constant value on the left-hand side.</entry>
    <entry key="MCOSMajorityPropertyValueMismatch">Array layout does not match.</entry>
    <entry key="MCOSAssignmentToConstantProperty">Setting the constant property ''{0}'' of the ''{1}'' class is not allowed.</entry>
    <entry key="MCOSAssignmentToMethodName">Method call as can not be target for assignment.</entry>
    <entry key="MCOSTwoMethodsSameNameInClass">Two or more methods with name ''{0}'' found in class ''{1}''.</entry>
    <entry key="MCOSExtrinsicMethodCallWithDotNotsupported">Code generation does not support calling extrinsic methods using dot notation. ''{0}'' is an extrinsic method.</entry>
    <entry key="MCOSStaticPropertyNoDefaultValue">Property ''{0}'' has no default value. Constant properties without default values are not supported for code generation.</entry>
    <entry key="MCOSBaseConstructorCallMustBeFirst">In code generation, calls to base constructors cannot be preceded by DISP, FOR, WHILE, SWITCH, IF or RETURN.</entry>
    <entry key="MCOSClassConstructorMustHaveOneOutput">Class constructor must have exactly one output.</entry>
    <entry key="MCOSBaseClassCannotBeLoaded">Base class ''{0}'' cannot be loaded.</entry>
    <entry key="MCOSClassCannotBeLoaded">Class ''{0}'' cannot be loaded.</entry>
    <entry key="MCOSInputNonTunablePropertyUnupported">Class ''{0}'' has non-tunable property ''{1}''. Classes with non-tunable properties are not supported as input to entry-point functions.</entry>
    <entry key="MCOSNonTunablePropertyCannotBeImported">Class ''{0}'' has non-tunable property ''{1}''. Classes with non-tunable properties are not supported as output from extrinsic functions.</entry>
    <entry key="MCOSEnumerationBlocksUnsupported">Enumeration blocks in classes are not supported for code generation.</entry>
    <entry key="MCOSEventsUnsupported">Events are not supported for code generation.</entry>
    <entry key="MCOSMethodUnsupported">The method ''{0}'' is not supported for code generation.</entry>
    <entry key="MCOSOverloadingUnsupported">Overloading the method ''{0}'' is not supported for code generation.</entry>
    <entry key="MCOSDeleteUnsupported">Code generation does not support the ''delete'' method. Handle objects are only destroyed when program execution ends, and destructors are never called.</entry>
    <entry key="MCOSExplicitDeleteUnsupported">Code generation does not support explicit calls to the ''delete'' method.</entry>
    <entry key="MCOSMethodNotFoundInRTTI">This function is not a valid MATLAB method.</entry>
    <entry key="MCOSTwoMethodsSameName">Code generation does not support two or more class methods with same name.</entry>
    <entry key="MCOSClassDoesnotHaveProperty">Class ''{0}'' does not have property ''{1}''.</entry>
    <entry key="MCOSConstructorAssignToPersistentOrProperty">In code generation, a new instance of a handle class must be assigned to a persistent variable or a property inside a persistent variable.</entry>
    <entry key="MCOSAliasedAssignmentExplanation">In code generation, an existing instance of a handle class handle value can only be assigned to a local variable or function output.</entry>
    <entry key="MCOSHandleInValue">Code generation does not support handle classes inside a value class.</entry>
    <entry key="SharedMCOSHandleInParfor">Variable ''{0}'' contains a handle class allocated outside PARFOR and thus it cannot be used inside PARFOR.</entry>
    <entry key="PersistentMCOSHandleInParfor">Persistent variable ''{0}'' contains a handle class and thus it cannot be used inside PARFOR.</entry>
    <entry key="MCOSUsedAtEntryPoint">A top-level output parameter containing a {0} is not supported in {1}. Output parameter ''{2}'' contains a {0}.</entry>
    <entry key="MCOSHandleUsedAtEntryPoint">Handle Classes in top-level outputs are not supported in {1}. Output parameter ''{0}'' contains a handle class.</entry>
    <entry key="MCOSUsedAtBoundary">Can not pass classes to extrinsic MATLAB functions, or to C or Stateflow functions.</entry>
    <entry key="MCOSStringNotSupportedHere">Strings are not supported here.</entry>
    <entry key="MCOSStringAsForeignFunctionArg">String was created using an operation that is not supported for use as an argument to this function.</entry>
    <entry key="MCOSNotSupportedHere">MATLAB classes are not supported here.</entry>
    <entry key="MCOSHandleNotSupportedHere">MATLAB handle classes are not supported here.</entry>
    <entry key="MCOSHandleUnsupportedForMxArrayValues">MATLAB handle classes are not supported as input to or output from extrinsic functions.</entry>
    <entry key="MCOSHandleNotSupportedSave">Cannot pass an object of class ''{0}'' to ''save'' as MATLAB handle classes are not supported for ''save''.</entry>
    <entry key="MCOSCannotPassClassesToMATLABFunction">Cannot pass an object of class ''{0}'' to extrinsic MATLAB function ''{1}''</entry>
    <entry key="MCOSCannotPassHandleClassesToMATLABFunction">Cannot pass an object of a handle class ''{0}'' to extrinsic MATLAB function ''{1}''</entry>
    <entry key="MCOSMxArrayNotAllowedForInternal">Cannot pass an mxArray to ''{0}''.</entry>
    <entry key="GenericForAllErrors" translate="false" note="TranslateFalseBatch;">{0}</entry>
    <entry key="MCOSCannotLoadClassWithMsg">Cannot load class ''{0}'': {1}</entry>
    <entry key="MCOSPropertyInitialValueLoadFailed">Cannot load initial value of property ''{0}'': {1}</entry>
    <entry key="MCOSPropertyAssignmentInConstructorOnly">Code generation only supports assignments to handle properties inside the constructor of the enclosing class.</entry>
    <entry key="MCOSPropertyAssignmentInConstructorOnlyOnce">Code generation requires each handle property to be assigned exactly once. This assignment can potentially be executed zero times, or more than once.</entry>
    <entry key="MCOSHandlePropertyAssignmentCannotBeNested">Code generation only supports assignments to handle properties inside the constructor of the enclosing class. Property ''{1}'' of class ''{0}'' is assigned outside of class constructor.</entry>
    <entry key="MCOSHandlePropertyAssignedTwice">Code generation requires each handle property to be assigned exactly once. There are two or more assignments to this property.</entry>
    <entry key="MCOSDiamondInheritanceNotSupported">Diamond-shape inheritance is not supported in code generation. Class ''{0}'' inherits from base class ''{1}'' via two or more paths.</entry>

    <entry key="MCOSCallInDefaultConstructorFailed">Call to ''{0}'' in the default constructor of ''{1}'' failed.</entry>
    <entry key="MCOSAccessListAttrNotSupported">Code generation does not support metaclasses or function handles in the 'Access' attribute, as used in the declaration of ''{0}''.</entry>
    <entry key="MCOSOnceSentinelPropertyMustBePrivate">The 'once' sentinel property ''{0}'' must be private.</entry>
    <entry key="MCOSOnceMethodMustBeProtectedOrPublic">The 'once {0}' method ''{1}'' must be protected or public.</entry>

    <entry key="MCOSOnceSentinelPropertyMustHaveInitialValueOfFalse">The 'once' sentinel property ''{0}'' must have initial value of 'false'.</entry>
    <entry key="MCOSOnceSentinelAndSetupMustBeInSameClass">Code generation does not support overriding setup(). isInitialized and setup() must be declared in the same class.</entry>

    <entry key="MCOSUnsupportedPropertyTypeFunctionHandle">Code generation does not support function handles in class properties.</entry>
    <entry key="MCOSUnsupportedPropertyTypeMxArray">Code generation does not support tunable class properties of mxArray type.</entry>
    <entry key="EntryPointNontunableMxArrayProperty">Code generation does not support nontunable class properties of mxArray type at entry-point.</entry>
    <entry key="ExtrinsicNontunableMxArrayProperty">Code generation does not support nontunable class properties of mxArray type passed to or returned from extrinsic functions.</entry>
    <entry key="SaveNontunableMxArrayProperty">Code generation does not support nontunable class properties of mxArray type passed to ''save''.</entry>
    <entry key="MCOSConstructorNameConflict">A class constructor cannot have an input and an output of same name. Both input #''{1, number, integer}'' and output #''{2, number, integer}'' have the same name ''{0}''.</entry>
    <entry key="MCOSClassDoesNotSupportCodeGeneration">The ''{0}'' class does not support code generation.</entry>
    <entry key="MCOSMethodDoesNotSupportCodeGeneration">The ''{0}'' method does not support code generation.</entry>

    <entry key="MCOSClassIsNotSupportedAsInitialValue">Code generation does not support ''{1}'' as an initial value for a property. If the property ''{0}'' does not need to be constant, remove the initial value and assign it in the constructor instead.</entry>

    <entry key="MCOSSeaLimitationNew">Persistent variable ''{0}'' in function ''{1}'' and variable ''{2}'' in function ''{3}'' may refer to the same instance of class ''{4}''. Because of an internal limitation, two persistent variables are not allowed to point to the same instance of this class.</entry>

    <entry key="MCOSSeaLimitationInstance">This expression and its property ''{0}'' have the same class. Code generation does not support recursive data structures.</entry>
    <entry key="MCOSSeaLimitationInstanceNamedVar">''{0}'' and ''{1}'' have the same class. Code generation does not support recursive data structures.</entry>
    <entry key="MCOSSeaLimitationInstanceProp">Property ''{0}'' and property ''{1}'' of this expression have the same class. Code generation does not support recursive data structures.</entry>

    <entry key="MCOSHandlePropertyAssignmentNonHandleHost">Code generation does not support handle properties inside non-handle classes. A property ''{0}'' of non-handle class ''{1}'' cannot be assigned a reference to a handle class ''{2}''.</entry>

    <entry key="MCOSNontunableValueClassProperty">Code generation does not support assigning an object of a value class into a nontunable property.</entry>

    <entry key="MCOSNontunableMCOSInCell">Code generation does not support assigning a cell array containing objects into a nontunable property.</entry>

    <!-- This message is intentionally very vague. We do not want to explain the underlying reason to the user. -->
    <entry key="MCOSClassNotSupportedHereMissingFromRedirect">Code generation does not support MATLAB class ''{0}'' in this context because the class does not implement toRedirect() and/or fromRedirect() methods.</entry>

    <entry key="ThisTypeCannotBeDisplayed">''{0}'' cannot be displayed.</entry>
    <entry key="DisplayNotSupportedForHandleClasses">Code generation does not support display for handle classes. ''{0}'' is a handle class.</entry>

    <entry key="MCOSFcnHandleNonStaticMethod">Code generation does not support function handles pointing to nonstatic methods. Replace the function handle @obj.method with the equivalent anonymous function @(varargin)obj.method(varargin'{:}').</entry>
    <entry key="MCOSAbortSetUnsupported">Code generation does not support properties with AbortSet attribute. Property ''{0}'' has AbortSet attribute.</entry>
    <entry key="MCOSInputParserUnsupported">Code generation does not support the inputParser object. Use an arguments block to perform argument validation.</entry>
    <entry key="MCOSInputTransientPropertyUnsupported">Classes with transient properties are not supported as input to entry-point functions in code generation. Transient attribute is true for property ''{0}'' of class ''{1}''.</entry>
    <entry key="MCOSOutputTransientPropertyUnsupported">Classes with transient properties are not supported as output from entry-point functions in code generation. Transient attribute is true for property ''{0}'' of class ''{1}''.</entry>
    <entry key="MCOSTransientPropertyCannotBeExported">Classes with transient properties are not supported as input to extrinsic calls in code generation. Transient attribute is true for property ''{0}'' of class ''{1}''.</entry>
    <entry key="MCOSTransientPropertyCannotBeImported">Classes with transient properties are not supported as output from extrinsic calls in code generation. Transient attribute is true for property ''{0}'' of class ''{1}''.</entry>
    <entry key="MCOSTransientPropertyUnsupportedForMxArrayValues">Classes with transient properties are not convertible to or from mxArray values. Transient attribute is true for property ''{0}'' of class ''{1}''.</entry>

    <entry key="MxArrayNotEliminated">Unable to eliminate an mxArray that was returned by an extrinsic function call. To generate standalone code, the code generator must be able to eliminate all mxArrays in your MATLAB code.</entry>
    <entry key="MatlabFunctionNotEliminated">Unable to generate standalone code because the output of the extrinsic function ''{0}'' appears to influence the calling function. Eliminate the call to ''{1}'' or ensure that its output is not used.</entry>
    <entry key="MatlibInputUnknown">Input to MATLAB function call must be of known size and class.</entry>
    <entry key="MatrixDeletion">Removing elements from a matrix is not supported.</entry>
    <entry key="MatrixMulSize">Cannot multiply a matrix of size {0} by one of size {1}. For a matrix multiplication A * B, the number of columns in A must match the number of rows in B.</entry>

    <entry key="MexInterceptionActivationConstructor">Unable to activate interception for ''{0}'' because it is a class constructor.</entry>
    <entry key="MexInterceptionActivationDuplicateInterception">Unable to activate interception for ''{0}'' because interception is already active for a symbol with this name.</entry>
    <entry key="MexInterceptionActivationFileNotFound">Unable to locate symbol: {0}. Provide the full path to the file.</entry>
    <entry key="MexInterceptionActivationFileAlreadyExists">Unable to activate interception for symbol ''{0}'' because a conflicting file already exists: {1}</entry>
    <entry key="MexInterceptionActivationNamespace">Unable to activate interception for ''{0}'' because it is located in a namespace.</entry>
    <entry key="MexInterceptionActivationNonAbsolutePath">Path is not absolute: {0}. Provide an absolute path.</entry>
    <entry key="MexInterceptionActivationNotOnPath">Unable to activate interception for ''{0}'' because it is not on the MATLAB path.</entry>
    <entry key="MexInterceptionActivationSymbolShadowed">Unable to activate interception for ''{0}'' because it is shadowed by ''{1}''</entry>
    <entry key="MexInterceptionDeactivationNotActive">Unable to deactivate interception for ''{0}'' because interception is not active.</entry>
    <entry key="MexInterceptionDectivationSymbolShadowed">Unable to deactivate interception for ''{0}'' because it is shadowed by ''{1}''</entry>
    <entry key="MexInterceptionGenerationFileNotFound">MEX file not found: {0}</entry>
    <entry key="MexInterceptionGenerationMexNotOnPath">Input to coder.internal.GeneratedMexInterception must be a valid MEX file located on the MATLAB path: {0}</entry>
    <entry key="MexInterceptionGenerationInvalidMex">Invalid MEX file ''{0}''. MEX must be generated by MATLAB Coder in the current release for this platform.</entry>

    <entry key="MissingEMLPragma">Missing %#codegen in ''{0}''. \nAdd %#codegen to this file to indicate that it is suitable for code generation. \n(The full path to ''{1}'' is ''{2}''.)</entry>
    <entry key="MixedDoubleInteger">Double operands interacting with integer operands must have integer values.</entry>
    <entry key="MixedInputs">Mixed inputs must either be single and double, or integer and scalar double. All other combinations are no longer allowed.</entry>
    <entry key="MultOutputOperator">This operator does not have multiple outputs</entry>
    <entry key="MultipleReturnValuesFromStateflow">A Stateflow function cannot return multiple outputs.</entry>
    <entry key="MustBeConst">Value must be constant.</entry>
    <entry key="MxArrayInput">Input is an mxArray.</entry>
    <entry key="MxArraySubscript">Subscripted assignments between two mxArrays are not supported.</entry>
    <entry key="MxEmptyStructure">Empty structures are not supported for code generation. Found empty structure at ''{0}''.</entry>
    <entry key="MxMixedStructureFieldTypes">Mixed field types in structure arrays not supported for code generation. Type at ''{0}'' must match type at ''{1}''.</entry>
    <entry key="MxStructureWithEmptyMatrix">Empty matrices inside structures are not supported. Found empty matrix at ''{0}''.</entry>
    <entry key="MxStructureWithCell">Codegen does not support importing variables from MATLAB that have cell arrays in structures. Cell array found at ''{0}''.</entry>
    <entry key="MxUnsupportedClass">MATLAB class ''{0}'' found at ''{1}'' not supported for code generation.</entry>
    <entry key="MxUnsupportedFixedPointType">The fixed point type used in ''{0}'' is unsupported.</entry>
    <entry key="MxUnsupportedFixedPointWordLength">Unsupported fixed-point type used in ''{0}''.  Type has a word length of more than 128 bits.</entry>
    <entry key="MxUnsupportedSparseMatrix">Sparse matrix found at ''{0}'' is unsupported.</entry>
    <entry key="MxVariableSizeConst">Code generation does not support the definition of this structure array as a constant because field {0} varies in size among array elements. Make this field the same size in every instance of the struct in the array or recreate the structure array as a cell array of struct scalars.</entry>
    <entry key="MxErrorLoadingClass">Error loading MATLAB object ''{0}''. Likely the class constructor encountered an error and terminated abnormally.</entry>
    <entry key="MxUnsupportedMCOSArrays">Element ''{0}'' is an array of objects. Code generation does not support constants containing arrays of objects. </entry>
    <entry key="MxUnsupportedValue">Value at ''{0}'' unsupported for code generation.</entry>
    <entry key="MxUnsupportedMCOSConstant">Constants of class ''{1}'' are not supported for code generation. Value of the variable ''{0}'' is an object of class ''{1}''.</entry>
    <entry key="MxIncompatibleValue">The value at ''{0}'' does not match the expected type ''{1}''.</entry>
    <entry key="MxIncompatibleEnum">The value at ''{0}'' is not an enumeration class based on one of: ''int8'', ''uint8'', ''int16'', ''uint16'', ''int32'', ''uint32'' or ''Simulink.IntEnumType''.</entry>
    <entry key="MxStringEncodingConversionError">Unable to represent ''{0}'' with 8-bit characters using the MATLAB code generation character encoding (''{1}''). Code generation supports only characters that can be represented in 8 bits.</entry>
    <entry key="MxStringEncodingSizeConsistencyError">Conversion of ''{0}'' to the MATLAB code generation character encoding (''{1}'') changed the number of characters. This behavior is not supported for code generation.</entry>
    <entry key="MxStringDecodingConversionError">Unable to convert string or character array from the MATLAB code generation character encoding (''{0}'').</entry>
    <entry key="MxStringDecodingSizeConsistencyError">Conversion of string or character array from the MATLAB code generation character encoding (''{0}'') changed the number of characters. This behavior is not supported for code generation.</entry>
    <entry key="MxFiSimulinkIncompatible">The value at ''{0}'' is a fixed-point number greater than {1,number,integer} bits which is unsupported.</entry>
    <entry key="MxNontunableParamsNotSupported">Code generation does not support importing instances of ''{0}'' from MATLAB.</entry>
    <entry key="MxHandleClassesNotSupported">Importing handle classes from MATLAB not supported for code generation.</entry>
    <entry key="NestedFunctionsInConstructor">Nested functions inside constructors not supported for code generation.</entry>
    <entry key="NoConversionPossible">Cannot convert to any supported type.</entry>
    <entry key="NoFixedPoint">''embedded.fi'' is not allowed here.</entry>
    <entry key="NoImplicitCast">Cannot perform an implicit cast between these two classes.</entry>
    <entry key="NoNargoutSpecified">Use of repeating output variable ''{0}'' requires nargout specification.  Use '-nargout' to specify the desired number of output values for function ''{1}''.</entry>
    <entry key="NoVararg">Attempt to access {0}'{'{1,number,integer}'}' while the current function has no {2} parameter.</entry>
    <entry key="NonConstantBraceListAssignRhsCount">braceListAssign requires a constant number of values to be assigned.</entry>
    <entry key="NonFinites">Target does not support nonfinite values (Inf and NaN). To permit this expression, change code generation configuration parameters.</entry>
    <entry key="NonIntegerIndexExpr">Non-integer index expression with value {0}.</entry>
    <entry key="NonIntegerSizeVector">Found a non-integer size vector.</entry>
    <entry key="NonScalarSubsRefInRef">Only scalar subscripting is permitted inside {0}. This subscript expression returns a matrix of size {1}.</entry>
    <entry key="NonTunableVariableHasMultipleAssignments">Variable marked as coder.nontunable() may only have one assignment.</entry>
    <entry key="NonTunablePropertyHasMultipleAssignments">Nontunable property ''{0}'' may only be assigned once.</entry>
    <entry key="NonTunablePropertyMustBeCompletelyAssigned">The nontunable property ''{0}'' of class ''{1}'' cannot be defined by subscripted assignment. Use complete assignment instead.</entry>
    <entry key="NonTunablePropertyNotConst">Failed to compute constant value for nontunable property ''{0}''. In code generation, nontunable properties can only be assigned constant values.</entry>
    <entry key="NonZeroImag">The imaginary part must be zero. Expected a scalar numeric value.</entry>
    <entry key="NotSupportedInMATLAB">Function {0} not supported in MATLAB. Use coder.target to limit the usage of {0} to code generation.</entry>
    <entry key="NullCharacter">This string or character vector contains the null character char(0). Code generation does not support the null character in this context.</entry>
    <entry key="NullCopyDoesNotSupportClass">coder.nullcopy does not support inputs of class ''{0}''.</entry>
    <entry key="NullCopyNotOnRhsOfAssignment">coder.nullcopy may only appear on the right-hand side of an assignment.</entry>
    <entry key="NullCopyOnRhsOfSubscriptedAssignment">coder.nullcopy may only appear in non-subscripted assignments.</entry>
    <entry key="InvalidLHS">This expression is not a valid definition.</entry>
    <entry key="NullInput">Missing input expression.</entry>
    <entry key="NumDimsMismatchInAssignment">Left hand side of the assignment has fewer dimensions than the right hand side: {0} cannot be assigned from {1}.</entry>
    <entry key="NumDimsMismatchInAssignmentOnField">Field ''{0}'' on the left hand side of the assignment has fewer dimensions than on the right hand side: {1} cannot be assigned from {2}.</entry>
    <entry key="NumDimsMismatchInAssignmentOnCell">Element ''{0}'' on the left hand side of the assignment has fewer dimensions than on the right hand side: {1} cannot be assigned from {2}.</entry>
    <entry key="CannotDetermineNumberOfElements">Cannot determine number of elements.</entry>
    <entry key="NumericTypeLocked">Attempted to set numeric type on operator twice.</entry>
    <entry key="NumerictypeMismatch">Properties of embedded.numerictype object must match.</entry>
    <entry key="NumerictypeMismatchOnCell">Properties of embedded.numerictype object in element ''{0}'' must match.</entry>
    <entry key="NumerictypeMismatchOnField">Properties of embedded.numerictype object in field ''{0}'' must match.</entry>
    <entry key="NumfieldsArg">Argument must be of type struct.</entry>
    <entry key="OpGeneratingComplexSlopeBiasFiUnsupported">All complex FI objects created by Fixed-Point Designer operations must have an integer power of 2 slope, and a bias of 0.</entry>
    <entry key="OpaqueCannotBeDisplayed">Opaque values cannot be auto-displayed. Terminate the statement with a semi-colon to suppress auto-display.</entry>
    <entry key="OpaqueCannotBeExported">Opaque values cannot be passed to calls to MATLAB.</entry>
    <entry key="OpaqueCannotBeImported">Opaque values cannot be returned from calls to MATLAB.</entry>
    <entry key="OpaqueCannotBeSaved">Opaque values cannot be passed to ''save''.</entry>
    <entry key="UnassignedMClassCannotBeImported">Cell arrays containing unassigned cells cannot be returned from calls to MATLAB.</entry>

    <entry key="OpaqueInitialValue">Function coder.opaque used in a function call without an initial value. To use coder.opaque in a function call, supply an initial value as the second argument.</entry>
    <entry key="OpaqueEmptyType">The first parameter of coder.opaque must be a valid C type.</entry>
    <entry key="OpaqueMissingHeaderFile" note="stringDatatypeUpdate">The optional parameter name at position {0,number,integer} for ''{1}'' must be ''HeaderFile'' or ''Size''.</entry>
    <entry key="OpaqueMissingHeaderFileValue" note="stringDatatypeUpdate">Not enough input arguments. A value must be specified for the ''{0}'' parameter of ''{1}''.</entry>
    <entry key="OperandSizesMustBeKnown">Non-scalar operands to {0} must be of known size: operand {1,number,integer}'s size is not known.</entry>
    <entry key="OperandSizesMustBeEqual">Non-scalar operands to {0} must be of the same size: operand {1,number,integer} is {2} but operand {3,number,integer} is {4}.</entry>
    <entry key="OperatorOutsideExpr">{0} may not occur inside an expression. It may only occur at the top-level.</entry>
    <entry key="OperatorMustBeOutsideControlFlow">''{0}'' must not be nested inside an IF, SWITCH, FOR or WHILE statement, or follow a conditional RETURN statement.</entry>
    <entry key="OverflowModeLocked">Attempted to set overflow mode on operator twice.</entry>
    <entry key="ElementDeletionUnsupported">For code generation, class ''{0}'' does not support element deletion.</entry>
    <entry key="PCodeMessageSuppressed">P-code file problem detected. Compile the corresponding MATLAB code to diagnose the problem.</entry>
    <entry key="PCodeMode">Argument ''{0}'' to the {1} function is not supported.</entry>
    <entry key="ParCallToCustomCCode">Call to custom C-code inside a Parallel FOR loop.</entry>
    <entry key="ParCallToSideEffectFcn">Call to a function with side effects inside a Parallel FOR loop.</entry>
    <entry key="ParforTooManyArguments">This PARFOR statement contains too many arguments.</entry>
    <entry key="ParGlobalPersistentAccess">The GLOBAL or PERSISTENT variable ''{0}'' should not be set inside a PARFOR loop.</entry>
    <entry key="ParIndexRangeError">The range of a PARFOR statement must be increasing consecutive signed integers.</entry>
    <entry key="ParIndexVariableUseError">The index variable ''{0}'' might be used after the PARFOR loop, but it is unavailable after the loop.</entry>
    <entry key="ParIndexVariableDefError">Changing the loop index ''{0}'' is invalid inside a PARFOR loop.</entry>
    <entry key="ParIndexMultiWordError">For code generation, the type of PARFOR index variables must be representable in the target hardware. The type ''{0}'' has no native representation.</entry>
    <entry key="ParReductionUnsupportedType">The variable ''{0}'' is used as a reduction variable, but contains a structure, class, or cell type.</entry>
    <entry key="ParReductionConflictingOps">Conflicting reduction operations found for the same reduction variable (''{0}'').</entry>
    <entry key="ParReductionConflictingPosn">Variable ''{0}'' has a noncommutative reduction function,\nbut the variable does not occur in the same argument position in all reduction assignments.</entry>
    <entry key="ParPersistentError">Use of PERSISTENT variables inside PARFOR loops is not supported in {0}</entry>
    <entry key="ParCrossLoopDependence">Could not prove that there is no loop-carried dependence between array accesses.</entry>
    <entry key="ParParforUnclassifiable">A variable in a parfor could not be classified.</entry>
    <entry key="ParForLoopWithInfiniteLoopUnpported">Code generation does not support PARFOR loops with an infinite loop inside.</entry>
    <entry key="ParReductionIllegalOp"><![CDATA[Unsupported reduction operation for variable ''{0}''. Supported operations are +,-,*,& or |.]]></entry>
    <entry key="ParReductionIllegalForm">The variable ''{0}'' in a parallel loop could not be classified.</entry>
    <entry key="ParReductionIllegalExpr">Reduction variable must be a scalar variable. Struct fields or arrays elements are not supported.</entry>
    <entry key="ParReductionIllegalStmt">''{0}'' is a reduction variable. Statements involving reduction variables must be reduction assignments.</entry>
    <entry key="ParallelForLoopIndexExpressionComplex">Parallel FOR loop index expressions must not be complex types.</entry>
    <entry key="ParallelForLoopRangeMustBeRowVector">The range of the parfor-loop variable ''{0}'' must evaluate to a row vector.</entry>
    <entry key="ParallelForLoopRangeMustBeNumeric">The range of the parfor-loop variable ''{0}'' must evaluate to a row-vector of numeric values.</entry>
    <entry key="ParallelForLoopIndexExpression">Parallel FOR loop index expressions are only supported if they are of the form A:B.</entry>
    <entry key="ParallelForLoopUnrollUnsupported">The ''{0}'' function cannot be used with parallel FOR loops.</entry>
    <entry key="ParallelForLoopUnrecognizedFlag">Unrecognized flag ''{0}'' passed to Parallel FOR loops construct.</entry>
    <entry key="ParallelForLoopWithBreak">Parallel FOR loops may not exit the loop via BREAK or RETURN statements.</entry>
    <entry key="ParallelForLoopDebuggingEnabled">Debugging during parallel execution is not allowed. Turning off parallel capability.</entry>
    <entry key="ParallelBodyDisplayRemoved">Printing of expressions without semicolons is suppressed in PARFOR loops.</entry>
    <entry key="ParallelNumThreads">The maximum number of threads must be zero, a positive integer or Inf.</entry>
    <entry key="NoCompilerOpenMPSupport">The selected compiler does not support the OpenMP library; this loop will not be parallelized.</entry>
    <entry key="JITOpenMPSupport">JIT technology does not support using OpenMP library, this loop will not be parallelized.</entry>
    <entry key="ProfilingOpenMPSupport">Loop will not be parallelized because OpenMP library is not supported with MEX profiling.</entry>
    <entry key="ParameterClassMismatch">The parameter has type ''{0}'' which does not match the specified type ''{1}''.</entry>
    <entry key="ParameterCouldNotBeComputed">Could not compute the value of parameter {0} at compile time.</entry>
    <entry key="ParameterSizeMismatch">\nParameter did not match the specified size.</entry>
    <entry key="ParameterTypeMismatch">Parameter ''{0}'' has type {1}, which does not match the specified type {2}.</entry>
    <entry key="ParameterTypeUnsupported">Top-level input parameter {0} has unsupported type {1}.</entry>
    <entry key="ParseErrorAssignmentsMayOnlyAppearAtTopLevel">Parse error: assignments may only appear at the top-level.</entry>
    <entry key="ParseErrorBuiltinTakesFunctionInputAsOnlyArgument">Parse error: this built-in function takes a function input as its only argument.</entry>
    <entry key="ParseErrorEmlConstExpectsExactlyOneInput">Parse error: EML_CONST expects exactly one input.</entry>
    <entry key="ParseErrorFunctionCallExpectedOnRhs">Parse error: expected a function call on the RHS of this assignment.</entry>
    <entry key="ParseErrorInvalidArgumentToBuiltin">Parse error: invalid argument to built-in function.</entry>
    <entry key="ParseErrorTooFewArgumentsForBuiltin">Parse error: too few arguments to built-in function.</entry>
    <entry key="ParseErrorFatal">Fatal error parsing ''{0}'': {1}</entry>
    <entry key="ParsingErrorMessage">Parse error: {0}</entry>
    <entry key="ParsingFailed">Parsing failed.</entry>
    <entry key="PersistentTopLevel">PERSISTENT declarations may only appear at the top-level.</entry>
    <entry key="PossibleError">\nThe above error may be reported because of a limitation rather than a true error condition. When detecting errors, complex control flow sometimes creates false positives.</entry>
    <entry key="PossibleErrorSimulink">\nThe above error may be reported because of a limitation rather than a true error condition. When detecting errors, values of Simulink inputs and tunable Simulink parameters are not used. It sometimes fails to handle complex control flow.</entry>
    <entry key="PropertyNotEqualTo">Property ''{0}'' is ''{1}'' on the left side of the assignment but ''{2}'' on the right.</entry>
    <entry key="PropertyNotEqualToUnspecified">Property ''{0}'' is ''{1}'' on the left side of the assignment but unspecified on the right.</entry>
    <entry key="PropertyUnknown">Unknown property</entry>
    <entry key="PropertyUnspecifiedNotEqualTo">Property ''{0}'' is unspecified on the left side of the assignment but ''{1}'' on the right.</entry>
    <entry key="Recursion">Recursive calls are not allowed. Function ''{0}'' participated in a recursive call.</entry>
    <entry key="RecursionLimit">Compile-time recursion limit reached.</entry>
    <entry key="RecursionLimitInput">Compile-time recursion limit reached. Size or type of input #{1,number,integer} of function ''{0}'' may change at every call.</entry>
    <entry key="RecursionLimitConstInput">Compile-time recursion limit reached. Value of input #{1,number,integer} of function ''{0}'' may change at every call.</entry>
    <entry key="RuntimeRecursionDisabled"> Runtime recursion disabled. Function ''{0}'' is recursive.</entry>
    <entry key="RecursiveFunctionUndefinedOutput">All outputs must be assigned before any run-time recursive call. Output ''{0}'' is not assigned here.</entry>
    <entry key="NoConstantFoldDirectCallExplicit">Unable to directly constant-fold a call to ''{0}'' because it explicitly disallows being directly constant-folded.</entry>
    <entry key="NoConstantFoldDirectCallUninitialized">Unable to directly constant-fold a call to ''{0}'' because it returns uninitialized data for output ''{1}''.</entry>
    <entry key="NoConstantFoldRecursiveCall">Unable to constant fold call to run-time recursive function ''{0}'' inside function ''{1}''.</entry>
    <entry key="ReinterpretSizeMismatch">Attempted to reinterpret {0,number,integer} bits as {1,number,integer} bits. Size change requires an EML_CAST.</entry>
    <entry key="ReinterpretUnrecognizedType">Unrecognized type in EML_REINTERPRET.</entry>
    <entry key="Relop">This comparison uses more bits ({0,number,integer}) than can be supported ({1,number,integer}). Cast both sides to a common numeric type to overcome this limitation.</entry>
    <entry key="RequireEmlMessage">This expression should be an eml_message object.</entry>
    <entry key="RequireNumeric">Expression must be numeric. Found it to be {0}.</entry>
    <entry key="RequireNumericUnknown">Expression must be numeric. Failed to determine anything about its type.</entry>
    <entry key="ReservedProperty">Property name ''{0}'' is reserved. Rename this property.</entry>
    <entry key="ReservedWord">Illegal use of reserved word {0}.</entry>
    <entry key="ResultRange">Input value {0} exceeds range of result class {1}.</entry>
    <entry key="RoundingModeLocked">Attempted to set rounding mode on operator twice.</entry>
    <entry key="RtErrorMxArray" note="stringDatatypeUpdate">The functions eml_lib_assert, eml_invariant, coder.internal.assert, coder.internal.errorIf, and coder.internal.error do not support runtime error reporting with ''{0}'' arguments. Convert all arguments to character vectors or built-in numeric types before calling one of these. Alternatively, call ASSERT or ERROR extrinsically.</entry>
    <entry key="SEAStaticReference">Access to static methods and properties for this object is not supported for code generation.</entry>
    <entry key="SysObjSameInstanceRequired">Different configuration of the System object class ''{0}''.</entry>
    <entry key="SEAUnsupportedForCcalls">System objects are unsupported for C calls.</entry>
    <entry key="SEAUnsupportedForCeval">System objects are unsupported for ''coder.ceval.''</entry>
    <entry key="SEAUnsupportedForMATLABCalls">System objects are not supported for extrinsic calls.</entry>
    <entry key="SEAUnsupportedForMxArrayValues">System objects are unsupported for mxArray values.</entry>
    <entry key="SEAUnsupportedForSave">Code generation does not support saving system objects using the save command.</entry>
    <entry key="SameNameRepeatingInputAndOutput">Code generation does not support using variable-length input ''{0}'' as an output.</entry>
    <entry key="SameNameInputAndRepeatingOutput">Code generation does not support using variable-length output ''{0}'' as an input.</entry>
    <entry key="SaveSpecialVarName">In code generation, ''save'' does not support saving the variable ''{0}''. Use an alternate variable name.</entry>
    <entry key="SaveFileNameInvalidType">The filename argument to ''save'' must be a character vector or string scalar.</entry>
    <entry key="SaveNonLiteral">Code generation requires all variable names and options passed to ''save'' to be character vector or string literals. For example ''save a.mat b c'' or ''save(filename, ''a'', "b")''.</entry>
    <entry key="SaveRequiresVariableNames">In code generation, when calling ''save'', the variables to save must be explicitly listed.</entry>
    <entry key="SaveStandaloneIgnored">''save'' is ignored for standalone code generation and is active only when generating a MEX or S-function with extrinsic calls enabled.</entry>
    <entry key="SaveUnsupportedOptionStruct">The ''-struct'' argument to ''save'' is not supported in code generation.</entry>
    <entry key="SaveUnsupportedOptionRegexp">The ''-regexp'' argument to ''save'' is not supported in code generation.</entry>
    <entry key="SaveUnsupportedWildcard">Using the wildcard ''*'' when calling ''save'' is not supported in code generation. Explicitly list the names of all variables to be saved.</entry>
    <entry key="SaveInvalidVariable">Could not find variable ''{0}''.</entry>
    <entry key="SaveIndirectUnsupported">Indirect usage of ''save'' via a function handle is not supported in code generation. Use ''save fileName x y -option''.</entry>
    <entry key="ShellEscape">Shell escape (!) is not supported.</entry>
    <entry key="ShiftIndexOutOfBounds">Shifting by {0,number,integer} bits is disallowed. The valid range for this shift is {1,number,integer}-{2,number,integer}.</entry>

    <entry key="SimulinkStringInBusesUnsupported">MATLAB Function block does not support buses containing string inside.</entry>
    <entry key="SizeArg2">Second input to SIZE must be numeric.</entry>
    <entry key="SizeInputNumeric">Size input to {0} must be numeric.</entry>
    <entry key="SizeDimen">Dimension argument must be a positive integer scalar in the range 1 to 2^31.</entry>
    <entry key="SizeIO">SIZE with more than one input only returns one output.</entry>
    <entry key="SizeMismatch">Arrays have incompatible sizes ({0} and {1}).</entry>
    <entry key="SizeMismatchOnField">Arrays in field ''{2}'' have incompatible sizes ({0} and {1}).</entry>
    <entry key="SizeMismatchOnCell">Arrays in element ''{2}'' have incompatible sizes ({0} and {1}).</entry>
    <entry key="SizeOverflow">\nIn dimension {0,number,integer}, fixed size {1,number,integer} exceeds upper bound size {2,number,integer}.</entry>
    <entry key="SizesIncompatibleForImplicitExpansion">Unable to perform this operation because the sizes of the arrays are incompatible (size {0} and size {1}).</entry>
    <entry key="SizesIncompatibleForImplicitExpansionOnDim">\nSizes in dimension {0,number,integer} are incompatible ({1,number,integer} and {2,number,integer}).</entry>
    <entry key="SizeVectorConstantQualifier">Size vector must be a constant expression.</entry>
    <entry key="SizeCannotBeScalar">The size argument to ''{0}'' must have at least two elements.</entry>
    <entry key="SizeVectorSizeLimit">Maximum variable size allowed by the program is exceeded.</entry>
    <entry key="SliceLeftConstantQualifier">\nSlice left index must be a constant.</entry>
    <entry key="SliceRightConstantQualifier">\nSlice right index must be a constant.</entry>
    <entry key="StaticDynamicSizeMismatchOnAssignment">Unable to make this assignment because dimension {0,number,integer} is fixed size on the left side but variable size on the right ({1} and {2}).</entry>
    <entry key="StaticDynamicSizeMismatchOnAssignmentOnField">Unable to make this assignment because dimension {0,number,integer} in field ''{1}'' is fixed size on the left side but variable size on the right ({2} and {3}).</entry>
    <entry key="StaticDynamicSizeMismatchOnAssignmentOnCell">Unable to make this assignment because dimension {0,number,integer} in element ''{1}'' is fixed size on the left side but variable size on the right ({2} and {3}).</entry>
    <entry key="Str2funcAnonymousFunctionStringNotSupported">For code generation, str2func does not support anonymous function character vectors.</entry>
    <entry key="Str2funcInvalidFunctionName">str2func input "{0}" not a valid function name.</entry>
    <entry key="StrcmpCellarrayUnsupported">Code generation does not support passing repeating variables like varargin or varargout to STRCMP.</entry>
    <entry key="StrcmpEnumChar">For code generation, {0} does not support enumeration inputs.</entry>
    <entry key="StructArgMax">Too many arguments given to struct(); current limitation is {0,number,integer} arguments.</entry>
    <entry key="StructField">Unable to extract field ''{0}'' from variable of type ''{1}'' because this variable is not a structure.</entry>
    <entry key="StructFieldAssignOrder">This assignment to ''{0}'' is not preceded by an assignment to ''{1}''. Structure fields must be assigned in the same order on all control flow paths.</entry>
    <entry key="StructFieldInherited">Unable to extract field ''{0}'' from ''{1}'' because inherited types on Simulink bus objects are not supported. To access a Simulink bus, set the input type explicitly in the Model Explorer.</entry>
    <entry key="StructFieldNameLength">Field name ''{0}'' exceeds MATLAB''s name length of {1,number,integer} characters</entry>
    <entry key="StructFieldUndefined">Invalid structure field ''{0}''.</entry>
    <entry key="StructFieldUndefinedLocked">Invalid structure field ''{0}''. Code generation does not support the addition of new fields after a structure has been read or used.</entry>
    <entry key="StructureExtraneousField">Structures do not match. The struct on the right has an extra field ''{0}''.</entry>
    <entry key="StructureExtraneousFieldOnCell">Structures do not match. The struct in element ''{0}'' on the right has an extra field ''{1}''.</entry>
    <entry key="StructureExtraneousFieldOnField">Structures do not match. The struct in field ''{0}'' on the right has an extra field ''{1}''.</entry>
    <entry key="StructureFieldNameMismatch">Structures do not match. Field name ''{0}'' in position {1,number,integer} of the struct to the left does not match field name ''{2}'' of the struct to the right.</entry>
    <entry key="StructureFieldNameMismatchOnField">Structures do not match. Field name ''{1}'' in position {2,number,integer} of field ''{0}'' does not match field name ''{3}''.</entry>
    <entry key="StructureFieldNameMismatchOnCell">Structures do not match. Field name ''{1}'' in position {2,number,integer} of element ''{0}'' does not match field name ''{3}''.</entry>
    <entry key="StructureMismatchFieldDiffLhs">Fields in the left hand struct not in the right: {0}.</entry>
    <entry key="StructureMismatchFieldDiffRhs">Fields in the right hand struct not in the left: {0}.</entry>
    <entry key="StructureMissingField">Structures do not match. The struct on the right is missing field ''{0}''.</entry>
    <entry key="StructureMissingFieldOnCell">Structures do not match. The struct in element ''{0}'' on the right is missing field ''{1}''.</entry>
    <entry key="StructureMissingFieldOnField">Structures do not match. The struct in field ''{0}'' on the right is missing field ''{1}''.</entry>
    <entry key="StructureSizeMismatch">Structures do not match. The struct to the left has {0,number,integer} fields, the struct to the right has {1,number,integer}.</entry>
    <entry key="StructureSizeMismatchOnField">Structures do not match: the struct in field ''{0}'' has {1,number,integer} fields, the struct to the right has {2,number,integer}.</entry>
    <entry key="StructureSizeMismatchOnCell">Structures do not match: the struct in element ''{0}'' has {1,number,integer} fields, the struct to the right has {2,number,integer}.</entry>
    <entry key="StructureTypeMismatch">Structure type mismatch; ''{0}'' does not match ''{1}''.</entry>
    <entry key="SubsAsgnSizeMismatch">Arrays have incompatible sizes ({0} and {1}).</entry>
    <entry key="SubscriptAssignmentDissimilar">Subscripted assignment between dissimilar structures.</entry>
    <entry key="SubscriptEmpty">Subscripting into an empty matrix is not supported.</entry>
    <entry key="SubscriptMissing">Missing matrix subscript. Expected an expression inside ().</entry>

    <entry key="SubscriptIntoThisTypeIsNotSupported">Subscripting into ''{0}'' is not supported for code generation.</entry>
    <entry key="SubscriptedAssignmentIntoMxArray">Subscripted assignment into an mxArray is not supported for code generation.</entry>

    <entry key="SwitchCaseFiWordLengthSupport">In SWITCH expression, the supported word length of fi object is {0,number,integer} bits or less.</entry>
    <entry key="SwitchCaseRange">SWITCH case {0} is not in the range of class {1}.</entry>
    <entry key="SwitchCaseRedundant">Redundant SWITCH cases. Only the first will be executed.</entry>
    <entry key="SwitchCasesInteger">SWITCH cases must evaluate to integer values that are representable in ''int32''.</entry>
    <entry key="SwitchExpression" note="stringDatatypeUpdate">Switch expression must be a scalar or a character vector.</entry>
    <entry key="SystemObjectsLibraryNotFound">System objects support library could not be found.</entry>
    <entry key="SystemObjectsTranslation">Error generating code: {0}</entry>
    <entry key="ThisCast">This cast</entry>
    <entry key="TooFewInputArguments">Too few input arguments. {0} requires {1,number,integer} or more inputs (found {2,number,integer}).</entry>
    <entry key="TooManyInputArguments">Too many input arguments. {0} accepts {1,number,integer} or fewer inputs (found {2,number,integer}).</entry>
    <entry key="TopLevelFunctionCanNotHaveVararg">Repeating inputs or outputs like ''{0}'' for top-level functions are not supported for code generation in {1}.</entry>
    <entry key="TopLevelOutputOfUnknownType">Top-level output parameter {0} has unknown or opaque type.</entry>
    <entry key="TransientEntryPoint">  Transient entry-point functions are not supported.</entry>
    <entry key="TransientFunctionCall">Cannot call transient from non-transient function.</entry>
    <entry key="TransposeND">Transpose on ND array is not defined.</entry>
    <entry key="TypeMismatch">Variable types are incompatible (type ''{0}'' and type ''{1}'').</entry>
    <entry key="TypeMismatchOnField">In field ''{2}'', variable types are incompatible (type ''{0}'' and type ''{1}'').</entry>
    <entry key="TypeMismatchOnCell">In element ''{2}'', variable types are incompatible (type ''{0}'' and type ''{1}'').</entry>
    <entry key="TypeNameMismatch">Unable to perform this assignment because user-defined class of the variable on the left side does not match that of the variable on the right side (''{0}'' and ''{1}'').</entry>
    <entry key="UnSupportedEmbeddedComponent">This System object is not supported.</entry>
    <entry key="UnauthorizedPCode">P-file ''{0}'' is not authorized for compilation. Include the directive coder.allowpcode(''plain'') in the P-file. </entry>
    <!-- Variations on the "Undefined function or variable" theme, unique on sites to aid DDUX -->
    <entry key="UndefinedFunctionOrVariable">Undefined function or variable {0}.</entry>
    <entry key="UndefinedInternalFunction">Undefined function or variable {0}.</entry>
    <entry key="UndefinedFunctionOrVariableNargIOInputFcn">Undefined function or variable {0}.</entry>
    <entry key="UndefinedFunctionOrVariableExtra">Undefined function or variable ''{0}''. The first assignment to a local variable determines its class.</entry>
    <entry key="UndefinedFunctionOrVariablePossibleClass">''{0}'' is both a class and a namespace. To resolve this ambiguity, if you refer to a property or a method ''{1}'' of class {0}, use ''var.{1}'' instead of ''{0}.{1}''.</entry>
    <entry key="UnexpectedOperator">Unexpected MATLAB operator.</entry>
    <entry key="Unimplemented">{0}: {1,number,integer}: this construction is not implemented for code generation.</entry>
    <entry key="UnknownCallInputClass">Could not determine the class of this function call input.</entry>
    <entry key="UnknownCallInputSize">Could not determine the size of this function call input.</entry>
    <entry key="UnknownClass">The class of this expression could not be determined.</entry>
    <entry key="UnknownError">Unknown Error.</entry>
    <entry key="UnknownInputClass">The CLASS of the input could not be determined.</entry>
    <entry key="UnknownInputSize">The SIZE of the input could not be determined.</entry>
    <entry key="UnknownInputSizeAndClass">Could not determine the size or class of the input.</entry>
    <entry key="UnknownSize">Could not determine the size of this expression.</entry>
    <entry key="UnknownSizedSizeVector">The number of dimensions could not be determined. The likely cause is that the given size vector varies in length.</entry>
    <entry key="UnknownType">Expected either a logical, char, int, fi, single, or double. Failed to determine anything about the type.</entry>
    <entry key="UnrecognizedEMLPragmaAnnotation"><![CDATA[The annotation on the %#codegen pragma is not recognized, and will be ignored. The supported annotations are %#codegen<AUTO> and %#codegen<PRE>.]]></entry>
    <entry key="UnrecognizedOption">Unrecognized option ''{0}''.</entry>
    <entry key="UnrecognizedOptionEnumValue">Unrecognized enumeration value ''{0}''. Valid enumeration options are: ''{1}''.</entry>
    <entry key="UnsupportedClass" note="stringDatatypeUpdate">''{0}'' is not supported as an operand to cast.</entry>
    <entry key="UnsupportedFeatureCallThroughNonConstantFunction">Call through non-constant function is not supported for code generation.</entry>
    <entry key="UnsupportedFeatureClass">''Class'' is not supported for code generation.</entry>
    <entry key="UnsupportedFeatureDotNotationOnEmbeddedFi">Dot notation on ''embedded.fi'' is not supported.</entry>
    <entry key="UnsupportedFeatureEmptyMatricesInStructures">Empty matrices in structures are not supported.</entry>
    <entry key="UnsupportedFeatureEmptyStructures">Empty structures are not supported.</entry>
    <entry key="UnsupportedFeatureForLoopsWithNonRealIndices">FOR loops with non-real indices.</entry>
    <entry key="UnsupportedFeatureFunnyLHS">Assignment with LHS not of the form A(X), A(X,Y), or A are not supported.</entry>
    <entry key="UnsupportedFeatureInt64">The numeric classes ''int64'' and ''uint64'' are not supported in Stateflow.</entry>
    <entry key="UnsupportedTypeHalf">Code generation for half-precision is not supported in this workflow. Contact halfprecisionfeedback@groups.mathworks.com and tell us why it is important to you.</entry>
    <entry key="UnsupportedTypeHalfLocationLogging">Half Precision data type is not supported for buildInstrumentedMex.</entry>
    <entry key="UnsupportedFeatureInverseDivision">Inverse division is not supported.</entry>
    <entry key="UnsupportedFeatureInverseMatrixDivision">Inverse matrix division is not supported for code generation.</entry>
    <entry key="UnsupportedFeatureMATLABTypeInStructures">MxArrays inside structures are not supported for code generation.</entry>
    <entry key="UnsupportedFeatureMatrixDeletion">Matrix deletion is not supported for code generation.</entry>
    <entry key="UnsupportedFeatureMatrixDivision">Matrix division is not supported for code generation.</entry>
    <entry key="UnsupportedFeatureMatrixPower">Matrix power is not supported for code generation.</entry>
    <entry key="UnsupportedFeatureMethodDotNotationOnEmbeddedComponent">Dot notation for methods on System objects is not supported for code generation. Pass the object as the first argument to the method instead.</entry>
    <entry key="UnsupportedFeatureMixingOpaqueAndNonOpaqueTypes">Mixing opaque and non-opaque types is not supported.</entry>
    <entry key="UnsupportedFeatureNonScalarFunctionHandles">Non-scalar function handles are not supported for code generation.</entry>
    <entry key="UnsupportedFeaturePower">Power is not supported for code generation.</entry>
    <entry key="UnsupportedFeatureReferencingAComponentFromNonScalarArray">Directly accessing a field of a nonscalar struct is not supported for code generation. This limitation also applies to a property of a nonscalar object.</entry>
    <entry key="ReferencingAComponentWhenGrowing">Directly accessing a field when growing a struct array with ''end+1'' is not supported for code generation. Modify the field after growing the struct array. This limitation also applies to a property of an object.</entry>
    <entry key="UnsupportedFeatureReferencingAComponentFromScalarBeingGrown">Code generation does not support defining a structure field using dot notation and then growing the structure using (end + 1) indexing. To grow arrays of structures using (end + 1), use the struct constructor to define structure fields.</entry>
    <entry key="UnsupportedFeatureReturningStructuresFromMATLABFunctions">Returning structures from MATLAB functions.</entry>
    <entry key="UnsupportedFeatureSEAInValueClass">System objects in value classes are not supported for code generation.</entry>
    <entry key="UnsupportedFeatureSetDotNotationOnEmbeddedComponent">Setting properties on System objects after construction is not supported for code generation.</entry>
    <entry key="UnsupportedFeatureSpmd">spmd not supported for code generation.</entry>
    <entry key="UnsupportedFeatureStructFromClass">Constructing a struct from an object is not supported for code generation.</entry>
    <entry key="UnsupportedFeatureStructValues">Struct values are not supported for code generation.</entry>
    <entry key="UnsupportedFeatureStructureArray">GETFIELDNAME does not support structure arrays for code generation.</entry>
    <entry key="UnsupportedFeatureTryCatch">Try and catch are not supported for code generation.</entry>
    <entry key="UnsupportedFeatureThrow">Throw is not supported for code generation.</entry>
    <entry key="UnsupportedFeatureTypeInStructures">''{0}'' type in structures is not supported for code generation.</entry>
    <entry key="UnsupportedFeatureWritingPropertiesToEmbeddedFimath">Writing properties to ''embedded.fimath'' is not supported for code generation.</entry>
    <entry key="UnsupportedFeatureWritingPropertiesToEmbeddedNumerictype">Writing properties to ''embedded.numerictype'' is not supported for code generation.</entry>
    <entry key="UnsupportedFeatureWritingPropertiesToFi">Writing properties to ''embedded.fi'' is not supported for code generation.</entry>
    <entry key="UnsupportedFileExtension">Only MATLAB files are supported for code generation. Unsupported file extension ''{0}'' for ''{1}''.</entry>
    <entry key="UnsupportedMexCall">Function call resolved to MEX file ''{0}''. Only MATLAB files are supported for code generation. Use coder.extrinsic to declare this MEX function as extrinsic.</entry>
    <entry key="UnsupportedMultiOutput">Multiple outputs are not supported.</entry>
    <entry key="UnsupportedTerminal">Parsing error detected: unsupported terminal symbol.</entry>
    <entry key="UpperBoundDoesNotMatch">Dimension {0,number,integer} has upper bound {1,number,integer}, which does not match the expected upper bound {2,number,integer}.</entry>
    <entry key="UseCurlyBracesIndexingForVarargs">This operation does not support cell arrays. Use curly braces instead.</entry>
    <entry key="ValuelistUnknownParent">{0} cannot be used in this context.</entry>
    <entry key="NamedArgsUnavailableDueToFunctionDirective">''{0}'' does not support named arguments.</entry>
    <entry key="ValueUnavailableDueToFunctionDirective">''{0}'' must be placed before any use of function inputs. Variable ''{1}'' was used before this line.</entry>
    <entry key="ValueUnavailableDueToOptimization">Value unavailable because of optimization.</entry>
    <entry key="VarargArrayIsEmpty">''{0}'' contains zero elements; element {1,number,integer} is requested.</entry>
    <entry key="VarargoutCanNotGrowInLoop">Repeating output variable ''{0}'' cannot grow inside a FOR or WHILE statement.</entry>
    <entry key="VariableExpected">Expected a variable name.</entry>
    <entry key="CellArrayIndexingNotSupported">Indexing of cell arrays using smooth parentheses () is not supported for code generation. Use curly braces '{}' instead.</entry>
    <entry key="VarsizeBlocked">Variable-size arrays are currently disabled for code generation.</entry>
    <entry key="VarsizeDimSizeMismatch">\nSizes in dimension {0,number,integer} are incompatible ({1,number,integer} and {2,number,integer}).</entry>
    <entry key="VarsizeRequiresVariableSizing">To use coder.varsize, enable support for variable-size arrays.</entry>
    <entry key="VarsizeVariableNameExpected" note="stringDatatypeUpdate">The input to coder.varsize() must be a variable name or a ''variable.field1.field2'' sequence.</entry>
    <entry key="VectorNonNumeric">Non-numeric vector expression is not supported.</entry>
    <entry key="VectorNotDouble">Non-double vector expression is not supported.</entry>
    <entry key="VectorStride">Vector expression with zero stride is not supported.</entry>
    <entry key="VisibilityChangeToField">Visibility of field ''{0}'' changed from ''{1}'' to ''{2}''.</entry>
    <entry key="VisibilityChangeToMethod">Visibility of method ''{0}'' changed from ''{1}'' to ''{2}''.</entry>
    <entry key="VoidInExpr">Function calls returning no outputs may not be embedded in expressions.</entry>
    <entry key="WarningLimitReached">Warning limit reached. Suppressing further warning messages.</entry>
    <entry key="XCatMixingEnumAndNonEnumTypes">Mixing enumeration and non-enumeration classes in horzcat/vertcat is not supported for code generation.</entry>
    <entry key="XCatMixingEnumTypes">Cannot concatenate objects of two different classes ''{0}'' and ''{1}''.</entry>
    <entry key="XRefUnknownOption" note="stringDatatypeUpdate">Unrecognized option passed to ''{0}''.</entry>
    <entry key="NestedParallelForLoops">Parfor loops cannot be nested.</entry>
    <entry key="MissingIsEmptyForHandleObjects">For code generation, handle objects must be constructed and stored in persistent variables using an 'if isempty' code block.</entry>
    <entry key="Suppressed">Suppressed error.</entry>
    <entry key="DebugError">Internal debugging error message.</entry>
    <entry key="NullAssignmentOneNonColonOnly">A null assignment can have only one non-colon index.</entry>
    <entry key="InvalidIntClassName">Invalid class name.</entry>
    <entry key="SysObjUnboundedInput">This System object method does not support input of unbounded size.</entry>
    <entry key="SysObjUnboundedInputMallocAll">This System object method does not support input of unbounded size.\nConfigure 'DynamicMemoryAllocation' to a mode other than 'AllVariableSizeArrays' to allow automatic size propagation.</entry>
    <entry key="SysObjUnboundedOutput">This System object method does not support output of unbounded size.</entry>
    <entry key="SysObjUnboundedOutputMallocAll">This System object method does not support output of unbounded size.\nConfigure 'DynamicMemoryAllocation' to a mode other than 'AllVariableSizeArrays' to allow automatic size propagation.</entry>
    <entry key="Int64InSizePropagation">Cannot determine output sizes for this block because of an int64/uint64 type in a conditional expression.</entry>
    <entry key="MCOSVarSizeHandleProp">Variable sized properties in handle classes are only supported when dynamic memory allocation is enabled.</entry>
    <entry key="MCOSVarSizeHandlePropFromJoin">\nThis operation changes the size of ''{1}.{0}'' from {2} to {3}.</entry>
    <entry key="MCOSVarSizeHandlePropFromJoinOnField">\nThe operation changes the size of property ''{0}'' in the handle class ''{1}'' in ''{2}'' from {3} to {4}, and makes the property variable sized.</entry>
    <entry key="MCOSVarSizeHandlePropFromRhs">\nThis operation defines ''{1}.{0}'' as {2}.</entry>
    <entry key="MCOSVarSizeHandlePropDynamicAllocation">\nEnable dynamic memory allocation.</entry>
    <entry key="MCOSUnsupportedOnProp">''{0}'' is not supported for class properties.</entry>
    <entry key="MCOSCoderVarSizeOnClass">coder.varsize() does not support classes.</entry>
    <entry key="MCOSCoderVarSizeOnString">coder.varsize is not supported for string variables.</entry>
    <entry key="MCOSUnsupportedCallToSetupImpl">Method ''setupImpl'' not supported for code generation. Use the ''setup'' function instead.</entry>
    <entry key="MCOSCstrDefineHPropNotDeclaredInThisCls">The constructor of class ''{0}'' can only define handle properties declared in itself. The property ''{1}'' is however declared in ''{2}''.</entry>
    <entry key="MCOSSetupImplDefineHPropNotDeclaredInThisCls">The method ''{0}'' of class ''{1}'' can only define handle properties declared in class ''{2}''. The property ''{3}'' is however declared in ''{4}''.</entry>
    <entry key="MCOSHPropAssignOverlapInCstrAndSetupImpl">Code generation requires a handle property to be assigned at most once. The property ''{0}'' can potentially be assigned in the constructor of ''{1}''.</entry>
    <entry key="MCOSSetupImplCalledTwice">Code generation requires this method to be called exactly once. There are two or more calls to this method.</entry>
    <entry key="MCOSSetupImplCalledOnlyOnce">Code generation requires this method to be called exactly once. This call can potentially be executed zero times, or more than once.</entry>
    <entry key="MCOSSetupImplFirstArgThisPtr">The first argument of 'setupImpl' can only be the variable ''{0}''.</entry>
    <entry key="MCOSCallSetupImplOfBaseCls">The method 'setupImpl' of class ''{0}'' can only call the 'setupImpl' method declared in its immediate super class.</entry>
    <entry key="MCOSSetPropOnHandle">Using ''{0}'' to define a handle property is not supported in code generation.</entry>
    <entry key="InternalSetPropNotProperlyAssigned">coder.internal.setprop must be assigned to an instance variable, e.g. obj = coder.internal.setprop(obj,...);</entry>
    <entry key="InternalSetPropObjNotInstanceVariable">The first argument to coder.internal.setprop must be an instance variable.</entry>
    <entry key="RecursiveFunctionExtraInput">For code generation, nested run-time recursive functions that use variables also used in an outer function are not supported. ''{0}'' is used in nested run-time recursive function ''{1}'' and in an outer function.</entry>
    <entry key="RecursiveFunctionInput">For code generation, run-time recursive functions with {0} inputs are not supported. Input ''{1}'' contains a {0}.</entry>
    <entry key="RecursiveDestructorNotSupported">Recursive delete method is not supported for code generation.</entry>
    <entry key="RecursiveFunctionOutput">For code generation, run-time recursive functions with {0} outputs are not supported. Output ''{1}'' contains a {0}.</entry>
    <entry key="CannotConvertToIndexInt">Cannot convert value into coder.internal.indexInt. The enclosing operation requires all operands to be coder.internal.indexInt.</entry>
    <entry key="MCOSEscapingHandleObjectInLoopUnsupported">Cannot allocate this handle object. For code generation, a handle object allocated inside a loop cannot be referenced outside of the loop.</entry>
    <entry key="MCOSEscapingHandleObjectInRecursionUnsupported">Unable to allocate this handle object because the handle object is created multiple times. For code generation, only one invocation of a recursive function can create a handle object.</entry>
    <entry key="MCOSEscapingHandleObjectPersistentUnsupported">Unable to reallocate a handle object referenced by a persistent variable because the handle object is created multiple times. For code generation, make sure that a handle object referenced by a persistent variable is created only once.</entry>
    <entry key="AutoExtrinsicUsage">This call, and possibly others, is only supported from within the MATLAB environment. All calls with limited support are distinguished in the report.</entry>
    <entry key="AutoExtrinsicDisabledUsage">This call is only supported from within the MATLAB environment.</entry>
    <entry key="CoderReplaceInEntryPoint">'coder.replace' is not supported in entry-point functions.</entry>
    <entry key="CoderReplaceNoVarargoutSupport">'coder.replace' is not supported in functions with a variable number of outputs.</entry>
    <entry key="CoderReplaceVariableSizedInput">'coder.replace' is not compatible with variable-size inputs. Function input #{0,number,integer} has variable size.</entry>
    <entry key="CoderReplaceVariableSizedOutput">'coder.replace' is not compatible with variable-size outputs. Function output #{0,number,integer} has variable size.</entry>
    <entry key="CoderReplaceGlobalVar">'coder.replace' is not supported for functions that access global variables. Update the function to replace and pass the global variable as an argument.</entry>
    <entry key="CoderReplacePersistVar">'coder.replace' used with functions that access persistent variables. This usage is prone to incorrect code and will be deprecated in a future release. Update the function to replace and pass the persistent var as an argument.</entry>
    <entry key="CoderReplaceSyntaxError">Invalid argument to 'coder.replace'. Only '-errorifnoreplacement' and '-warnifnoreplacement' are supported.</entry>
    <entry key="CoderReplaceReplacementNotFound">No function replacement was found for the function ''{0}''.</entry>
    <entry key="MultipleInstancesOfCoderReplace">Multiple instances of ''coder.replace'' inside same function are not allowed.</entry>
    <entry key="MCOSSimulinkCoderLimitationPointers">Cannot generate code because persistent variable ''{0}'' has pointer type.</entry>
    <entry key="MCOSPersistentPropertyMismatch">Unable to assign value of type ''{4}'' to property ''{1}'' of persistent variable ''{2}'' because this variable was assigned type ''{3}'' in an earlier call to function ''{0}''.</entry>
    <entry key="MCOSPersistentPropertyValueMismatch">The function ''{0}'' is called more than once, and some of those calls assign different values to the nontunable property ''{1}'' of persistent variable ''{2}''.</entry>
    <entry key="ControlC">Compilation aborted by user.</entry>
    <entry key="MCOSMethodAccessListRestricted">Cannot access method ''{0}'' in class ''{1}''.</entry>
    <entry key="MCOSPropertyAccessListRestricted">Unable to retrieve property {0} of {1} because access to this property is restricted.</entry>
    <entry key="CellarrayUsedAtEntryPoint">Cell arrays as top-level function outputs are not supported in {1}. Output ''{0}'' is a cell array.</entry>
    <entry key="CellarrayHCatOnly">Only row vector cell arrays are supported for code generation.</entry>
    <entry key="VararginAssignNotSupported">Code generation does not support assignment to ''{0}''.</entry>
    <entry key="CellSubscriptMustBeScalarOrVector">Cell subscript index must be a scalar or a vector.</entry>
    <entry key="CellarraysAreNotSupportedHere">Cell array is not supported here.</entry>
    <entry key="VarargsAreNotSupportedHere">Repeating variables like varargin and varargout are not supported here.</entry>
    <entry key="CellsubMultiIndexNotSupported">Multi-dimensional indexing into a cell array is not supported.</entry>
    <entry key="CellConstructorSizeMismatch">Not a rectangular cell array. Sizes of all rows should match.</entry>
    <entry key="CellConstructorTooManyElements">Number of elements exceeds {0, number, integer}.</entry>
    <entry key="CellIdxHeterogeneousNonConst">Non-constant indexing into a heterogeneous cell array is not supported in code generation.</entry>
    <entry key="UnsupportedFeatureNestedFunctions">Nested functions are not supported in {0}.</entry>
    <entry key="CellSubscriptEmpty">Index is out of bounds because the cell array is empty.</entry>
    <entry key="CStructNameCell">Cell arrays cannot be assigned to or from cell arrays that have conflicting structure information.</entry>
    <entry key="CannotConvertToHeteroGeneous">Cannot make this cell array heterogeneous.</entry>
    <entry key="BadMessageIdentifier">''{0}'' is not a valid message identifier.</entry>
    <entry key="OpaqueCastOpaqueArg">First argument to ''fromOpaqueCast'' must be of opaque type.</entry>
    <entry key="ConstantSizeRequiredOnDmension">Using '':'' or ''end'' requires a cell array with constant size on dimension ''{0, number, integer}''.</entry>
    <entry key="CellTooManyOutputsRequested">Too many outputs requested. Most likely cause is missing [] around left hand side that has a comma separated list expansion.</entry>
    <entry key="CellLhsValueListEmpty">The left hand side is initialized and has an empty range of indices. However, the right hand side returned one or more results.</entry>
    <entry key="CellCatNotRectangular">Dimensions of matrices being concatenated are not consistent.</entry>
    <entry key="CellIndexingNDFewerIndices">Code generation does not support indexing into a cell array with fewer indices than the number of dimensions.</entry>
    <entry key="CellIndexingNonScalar">This use of non-scalar indexing into a cell array is not supported for code generation.</entry>
    <entry key="CellIndexingLogical">Code generation does not support logical indexing into cell arrays.</entry>
    <entry key="NonScalarCellRefIndex">On the left side of an assignment, an index into a cell array must extract exactly one element.</entry>
    <entry key="MxArrayInCellNotSupported">Code generation does not support mxArrays inside cell arrays.</entry>
    <entry key="VarargAssignmentNeedsFixedSizeVector">Assignment to repeating variable ''{0}'' requires the right-hand side to be a row vector of fixed size.</entry>
    <entry key="VarargAssignmentToCellFunction">Code generation does not support assigning repeating variable ''{0}'' from the "cell" function. Assign individual elements of ''{0}'' directly.</entry>
    <entry key="CellUsageOfUnassignedElement">This operation attempts to use an undefined cell array element. For code generation, all cell array elements must be defined before use.</entry>
    <entry key="CellUsageOfUnassignedElementWithPath">Elements ''{0}'' not fully defined. For code generation, all cell array must be defined before use.</entry>
    <entry key="CellFunctionNoArgs">Not enough input arguments passed to cell function.</entry>
    <entry key="CellFunctionSingleArgMistyped">A single argument passed to the cell function must be a scalar, vector of scalars, or a cell array.</entry>
    <entry key="CellFunctionMultipleNonScalarInts">Multiple non-scalar integer arguments passed to cell function</entry>
    <entry key="InputFollowingLikeIsNotANumericArray">Input argument following ''like'' must be a numeric array.</entry>
    <entry key="InputFollowingLikeIsNotALogicalArray">Input argument following ''like'' must be a logical array.</entry>
    <entry key="CellEntryPointOutputWithUnassignedElement">Elements ''{0}'' of cell array returned by entry-point function not fully defined. For code generation, all cell array elements must be defined before use.</entry>
    <entry key="CellRecursiveOutputWithUnassignedElement">Elements ''{0}'' returned by a run-time recursive function not fully defined. For code generation, all cell array elements must be defined before use.</entry>
    <entry key="CellUseOfElementLockedAsUnassigned">Can not initialize cell array element after use. For code generation, all cell array elements must be defined before use.</entry>
    <entry key="CellUseOfElementLockedAsUnassignedWithPath">Cell array element ''{0}'' used before definition. For code generation, all cell array elements must be defined before use.</entry>
    <entry key="CellHomogeneousCellAssignedNonCompatibleHeterogeneous">Homogeneous cell array on left-hand side of assignment can not be reassigned to a heterogeneous cell array.</entry>
    <entry key="CellHeterogeneousCellAssignedNonCompatibleHomogeneous">Heterogeneous cell array on left-hand side of assignment can not be reassigned to a homogeneous cell array.</entry>
    <entry key="OneElementCellArrayExpected">A one-element cell array is expected here.</entry>
    <entry key="StorageClassGlobalVarNotDefined">Variable ''{0}'' is not a global variable. Before declaring a storage class for ''{1}'', make it a global variable.</entry>
    <entry key="StorageClassUnsupportedSC">The storage class name ''{0}'' is not supported.</entry>
    <entry key="StorageClassMultiAssignAttempt">Attempt to reassign a storage class to the variable ''{0}''.</entry>
    <entry key="StorageClassNotSupported">Call to 'storageClass' function is not supported in this context.</entry>
    <entry key="StorageClassConstGlobalNotSupported">Attempt to assign a storage class to the 'constant' global variable ''{0}''. Assigning a storage class to a 'constant' global variable is not supported.</entry>
    <entry key="StorageClassReservedKeyword">The variable ''{0}'' has a name that conflicts with a reserved keyword from the standard library.</entry>
    <entry key="StorageClassWritableGlobalNoDefine">Attempt to assign the 'ExportedDefine' storage class to writable global variable ''{0}''. Assign this storage class to a read-only global variable.</entry>
    <entry key="StorageClassMultiWordNoDefine">Attempt to assign the 'ExportedDefine' storage class to the multi-word variable ''{0}''. Multi-word variables are typically represented in a structure form and so they are not suitable for the 'ExportedDefine' storage class.</entry>
    <entry key="StorageClassNonScalarNoDefine">Attempt to assign the 'ExportedDefine' storage class to non-scalar variable ''{0}''. Assign this storage class to a real scalar variable.</entry>
    <entry key="StorageClassDynamicNotSupported">Attempt to assign a storage class to the variable-sized global variable ''{0}''. Only fixed-sized variables are supported.</entry>
    <entry key="InvalidDataAlignmentValue">Alignment value must be positive integer that is a power of 2.</entry>
    <entry key="DataAlignmentVarNotFound">''{0}'' not supported for data alignment. Use a global variable or an I/O variable.</entry>
    <entry key="DataAlignmentDynamicNotSupported">''{0}'' variable-size variable not supported for data alignment.</entry>
    <entry key="DataAlignmentScalarNotSupported">''{0}'' scalar variable not supported for data alignment.</entry>
    <entry key="DataAlignmentComplexTypeNotSupported">''{0}'' complex variable not supported for data alignment.</entry>
    <entry key="DataAlignmentMultiAssignAttempt">Data alignment value already assigned to ''{0}''. Reassignment not supported.</entry>
    <entry key="ExpectedCellArray">Expected a cell array.</entry>
    <entry key="ExpectedVariable">Expected a variable.</entry>
    <entry key="CellTopLevelOutputNotFullyDefined">Top-level output variable ''{0}'' must be fully assigned.</entry>
    <entry key="ValueReturnedFromFuncNotFullyDefined">Value returned from ''{0}'' must be fully assigned.</entry>
    <entry key="CellArrayVarSizeIndexingIntoHeterogeneous">Cannot generate code for indexing expression where the index has unknown size and underlying cell array is not homogeneous.</entry>
    <entry key="UnsupportedDataTypeConversion">Unsupported data type conversion: ''{0}''</entry>
    <entry key="CellTypeMismatchGeneric">Cannot perform the assignment, types on the left and on the right are unrelated.</entry>
    <entry key="StructArrayViaCellHomogeneous">Argument number ''{0,number,integer}'' is a cell array whose elements do not all have the same type. For code generation, creation of a structure array using a cell array requires that the elements of the cell array have the same type.</entry>
    <entry key="CellConstructedCellNotFullyDefined">Constructed cell array not fully defined. For code generation, all cell array elements must be defined before use.</entry>
    <entry key="CellPassedToFuncNotFullyDefined__generic">Cell array input to function ''{0}'' not fully defined. For code generation, all cell array elements must be defined before use.</entry>
    <entry key="CellPassedToFuncNotFullyDefined__namedCell_unknownVals">Elements of cell array ''{0}'' passed to function ''{1}'' not fully defined. For code generation, all cell array elements must be defined before use.</entry>
    <entry key="CellPassedToFuncNotFullyDefined__namedCell_knownVals">Elements ''{2}'' of cell array ''{0}'' passed to function ''{1}'' not fully defined. For code generation, all cell array elements must be defined before use.</entry>
    <entry key="CellPassedToFuncNotFullyDefined__returnedCell_knownVals">Elements ''{2}'' of the cell array returned by function ''{0}'' not fully defined before the cell array is used as input to function ''{1}''. For code generation, all cell array elements must be defined before use.</entry>
    <entry key="CellPassedToFuncNotFullyDefined__returnedCell_unknownVals">Cell array returned from function ''{0}'' not fully defined before use as input to function ''{1}''. For code generation, all cell array elements must be defined before use.</entry>
    <entry key="VarsizeOnInputVar">coder.varsize is not supported for function input variable ''{0}''. Instead, use coder.varsize with the variable that is the input to the called function.</entry>
    <entry key="VarsizeOnByRefExtraVar">coder.varsize is not supported for a variable used in both a nested function and a function that contains it.</entry>
    <entry key="InfiniteLoop">Function ''{0}'' does not terminate because of an infinite loop.</entry>
    <entry key="MCOSTypedPropertyUnsupported">Property ''{0}'' restricts the class of its value. Code generation does not support restricting the class of a property value.</entry>
    <entry key="Db4uNestedFunction">Variable ''{0}'' not defined on all execution paths before it is used in a nested function. For code generation, all variables must be fully defined before use.</entry>
    <entry key="Db4uOverflow">Codegen ran into an internal resource limitation while analyzing the function ''{0}''.  There are a large number of instances of ''{1}'' reachable from the function's input variables.</entry>

    <!-- MATLAB's message is "Undefined operator '+' for input arguments of type 'cell'."  -->
    <entry key="RelopOnCellNotSupported">This operator is not defined for input arguments of type 'cell'.</entry>
    <entry key="CatOnCellAndValuelistNotSupported">Code generation does not support concatenation of cell arrays and comma-separated lists.</entry>
    <entry key="CatOnStructValuelistOfCellNotSupported">Code generation does not support concatenation of comma-separated lists of cells generated from a structure array.</entry>
    <entry key="CatOnCellVarargNotSupported">Code generation does not support concatenation of repeating variables such as varargin and varargout. Copy the repeating variable to another temporary variable and then use this temporary variable for concatenation.</entry>
    <entry key="CEvalOnCellNotSupported">coder.ceval() does not support inputs or outputs of type 'cell'.</entry>
    <entry key="ForeignFcnOnCellNotSupported">This function does not support inputs or outputs of type 'cell'.</entry>

    <!-- Error message for validators -->
    <entry key="ValidatorSizeMismatch">Invalid argument. Input dimension {2} is size {0} but is constrained to size {1} by argument validation.</entry>
    <entry key="CannotValidateMxArray">Code generation does not support validation for mxArray objects.</entry>
    <entry key="TabularSizeValidator">Code generation does not support size validation for table or timetable objects.</entry>

    <!-- Error message for coder.cinclude -->
    <entry key="CincludeUnknownParam">Unrecognized parameter name {0}.</entry>
    <entry key="CincludeInvalidInput">Invalid parameter name and value pair.</entry>
    <entry key="BinaryOperationsOnEnumsNotSupported">Code generation does not support binary operations on enumerations. This expression is an enumeration.</entry>
    <entry key="StringsAreNotSupported" note="The hole 0 will be a product name like Stateflow or HDL Coder">Strings are not supported in {0}.</entry>
    <entry key="StringArraysNotSupported">Code generation does not support string arrays. Use a cell array of character vectors.</entry>
    <entry key="DeferInferenceRequiresNoOutputs">Deferred functions cannot have outputs.</entry>
    <entry key="ColonOperatorResultTooLarge">Array too large for this operation. To use the colon operator to create or subscript into an array, the number of elements in the array must be less than intmax.</entry>
    <entry key="CellsPassedToStructMustBeFullyAssigned">Cell arrays passed to struct must be fully assigned.</entry>
    <entry key="GetMCOSFailure">Unable to load class ''{0}''.</entry>
    <entry key="UndefinedPersistentVariable">Persistent variable ''{0}'' must be assigned before it is used. The only exception is a check using ''isempty({1})'' that can be performed prior to assignment.</entry>
    <entry key="UnsupportedConversionFromToEnum">Unsupported conversion from ''{0}'' to enumeration ''{1}''.</entry>
    <entry key="SxfunFirstArgumentExtrinsic">coder.internal.sxfun first argument must not be extrinsic function.</entry>
    <entry key="UnsupportedSparseType">Returning sparse matrices of class ''{0}'' to MATLAB is not supported.</entry>
    <entry key="InputMustBeSparse">Input argument must be sparse.</entry>
    <entry key="SparseNotSupported">''{0}'' does not support sparse matrix inputs.</entry>
    <entry key="ValidateattributesNeedConstAttributes">Attributes must be constants.</entry>

    <entry key="InvalidParamToCoderInternalReferenceParameter">coder.internal.reference_parameter expects a single argument passed to it that is a scalar input and output variable of the calling function.</entry>
    <entry key="ReferenceParameterCannotBeCell">The function ''{0}'' requires the input ''{1}'' to not be a cell array.</entry>
    <entry key="InvalidCallToRefParamFcn">The function ''{0}'' requires that the variable ''{1}'' be passed to it as both an input and output argument.</entry>
    <entry key="RefereneceParameterEntryPoint">A function that uses ''coder.internal.reference_parameter'' cannot be an entry-point. Use a wrapper function that calls ''{0}''.</entry>
    <entry key="CallToRefParamFcnNotDirectlyInAssign">Functions that use coder.internal.reference_parameter must be used directly in an assignment expression where matching input and output variables have the same name and type.  Ensure that type of output variables does not change after the call site.</entry>
    <entry key="ReferenceParameterInputAndOutputTypesDisagree">coder.internal.reference_parameter requires the input and output types for variable ''{0}'' to be equal.</entry>

    <entry key="CoderVarsizeCannotChangeBlockInputVar">coder.varsize cannot change the size of the block input ''{0}''. Use block configuration dialog to modify the size of the input.</entry>
    <entry key="CoderVarsizeCannotChangeBlockOutputVar">coder.varsize cannot change the size of the block output ''{0}''. Use block configuration dialog to modify the size of the output.</entry>
    <entry key="CoderVarsizeCannotChangeEntryPointInputVar">coder.varsize cannot change the size of the entry-point input ''{0}''. Use coder.typeof or the Coder App to modify the size of the input.</entry>

    <entry key="FunctionArgumentValidationAttributeNotSupported">Code generation does not support the arguments block attribute ''{0}''.</entry>
    <entry key="FunctionArgumentValidationRepeatingEntryPointNotSupported">Code generation does not support repeating arguments blocks for arguments other than varargin (for Input blocks) and varargout (for Output blocks) for entry-point functions.</entry>
    <entry key="FunctionArgumentValidationMultipleRepeatingInputs">Code generation does not support more than one repeating input argument in a function.</entry>
    <entry key="FunctionArgumentValidationRepeatingTildeNotSupported">Code generation does not support ignored repeating arguments.</entry>
    <entry key="FunctionArgumentValidationNamedEntryPoint">Code generation does not support function argument validation for name-value arguments for entry-point functions.</entry>
    <entry key="FunctionArgumentValidationRepeatingValidatorsNotSupported">Code generation does not support argument validation for repeating inputs/outputs like ''{0}''. Remove all class validation, size validation, and validation functions.</entry>
    <entry key="FunctionArgumentValidationNotEnoughInputArguments">Invalid argument list. Function requires {0,number,integer} more input(s).</entry>
    <entry key="FunctionArgumentValidationNamedMissingInput">Name-value argument ''{0}'' for ''{1}'' has not been provided as input to this function.</entry>
    <entry key="FunctionArgumentValidationNamedVariableLHS">Code generation does not support assigning to an argument containing named fields. Assign individual fields of ''{0}'' by name.</entry>
    <entry key="FunctionArgumentValidationNamedVariableRHSLoop">Code generation does not support accessing an argument containing named fields nested inside a FOR or WHILE loop. Either unroll the loop by using ''coder.unroll'', or access individual fields of ''{0}'' by name, or copy ''{0}'' to a local variable and use the local variable instead.</entry>
    <entry key="FunctionArgumentValidationNamedVariableNestedAnon">Code generation does not support referencing an argument containing named fields in nested or anonymous functions. Use individual fields of ''{0}'', or pass ''{0}'' as input to the nested/anonymous function.</entry>
    <entry key="FunctionArgumentValidationNamedInvalid">Invalid argument name ''{0}''. The valid names are: {1}.</entry>
    <entry key="FunctionArgumentValidationNamedAmbiguous">Ambiguous argument name ''{0}'' has multiple possible matches: {1}.</entry>
    <entry key="FunctionArgumentValidationNamedNonConst">This argument is not constant, and therefore does not match against a name-value argument inside ''{0}'' during code generation. Code generation might fail or produce results that do not agree with MATLAB if a name passed at a call site is not known during code generation.</entry>
    <entry key="FunctionArgumentValidationNamedUnknownIfRow">Whether or not this argument is a row vector is determined at run time, and therefore does not match against a name-value argument inside ''{0}'' during code generation. Code generation might fail or produce results that do not agree with MATLAB if a name passed at a call site is not known during code generation.</entry>
    <entry key="FunctionArgumentValidationNamedInvalidBuiltin">Applying ''{0}'' to an argument containing named fields is not supported for code generation.</entry>
    <entry key="FunctionArgumentValidationNamedClassNotFound">The class ''{0}'' could not be found.</entry>    

    <entry key="ExistVariableLoop">Code generation does not support checking for the existence of a variable inside of a for-loop, while-loop, nested function, or anonymous function.</entry>
    <entry key="ExistNoMode">To use exist in code generation, provide a search type as the second argument.</entry>
    <entry key="ExistBuiltinMode">Code generation does not support calling exist with 'builtin' as the search type.</entry>
    <entry key="ExistClassMode">Code generation does not support calling exist with 'class' as the search type.</entry>
    <entry key="ExistDirMode">Code generation does not support calling exist with 'dir' as the search type. Consider using isfolder.</entry>
    <entry key="ExistFileMode">Code generation does not support calling exist with 'file' as the search type. Consider using isfile.</entry>
    <entry key="ExistVariableNotPatternMatched">When calling exist with 'var' as the search type, code generation supports passing literal arguments only. Also, for this search type, code generation does not support calling exist via a function handle.</entry>
    <entry key="ExistVariableSometimesUndefined">The existence of variable ''{0}'' depends on run-time input. Before calling the exist function, define ''{0}'' on all execution paths. Alternatively, ensure that ''{0}'' is not defined on any execution path before the exist function call.</entry>
    <entry key="ExistVarargout">Code generation does not support checking for the existence of ''{0}''.</entry>

    <entry key="ErrorThrownFromDestructorWithLangTargetCpp">The following error was caught while executing a class destructor:\nError using ''{0}'' (line {1,number,integer})\n{2}</entry>

    <entry key="OutOfMemoryInFcn">Internal error: out of memory while compiling ''{0}''.</entry>
    <entry key="OutOfMemory">Internal error: out of memory.</entry>
    <entry key="McosClassExpected">Input must be a MATLAB object.</entry>
    <entry key="IsMatlabThreadDeprecated">The function coder.ismatlabthread will be removed in a future release.</entry>
    <entry key="MissingInputVariable">Not enough input arguments. Input ''{0}'' is not supplied to this function or method.</entry>
    <entry key="EmptyClassName">The input class name cannot be empty.</entry>

    <entry key="BoundedArrayUnimplementedOperation">This operation is not implemented on coder.internal.BoundedArray.</entry>
    <entry key="BoundedArrayInvalidSizeVector">Invalid size vector.</entry>
    <entry key="BoundedArraySizeNotBounded">The size of the data is not bounded by UpperBounds.</entry>
    <entry key="BoundedArrayOutOfBoundsIndex">Index expression out of bounds. Attempted to access element {0,number,integer} along dimension {1,number,integer}. The maximum value along that dimension is {2,number,integer}.</entry>
    <entry key="BoundedArrayCatIncompatibleDimensions">Dimensions of arrays being concatenated are not consistent.</entry>
    <entry key="BoundedArrayCatBoundsIncompatibleDimensions">Unable to concatenate incompatible bounded arrays. For code generation, the upper bounds of the dimensions of the arrays that are not being concatenated must be identical.</entry>
    <entry key="InputMustBeConst">Input {0,number,integer} to ''{1}'' must be constant.</entry>
    <entry key="HandleClassExpected">Input {0,number,integer} to ''{1}'' must be a handle object.</entry>

    <entry key="MatlabInternalFeatureReadOnly">Code generation only supports matlab.internal.feature with one input.</entry>
    <entry key="MatlabInternalFeatureNotFound"  translate="false">Unknown foundation feature ''{0}''.</entry>

    <entry key="CannotComputeSizeOfVarargout">Code generation does not support computing size, numel, or length of varargout. Use nargout instead.</entry>
    <entry key="PreferStrongerSpecialization" translate="false">Internal Error: Prefer stronger specialization</entry>

    <entry key="SubscriptedAssignmentToThisClassNotAllowedInParallelLoop">Code generation does not support subscripted assignment into a shared variable of type ''{0}'' inside a parallel for-loop.</entry>
    <entry key="MatrixDeletionNotSupportedInParallelLoop">Removing elements from a shared variable is not supported inside a parallel for-loop.</entry>


  </message>
</rsccat>

<!-- LocalWords:  emlpkg subscripted mxarray LDEXP NULLCOPY GETFIELDNAME gpudevicefcn gpuhostfcn
     LocalWords:  FIACCEL pragmas preinitialize varsize upperbounds filestar gpuhostdevicefcn atexit
     LocalWords:  autoflush closeall FIMATHISLOCAL preinitializing metaclasses gpushared gpusame
     LocalWords:  nd noncommutative parallelized errorifnoreplacement nonvector nonstatic func Sfun
     LocalWords:  warnifnoreplacement halfprecisionfeedback sxfun ismatlabthread toolchain DDUX
     LocalWords:  validators cinclude dlarray
-->
