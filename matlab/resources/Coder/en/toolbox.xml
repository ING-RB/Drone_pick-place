<?xml version="1.0" encoding="UTF-8" ?>
<!-- Copyright 2010-2024 The MathWorks, Inc. -->
<rsccat version="1.0" locale="en_US" product="Coder">
    <message>
        <entry key="andOrXor_sizeMismatch">Inputs must have the same size.</entry>
        <entry key="sxfun_arrayDimensionsMustMatch">Dimensions of non-scalar input arrays must match each other.</entry>
        <entry key="dimNotConst">Dimension argument must be a constant.</entry>
        <entry key="autoDimIncompatibility">Generated code expects a variable-size matrix but receives a variable-length vector. Specify the operating dimension explicitly or specify a variable-length vector at code generation time.</entry>
        <entry key="unsupportedClass">Function ''{0}'' is not defined for values of class ''{1}''.</entry>
        <entry key="eml_primes_core_InputOutOfRange">The input value is too large. The maximum value allowed for input class ''{0}'' is {1}.</entry>
        <entry key="conv_2">Inputs must be vectors with at most one variable-length dimension, the first dimension or the second. All other dimensions must have a fixed length of 1.</entry>
        <entry key="conv_3">A and B must be vectors.</entry>
        <entry key="conv_6">SHAPE must be ''full'', ''same'', or ''valid''.</entry>
        <entry key="conv_8">SHAPE must be ''full'', ''same'', or ''valid''.</entry>
        <entry key="conv_dynamicVectorOrientation">The output vector orientation cannot change. To avoid this error, ensure that both input vectors have the same orientation.</entry>
        <entry key="conv2_3">SHAPE must be ''full'', ''same'', or ''valid''.</entry>
        <entry key="convn_2">SHAPE must be ''full'', ''same'', or ''valid''.</entry>
        <entry key="corrcoef_2">Expected a parameter name.</entry>
        <entry key="corrcoef_3">Inputs must be 2-D.</entry>
        <entry key="corrcoef_5">Inputs must be 2-D.</entry>
        <entry key="corrcoef_7">Cannot compute p-values for complex inputs.</entry>
        <entry key="corrcoef_unsupportedRowVector">Row-vector input is only supported when the first two inputs are vectors and non-scalar.</entry>
        <entry key="corrcoef_xyMismatch">X and Y inputs must have the same number of elements.</entry>
        <entry key="cov_3">Third input must be a fixed-size scalar.</entry>
        <entry key="cov_thirdInputRequired">Third input required for covariance of scalar x and scalar y. Use ''cov(x,y,0)''.</entry>
        <entry key="cov_vsizeMatrixIsVector">A variably-sized matrix input to COV must not become a vector input at runtime. Use a variable-length vector instead.</entry>
        <entry key="cumtrapz_6">DIM argument must be a constant.</entry>
        <entry key="Dec2HexInvalidDecimalArg">Decimal input argument must be numeric.</entry>
        <entry key="Dec2HexDecimalArgMustBeReal">Decimal input argument must be real.</entry>
        <entry key="Dec2HexInvalidBitArg">Second input argument must be a positive scalar numeric value.</entry>
        <entry key="deconv_3">First argument must be a vector with at most one variable-length dimension, the first dimension or the second. All other dimensions must have a fixed length of 1.</entry>
        <entry key="deconv_4">First argument must be a vector.</entry>
        <entry key="deconv_6">Second argument must be a vector with at most one variable-length dimension, the first dimension or the second. All other dimensions must have a fixed length of 1.</entry>
        <entry key="deconv_7">Second argument must be a vector.</entry>
        <entry key="deconv_secondInputNotVector">Second argument must be a non-empty vector.</entry>
        <entry key="del2_2">First input must be ''double'' or ''single''.</entry>
        <entry key="detrend_5">The BP vector must be real and numeric.</entry>
        <entry key="detrend_inputsMustBe2D">Input arguments must be 2-D.</entry>
        <entry key="detrend_rowVecSpecialCase">The input was a variable-size matrix that became a row vector at runtime. Use a variable-length row vector instead.</entry>
        <entry key="diff_2">Input must be numeric, logical, or char.</entry>
        <entry key="diff_3">N must be a constant.</entry>
        <entry key="diff_differenceOrderMustBePositiveInteger">Difference order N must be a positive integer scalar in the range 1 to intmax(''{0}'').</entry>
        <entry key="diff_orderLimitForVariableSizedX">The length of the working dimension must be greater than the difference order when the input is variably sized or the difference order is not a constant.</entry>
        <entry key="fft_2">Too many input arguments.</entry>
        <entry key="fft2_2">If you specify MROWS, you also have to specify NCOLS.</entry>
        <entry key="filter_3">First argument must be a vector with at most one variable-length dimension, the first dimension or the second. All other dimensions must have a fixed length of 1.</entry>
        <entry key="filter_4">First argument must be a vector.</entry>
        <entry key="filter_7">Second argument must be a vector with at most one variable-length dimension, the first dimension or the second. All other dimensions must have a fixed length of 1.</entry>
        <entry key="filter_8">Second argument must be a vector.</entry>
        <entry key="filter_notVectorInputB">First argument must be a non-empty vector.</entry>
        <entry key="filter_secondInputNotVector">Second argument must be a non-empty vector.</entry>
        <entry key="filter2_2">Unknown shape parameter.</entry>
        <entry key="fscanfConstFormat">For code generation, format specifiers must be constant.</entry>
        <entry key="fscanfTooLong">Format prefix 'l' is not supported on target hardware, as there is not enough space for 64 bit numbers.</entry>
        <entry key="fscanfInvalidConversion">Format conversion specifier ''{0}'' is not supported for code generation.</entry>
        <entry key="fscanfRecommendChar">Format conversion specifier ''{0}'' is not supported for code generation. Use %c.</entry>
        <entry key="fscanfIncompltete"> Incomplete format. For code generation, format specifiers must include a conversion specifier.</entry>
        <entry key="fscanfDollar">For code generation, ''$'' is not supported within format specifiers.</entry>
        <entry key="fscanfIllegalL">For code generation, use format prefix ''l'' only with conversion specifiers d,i,u,o, and x.</entry>
        <entry key="getfieldConstFields">Non-constant field names are not supported for code generation. To generate code use constant field names instead.</entry>
        <entry key="gradient_2">First input must be ''double'' or ''single''.</entry>
        <entry key="gradient_tooManyOutputArguments">The number of output arguments exceeds the number of dimensions in the input array.</entry>
        <entry key="hist_2">Not enough output arguments. Histogram bar plot is not supported.</entry>
        <entry key="hist_4">X must be a fixed-size scalar or a vector. If X is a vector, it can have at most one variable-length dimension, the first dimension or the second. All other dimensions must have a fixed length of 1.</entry>
        <entry key="hist_5">X must be a scalar or a vector.</entry>
        <entry key="hist_6">Input arguments must be ''double'', ''single'', or ''logical''.</entry>
        <entry key="hist_7">Inputs must be real.</entry>
        <entry key="hist_8">Scalar X must be constant.</entry>
        <entry key="hist_variableSizeScalarX">If X is a variable-length vector, it must not have length 1: scalar X must be fixed-size.</entry>
        <entry key="hist_vsizeMatrixBecameRowVec">A variable-size input matrix or N-D array must not become a row vector at runtime.</entry>
        <entry key="histc_2">All inputs must be real.</entry>
        <entry key="histc_3">First input must be non-sparse numeric array.</entry>
        <entry key="histc_4">Second input must be numeric.</entry>
        <entry key="histc_6">Second input does not allow enumerations</entry>
        <entry key="ifft_2">Too many input arguments.</entry>
        <entry key="ifft_4">Only the ''nonsymmetric'' option is supported in MATLAB Code Generation.</entry>
        <entry key="ifft2_2">Too many input arguments.</entry>
        <entry key="ifft2_3">Only the ''nonsymmetric'' option is supported in MATLAB Code Generation.</entry>
        <entry key="ifft2_4">If you specify MROWS, you also have to specify NCOLS.</entry>
        <entry key="ifftn_2">Too many input arguments.</entry>
        <entry key="ifftn_3">Only the ''nonsymmetric'' option is supported in MATLAB Code Generation.</entry>
        <entry key="issorted_2">If ''rows'' is not specified, the input must be a vector with at most one variable-length dimension, the first dimension or the second. All other dimensions must have a fixed length of 1.</entry>
        <entry key="issorted_3">Input must be a vector or ''rows'' must be specified.</entry>
        <entry key="issorted_4">Unknown flag</entry>
        <entry key="InvalidTypeNameInFAV">''{0}'' is not a data type or class name and thus cannot be used in function or property validation.</entry>
        <entry key="max_2">Too many input arguments.</entry>
        <entry key="mean_specialEmpty">MEAN with one variable-size matrix input of [] is not supported.</entry>
        <entry key="MeanFlagNotSupported">Code generation does not support the ''flag'' argument to MEAN.</entry>
        <entry key="median_specialEmpty">MEDIAN with one variable-size matrix input of [] is not supported.</entry>
        <entry key="min_2">Too many input arguments.</entry>
        <entry key="mode_2">Third output is not supported.</entry>
        <entry key="mode_specialEmpty">MODE with one variable-size matrix argument of [] is not supported.</entry>
        <entry key="now_unsupported">NOW is not supported in code generation. Use datetime('now') instead.</entry>
        <entry key="prod_6">The ''native'' and ''double'' flags are not supported.</entry>
        <entry key="prod_7">Complex integer multiplication is not supported.</entry>
        <entry key="prod_8" note="stringDatatypeUpdate">Trailing input must be ''double'' or ''native''.</entry>
        <entry key="prod_specialEmpty">PROD with one variable-size matrix input of [] is not supported.</entry>
        <entry key="setfieldConstFields">Non-constant field names are not supported for code generation. To generate code use constant field names instead.</entry>
        <entry key="sort_2">Too many input arguments.</entry>
        <entry key="sort_4">Complex inputs to SORT must be ''double'' or ''single''.</entry>
        <entry key="sortrows_3">Complex inputs to SORTROWS must be ''double'' or ''single''.</entry>
        <entry key="sortrows_5">Enumerations are not supported for COL input.</entry>
        <entry key="sortrows_6">COL must be numeric.</entry>
        <entry key="std_2">Too many input arguments.</entry>
        <entry key="inputSizeError">Inputs must be 2D matrices with the same number of rows.</entry>
        <entry key="sum_6">Native accumulation on char array is not supported.</entry>
        <entry key="sum_7">Complex integer summation is not supported.</entry>
        <entry key="sum_8" note="stringDatatypeUpdate">Trailing input must be ''double'' or ''native''.</entry>
        <entry key="sum_specialEmpty">SUM with one variable-size matrix input of [] is not supported.</entry>
        <entry key="trapz_specialEmpty">TRAPZ with one variable-size matrix input of [] is not supported.</entry>
        <entry key="var_specialEmpty">VAR with one variable-size matrix input of [] is not supported.</entry>
        <entry key="int64_1">Cast to ''int64'' class is not supported in MATLAB Code Generation.</entry>
        <entry key="typecast_2">The first input argument must be a full, non-complex numeric value.</entry>
        <entry key="typecast_3">First argument must be a vector with at most one variable-length dimension, the first dimension or the second. All other dimensions must have a fixed length of 1.</entry>
        <entry key="typecast_4">The first input argument must be a vector.</entry>
        <entry key="typecast_6">Unsupported class.</entry>
        <entry key="TypecastNativeType">Class {1} does not map to a {0,number,integer}-bit C type.</entry>
        <entry key="uint64_1">Cast to ''uint64'' class is not supported in MATLAB Code Generation.</entry>
        <entry key="ElFunDomainError">Domain error. To compute complex results from real x, use ''{0}(complex(x))''.</entry>
        <entry key="reallog_3">Input must be real.</entry>
        <entry key="realpow_4">Inputs must be real.</entry>
        <entry key="realsqrt_3">Input must be real.</entry>
        <entry key="unwrap_2">First input must be ''double'' or ''single''.</entry>
        <entry key="unwrap_3">Second input must be a floating point scalar or [].</entry>
        <entry key="bsxfun_2">First argument must be a function handle.</entry>
        <entry key="bsxfun_dynamicExpansion">Expansion is only supported along dimensions where one input argument or the other has a fixed length of 1.</entry>
        <entry key="cat_10">Implicit conversion to an enumeration class is not supported. All inputs must be enumerations of the same type.</entry>
        <entry key="cat_6">If any input is an enumeration, all inputs must be enumerations of the same type.</entry>
        <entry key="cat_8">Conversion to char from logical is not possible.</entry>
        <entry key="cat_9">Conversion to char from an enumeration type is not supported.</entry>
        <entry key="cat_UnsupportedEmptyEnumArray">This function does not support the creation of an empty enumeration array.</entry>
        <entry key="cat_UnsupportedVariableSizeEmpty">CAT arguments cannot be variable-size empty arrays.</entry>
        <entry key="cat_IncompatibleTypes">Variable-size cell array types must be compatible for concatenation.</entry>
        <entry key="cat_cellAndRuntimeEmptyNonCell"> In code generation, when a cell array and a variable-size non cell argument are concatenated, the non cell argument must not become an empty array at runtime.</entry>
        <entry key="circshift_InvalidShiftType">Invalid shift argument: must be a finite, real, integer vector with entries between -intmax(''{0}'') and intmax(''{1}'').</entry>
        <entry key="compan_2">Input to compan must be floats, namely single or double.</entry>
        <entry key="diag_2">First input must be 2D.</entry>
        <entry key="diag_3">First input must be numeric, logical, or char.</entry>
        <entry key="diag_4">K-th diagonal input must be a constant.</entry>
        <entry key="diag_KmustBeRealIntScalar">K-th diagonal input must be a real integer scalar.</entry>
        <entry key="diag_varsizedMatrixVector">Vector input to DIAG can only have one variable-length dimension. All other dimensions must have a fixed length of 1.</entry>
        <entry key="spdiagsScalarSize">Output dimension ''{0}'' must be a scalar.</entry>
        <entry key="spdiagsBadSize">Output dimension ''{0}'' must be a real, nonnegative integer.</entry>
        <entry key="eps_1">Class must be ''single'' or ''double''</entry>
        <entry key="eye_1">Too many arguments.</entry>
        <entry key="eye_3" note="stringDatatypeUpdate">This input must be a valid numeric class name.</entry>
        <entry key="eye_rowVectorMustBeLength2">Size vector input must be a row vector of length 2</entry>
        <entry key="find_1">To use 'find', enable variable sizing.</entry>
        <entry key="find_4">Invalid search option. Must be ''first'' or ''last''</entry>
        <entry key="FindVectorOrientationMismatch">A variable-size array input to FIND reduced to a row vector at run time. In code generation, the outputs of FIND are column vectors.</entry>
        <entry key="flipdim_1">Requires two arguments.</entry>
        <entry key="freqspace_2">N must have fixed-size.</entry>
        <entry key="freqspace_3">N must be a scalar or a vector with 2 elements.</entry>
        <entry key="freqspace_4">For single output, input N must be scalar.</entry>
        <entry key="freqspace_5">First input must be a constant.</entry>
        <entry key="freqspace_6">N must be real.</entry>
        <entry key="freqspace_8" note="stringDatatypeUpdate">Second argument must be a character vector.</entry>
        <entry key="hadamard_2">First argument must be a constant.</entry>
        <entry key="hadamard_3">First argument must be a scalar.</entry>
        <entry key="hadamard_NmustBePosInt">First argument must be an positive integer in indexing range.</entry>
        <entry key="hankel_2">First input must be numeric.</entry>
        <entry key="hankel_4">Second input must be numeric.</entry>
        <entry key="hankel_5">Integers can only be combined with integers of the same class, or scalar doubles.</entry>
        <entry key="hankel_emptyC">First input must not be empty.</entry>
        <entry key="hankel_emptyR">Second input must not be empty.</entry>
        <entry key="hilb_2">First argument must be a constant.</entry>
        <entry key="hilb_3">First argument must be a real integer scalar.</entry>
        <entry key="hilb_5">Second input must be ''double'' or ''single''.</entry>
        <entry key="hilb_argMustBeRealIntScalar">First argument must be a real integer scalar.</entry>
        <entry key="ind2sub_2">First input must be fixed-size.</entry>
        <entry key="ind2sub_3">Size argument must be numeric.</entry>
        <entry key="ind2sub_4">Too many output arguments.</entry>
        <entry key="intmax_1" note="stringDatatypeUpdate">Input must be the name of an integer class.</entry>
        <entry key="intmax_2">Invalid class name.</entry>
        <entry key="intmin_1" note="stringDatatypeUpdate">Input must be the name of an integer class.</entry>
        <entry key="intmin_2">Invalid class name.</entry>
        <entry key="invhilb_2">First argument must be a constant.</entry>
        <entry key="invhilb_3">First argument must be a real integer scalar.</entry>
        <entry key="invhilb_5">Second input must be ''double'' or ''single''.</entry>
        <entry key="invhilb_argMustBeRealIntScalar">First argument must be a real integer scalar.</entry>
        <entry key="ipermute_2">Invalid data type. Enumerations not supported in the dimension order vector.</entry>
        <entry key="ipermute_3">Dimension order must be constant.</entry>
        <entry key="ipermute_invalidPermutation">Dimension order vector contains an invalid permutation index. Dimension order must be a permutation of the integers 1:N, where N is greater than or equal to the number of dimensions of the input array.</entry>
        <entry key="ipermute_orderNeedsNElements">Dimension order vector must have at least N elements for an N-D array.</entry>
        <entry key="linspace_2">Input d1 must be a scalar floating-point value.</entry>
        <entry key="linspace_3">Input d2 must be a scalar floating-point value.</entry>
        <entry key="linspace_4">Number of points must be constant when variable sizing is disabled.</entry>
        <entry key="linspace_5">N must be a real, numeric scalar.</entry>
        <entry key="logspace_2">Input d1 must be a scalar floating-point value.</entry>
        <entry key="logspace_3">Input d2 must be a scalar floating-point value.</entry>
        <entry key="logspace_4">The number of points N must be a constant.</entry>
        <entry key="logspace_invalidN">The number of points N must be a positive integer and real.</entry>
        <entry key="piSpecialSupported">Special case for pi is not supported. Use logspace(a,log10(pi),n) if desired.</entry>
        <entry key="ltitr_inputsMustBe2D">Input arguments must be 2-D.</entry>
        <entry key="magic_2">Argument must be a constant. MAGIC does not support variable-size output.</entry>
        <entry key="magic_3">Argument must be a constant.</entry>
        <entry key="magic_argMustBeRealIntScalar">Argument must be a real integer scalar.</entry>
        <entry key="ndgrid_2">Too many output arguments.</entry>
        <entry key="pascal_2">Third input must be ''double'' or ''single''.</entry>
        <entry key="pascal_nMustBeNonNegativeInteger">First argument to ''pascal'' must be a non-negative integer.</entry>
        <entry key="permute_2">Invalid data type. Enumerations not supported in the dimension order vector.</entry>
        <entry key="permute_3">Dimension order must be constant.</entry>
        <entry key="permute_4">Dimension order vector must be fixed size.</entry>
        <entry key="permute_5">Dimension order vector must have at least N elements for an N-D array.</entry>
        <entry key="permute_invalidPermutation">Dimension order vector contains an invalid permutation index. Dimension order must be a permutation of the integers 1:N, where N is greater than or equal to the number of dimensions of the input array.</entry>
        <entry key="permute_heterogenousCell">Dimension order must be constant for heterogeneous cell array inputs.</entry>
        <entry key="rand_1">Too many input arguments.</entry>
        <entry key="rand_10">Output class must be ''single'' or ''double''.</entry>
        <entry key="rand_2">Too many output arguments.</entry>
        <entry key="rand_3">Inputs must be numeric.</entry>
        <entry key="rand_4" note="stringDatatypeUpdate">Command option must be a constant character vector.</entry>
        <entry key="rand_5">The swb2712 (''state'') uniform random number generator is not supported for code generation.</entry>
        <entry key="rand_6">State must be fixed-size.</entry>
        <entry key="rand_8">Unknown command option.</entry>
        <entry key="rand_9" note="stringDatatypeUpdate">Trailing output class argument must be a constant character vector.</entry>
        <entry key="randn_1">Too many input arguments.</entry>
        <entry key="randn_10">Output class must be ''single'' or ''double''.</entry>
        <entry key="randn_2">Too many output arguments.</entry>
        <entry key="randn_3">Inputs must be numeric.</entry>
        <entry key="randn_4" note="stringDatatypeUpdate">Command option must be a constant character vector.</entry>
        <entry key="randn_5">Seed or state input must be fixed-size.</entry>
        <entry key="randn_6">Seed input must be a scalar double.</entry>
        <entry key="randn_7">State must be a double scalar or the output of RANDN(''state'').</entry>
        <entry key="randn_8">Unknown command option.</entry>
        <entry key="randn_9" note="stringDatatypeUpdate">Trailing output class argument must be a constant character vector.</entry>
        <entry key="RandStreamPropNotImplemented">Code generation does not support the RandStream property ''{0}''.</entry>
        <entry key="RandStreamConstType" note="stringDatatypeUpdate">The ''Type'' argument must be a constant character vector.</entry>
        <entry key="RandStreamConstNormalTransform" note="stringDatatypeUpdate">The ''NormalTransform'' argument must be a constant character vector.</entry>
        <entry key="RandStreamNoShuffle">You cannot create a RandStream object with a ''Seed'' of ''shuffle'' in code generation.</entry>
        <entry key="RandStreamUndefined">Calling the method, ''{0}'', is disallowed for inputs of type RandStream.</entry>
        <entry key="RandStreamFixedSizeState">Code generation does not support setting the RandStream ''State'' property to a variable-size array.  Set the state with a fixed-size array obtained from another RandStream instance.</entry>
        <entry key="realmax_1" note="stringDatatypeUpdate">Input must be a class name.</entry>
        <entry key="realmax_2">Input must be ''single'' or ''double''.</entry>
        <entry key="realmin_1" note="stringDatatypeUpdate">Input must be a class name.</entry>
        <entry key="realmin_2">Input must be ''single'' or ''double''.</entry>
        <entry key="reshape_4">Size arguments must be integer scalars.</entry>
        <entry key="reshape_emptyReshapeLimit">To RESHAPE the number of elements must not change, and if the input is empty, the maximum dimension length cannot be increased unless the output size is fixed.</entry>
        <entry key="rot90_2">Enumerations not supported for k input.</entry>
        <entry key="rot90_3">k must be a scalar.</entry>
        <entry key="rot90_4">k must be a constant.</entry>
        <entry key="shiftdim_3">Enumerations not supported for second input argument.</entry>
        <entry key="shiftdim_4">Second argument must be a constant.</entry>
        <entry key="shiftdim_autoDimIncompatibility">Generated code expects a variable-size matrix but receives a variable-length vector. Specify the number of positions to shift explicitly.</entry>
        <entry key="shiftdim_invalidNshifts">Second argument must be empty or a real, integer scalar.</entry>
        <entry key="shiftdim_wrongNDims">The first input argument must always have the same number of dimensions when the number of shifts is supplied and is positive.</entry>
        <entry key="sub2ind_2">Size argument must be numeric.</entry>
        <entry key="sub2ind_3">First input must be fixed-size.</entry>
        <entry key="vander_argNotVector">Argument must be a vector.</entry>
        <entry key="wilkinson_2">First argument must be a constant.</entry>
        <entry key="wilkinson_3">First argument must be a real integer scalar.</entry>
        <entry key="wilkinson_5">Second input must be ''double'' or ''single''.</entry>
        <entry key="wilkinson_argMustBeRealIntScalar">First argument must be a real integer scalar.</entry>
        <entry key="eml_refblas_xgemv_2">EML_REFBLAS_XGEMV:  if any of the inputs are complex, Y must be complex.</entry>
        <entry key="eml_refblas_xrotg_2">A and B must be of the same class and complexness.</entry>
        <entry key="eml_reflapack_xzlartg_1">F and G must be of the same class.</entry>
        <entry key="eml_all_or_any_2">First input must be ''all'' or ''any''.</entry>
        <entry key="eml_all_or_any_6">Matrix input not supported for HDL target.</entry>
        <entry key="eml_all_or_any_autoDimIncompatibility">Generated code expects a variable-size matrix but receives a variable-length vector. Specify the operating dimension explicitly or specify a variable-length vector at code generation time.</entry>
        <entry key="eml_all_or_any_specialEmpty">ALL or ANY with one variable-size matrix input of [] is not supported.</entry>
        <entry key="AllConstInputs">All inputs must be constant.</entry>
        <entry key="eml_assert_valid_dim_1">Enumeration types are not supported for dimension arguments.</entry>
        <entry key="eml_assert_valid_dim_2">Dimension must be a fixed-size scalar.</entry>
        <entry key="eml_assert_valid_dim_dimTooLarge">Dimension exceeds intmax(''{0}'').</entry>
        <entry key="eml_assert_valid_size_arg_1">Enumeration types are not supported for size arguments.</entry>
        <entry key="eml_assert_valid_size_arg_2">Size argument must be constant.</entry>
        <entry key="eml_assert_valid_size_arg_3">Size argument must be numeric.</entry>
        <entry key="eml_assert_valid_size_arg_4">Size argument cannot be complex.</entry>
        <entry key="eml_assert_valid_size_arg_6">Size argument must be scalar.</entry>
        <entry key="eml_assert_valid_size_nohalf">Size argument cannot be half. Use other numeric type.</entry>
        <entry key="eml_assert_valid_size_nonsparse">Size argument must be full, not sparse.</entry>
        <entry key="eml_assert_valid_size_arg_invalidSizeVector">Size vector must be a row vector with finite integer elements in the range: {0,number,integer} to {1,number,integer}.</entry>
        <entry key="AssertValidSizeArgFixedSize">For code generation, size vectors cannot be variable-length.</entry>
        <entry key="eml_div_1">Complex integer arithmetic is not supported.</entry>
        <entry key="eml_div_2">Integers can only be combined with integers of the same class, or scalar doubles.</entry>
        <entry key="eml_fft_4">DIM must be a constant.</entry>
        <entry key="eml_fft_sizeMustBePower2">Length of transform dimension must be a power of 2.</entry>
        <entry key="FFTInvalidAlgorithmString" note="stringDatatypeUpdate">Invalid algorithm name. Must be one of: ''radix2'', ''bluestein'', ''rader'', ''auto''</entry>
        <entry key="FFTRaderNonPrime">Length of transform must be prime for Rader''s algorithm.</entry>
        <entry key="eml_guarded_inf_1">Unsupported class.</entry>
        <entry key="eml_guarded_nan_1">Unsupported class.</entry>
        <entry key="eml_int_nbits_1">Not a recognized integer class.</entry>
        <entry key="eml_isequal_core_2">First input must be scalar ''logical''.</entry>
        <entry key="eml_min_or_max_2">Complex integer ''{0}'' is not supported</entry>
        <entry key="eml_min_or_max_4">Function ''{0}'' with two matrices to compare and two output arguments is not supported.</entry>
        <entry key="eml_min_or_max_5">Complex integer ''{0}'' is not supported</entry>
        <entry key="eml_min_or_max_6">Mixed inputs must either be single and double, or integer and scalar double. All other combinations are no longer allowed.</entry>
        <entry key="eml_min_or_max_7">Function ''{0}'' with two matrices to compare and a working dimension is not supported.</entry>
        <entry key="eml_min_or_max_varDimZero">If the working dimension of MAX or MIN is variable in length, it must not have zero length at runtime.</entry>
        <entry key="eml_ndims_varsized_1">Internal error</entry>
        <entry key="eml_pad_array_2">PADVAL input must be a scalar.</entry>
        <entry key="eml_pad_or_truncate_matrix_NMustBeConst">N must be const.</entry>
        <entry key="eml_pad_or_truncate_matrix_XMustBe2D">X must be a non-empty two-dimensional numeric matrix.</entry>
        <entry key="eml_parse_parameter_inputs_10">Parse options input must be [] or a struct.</entry>
        <entry key="eml_parse_parameter_inputs_11">CaseSensitivity must be true or false.</entry>
        <entry key="eml_parse_parameter_inputs_12">StructExpand must be true or false.</entry>
        <entry key="eml_parse_parameter_inputs_13">PartialMatching must be ''first'', ''none'', or ''unique''.</entry>
        <entry key="eml_parse_parameter_inputs_14">Options input must be [] or a struct with fields selected from ''CaseSensitivity'', ''StructExpand'', ''IgnoreNulls'', and ''PartialMatching''.</entry>
        <entry key="ParameterNamesMustBeConstant" note="stringDatatypeUpdate">Parameter names must be constant character vectors or string scalars.</entry>
        <entry key="UnmatchedParameter">''{0}'' is not a recognized parameter. For a list of valid name-value pair arguments, see the documentation for this function.</entry>
        <entry key="eml_parse_parameter_inputs_2">The {0} input must be a structure or a constant cell array of character vectors or string scalars.</entry>
        <entry key="eml_parse_parameter_inputs_3">The length of VARARGIN cannot exceed 65535.</entry>
        <entry key="eml_parse_parameter_inputs_4">Too many parameter names. The maximum supported number of optional arguments and parameter names is 65535.</entry>
        <entry key="eml_parse_parameter_inputs_5">The value of each field of the NVPairNames input structure must be a real, scalar ''uint32''.</entry>
        <entry key="ParamMissingValue">No value was given for ''{0}''. Name-value pair arguments require a name followed by a value.</entry>
        <entry key="ExpectedParameterNameOrOptionStruct">Expected a parameter name or a structure of parameter names and values.</entry>
        <entry key="ExpectedParameterName">Expected a parameter name.</entry>
        <entry key="eml_parse_parameter_inputs_9">Parse options input must be constant. Try defining it using struct(...).</entry>
        <entry key="UnmatchedOption">''{0}'' is not a valid input in this context.</entry>
        <entry key="eml_rand_mcg16807_1">Seed must be a double scalar.</entry>
        <entry key="eml_rand_mcg16807_2">Range input must be fixed-size.</entry>
        <entry key="eml_rand_mcg16807_3">Range input must be a scalar or have two elements.</entry>
        <entry key="eml_rand_mt19937ar_3">Seed value must be a fixed-size scalar double.</entry>
        <entry key="eml_rand_mt19937ar_4">Range input must be fixed-size.</entry>
        <entry key="eml_rand_mt19937ar_5">Range input must be a scalar or have two elements.</entry>
        <entry key="eml_rand_shr3cong_1">Seed must be a double scalar.</entry>
        <entry key="eml_rand_shr3cong_2">Range input must be fixed-size.</entry>
        <entry key="eml_rand_shr3cong_3">Range input must be a scalar or have two elements.</entry>
        <entry key="eml_rcond_1">Inputs must be single or double.</entry>
        <entry key="eml_safe_eq_1">First input must not be a float.</entry>
        <entry key="eml_safe_eq_2">Unsupported class: ''{0}''.</entry>
        <entry key="UnsupportedEmptyArrayType">Empty arrays of opaque and struct types are not supported.</entry>
        <entry key="eml_scalar_eg_2">If any argument is an enumeration, all arguments must be enumerations of the same type.</entry>
        <entry key="eml_sort_2">Sorting direction must be ''ascend'' or ''descend''.</entry>
        <entry key="SortDirMustBeConstant">Sorting direction must be constant, either ''ascend'' or ''descend''.</entry>
        <entry key="SortCellstrHomogenizationFailed"> Unable to homogenize input cell array. Use coder.varsize to homogenize 'X'.</entry>
        <entry key="eml_unsigned_class_1">Not a recognized integer class.</entry>
        <entry key="fzero_11">User function must always return a real value.</entry>
        <entry key="fzero_14">User function must always return a real value.</entry>
        <entry key="fzero_2">Too many output arguments.  For code generation, FZERO does not support the output struct argument.</entry>
        <entry key="fzero_4">First input must be a function handle.</entry>
        <entry key="fzero_5">FZERO requires at least two input arguments.</entry>
        <entry key="fzero_6">FZERO only accepts inputs of data type double.</entry>
        <entry key="fzero_7">Second argument must be fixed-size.</entry>
        <entry key="fzero_8">Second argument must be of length 1 or 2.</entry>
        <entry key="fzero_9">Third argument must be an option struct or [].</entry>
        <entry key="quad2d_2">First input argument must be a function handle.</entry>
        <entry key="quad2d_7">MATLAB:quad2d:invalidSingularSingular option must be true or false.</entry>
        <entry key="quad2d_invalidFailurePlot">The FailurePlot option is not supported in MATLAB Code Generation.</entry>
        <entry key="quadgk_2">First input argument must be a function handle.</entry>
        <entry key="quadgk_3">A and B must be scalar floats.</entry>
        <entry key="quadgk_4">Supported classes are ''double'' and ''single''.</entry>
        <entry key="quadgk_8">MaxIntervalCount must be a constant.</entry>
        <entry key="quadgk_9">MaxIntervalCount must be a positive integer scalar in indexing range.</entry>
        <entry key="quadgk_MaxIntervalCountTooSmall">MaxIntervalCount is too small for the first iteration.</entry>
        <entry key="quadgk_WaypointsTypeMismatch">MATLAB Code Generation requires that at least one endpoint be ''single'' if Waypoints are ''single''.</entry>
        <entry key="mustBeAInput">The ''ClassNames'' argument must be a nonempty constant string, character vector, or cell array of character vectors.</entry>
        <entry key="mustBeLike">When 2 input arguments are specified, the first argument must be ''like''.</entry>
        <entry key="constTypename">Char or string arguments specifying the name of a type must be constant.</entry>
        <entry key="nargchk_2">Inputs must be constants</entry>
        <entry key="nargchk_3" >The fourth input must be either ''struct'' or ''string''.</entry>
        <entry key="nargchk_4">First three inputs must be scalars.</entry>
        <entry key="nargchk_5">First three inputs must be numeric.</entry>
        <entry key="nargchk_6">Scalar integer value required, but value is not integral.</entry>
        <entry key="nargoutchk_2">Inputs must be constants</entry>
        <entry key="nargoutchk_3" >The fourth input must be either ''struct'' or ''string''.</entry>
        <entry key="nargoutchk_4">First three inputs must be scalars.</entry>
        <entry key="nargoutchk_5">First three inputs must be numeric.</entry>
        <entry key="nargoutchk_6">Scalar integer value required, but value is not integral.</entry>
        <entry key="chol_3">Second input must be a constant ''upper'' or ''lower''.</entry>
        <entry key="chol_4">The input matrix must be variable-size in both dimensions when nargout == 2.</entry>
        <entry key="cond_3">The only matrix norms available are 1, 2, inf, and ''fro''.</entry>
        <entry key="cond_inputMustBe2D">Input matrix must be 2-D.</entry>
        <entry key="qr_inputMustBe2D">Argument A must be a 2-D matrix.</entry>
        <entry key="qr_invalidArguments">Invalid option combination.</entry>
        <entry key="expm_3">Input must be single or double.</entry>
        <entry key="linsolve_2">MATLAB Code Generation only supports one option structure argument.</entry>
        <entry key="linsolve_5">Third argument must be a structure array.</entry>
        <entry key="linsolve_6">MATLAB Code Generation only supports a scalar structure input.</entry>
        <entry key="linsolve_7">Third argument must be a constant.  Try using the STRUCT function to create the options structure.</entry>
        <entry key="linsolve_8">Structure field must contain logical scalar.</entry>
        <entry key="lsqminnormInputTypes">First and second arguments must be double or single matrices.</entry>
        <entry key="lsqminnormInvalidTol">Tolerance must be a non-negative scalar number of type double or single.</entry>      
        <entry key="lsqminnormInvalidReg">Regularization factor must be nonnegative scalar</entry>
        <entry key="lsqminnormUnrecognizedInput">Option inputs must be either "warn", "nowarn", a real numeric scalar tolerance, or "RegularizationFactor" followed by a corresponding value.</entry>
        <entry key="lu_4">Second argument must be ''vector'' or ''matrix''</entry>
        <entry key="lu_inputMustBe2D">Matrix must be 2-D.</entry>
        <entry key="norm_4">The only matrix norms available are 1, 2, inf, and ''fro''.</entry>
        <entry key="norm_inputMustBe2D">Input x must be a vector or 2-D matrix.</entry>
        <entry key="normest_5">Tolerance must be real.</entry>
        <entry key="normest_inputMustBe2D">Input matrix must be 2D.</entry>
        <entry key="null_2">The second input (rational basis option) is not supported.</entry>
        <entry key="pinv_4">TOL must be a scalar float.</entry>
        <entry key="pinv_inputMustBe2D">Input matrix must be 2D.</entry>
        <entry key="planerot_4">Input must be a 2-element column vector.</entry>
        <entry key="qr_2">Use qr(X,0) for economy size decomposition.</entry>
        <entry key="rank_4">If supplied, tol must be a scalar.</entry>
        <entry key="rcond_2">Inputs must be single or double.</entry>
        <entry key="rsf2csf_2">Inputs must be ''double'' or ''single''.</entry>
        <entry key="rsf2csf_3">Inputs must be real.</entry>
        <entry key="schur_5">Second argument must be ''real'' or ''complex''.</entry>
        <entry key="schur_failed">SCHUR failed.</entry>
        <entry key="schur_input2D">Input must be 2-D.</entry>
        <entry key="sqrtm_rootEigenCancel">The principal square roots of two or more eigenvalues approximately cancel. The results may be inaccurate.</entry>
        <entry key="svd_4"
               note="stringDatatypeUpdate"
               >For code generation, second argument must be constant, either 0 or ''econ''.</entry>
        <entry key="svd_5">Use svd(X,0) or svd(X,''econ'') for economy size decomposition.</entry>
        <entry key="bitAndXorOrUnsupportedClasses">Inputs must be signed or unsigned integers of the same class or one input may be a scalar double.</entry>
        <entry key="bitIntegersOnly">First argument must be a signed or unsigned integer.</entry>
        <entry key="bitshiftAssumedTypeMustBeConstant">Assumedtype input must be a constant.</entry>
        <entry key="colon_6">Operands must be constants.</entry>
        <entry key="colon_7">Colon operands must be real scalars.</entry>
        <entry key="colon_8">Colon operands must be all the same type, or mixed with real scalar doubles.</entry>
        <entry key="colon_9">For colon operator with char operands, first and last operands must be char.</entry>
        <entry key="colon_10">For colon operator with char operands, second operand must be char or real scalar double.</entry>
        <entry key="expectHomogeneousHalfInputs">If one input is in half precision, all inputs must be in half precision.</entry>
        <entry key="colon_operandsMustBeScalars">Colon operands must be real scalars.</entry>
        <entry key="eml_setop_12">Inputs must be 2-D.</entry>
        <entry key="eml_setop_2">Too many input arguments.</entry>
        <entry key="eml_setop_3" note="stringDatatypeUpdate">First input must be an operation name.</entry>
        <entry key="eml_setop_4">Complex inputs must be ''single'' or ''double''.</entry>
        <entry key="eml_setop_5">The first two inputs must belong to the same enumeration class.</entry>
        <entry key="eml_setop_6">OP must be ''intersect'', ''setdiff'', ''setxor'', or ''union''.</entry>
        <entry key="eml_setop_7">Inputs must be numeric, logical, or char.</entry>
        <entry key="eml_setop_8">Unknown flag.</entry>
        <entry key="eml_setop_9">Unless ''rows'' is specified, inputs must be row vectors. For variable-size inputs, the first dimension must have a constant length of 1. The input [] is not supported. Use a 1-by-0 input (e.g., zeros(1,0)) to represent the empty set.</entry>
        <entry key="eml_setop_10">Input A of class {0} and input B of class {1} must be the same class, unless one is double.</entry>
        <entry key="setopInputsMustBeVectors">Unless ''rows'' is specified, inputs must be vectors. For variable-size inputs, either the first or second dimension must have a constant length of 1. The input [] is not supported. Use a 1-by-0 or 0-by-1 input (e.g., zeros(1,0) or zeros(0,1)) to represent the empty set.</entry>
        <entry key="vectorOrientationMustMatch">Both inputs must be row vectors or both inputs must be column vectors.</entry>
        <entry key="eml_setop_unsortedA">The first operand is not sorted in ascending order. Use SORT first.</entry>
        <entry key="eml_setop_unsortedB">The second operand is not sorted in ascending order. Use SORT first.</entry>
        <entry key="eml_setop_unsortedRowsA">The first operand is not sorted in ascending order. Use SORTROWS first.</entry>
        <entry key="eml_setop_unsortedRowsB">The second operand is not sorted in ascending order. Use SORTROWS first.</entry>
        <entry key="idivide_2">Unrecognized rounding option. Use lower case ''fix'', ''floor'', ''round'', or ''ceil''.</entry>
        <entry key="idivide_3">At least one argument must belong to an integer class.</entry>
        <entry key="idivide_4">Complex integer arithmetic is not supported.</entry>
        <entry key="idivide_5">Integers can only be combined with integers of the same class, or scalar doubles.</entry>
        <entry key="idivide_divideByZero">Divide by zero.</entry>
        <entry key="intersect_2">Too many input arguments.</entry>
        <entry key="ismember_2">Too many input arguments.</entry>
        <entry key="ismember_3">The first two inputs must belong to the same enumeration class.</entry>
        <entry key="ismember_4">Inputs must be numeric, logical, or char.</entry>
        <entry key="ismember_5">Complex inputs must be ''single'' or ''double''.</entry>
        <entry key="ismember_6">Unknown flag.</entry>
        <entry key="ismember_7">Inputs must be 2-D.</entry>
        <entry key="ismember_unsortedRowsS">The second operand is not sorted in ascending order. Use SORTROWS first.</entry>
        <entry key="ismember_unsortedS">The second operand is not sorted in ascending order. Use SORT first.</entry>
        <entry key="kron_1">Input argument ''A'' is undefined.</entry>
        <entry key="kron_2">Input argument ''B'' is undefined.</entry>
        <entry key="mpower_4">Both operands must be scalar.</entry>
        <entry key="mpower_5">Integers can only be combined with integers of the same class, or scalar doubles.</entry>
        <entry key="mpower_6">At least one operand must be scalar.</entry>
        <entry key="mpower_inputsMustBe2D">Input arguments must be 2-D.</entry>
        <entry key="mpower_needComplexInput">At least one argument must be complex when raising a matrix to a non-integer, scalar power.</entry>
        <entry key="mtimes_noDynamicScalarExpansion">Unable to multiply scalar by non-scalar because inner dimensions are not the same. To use scalar expansion, specify the scalar as fixed size at code generation time.</entry>
        <entry key="power_4">Complex integer arithmetic is not supported.</entry>
        <entry key="power_5">Integers can only be combined with integers of the same class, or scalar doubles.</entry>
        <entry key="power_7">Integers can only be combined with integers of the same class, or scalar doubles.</entry>
        <entry key="power_9">For HDL target both inputs must belong to the same integer class.</entry>
        <entry key="power_domainError">Domain error. To compute complex results, make at least one input complex, e.g. ''power(complex(a),b)''.</entry>
        <entry key="unique_3">First input must be numeric, logical, or char.</entry>
        <entry key="unique_4">Complex inputs must be ''single'' or ''double''.</entry>
        <entry key="unique_5" note="stringDatatypeUpdate">Options must be constant character vectors.</entry>
        <entry key="unique_6">Unrecognized option.</entry>
        <entry key="unique_7">You may not specify more than one value for the same option.</entry>
        <entry key="unique_8">Unless ''rows'' is specified, the first input must be a row vector. If the vector is variable-size, the first dimension must have a fixed length of 1. The input [] is not supported. Use a 1-by-0 input (e.g., zeros(1,0)) to represent the empty set.</entry>
        <entry key="unique_9">Input must be 2-D.</entry>
        <entry key="unique_InputMustBeVector">First or second dimension of input array must have a fixed size of 1 when "rows" option is not specified.</entry>
        <entry key="unique_cellInputMustBeVector">Input cell array must be a vector. If the vector is variable sized, then either the first dimension or the second must have a fixed length of 1. The input '{}' is not supported. Use cell(1,0) or cell(0,1) to represent the empty set.</entry>
        <entry key="unique_cellInputMustBeRowForLegacyOption">Input cell array must be a row vector when the option 'legacy' is specified for unique function. If the vector is variable-sized, the first dimension must have a fixed length of 1. The input '{}' is not supported. Use cell(1,0) to represent the empty set.</entry>
        <entry key="xor_2">Operands must be real.</entry>
        <entry key="interp1_14">Unsupported method. Supported methods are ''cubic'', ''linear'', ''nearest'', ''next'', ''pchip'', ''previous'', ''spline'', and ''v5cubic''.</entry>
        <entry key="interp1_2">The table V must contain only numbers</entry>
        <entry key="interp1_3">The data abscissae must be real.</entry>
        <entry key="interp1_5">Invalid extrapolation method.</entry>
        <entry key="interp1_6">The indices Xq must contain only real numbers</entry>
        <entry key="interp1_arrayXItoVector">Variable-size Xq must always be a vector or never be a vector.</entry>
        <entry key="interp1_nonMonotonicX">The data abscissae must be distinct and strictly monotonic.</entry>
        <entry key="interp1_vsizeMatrixBecameRowVec">A variable-size input matrix or N-D array must not become a row vector at runtime.</entry>
        <entry key="interp1q_1">Input argument Xq is undefined.</entry>
        <entry key="interp1q_2">The data abscissae must be real.</entry>
        <entry key="interp1q_3">The table V must contain only numbers.</entry>
        <entry key="interp1q_4">The indices Xq must contain only real numbers.</entry>
        <entry key="interp1q_5">Input argument X must be a column vector.</entry>
        <entry key="interp1q_6">Input argument Xq must be a column vector.</entry>
        <entry key="interp1q_7">Y must have length(X) rows.</entry>
        <entry key="nMustBeRealPosIntScalar">N must be a real positive integer scalar.</entry>
        <entry key="padecoef_2">N must be a constant.</entry>
        <entry key="padecoef_4">T must be scalar.</entry>
        <entry key="padecoef_5">T must be a float.</entry>
        <entry key="nonfiniteValuesNotSupported">X must not contain Infs or NaNs.</entry>
        <entry key="poly_3">Input must be 2D.</entry>
        <entry key="poly_vsizeMatrixIsVector">A variable-size matrix input to POLY must not become a vector input at runtime. Use a variable-length vector instead.</entry>
        <entry key="polyfit_2">N must be a constant.</entry>
        <entry key="polyfit_3">N must be scalar, numeric, and real.</entry>
        <entry key="polyfit_4">X and Y must be vectors with at most one variable-length dimension, the first dimension or the second. All other dimensions must have a fixed length of 1.</entry>
        <entry key="polyfit_5">POLYFIT data input must be vectors.</entry>
        <entry key="polyval_6">S is required to compute error estimates.</entry>
        <entry key="polyval_7">S must be a struct as returned by POLYFIT.</entry>
        <entry key="polyval_invalidMu">MU must be a float array with at least two elements.</entry>
        <entry key="roots_1">ROOTS requires variable sizing.</entry>
        <entry key="roots_3">Input must be ''double'' or ''single''.</entry>
        <entry key="roots_4">Input must be a vector with at most one variable-length dimension, the first dimension or the second. All other dimensions must have a fixed length of 1.</entry>
        <entry key="roots_5">Input must be a vector.</entry>
        <entry key="nnz_2">Input must be numeric, char, or logical.</entry>
        <entry key="nonzeros_2">Input must be numeric, char, or logical.</entry>
        <entry key="betainc_2">Inputs must be single or double.</entry>
        <entry key="betainc_3">Inputs must be real.</entry>
        <entry key="betainc_4">TAIL must be ''lower'' or ''upper''.</entry>
        <entry key="betaincinv_2">Inputs must be single or double.</entry>
        <entry key="betaincinv_3">Inputs must be real.</entry>
        <entry key="betaincinv_4">TAIL must be ''lower'' or ''upper''.</entry>
        <entry key="cross_1">Input argument A is undefined.</entry>
        <entry key="cross_2">Input argument B is undefined.</entry>
        <entry key="cross_4">Unsupported input class.  Must be single or double.</entry>
        <entry key="variableSizeMatrixToVector">Variable-size array inputs that become vectors at run time must have the same orientation.</entry>
        <entry key="ellipke_4">Input arguments must be real.</entry>
        <entry key="ellipke_5">TOL must be a scalar float.</entry>
        <entry key="eml_erfcore_2">Inputs must be single or double.</entry>
        <entry key="eml_erfcore_3">Input must be real.</entry>
        <entry key="eml_erfcore_4">Second input must be a constant.</entry>
        <entry key="eml_primes_core_1">First input must be constant.</entry>
        <entry key="eml_primes_core_4">Unsupported class.</entry>
        <entry key="expint_2">Inputs must be single or double.</entry>
        <entry key="factor_2">N must be a floating point scalar.</entry>
        <entry key="factor_3">FACTOR requires variable sizing support. This option is currently turned off.</entry>
        <entry key="factorial_1">N must be a matrix of non-negative floating-point integers.</entry>
        <entry key="gamma_2">Inputs must be single or double.</entry>
        <entry key="gamma_3">Input must be real.</entry>
        <entry key="gammainc_2">Inputs must be real, full, and double or single.</entry>
        <entry key="gammainc_3">TAIL must be ''lower'' or ''upper''.</entry>
        <entry key="gammaincinv_1">Not enough inputs.</entry>
        <entry key="gammaincinv_2">Inputs must be real, full, and double or single.</entry>
        <entry key="gammaln_2">Inputs must be single or double.</entry>
        <entry key="gcd_4">Inputs must be real integers.</entry>
        <entry key="isprime_2">Input must be ''double'' or ''single''.</entry>
        <entry key="isprime_3">ISPRIME requires variable sizing support. This option is currently turned off.</entry>
        <entry key="lcm_4">Inputs must be real.</entry>
        <entry key="nchoosek_3">The first argument has to be a scalar or a vector.</entry>
        <entry key="nchoosek_4">The second input has to be a non-negative integer.</entry>
        <entry key="primes_2">N must be a floating point scalar.</entry>
        <entry key="primes_3">PRIMES requires variable sizing support. This option is currently turned off.</entry>
        <entry key="bin2dec_InputOutOfRange" note="stringDatatypeUpdate">Input must be {0} bits or less.</entry>
        <entry key="bin2dec_inputMustBe2D">Input must be 2D.</entry>
        <entry key="blanks_2">Input must be numeric.</entry>
        <entry key="hex2dec_inputMustBe2D">Input must be 2D.</entry>
        <entry key="structfun_maxrhs">structfun supports at most 3 outputs for code generation.</entry>
        <entry key="structfun_noErrorHandler">The ErrorHandler option is not supported for code generation.</entry>
        <entry key="int_forloop_overflow">The loop variable of class {0} might overflow on the last iteration of the for loop. This could lead to an infinite loop.</entry>
        <entry key="colonIndexOverflow">Numerical overflow occurred when performing colon operation on values of class {0}.</entry>
        <entry key="internal_invariant_arg1">The condition input argument must be a scalar logical.</entry>
        <entry key="internal_invariant_arg2" note="stringDatatypeUpdate">The second input must be a message identifier.</entry>
        <entry key="rng_stringInputNotConst" note="stringDatatypeUpdate">This input must be constant.</entry>
        <entry key="rng_shuffleNotSupported">The 'shuffle' input is not supported.</entry>
        <entry key="rng_unsupportedGenerator">The generator must be 'twister', 'v5normal', or 'v4'.</entry>
        <entry key="badGeneratorState">The generator state is not valid.</entry>
        <entry key="sum_hdlRequiresFlag">You must specify either the ''native'' or the ''double'' flag when the input is ''{0}'' and the target is ''hdl''.</entry>
        <entry key="indexIntRelop_unrecognizedRelop" translate="false" note="stringDatatypeUpdate">The first argument of ''coder.internal.indexIntRelop'' must be one of the following: ''eq'', ''neq'', ''lt'', ''le'', ''gt'' or ''ge''.</entry>
        <entry key="indexIntRelop_unsupportedInput">Comparison of the emulation integer type to class ''{0}'' is not supported. Try casting the operand to a built-in integer type similar to the emulation integer type.</entry>
        <entry key="indexIntRelop_floatOverflow">The emulation integer type exceeds the range of class ''{0}''. Try casting the floating-point operand a suitable integer class.</entry>
        <entry key="indexIntRelop_neitherIsIndexInt" translate="false">Neither of the operands to coder.internal.indexIntRelop is ''coder.internal.indexInt''. Expected one of them to be an indexInt.</entry>
        <entry key="indexIntRelop_bothAreIndexInt" translate="false">Both of the operands to coder.internal.indexIntRelop are ''coder.internal.indexInt''. This routine relies on built-in support for indexInt to indexInt comparisons.</entry>
        <entry key="indexIntRelop_nonBinaryFP" translate="false">Non-binary floating-point types are not supported in coder.internal.indexIntRelop. Found base = {0,number,integer} for class ''{1}''.</entry>
        <entry key="unsupportedString" note="stringDatatypeUpdate">This input can only contain characters in the range 0 to {0,number,integer}.</entry>
        <entry key="hex2num_invalidInput" note="stringDatatypeUpdate">Input must be a character vector or a matrix with at most {0,number,integer} columns.</entry>
        <entry key="environmentUnknown">The ''{0}'' function is not supported for ''{1}'' targets.</entry>
        <entry key="mfmt2cfmt_unsupportedChar">Escape sequence must encode a character in the range 0 to 127.</entry>
        <entry key="mfmt2cfmt_invalidFormat" >Invalid format string.</entry>
        <entry key="mfmt2cfmt_dollarNotSupported">The conversion specification, ''{0}'', uses ''$'' as a variable identifier. This is not supported for code generation. Omit its use from the ''formatSpec'' parameter.</entry>
        <entry key="mfmt2cfmt_btNotSupported">The conversion specification, ''{0}'', uses subtype modifiers ''b'' and/or ''t'', which are not supported for code generation. Omit them from the ''formatSpec'' parameter.</entry>
        <entry key="NothingToRead">File has nothing left to read. To avoid this error, call 'feof' to check if you have reached the end of the file before using 'fgets' or 'fgetl'.</entry>
        <entry key="fgetslIllegalCharacter">Read illegal non-ASCII character with integer value {0}. For code generation, all characters must have value less than 128.</entry>
        <entry key="fopenFidInputNotSupported">FID input is not supported for code generation.</entry>
        <entry key="fopenMsgOutputNotSupported">MESSAGE output is not supported for code generation.</entry>
        <entry key="fopenAllNotSupported">fopen(''all'') is not supported for code generation.</entry>
        <entry key="fopenMfNotSupported">MACHINEFORMAT and ENCODING inputs are not supported for code generation.</entry>
        <entry key="FopenNoTextMode">Code generation does not support passing a 't' in the permission to fopen to open files in text mode.</entry>
        <entry key="FopenInvalidPerm">For code generation, the permission to fopen must be at most 3 characters with the second and third characters chosen from '+' and 'b' without repetition.</entry>
        <entry key="xprintfCharFmt" note="stringDatatypeUpdate">The ''formatSpec'' parameter provided to ''{0}'' is of type ''{1}''.  It must be a character vector.</entry>
        <entry key="xprintfConstFmt">The ''formatSpec'' parameter provided to ''{0}'' must be constant.</entry>
        <entry key="xprintfFixedSzFid">The ''fileID'' parameter provided to ''{0}'' is variable size. It must be fixed size.</entry>
        <entry key="xprintfFmtTypeMismatchChar">An input argument with type ''{1}'' is inconsistent with the conversion character ''{0}'' in the ''formatSpec''. For code generation, the type of this input argument must be ''char'' or ''string''.</entry>
        <entry key="xprintfFmtTypeMismatchFloat">An input argument with type ''{1}'' is inconsistent with the conversion character ''{0}'' in the ''formatSpec''. For code generation, the type of this input argument must be ''single'' or ''double''.</entry>
        <entry key="xprintfFmtTypeMismatchSigned">An input argument with type ''{1}'' is inconsistent with the conversion character ''{0}'' in the ''formatSpec''. For code generation, the type of this input argument must be ''int8'', ''int16'', ''int32'', or ''int64''.</entry>
        <entry key="xprintfFmtTypeMismatchUnsigned">An input argument with type ''{1}'' is inconsistent with the conversion character ''{0}'' in the ''formatSpec''. For code generation, the type of this input argument must be ''uint8'', ''uint16'', ''uint32'', or ''uint64''.</entry>
        <entry key="xprintfNumericStar">For code generation, ''*'' arguments to sprintf or fprintf must be fixed-size scalars or constants at code generation time.</entry>
        <entry key="xprintfScalarArg">For code generation, ''{0}'' arguments to sprintf or fprintf must be fixed-size scalars or constants at code generation time.</entry>
        <entry key="XprintfIntegerTypeTooLarge">For code generation, integer arguments corresponding to the conversion character ''%{0}'' must be representable in the target hardware.  The provided argument is {1,number,integer} bits while the largest integer in the specified hardware is {2,number,integer} bits.</entry>
        <entry key="sprintfErrmsg">The error message output is not supported for code generation.</entry>
        <entry key="fixedSzFid">The ''fileID'' parameter provided is variable size. It must be a fixed size scalar.</entry>
        <entry key="unrecognizedRelop" note="stringDatatypeUpdate">The relop name, ''{0}'' is not supported.  It must be one of the following: ''lt'', ''gt'', ''le'', ''ge'', ''eq'', ''ne''.</entry>
        <entry key="eml_i64relops_need64BitInt">Either ''a'' or ''b'' must be a uint64 or int64 with the other being a primitive numeric type.  But the types passed are a: {0}, b: {1}.</entry>
        <entry key="int64DoubleDivisionNotSupported">Dividing a ''{0}'' by a ''{1}'' is not supported for code generation.  Cast one of the operands so the types match prior to the division.</entry>
        <entry key="InputMustBeConstant">The {0} input must be a constant.</entry>
        <entry key="CodegenOnly">This function is only supported for code generation targets.</entry>
        <entry key="NotSupportedForCodegen">The input {0} is not supported for code generation.</entry>
        <entry key="randgIterLimitExceeded">RANDG reached rejection iteration limit.</entry>
        <entry key="mod_int64MixedDoubleNotSupported">The function ''{0}'' does not support inputs with the combined types: ''{1}'' and ''{2}''.  Cast one of the arguments so the types match prior to calling ''{3}''.</entry>
        <entry key="Int64NotSupported">This function does not support inputs with type ''uint64'' or ''int64''.  Cast the argument(s) to another integer type or a floating point type prior to the function call.</entry>
        <entry key="InputMustBeFixedSizeScalar">The input {0} must be a fixed-size scalar.</entry>
        <entry key="bitAndXorOrMustBeIntegers">At least one input must belong to an integer class for code generation.</entry>
        <entry key="SetOpUnsortedRealAWithComplexB">A must be sorted in complex ascending order when B is complex. Use sort(complex(A)), or use the ''stable'' option.</entry>
        <entry key="SetOpUnsortedRealBWithComplexA">B must be sorted in complex ascending order when A is complex. Use sort(complex(B)), or use the ''stable'' option.</entry>
        <entry key="SetOpUnsortedRowsRealAWithComplexB">A must be sorted in complex ascending order when B is complex. Use sortrows(complex(A)), or use the ''stable'' option.</entry>
        <entry key="SetOpUnsortedRowsRealBWithComplexA">B must be sorted in complex ascending order when A is complex. Use sortrows(complex(B)), or use the ''stable'' option.</entry>
        <entry key="PolyderNeedsVariableSizing">An output array has a leading zero and EnableVariableSizing is set to false. POLYDER requires variable-sizing to remove leading zeros.</entry>
        <entry key="InputsMustBeFloats">Inputs must be floats, namely single or double.</entry>
        <entry key="InputsMustBeFourColumnRealMatrices">Inputs must be real, numeric matrices with 4 columns.</entry>
        <entry key="FileReadBadFile">Could not open file {0}.</entry>
        <entry key="FreadMachineFormatNotSupported">For code generation, you cannot use the ''machineformat'' input argument.</entry>
        <entry key="FreadReadTruncated">For code generation, if ''sizeA'' is finite, FREAD must read the number of elements specified by ''sizeA''.  This call requested {0, number, integer} elements but {1, number, integer} were actually read.</entry>
        <entry key="FreadConstPrecision">For code generation the ''precision'' argument must be a constant.</entry>
        <entry key="FreadBitNUnsupported">For code generation, you cannot specify ''bitN'' or 'ubitN' in the precision.</entry>
        <entry key="FreadLongUnsupported">For code generation, you cannot use types ''long'', ''ulong'', or ''unsigned long'' in the precision parameter.</entry>
        <entry key="IntNbitsUnknownNbits">MATLAB integers must be 8, 16, 32, or 64 bits. You requested an integer with {0, number, integer} bits.</entry>
        <entry key="FreadCSizeMismatch">For code generation, when you specify a C type in the precision, the target and production hardware sizes for that type must match. Type {0} is {1, number, integer} bits on the target hardware, but {2, number, integer} bits on the production hardware.</entry>
        <entry key="FreadNonStandardInteger">For code generation, when you specify a C type in the precision, the hardware size of that type must match a built-in MATLAB integer. The specified size of {0, number, integer} does not match a built-in MATLAB integer.</entry>
        <entry key="FreadUseMalloc">For code generation, when sizeA is not constant or contains a non-finite value, FREAD requires dynamic memory allocation.</entry>
        <entry key="FreadNativeSrcType">For code generation, the source type for FREAD must map directly to a type on the target hardware. The class {1} does not map to a {0,number,integer}-bit C type.</entry>
        <entry key="FgetsTooBig">For code generation, the second fgets input must be set to either Inf or less than the maximum representable array size on the target hardware, intmax.</entry>
        <entry key="InputMustBeFixedSize">Input {0} must be fixed-size.</entry>
        <entry key="NoVarSizeInputs">Input {0} must have fixed size dimensions.</entry>
        <entry key="OptimsetPrintFieldUnsupported">Code generation does not support the zero-input zero-output syntax of OPTIMSET to list available fields.</entry>
        <entry key="OptimFunctionUnsupported">Code generation requires that the function specified in the OPTIMFUNCTION input must be supported for code generation.  The function ''{0}'' is not.</entry>
        <entry key="OptimsetgetFixedSizeFields">The specified value for the parameter ''{0}'' is variable sized.  Code generation requires that the fields of a struct passed to OPTIMSET or OPTIMGET have fixed sizes.</entry>
        <entry key="OptimgetConstName">Code generation requires the ''name'' argument to OPTIMGET to be a constant.  The value provided is not constant.</entry>
        <entry key="OptimNoProblemStruct">MATLAB Code Generation does not support a struct for the first input argument of {0}.</entry>
        <entry key="OptimfunFcnOrStr" note="stringDatatypeUpdate">For code generation the first argument to {0} must be a function handle or a function name.</entry>
        <entry key="OptimfunFixedSizeX">Second argument must be fixed-size.</entry>
        <entry key="OptimfunOptArg">Third argument must be an option struct or [].</entry>
        <entry key="OptimfunCheckFunNaNVal">The user function returned NaN when evaluated at {0};\n {1} cannot continue.</entry>
        <entry key="OptimfunCheckFunComplexVal">The user function returned a complex value when evaluated at {0};\n {1} cannot continue.</entry>
        <entry key="OptimfunConstStr" note="stringDatatypeUpdate">Code generation requires that the function name input be constant.</entry>
        <entry key="OptimfunRealX">For code generation, {0} requires that the starting point ''x0'' is real.</entry>
        <entry key="OptimFunScalarObjFcn">For code generation, {0} requires FUN to return a fixed-size scalar.  Consider assigning ''y(1)'' as the output of FUN to address this.</entry>
        <entry key="MustBeFiniteAndStrictlyIncreasing">X must be finite and strictly increasing.</entry>
        <entry key="NDIMSError">Expected ndims(Y)={0} but found ndims(Y)={1}. For code generation, ndims(Y) must not change.</entry>
        <entry key="NDIMSSizeConstantLength">For code generation, the value returned from method ''size'' in class ''{0}'' must have a constant length.</entry>
        <entry key="UnsupportedNaN">NaN values in Y are not supported for code generation.</entry>
        <entry key="InvalidD">D must be a fixed-size, numeric row vector with non-negative entries.</entry>
        <entry key="PPNumberMismatchCoeffs">The inputs are not consistent.</entry>
        <entry key="MKPPSizeMismatch">The sizes of the input arguments are not consistent.</entry>
        <entry key="InputStructNotPP">The input structure is not a valid PP struct. Use MKPP to create a valid PP struct.</entry>
        <entry key="PPDataMustBeNumeric">The pp.breaks and pp.coefs fields must be numeric.</entry>
        <entry key="PWCHSizeMismatch">The sizes of the input arguments are not consistent.</entry>
        <entry key="OrderOneRequiresColumnVector">To define a piecewise constant polynomial, make the second input coefs(:).</entry>
        <entry key="OrderDimMustBeFixed">The dimension of COEFS that determines the order must be fixed-size.</entry>
        <entry key="SizeCoefsAndDNotConsistent">With N-D input for COEFS, the third input, D, must be provided and must match the leading elements of size(COEFS).</entry>
        <entry key="PWCHInvalidX">First input, X, must be a floating-point vector.</entry>
        <entry key="MATLABPPNotSupported">PP forms constructed in MATLAB cannot be used directly by PPVAL for code generation. Use UNMKPP to extract the data and MKPP to create a MATLAB Coder compatible PP form.</entry>
        <entry key="InputMustBeNumeric">{0} must be numeric.</entry>
        <entry key="interp2_minrhs">INTERP2 for code generation requires at least 5 inputs.</entry>
        <entry key="interp3_minrhs">INTERP3 for code generation requires at least 7 inputs.</entry>
        <entry key="interp2_invalidXYClass">Inputs X, Y, Xq, and Yq must be ''double'' or ''single''.</entry>
        <entry key="interp3_invalidXYZClass">Inputs X, Y, Z, Xq, Yq, and Zq must be ''double'' or ''single''.</entry>
        <entry key="interp2_nonrealXY">Inputs X, Y, Xq, and Yq must be real.</entry>
        <entry key="interp3_nonrealXYZ">Inputs X, Y, Z, Xq, Yq, and Zq must be real.</entry>
        <entry key="interp2_sizeXIandYIMustMatch">Arguments Xq and Yq must be the same size.</entry>
        <entry key="interp3_sizeXIYIandZIMustMatch">Arguments Xq, Yq, and Zq must be the same size.</entry>
        <entry key="interp2_ZMustBeFloat">Input V must be a ''double'' or ''single''.</entry>
        <entry key="interp3_VMustBeFloat">Input V must be a ''double'' or ''single''.</entry>
        <entry key="interp2_extrapvalNotReal">The extrapolation value, extrapval, cannot be complex unless V is complex.</entry>
        <entry key="interp3_extrapvalNotReal">The extrapolation value, extrapval, cannot be complex unless V is complex.</entry>
        <entry key="interpn_extrapvalNotReal">The extrapolation value, extrapval, cannot be complex unless V is complex.</entry>
        <entry key="NonIncreasing">Grid values must be strictly increasing.</entry>
        <entry key="NotEnoughPoints">Interpolation requires at least two sample points in each dimension.</entry>
        <entry key="interp2_mixedTypeGrid">Grid coordinates must be of the same type, single or double.</entry>
        <entry key="interp3_mixedTypeGrid">Grid coordinates must be of the same type, single or double.</entry>
        <entry key="interp2_classXIandYIMustMatch">Inputs Xq and Yq must be both ''double'' or both ''single''.</entry>
        <entry key="interp3_classXIYIandZIMustMatch">Inputs Xq, Yq, and Zq must be all ''double'' or all ''single''.</entry>
        <entry key="interp2_unsupportedMethod" note="stringDatatypeUpdate">Interpolation method must be one of the following: ''cubic'', ''linear'', ''nearest'', or ''spline''.</entry>
        <entry key="interp3_unsupportedMethod" note="stringDatatypeUpdate">Interpolation method must be one of the following: ''cubic'', ''linear'', ''nearest'', or ''spline''.</entry>
        <entry key="interp3_gridToValuesSizeMismatch">The size of V must be consistent with the sizes of X, Y, and Z.</entry>
        <entry key="interp2_VMustBe2D">V must be a matrix.</entry>
        <entry key="interp3_VMustBe3D">V must be a 3-D array.</entry>
        <entry key="IsStrProp">Code generation does not support the 'ForceCellOutput' option for 'isstrprop'.</entry>
        <entry key="GridMustBeVectorsOrPlaid">Grid inputs must be vectors or the output of MESHGRID.</entry>
        <entry key="ExtrapvalNotNumeric">The extrapolation value must be numeric.</entry>
        <entry key="ExtrapvalRequired">An extrapolation value must be supplied when output type is not ''single'' or ''double''</entry>
        <entry key="CubicGridMustBeUniform">The grid data must be uniformly spaced for the ''cubic'' method. For non-uniform grids, use the ''spline'' method.</entry>
        <entry key="MethodMustBeConstant" note="stringDatatypeUpdate">The method input must be a constant character vector.</entry>
        <entry key="NMustBeANumericScalar">N must be a numeric scalar.</entry>
        <entry key="AmbiguousPartialMatch">Ambiguous property name ''{0}'' ({1}).</entry>
        <entry key="NonNegativeRequiresReal">The output data type must be real when enforcing non-negativity of solution components. Ensure that y0 is real and that the ode function always returns a real result.</entry>
        <entry key="MassMustBeConstant" note="stringDatatypeUpdate">The Mass option must be a constant character vector or a function handle.</entry>
        <entry key="RequiresNInputs">For code generation, {0} requires at least {1,number,integer} inputs. Options corresponding to fewer inputs are not supported.</entry>
        <entry key="RequiresNOutputs">For code generation, {0} requires at least {1,number,integer} outputs. Options corresponding to fewer outputs are not supported.</entry>
        <entry key="OdegetConstName">For code generation, the ''name'' argument to ODEGET must be a constant. The value provided is not constant.</entry>
        <entry key="OdeprintRequiresMATLAB">The ODEPRINT function is supported only for mex targets or when running in Simulink.</entry>
        <entry key="RequiresAllConstantInputs">All inputs must be constant.</entry>
        <entry key="DynamicMemoryNeeded">Event location requires dynamic memory allocation. Enable dynamic memory allocation or remove the event function.</entry>
        <entry key="InconsistentTypes">The tspan and y0 inputs and the output of the ode function must have the same type, all single or all double.</entry>
        <entry key="UnsupportedSolver">Solver name must be ''ode23'' or ''ode45''.</entry>
        <entry key="UnsupportedODEFunction" note="stringDatatypeUpdate">For code generation, the first input must be a function handle or a character vector.</entry>
        <entry key="TspanMustBeReal">The tspan input must be real.</entry>
        <entry key="RequiresVariableSizing">Variable sizing must be enabled to generate code for {0}.</entry>
        <entry key="ODEInconsistentTypes">The tspan and y0 inputs and the output of the ode function must have the same type, all single or all double.</entry>
        <entry key="FOMustReturnCol">The output of the ODE function must be a column vector.</entry>
        <entry key="SizeIC">The size of y0 and the size of the output of the ODE function must match.</entry>
        <entry key="SizeAbsTol">AbsTol must be a scalar or a vector of length {0,number,integer}.</entry>
        <entry key="EventsRequireDynamicMemoryAllocation">To use an event function with {0}, you must enable variable sizing and dynamic memory allocation.</entry>
        <entry key="VarsizeTspanHasLengthTwo">The tspan input is variable-size and became a 2-element array at run time. Results do not match MATLAB in this case.</entry>
        <entry key="NoPrintStats">Printing of output statistics is not supported for code generation.</entry>
        <entry key="ODEOptionMustBeConstant">Option {0} must be a constant during code generation.</entry> 
        <entry key="ODEJacobianMustBeMatrixOrFunction">Jacobian must be a matrix or function handle.</entry>      
        <entry key="CellArraysNotSupported">For code generation, cell array inputs to ''{0}'' are not supported.</entry>
        <entry key="LeftEigenvectorsNotSupported">Left eigenvectors are not supported for code generation.</entry>
        <entry key="EigCholUnsupported">The ''chol'' option is not supported for code generation.</entry>
        <entry key="EigNobalanceNotSupported">The ''nobalance'' option is not supported for code generation.</entry>
        <entry key="UnsupportedSpecialEmpty">If the input is a variable-size array, it cannot be 0-by-0 at run time.</entry>
        <entry key="UnsupportedNativeIntegerMean">For code generation, the ''native'' flag is not supported for integer types.</entry>
        <entry key="UnknownSumProdMeanFlag" note="stringDatatypeUpdate">This input must be one of the following: ''double'',''native'', or ''default''.</entry>
        <entry key="TrailingStringInputMustBeConstant" >Trailing string input must be constant.</entry>
        <entry key="UnsupportedCharWithNative">The ''native'' flag is not supported with char inputs.</entry>
        <entry key="InvalidOutputSel">All indices specified in odeset(''OutputSel'',idx) must be integers in the range 1 &lt;= idx &lt;= neq.</entry>
        <entry key="FieldNamesConstStringOpt" note="stringDatatypeUpdate">The option argument for FIELDNAMES must be a constant string or a character vector.</entry>
        <entry key="FieldNamesStructOnly">Code generation requires that the argument to FIELDNAMES be a structure.</entry>
        <entry key="HalfWithUnsupportedType">For the function ''{0}'', if one of the arguments is of half-precision data type, the other argument must be half, double, or single.</entry>
        <entry key="HeterogeneousCellConstSize">Code generation requires that the size inputs to ''{0}'' are constant when the input is a cell array whose elements do not all have the same type.</entry>
        <entry key="ReshapeEmptyCellConst">For code generation, when the input to ''{0}'' is an empty cell array, the size inputs must be constant or [].</entry>
        <entry key="NullAssignHomogeneousCell">For code generation, you cannot delete elements of a cell array whose elements do not all have the same type.</entry>
        <entry key="NullAssignNDCell">For code generation, you cannot delete elements of a cell array that has more than 2 dimensions and you cannot use N-D indexing to delete elements of a cell array.</entry>
        <entry key="NullAssignSparse">For code generation, assignment of sparse matrix elements to an empty matrix is not supported. To delete elements, assign the value zero.</entry>
        <entry key="testErrorId" translate="false" note="TranslateFalseBatch;">{0}: {1,number,integer}: {2,number,integer}: {3,number,integer}: {4,number,integer}: {5,number,integer}: {6,number,integer}</entry>
        <entry key="pcaInvalidAlgorithm">''{0}'' is not a valid value for the ''Algorithm'' argument.  The value must be ''svd'', ''eig'', or ''als''.</entry>
        <entry key="pcaInvalidRows">''{0}'' is not a valid value for the ''Rows'' argument.  The value must be ''complete'', ''pairwise'', or ''all''.</entry>
        <entry key="pcaWeightsMustBeReal">Weights and VariableWeights must be real.</entry>
        <entry key="pcaDisplayNotSupported">For code generation, the Display option must be set to ''off''.</entry>
        <entry key="statgetConstName">For code generation, the ''Name'' input must be constant.</entry>
        <entry key="STATSFUNCTIONMustBeConstant" note="stringDatatypeUpdate">The STATSFUNCTION argument must be a constant function handle or a constant string or a character vector.</entry>
        <entry key="Struct2cellHomogeneousVarsize">For code generation, when the input to STRUCT2CELL is a variable-size array, all of its fields must have the same type.</entry>
        <entry key="Struct2cellHeterogeneousLimit">For code generation, when the input struct array to STRUCT2CELL has fields with different types, the resulting cell array cannot contain more than {0,number,integer} elements. This call tries to create a cell array with {1,number,integer} elements.</entry>
        <entry key="CoderdataNoEdit">Opening coderdata files using the edit command is not supported. Use coder.read to read coderdata files and coder.write to write them.</entry>
        <entry key="CoderReadBigEndian">coder.read is only supported for little endian targets. The specified HardwareImplementation is big endian.</entry>
        <entry key="CoderReadBadTypeHeader">The type header contains a {0}. Reading data of this type using coder.read is not supported.</entry>
        <entry key="CoderReadCouldNotOpen">Unable to open coderdata file ''{0}''.</entry>
        <entry key="CoderReadCouldNotOpenTypeHeader">Unable to open file ''{0}''. This file determines the output type of a coder.read function call at compile-time.</entry>
        <entry key="CoderReadProblemReading">Encountered an issue while reading from coderdata file.</entry>
        <entry key="CoderReadUnexpectedValue">Unexpected value in coderdata file.</entry>
        <entry key="CoderReadWrongHeader">Coderdata file did not contain the expected metadata, might be corrupted, or is not a coderdata file. Use ''coder.write'' to create coderdata files.</entry>
        <entry key="CoderReadUnexpectedComplex">.coderdata file contained a complex value where a real one was expected. A complex type header must be used to read complex values</entry>
        <entry key="CoderReadWrongVersion">.coderdata file is not compatible with this release of MATLAB Coder. Resave the data in this version of MATLAB to generate a compatible file.</entry>
        <entry key="CoderReadTypeOnly">Unable to read the given .coderdata file because it contains only a type header and does not contain any data. When you created this file by using coder.write, you probably set the TypeHeaderOnly argument to true.</entry>
        <entry key="CoderReadMATFile">''coder.read'' only reads .coderdata files. To convert your .mat file to .coderdata format, run this command in MATLAB: coder.write(''myFile.coderdata'', load(''{0}''))</entry>
        <entry key="CoderReadWrongType">coder.read expects .coderdata file to have a ''{1}'', but found a ''{0}'' instead. Use a different type header to read this file. To verify that a given .coderdata file is compatible with a type header, specify the TypeHeader Name-Value pair when you write the file.</entry>
        <entry key="CoderReadWrongNdims">The .coderdata file contains a matrix with {0} dimensions, but the expected number of dimensions is {1}.</entry>
        <entry key ="FileSpecFilepathType">All file name inputs to coder.FileSpec must be character row vectors or string scalars</entry>
        <entry key="FileSpecMerge">Unable to merge types in provided .coderdata files.</entry>
        <entry key="FileSpecType">TypeInfo property must be a coder.Type</entry>
        <entry key="CoderWriteMustBeTypeIsh">TypeHeader input arguments must be coder.Type objects</entry>
        <entry key="CoderWriteDiscardingConstant">The TypeHeader input argument contains a coder.Constant object. If the associated constant value is v, coder.write replaces this constant type with the non-constant type returned by coder.typeof(v) in the type header of the generated .coderdata file.</entry>
        <entry key="CoderWriteDiscardingStructInfo">The TypeHeader input argument contains a coder.StructType object with information that is ignored by the coder.read function. When reading structure data from a .coderdata file, the coder.read function only uses the field names and field types in the coder.StructType object in the type header. coder.read ignores the StructName, Extern, Alignment, and HeaderFile properties.</entry>
        <entry key="CoderWriteEnum">The enumeration class ''{0}'' is not supported for coder.write. All enumerations must inherit from one of int8, uint8, int16, uint16, or int32.</entry>
        <entry key="CoderWriteNonASCII">.coderdata files cannot contain non-ASCII characters. The following non-ASCII characters were detected: ''{0}''. They were found in the string: ''{1}''.</entry>
        <entry key="CoderWriteObject">Objects are not supported in coder.write.</entry>
        <entry key="CoderWriteExtension">File name must end in '.coderdata' or omit file extension.</entry>
        <entry key="CoderWriteNotify">Wrote file ''{0}''. You can read this file with ''coder.read''.</entry>
        <entry key="CoderWriteFileType">filename input to coder.write must be char row vector or string scalar.</entry>
        <entry key="CoderWriteWrongHeader">The type specified by ''TypeHeader'' is not consistent with the data to be written. Adjust the ''TypeHeader'' argument to make it consistent with the data, or use ''TypeHeaderOnly=true'' to ignore the data when creating the file.</entry>
        <entry key="CoderWriteNoName">File name cannot be empty.</entry>
        <entry key="CoderReadFname">First input to coder.read must be a character row vector or string scalar.</entry>
        <entry key="CoderReadNotConst">When specifying only a file name to coder.read, the file name must be constant. To read from a non-constant file name, use the ''TypeHeaderFrom'' name-value pair.</entry>
        <entry key="CoderReadTypeHeader">Type header file name must be a constant character row vector or string scalar.</entry>
        <entry key="RepmatCellHeterogeneousLimit">For code generation, if input to REPMAT is a heterogeneous cell array, the resulting cell array cannot contain more than {0,number,integer} elements. This call tries to create a cell array with {1,number,integer} elements.</entry>
        <entry key="StructConversionDimensionMismatchArray">Array dimensions of input ''{0,number,integer}'' must match those of input ''{1,number,integer}'', or be scalar.</entry>
        <entry key="StrjoinRowVectorString" note="stringDatatypeUpdate">For code generation, all non-empty character vectors passed to STRJOIN must be row vectors. Element {0,number,integer} of argument {1,number,integer} is not a row vector.</entry>
        <entry key="strjust_inputMustBe2D">Input must be 2D.</entry>
        <entry key="LAPACKNoStandaloneReplacement">The function ''{0}'' has no standalone replacement. Conditionalize this call using coder.internal.use_lapack.</entry>
        <entry key="LAPACKCallErrorInfo">The LAPACK call to ''{0}'' failed with info {1,number,integer}. Please contact MathWorks Technical Support if you can reproduce this error.</entry>
        <entry key="LAPACKOnlyComplex">Array inputs to ''{0}'' must be complex.</entry>
        <entry key="LAPACKOnlyReal">Array inputs to ''{0}'' must be real.</entry>
        <entry key="LAPACKXunormqrArgTypes">Inputs to ''{0}'' must have the same complexness except for the case that Q is real and C is complex.</entry>
        <entry key="StrcmpCharMatrix" note="stringDatatypeUpdate">For code generation, when one input to {0} is a cell array and the other is a character array, the first dimension of the character array must have a fixed length of 1. To compare multiple character vectors, pass a cell array of character row vectors instead of a character array.</entry>
        <entry key="UnsupBesNegNonIntNu">For code generation, negative NU inputs to {0} must be integer valued.</entry>
        <entry key="invalidCovNormOption">For code generation, a fixed-size, scalar value for the second input is always interpreted as a normalization option. It must be 0 or 1.</entry>
        <entry key="FlagMustBeConst" note="stringDatatypeUpdate">Flag inputs must be constant character vectors.</entry>
        <entry key="InterpnUnsupportedMethod">For code generation, INTERPN supports only the ''linear'', ''nearest'', ''spline'' and ''cubic'' methods.</entry>
        <entry key="gInterpNdUnsupportedMethod">For code generation, griddedInterpolant supports the ''makima'' method only for 1-dimensional interpolation.</entry>
        <entry key="QueryPointsMustBeReal">Query points must be real.</entry>
        <entry key="GridPointsMustBeReal">Grid points must be real.</entry>
        <entry key="OutOfTargetRange">Value is not within the supported target type range {0,number,integer}-{1,number,integer}.</entry>
        <entry key="OutOfTargetRangeNoBounds">Value is not within the supported target type range.</entry>
        <entry key="StringClassNotSupported">String class is not supported for code generation.</entry>
        <entry key="SparseNotSupported">For code generation, sparse matrices not supported for ''{0}''.</entry>
        <entry key="ValidateattributesBadClassList">Classes must be character vectors, strings, or cell arrays of character vectors.</entry>
        <entry key="ValidateattributesNeedConstClasses">Classes must be a cell array of constant character vectors.</entry>
        <entry key="ValidateattributesNeedFunctionName">For code generation, the fourth argument must be the function name specified as a character vector.</entry>
        <entry key="ValidateattributesNeedConstFunctionName">The function name must be a constant.</entry>
        <entry key="ValidateattributesNeedConstVariableName">The variable name must be a constant.</entry>
        <entry key="ValidateattributesNeedConstAttributes">Attributes must be constants.</entry>
        <entry key="ValidateattributesBadVariableName">Fifth argument must be the input variable name specified as a character vector.</entry>
        <entry key="ValidateattributesNeedConstArgumentPosition">Position of input argument must be a constant.</entry>

        <entry key="Validateattributesexpected2D">Expected {0} to be two-dimensional.</entry>
        <entry key="Validateattributesexpected3D">Expected {0} to be three-dimensional.</entry>
        <entry key="ValidateattributesexpectedSquare">Expected {0} to be a square matrix.</entry>
        <entry key="ValidateattributesexpectedDiag">Expected {0} to be a diagonal matrix.</entry>
        <entry key="ValidateattributesexpectedScalar">Expected {0} to be a scalar.</entry>
        <entry key="ValidateattributesexpectedScalartext">Expected {0} to be a string scalar or character vector.</entry>
        <entry key="ValidateattributesexpectedVector">Expected {0} to be a vector.</entry>
        <entry key="ValidateattributesexpectedRow">Expected {0} to be a row vector.</entry>
        <entry key="ValidateattributesexpectedColumn">Expected {0} to be a column vector.</entry>
        <entry key="ValidateattributesexpectedNonempty">Expected {0} to be nonempty.</entry>
        <entry key="ValidateattributesexpectedNonsparse">Expected {0} to be nonsparse.</entry>
        <entry key="ValidateattributesexpectedNonZero">Expected {0} to be nonzero.</entry>
        <entry key="ValidateattributesexpectedBinary">Expected {0} to be binary.</entry>
        <entry key="ValidateattributesexpectedInteger">Expected {0} to be integer-valued.</entry>
        <entry key="ValidateattributesexpectedReal">Expected {0} to be real.</entry>
        <entry key="ValidateattributesexpectedIncreasing">Expected {0} to be increasing valued.</entry>
        <entry key="ValidateattributesexpectedNonIncreasing">Expected {0} to be non-increasing valued.</entry>
        <entry key="ValidateattributesexpectedDecreasing">Expected {0} to be decreasing valued.</entry>
        <entry key="ValidateattributesexpectedNonDecreasing">Expected {0} to be non-decreasing valued.</entry>
        <entry key="ValidateattributesexpectedOdd">Expected {0} to be odd.</entry>
        <entry key="ValidateattributesexpectedEven">Expected {0} to be even.</entry>
        <entry key="ValidateattributesexpectedPositive">Expected {0} to be positive.</entry>
        <entry key="ValidateattributesexpectedNonnegative">Expected {0} to be nonnegative.</entry>
        <entry key="ValidateattributesexpectedFinite">Expected {0} to be finite.</entry>
        <entry key="ValidateattributesexpectedNonNaN">Expected {0} to be non-NaN.</entry>

        <entry key="ValidateattributesincorrectSize">{0} does not have the expected size.</entry>
        <entry key="ValidateattributesBadNumel">Argument numel must be followed by a nonnegative real scalar integer.</entry>
        <entry key="ValidateattributesincorrectNumel">Expected {0} to be an array with number of elements equal to {1, number, integer}.</entry>
        <entry key="ValidateattributesBadNrows">Argument nrows must be followed by a nonnegative real scalar integer.</entry>
        <entry key="ValidateattributesincorrectNumrows">Expected {0} to be an array with number of rows equal to {1, number, integer}.</entry>
        <entry key="ValidateattributesBadNcols">Argument ncols must be followed by a nonnegative real scalar integer.</entry>
        <entry key="ValidateattributesincorrectNumcols">Expected {0} to be an array with number of columns equal to {1, number, integer}.</entry>
        <entry key="ValidateattributesBadNDims">Argument ''ndims'' must be followed by a real integer value greater than 1.</entry>
        <entry key="ValidateattributesincorrectNDims">Expected {0} to be an array with number of dimensions equal to {1, number, integer}.</entry>



        <entry key="ValidatestringInvalidStringList">VALID_STRINGS must be a cell array of strings.</entry>
        <entry key="ValidatestringNeedConstStrings">VALID_STRINGS must be a cell array of constant strings.</entry>
        <entry key="ValidatestringNeedFunctionName">For code generation the 3rd input argument must be the function name string.</entry>
        <entry key="ValidatestringNeedConstFunctionName">The function name must be a constant.</entry>
        <entry key="ValidatestringBadFunctionName">The function name must be a character vector.</entry>
        <entry key="ValidatestringNeedConstVariableName">VARIABLE_NAME must be a constant.</entry>
        <entry key="ValidatestringBadVariableName">VARIABLE_NAME must be a string or character vector.</entry>
        <entry key="ValidatestringNeedConstArgumentPosition">ARGUMENT_POSITION must be a constant.</entry>
        <entry key="ValidatestringBadArgumentPosition">ARGUMENT_POSITION must be a positive integer.</entry>
        <entry key="ValidatestringAmbiguousStringChoice">Expected {0} to match one of these strings: {1}. The input{2} matched more than one valid string.</entry>
        <entry key="ValidatestringUnrecognizedStringChoice">Expected {0} to match one of these strings: {1}. The input{2} did not match any of the valid strings.</entry>
        <entry key="ValidatestringUnrecogonizedStringChoiceExpectedChar">Expected {0} to match one of these strings: {1}. The input {2} did not match any of the valid strings. Expected input to be one of these types: char, string. Instead its type was {3}.</entry>
        <entry key="ValidatestringUnrecognizedStringChoiceExpectedRow">Expected {0} to match one of these strings: {1}. The input {2} did not match any of the valid strings. Expected input to be a row vector.</entry>


        <entry key="RepelemUnsupportedND">For code generation, the element array must be 2-dimensional.</entry>
        <entry key="TooManyFilesOpen">For code generation, maximum number of open files is {0, number, integer}.</entry>
        <entry key="SparseNumelTooBig">Number of elements exceeds maximum representable value.</entry>
        <entry key="SparseNzmaxTooSmall">The number of nonzeros must be at least as large as the number of elements specified by the first 3 arguments to sparse.</entry>
        <entry key="SparseNeedsMalloc">Dynamic memory allocation must be enabled in order to create a sparse matrix.</entry>
        <entry key="SparseC99">TargetLangStandard is ''{0}''. For code generation, sparse matrix factorization functions and mldivide require C99 or later. The generated code may not compile for some sparse inputs.</entry>
        <entry key="SparseDoubleBackslash">For code generation, inputs to backslash for sparse matrices must be doubles.</entry>
        <entry key="SparseCholOption">For code generation, the only chol syntax options supported for sparse matrices are 'upper' and 'lower'.</entry>
        <entry key="SparseCholSyntax">For code generation, 'chol' on sparse matrices supports only one output argument and does not allow the 'vector' option.</entry>
        <entry key="scalarSizeDims">Dimension argument ''{0}'' is not scalar. When providing multiple dimensions as separate arguments to size, all these arguments must be scalars.</entry>
        <entry key="StringUnsupportedType">For code generation, the input argument must be a string scalar, a character row vector, or a cell array containing a single character row vector.</entry>
        <entry key="StringMustBeRowVector">For code generation, the input character array must be a row vector.</entry>
        <entry key="StringMustBeRowVectorInCell">For code generation, the character array within the input cell array must be a row vector.</entry>
        <entry key="StringMustBeScalarCellArray">For code generation, the input cell array must contain a single character row vector.</entry>
        <entry key="StringUnrecognizedParameterName">Parameter name must be ''{0}''.</entry>
        <entry key="StringParameterNameMustBeRightType">Parameter name must be a string scalar or character vector.</entry>
        <entry key="StringParameterMustHaveAssociatedValue">Incorrect number of input arguments. Each parameter name must be followed by a corresponding value.</entry>
        <entry key="StringValueArgMustBeScalar">''{0}'' value must be a logical scalar.</entry>
        <entry key="StringValueArgMustBeChar">''{0}'' value must be ''{1}'' or ''{2}''.</entry>
        <entry key="StringIndexMustBePositiveInteger">Numeric position must be a positive integer scalar.</entry>
        <entry key="StringIndexMustNotExceedLength">Numeric position exceeds length of input string.</entry>
        <entry key="StringOptionMustBeOneOf">Option must be ''left'', ''right'', or ''both'', or it must be exactly one character.</entry>
        <entry key="StringOptionMustBeOneOfSideOnly">Option must be ''left'', ''right'', or ''both''.</entry>
        <entry key="StringStripCharOrString">Character to strip must be a string scalar or character vector.</entry>
        <entry key="StringStripCharacterSize">Character to strip be exactly one character.</entry>
        <entry key="StringStartPositionAfterEndPosition">Numeric start position must come before numeric end position.</entry>
        <entry key="SscanfTwoOutputs">Too many output arguments. For code generation, limit sscanf outputs to the formatted array and the number of elements successfully read into that array. </entry>
        <entry key="SscanfInvalidInput">First argument must be a text scalar.</entry>
        <entry key="TooManyElementsToIndex">With the current indexing class, the maximum number of elements in any array is limited to {0,number,integer}.</entry>
        <entry key="EnumMustBeScalar">For code generation, enumeration inputs to ''{0}'' must be compile-time scalars.</entry>
        <entry key="MustBeCharOrString">Input number {0} must be a string scalar, character vector, or cell array with one character vector.</entry>
        <entry key="MustBeCharCellArrayOrString">Input number {0} must be a string scalar, character vector, or cell array of character vectors.</entry>
        <entry key="StringScalarsOnly">For code generation, {0} inputs to ''{1}'' must be compile-time scalars.</entry>
        <entry key="SprintfCallFailed">Call to C sprintf failed with status {0,number,integer}.</entry>
        <entry key="StringNumericIntegerInf">For code generation, numeric values being converted to string arrays must have an integer value or be infinity.</entry>
        <entry key="StringNumericNoNaN">For code generation, numeric values being converted to string arrays must be non-NaN.</entry>
        <entry key="StringNoMissing">Code generation does not support missing values in strings.</entry>
        <entry key="StringReturnMissing">Function {0} attempted to return a missing string value, which is not supported by code generation.</entry>
        <entry key="SamplePointsNotSupported">Code generation does not support ''SamplePoints'' in {0}.</entry>
        <entry key="SamplePointsMustBeFloat">For code generation, ''SamplePoints'' must be double or single.</entry>
        <entry key="AmbiguousName">Expected name to match one of these values:\n\n{1}\n\nThe input, ''{0}'', matched more than one valid value.</entry>
        <entry key="InvalidName">Expected name to match one of these values:\n\n{1}\n\nThe input, ''{0}'', did not match any of the valid values.</entry>
        <entry key="BadIgnoreNulls">IgnoreNulls value must be true or false.</entry>
        <entry key="BadSupportOverrides">SupportOverrides value must be true or false.</entry>
        <entry key="InvalidMixedOptions">The chosen options are incompatible.</entry>
        <entry key="InvalidSparseDimensions">Array argument to the ''sparse'' function must be 2-dimensional.</entry>
        <entry key="PWSHostTargetIntegerSize">The data provided with format specifier ''%{0}'' is treated as the C/C++ type ''{1}'' on the target hardware and as the type ''{2}'' on the host hardware in calls to printf, fprintf, and so on. When the portable word sizes feature is enabled, the data must be interpreted similarly on both the host and target hardware. Cast the input to a floating point type or to a MATLAB integer type that is interpreted the same on both the target and host hardware. The integer types ''char'', ''short'', ''int'', and their unsigned versions are all interpreted as ''int''. The types ''long'', ''long long'', and their unsigned versions are treated distinctly.</entry>
        <entry key="InvalidDimInput">The dimension input cannot exceed the number of dimensions of the input data.</entry>
        <entry key="SortedBufferFull">The buffer is full. The value was not inserted.</entry>
        <entry key="RandLikeConst">For code generation, the ''like'' argument must be a constant character vector or string scalar.</entry>
        <entry key="FFTWPlanMethodMustBeConst">fftw planning method must be a constant.</entry>
        <entry key="FFTWLargeRankWithoutMalloc">Computing FFTs for input arrays with dimensionality greater than {0,number,integer} (fft/ifft), {1,number,integer} (fft2/ifft2) or {2,number,integer} (fftn/ifftn) by using FFTW is not supported when dynamic memory allocation is disabled. Enable dynamic memory allocation before you generate code for FFT functions that operate on input arrays with high dimensionality.</entry>
        <entry key="NarginNargoutMismatch">The number of output arguments must match the number of input arguments.</entry>
        <entry key="DataVariablesNotSupported">Code generation does not support the DataVariables input.</entry>
        <entry key="OptionStringsMustBeConstant">String scalar and character vector inputs must be constant.</entry>
        <entry key="mustBeMember">Value must be a member of the specified set.</entry>
        <entry key="SparseConcatenation2D">Concatenating a sparse matrix with an array having more than two dimensions is not supported.</entry>
        <entry key="ConcatenationDimensionMismatch">Dimension {0,number,integer} of input matrix {1,number,integer} to concatenation does not match the corresponding size, {2,number,integer}, of preceding operand(s).</entry>
        <entry key="SparseConcatenationUnsupportedType">Sparse matrices of type {0} are not supported.</entry>
        <entry key="SparseSanityCheckPropError">Internal error: Sparse matrix property ''{0}'' must be {1}.</entry>
        <entry key="SparseSanityCheckZeros">Detected 0 in data vector at index {0} of {1}(=nzmax), 0's are not allowed after index nnz ({2}).</entry>
        <entry key="StackPopEmpty">Cannot pop from an empty stack.</entry>
        <entry key="StackPeekEmpty">Cannot peek into an empty stack.</entry>
        <entry key="StackPushLimit">Cannot push onto a fixed-size stack which is at capacity.</entry>
        <entry key="SparseConstructor2D">Inputs to the sparse constructor must be 2-dimensional.</entry>
        <entry key="SparseNot">Unable to represent result of ''~'' because it contains too many nonzero elements.</entry>
        <entry key="SparseNegativeSize">Sparse matrix sizes must be non-negative integers.</entry>
        <entry key="SparseMaxSize">For code generation, sparse matrix sizes must be less than intmax(''int32'') and the maximum value of ''int'' specified in the target hardware: {0,number,integer}.</entry>
        <entry key="ShapeParameterMustBeConstant">Shape argument must be constant.</entry>
        <entry key="SparseAssertTrailing">Only the condition argument to the ''assert'' function can be sparse.</entry>
        <entry key="SparseColonOverflow">Unable to perform linear indexing operation. Resulting matrix exceeds maximum representable size.</entry>
        <entry key="SparseFuncAlmostFull">The results of this operation might exceed the maximum representable array size.</entry>
        <entry key="SparseTooBig">Resulting sparse matrix size exceeds the maximum number of columns, intmax.</entry>
        <entry key="SparseCatTooBig">Result of concatenation exceeds the maximum representable number of {0}, intmax.</entry>
        <entry key="SparseLogicalIndexingNotSupported">Code generation does not support indexing into sparse matrices with logical arrays. Consider converting logicals to numeric using FIND.</entry>
        <entry key="TestMsgWithPercent" translate="false">This is just a test message that contains an fprintf format specifier: %f to verify that we don't format the text passed to it.</entry>
        <entry key="FunctionDoesNotSupportDatatype">The function {0} does not support {1} inputs for code generation.</entry>
        <entry key="MinMaxFullDim">Code generation does not support sparse matrix inputs for the DIM argument to ''{0}''.</entry>
        <entry key="RankDefVarSizeRequired">Rank-deficient input detected. Enable variable-sizing to solve this problem.</entry>
        <entry key="Num2CellDim">Code generation does not support the ''dim'' argument to num2cell.</entry>
        <entry key="Str2NumNotSupported">Code generation does not support STR2NUM. Use STR2DOUBLE instead.</entry>
        <entry key="ClearNoEffect">''clear'' is ignored during code generation.</entry>
        <entry key="CovAmbiguousMLEArg">Unable to determine whether the second input is Y data or a normalization input.</entry>
        <entry key="SparseOptionMustBeConstant">Sixth input, ISSPARSE, must be a constant.</entry>
        <entry key="ArrayfunUnequalSize">Previous inputs had size {0,number,integer} in dimension {1,number,integer}. Input {2,number,integer} has size {3,number,integer}.</entry>
        <entry key="UniformOutputMustBeTrue">For code generation, UniformOutput must be true.</entry>
        <entry key="FullDims">For code generation, the dimension argument must be full.</entry>
        <entry key="DimMustBeConstant">For code generation, the dimension argument must be constant.</entry>
        <entry key="NotAScalarOutput">For code generation, the function supplied to arrayfun must return fixed-size scalar outputs when the inputs to it are fixed-size scalars. Output {0,number,integer} does not meet this requirement.</entry>
        <entry key="QRUpdateChangesComplexity">For code generation, both Q and R inputs to qrupdate must be complex if either of the update vectors is complex.</entry>
        <entry key="QRUpdateChangesClass">For code generation, both Q and R inputs to qrupdate must be single if either of the update vectors is single.</entry>
        <entry key="QRUpdateRequiresSameClass">For code generation, the Q and R inputs to qrupdate must belong to the same class, both single or both double.</entry>
        <entry key="QRUpdateRequiresSameComplexity">For code generation, the Q and R inputs to qrupdate must be both real or both complex.</entry>
        <entry key="InputsMustBe2D">Inputs must be 2-D.</entry>
        <entry key="InvalidTolInput">The tol input must be a nonnegative floating-point scalar.</entry>
        <entry key="InvalidColumnSortingVector">Column sorting input must be a vector.</entry>
        <entry key="InputMustBe2DFloat">Input {0} must be a single or double matrix.</entry>
        <entry key="FillValueRequired">For code generation, the fillval input to accumarray is required if ''fun'' returns a cell array.</entry>
        <entry key="InconsistentCellArrays">For code generation, the output of fun and the fillval input must be consistent types.</entry>
        <entry key="PausePARFOR">For MEX code generation or simulation, the PAUSE function is not supported inside parfor loops.</entry>
        <entry key="CoderTimeCallFailed">Call to ''{0}'' failed with return value {1,number,integer}.</entry>
        <entry key="CellInputNotSupported">Cell array inputs to ''{0}'' are not supported for code generation.</entry>
        <entry key="SizeSubs2MustBeConstant">For code generation, size(SUBS,2) must be constant.</entry>
        <entry key="SizeSZMustBeConstant">For code generation, the SZ input must be a fixed-size row vector.</entry>
        <entry key="CoderInternalRandstreamNoGlobalStream">Code generation does not support setting or getting the global RandStream.</entry>
        <entry key="TocInputType">For code generation, toc does not support uint64 inputs. Pass the output of a prior call to tic as the input to toc.</entry>
        <entry key="TypeCastDataTypeMustBeConstant">For code generation, the datatype input must be a constant.</entry>
        <entry key="SVDParametersMustBeConstant">Job parameters to internal SVD functions must be constant.</entry>
        <entry key="BuildConfigCacheNoConfig">The current BuildConfig has not been set.</entry>
        <entry key="BuildConfigCacheInconsitentConfig">Attempting to update the BuildConfig cache with an inconsistent BuildConfig.</entry>
        <entry key="DimCannotBeHalf">For code generation, the DIM argument cannot be half.</entry>
        <entry key="XzgetrsUnimplemented">The call site of the LAPACK routine xGETRS requires unimplemented functionality of the reference implementation. It currently only supports ia0=1, lda=size(A,1), ib0=1, and ldb=size(B,1).</entry>
        <entry key="FunctionNotSupportedForStandalone">Function ''{0}'' not supported for standalone code generation.</entry>
        <entry key="IschangeVarSizeNeeded">When the method is ''linear'', ischange requires variable-size support to compute the second and third outputs.</entry>
        <entry key="IschangeTableNotSupported">For code generation, table inputs are not supported.</entry>
        <entry key="ListCannotBeExpanded">The new element cannot be added because the list is statically-sized and is full.</entry>
        <entry key="FixedCapPropertyMustBeConstant">If it is supplied, the FixedCapacity value must be constant, either true or false.</entry>
        <entry key="FixedCapListRequiresInitCap">Initial capacity must be provided to construct a fixed-capacity list object.</entry>
        <entry key="DataVarsMustBeConstant">For code generation, the value associated with ''DataVariables'' must be constant.</entry>
        <entry key="TablesNotSupported">For code generation, table inputs to ''{0}'' are not supported.</entry>
        <entry key="SupportPackageNotInstalledCRL">''{0}'' is not installed. Code replacement is disabled for generated code.</entry>
        <entry key="ConvhullUnsupportedDim">For code generation, convhull supports only 2D inputs.</entry>
        <entry key="MustBeSameClass">{0} and {1} must belong to the same class.</entry>
        <entry key="IfComplexBThenComplexA">If {1} is complex, then {0} must also be complex.</entry>
        <entry key="MustBeUpperTriangular">{0} must be upper triangular.</entry>
        <entry key="EigOptionRequiresLAPACK">Using the option ''{0}'' in standalone code generation requires LAPACK library to be configured. Specify LAPACK Callback class.</entry>
        <entry key="LeftEigVecRequiresLAPACK">Computation of left eigenvectors in standalone code generation requires LAPACK library to be configured. Specify LAPACK Callback class. </entry>
        <entry key="PcgInvalidInput">Argument must be a double precision matrix or a function handle.</entry>
        <entry key="PcgRHSInvalidType">Right hand side must be a non-sparse double precision column vector.</entry>
        <entry key="PcgInitGuessInvalidType">Initial guess must be a non-sparse double precision column vector.</entry>
        <entry key="PcgNonSparsePreconditioner">Preconditioner matrices must be non-sparse.</entry>
        <entry key="PcgVarSizeInputEmpty">A variable sized input to pcg should not become empty at runtime.</entry>
        <entry key="PcgInvalidTolerance">Input tolerance must be a real scalar.</entry>
        <entry key="PcgInvalidMaxit">Input maxit must be a real scalar.</entry>
        <entry key="MustNotBeNaN">For code generation, {0} must not be NaN.</entry>
        <entry key="BoundedStr2FuncUnexpectedInput">Function name ''{0}'' is not in the list of supported functions.</entry>
        <entry key="BoundedStr2FuncNamesNotCellString">Second argument (function names) must be a cell array of character vectors.</entry>
        <entry key="BoundedStr2FuncNamesNotConstant">Second argument (function names) must be constant.</entry>
        <entry key="ParameterSuppliedTwice">The parameter ''{0}'' is defined more than once.</entry>
        <entry key="FirstArgumentMustBeLessThan">First argument must be less than {0}.</entry>
        <entry key="OptionInputsMustBeConstant">For code generation, option inputs to {0} must be constants.</entry>
        <entry key="SetEnvPARFOR">setenv function is not supported inside parfor loops.</entry>
        <entry key="InvalidOrNonConstantNaNFlag">Invalid option combination. Option must be ''omitnan'' or ''includenan'', and for code generation it must be a constant.</entry>
        <entry key="LimitedExpansionWithTarget">The ''{0}'' function supports only expansion of fixed-size 1-by-1 inputs when code generation target is ''{1}''. If inputs have different size, one of them must be a scalar.</entry>
        <entry key="QhullInternalError">An internal error occurred calling Qhull.</entry>
        <entry key="ParallelNotSupported">Code generation does not support function ''{0}'' in parallel regions.</entry>
        <entry key="IntegralWayPointsTypeMismatch">Code generation requires at least one end point to be ''single'' if Waypoints are ''single''.</entry>
        <entry key="IntegralArrayValuedMustBeConstant">Option ''ArrayValued'' must be constant.</entry>
        <entry key="IntegralOutputSizeOfFunMustBeConstant">FUN must return an array of fixed-size during code generation.</entry>
        <entry key="IntegralTooManyInitialIntervals">Integration cannot start as the number of intervals exceeds the limit allowed by static memory allocation. Consider enabling dynamic memory allocation.</entry>
        <entry key="IntegralSparseNotSupported">Code generation for integral does not support function handles that return sparse matrix outputs.</entry>
        <entry key="NullInvalidTolerance"> For code generation, the second input to null must be a real numeric scalar tolerance.</entry>
        <entry key="InterpftDimMustBeConst">DIM must be a constant.</entry>
        <entry key="InterpftNyMustBePositiveInteger"> Input ''ny'' must be a positive integer scalar.</entry>
        <entry key="EncodingInvalidEncoding">Invalid encoding name.</entry>
        <entry key="EncodingConversionError">Unable to convert string from UTF-16 to the MATLAB code generation character encoding ''{0}''.</entry>
        <entry key="EncodingSizeConsistencyError">Conversion of string from UTF-16 to MATLAB code generation character encoding (''{0}'') changes the number of characters. This behavior is not supported for code generation.</entry>
        <entry key="EncodingUnknown">An unknown error occurred while changing the encoding of a string.</entry>
        <entry key="EncodingVarsize">Translating string ''{0}'' to UTF-8 encoding changed the number of bytes in the string. If variable-size array support is disabled, this behavior is not supported for code generation. Either enable variable-size array support (you might still disable dynamic memory allocation), or avoid encoding strings with character values greater than 127.</entry>
        <entry key="Integral2maxRectanglesFail">Number of rectangles exceeded the limit allowed by static memory allocation. Consider enabling dynamic memory allocation for better mesh refinement. The result fails the global error test.</entry>
        <entry key="Integral2maxRectanglesPass">Number of rectangles exceeded the limit allowed by static memory allocation. Consider enabling dynamic memory allocation for better mesh refinement. The result passes the global error test.</entry>
        <entry key="Integral3UnsupportedClass">Input function must return ''double'' or ''single'' values. Found ''{0}''.</entry>
        <entry key="Integral3InvalidXMin">XMIN must be a floating point scalar.</entry>
        <entry key="Integral3InvalidXMax">XMAX must be a floating point scalar.</entry>
        <entry key="PolySimplifyNotSupported">Code generation does not support 'simplify' set to true for polyshape.</entry>
        <entry key="WarnPolyDefaultSimplifyFalse">Code generation sets 'simplify' flag to 'false' by default. Code generation does not support 'simplify' set to true for polyshape.</entry>
        <entry key="PolyVertDotAssgnFail">Code generation does not allow setting vertices using dot assign.</entry>
        <entry key="PolyUnsupportedMethod">Function ''{0}'' in class polyshape is not supported for code generation.</entry>
        <entry key="EmptyInteroplantObjectErr">Creation of empty griddedInterpolant objects is not supported for code generation.</entry>
        <entry key="gridInterp1Donly">Sample points must be 1-dimensional for code generation.</entry>
        <entry key="Next1Donly">Sample points must be 1-dimensional for ''next'' method.</entry>
        <entry key="Pchip1Donly">Sample points must be 1-dimensional for ''pchip'' method.</entry>
        <entry key="Previous1Donly">Sample points must be 1-dimensional for ''previous'' method.</entry>
        <entry key="CannotUseSetOnMethod">Code generation does not allow assigning of values to ''Method'' and ''ExtrapolationMethod'' using property set methods. To set ''Method'' and ''ExtrapolationMethod'' properties pass the values to the constructor.</entry>
        <entry key="griddedInterpolantCannotBeEntryPoint">Code generation does not support passing an object of griddedInterpolant class as an input argument to the entry-point function.</entry>
        <entry key="MessageStringNotSupported">Code generation does not support the string method of the message class.</entry>
        <entry key="MessageGetStringNotSupported">Code generation does not support the getString method of the message class.</entry>
        <entry key="IssueWarningsWithNoOutputs">Code generation does not support an output to the ''warning'' function when issuing a warning.</entry>
        <entry key="FirstInputMustBeAConstant">The first input to ''{0}'' must be a constant.</entry>
        <entry key="CdInputMustBeEmpty">Code generation for ''cd'' with inputs is not supported.</entry>
        <entry key="FuncNeedsDynamic">To generate code, in configuration settings, enable dynamic memory allocation and support for variable-size arrays/signals. To perform Simulink simulation, enable dynamic memory allocation only. Alternately, remove the function ''{0}''.</entry>
        <entry key="mustBeFile">Input path must be a file.</entry>
        <entry key="mustBeFolder">Input path must be a folder.</entry>
        <entry key="PolyCPP03">TargetLangStandard is ''{0}''. For code generation, polyshape class requires C++11 or later. The generated code may not compile for some object functions.</entry>
        <entry key="CurrentDirDeleted">Unable to access current directory or directory no longer exists.</entry>
        <entry key="AppendStringCellArray">If any cell input to ''append'' is nonscalar then no input can be a string. Code generation does not support string array as output. Use char() to convert string(s) to character array instead.</entry>
        <entry key="Cell2StructConstFields">When generating code for ''cell2struct'', ''fields'' input must be constant. </entry>
        <entry key="Cell2StructdimNotConst">Dimension argument must be a constant for heterogenous cell inputs.</entry>
        <entry key="Cell2StructHeterogeneousLimit">When generating code for ''cell2struct'', if an input cell array to cell2struct is heterogenous, the cell array cannot contain more than {0,number,integer} elements.</entry>
        <entry key="Cell2StructUnsupportedSpecialEmpty">If the input is variable-sized, it cannot be empty at run time.</entry>
        <entry key="Cell2MatCellInput">Input to ''cell2mat'' must be cell.</entry>
        <entry key="PolyIndexError">Boundary index elements must be positive integers.</entry>
        <entry key="mustBeUnderlyingType">Value must have one of the specified underlying types.</entry>
        <entry key="mustBeUnderlyingTypeInput">The ''ClassNames'' argument must be a nonempty string, character vector, or cell array of character vectors.</entry>
        <entry key="ClockTwoOutUnsupported">Code generation is not supported for ''clock'' with two output arguments.</entry>
        <entry key="Cell2MatSparseUnboundInput">Code generation not supported for ''cell2mat'' with unbounded or variable-size cell containing sparse arrays.</entry>
        <entry key="Cell2MatNdUnboundInput">Code generation not supported for ''cell2mat'' with unbounded or variable-sized cell with dimension greater than 2.</entry>
        <entry key="assigninOnlyBaseSupported">For C/C++ code generation, the value of input workspace must be ''base''.</entry>
        <entry key="AssigninPARFOR">For C/C++ code generation, ''assignin'' function is not supported inside parfor loops.</entry>
        <entry key="FilepartsMustBeChar">Input must be a row vector of characters, or a string scalar, or a cellstr.</entry>
        <entry key="CellfunNoErrorHandler">Code generation not supported for ''cellfun'' when ''ErrorHandler'' is specified.</entry>
        <entry key="CellfunAtleastOneInput">The ''cellfun'' function signature requires at least one input cell array.</entry>
        <entry key="CellfunExpectCell">Input #{0} is expected to be a cell array, but {1} was found instead.</entry>
        <entry key="CellfunStructFieldClassMismatch">Data type mismatch in the field ''{0}'' at index {1} of the output {2} ({3} vs {4}).</entry>
        <entry key="CellfunNonConstInput">For C/C++ code generation, value of ''UniformOutput'' option must be constant.</entry>
        <entry key="CellfunOutputMxArray">The output (#{0}) of ''cellfun'' cannot be returned from an extrinsic function.</entry>
        <entry key="iofunURLInputsNotSupported">Standalone code generation does not support URL inputs.</entry>
        <entry key="iofunNonEmptyInput">All arguments must be non-empty character vectors or string scalars.</entry>
        <entry key="iofunWritePermissionError">Cannot write to destination. Use the 'f' option to attempt an override.</entry>
        <entry key="iofunPermissionError">Permission denied error. One or more permissions missing from source or destination.</entry>
        <entry key="iofunFilePathTooLong">The filename or extension is too long.</entry>
        <entry key="iofunResourceNotFound">The specified location was not found.</entry>
        <entry key="iofunDirNotEmpty">The specified path is a non-empty folder.</entry>
        <entry key="iofunResourceIsDir">Destination is not a folder. When moving a source folder, the destination must also be a folder.</entry>
        <entry key="iofunErrorInPlatformAPI">Error occurred while performing move or copy operation.</entry>
        <entry key="iofunWildcardOpsNotSupported">Wildcard operations are not supported for standalone code generation of movefile and copyfile.</entry>
        <entry key="iofunCrossVolumeDirMoveNotSupported">Standalone code generation does not supporting moving folder across volumes.</entry>
        <entry key="iofunForceFlagMustBeCompileTimeConstant">For standalone code generation, the optional flag ''f'' must be compile-time constant.</entry>
        <entry key="FunctionNeedsNonFiniteSupport">To generate code, set the configuration option 'SupportNonFinite' to true or remove the function ''{0}''.</entry>
        <entry key="SystemMissingValue">Expected a value following environment variable name. '-echo' flag must be a compile-time constant for standalone code generation. If not, it is treated as the name of an environment variable.</entry>       
        <entry key="coderPadResizeFixedSizeM">M must be fixed-size.</entry>
        <entry key="coderPadResizeNeedNonEmptyInput">{0} input must be non-empty.</entry>
        <entry key="coderPadResizeDefaultFillValNotSupportedForStruct">Using default fill value is not supported for struct inputs, specify an appropriate fill value instead.</entry>
        <entry key="coderPadResizeTrimTabularUnknownNumberOfVariables">The number of variables in the output {0} must be a constant during code generation.</entry>
        <entry key="coderPadResizeTimeTableWithUserData">Code generation for {0} does not support tabular inputs having user data.</entry> 
        <entry key="coderPadResizeNeedConstantString">''{0}'' must be a constant character vector or string scalar.</entry>
        <entry key="dictionaryConstFormat">Format option to entries function must be constant.</entry>
        <entry key="dictionaryTableEmpty">In code generation, the entries function cannot return an empty table.</entry>
        <entry key="dictionaryEQ">Code generation does not support the function isequal with dictionary arguments. Compare dictionaries by using the output of the entries function.</entry>
        <entry key="dictionaryEQN">Code generation does not support the function isequaln with dictionary arguments. Compare dictionaries by using the output of the entries function.</entry>
        <entry key="dictionaryStringArrayLookup">Code generation does not support non-scalar arrays of objects, including strings. Return scalar objects only.</entry>
        <entry key="dictionaryEmptyCell">For code generation, cell inputs to the dictionary function cannot be both constant and empty.</entry>
        <entry key="dictionaryCharRow">For code generation, all character inputs to the dictionary function must be row vectors.</entry>
        <entry key="dictionaryParfor">Code generation does not support creating or modifying a dictionary inside a parfor-loop.</entry>
        <entry key="dictionaryCharRowIsKey">For code generation, all character inputs to the isKey function must be row vectors.</entry>
        <entry key="dictionaryTableEntries">To generate code for the entries function when the key or value is an object, string, or enumeration, specify struct format using the "struct" argument.</entry>
        <entry key="dictionaryCellEntries">Code generation does not support the "cell" argument to the entries function when keys and values are of different types.</entry>
        <entry key="dictionaryEntriesFormat">'format' argument must be 'cell', 'struct', or 'table'.</entry>
        <entry key="dictionaryUnconfiguredEntries">Unable to return entries from a dictionary with unset key and value types. Add entries to the dictionary.</entry>
        <entry key="dictionaryUnconfiguredKeys">Unable to return keys from a dictionary with unset key and value types. Add entries to the dictionary.</entry>
        <entry key="dictionaryUnconfiguredValues">Unable to return values from a dictionary with unset key and value types. Add entries to the dictionary.</entry>
        <entry key="dictionaryUnconfiguredTypes">Unable to return types from a dictionary with unset key and value types. Add entries to the dictionary.</entry>
        <entry key="dictionaryUnconfiguredRedirect">Unconfigured dictionaries are not supported as inputs to entry-point functions or as arguments to coder.typeof, extrinsic function calls, and coder.load.</entry>
        <entry key="dictionaryCastFailedLookup">Unable to lookup key of class {0} in a dictionary with keys of class {1} because the code generator is unable to convert variables of type {0} to type {1}.</entry>
        <entry key="dictionaryCastFailedRemove">Unable to remove key of class {0} from a dictionary with keys of class {1} because the code generator is unable to convert variables of type {0} to type {1}.</entry>
        <entry key="dictionaryCastFailedInsert">Unable to insert entry with key or value of class {0} into a dictionary with keys or values of class {1} because the code generator is unable to convert variables of type {0} to type {1}.</entry>
        <entry key="dictionaryStringArrayCastLookup">Unable to lookup key of class {0} in a dictionary with string keys. For code generation, key must be a character row vector or a scalar of class {0} to be found in a dictionary with string keys.</entry>
        <entry key="dictionaryStringArrayCastRemove">Unable to remove key of class {0} from dictionary with string keys. For code generation, key must be a character row vector or a scalar of class {0} to be removed from a dictionary with string keys.</entry>
        <entry key="dictionaryStringArrayCastInsert">Unable to insert entry with key or value of class {0} into dictionary with string keys or values. For code generation, keys or values inserted into a dictionary with string keys or values must be character row vectors or scalars of class {0}.</entry>
        <entry key="dictionaryComplexLookup">Code generation does not support finding a complex key in a dictionary with real numeric keys. Construct a complex dictionary using keys that have an imaginary part.</entry>
        <entry key="dictionaryComplexRemove">Code generation does not support removing a complex key from a dictionary with real numeric keys. Construct a complex dictionary using keys that have an imaginary part.</entry>
        <entry key="dictionaryComplexInsert">Code generation does not support inserting a complex key or value into a real numeric dictionary. Construct a complex dictionary using keys or values that have an imaginary part.</entry>
        <entry key="dictionaryKeysArg">Unable to return an array of keys of type ''{0}''. Specify "cell" to return these keys as a cell array.</entry>
        <entry key="dictionaryKeysArgCell">Unrecognized argument. If used, the second argument to the keys function must be the constant string "cell".</entry>
        <entry key="dictionaryValuesArg">Unable to return an array of values of type ''{0}''. Specify "cell" to return these values as a cell array.</entry>
        <entry key="dictionaryValuesArgCell">Unrecognized argument. If used, the second argument to the values function must be the constant string "cell".</entry>
        <entry key="dictionaryBadKeytype">Invalid key type. For code generation, key must be a string, enumeration, logical, cell, structure, or non-fi numeric value. Aggregate types can only contain other valid types.</entry>
        <entry key="dictionaryAggregateNonscalar">For code generation, all {0} inputs to the dictionary function must be scalar.</entry>
        <entry key="dictionaryFunctionHandle">Code generation does not support function handles as dictionary keys or values.</entry>
        <entry key="dictionaryCategorical">Code generation does not support categorical keys or values.</entry>
        <entry key="dictionaryHetKeys">For code generation, all cell array keys must contain the same pattern of data types.</entry>
        <entry key="dictionaryHetValues">For code generation, all cell array values must contain the same pattern of data types.</entry>
        <entry key="dictionaryEnum">For code generation, all enumerations used as or in dictionary keys must have a base type of int8, uint8, int16, uint16, int32, or uint32.</entry>
        <entry key="dictionaryTypeScalar">All dictionary keys and values must be scalar.</entry>
        <entry key="dictionaryNoCurly">Curly brace indexing '{}' for dictionaries not supported.</entry>
        <entry key="dictionaryNeedsMalloc">Unable to create dictionary. Enable dynamic memory allocation.</entry>
        <entry key="KeyValueDimsMustMatch">Key and value have incompatible sizes ([{0}x{1}] and [{2}x{3}]). Key and value dimensions must be compatible or value must be scalar.</entry>
        <entry key="configureDictionaryConst">For code generation, all inputs to configureDictionary must be constant.</entry>
        <entry key="configureDictionaryText">All inputs to configureDictionary must be character row vectors or string scalars</entry>
        <entry key="configureDictionaryUnsupportedType">For code generation, configureDictionary does not support inputs of type ''{0}''. Create a dictionary of this type by inserting an element of type ''{0}'' into an unconfigured dictionary or by calling the dictionary function with inputs of type ''{0}''.</entry>
        
        <entry key="pagelsqminnormInvalidTolerance">Specify tolerance as a nonnegative scalar for all pages, or as an array of nonnegative tolerances of size [1 1 size(A,3:ndims(A)] that specifies a different tolerance for each page of input matrix A.</entry>       
        <entry key="lsNotSupportedUseSystem">''ls'' is not supported for code generation. Use the ''system'' function to call the operating system and execute the ''ls'' command instead.</entry>
        <entry key="partialParamParsertRuntimeEmpty">Expected option ''{0}'' to be non empty. Variable-sized fields of struct inputs passed to ''{1}'' must not reduce to an empty array at runtime.</entry>
    </message>
</rsccat>

<!-- LocalWords:  BP MROWS NCOLS nonsymmetric th swb REFBLAS XGEMV complexness endian makima nowarn
     LocalWords:  PADVAL PARMS Waypoints nobalance Assumedtype abscissae Xq BP Unconfigured
     LocalWords:  NaNs MROWS NCOLS nonsymmetric th swb REFBLAS XGEMV BP MROWS unconfigured
     LocalWords:  complexness PADVAL PARMS Waypoints nobalance Assumedtype
     LocalWords:  abscissae Xq NaNs neq FID MACHINEFORMAT machineformat ubitN
     LocalWords:  NCOLS nonsymmetric th swb REFBLAS XGEMV complexness PADVAL
     LocalWords:  PARMS Waypoints nobalance Assumedtype abscissae Xq NaNs neq
     LocalWords:  FID MACHINEFORMAT machineformat ubitN ulong OPTIMFUNCTION
     LocalWords:  FUNFCN coefs Yq Zq tspan bluestein rader extrapval als
     LocalWords:  STATSFUNCTION Conditionalize lapack nonsparse nrows ncols
     LocalWords:  fillval errno SZ GETRS ia lda ib ldb ischange
     LocalWords:  varsize coderdata polyshape Interpolant xmax xmin omitnan
     LocalWords:  ny includenan maxit preconditioner
-->
