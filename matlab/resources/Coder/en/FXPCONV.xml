<?xml version="1.0"?>
<!-- Copyright 2011-2024 The MathWorks, Inc. -->
<rsccat version="1.0" locale="en_US" product="Coder">
  <message>
    <!-- Generic error message -->
    <entry key="EMLError" translate="false" note="translate=false set due no translatable content">''{0}''.</entry>

    <entry key="inferinfo">Unable to find function information for ''{0}''.</entry>
    <entry key="InvalidDesignFile">Design file ''{0}'' not found on MATLAB path. Make sure that the design is on MATLAB path.</entry>
    <entry key="CantReadFile">Unable to read file ''{0}''.</entry>
    <entry key="CantFindFunctionDecl">Unable to find function declaration in file ''{0}''.</entry>
    <entry key="InvalidFileHandle">Invalid file handle ''{0}''</entry>
    <entry key="FailedToOpenFile">Unable to open file {0}</entry>
    <entry key="InvalidCallInfo">{0}Internal error: found invalid call info</entry>
    <entry key="incorrectFcnInstrumentation">Design ''{0}'' is not instrumented correctly.</entry>

    <entry key="warningCoderConstClass">''{0}'' contains a class inside coder.const, which is not supported in fixed-point conversion. Consider explicitly specify the numeric types for the variables inside all functions.</entry>

    <entry key="FcnSpecialzedWithPersistent">The function ''{0}'' contains persistent variables ''{1}'' and has specialization ''{2}'' associated with it.  Function specializations containing persistent variables are not supported for fixed-point conversion. Consider rewriting your algorithm such that it does not use persistent variables within functions that require specialization.</entry>
    <entry key="DTS_FcnSpecialzedWithPersistent">The function ''{0}'' contains persistent variables ''{1}'' and has specialization ''{2}'' associated with it.  Function specializations containing persistent variables are not supported for single-precision conversion. Consider rewriting your algorithm such that it does not use persistent variables within functions that require specialization.</entry>

    <entry key="MATLABOperatorInAClass">''{0}'' is an overloaded operator implementation. Fixed-point conversion does not support overloaded operators in user-defined classes. Rename your function and use its function syntax to invoke it instead of overloading the operator.</entry>
    <entry key="DTS_MATLABOperatorInAClass">''{0}'' is an overloaded operator implementation. Single-precision conversion does not support overloaded operators in user-defined classes. Rename your function and use its function syntax to invoke it instead of overloading the operator.</entry>

    <entry key="NestedFcnsNotSupported">''{0}'' is a nested function. Fixed-point conversion does not support nested functions.</entry>
    <entry key="DTS_NestedFcnsNotSupported">''{0}'' is a nested function. Single-precision conversion does not support nested functions.</entry>

    <entry key="UnSupportedStringClass">''{0}'' is of type string. Fixed-point conversion does not support strings.</entry>
    <entry key="DTS_UnSupportedStringClass">''{0}'' is of type string. Single-precision conversion does not support strings.</entry>

    <entry key="UnsupportedClassFolder">''{0}'' is a MATLAB class defined in class folder. MATLAB classes defined in class folders are not supported for fixed-point conversion.</entry>
    <entry key="unsupportedCommandSyntax">Command syntax is not supported for fixed-point conversion. Use function syntax instead.</entry>
    <entry key="unsupportedCommandSyntax_DTS">Command syntax is not supported for single-precision conversion. Use function syntax instead.</entry>

    <entry key="UnsupportedDOTLP">Dynamic field/property references are not supported for fixed-point conversion. Modify your code such that structs and MCOS objects use explicit field references.</entry>
    <entry key="UnsupportedDOTLP_DTS">Dynamic field/property references are not supported for single-precision conversion. Modify your code such that structs and MCOS objects use explicit field references.</entry>

    <entry key="unsupportedFunc">{0}Function ''{1}'' not supported for fixed-point conversion.</entry>
    <entry key="unsupportedFunc_DTS">{0}Function ''{1}'' not supported for single-precision conversion.</entry>

    <entry key="unsupportedFunc_npufun">There are multiple calls of 'hdl.npufun' using the same kernel function ''{0}'', which is not supported in fixed-point conversion workflow. Use different name for each kernel function call to proceed.</entry>
    <entry key="unsupportedFunc_iteratorfun">There are multiple calls of 'hdl.iteratorfun' using the same kernel function ''{0}'', which is not supported in fixed-point conversion workflow. Use different name for each kernel function call to proceed.</entry>

    <entry key="incorrectFloat2FixedSkipPragma">Incorrect syntax for 'coder.float2fixed.skip' pragma. Expect function names to be provided in a cell array of character vectors or strings.</entry>
    <entry key="unsupportedTopLevelFloat2FixedSkipPragma">Skipping top-level design ''{0}'' with coder.float2fixed.skip is not supported.</entry>
    <entry key="unsupportedSystemObject">Skipping system objects ''{0}'' with coder.float2fixed.skip is not supported.</entry>

    <entry key="UnsupportedSparse">Variable ''{0}'' is a sparse matrix. Fixed-point conversion does not support sparse matrices.</entry>
    <entry key="UnsupportedSparse_DTS">Variable ''{0}'' is a sparse matrix. Single-precision conversion does not support sparse matrices.</entry>
    <entry key="UnsupportedDestructors">Class ''{0}'' is a handle class with delete method. Classes with destructors are not supported for fixed-point conversion.</entry>
    <entry key="WarnAgainstInfSimRanges">Variable ''{0}'' contains Inf in its simulation range. This can yield unpredictable results during conversion, consider modifying your testbench to avoid Inf ranges.</entry>

    <entry key="unsupportedLoadFcn">The 'load' function is not supported for fixed-point conversion. Use 'coder.load' instead.</entry>
    <entry key="DTS_unsupportedLoadFcn">The 'load' function is not supported for single-precision conversion. Use 'coder.load' instead.</entry>

    <entry key="suppressedErrors">Error during fixed-point conversion. See the above error messages for details.</entry>
    <entry key="suppressedErrors_DTS">Error during single-precision conversion. See the above error messages for details.</entry>

    <entry key="missingcallinfo">Unable to find function call information for {0}.</entry>
    <entry key="invalidesignandtb">Test bench and design must be separate files.</entry>
    <entry key="SimulationFailure">Simulation failed. See the Simulation Report.</entry>
    <entry key="SimulationFailureSeeMessages">Simulation failed. Review above error messages.</entry>
    <entry key="NoDesignReplacement">Unable to replace design ''{0}''. Replacing top level designs is not supported. This replacement will be ignored.</entry>
    <entry key="BADREPLACEMENTFILENAME">The replacement function ''{0}'' could not be found on the path.</entry>
    <entry key="UnhandledNodeEncountered">{0} ''{1}'' nodes not supported for automated conversion.</entry>
    <entry key="UnhandledNodeEncounteredUpdated">Error converting '{0}'.</entry>
    <entry key="UnHandledException">Unhandled exception encountered.</entry>
    <entry key="invalidDirLoc">Design, test bench, and build folders cannot be on ''{0}'' path.</entry>
    <entry key="invalidDesignTbxLoc">Design cannot be on toolbox path. Design found at : ''{0}''.</entry>
    <entry key="badState">State can be either set or reset.</entry>
    <entry key="defaultReplacement">{0} is the default replacement for {1}; ignoring this replacement function setting.</entry>
    <entry key="emptyReplacement">The replacement setting for ''{0}'' is empty; ignoring this replacement function setting.</entry>
    <entry key="TbIoParam">{0} serve as both input and output variables in the design. The option 'Log all inputs and outputs for comparison plots' does not support these variables. Consider changing the name of the output variable.</entry>
    <entry key="NoIOForDesign">Design ''{0}'' does not have any inputs or outputs. Unable to generate comparison plots.</entry>
    <entry key="INTERNALERROR">INTERNAL ERROR: ''{0}''</entry>
    <entry key="NegativeFractionLenDetected">Negative fraction length detected for ''{0}''</entry>
    <entry key="MATLABSimBailOut">Stopping simulation. Specified iteration limit reached.</entry>
    <entry key="powerSupportLimitation">{0}Exponent input to ''{1}'' must be a real scalar, the value must be a non-negative integer and also it must be stored in a separate variable.</entry>
    <entry key="cannotfinddesignfcncall">Test bench must call the design function.</entry>
    <entry key="missingdesignfile">Unable to find design file ''{0}''.</entry>
    <entry key="badid_invalidfcn">Design must be a function, not a script.</entry>
    <entry key="badid_invalidfcnext">Design ''{0}' 'must be a function with ''.m'' extension.</entry>
    <entry key="tbmustbescript">Test bench ''{0}'' must be a script or a function with no input parameters.</entry>
    <entry key="topFcnNameMismatch">Function name ''{0}'' must match file name ''{1}''.</entry>
    <entry key="unUsedInputorOutputFound">{0} are unused in the function. These are not supported for conversion. Remove unused variables from the function definition.</entry>
    <entry key="missingscript">Test bench not specified. Specify a valid test bench.</entry>
    <entry key="invalidScriptExt">Invalid MATLAB script extension. Script must have ''.m'' extension.</entry>
    <entry key="cannotopenscript">Unable to open script ''{0}''.</entry>
    <entry key="cannotOpenFcn">Unable to open function ''{0}''.</entry>
    <entry key="nofcnname">MATLAB function not specified.</entry>
    <entry key="invalidFcnExt">Invalid MATLAB function extension for ''{0}''. Function must have a ''.m'' extension.</entry>
    <entry key="invalidMexFcnExt">Expected to find MATLAB function, ''{1}'', with extension ''.m'', but found a MEX-file, ''{0}'', instead. Enter ''{2}'' to find out if the MATLAB function is being shadowed by the MEX-file. If so, rename or move one of the files so that the MATLAB function is not being shadowed.</entry>
    <entry key="designmustbefcn">Design must be a function, not a script.</entry>
    <entry key="cannotopenfile">Unable to open file ''{0}''.</entry>
    <entry key="testbenchNotFound">Unable to find test bench file ''{0}''.</entry>
    <entry key="BADFILENAME">Unable to find file ''{0}'' on the path.</entry>
    <entry key="BADType">Unable to find type information for ''{0}''.</entry>
    <entry key="floatingPointSimulationException" translate="false" note="translate=false set due no translatable content">''{0}''.</entry>
    <entry key="floatingPointBuildFailed">Build failed. Review code generation readiness.</entry>
    <entry key="fixedPointBuildFailed">Build failed.</entry>
    <entry key="TbMissing">Provide a test bench that calls the design.</entry>
    <entry key="InvalidDesignDirectory">Invalid design location. Design must be in the same directory as the project.</entry>
    <entry key="JvmRequiredForInferTypes">jvm is disabled. Please specify the '-args' or enable jvm and try again.</entry>
    <entry key="InputTypesNotDefined">Type not found for input variable ''{0}''. Check input type definitions.</entry>
    <entry key="VarDimPlotWarning">Output variables {0} have varying dimensions. Plots will not be generated for these variables.</entry>

    <entry key="NonIntegralValueWithFICOLON">Colon operand expression ''{0}'' should be a whole number when interacting with type 'embedded.fi', this is not supported in float to fixed conversion. Please consider re-writing the code.</entry>
    <!-- <entry key="NonIntegralValueWithFICOLON">Not applicable </entry> -->

    <entry key="IllegalFiMathStr" note="stringDatatypeUpdate">Character vector that specifies fimath is incorrectly formatted. See {0} for syntax information.</entry>
    <entry key="RangeViolatesTolerance">The SimMin/SimMax values of the variable ''{0}'' are not within the set tolerance limits({1}). Original range: {2}, range after conversion {3}. Check the numerictype type for the variable or settings to address this. If this tolerance is okay for your project, change the 'RangeTolerance' setting from the project.</entry>
    <entry key="TolerenceDiff" translate="false" note="TranslateFalseBatch;">{0}</entry>
    <entry key="invalidTypeAnnotation">Invalid type definition ''{0}''. Provide a valid numerictype object. See {1} for more information.</entry>
    <entry key="invalidRoundingMethodFimath">Invalid fimath RoundingMethod ''{0}''. Valid RoundingMethods are {1}. See {2} for more information.</entry>
    <entry key="invalidOverflowActionFimath">Invalid fimath OverflowMethod ''{0}''. Valid OverflowMethod are {1}. See {2} for more information.</entry>
    <entry key="invalidPropertyType">Error setting property: ''{0}'' {1}  Type provided: ''{2}'', , expected type: ''{3}''</entry>
    <entry key="emptyFixPtSuffix">'FixPtFileNameSuffix' property cannot be empty. Provide a valid suffix for the generated fixed-point file name. A valid suffix contains letters,
    digits, or underscores. </entry>
    <entry key="emptyOutputFilenameSuffix">'OutputFilenameSuffix' property cannot be empty. Provide a valid suffix for the generated MATLAB files. A valid suffix contains letters,
    digits, or underscores. </entry>

    <entry key="invalidFixPtSuffixGUI">Invalid suffix ''{0}'' for generated fixed-point file name. A valid suffix contains letters, digits, or underscores. </entry>
    <!-- No GUI for double-to-single <entry key="invalidFixPtSuffixGUI">not applicable</entry> -->

    <entry key="invalidFixPtSuffixCLI">Invalid suffix ''{0}'' for generated fixed-point file name. A valid suffix contains letters, digits, or underscores. Provide a valid suffix for 'FixPtFileNameSuffix' property.</entry>
    <!-- Suffix is already validated in config. <entry key="invalidFixPtSuffixCLI_DTS">not applicable</entry> -->

    <entry key="invalidSafetyMargin">'SafetyMargin' property value must be a valid number between -100 and Inf.</entry>

    <entry key="InputTypesNotinferred">The design ''{0}'' has inputs but the input types were inferred using test bench ''{1}''. Make sure the test bench ''{2}'' invokes the design.</entry>

    <entry key="EntryPointSpecialized">Design(entry-point) ''{0}'' has multiple usages with different input types. Fixed-point conversion does not support these specializations for entry-point functions. Re-write the code to avoid entry-point usage with different input types.</entry>

    <entry key="MathFcnGenIncorrectArity">Unable to generate math replacement function for ''{0}''. Expecting {1} inputs, found {2} instead.</entry>
    <entry key="MathFcnGenFailed">Unable to generate math replacement function for ''{0}''. ''{1}''.</entry>
    <entry key="MathFcnGenPrivateNoSupport"> ''{0}'' is a private function. Make sure the function is accessible to Fixed-point converter.</entry>
    <entry key="MathFcnGenCannotInferRange">Unable to generate math replacement function for ''{0}''. The input range for the expression ''{1}'' could not be inferred. Consider assigning the expression to a variable and passing it as an input to the function, or providing  design min and design max.</entry>
    <entry key="MathFcnGenIncorrectInferedRange">Could not generate math replacement function for ''{0}''. Auto inferred ranges([{1} {2}]) for ''{3}'' were incorrect. {4}. Consider entering a valid Design Min, Design Max to generate a math function replacement.</entry>
    <entry key="MathFcnGenIncorrectDesignExtents">Invalid Design Min, Design Max([{0} {1}]) found for ''{2}''. {3}. Check the Design Min, Design Max values entered.</entry>
    <entry key="MathFcnGenScalarsOnly">Could not generate math replacement function for ''{0}''. Approximation supports only scalar inputs, non-scalar inputs({1}) found for ''{2}''.</entry>
    <entry key="MathFcnGenComplexNoSupport">Unable to generate math replacement function for ''{0}''. Approximation does not support complex inputs.</entry>
    <entry key="MathFcnGenCandidateFcnNotProvided">Candidate function not provided for approximation object for ''{0}''. Setting the 'CandidateFunction' property automatically.</entry>
    <entry key="DesignRangeSmaller">The design range of variable ''{0}'' is smaller than the simulation range. This could result in incorrect fixed-point conversion. Ignoring specified design range.</entry>
    <!--Not applicable <entry key="DesignRangeSmaller_DTS">Not applicable</entry> -->

    <entry key="MCOSClass_StructProperties">Property ''{0}'' of class ''{1}'' is a structure type. Classes with structure properties are not supported.</entry>
    <entry key="Struct_MCOSClassFields">Struct field ''{0}'' is of type ''{1}'' which is a MCOS Class. MCOS objects cannot be a field within a structure.</entry>

    <entry key="DesignF2FIncompatible">Design is not supported by fixed-point conversion. See the above messages.</entry>
    <entry key="DesignF2FIncompatible_DTS">Design is not supported by double-to-single conversion. See the above messages.</entry>
    <entry key="DesignF2FEmpty_DTS">No functions detected for conversion in MATLAB Function block ''{0}''.</entry>

    <entry key="F2FPARFOR">parfor is not supported for fixed-point conversion.</entry>
    <entry key="F2FPARFOR_DTS">parfor is not supported for double-to-single conversion.</entry>

    <entry key="F2FINF">Inf is not supported for fixed-point conversion.</entry>
    <!-- Inf is supported <entry key="F2FINF_DTS">Not Applicable</entry> -->

    <entry key="F2FCODERDOTPARALLEL">coder.parallel is not supported for fixed-point conversion.</entry>
    <entry key="F2FCODERDOTPARALLEL_DTS">coder.parallel is not supported for double-to-single conversion.</entry>

    <entry key="F2FCODERCSTRUCTNAME">coder.cstructname is not supported for fixed-point conversion.</entry>
    <entry key="F2FCODERCSTRUCTNAME_DTS">coder.cstructname is not supported for double-to-single conversion.</entry>

    <entry key="F2FGLOBALINHDL">Global variables are not supported for fixed-point conversion in HDL Coder. Rewrite the code so it does not use global variables.</entry>
    <entry key="F2FGLOBALINMLFB">Global variables used in MATLAB Function blocks are not supported for automated fixed-point conversion.</entry>
    <entry key="F2FGLOBALINMLFB_DTS">Global variables used in MATLAB Function blocks are not supported for double-to-single conversion.</entry>
    <!-- not double2single in HDL <entry key="F2FGLOBALINHDL_DTS">Not applicable</entry> -->

    <entry key="unsupportedFcnArgumentBlock">Arguments blocks found in function ''{0}'' are not supported for fixed-point conversion.</entry>
    <entry key="unsupportedFcnArgumentBlock_DTS">Arguments blocks found in function ''{0}'' are not supported for double-to-single conversion.</entry>

    <entry key="unsupportedFcnHndlObj">''{0}'' calls a method of an object using function handle. This is not supported for fixed-point conversion.</entry>
    <entry key="unsupportedFcnHndl">''{0}'' function handles are not supported for fixed-point conversion.</entry>
    <entry key="unsupportedFcnHndl_DTS">''{0}'' function handles are not supported for double-to-single conversion.</entry>

    <entry key="unsupportedAnonFcn">''{0}'' is an anonymous function. Anonymous functions are not supported for fixed-point conversion.</entry>
    <entry key="unsupportedAnonFcn_DTS">''{0}'' is an anonymous function. Anonymous functions are not supported for double-to-single conversion.</entry>

    <entry key="F2FArrayOfStructs">Variable ''{0}'' is an array of structures. Arrays of structures are not supported for fixed-point conversion.</entry>
    <entry key="F2FArrayOfStructs_DTS">Variable ''{0}'' is an array of structures. Arrays of structures are not supported for single-precision conversion.</entry>

    <entry key="UnsupportedCellArrays">Variable ''{0}'' is a cell array. Cell arrays are not supported in fixed-point conversion.</entry>
    <entry key="UnsupportedCellArrays_DTS">Variable ''{0}'' is a cell array. Cell arrays are not supported in double-to-single conversion.</entry>

    <entry key="UnsupportedVarargs">Fixed-point conversion does not support entry points that use varargin and varargout.</entry>
    <entry key="UnsupportedVarargs_DTS">Double-to-single conversion does not support entry points that use varargin and varargout.</entry>

    <entry key="SysObjMtdSpecializedNoSupport">''{0}'' method of a System object ''{1}'' has specialization. Specialization of ''{2}'' methods of a System object is not supported. {3}</entry>
    <entry key="ClassWithinNamespace">Classes defined within namespaces are not supported by automated conversion.{0}.</entry>

    <entry key="F2F_ReservedNameUsage">''{0}'' is a reserved keyword in fixed-point conversion. Rename the variable/function to continue with conversion.</entry>
    <entry key="F2F_LongName">The identifier starting with ''{0}'' is longer than the maximum allowable length of {1} characters. Shorten all variable names and struct fields to at most {1} characters to continue.</entry>
    <entry key="F2F_LongFilename">Fixed-point conversion will generate the filename ''{0}'', which is longer than the maximum allowable length of {1} characters. Shorten the design filename to continue.</entry>

    <entry key="TB_InputTypeMismatch">The input data type provided for the test bench simulation does not match with the expected input type from the generated MEX file. Ensure that the type for the input variables does not change during simulation.</entry>

    <entry key="F2FOverflow">Overflow error in expression ''{0}''. Percentage of Current Range = {1}%.</entry>
    <entry key="InheritanceError">Inheritance error. Supported base classes are ''handle'' or ''matlab.System''.</entry>
    <entry key="ConstantProperty">Constant properties are not supported for conversion. Consider converting {0} to a static method.</entry>
    <entry key="PropertyInitialization">Properties must be initialized in the constructor.</entry>
    <entry key="UnSupportedPropertyInitialization">Property ''{0}'' is of type ''{1}''. ''{1}'' type is not supported in property initialization in a class.</entry>
    <entry key="UnsupportedMCOSPropertyValidators">Property Validations are not supported for conversion. Consider modifying your code to not use property validations.</entry>
    <entry key="StructProperty">Property ''{0}'' is a structure type. Structure properties are not supported in classes for fixed-point conversion.</entry>
    <entry key="StructProperty_DTS">Property ''{0}'' is a structure type. Structure properties are not supported in classes for double-to-single conversion.</entry>
    <entry key="DotIndexNotSupportForType">Dot indexing is not supported for variable ''{0}'' of type ''{1}''.</entry>
    <entry key="DvoMCOSClass">Variable ''{0}'' is a MATLAB class. MATLAB classes are not supported for derived range analysis.</entry>
    <entry key="MCOSClassIO">Variable ''{0}'' is a MATLAB class. MATLAB class input, output variables are not supported for fixed-point conversion.</entry>
    <entry key="MCOSClassIO_DTS">Variable ''{0}'' is a MATLAB class. MATLAB class input or output variables are not supported for single-precision conversion.</entry>
    <entry key="DvoIncompatible">Design is not supported for derived range analysis.</entry>
    <entry key="DvoUnboundedSize">Size of variable ''{0}'' is unbounded. Unbounded sizes are not supported for derived range analysis.</entry>
    <entry key="DvoVariableSize">Variable ''{0}''  has nonconstant dimensions. Variable-size data is not supported for derived range analysis.</entry>
    <entry key="DvoChangingSize">Variable ''{0}''. Size of the variable is not constant. See previous assignment to the variable.</entry>
    <entry key="DvoComplexType">Variable ''{0}'' is complex. Complex types are not supported for derived range analysis.</entry>
    <entry key="DvoNonScalarType">Variable ''{0}'' is not scalar. Non-scalar types are not supported for derived range analysis.</entry>
    <entry key="DvoSystemObject">Variable ''{0}'' is a {1} System object. The {1} System object is not supported for derived range analysis.</entry>
    <entry key="DvoStructureType">Variable ''{0}'' is a structure. Structures are not supported for derived range analysis.</entry>
    <entry key="DvoDesignMinOutOfBounds">The design-min {0} specified for {1} variable ''{2}'' is outside the range of its type.</entry>
    <entry key="DvoDesignMaxOutOfBounds">The design-max {0} specified for {1} variable ''{2}'' is outside the range of its type.</entry>
    <entry key="DvoDesignMinGreaterThanDesignMax">The design-min specified for variable ''{0}'' is greater than the specified design-max.</entry>
    <entry key="MEPSharedMemory">Functions ''{0}'' contain persistent data invoked from multiple entry points. This is not supported for fixed-point conversion. Rewrite the code to avoid invoking functions with persistent data from multiple entry points.</entry>
    <entry key="MEPSharedMemory_DTS">Functions ''{0}'' contain persistent data invoked from multiple entry points. This is not supported for double-to-single conversion. Rewrite the code to avoid invoking functions with persistent data from multiple entry points.</entry>
    <entry key="MEPSharedMemory_MLFB">Function ''{0}'' contains persistent data and is invoked from multiple MATLAB function blocks. This is not supported for fixed-point conversion. Rewrite the code to avoid invoking functions with persistent data from multiple MATLAB function blocks.</entry>
    <entry key="MEPSharedMemory_MLFB_DTS">Function ''{0}'' contains persistent data and is invoked from multiple MATLAB function blocks. This is not supported for double-to-single conversion. Rewrite the code to avoid invoking functions with persistent data from multiple MATLAB function blocks.</entry>
    <entry key="DVOUnsupported">This design uses {0}.  This is not supported by Static Range Analysis.</entry>

    <entry key="RequiredGenFixptCodeForFlatMode">For flat lookup table architecture, you must specify ''GenerateFixPtCode'' to true.</entry>

    <entry key="JvmRequiredForConfigDialog">jvm is disabled. Please specify the '-args' or enable jvm to enable dialog support.</entry>

    <entry key="DeadEXPR">Expression ''{0}'' was not executed by the provided testbench or was constant-folded. Proposed numerictypes in this expression are not applied.</entry>
    <entry key="DeadFUNCTION">Function ''{0}'' was not executed by the provided testbench or was constant-folded. Proposed numerictypes in this function are not applied.</entry>

    <entry key="GlobalVarUnAssigned">Global variable ''{0}'' is not a constant and is not assigned in the design. If a global variable is used as a read-only variable, then consider making it a constant or insert the statement ''{0}={0};''. Global variables must be  assigned to get a data type proposal.</entry>
    <!-- it is ok to convert without ranges <entry key="GlobalVarUnAssigned_DTS">Not applicable</entry> -->

    <entry key="MEPHDLNoSupport">Unable to generate code for entry points ''{0}'' because HDL code generation does not support the use of multiple entry-point functions.</entry>
    <entry key="MEPCallToEntryPoint">An entry-point function cannot call another entry-point function.</entry>
    <entry key="FixedPointLicenceNotAvail">An error occurred while creating default fimath in ''coder.config(''fixpt'')'' call. Verify that you have a Fixed-Point Designer license.</entry>

    <entry key="NameValueSyntaxUnsupported">The function call ''{0}'' uses "name=value" syntax. This syntax is not supported for fixed-point conversion.</entry>
    <entry key="NameValueSyntaxUnsupported_DTS">The function call ''{0}'' uses "name=value" syntax. This syntax is not supported for double to single conversion.</entry>

    <entry key="DTSSingleCNotSupportedWithOption">The -singleC option cannot be used with -config:{0} option.</entry>
    <entry key="DTSSingleCNotSupportedWithConfig">The -singleC option cannot be used with a {0} config.</entry>
    <entry key="DTSIncorrectOption">A coder.SingleConfig object must be used with the -double2single option. Instead it was used with {0} option.</entry>
    <entry key="DTSMissingConfig">A coder.SingleConfig object must be specified after -double2single option.</entry>
    <entry key="DTS_SingleC_ParforNotSupported">parfor is not supported when using the -singleC flag.</entry>
    <entry key="DTS_SingleC_CellArraysNotSupported">cell arrays are not supported when using the -singleC flag.</entry>
    <entry key="DTS_RequiresFixedPointDesigner">Single-Precision conversion requires Fixed-Point Designer.</entry>
    <entry key="DTS_IsaDoubleTypeNotValid">assert(isa(expression, 'double')) is not valid with -singleC flag.</entry>
    <entry key="FAVFixptNotSupported">Fixed-point conversion does not support using the arguments block to specify entry-point input types. Use the -args option of the ''codegen'' command or preconditioning statements.</entry>

    <entry key="DTS_ClassNotConformant">The MATLAB class {0} is not compatible with -singleC flag. To be compatible, all properties must be initialized in the constructor. Initializing properties in property definition blocks is not supported.</entry>

    <entry key="DTS_NonRepresentableIntegerConstant">This constant cannot be represented in single-precision.</entry>
    <entry key="DTS_NonRepresentableIntegerConstantM2M">The constant {0} cannot be represented in single-precision.</entry>
    <entry key="DTS_IntegerOpSingle">Integers can only be combined with integers of the same class, or scalar doubles. Consider casting one of the operands to the type of the other.</entry>
    <entry key="DTS_IntegerClassError">Integers can only be combined with integers of the same class, or scalar doubles. Consider casting one of the operands to the type of the other.</entry>
    <entry key="DTS_ColonWarning">Doubles may be generated to determine the length of this colon expression at run-time.  Consider using an integer type, if possible.</entry>

    <entry key="DTS_LibFcnDoublePrecision">The builtin function {0} is implemented in double-precision. Code generated for this function will contain doubles.</entry>
    <entry key="DTS_LibFcnC89DoublePrecision">The function {0} uses double-precision in the C89/C90 (ANSI) standard. For single-precision code, consider using the C99 (ISO) standard or use your own function.</entry>
    <entry key="DTS_LibFcnNotConverted">The function {0} is not converted to single-precision.</entry>
    <entry key="DTS_LibFcnDoubleOutput">The output of builtin function {0} is double-precision and has been cast to single-precision. The code generated for the builtin function may still contain doubles.</entry>
    <entry key="DTS_LibFcnNthOutputDouble">Output {0} of builtin function {1} is double-precision and has been cast to single-precision. The code generated for the builtin function may still contain doubles.</entry>
    <entry key="DTS_ScaledDoubles">Scaled doubles are not converted to single-precision.</entry>
    <entry key="DTS_DoubleFi">This use of fi was not converted to single-precision.</entry>
    <entry key="DTS_SingleC_FunctionHandles">Calls to builtin functions via function handles will not be converted to single-precision. Consider creating handle to your own function that calls the builtin.</entry>

    <entry key="DTS_SingleConfigPropertiesHeader">Properties for class coder.SingleConfig</entry>

    <entry key="DTS_InvalidOption">{0} is not a valid option.</entry>
    <entry key="DTS_MissingConfig">Missing coder.SingleConfig instance after -config.</entry>
    <entry key="DTS_InvalidConfig">A coder.SingleConfig instance must be specified after -config.</entry>
    <entry key="DTS_MultipleConfig">Multiple -config options specified.</entry>

    <entry key="DTS_NoTestBenchSpecified">TestBenchName must be specified in the configuration object if TestNumerics is set to true.</entry>
    <entry key="DTS_EmptyConfig">A non-empty coder.SingleConfig instance must be specified.</entry>

    <entry key="DTS_IndexVarFloatingPoint">Could not propose int32 type for index variable ''{0}'' due to use in {1}.</entry>
    <entry key="DTS_InputIndexVarFloatingPoint">Could not propose int32 type for input variable ''{0}'' of function ''{2}'' due to callsite {1}.</entry>
    <entry key="DTS_OutputIndexVarFloatingPoint">Could not propose int32 type for output variable ''{0}'' of function ''{2}'' due to callsite {1}.</entry>
    <entry key="DTS_IndexVarMessage">
      \n\nint32 type could not be proposed for one or more variables. If your design uses matrices with number of elements
      greater than 2^24, consider casting the index variables to int32 explicitly in your algorithm.
      Alternatively, to let the converter propose int32 types, avoid using index variables in floating point contexts.
    </entry>
    <entry key="IntegerDataTypeRequired">Illegal value {0}. Legal values are 'int8', 'int16', 'int32', 'int64', 'uint8', 'uint16', 'uint32', 'uint64', or [].</entry>
    <entry key="DTS_CoderConstantGlobalVar">Found coder.Constant global variable ''{0}'' during single-precision conversion. coder.Constant global variables are not supported by single-precision conversion.</entry>
    <entry key="DTS_SingleC_CoderConstantGlobalVar">coder.Constant global variables are not supported by -singleC.</entry>

    <entry key="MLFB_CannotApplyFixptVariant">Applying types for fixed-point variant MATLAB Function Blocks is not supported.</entry>
    <entry key="MLFB_CannotApplyForNATypes">One or more 'n/a' types proposed for variables. Fixed-point conversion will not be supported for 'n/a' types.</entry>
    <entry key="MLFB_CannotApplyForNATypeResult">'n/a' types proposed for variable ''{0}''. Fixed-point conversion will not be supported for 'n/a' types.</entry>
    <entry key="MLFB_DerivedOnlyWorkflowUnsupported">For fixed-point conversion of MATLAB Function Blocks, simulation needs to be run. Run simulation as well to continue with fixed-point conversion.</entry>
    <entry key="MLFB_StaleRun">Run ''{0}'' was created before the last update to the model. Simulate the model again to continue fixed-point conversion with the selected run.</entry>
    <entry key="MLFB_GenerateFixedPointCodeError">Unable to apply types for MATLAB Function Block : ''{0}''. Cause : ''{1}''</entry>
    <entry key="MLFB_SimulinkFunctionNotSupported">Simulink Functions are not supported for fixed-point conversion. Call to a simulink Function found : ''{0}'' .</entry>
    <entry key="MLFB_SimulinkFunctionNotSupported_DTS">Simulink Functions are not supported for double-to-single conversion. Call to a simulink Function found : ''{0}'' .</entry>
    <entry key="MLFB_GenerateFixedPointCodeWARN">In MATLAB Function Block : ''{0}''. {1} </entry>
    <entry key="MLFB_UnSupportedMCOS">''{0}'' is a MATLAB Class. MATLAB Classes and System Objects are not supported for fixed-point conversion.</entry>
    <entry key="MLFB_UnSupportedMCOS_DTS">''{0}'' is a MATLAB Class. MATLAB Classes and System Objects are not supported for double-to-single conversion.</entry>

    <entry key="MLFB_Annotation_Msg1">
      This variant subsystem was automatically generated by the Fixed-Point Tool to convert a MATLAB function block to fixed-point.
    </entry>

    <entry key="MLFB_Annotation_Msg2">
      The variant subsystem contains two blocks:
    </entry>

    <entry key="MLFB_Annotation_Msg3">
      1. {0} is the original code from the MATLAB function block.
    </entry>
    <entry key="MLFB_Annotation_Msg31">
      Modify this block to update your code or resolve errors.
    </entry>

    <entry key="MLFB_Annotation_Msg4">
      2. {0} is the generated fixed-point code for the MATLAB function block.
    </entry>

    <entry key="MLFB_Annotation_Msg41">
      Any modifications to this block will be overwritten on the next conversion.
    </entry>

    <entry key="MLFB_Annotation_Msg5">
      The Fixed-Point Tool will select an appropriate variant based on the Model Settings.
    </entry>

    <entry key="MLFB_Annotation_Msg6">
      Learn more.
    </entry>

    <entry key="MLFB_Annotation_Single_Msg1">
        This variant subsystem was automatically generated by the Single Precision Converter to convert a MATLAB function block to single precision.
    </entry>

    <entry key="MLFB_Annotation_Single_Msg2">
        The variant subsystem contains two blocks:
    </entry>

    <entry key="MLFB_Annotation_Single_Msg3">
        1. {0} is the generated single precision code for the MATLAB function block.
    </entry>

    <entry key="MLFB_Annotation_Single_Msg31">
        Modify this block to update your code or resolve errors.
    </entry>

    <entry key="MLFB_Annotation_Single_Msg4">
        2. {0} is the original code from the MATLAB function block.
    </entry>

    <entry key="MLFB_Annotation_Single_Msg41">
        This code has been preserved for comparison with the generated code, but will not be used.
    </entry>

    <entry key="MLFB_CANNOT_APPLY_CUT">Cannot convert MATLAB Function Block ''{0}'' to fixed-point because it is a Component Under Test. To enable automatic conversion to fixed-point, move the MATLAB Function block inside a subsystem.</entry>
    <entry key="MLFB_IN_SF_CHART">MATLAB Function Block : ''{0}'' is within a Stateflow Chart ''{1}''. Applying types for such function blocks is not supported.</entry>
    <entry key="MLFB_EMFUNCTION">''{0}'' is a variable in a MATLAB Function in a Stateflow Chart. MATLAB Functions in a Stateflow chart are not supported for fixed-point conversion.</entry>
    <entry key="DTS_MLFB_EMFUNCTION">Unable to convert MATLAB Function block ''{0}'' to single-precision because it is in a linked Stateflow chart.</entry>
    <entry key="DTS_LOCKED_MLFB">Unable to convert MATLAB Function block ''{0}'' to single-precision because it is in a locked subsystem.</entry>
    <entry key="MLFB_CONVERSION_SKIPPED">MATLAB Function Block ''{0}'' has not been converted to fixed-point. Reason: {1}</entry>
    <entry key="LOGDATA_MEXOnlySupport">'coder.logData' is supported only for MEX targets. For all other targets, it has no effect.</entry>

    <entry key="RecursiveFunctionCall">Recursive call to function {0} is not supported.</entry>

    <entry key="SearchPathsNotFound">Search Path(s) ''{0}'' does not exist.  Please check the Search paths field in Settings - Advanced.</entry>
    <entry key="ShadowedFile">The file ''{0}'' already exists on the MATLAB path. Remove this file from the path to continue code generation. Try ''which -all {0}''</entry>

  </message>
</rsccat>

<!-- LocalWords:  Nondirect nonconstant ficolon cli dts FINF FGLOBALINHDL Un
-->
