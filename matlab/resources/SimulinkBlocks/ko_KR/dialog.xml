<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright 2024 The MathWorks, Inc.-->

<rsccat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" locale="ko_KR" product="SimulinkBlocks" xsi:noNamespaceSchemaLocation="../../resources/schema/msgcat.xsd">
  <message>
    <entry key="DataTypesTab">데이터형</entry>
    <entry key="AlgorithmTab">알고리즘</entry>
    <entry key="AlgorithmType">메서드: </entry>
    <entry key="AlgorithmMethod">알고리즘 메서드: </entry>
    <entry key="BreakPointsMin">절점 최솟값 {0,number,integer}:</entry>
    <entry key="BreakPointsMax">절점 최댓값 {0,number,integer}:</entry>
    <entry key="INTERMEDIATE_UNIFIEDDATATYPE">중간 결과 데이터형:</entry>
    <entry key="NumberOfIterations">반복 횟수:</entry>
    <entry key="NumberOfDataPoints">데이터 점 개수:</entry>
    <entry key="OutputWordLength">출력 워드 길이:</entry>
    <entry key="DisallowWideOutput">폭이 넓은 출력 허용 안 함</entry>
    <entry key="BmathfcnOutSignalType">출력 신호 유형:</entry>
    <entry key="BmathfcnOperator">함수:</entry>
    <entry key="PolynomialCoefficients">다항식 계수:</entry>
    <entry key="SL_DSCPT_SHIFT">이 블록은 산술적으로 신호의 비트 및/또는 신호의 이진 소수점을 시프트할 수 있습니다.\n이러한 동작의 효과는 2의 거듭제곱의 곱셈과 스케일링 변경의 조합으로 해석될 수 있습니다. 예를 들어, 비트 시프트 방향이 ''오른쪽''인 경우 2의 거듭제곱의 곱셈의 항은 다음과 같습니다.\n 2^( BinPtShiftNumber - BitShiftNumber )\n비트 시프트 방향이 ''양방향''인 경우 음수 값은 왼쪽 시프트를 나타냅니다. 비트 시프트에서 ''왼쪽'' 또는 ''오른쪽'' 방향인 경우 항상 양수 값을 사용하십시오.\n입력이 부동소수점 형식인 경우 2의 거듭제곱의 곱셈이 수행되지만 스케일링 변경은 적용되지 않습니다.</entry>
    <entry key="SL_DSCPT_ASSIGNMENT_SKIP_INIT">벡터 모드:\n\tY(E) = U1\n행렬 모드:\n\tY(R,C) = U1\n여기서\nU1 = 두 번째 입력 포트, E = 요소, R = 행, C = 열이고 E, R과 C는 블록의 대화 상자에서 또는 외부 입력 포트를 통해서 지정할 수 있습니다.</entry>
    <entry key="SL_DSCPT_IMPLICIT_ASSIGNMENT">1회 반복의 결과를 모든 반복의 결합인 Implicit Iterator Output에 할당합니다.</entry>
    <entry key="SL_DSCPT_SUBSYSTM">서브시스템 블록에 대한 설정을 선택하십시오.</entry>
    <entry key="SL_DSCPT_DTF">분자 계수는 벡터 또는 행렬 표현식일 수 있습니다. 분모 계수는 벡터여야 합니다. 출력 너비는 분자 계수의 행 개수와 같습니다. 계수를 z의 거듭제곱 내림차순으로 지정해야 합니다. </entry>
    <entry key="SL_DSCPT_DPULSEGEN">출력 펄스:\n\n if (t &gt;= PhaseDelay) &amp;&amp; Pulse is on\n Y(t) = Amplitude\n else\n Y(t) = 0\n end\n여기서 PhaseDelay는 위상 지연, Pulse는 펄스, Amplitude는 진폭입니다.\n펄스 유형에 따라 사용되는 계산 기법이 결정됩니다. \n\n시간 기반은 가변 스텝 솔버에 사용하기에 권장되고 샘플 기반은 고정 스텝 솔버에 또는 가변 스텝 솔버를 사용하는 모델의 이산 부분 내에서 사용하기에 권장됩니다.</entry>
    <entry key="SL_DSCPT_FOH">일차 유지.</entry>
    <entry key="SL_DSCPT_ZOH">영차 유지.</entry>
    <entry key="SL_DSCPT_DERIV">수치 미분: Δu/Δt.</entry>
    <entry key="SL_DSCPT_DOT">입력의 내적.\ny = sum(conj(u1).*u2)</entry>
    <entry key="SL_DSCPT_MATGAIN">행렬 이득. y = Ku</entry>
    <entry key="SL_DSCPT_BACKLASH">불감대역 폭이 시스템의 재생량을 지정하는 백래시를 모델링합니다.</entry>
    <entry key="SL_DSCPT_BIAS">입력값에 편향을 더합니다.\n Y = U + Bias</entry>
    <entry key="SL_DSCPT_CMBLOGIC">진리표에서 입력 벡터의 요소(부울 값으로 취급됨)를 찾고 ''진리표'' 파라미터의 해당하는 행을 출력합니다. 진리표의 입력 쪽은 묵시적입니다.</entry>
    <entry key="SL_DSCPT_FRICTION">쿨롱 마찰 및 점성 마찰의 단순 모델.\ny = sign(x)*(Gain*abs(x)+Offset).</entry>
    <entry key="SL_DSCPT_DEADZONE">불감대 내의 입력에 대해 0을 출력합니다. 불감대를 벗어난 경우에는 시작 값 또는 끝 값으로 입력 신호를 오프셋합니다.</entry>
    <entry key="SL_DSCPT_HITCROSS">입력 신호가 [교차 검출 방향] 파라미터로 지정된 방향으로 [교차 검출 오프셋] 파라미터 값에 도달한 경우를 감지합니다. 블록이 신호, 메시지 또는 함수 호출 이벤트를 출력하도록 구성할 수 있습니다. 입력 신호가 지정된 방향으로 오프셋 값을 넘어서는 경우 블록은 [신호] 출력 유형에 대해 1을 출력하거나, [메시지] 출력 유형에 대해 메시지를 출력하거나 [함수 호출] 출력 유형에 대해 단일 함수 호출을 출력합니다. 메시지는 교차 검출 이벤트의 교차 유형, 인덱스, 시간과 오프셋을 포함합니다.</entry>
    <entry key="SL_DSCPT_HITSCHEDULER">시뮬레이션 중에 가변 스텝 솔버에 대한 주 시간 스텝을 스케줄링합니다. 인에이블 포트에 대한 입력이 논리값 true이면 블록이 시간 스텝을 스케줄링합니다. 블록은 Δt 입력값(단위: 초)과 현재 시뮬레이션 시간의 합으로 스케줄링할 시간 스텝을 계산합니다. \n\n블록 출력은 값이 스케줄링된 시간 스텝의 경우 true이고 그 외의 경우 false인 부울 신호 또는 함수 호출 이벤트일 수 있습니다.</entry>
    <entry key="SL_DSCPT_BITLOGIC">두 번째 피연산자 파라미터 값으로 uint8, uint16 또는 uint32 입력 포트 데이터에 대해 비트별 연산을 수행합니다. 16진수 값은 문자형 벡터로 입력될 수 있습니다(예: ''FF00'').</entry>
    <entry key="SL_DSCPT_LOOK_UP">지정된 테이블을 사용하여 입력값의 1차원 선형 보간을 수행합니다. 외삽은 테이블 경계 외부에서 수행됩니다.</entry>
    <entry key="SL_DSCPT_LOOKUPND">인덱스 탐색을 포함하여 n차원 보간 테이블 룩업을 수행합니다. 이 테이블은 N개의 변수로 함수를 샘플링한 표현입니다. 절점 세트는 입력 값을 테이블에서의 위치와 연관시킵니다. 첫 번째 차원은 위쪽(또는 왼쪽) 입력 포트에 대응됩니다.</entry>
    <entry key="SL_DSCPT_PRE_LOOKUP">\"절점 데이터\"로 정의된 구간의 세트에서 입력 u의 위치를 찾습니다. 인덱스 k와 소수부 f를 출력합니다. 여기서 k는 입력을 포함하는 구간을 지정하고 f는 구간에서 입력의 정규화된 위치입니다.</entry>
    <entry key="SL_DSCPT_POLYVAL">다항식 계산. 다항식 계수 배열 P로 주어지는 P(u)를 계산합니다. P는 가장 높은 차수에서 가장 낮은 차수로 정렬되며, 이는 MATLAB의 polyval 함수에서 허용하는 형식입니다.</entry>
    <entry key="SL_DSCPT_MATH">로그 함수, 지수 함수, 거듭제곱 함수 및 모듈로 함수를 포함하는 수학 함수입니다. 함수에 둘 이상의 인수가 있는 경우 첫 번째 인수는 위쪽(또는 왼쪽) 입력 포트에 대응됩니다.</entry>
    <entry key="SL_DSCPT_SQRT">제곱근 함수, 부호 있는 제곱근 함수 및 역수 제곱근 함수를 포함하는 제곱근 함수입니다.</entry>
    <entry key="SL_DSCPT_RECIP">역수 함수: 뉴턴-랩슨(Newton-Raphson) 근사법을 사용하여 구현됩니다.</entry>
    <entry key="SL_DSCPT_MINMAX">입력의 최솟값 또는 최댓값을 출력합니다. 입력이 한 개이면 입력 벡터에 연산자가 적용됩니다. 입력이 여러 개이면 입력 전체에 연산자가 적용됩니다.</entry>
    <entry key="SL_DSCPT_PERMUTE_DIMENSIONS">차원을 치환하여 입력 신호의 요소를 재배열합니다(예: 첫 번째 차원과 세 번째 차원을 교환). ''순서'' 파라미터를 사용하여 입력 신호의 차원에 적용할 치환을 지정합니다. 이 파라미터 값은 요소를 N개 가진 벡터여야 하고 여기서 N은 입력 신호의 차원 수입니다. 치환 벡터의 요소는 1에서 N까지 값의 재배열이어야 합니다. 예를 들어, 5×3 입력 신호에 치환 벡터 [2 1]이 적용되면 3×5 출력 신호(즉 입력 신호의 전치)가 만들어집니다.</entry>
    <entry key="SL_DSCPT_QUANTIZE">지정된 간격으로 입력을 이산화합니다.</entry>
    <entry key="SL_DSCPT_RATELIM">신호의 상승 레이트 및 하강 레이트를 제한합니다.</entry>
    <entry key="SL_DSCPT_RELOP">선택된 관계 연산자를 입력에 적용하고 결과를 출력합니다. 위쪽(또는 왼쪽) 입력이 첫 번째 피연산자에 대응됩니다.</entry>
    <entry key="SL_DSCPT_FIND">0이 아닌 입력값의 선형 인덱스 또는 첨자를 찾습니다. (선형 인덱스의 변환은 첫 번째 차원을 따라 수행됩니다.) 추가 출력 포트에 0이 아닌 입력값을 표시하려면 ''0이 아닌 입력값에 대한 출력 포트 표시''를 선택하십시오.</entry>
    <entry key="SL_DSCPT_RELAY">입력을 지정된 임계값과 비교하여 지정된 ''켜짐'' 또는 ''꺼짐'' 값을 출력합니다. 릴레이의 켜짐/꺼짐 상태는 상한과 하한 사이의 입력에 영향을 받지 않습니다.</entry>
    <entry key="SL_DSCPT_ROUNDING">반올림 연산자.</entry>
    <entry key="SL_DSCPT_SATURATE">입력 신호를 상한 및 하한 포화값으로 제한합니다.</entry>
    <entry key="SL_DSCPT_UDELAY">지정된 샘플 수만큼 입력 신호를 지연합니다.</entry>
    <entry key="SL_DSCPT_SIGNUM">실수 입력의 경우 입력값이 양수이면 1, 음수이면 -1, 0이면 0을 출력합니다. 복소수 부동소수점 입력의 경우 출력은 sign(u) = u ./ abs(u)입니다.  </entry>
    <entry key="SL_DSCPT_TRIGONOMETRY">삼각 함수 및 쌍곡 함수. 함수에 둘 이상의 인수가 있는 경우 첫 번째 인수는 위쪽(또는 왼쪽) 입력 포트에 대응됩니다. sin, cos, sincos, cos +j sin 및 atan2 함수의 경우 출력값을 계산하는 데 CORDIC 근사도 사용할 수 있습니다.</entry>
    <entry key="SL_DSCPT_TDELAY">지정된 지연을 입력 신호에 적용합니다. 지연이 시뮬레이션 스텝 크기보다 큰 경우 최고의 정확도를 얻을 수 있습니다.</entry>
    <entry key="SL_DSCPT_VTDELAY">지연을 첫 번째 입력 신호에 적용합니다. 지연 유형이 가변 시간 지연인 경우 두 번째 입력값은 지연 시간 To를 지정합니다. 블록은 함수 y=u(t-To(t))를 구현합니다. 지연 유형이 가변 전송 지연인 경우 두 번째 입력값은 입력에서 순시 지연 시간 Ti를 지정합니다. 블록을 사용하여 파이프 내 액체의 비압축성 흐름과 같은 가변 전송 지연 현상을 시뮬레이션할 수 있습니다. 지연이 시뮬레이션 스텝 크기보다 큰 경우 최고의 정확도를 얻을 수 있습니다.</entry>
    <entry key="SL_DSCPT_MSGDELAY">전송 지연을 첫 번째 입력값의 엔터티에 적용합니다. 두 번째 입력값은 순시 지연 시간 ti를 지정합니다.</entry>
    <entry key="SL_DSCPT_XYGRAPH">지정된 좌표축 범위를 사용하여 첫 번째 입력(X) 대 두 번째 입력(Y)을 플로팅합니다. 시뮬레이션 속도를 높이려면 샘플 시간을 늘리십시오.</entry>
    <entry key="SL_DSCPT_BANDLIMNOISE">지정된 전력의 백색 잡음을 시뮬레이션합니다. 대역폭 감소로 인한 에너지 손실을 보정하기 위해 샘플 주기에 따라 신호 진폭이 증가됩니다. 연속 시스템에 사용합니다.</entry>
    <entry key="SL_DSCPT_CHIRP">주파수가 증가하거나 감소하는 사인파.</entry>
    <entry key="SL_DSCPT_CONSTANT">''상수 값'' 파라미터로 지정한 상수를 출력합니다. ''상수 값''이 벡터이고 ''벡터 파라미터를 1차원으로 해석''이 선택된 경우 상수 값을 1차원 배열로 처리합니다. 그렇지 않으면 상수 값과 차원이 동일한 행렬을 출력합니다.</entry>
    <entry key="SL_DSCPT_PULSEGEN">펄스 열을 출력합니다.</entry>
    <entry key="SL_DSCPT_RAMP">램프를 출력합니다.</entry>
    <entry key="SL_DSCPT_RANDNUM">정규(가우스) 분포 랜덤 신호를 출력합니다. 출력값은 지정된 시드값에 대해 반복될 수 있습니다.</entry>
    <entry key="SL_DSCPT_URANDNUM">균일하게 분포된 랜덤 신호를 출력합니다. 출력값은 지정된 시드값에 대해 반복될 수 있습니다.</entry>
    <entry key="SL_DSCPT_REPEATSEQ">반복 신호를 출력합니다. 주기는 시간 벡터의 마지막 값과 같습니다. 데이터 점 사이를 보간합니다.</entry>
    <entry key="SL_DSCPT_SIGGEN">다양한 파형을 출력합니다.\n Y(t) = Amp*Waveform(Freq, t)</entry>
    <entry key="SL_DSCPT_SIN_WAVE">사인파를 출력합니다.\n\n O(t) = Amp*Sin(Freq*t+Phase) + Bias\n여기서 Amp는 진폭, Freq는 주파수, Phase는 위상, Bias는 편향입니다.\n사인파 유형에 따라 사용되는 계산 기법이 결정됩니다. 두 유형의 파라미터는 다음 식을 통해 연관됩니다.\n\n주기당 샘플 수 = 2*pi / (주파수 * 샘플 시간)\n\n오프셋 샘플 수 = 위상 * 주기당 샘플 수 / (2*pi)\n\n장시간 실행으로 인한 수치적 문제(예: 절대 시간 오버플로)가 발생하는 경우 샘플 기반 사인파 유형을 사용하십시오.</entry>
    <entry key="SL_DSCPT_STEP">스텝을 출력합니다.</entry>
    <entry key="SL_DSCPT_CCVR">사용자 지정 코드 변수를 읽습니다.</entry>
    <entry key="SL_DSCPT_CCVW">사용자 지정 코드 변수에 씁니다.</entry>
    <entry key="SL_DSCPT_CCFCN">사용자 지정 코드 함수를 호출합니다.</entry>
    <entry key="SL_DSCPT_CFCN_BLK">C 코드를 통합합니다.</entry>
    <entry key="SL_DSCPT_PYFCN_BLK">Python 코드를 통합합니다.</entry>
    <entry key="SL_DSCPT_SWITCH">입력 2가 선택한 기준을 충족할 경우 입력 1을 통과시킵니다. 그렇지 않으면 입력 3을 통과시킵니다. 입력은 위에서 아래로(또는 왼쪽에서 오른쪽으로) 번호가 지정됩니다. 첫 번째 입력 포트와 세 번째 입력 포트는 데이터 포트이고 두 번째 입력 포트는 제어 포트입니다. 제어 포트 2에 대한 조건은 u2 &gt;= 임계값, u2 &gt; 임계값 또는 u2 ~= 0입니다.</entry>
    <entry key="SL_DSCPT_MANUALSWITCH">블록을 더블 클릭하여 두 입력값 사이의 전환을 출력합니다.\n</entry>
    <entry key="SL_DSCPT_ALGCONSTRAINT">입력 신호 f(z)를 0으로 제약하고 대수 상태 z를 출력합니다. 이 블록은 입력에서 0을 생성하는 데 필요한 값을 출력합니다. 출력은 피드백 경로를 통해 입력에 영향을 미쳐야 합니다. 대수 루프 솔버의 효율성을 향상시키려면 출력에 대한 초기 추측값을 제공하십시오.</entry>
    <entry key="SL_DSCPT_REAL_IMAG_TO_COMPLEX">실수 입력값 및/또는 허수 입력값에서 복소수 출력값을 생성합니다.</entry>
    <entry key="SL_DSCPT_COMPLEX_TO_REAL_IMAG">입력값의 실수 성분 및/또는 허수 성분을 출력합니다.</entry>
    <entry key="SL_DSCPT_MAGNITUDE_ANGLE_TO_COMPLEX">크기 입력값 및/또는 라디안 위상각 입력값에서 복소수 출력값을 생성합니다. 출력값을 계산하는 데 CORDIC 근사도 사용할 수 있습니다.</entry>
    <entry key="SL_DSCPT_COMPLEX_TO_MAGNITUDE_ANGLE">입력값의 크기 및/또는 입력값의 라디안 위상각을 계산합니다.</entry>
    <entry key="SL_DSCPT_PROBE">선에 대해 너비, 샘플 시간과 차원을 조사합니다. 복소 신호인지 감지합니다.</entry>
    <entry key="SL_DSCPT_MATIX_CONCATENATION">가로 결합 또는 세로 결합을 수행합니다. 1차원 벡터 입력 신호는 열 벡터(즉, [M×1] 행렬)로 처리됩니다. 출력은 항상 행렬입니다.</entry>
    <entry key="SL_DSCPT_POST">모델 이벤트를 게시합니다.</entry>
    <entry key="SL_DSCPT_INTERPND">미리 계산된 인덱스와 소수값을 사용하여 n차원 테이블에 보간(또는 외삽)을 수행합니다.\n\n''테이블 차원 수''와 ''테이블 데이터''를 사용하여 ''n''개 변수의 함수를 나타내는 n차원 테이블을 지정하십시오.\n\n''하위 테이블 선택 차원 수''로 블록이 테이블 데이터의 서브셋만 보간하도록 지정할 수 있습니다. 그 값으로 ''k''를 지정하면 블록은 ''n-k''개 쌍의 인덱스 입력값 및 소수부 입력값과 ''k''개의 하위 테이블 선택 입력값을 표시합니다. 디폴트 값은 0(즉, 전체 테이블 보간)입니다. 선택 입력값을 사용하여 보간할 하위 테이블의 인덱스를 지정하십시오.\n\nPrelookup 블록을 사용하여 인덱스, 소수부와 선택 입력값을 계산할 수 있습니다.</entry>
    <entry key="SL_DSCPT_WSTIME">입력 신호에 가중 샘플 시간을 더하거나, 빼거나, 곱하거나 나누거나 가중 샘플 시간 또는 가중 샘플 레이트를 출력하기만 합니다.</entry>
    <entry key="SL_DSCPT_UMINUS">신호의 단항 마이너스</entry>
    <entry key="SL_DSCPT_ALGCONSTRAINTBLOCK">입력 신호 f(z)를 제약하고 대수 상태 z를 출력합니다.\n이 블록은 선택된 제약 조건을 만족하는 값 z를 출력합니다. 출력은 피드백 경로를 통해 입력에 영향을 미쳐야 합니다.\n대수 루프 솔버의 효율성을 향상시키려면 솔버를 선택하고, 허용오차를 변경하고 출력의 ''초기 추측값''을 제공하십시오.</entry>
    <entry key="SL_DSCPT_STR2NUM">string형 신호를 숫자형 신호로 변환합니다.</entry>
    <entry key="SL_DSCPT_SPRINTF">형식이 지정된 데이터를 문자열에 씁니다.</entry>
    <entry key="SL_DSCPT_DTYPE_DUPLICATE">모든 입력값이 강제로 정확히 동일한 데이터형을 갖도록 합니다.</entry>
    <entry key="SL_DSCPT_DLOOKUPND">테이블 데이터에서 요소, 벡터, 또는 2차원 행렬을 선택합니다. 2차원 테이블에서 벡터를 선택한 경우 출력 벡터는 모델 구성 설정에 따라 열 또는 행이 될 수 있습니다.\n\n블록 입력은 0부터 시작하는 인덱스입니다(예: 3을 입력하면 그 차원의 네 번째 요소 반환). 첫 번째 선택 인덱스는 위쪽(또는 왼쪽) 입력 포트에 대응됩니다.</entry>
    <entry key="SL_DSCPT_SECOND_ORDER_INTEGRATOR">입력 신호에 대한 2차 연속시간 적분.</entry>
    <entry key="SL_DSCPT_FIR">FIR 필터를 사용하여 시간에 따른 입력의 각 채널을 독립적으로 필터링합니다. 조정 가능형 대화 상자 파라미터 또는 별도의 입력 포트를 사용하여 필터 계수를 지정할 수 있으며, 이는 시변 계수에 유용합니다. \n\nDirect Form 이외의 필터 구조를 사용하려면 DSP System Toolbox 라이선스가 필요합니다.</entry>
    <entry key="SL_DSCPT_IIR">이산 IIR 필터를 사용하여 시간에 따른 입력의 각 채널을 독립적으로 필터링합니다. 분자 및 분모 계수를 1/z의 거듭제곱 오름차순으로 지정하십시오. \n\nDirect form II 이외의 필터 구조를 사용하려면 DSP System Toolbox 라이선스가 필요합니다.</entry>
    <entry key="SL_DSCPT_TRANSFERFCN">z 변환 전달 함수를 구현합니다. 분자 및 분모 계수를 z의 거듭제곱 내림차순으로 지정하십시오. 분모의 차수는 분자의 차수보다 크거나 같아야 합니다.</entry>
    <entry key="SL_DSCPT_ALLPOLE">Allpole 필터를 사용하여 시간에 따른 입력의 각 채널을 독립적으로 필터링합니다. 조정 가능형 대화 상자 파라미터 또는 별도의 입력 포트를 사용하여 필터 계수를 지정할 수 있으며, 이는 시변 계수를 지정하는 데 유용합니다.\n\nDirect form 필터 구조 또는 Direct form 전치 필터 구조를 사용하는 경우 선행 분모 계수는 1이어야 합니다.</entry>
    <entry key="SL_DSCPT_DTC">입력을 출력의 데이터형과 스케일링으로 변환합니다. \n\n이 변환에는 다음 두 가지 가능한 목표가 있습니다. 첫 번째 목표는 입력 및 출력의 실제 값을 동일하게 하는 것입니다. 두 번째 목표는 입력 및 출력의 저장된 정수 값을 동일하게 하는 것입니다. 오버플로 및 양자화 오차가 발생할 경우 목표를 완전히 달성하지 못할 수 있습니다.</entry>
    <entry key="SL_DSCPT_MPSWITCH">첫 번째 입력의 잘린 값에 상응하는 입력 신호를 통과시킵니다. 입력은 위에서 아래로(또는 왼쪽에서 오른쪽으로) 번호가 지정됩니다. 첫 번째 입력 포트는 제어 포트입니다. 나머지 입력 포트는 데이터 포트입니다.</entry>
    <entry key="Magnitude_CB">크기</entry>
    <entry key="Angle_CB">각</entry>
    <entry key="Magnitudeandangle_CB">크기와 각</entry>
    <entry key="CReal_CB">실수</entry>
    <entry key="CImag_CB">허수</entry>
    <entry key="Realandimag_CB">실수와 허수</entry>
    <entry key="None_CB">안 함</entry>
    <entry key="Linear_CB">선형</entry>
    <entry key="Linear_PointSlope_CB">선형 점-기울기</entry>
    <entry key="Linear_Lagrange_CB">선형 라그랑주</entry>
    <entry key="SPEED_CB">속도</entry>
    <entry key="PRECISION_CB">정밀도</entry>
    <entry key="Warning_CB">경고</entry>
    <entry key="Error_CB">오류</entry>
    <entry key="Time_based_CB">시간 기반</entry>
    <entry key="Sample_based_CB">샘플 기반</entry>
    <entry key="Timebased_CB">시간 기반</entry>
    <entry key="Samplebased_CB">샘플 기반</entry>
    <entry key="Exact_CB">엄밀</entry>
    <entry key="Newton_Raphson_CB">뉴턴-랩슨(Newton-Raphson)</entry>
    <entry key="auto_CB">자동</entry>
    <entry key="real_CB">실수</entry>
    <entry key="complex_CB">복소수</entry>
    <entry key="Explicit_CB">명시적인 값</entry>
    <entry key="EvenSpacing_CB">균일 간격</entry>
    <entry key="BreakpointObject_CB">Breakpoint 객체:</entry>
    <entry key="TableAndBreakpoints_CB">테이블 및 절점</entry>
    <entry key="LookupTableObject_CB">Lookup table 객체</entry>
    <entry key="OutputIndexAndFrac_CB">인덱스와 소수</entry>
    <entry key="OutputIndFracAsBus_CB">버스로 인덱스와 소수</entry>
    <entry key="OutputIndexOnly_CB">인덱스만</entry>
    <entry key="Flat_CB">평탄</entry>
    <entry key="None_Flat_CB">안 함 - 평탄</entry>
    <entry key="Nearest_CB">최근접이웃</entry>
    <entry key="Clip_CB">자르기</entry>
    <entry key="None_Clip_CB">안 함 - 자르기</entry>
    <entry key="Akima_CB">아키마 스플라인</entry>
    <entry key="TrigLutInheritViaInput">상속: 입력을 통해 상속</entry>
    <entry key="Linear_indices_CB">선형 인덱스</entry>
    <entry key="Subscripts_CB">첨자</entry>
    <entry key="Same_as_input_CB">입력과 동일</entry>
    <entry key="internal_CB">내부</entry>
    <entry key="external_CB">외부</entry>
    <entry key="none_CB">안 함</entry>
    <entry key="rising_CB">상승</entry>
    <entry key="falling_CB">하강</entry>
    <entry key="either_CB">양쪽 모두 가능</entry>
    <entry key="both_CB">둘 다</entry>
    <entry key="Variable_time_delay_CB">가변 시간 지연</entry>
    <entry key="Variable_transport_delay_CB">가변 전송 지연</entry>
    <entry key="MsgDelay_time_CB">시간 지연</entry>
    <entry key="MsgDelay_transport_CB">전송 지연</entry>
    <entry key="Ceiling_CB">올림(Ceiling)</entry>
    <entry key="Convergent_CB">수렴(Convergent)</entry>
    <entry key="Floor_CB">내림(Floor)</entry>
    <entry key="Round_CB">반올림(Round)</entry>
    <entry key="Simplest_CB">최대단순(Simplest)</entry>
    <entry key="Zero_CB">0 방향(Zero)</entry>
    <entry key="Frame_based_CB">프레임 기반</entry>
    <entry key="Use_data_type_of_Constant_value_CB">'상수 값'의 데이터형 사용</entry>
    <entry key="More_dot_CB">더 보기...</entry>
    <entry key="Evenly_spaced_points_CB">균일 간격의 점</entry>
    <entry key="Linear_search_CB">선형 탐색</entry>
    <entry key="Binary_search_CB">이진 탐색</entry>
    <entry key="Clip_to_range_CB">범위에 맞춰 자르기</entry>
    <entry key="Linear_extrapolation_CB">선형 외삽</entry>
    <entry key="Zero_based_CB">0부터 시작</entry>
    <entry key="One_based_CB">1부터 시작</entry>
    <entry key="Use_simulation_time_CB">시뮬레이션 시간 사용</entry>
    <entry key="Use_external_signal_CB">외부 신호 사용</entry>
    <entry key="Rising_CB">상승</entry>
    <entry key="Falling_CB">하강</entry>
    <entry key="Either_CB">양쪽 모두 가능</entry>
    <entry key="Level_CB">레벨</entry>
    <entry key="Level_hold_CB">레벨 유지</entry>
    <entry key="DialogParameters_CB">대화 상자 파라미터</entry>
    <entry key="InputPort_CB">입력 포트</entry>
    <entry key="DirectForm_CB">Direct form</entry>
    <entry key="DirectFormSym_CB">Direct form 대칭</entry>
    <entry key="DirectFormAsym_CB">Direct form 반대칭</entry>
    <entry key="DirectFormTransposed_CB">Direct form 전치</entry>
    <entry key="LatticeMA_CB">격자 MA</entry>
    <entry key="LatticeAR_CB">격자 AR</entry>
    <entry key="DF1_CB">Direct form I</entry>
    <entry key="DF1T_CB">Direct form I 전치</entry>
    <entry key="DF2_CB">Direct form II</entry>
    <entry key="DF2T_CB">Direct form II 전치</entry>
    <entry key="SL_DSCPT_UnitConversion">유효한 단위 변환을 수행합니다.</entry>
    <entry key="Auto_CB">자동</entry>
    <entry key="Line_Search_CB">직선 탐색</entry>
    <entry key="Trust_Region_CB">신뢰 영역</entry>
    <entry key="SL_DSCPT_FirstOrderHold">입력 신호의 연속 조각별 선형 근사를 출력합니다.</entry>
    <entry key="num_CB">신호</entry>
    <entry key="msg_CB">메시지</entry>
    <entry key="fcn_CB">함수 호출</entry>
    <entry key="SL_DSCPT_VPG">
  입력 듀티 사이클(D) 및 주기(P)로 반복 펄스 신호를 출력합니다.\n\n출력 펄스는 다음과 같이 주어집니다.\n\n y(t) = 1 if t(k) &lt;= t &lt; t(k) + pw(k)\n = 0 if t(k) + pw(k) &lt;= t &lt; t(k) + P(k)\n\n여기서 t(k)는 'k-1'개 펄스 이후의 시간이고 pw(k)는 펄스 폭으로서 t(k)에서의 D(k) 입력값과 P(k) 입력값의 곱, 즉 pw(k) = P(k) * D(k)입니다.\n\n일반적으로 펄스 폭은 0보다 커야 하고 P(k)보다 작아야 합니다.\n\n'제로 펄스 폭 허용' 체크박스를 선택하면 시뮬레이션하는 동안에 블록이 펄스 폭이 0이 되는 것을 허용하도록 구성합니다. 그러나 이는 블록에 직접 피드스루가 있어야 하고 대수 루프를 야기할 수 있습니다.\n\n고정된 샘플 시간 간격으로 출력 신호 값을 생성하려면 '고정 시간 간격으로 실행' 체크박스를 선택하십시오.
</entry>
    <entry key="ContinuousLinearBlocksParameterTunabilityAuto">자동</entry>
    <entry key="ContinuousLinearBlocksParameterTunabilityOptimized">최적화됨</entry>
    <entry key="ContinuousLinearBlocksParameterTunabilityUnconstrained">제약 없음</entry>
    <entry key="SL_DSCPT_CTF">분자 계수는 벡터 또는 행렬 표현식일 수 있습니다. 분모 계수는 벡터여야 합니다. 출력 너비는 분자 계수의 행 개수와 같습니다. 계수를 s의 거듭제곱 내림차순으로 지정해야 합니다. \n\n'파라미터 조정 가능성'은 분자 계수 및 분모 계수에 대한 런타임 조정 가능성 수준을 제어합니다. \n'자동': Simulink에서 가장 적합한 조정 가능성 수준을 선택하도록 허용합니다. \n'최적화됨': 조정 가능성이 성능을 위해 최적화됩니다. \n'제약 없음': 시뮬레이션 타깃 전체에 걸쳐 조정 가능성에 제약이 없습니다.
</entry>
    <entry key="SL_DSCPT_CSS">
  상태공간 모델:\n dx/dt = Ax + Bu\n y = Cx + Du \n\n'파라미터 조정 가능성'은 A, B, C, D의 런타임 조정 가능성 수준을 제어합니다. \n'자동': Simulink에서 가장 적합한 조정 가능성 수준을 선택하도록 허용합니다. \n'최적화됨': 조정 가능성이 성능을 위해 최적화됩니다. \n'제약 없음': 시뮬레이션 타깃 전체에 걸쳐 조정 가능성에 제약이 없습니다. \n\n'처음에 0으로 지정했던 D 행렬에 0이 아닌 값 허용' 체크박스를 선택하려면 블록에 직접 피드스루가 있어야 하며 이 체크박스 선택 시 대수 루프가 발생할 수 있습니다.
</entry>
    <entry key="SL_DSCPT_CZP">
      영점의 경우 행렬 표현식입니다. 극점 및 이득의 경우 벡터 표현식입니다. 출력 너비는 영점 행렬에서는 열 개수와 같고, 영점이 벡터인 경우에는 1입니다.\n\n'파라미터 조정 가능성'은 영점, 극점, 이득의 런타임 조정 가능성 수준을 제어합니다. \n'자동': Simulink에서 가장 적합한 조정 가능성 수준을 선택하도록 허용합니다. \n'최적화됨': 조정 가능성이 성능을 위해 최적화됩니다. \n'제약 없음': 시뮬레이션 타깃 전체에 걸쳐 조정 가능성에 제약이 없습니다.
    </entry>
    <entry key="SL_DSCPT_SLIDEGAIN">N/A</entry>
    <entry key="SL_DSCPT_ABSVAL">y = |u|</entry>
    <entry key="SL_DSCPT_SCOPE">N/A</entry>
    <entry key="MagnitudeAndAngle_CB">MagnitudeAndAngle</entry>
    <entry key="RealAndImag_CB">RealAndImag</entry>
    <entry key="int8_CB">int8</entry>
    <entry key="uint8_CB">uint8</entry>
    <entry key="int16_CB">int16</entry>
    <entry key="uint16_CB">uint16</entry>
    <entry key="int32_CB">int32</entry>
    <entry key="uint32_CB">uint32</entry>
    <entry key="double_CB">double</entry>
    <entry key="single_CB">single</entry>
    <entry key="square_CB">square</entry>
    <entry key="sqrt_CB">sqrt</entry>
    <entry key="boolean_CB">boolean</entry>
    <entry key="One_CB">1</entry>
    <entry key="Two_CB">2</entry>
    <entry key="Three_CB">3</entry>
    <entry key="Four_CB">4</entry>
    <entry key="OneSpace_CB">   1   </entry>
    <entry key="TwoSpace_CB">   2   </entry>
    <entry key="ThreeSpace_CB">   3   </entry>
    <entry key="FourSpace_CB">   4   </entry>
    <entry key="CORDIC_CB">CORDIC</entry>
    <entry key="LUT_CB">Lookup</entry>
    <entry key="TrigAngleRadian">radian</entry>
    <entry key="TrigAngleRevolution">revolution</entry>
    <entry key="x_CB">x</entry>
    <entry key="dx_dt_CB">dxdt</entry>
    <entry key="dx_div_dt_CB">dx/dt</entry>
    <entry key="ZeroCross_CB">ZeroCross</entry>
    <entry key="ZeroCrossTol_CB">ZeroCrossTolerance</entry>
    <entry key="Func_Eq_0_CB">f(z) = 0</entry>
    <entry key="Func_Eq_Z_CB">f(z) = z</entry>
  </message>
</rsccat>
