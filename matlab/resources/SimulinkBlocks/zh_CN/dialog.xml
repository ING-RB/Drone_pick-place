<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright 2025 The MathWorks, Inc.-->

<rsccat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" locale="zh_CN" product="SimulinkBlocks" xsi:noNamespaceSchemaLocation="../../resources/schema/msgcat.xsd">
  <message>
    <entry key="DataTypesTab">数据类型</entry>
    <entry key="AlgorithmTab">算法</entry>
    <entry key="AlgorithmType">方法: </entry>
    <entry key="AlgorithmMethod">算法方法: </entry>
    <entry key="BreakPointsMin">断点最小值 {0,number,integer}:</entry>
    <entry key="BreakPointsMax">断点最大值 {0,number,integer}:</entry>
    <entry key="INTERMEDIATE_UNIFIEDDATATYPE">中间结果数据类型:</entry>
    <entry key="NumberOfIterations">迭代次数:</entry>
    <entry key="NumberOfDataPoints">数据点数:</entry>
    <entry key="OutputWordLength">输出字长:</entry>
    <entry key="DisallowWideOutput">不允许宽输出</entry>
    <entry key="BmathfcnOutSignalType">输出信号类型:</entry>
    <entry key="BmathfcnOperator">函数:</entry>
    <entry key="PolynomialCoefficients">多项式系数:</entry>
    <entry key="SL_DSCPT_SHIFT">此模块可以对信号的位和/或二进制小数点进行算术移位。\n这些操作的效果可以解释为乘以 2 的幂并更改定标。例如，当位移方向为 ''右'' 时，2 的幂乘数项为\n 2^( BinPtShiftNumber - BitShiftNumber )\n当位移方向为 ''双向'' 时，负值表示左移位。对于 ''左'' 或 ''右'' 方向，请始终使用正值进行位移。\n如果输入是浮点类型，则执行 2 的幂乘法运算，但不应用定标更改。</entry>
    <entry key="SL_DSCPT_ASSIGNMENT_SKIP_INIT">对于向量模式:\n\t Y(E) = U1\n对于矩阵模式:\n\tY(R,C) = U1\n其中\nU1 = 第二个输入端口，E = 元素数，R = 行数，C = 列数，且 E、R 和 C 可以在模块的对话框中指定，也可以通过外部输入端口指定。</entry>
    <entry key="SL_DSCPT_IMPLICIT_ASSIGNMENT">将一次迭代的结果分配给隐式迭代器输出，隐式迭代器输出是所有迭代的串联。</entry>
    <entry key="SL_DSCPT_SUBSYSTM">选择子系统模块的设置。</entry>
    <entry key="SL_DSCPT_DTF">分子系数可以是向量或矩阵表达式。分母系数必须为向量。输出宽度等于分子系数中的行数。您应按照 z 的幂的降序来指定系数。 </entry>
    <entry key="SL_DSCPT_DPULSEGEN">输出脉冲:\n\n if (t &gt;= PhaseDelay) &amp;&amp; Pulse is on\n Y(t) = Amplitude\n else\n Y(t) = 0\n end\n\n脉冲类型确定使用的计算方法。\n\n建议在变步长求解器中使用 "基于时间"，在定步长求解器或在使用变步长求解器的模型的离散部分使用 "基于采样"。</entry>
    <entry key="SL_DSCPT_FOH">一阶保持。</entry>
    <entry key="SL_DSCPT_ZOH">零阶保持。</entry>
    <entry key="SL_DSCPT_DERIV">数值导数: Δu/Δt。</entry>
    <entry key="SL_DSCPT_DOT">输入的点(内)积。\ny = sum(conj(u1).*u2)</entry>
    <entry key="SL_DSCPT_MATGAIN">矩阵增益。y = Ku</entry>
    <entry key="SL_DSCPT_BACKLASH">建立间隙模型，其中死区宽度指定系统中的间隙量。</entry>
    <entry key="SL_DSCPT_BIAS">将偏置添加到输入，\n Y = U + 偏置。</entry>
    <entry key="SL_DSCPT_CMBLOGIC">在真值表中查找输入向量的元素(被视为布尔值)，并输出 ''真值表'' 参数的对应行。真值表的输入端是隐式的。</entry>
    <entry key="SL_DSCPT_FRICTION">库仑和粘性摩擦的简单模型。\ny = sign(x)*(增益*abs(x)+偏移量)。</entry>
    <entry key="SL_DSCPT_DEADZONE">输入位于死区内时输出零。超出死区时，按起始值或结束值对输入信号进行偏移。</entry>
    <entry key="SL_DSCPT_HITCROSS">检测输入信号何时在由 "穿越方向" 参数指定的方向上到达 "穿越偏移量" 参数值。您可以将该模块配置为输出信号、消息或函数调用事件。如果输入信号在指定方向上越过偏移值，则模块输出 1 (对于信号输出类型)、消息(对于消息输出类型)或单一函数调用(对于函数调用输出类型)。消息包含穿越事件的穿越类型、索引、时间和偏移量。</entry>
    <entry key="SL_DSCPT_HITSCHEDULER">在仿真期间为变步长求解器调度主时间步。当使能端口的输入为逻辑值 true 时，该模块调度一个时间步。该模块计算要调度的时间步，计算方式是取 Δt 输入值(以秒为单位)与当前仿真时间之和。\n\n模块输出可以是布尔信号(对于调度的时间步，其值为 true，否则为 false)，也可以是函数调用事件。</entry>
    <entry key="SL_DSCPT_BITLOGIC">用来自第二个操作数参数的值对 uint8、uint16 或 uint32 输入端口数据执行按位运算。可以以字符向量形式输入十六进制值，例如 ''FF00''。</entry>
    <entry key="SL_DSCPT_LOOK_UP">使用指定的表对输入值执行一维线性插值。外插在表边界之外执行。</entry>
    <entry key="SL_DSCPT_LOOKUPND">执行 n 维插值表查找，包括索引搜索。该表是函数的 N 个变量的采样表示形式。断点集将输入值与表中的位置相关联。第一个维度对应于顶部(或左侧)输入端口。</entry>
    <entry key="SL_DSCPT_PRE_LOOKUP">在由 \"断点数据\" 定义的区间集上定位输入 u 的位置。输出索引 k 和区间比 f，其中 k 指定包含输入的区间，f 是输入在该区间上的归一化位置。</entry>
    <entry key="SL_DSCPT_POLYVAL">多项式计算。计算多项式系数数组 P 给定的 P(u)。P 按阶数从高到低排序，MATLAB 的 polyval 函数可接受这种形式。</entry>
    <entry key="SL_DSCPT_MATH">数学函数，包括对数、指数、幂和模数函数。当函数有多个参数时，第一个参数对应于顶部(或左侧)输入端口。</entry>
    <entry key="SL_DSCPT_SQRT">平方根函数包括平方根、有符号平方根和平方根倒数函数。</entry>
    <entry key="SL_DSCPT_RECIP">倒数函数: 使用牛顿-拉夫逊逼近方法实现。</entry>
    <entry key="SL_DSCPT_MINMAX">输出输入的最小值或最大值。对于单一输入，运算符应用于整个输入向量。对于多个输入，运算符应用于所有这些输入。</entry>
    <entry key="SL_DSCPT_PERMUTE_DIMENSIONS">通过置换输入信号的维度（例如交换输入信号的第一个和第三个维度）来重新排列输入信号的元素。使用 ''阶'' 参数指定要应用于输入信号维度的置换。此参数的值必须为 N 元素向量，其中 N 是输入信号的维数。置换向量的元素必须为值 1 到 N 的重新排列。例如，应用于 5×3 输入信号的置换向量 [2 1] 产生 3×5 输出信号，即输入信号的转置。</entry>
    <entry key="SL_DSCPT_QUANTIZE">在给定区间上离散化输入。</entry>
    <entry key="SL_DSCPT_RATELIM">限制信号的上升沿和下降沿速率。</entry>
    <entry key="SL_DSCPT_RELOP">将所选关系运算符应用于输入并输出结果。顶部(或左侧)输入对应于第一个操作数。</entry>
    <entry key="SL_DSCPT_FIND">查找输入的非零值的线性索引或下标。(线性索引的转换在第一个维度上进行。)选择 ''显示非零输入值的输出端口'' 以显示附加输出端口上的非零输入值。</entry>
    <entry key="SL_DSCPT_RELAY">通过将输入与指定的阈值进行比较，输出指定的 ''on'' 或 ''off'' 值。中继的 on/off 状态不受上限和下限之间输入的影响。</entry>
    <entry key="SL_DSCPT_ROUNDING">舍入运算。</entry>
    <entry key="SL_DSCPT_SATURATE">将输入信号限制在饱和上界和下界值之间。</entry>
    <entry key="SL_DSCPT_UDELAY">将输入信号延迟指定数量的采样。</entry>
    <entry key="SL_DSCPT_SIGNUM">对于实数输入，输出 1 表示正输入，-1 表示负输入，0 表示 0 输入。对于复数浮点输入，输出遵循 sign(u) = u ./ abs(u)  </entry>
    <entry key="SL_DSCPT_TRIGONOMETRY">三角函数和双曲函数。当函数有多个参数时，第一个参数对应于顶部(或左侧)输入端口。对于 sin、cos、sincos、cos +j sin、atan2 函数，也可以用 CORDIC 逼近来计算输出。</entry>
    <entry key="SL_DSCPT_TDELAY">对输入信号应用指定的延迟。当延迟大于仿真步长时，获得的准确性最高。</entry>
    <entry key="SL_DSCPT_VTDELAY">对第一个输入信号应用延迟。如果延迟类型为可变时滞，则第二个输入指定延迟时间 To。该模块实现函数 y=u(t-To(t))。如果延迟类型是可变传输延迟，则第二个输入指定输入端的瞬时延迟时间 Ti。该模块可用于仿真可变传输延迟现象，如管道中的不可压缩液体流动。当延迟大于仿真步长时，获得的准确性最高。</entry>
    <entry key="SL_DSCPT_MSGDELAY">在第一个输入处对实体应用传输延迟。第二个输入指定瞬时延迟时间 ti。</entry>
    <entry key="SL_DSCPT_XYGRAPH">使用指定的坐标区范围绘制第一个输入(X)对第二个输入(Y)的图。增加采样时间以加快仿真速度。</entry>
    <entry key="SL_DSCPT_BANDLIMNOISE">对指定功率的白噪声进行仿真。信号振幅随着采样周期的增加而增大，以补偿因带宽减小而造成的能量损失。用于连续系统。</entry>
    <entry key="SL_DSCPT_CHIRP">频率增大或减小的正弦波。</entry>
    <entry key="SL_DSCPT_CONSTANT">输出由 ''常量值'' 参数指定的常量。如果 ''常量值'' 是向量并且 '将向量参数解释为一维向量'' 处于启用状态，则将常量值视为一维数组。否则，输出其维数与常量值相同的矩阵。</entry>
    <entry key="SL_DSCPT_PULSEGEN">输出脉冲序列。</entry>
    <entry key="SL_DSCPT_RAMP">输出斜坡。</entry>
    <entry key="SL_DSCPT_RANDNUM">输出正态(高斯)分布的随机信号。给定种子的输出可以重复。</entry>
    <entry key="SL_DSCPT_URANDNUM">输出均匀分布的随机信号。给定种子的输出可以重复。</entry>
    <entry key="SL_DSCPT_REPEATSEQ">输出重复信号。周期等于时间向量中的最后一个值。在数据点之间进行插值。</entry>
    <entry key="SL_DSCPT_SIGGEN">输出各种波形:\n Y(t) = Amp*Waveform(Freq, t)</entry>
    <entry key="SL_DSCPT_SIN_WAVE">输出正弦波:\n\n O(t) = Amp*Sin(Freq*t+相位) + 偏置\n\n正弦类型确定使用的计算方法。这两种类型的参数通过以下方式相关联:\n\n每个周期的采样数 = 2*pi / (频率 * 采样时间)\n\n偏移采样数 = 相位 * 每周期采样数 / (2*pi)\n\n如果由于长时间运行(例如，绝对时间溢出)而出现数值问题，请使用基于采样的正弦类型。</entry>
    <entry key="SL_DSCPT_STEP">输出一个阶跃信号。</entry>
    <entry key="SL_DSCPT_CCVR">读取自定义代码变量。</entry>
    <entry key="SL_DSCPT_CCVW">写入自定义代码变量。</entry>
    <entry key="SL_DSCPT_CCFCN">调用自定义代码函数。</entry>
    <entry key="SL_DSCPT_CFCN_BLK">集成 C 代码。</entry>
    <entry key="SL_DSCPT_PYFCN_BLK">集成 Python 代码。</entry>
    <entry key="SL_DSCPT_SWITCH">当输入 2 满足所选条件时，输入 1 通过；否则，输入 3 通过。输入从上到下(或从左到右)进行编号。第一个和第三个输入端口是数据端口，第二个输入端口是控制端口。控制端口 2 的条件是 u2 &gt;= 阈值，u2 &gt; 阈值或 u2 ~= 0。</entry>
    <entry key="SL_DSCPT_MANUALSWITCH">通过双击模块使输出在两个输入之间切换。\n</entry>
    <entry key="SL_DSCPT_ALGCONSTRAINT">将输入信号 f(z) 限制为零，并输出代数状态 z。此模块输出使得输入端为零的必需值。输出必须通过某种反馈路径影响输入。通过提供输出的初始估计值可提高代数环求解器的效率。</entry>
    <entry key="SL_DSCPT_REAL_IMAG_TO_COMPLEX">基于实数输入和/或虚数输入构造复数输出。</entry>
    <entry key="SL_DSCPT_COMPLEX_TO_REAL_IMAG">输出输入的实部和/或虚部。</entry>
    <entry key="SL_DSCPT_MAGNITUDE_ANGLE_TO_COMPLEX">基于幅值和/或相位角弧度输入构造复数输出。也可以使用 CORDIC 逼近来计算输出。</entry>
    <entry key="SL_DSCPT_COMPLEX_TO_MAGNITUDE_ANGLE">计算输入的幅值和/或相位角弧度。</entry>
    <entry key="SL_DSCPT_PROBE">探测信号线的宽度、采样时间和维度。检测信号是否为复信号。</entry>
    <entry key="SL_DSCPT_MATIX_CONCATENATION">执行水平或垂直串联。一维向量输入信号被视为列向量，即 [M×1] 矩阵。输出始终为矩阵。</entry>
    <entry key="SL_DSCPT_POST">发布模型事件。</entry>
    <entry key="SL_DSCPT_INTERPND">使用预先计算的索引和区间比值对 n 维表执行内插(或外插)。\n\n使用 ''表维数'' 和 ''表数据'' 来指定表示包含 ''n'' 个变量的函数的 n 维表。\n\n''子表选择维数'' 允许您指定模块仅内插部分表数据。如果指定 ''k'' 作为该模块的值，它将显示 ''n-k'' 对索引和区间比输入以及 ''k'' 个子表选择输入。其默认值为 0，即对整个表进行插值。使用选择输入来指定要进行插值的子表的索引。\n\n您可以使用 Prelookup 模块来计算索引、区间比和选择输入。</entry>
    <entry key="SL_DSCPT_WSTIME">使用加权采样时间对输入信号进行加、减、乘或除运算，或只输出加权采样时间或加权采样率。</entry>
    <entry key="SL_DSCPT_UMINUS">信号的一元减法。</entry>
    <entry key="SL_DSCPT_ALGCONSTRAINTBLOCK">约束输入信号 f(z) 并输出代数状态 z。\n此模块输出满足所选约束的值 z。输出必须通过某个反馈路径影响输入。\n选择一个求解器，更改容差并提供输出的 ''初始估计值''，以提高代数环求解器的效率。</entry>
    <entry key="SL_DSCPT_STR2NUM">将字符串信号转换为数值信号。</entry>
    <entry key="SL_DSCPT_SPRINTF">将格式化数据写入字符串。</entry>
    <entry key="SL_DSCPT_DTYPE_DUPLICATE">强制所有输入具有完全相同的数据类型。</entry>
    <entry key="SL_DSCPT_DLOOKUPND">从表数据中选择元素、向量或二维矩阵。如果从二维表中选择了一个向量，则输出向量可能是一列或一行，具体取决于模型配置设置。\n\n模块输入为从 0 开始的索引，例如，输入 3 返回该维度中的第四个元素。第一个选择索引对应于顶部(或左侧)输入端口。</entry>
    <entry key="SL_DSCPT_SECOND_ORDER_INTEGRATOR">输入信号的二阶连续时间积分。</entry>
    <entry key="SL_DSCPT_FIR">使用 FIR 滤波器随时间变化对输入的每个通道进行单独滤波。您可以使用可调对话框参数或单独的输入端口来指定滤波器系数，这对于时变系数很有用。\n\n使用直接型以外的滤波器结构需要 DSP System Toolbox 许可证。</entry>
    <entry key="SL_DSCPT_IIR">使用离散 IIR 滤波器随时间变化对输入的每个通道进行单独滤波。以 1/z 的幂的升序指定分子和分母系数。\n\n使用直接 II 型以外的滤波器结构需要 DSP System Toolbox 许可证。</entry>
    <entry key="SL_DSCPT_TRANSFERFCN">实现 z 变换传递函数。以 z 的降幂指定分子和分母系数。分母的阶必须大于或等于分子的阶。</entry>
    <entry key="SL_DSCPT_ALLPOLE">使用 Allpole 滤波器随时间变化对输入的每个通道进行单独滤波。您可以使用可调对话框参数或单独的输入端口来指定滤波器系数，这对于时变系数很有用。\n\n当使用直接型或直接型转置滤波器结构时，分母首项系数必须等于 1。</entry>
    <entry key="SL_DSCPT_DTC">将输入转换为输出的数据类型和定标。\n\n转换有两个可能的目标。一个目标是使输入和输出的真实值相等。另一个目标是使输入和输出的存储的整数值相等。溢出和量化误差会妨碍目标的完全实现。</entry>
    <entry key="SL_DSCPT_MPSWITCH">使对应于第一个输入的截断值的输入信号通过。输入从上到下(或从左到右)进行编号。第一个输入端口是控制端口。其他输入端口是数据端口。</entry>
    <entry key="Magnitude_CB">幅值</entry>
    <entry key="Angle_CB">角度</entry>
    <entry key="Magnitudeandangle_CB">幅值和角度</entry>
    <entry key="CReal_CB">实部</entry>
    <entry key="CImag_CB">虚部</entry>
    <entry key="Realandimag_CB">实部和虚部</entry>
    <entry key="None_CB">无</entry>
    <entry key="Linear_CB">线性</entry>
    <entry key="Linear_PointSlope_CB">线性点-斜率</entry>
    <entry key="Linear_Lagrange_CB">线性拉格朗日</entry>
    <entry key="SPEED_CB">速度</entry>
    <entry key="PRECISION_CB">精度</entry>
    <entry key="Warning_CB">警告</entry>
    <entry key="Error_CB">错误</entry>
    <entry key="Time_based_CB">基于时间</entry>
    <entry key="Sample_based_CB">基于采样</entry>
    <entry key="Timebased_CB">基于时间</entry>
    <entry key="Samplebased_CB">基于采样</entry>
    <entry key="Exact_CB">完全匹配</entry>
    <entry key="Newton_Raphson_CB">牛顿-拉夫逊</entry>
    <entry key="auto_CB">自动</entry>
    <entry key="real_CB">实数</entry>
    <entry key="complex_CB">复数</entry>
    <entry key="Explicit_CB">显式值</entry>
    <entry key="EvenSpacing_CB">等间距</entry>
    <entry key="BreakpointObject_CB">断点对象</entry>
    <entry key="TableAndBreakpoints_CB">表和断点</entry>
    <entry key="LookupTableObject_CB">查找表对象</entry>
    <entry key="OutputIndexAndFrac_CB">索引和区间比</entry>
    <entry key="OutputIndFracAsBus_CB">索引和区间比作为总线</entry>
    <entry key="OutputIndexOnly_CB">仅索引</entry>
    <entry key="Flat_CB">均一</entry>
    <entry key="None_Flat_CB">无 - 均一</entry>
    <entry key="Nearest_CB">最邻近值</entry>
    <entry key="Clip_CB">裁剪</entry>
    <entry key="None_Clip_CB">无 - 裁剪</entry>
    <entry key="Akima_CB">Akima 样条</entry>
    <entry key="TrigLutInheritViaInput">继承: 通过输入继承</entry>
    <entry key="Linear_indices_CB">线性索引</entry>
    <entry key="Subscripts_CB">下标</entry>
    <entry key="Same_as_input_CB">与输入相同</entry>
    <entry key="internal_CB">内部</entry>
    <entry key="external_CB">外部</entry>
    <entry key="none_CB">无</entry>
    <entry key="rising_CB">上升沿</entry>
    <entry key="falling_CB">下降沿</entry>
    <entry key="either_CB">任一沿</entry>
    <entry key="both_CB">两者</entry>
    <entry key="Variable_time_delay_CB">可变时滞</entry>
    <entry key="Variable_transport_delay_CB">可变传输延迟</entry>
    <entry key="MsgDelay_time_CB">时滞</entry>
    <entry key="MsgDelay_transport_CB">传输延迟</entry>
    <entry key="Ceiling_CB">向上</entry>
    <entry key="Convergent_CB">收敛</entry>
    <entry key="Floor_CB">向下</entry>
    <entry key="Round_CB">舍入</entry>
    <entry key="Simplest_CB">最简</entry>
    <entry key="Zero_CB">零</entry>
    <entry key="Frame_based_CB">基于帧</entry>
    <entry key="Use_data_type_of_Constant_value_CB">使用 '常量值' 数据类型</entry>
    <entry key="More_dot_CB">更多...</entry>
    <entry key="Evenly_spaced_points_CB">等间距点</entry>
    <entry key="Linear_search_CB">线性搜索</entry>
    <entry key="Binary_search_CB">二分搜索</entry>
    <entry key="Clip_to_range_CB">裁剪到范围</entry>
    <entry key="Linear_extrapolation_CB">线性外插</entry>
    <entry key="Zero_based_CB">从 0 开始</entry>
    <entry key="One_based_CB">从 1 开始</entry>
    <entry key="Use_simulation_time_CB">使用仿真时间</entry>
    <entry key="Use_external_signal_CB">使用外部信号</entry>
    <entry key="Rising_CB">上升沿</entry>
    <entry key="Falling_CB">下降沿</entry>
    <entry key="Either_CB">任一沿</entry>
    <entry key="Level_CB">电平</entry>
    <entry key="Level_hold_CB">电平保持</entry>
    <entry key="DialogParameters_CB">对话框参数</entry>
    <entry key="InputPort_CB">输入端口</entry>
    <entry key="DirectForm_CB">直接型</entry>
    <entry key="DirectFormSym_CB">直接型对称</entry>
    <entry key="DirectFormAsym_CB">直接型反对称</entry>
    <entry key="DirectFormTransposed_CB">直接型转置</entry>
    <entry key="LatticeMA_CB">格型 MA</entry>
    <entry key="LatticeAR_CB">格型 AR</entry>
    <entry key="DF1_CB">直接 I 型</entry>
    <entry key="DF1T_CB">直接 I 型转置</entry>
    <entry key="DF2_CB">直接 II 型</entry>
    <entry key="DF2T_CB">直接 II 型转置</entry>
    <entry key="SL_DSCPT_UnitConversion">执行有效单位转换。</entry>
    <entry key="Auto_CB">自动</entry>
    <entry key="Line_Search_CB">线搜索</entry>
    <entry key="Trust_Region_CB">信赖域</entry>
    <entry key="SL_DSCPT_FirstOrderHold">输出输入信号的连续分段线性逼近。</entry>
    <entry key="num_CB">信号</entry>
    <entry key="msg_CB">消息</entry>
    <entry key="fcn_CB">函数调用</entry>
    <entry key="SL_DSCPT_VPG">
  输出具有输入占空比(D)和周期(P)的重复脉冲信号。\n\n输出脉冲由下式给出:\n\n y(t) = 1 (如果 t(k) &lt;= t &lt; t(k) + pw(k)\n = 0 (如果 t(k) + pw(k) &lt;= t &lt; t(k)+ P(k)\n其中，t(k)是 'k-1' 个脉冲后的时间，pw(k) 是脉冲宽度，它是 D(k) 和 P(k) 输入值在 t(k) 处的乘积: pw(k) = P(k) * D(k)\n\n通常，脉冲宽度应大于 0 且小于 P(k)。\n\n选中 '允许零脉冲宽度' 复选框会将模块配置为允许脉冲宽度在仿真期间变为零。然而，这将要求模块具有直接馈通，并可能导致代数环。\n\n请选中 '以固定时间间隔运行' 复选框，以固定采样时间间隔产生输出信号值。
</entry>
    <entry key="ContinuousLinearBlocksParameterTunabilityAuto">自动</entry>
    <entry key="ContinuousLinearBlocksParameterTunabilityOptimized">优化</entry>
    <entry key="ContinuousLinearBlocksParameterTunabilityUnconstrained">无约束</entry>
    <entry key="SL_DSCPT_CTF">
  分子系数可以是向量或矩阵表达式。分母系数必须为向量。输出宽度等于分子系数中的行数。您应按照 s 的幂的降序来指定系数。\n\n'参数可调性' 控制分子和分母系数的运行时可调性级别。\n'自动': 允许 Simulink 选择最合适的可调性级别。\n'优化': 可调性已针对性能进行优化。\n'无约束': 跨仿真目标的可调性无约束。
</entry>
    <entry key="SL_DSCPT_CSS">
  状态空间模型:\n dx/dt = Ax + Bu\n y = Cx + Du \n\n'参数可调性' 控制 A、B、C、D 的运行时可调性级别。\n'自动': 允许 Simulink 选择最合适的可调性级别。\n'优化': 可调性经过优化以提升性能。\n'无约束': 可调性在所有仿真目标中都无约束。\n\n选中 '允许最初指定为零的 D 矩阵具有非零值' 复选框要求模块具有直接馈通，并可能导致代数环。
</entry>
    <entry key="SL_DSCPT_CZP">
      零的矩阵表达式。极点和增益的向量表达式。输出宽度等于零矩阵中的列数，如果是全零向量，则为 1。\n\n'参数可调性' 控制零点、极点和增益的运行时可调性级别。\n'自动': 允许 Simulink 选择最合适的可调性级别。\n'优化': 可调性针对性能进行优化。\n'无约束': 仿真目标的可调性无约束。
    </entry>
    <entry key="SL_DSCPT_SLIDEGAIN">N/A</entry>
    <entry key="SL_DSCPT_ABSVAL">y = |u|</entry>
    <entry key="SL_DSCPT_SCOPE">N/A</entry>
    <entry key="MagnitudeAndAngle_CB">MagnitudeAndAngle</entry>
    <entry key="RealAndImag_CB">RealAndImag</entry>
    <entry key="int8_CB">int8</entry>
    <entry key="uint8_CB">uint8</entry>
    <entry key="int16_CB">int16</entry>
    <entry key="uint16_CB">uint16</entry>
    <entry key="int32_CB">int32</entry>
    <entry key="uint32_CB">uint32</entry>
    <entry key="double_CB">double</entry>
    <entry key="single_CB">single</entry>
    <entry key="square_CB">square</entry>
    <entry key="sqrt_CB">sqrt</entry>
    <entry key="boolean_CB">boolean</entry>
    <entry key="One_CB">1</entry>
    <entry key="Two_CB">2</entry>
    <entry key="Three_CB">3</entry>
    <entry key="Four_CB">4</entry>
    <entry key="OneSpace_CB">   1   </entry>
    <entry key="TwoSpace_CB">   2   </entry>
    <entry key="ThreeSpace_CB">   3   </entry>
    <entry key="FourSpace_CB">   4   </entry>
    <entry key="CORDIC_CB">CORDIC</entry>
    <entry key="LUT_CB">Lookup</entry>
    <entry key="TrigAngleRadian">radian</entry>
    <entry key="TrigAngleRevolution">revolution</entry>
    <entry key="x_CB">x</entry>
    <entry key="dx_dt_CB">dxdt</entry>
    <entry key="dx_div_dt_CB">dx/dt</entry>
    <entry key="ZeroCross_CB">ZeroCross</entry>
    <entry key="ZeroCrossTol_CB">ZeroCrossTolerance</entry>
    <entry key="Func_Eq_0_CB">f(z) = 0</entry>
    <entry key="Func_Eq_Z_CB">f(z) = z</entry>
  </message>
</rsccat>
