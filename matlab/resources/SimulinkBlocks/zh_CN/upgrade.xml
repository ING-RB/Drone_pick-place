<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright 2024 The MathWorks, Inc.-->

<rsccat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" locale="zh_CN" product="SimulinkBlocks" xsi:noNamespaceSchemaLocation="../../resources/schema/msgcat.xsd">
  <message>
    <entry key="SFunInterpND">将 S-Function 模块 ''Interpolation (n-D) using PreLookup'' 替换为内置模块 ''Interpolation Using Prelookup''</entry>
    <entry key="SFunPrelookup">将 S-Function 模块 ''PreLookup Index Search'' 替换为内置模块 ''Prelookup''</entry>
    <entry key="levelResetContIntegrator"> Integrator 模块将其&lt;b&gt;外部重置&lt;/b&gt;参数设置为&lt;tt&gt;电平&lt;/tt&gt;。从 R2006b 开始，对&lt;tt&gt;电平&lt;/tt&gt;重置行为进行了修订，以向后兼容 R14SP2 及以前的版本。如果您需要 R14SP3 和 R2006a 中存在的&lt;tt&gt;电平&lt;/tt&gt;重置行为，请将&lt;b&gt;外部重置&lt;/b&gt;参数设置为&lt;tt&gt;电平保持&lt;/tt&gt;。有关&lt;tt&gt;电平&lt;/tt&gt;和&lt;tt&gt;电平保持&lt;/tt&gt;重置选项的详细信息，请参阅 Simulink 参考文档中的&lt;a href="matlab:doc integrator"&gt;积分器&lt;/a&gt;</entry>
    <entry key="wrongNumMaskEntries">Unexpected Mask Condition: wrong number of mask entries on block ''{0}''</entry>
    <entry key="emlFimathCastBeforeSumFalse">MATLAB Function 模块 ''{0}'' 的输入 embedded.fimath 将 ''CastBeforeSum'' 设置为 false。\nMATLAB Function 模块不再支持此设置。请将此设置更改为 true。</entry>
    <entry key="emlFimathForFiConstructorsObsolete">不再支持 MATLAB Function 模块 ''{0}'' 的 ''fi 和 fimath 构造函数的 FIMATH'' 采用 ''MATLAB 出厂默认值'' 设置。请将此设置更改为使用 ''MATLAB Function 模块 FIMATH''。</entry>
    <entry key="SFTruthTableFimathCastBeforeSumFalse">Stateflow Truth Table 模块 ''{0}'' 的输入 embedded.fimath 将 ''CastBeforeSum'' 设置为 false。\n不再支持此设置。此设置将更改为 true。</entry>
    <entry key="SFTruthTableFimathForFiConstructorsObsolete">不再支持 Stateflow Truth Table 模块 ''{0}'' 的 ''fi 和 fimath 构造函数的 FIMATH'' 采用 ''MATLAB 出厂默认值'' 设置。请将此设置更改为使用 ''MATLAB Function 模块 FIMATH''。</entry>
    <entry key="mathBlockSqrtFunction1"> Math 模块中的 ''sqrt'' 函数已弃用，应替换为 Sqrt Function 模块中的 ''signedSqrt'' 函数。</entry>
    <entry key="mathBlockSqrtFunction2"> Math 模块中的 ''sqrt'' 函数已弃用，应替换为 Sqrt Function 模块中的 ''sqrt'' 函数。</entry>
    <entry key="unitDelayBlockContinuousMode"> Unit Delay 模块通常使用离散采样时间。当它继承连续采样时间时，其时滞不是固定的，可能随着每个时间步而变化。这不是 Unit Delay 模块的预期行为。对于连续采样时间，请用 Memory 模块替换 Unit Delay 模块。</entry>
    <entry key="updateParameters">更新参数</entry>
    <entry key="toWksSyntaxError">Unrecognized syntax in ToWorkspace block ''{0}'': Please separate the appropriate elements of the ''Maximum number of rows'' parameter into the appropriate dialog entries: [rows, decimation, ts]</entry>
    <entry key="setOutportIcEmpty">以下子系统输出端口指定初始输出值。由于仿真没有使用此 InitialOutput 参数，此值没有意义。为了提高设计的清晰度，请使用 set_param 将初始输出设置为空 []。有关详细信息，请在 MATLAB 命令行中键入 "help set_param"。</entry>
    <entry key="RepeatingSequenceRemoveDuplicates"> Repeating Sequence 模块无法处理 '时间值' 中的重复数字。如果检测到重复的 '时间值' 输入，重复的输入将被由本地 eps 隔开的两个时间点替换。如果 '时间值' 使用工作区变量，它将被新变量替换，并保存为 '.slprj/modeladvisor/' 中的 '.mat' 文件。原始变量保持不变。比较您的旧值和新值，看看建议的值是否可以接受</entry>
    <entry key="RepeatingSequenceRemoveDuplicatesResult"> ''{0}'' 的参数已更新。原始变量是 ''{1}''，但新变量是 ''{2}''。对应的数据保存在 ''{3}'' 上。请将文件复制到您的数据目录中。</entry>
    <entry key="RepeatingSequenceRemoveDuplicatesLoadFileErr"> The data file ''{0}'' generated by the upgrade advisor check is lost. To regenerate it again, you can change the variable ''{1}'' in block ''{2}'' back to its original variable name, and rerun the upgrade advisor check again.</entry>
    <entry key="MPSwitchOneDataPortEnumUnsupported"> 控制端口数据类型是枚举类型，而模块有一个数据端口。这无法自动更新以指定数据端口顺序的索引。</entry>
    <entry key="MPSwitchDeadportsInBlockUnsupported"> 控制端口的数据类型为枚举类型，但枚举不会映射到模块中的数据端口数，因此无法自动替换此模块来指定数据端口索引。</entry>
    <entry key="MPSwitchEnumCaseCompatible"> 控制端口数据类型为枚举类型，''数据端口顺序'' 为连续类型。参数 ''数据端口顺序'' 将自动替换为 ''指定索引''，并将指定 ''数据端口索引''。</entry>
    <entry key="initCondSetToZero">模块 ''{0}'' 的初始条件不是 0 或 1。更新后的模块的初始条件将设置为 0。</entry>
    <entry key="unrecognizedFlipFlopType">无法识别的触发器模块类型</entry>
    <entry key="skipReplaceDCM">将跳过 ''{0}''。此模块可能是从 Aerospace 库自定义而来的，可能需要更新。</entry>
    <entry key="fromBlockCloseFcnCallback"> From 模块不再需要 CloseFcn 回调。因此，此函数已被删除。请从 CloseFcn 回调中删除 "tagdialog Close" 字符串，以避免出现关于缺失函数的警告。 </entry>
    <entry key="lookupTableCompatible">Lookup Table 模块和 Lookup Table (2-D) 模块完全受支持且兼容，但不会再对其进行增强。这些模块可以分别用 1-D Lookup Table 和 2-D Lookup Table 模块自动替换，它们将为数据类型和算法提供新设置。这些设置可用于改善仿真和代码生成中的内存使用量和计算速度。 </entry>
    <entry key="lookupTableIncompatibleRepeatedBp"> 具有重复断点数据的 Lookup Table 模块和 Lookup Table (2-D) 模块: Lookup Table 模块和 Lookup Table (2-D) 模块完全受支持且兼容，但不会在再对其进行增强。这些模块可以分别用 1-D Lookup Table 和 2-D Lookup Table 模块替换，它们将为数据类型和算法提供新设置。这些设置可用于改善仿真和代码生成中的内存使用量和计算速度。以下 Lookup Table 模块和 Lookup Table (2-D) 模块具有重复的断点数据，但 1-D Lookup Table 模块和 2-D Lookup Table 模块不支持断点数据。请考虑手动更新断点以消除重复数据，以便这些模块可以自动更新。 </entry>
    <entry key="lookupTableIncompatibleUnsupportedLum"> "查找方法" 为 ''取最接近的输入值'' 或 ''向上取输入值'' 的 Lookup Table 模块和 Lookup Table (2-D) 模块: Lookup Table 模块和 Lookup Table (2-D) 模块完全受支持且兼容，但不会再对其进行增强。这些模块可以分别用 1-D Lookup Table 和 2-D Lookup Table 模块替换，它们将为数据类型和算法提供新设置。这些设置可用于改善仿真和代码生成中的内存使用量和计算速度。以下 Lookup Table 模块和 Lookup Table (2-D) 模块的 "查找方法" 为 ''取最接近的输入值'' 或 ''向上取输入值''，但 1-D Lookup Table 模块和 2-D Lookup Table 模块不支持此设置。请考虑手动将 "查找方法" 更新为 "内插-外插"、"插值 - 使用最终值" 或 "向下取输入值"，以便自动更新这些模块。否则，模块替换将自动替换这些模块，并将新模块的 "内插方法" 设置为 "线性"，将 "外插方法" 设置为 "裁剪"。这可能会导致出现数值差异。 </entry>
    <entry key="lookupTableIncompatibleUnsupportedExtrapMeth"> 当输入和输出不是相同的浮点类型时，"查找方法" 为 "内插-外插" 的 Lookup Table 模块和 Lookup Table (2-D) 模块: Lookup Table 模块和 Lookup Table (2-D) 模块完全受支持且兼容，但不会再对其进行增强。这些模块可以分别用 1-D Lookup Table 和 2-D Lookup Table 模块替换，它们将为数据类型和算法提供新设置。这些设置可用于改善仿真和代码生成中的内存使用量和计算速度。当输入和输出不是相同的浮点类型时，以下 Lookup Table 模块和 Lookup Table (2-D) 模块的 "查找方法" 为 "内插-外插"，但 1-D Lookup Table 模块和 2-D Lookup Table 模块不支持此设置。请考虑手动将 "查找方法" 更新为 "插值 - 使用最终值" 或将端口数据类型更改为相同的浮点数据类型，以便这些模块可以自动更新。否则，模块替换将自动替换这些模块，并将新模块的 "内插方法" 设置为 "线性"，将 "外插方法" 设置为 "裁剪"。这可能会导致出现数值差异。 </entry>
    <entry key="lookupTableIncompatibleUnsupportedBigProd"> 执行插值时首先执行乘法的 Lookup Table 模块和 Lookup Table (2-D) 模块: Lookup Table 模块和 Lookup Table (2-D) 模块完全受支持且兼容，但不会再对其进行增强。这些模块可以分别用 1-D Lookup Table 和 2-D Lookup Table 模块自动替换，它们提供了新的数据类型和算法设置。这些设置可用于改善仿真和代码生成中的内存使用量和计算速度。以下 Lookup Table 模块和 Lookup Table (2-D) 模块在执行插值时首先执行乘法，但 1-D Lookup Table 模块和 2-D Lookup Table 模块始终首先执行除法。模块替换将自动替换这些模块。这可能会导致模块替换后出现数值差异。 </entry>
    <entry key="lookup1D2DChooseIndexSearchMethPrompt"> 具有等间距断点的 Lookup Table 模块和 Lookup Table (2-D) 模块: Lookup Table 模块和 Lookup Table (2-D) 模块完全受支持且兼容，但不会再对其进行增强。这些模块可以分别用 1-D Lookup Table 和 2-D Lookup Table 模块自动替换，它们提供了新的数据类型和算法设置。这些设置可用于改善仿真和代码生成中的内存使用量和计算速度。请考虑用 1-D Lookup Table 模块或 2-D Lookup Table 模块自动替换模块 ''{0}''。默认情况下，模块替换会将 ''索引搜索方法'' 设置为 ''二分搜索''。由于模块 ''{1}'' 具有等间距断点，您是否希望将 ''索引搜索方法'' 设置为 ''等间距点'' 以加快搜索速度? ([y]/n/a)</entry>
    <entry key="lookupTableIncompatibleUnsupportedLumPrompt"> "查找方法" 为 ''取最接近的输入值'' 或 ''向上取输入值'' 的 Lookup Table 模块和 Lookup Table (2-D) 模块: Lookup Table 模块和 Lookup Table (2-D) 模块完全受支持且兼容，但不会再对其进行增强。这些模块可以分别用 1-D Lookup Table 和 2-D Lookup Table 模块自动替换，它们提供了新的数据类型和算法设置。这些设置可用于改善仿真和代码生成中的内存使用量和计算速度。模块 ''{0}'' 的 "查找方法" 为 ''取最接近的输入值'' 或 ''向上取输入值''，但 1-D Lookup Table 模块和 2-D Lookup Table 模块不支持此设置。模块替换将自动用 1-D Lookup Table 模块或 2-D Lookup Table 模块替换模块 ''{1}''，并将新模块的 "内插方法" 设置为 "线性"，将 "外插方法" 设置为 "裁剪"。这可能会导致模块替换后出现数值差异。 </entry>
    <entry key="lookupTableIncompatibleUnsupportedExtrapMethPrompt"> 当输入和输出不是相同的浮点类型时，"查找方法" 为 "内插-外插" 的 Lookup Table 模块和 Lookup Table (2-D) 模块: Lookup Table 模块和 Lookup Table (2-D) 模块完全受支持且兼容，但不会再对其进行增强。这些模块可以分别用 1-D Lookup Table 和 2-D Lookup Table 模块自动替换，它们提供了新的数据类型和算法设置。这些设置可用于改善仿真和代码生成中的内存使用量和计算速度。当输入和输出不是相同的浮点类型时，模块 ''{0}'' 的 "查找方法" 为 "内插-外插"，但 1-D Lookup Table 模块和 2-D Lookup Table 模块不支持此设置。模块替换将自动用 1-D Lookup Table 模块或 2-D Lookup Table 模块替换模块 ''{1}''，并将新模块的 "内插方法" 设置为 "线性"，将 "外插方法" 设置为 "裁剪"。这可能会导致模块替换后出现数值差异。 </entry>
    <entry key="lookupTableIncompatibleUnsupportedBigProdPrompt"> 执行插值时首先执行乘法的 Lookup Table 模块和 Lookup Table (2-D) 模块: Lookup Table 模块和 Lookup Table (2-D) 模块完全受支持且兼容，但不会再对其进行增强。这些模块可以分别用 1-D Lookup Table 和 2-D Lookup Table 模块自动替换，它们提供了新的数据类型和算法设置。这些设置可用于改善仿真和代码生成中的内存使用量和计算速度。模块 ''{0}'' 在执行插值时首先执行乘法，但 1-D Lookup Table 模块和 2-D Lookup Table 模块始终首先执行除法。模块替换将自动用 1-D Lookup Table 模块或 2-D Lookup Table 模块替换模块 ''{1}''。这可能会导致模块替换后出现数值差异。 </entry>
    <entry key="lookupTableIncompatibleReplacePrompt"> 是否继续替换模块 ''{0}''?([y]/n/a)</entry>
    <entry key="InterpolationUpdateHiddenValidIndexParameterforFlatInterp"> Interpolation Using Prelookup 模块 ''{0}'' 已为 ''均一'' 内插方法选中 '有效的索引输入可到达最后一个索引' 复选框。在 R2014b 之前的版本中，此复选框处于隐藏状态，且始终被视为未选中。从 R2014b 开始，复选框可见，并且在升级后开始生效。为保留当前行为，升级顾问会清除此复选框</entry>
    <entry key="unrecognizedSpecAnBlock">Unrecognized Spectrum Analyzer block type in link reconnection</entry>
    <entry key="configSetRefUpdatingSourceConfigSet">Updated configuration set for variable: {0}.</entry>
    <entry key="configSetsToBeUpdated">需要更新以下配置集({0})</entry>
    <entry key="unableToUpdateCS">Error encountered while attempting to update configuration set:\n{0}\n</entry>
    <entry key="upgradeSFunctionBuilderWithPaddedBus">用作以下 S-Function Builder 模块的输入或输出的总线由 Simulink 向其添加了填充。在快速加速仿真的顶层模型中使用其中一个 S-Function 之前，请重新生成该 S-Function</entry>
    <entry key="upgradeLegacyCodeToolWithPaddedBus">用作以下代码继承工具 S-Function 模块的输入或输出的总线由 Simulink 向其添加了填充。在快速加速仿真的顶层模型中使用其中一个 S-Function 之前，请重新生成该 S-Function
    </entry>
    <entry key="upgradeOtherSFunctionWithPaddedBus">用作以下 S-Function 模块的输入或输出的总线由 Simulink 向其添加了填充。在快速加速仿真的顶层模型中使用其中一个 S-Function 之前，请使用最初用于创建该 S-Function 的工具重新生成该 S-Function</entry>
    <entry key="upgradeLegacyCodeToolRtwMakeCfgFile">当您使用当前 Simulink 版本生成代码时，由代码继承工具生成的 rtwmakecfg 文件可能导致错误。在为相关联的 S-Function 生成代码之前，请重新生成此文件
    </entry>
    <entry key="upgradeLegacyCodeToolTlcBlockFile">当您使用当前 Simulink 版本生成代码时，由代码继承工具生成的 TLC 模块文件可能导致错误。在为相关联的 S-Function 生成代码之前，请重新生成此文件
    </entry>
    <entry key="upgradeLegacyCodeToolFileFailed">Unexpected error while modifying the file {0}:\n{1}\n</entry>
  </message>
</rsccat>
