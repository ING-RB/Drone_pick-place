<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright 2024 The MathWorks, Inc.-->

<rsccat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" locale="ja_JP" product="SimulinkBlocks" xsi:noNamespaceSchemaLocation="../../resources/schema/msgcat.xsd">
  <message>
    <entry key="SFunInterpND">S-Function ブロック ''Interpolation (n-D) using PreLookup'' を組み込みブロック ''Interpolation Using Prelookup'' に置き換えます</entry>
    <entry key="SFunPrelookup">S-Function ブロック ''PreLookup Index Search'' を組み込みブロック ''Prelookup'' に置き換えます</entry>
    <entry key="levelResetContIntegrator"> Integrator ブロックの [外部リセット]&lt;b&gt;&lt;/b&gt; パラメーターが &lt;tt&gt;[レベル]&lt;/tt&gt; に設定されています。R2006b の時点で、&lt;tt&gt;[レベル]&lt;/tt&gt; のリセットの動作は、R14SP2 以前のリリースと下位互換性のために修正されました。R14SP3 と R2006a で &lt;tt&gt;[レベル]&lt;/tt&gt; のリセットの動作を希望する場合、[外部リセット]&lt;b&gt;&lt;/b&gt; パラメーターを &lt;tt&gt;[レベル保持]&lt;/tt&gt; に設定してください。&lt;tt&gt;[レベル]&lt;/tt&gt; と &lt;tt&gt;[レベル保持]&lt;/tt&gt; リセット オプションの詳細については、Simulink リファレンス ドキュメンテーションの「&lt;a href="matlab:doc integrator"&gt;Integrator&lt;/a&gt;」を参照してください。</entry>
    <entry key="wrongNumMaskEntries">予期せぬマスク条件: ブロック ''{0}'' のマスクの入力数が正しくありません</entry>
    <entry key="emlFimathCastBeforeSumFalse">MATLAB Function ブロック ''{0}'' の入力 embedded.fimath で、''CastBeforeSum'' が false に設定されています。\nこの設定は MATLAB Function ブロックでサポートされなくなりました。この設定を true に変更します。</entry>
    <entry key="emlFimathForFiConstructorsObsolete">MATLAB Function ブロック ''{0}'' の ''MATLAB の出荷時の既定'' の設定である ''fi と fimath コンストラクターに対する FIMATH'' はサポートされなくなりました。''MATLAB Function ブロック FIMATH'' を使用するようにこの設定を変更します。</entry>
    <entry key="SFTruthTableFimathCastBeforeSumFalse">Stateflow Truth Table ブロック ''{0}'' の入力 embedded.fimath では、''CastBeforeSum'' が false に設定されています。\nこの設定はサポートされなくなりました。この設定を true に変更します。</entry>
    <entry key="SFTruthTableFimathForFiConstructorsObsolete">Stateflow Truth Table ブロック ''{0}'' の ''MATLAB の出荷時の既定'' の設定である ''fi と fimath コンストラクターに対する FIMATH'' はサポートされなくなりました。''MATLAB Function ブロック FIMATH'' を使用するようにこの設定を変更します。</entry>
    <entry key="mathBlockSqrtFunction1"> Math ブロックの関数 ''sqrt'' は廃止予定です。代わりに Sqrt Function ブロックの関数 ''signedSqrt'' を使用してください。</entry>
    <entry key="mathBlockSqrtFunction2"> Math ブロックの関数 ''sqrt'' は廃止予定です。代わりに Sqrt Function ブロックの関数 ''sqrt'' を使用してください。</entry>
    <entry key="unitDelayBlockContinuousMode"> 通常、Unit Delay ブロックは離散サンプル時間を使用します。連続サンプル時間を継承している場合、その時間遅延は固定ではなく、タイム ステップごとに変化します。この動作は Unit Delay ブロックで予期されません。連続サンプル時間の場合は、Unit Delay ブロックを Memory ブロックに置き換えてください。</entry>
    <entry key="updateParameters">パラメーターを更新</entry>
    <entry key="toWksSyntaxError">ToWorkspace ブロック ''{0}'' に認識されない構文があります。''最大行数'' パラメーターの適切な要素数を適切なダイアログ エントリ数に分割してください:[rows, decimation, ts]</entry>
    <entry key="setOutportIcEmpty">以下のサブシステムの出力端子は初期出力値を指定しています。シミュレーションはこの InitialOutput パラメーターを使用していないため、この値は意味がありません。設計の明確さを向上させるために、set_param を使用して初期出力を空の [] に設定してください。詳細については、MATLAB コマンド ラインで "help set_param" と入力してください。</entry>
    <entry key="RepeatingSequenceRemoveDuplicates"> Repeating Sequence ブロックは [時間値] で重複している数値を処理できません。[時間値] の入力に重複が検出されると、重複値はローカルの eps の間隔で 2 つの時点に置き換えられます。[時間値] にワークスペース変数が使用されていた場合は、新しい変数で置き換えられ、'slprj/modeladvisor/' に '.mat' ファイルとして保存されます。元の変数は変更されません。古い値と新しい値を比較して、推奨された値が適切かどうかを確認してください。</entry>
    <entry key="RepeatingSequenceRemoveDuplicatesResult"> ''{0}'' のパラメーターが更新されました。元の変数は ''{1}'' ですが、新しい変数は ''{2}'' です。対応するデータは ''{3}'' に保存されています。このファイルをデータ ディレクトリにコピーしてください。</entry>
    <entry key="RepeatingSequenceRemoveDuplicatesLoadFileErr"> アップグレード アドバイザー チェックによって生成されたデータ ファイル ''{0}'' が削除されました。これを再生成するには、ブロック ''{2}'' の変数 ''{1}'' を元の変数名に戻して、アップグレード アドバイザー チェックを再実行します。</entry>
    <entry key="MPSwitchOneDataPortEnumUnsupported"> 制御端子データ型は列挙型であり、ブロックは 1 つのデータ端子をもっています。データ端子の順序に対してインデックスを指定するためにこれを自動的に更新することはできません。</entry>
    <entry key="MPSwitchDeadportsInBlockUnsupported"> 制御端子データ型は列挙型のタイプですが、列挙型はブロックにあるデータ端子の数にマップされません。そのため、このブロックを自動的に置き換えてデータ端子インデックスを指定することはできません。</entry>
    <entry key="MPSwitchEnumCaseCompatible"> 制御端子データ型は列挙型であり、[データ端子の順序] は連続型タイプです。パラメーター [データ端子の順序] は [インデックスの指定] に自動的に置き換えられ、[データ端子インデックス] が指定されます。</entry>
    <entry key="initCondSetToZero">ブロック ''{0}'' の初期条件が 0 でも 1 でもありません。更新されたブロックの初期条件を 0 に設定します。</entry>
    <entry key="unrecognizedFlipFlopType">認識されない flip-flop ブロックのタイプ</entry>
    <entry key="skipReplaceDCM">スキップ: ''{0}''。このブロックは、Aerospace のライブラリからカスタマイズされており、更新が必要な可能性があります。</entry>
    <entry key="fromBlockCloseFcnCallback"> From ブロックでは、CloseFcn コールバックが必要なくなりました。そのため、この関数は削除されました。見つからない関数についての警告を回避するには、CloseFcn コールバックから "tagdialog Close" 文字列を削除してください。 </entry>
    <entry key="lookupTableCompatible">Lookup Table ブロックと Lookup Table (2-D) ブロックは完全にサポートされており、互換性がありますが、今後は拡張されません。これらのブロックは、データ型およびアルゴリズムについてそれぞれ新しい設定を提供する 1-D Lookup Table および 2-D Lookup Table ブロックに自動的に置き換えることができます。これらの設定を使用すると、シミュレーションおよびコード生成時のメモリ効率と計算速度を改善できます。 </entry>
    <entry key="lookupTableIncompatibleRepeatedBp"> Lookup Table ブロックと Lookup Table (2-D) ブロックに反復ブレークポイント データがあります: Lookup Table ブロックと Lookup Table (2-D) ブロックは完全にサポートされており、互換性がありますが、今後は拡張されません。これらのブロックは、データ型およびアルゴリズムについてそれぞれ新しい設定を提供する 1-D Lookup Table ブロックおよび 2-D Lookup Table ブロックに置き換えることができます。これらの設定を使用すると、シミュレーションおよびコード生成時のメモリ効率と計算速度を改善できます。次の Lookup Table ブロックと Lookup Table (2-D) ブロックには反復ブレークポイント データがありますが、1-D Lookup Table ブロックと 2-D Lookup Table ブロックはこれをサポートしていません。反復データを消去してこれらのブロックを自動的に更新できるように、ブレークポイントを手動で更新することを検討してください。 </entry>
    <entry key="lookupTableIncompatibleUnsupportedLum"> Lookup Table および Lookup Table (2-D) ブロックで、[ルックアップ手法] が [入力の最近傍を使用] または [入力の上の値を使用] に設定されています: Lookup Table ブロックと Lookup Table (2-D) ブロックは完全にサポートされており、互換性がありますが、今後は拡張されません。これらのブロックは、データ型およびアルゴリズムについてそれぞれ新しい設定を提供する 1-D Lookup Table ブロックおよび 2-D Lookup Table ブロックに置き換えることができます。これらの設定を使用すると、シミュレーションおよびコード生成時のメモリ効率と計算速度を改善できます。次の Lookup Table ブロックと Lookup Table (2-D) ブロックで、[ルックアップ手法] が [入力の最近傍を使用] または [入力の上の値を使用] に設定されていますが、1-D Lookup Table ブロックおよび 2-D Lookup Table ブロックはこれをサポートしていません。[ルックアップ手法] を、[内挿 - 外挿]、[内挿- 最後の値を使用]、または [入力の下の値を使用] に手動で更新することを検討してください。これにより、これらのブロックを自動的に更新できます。そうでない場合、ブロックの置き換えによってこれらのブロックが自動的に置き換えられ、新しいブロックの [内挿法] が [線形] に、[外挿法] が [クリップ] に設定されます。その結果、数値の差が発生します。 </entry>
    <entry key="lookupTableIncompatibleUnsupportedExtrapMeth"> 入力と出力が同じ浮動小数点型でない場合、Lookup Table および Lookup Table (2-D) ブロックで [ルックアップ手法] が [内挿 - 外挿] に設定されています: Lookup Table ブロックと Lookup Table (2-D) ブロックは完全にサポートされており、互換性がありますが、今後は拡張されません。これらのブロックは、データ型およびアルゴリズムについてそれぞれ新しい設定を提供する 1-D Lookup Table ブロックおよび 2-D Lookup Table ブロックに置き換えることができます。これらの設定を使用すると、シミュレーションおよびコード生成時のメモリ効率と計算速度を改善できます。入力および出力が同じ浮動小数点型でない場合、次の Lookup Table ブロックと Lookup Table (2-D) ブロックで [ルックアップ手法] が [内挿 - 外挿] に設定されていますが、1-D Lookup Table ブロックと 2-D Lookup Table ブロックはこれをサポートしていません。[ルックアップ手法] を [内挿 - 最後の値を使用] に手動で更新するか、端子のデータ型を同じ浮動小数点型に変更することを検討してください。これにより、これらのブロックを自動的に更新できます。そうでない場合、ブロックの置き換えによってこれらのブロックが自動的に置き換えられ、新しいブロックの [内挿法] が [線形] に、[外挿法] が [クリップ] に設定されます。その結果、数値の差が発生します。 </entry>
    <entry key="lookupTableIncompatibleUnsupportedBigProd"> Lookup Table および Lookup Table (2-D) ブロックで、内挿の実行時に乗算が最初に実行されました: Lookup Table ブロックと Lookup Table (2-D) ブロックは完全にサポートされており、互換性がありますが、今後は拡張されません。これらのブロックは、データ型およびアルゴリズムについてそれぞれ新しい設定を提供する 1-D Lookup Table および 2-D Lookup Table ブロックに自動的に置き換えることができます。これらの設定を使用すると、シミュレーションおよびコード生成時のメモリ効率と計算速度を改善できます。次の Lookup Table ブロックと Lookup Table (2-D) ブロックでは、内挿の実行時に乗算が最初に実行されますが、1-D Lookup Table ブロックと 2-D Lookup Table ブロックは除算を最初に実行します。ブロックの置き換えによって、これらのブロックは自動的に置き換えられます。その結果、ブロックの置き換え後に数値の差が発生します。 </entry>
    <entry key="lookup1D2DChooseIndexSearchMethPrompt"> Lookup Table および Lookup Table (2-D) ブロックに等間隔のブレークポイントがあります: Lookup Table ブロックと Lookup Table (2-D) ブロックは完全にサポートされており、互換性がありますが、今後は拡張されません。これらのブロックは、データ型およびアルゴリズムについてそれぞれ新しい設定を提供する 1-D Lookup Table および 2-D Lookup Table ブロックに自動的に置き換えることができます。これらの設定を使用すると、シミュレーションおよびコード生成時のメモリ効率と計算速度を改善できます。ブロック ''{0}'' を 1-D Lookup Table ブロックまたは 2-D Lookup Table ブロックに自動的に置き換えることを検討してください。ブロックの置き換えにより、[インデックス検索法] は既定で [二分探索] に設定されます。ブロック ''{1}'' には等間隔のブレークポイントがあるので、検索が高速になるよう [インデックス検索法] を [等間隔のポイント] に設定しますか? ([y]/n/a)</entry>
    <entry key="lookupTableIncompatibleUnsupportedLumPrompt"> Lookup Table および Lookup Table (2-D) ブロックで、[ルックアップ手法] が [入力の最近傍を使用] または [入力の上の値を使用] に設定されています: Lookup Table ブロックと Lookup Table (2-D) ブロックは完全にサポートされており、互換性がありますが、今後は拡張されません。これらのブロックは、データ型およびアルゴリズムについてそれぞれ新しい設定を提供する 1-D Lookup Table および 2-D Lookup Table ブロックに自動的に置き換えることができます。これらの設定を使用すると、シミュレーションおよびコード生成時のメモリ効率と計算速度を改善できます。ブロック ''{0}'' では、[ルックアップ手法が] が [入力の最近傍を使用] または [入力の上の値を使用] に設定されていますが、1-D Lookup Table ブロックと 2-D Lookup Table ブロックはこれをサポートしていません。このブロックの置き換えによって、ブロック ''{1}'' は 1-D Lookup Table ブロックまたは 2-D Lookup Table ブロックに自動的に置き換えられ、新しいブロックの [内挿法] が [線形] に、[外挿法] が [クリップ] に設定されます。その結果、ブロックの置き換え後に数値の差が発生します。 </entry>
    <entry key="lookupTableIncompatibleUnsupportedExtrapMethPrompt"> 入力と出力が同じ浮動小数点型でない場合、Lookup Table および Lookup Table (2-D) ブロックで [ルックアップ手法] が [内挿 - 外挿] に設定されています: Lookup Table ブロックと Lookup Table (2-D) ブロックは完全にサポートされており、互換性がありますが、今後は拡張されません。これらのブロックは、データ型およびアルゴリズムについてそれぞれ新しい設定を提供する 1-D Lookup Table および 2-D Lookup Table ブロックに自動的に置き換えることができます。これらの設定を使用すると、シミュレーションおよびコード生成時のメモリ効率と計算速度を改善できます。入力と出力が同じ浮動小数点型でない場合、ブロック ''{0}'' で [ルックアップ手法] が [内挿 - 外挿] に設定されていますが、1-D Lookup Table ブロックと 2-D Lookup Table ブロックはこれをサポートしていません。このブロックの置き換えによって、ブロック ''{1}'' は 1-D Lookup Table ブロックまたは 2-D Lookup Table ブロックに自動的に置き換えられ、新しいブロックの [内挿法] が [線形] に、[外挿法] が [クリップ] に設定されます。その結果、ブロックの置き換え後に数値の差が発生します。 </entry>
    <entry key="lookupTableIncompatibleUnsupportedBigProdPrompt"> Lookup Table および Lookup Table (2-D) ブロックで、内挿の実行時に乗算が最初に実行されました: Lookup Table ブロックと Lookup Table (2-D) ブロックは完全にサポートされており、互換性がありますが、今後は拡張されません。これらのブロックは、データ型およびアルゴリズムについてそれぞれ新しい設定を提供する 1-D Lookup Table および 2-D Lookup Table ブロックに自動的に置き換えることができます。これらの設定を使用すると、シミュレーションおよびコード生成時のメモリ効率と計算速度を改善できます。内挿の実行時、ブロック ''{0}'' は最初に乗算を実行しますが、1-D Lookup Table ブロックと 2-D Lookup Table ブロックは必ず、最初に除算を実行します。ブロックの置き換えによって、ブロック ''{1}'' は自動的に 1-D Lookup Table ブロックまたは 2-D Lookup Table ブロックに置き換えられます。その結果、ブロックの置き換え後に数値の差が発生します。 </entry>
    <entry key="lookupTableIncompatibleReplacePrompt"> ブロック ''{0}'' の置き換えを続行しますか? ([y]/n/a)</entry>
    <entry key="InterpolationUpdateHiddenValidIndexParameterforFlatInterp"> Interpolation Using Prelookup ブロック ''{0}'' で、[フラット] 内挿法に対し [インデックスの入力を最後のインデックスに達するようにする] チェック ボックスがオンになっています。R2014b より前のリリースでは、このチェック ボックスが非表示になっており、常にオフであると見なされていました。R2014b 以降はチェック ボックスが表示され、アップグレード時に有効になります。現在の動作を維持するため、アップグレード アドバイザーはこのチェック ボックスをオフにします</entry>
    <entry key="unrecognizedSpecAnBlock">リンクの再接続において認識されない Spectrum Analyzer ブロックのタイプ</entry>
    <entry key="configSetRefUpdatingSourceConfigSet">変数のコンフィギュレーション セットが更新されました: {0}。</entry>
    <entry key="configSetsToBeUpdated">次のコンフィギュレーション セットは更新が必要です ({0})</entry>
    <entry key="unableToUpdateCS">コンフィギュレーション セットを更新する間にエラーがありました: \n{0}\n</entry>
    <entry key="upgradeSFunctionBuilderWithPaddedBus">次の S-Function Builder ブロックへの入力または出力として使用されたバスには、Simulink が追加したパディングがあります。ラピッド アクセラレータ シミュレーションの最上位モデルでこれらの S-Function のいずれかを使用する前に、その S-Function を再生成してください。</entry>
    <entry key="upgradeLegacyCodeToolWithPaddedBus">次のレガシ コード ツールの S-Function ブロックへの入力または出力として使用されたバスには、Simulink が追加したパディングがあります。ラピッド アクセラレータ シミュレーションの最上位モデルでこれらの S-Function のいずれかを使用する前に、その S-Function を再生成してください。
    </entry>
    <entry key="upgradeOtherSFunctionWithPaddedBus">次の S-Function ブロックへの入力または出力として使用されたバスには、Simulink が追加したパディングがあります。ラピッド アクセラレータ シミュレーションの最上位モデルでこれらの S-Function のいずれかを使用する前に、最初に作成したときと同じツールを使ってその S-Function を再生成してください。</entry>
    <entry key="upgradeLegacyCodeToolRtwMakeCfgFile">レガシ コード ツールによって生成された rtwmakecfg ファイルは、Simulink の現在のバージョンを使用してコードを生成する場合、エラーを引き起こす可能性があります。関連付けられている S-Function のコードを生成する前に、このファイルを再生成してください
    </entry>
    <entry key="upgradeLegacyCodeToolTlcBlockFile">レガシ コード ツールによって生成された TLC ブロック ファイルは、Simulink の現在のバージョンを使用してコードを生成する場合、エラーを引き起こす可能性があります。関連付けられている S-Function のコードを生成する前に、このファイルを再生成してください
    </entry>
    <entry key="upgradeLegacyCodeToolFileFailed">ファイル {0} の変更中に予期せぬエラーが発生しました:\n{1}\n</entry>
  </message>
</rsccat>
