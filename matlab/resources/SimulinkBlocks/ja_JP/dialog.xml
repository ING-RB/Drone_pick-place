<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright 2024 The MathWorks, Inc.-->

<rsccat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" locale="ja_JP" product="SimulinkBlocks" xsi:noNamespaceSchemaLocation="../../resources/schema/msgcat.xsd">
  <message>
    <entry key="DataTypesTab">データ型</entry>
    <entry key="AlgorithmTab">アルゴリズム</entry>
    <entry key="AlgorithmType">メソッド: </entry>
    <entry key="AlgorithmMethod">アルゴリズム メソッド: </entry>
    <entry key="BreakPointsMin">ブレークポイントの最小値 {0,number,integer}:</entry>
    <entry key="BreakPointsMax">ブレークポイントの最大値 {0,number,integer}:</entry>
    <entry key="INTERMEDIATE_UNIFIEDDATATYPE">中間結果のデータ型:</entry>
    <entry key="NumberOfIterations">反復回数:</entry>
    <entry key="NumberOfDataPoints">データ点数:</entry>
    <entry key="OutputWordLength">出力語長:</entry>
    <entry key="DisallowWideOutput">広範囲の出力を許可しない</entry>
    <entry key="BmathfcnOutSignalType">出力信号タイプ:</entry>
    <entry key="BmathfcnOperator">関数:</entry>
    <entry key="PolynomialCoefficients">多項式係数: </entry>
    <entry key="SL_DSCPT_SHIFT">このブロックは信号のビットや 2 進小数点の算術シフトが可能です。\nこれらのアクションの効果として、2 のべき乗の乗算とスケーリングにおける変更の結合と解釈ができます。たとえば、ビット シフトの方向が ''右'' である場合、2 のべき乗の乗算は 2^( BinPtShiftNumber - BitShiftNumber ) です。\nビット シフトの方向が ''双方向'' である場合、負の値は左シフトを示します。"左" または "右" の方向の場合、ビット シフトについては常に正の値を使用します。\n入力が浮動小数点型の場合、2 のべき乗法の乗算が行われますが、スケーリングの変更は適用されません。</entry>
    <entry key="SL_DSCPT_ASSIGNMENT_SKIP_INIT">ベクトル モード: Y(E) = U1\n行列モード: \n\tY(R,C) = U1\nここで\nU1 = 2 番目の入力端子、E = 要素、R = 行、C = 列 です。また、E、R、C は、ブロックのダイアログ、または、外部の入力端子のいずれかで指定されます。</entry>
    <entry key="SL_DSCPT_IMPLICIT_ASSIGNMENT">すべての反復の結合である Implicit Iterator 出力に、反復の 1 つからの結果を割り当てます。</entry>
    <entry key="SL_DSCPT_SUBSYSTM">Subsystem ブロックの設定を選択します。</entry>
    <entry key="SL_DSCPT_DTF">分子係数は、ベクトルか行列式です。分母係数は、ベクトルでなければなりません。出力幅は、分子係数の行数と等しくなければなりません。z のべき乗の降順で係数を指定しなければなりません。 </entry>
    <entry key="SL_DSCPT_DPULSEGEN">出力パルス:\n\nif (t &gt;= 位相遅延) &amp;&amp; パルスがオン\n   Y(t) = 振幅\n else\n   Y(t) = 0\n end\n\n[パルス タイプ] によって、使用する計算手法が決まります。\n\n[時間ベース] は、可変ステップ ソルバーを使用する場合に推奨されます。一方、[サンプル ベース] は、固定ステップ ソルバーを使用する場合、または可変ステップ ソルバーを使うモデルの離散部分内での使用に推奨されます。</entry>
    <entry key="SL_DSCPT_FOH">1 次ホールド。</entry>
    <entry key="SL_DSCPT_ZOH">ゼロ次ホールド。</entry>
    <entry key="SL_DSCPT_DERIV">数値微分: Δu/Δt。</entry>
    <entry key="SL_DSCPT_DOT">入力のドット (内) 積です。\ny = sum(conj(u1).*u2)</entry>
    <entry key="SL_DSCPT_MATGAIN">行列ゲイン。y = Ku</entry>
    <entry key="SL_DSCPT_BACKLASH">モデルのバックラッシュ。この場合、不感帯幅がシステム内の遊び (余裕) の量を指定します。</entry>
    <entry key="SL_DSCPT_BIAS">バイアスを入力に追加\n  Y = U + Bias</entry>
    <entry key="SL_DSCPT_CMBLOGIC">真理値表の (ブール値として扱われる) 入力ベクトルの要素を検出し、[真理値表] パラメーターの対応する行を出力します。真理値表の入力側は (暗黙的に) 決まっています。</entry>
    <entry key="SL_DSCPT_FRICTION">クーロンと粘性摩擦の簡単なモデルです。\ny = sign(x)*(Gain*abs(x)+Offset)</entry>
    <entry key="SL_DSCPT_DEADZONE">不感帯内の入力に対して 0 を出力します。不感帯の外側の場合、上限または下限値のいずれかでオフセットされた入力信号になります。</entry>
    <entry key="SL_DSCPT_HITCROSS">ヒット クロッシング方向パラメーターにより指定された方向で、入力信号がヒット クロッシング オフセット パラメーター値に達した場合を検出します。信号、メッセージ、または関数呼び出しイベントを出力するように、ブロックを構成することができます。入力信号が、指定した方向でオフセット値と交差する場合、ブロックは信号出力タイプに 1 を、メッセージ出力タイプにメッセージを、または関数呼び出し出力タイプに単一の関数呼び出しを出力します。メッセージにはヒット クロッシング イベントのクロッシング タイプ、インデックス、時間およびオフセットが含まれます。</entry>
    <entry key="SL_DSCPT_HITSCHEDULER">シミュレーション中の可変ステップ ソルバーのメジャー タイム ステップをスケジュールします。イネーブル端子への入力が logical true の場合、ブロックはタイム ステップをスケジュールします。ブロックは、スケジュールするタイム ステップを Δt 入力値 (秒) と現在のシミュレーション時間の和として計算します。 \n\nブロックの出力は Boolean 信号にすることができますが、その値は、スケジュールされたタイム ステップでは true、そうでない場合や関数呼び出しイベントでは false となります。</entry>
    <entry key="SL_DSCPT_BITLOGIC">2 番目のオペランド パラメーターからの値で uint8、uint16、または uint32 の入力端子データ上のビット演算を行います。16 進数の値は ''FF00'' のような文字ベクトルで入力できます。</entry>
    <entry key="SL_DSCPT_LOOK_UP">指定したテーブルを使用して、入力値の 1 次元線形内挿を行います。テーブルの範囲外では外挿を実行します。</entry>
    <entry key="SL_DSCPT_LOOKUPND">インデックスの検索を含む n 次元の内挿されたテーブル ルックアップを実行します。テーブルは、N 変数の関数のサンプルを表します。ブレークポイントの設定は、入力値をテーブル内の位置に関連付けます。最初の次元は最上位 (または左) の入力端子に対応します。</entry>
    <entry key="SL_DSCPT_PRE_LOOKUP">\"ブレークポイント データ\" で定義された区間のセット上での入力 u の位置を見つけます。インデックス k と小数部 f を出力します。ここで k は入力を含む区間を指定し、f は区間上での入力の正規化された位置です。</entry>
    <entry key="SL_DSCPT_POLYVAL">多項式の計算。多項式係数配列 P によって指定される P(u) を計算します。P は高次から低次に並べ替えられます。これは、MATLAB の関数 polyval によって許容された形式です。</entry>
    <entry key="SL_DSCPT_MATH">対数、指数、べき乗、剰余を含む数学関数です。関数が複数の引数をもつ場合は、最初の引数は入力端子の一番上 (または左) に対応します。</entry>
    <entry key="SL_DSCPT_SQRT">平方根関数、符号付き平方根関数、逆平方根関数などの平方根関数。</entry>
    <entry key="SL_DSCPT_RECIP">逆数関数: ニュートン・ラフソン近似法を使用した実装。</entry>
    <entry key="SL_DSCPT_MINMAX">入力の最小値と最大値を出力します。単入力の場合、演算子は入力ベクトル対して適用されます。多入力の場合、演算子は入力に対して適用されます。</entry>
    <entry key="SL_DSCPT_PERMUTE_DIMENSIONS">その次元を並べ替えることで、たとえば、1 番目と 3 番目の次元を交換することで、入力信号の要素を再配列します。入力信号の次元に適用する置換を指定するために [順序] パラメーターを使用します。このパラメーターの値は、N を入力信号の次元数とする場合に、N 要素のベクトルでなければなりません。置換ベクトルの要素は、1 から N の値の並べ替えでなければなりません。	たとえば、5 行 3 列の入力信号に適用された置換ベクトル [2 1] は、3 行 5 列の出力信号、つまり入力信号を転置します。</entry>
    <entry key="SL_DSCPT_QUANTIZE">与えられた区間で入力を離散化します。</entry>
    <entry key="SL_DSCPT_RATELIM">信号の立ち上がりと立ち下がりの範囲を制限します。</entry>
    <entry key="SL_DSCPT_RELOP">入力に選択した関係演算子を適用し、結果を出力します。一番上 (または左） の入力は、最初のオペランドに対応します。</entry>
    <entry key="SL_DSCPT_FIND">入力のゼロではない値の線形のインデックスまたは添字を見つけます。(線形インデックスの変換は、最初の次元に沿って行われます。)[ゼロではない入力値に対する出力端子の表示] を選択すると、追加の出力端子にゼロではない入力値が表示されます。</entry>
    <entry key="SL_DSCPT_RELAY">入力を指定したしきい値と比較して、指定した "on" または "off" 値を出力します。on/off 状態の変化は上限と下限の間の入力に影響しません。</entry>
    <entry key="SL_DSCPT_ROUNDING">丸め演算です。</entry>
    <entry key="SL_DSCPT_SATURATE">入力信号を上限と下限の飽和値に制約します。</entry>
    <entry key="SL_DSCPT_UDELAY">入力信号を指定されたサンプル数だけ遅延します。</entry>
    <entry key="SL_DSCPT_SIGNUM">実数入力では、正の入力の場合 1、負の入力の場合 -1、0 の入力の場合 0 を出力します。複素数の浮動小数点入力では、出力結果は sign(u) = u ./ abs(u) になります。  </entry>
    <entry key="SL_DSCPT_TRIGONOMETRY">三角関数と双曲線関数です。関数が複数の引数をもつ場合は、最初の引数は入力端子の最上位 (または左) に対応します。関数 sin、cos、sincos、cos +j sin、atan2 の場合、CORDIC 近似は出力の計算にも使用できます。</entry>
    <entry key="SL_DSCPT_TDELAY">指定した遅れを入力信号に適用します。遅延がシミュレーションのステップ サイズより大きい場合、最良の精度になります。</entry>
    <entry key="SL_DSCPT_VTDELAY">1 番目の入力信号に遅延を適用します。遅延タイプが可変時間遅延の場合、2 番目の入力は遅延時間 To を指定します。ブロックは、関数 y=u(t-To(t)) を実行します。遅延タイプが可変伝達遅延の場合、2 番目の入力は、入力の瞬間の遅延時間 Ti を指定します。ブロックは、パイプ内の圧縮できない液体の流れのような、可変伝達遅延の現象をシミュレートするために使用できます。遅延がシミュレーションのステップ サイズより大きい場合、最良の精度になります。</entry>
    <entry key="SL_DSCPT_MSGDELAY">最初の入力のエンティティに伝達遅延を適用します。2 番目の入力は、瞬間の遅延時間 ti を指定します。</entry>
    <entry key="SL_DSCPT_XYGRAPH">指定した Axes の範囲を使って 1 番目の入力 (X) と 2 番目の入力 (Y) をプロットします。シミュレーションを高速化するにはサンプル時間を増やしてください。</entry>
    <entry key="SL_DSCPT_BANDLIMNOISE">指定したパワーの白色ノイズをシミュレーションします。信号の振幅は帯域幅の減少に伴うエネルギー損失を補償するため、サンプル間隔と共に増加します。連続システムで使用します。</entry>
    <entry key="SL_DSCPT_CHIRP">周波数が増加または減少する正弦波です。</entry>
    <entry key="SL_DSCPT_CONSTANT">[定数値] パラメーターで指定した定数を出力します。[定数値] がベクトルで [ベクトル パラメーターを 1 次元として解釈] がオンの場合、定数値を 1 次元配列として扱います。そうでない場合、定数値と同じ次元で行列を出力します。</entry>
    <entry key="SL_DSCPT_PULSEGEN">パルス列を出力します。</entry>
    <entry key="SL_DSCPT_RAMP">ランプを出力します。</entry>
    <entry key="SL_DSCPT_RANDNUM">正規 (ガウス) 分布する乱数信号を出力します。出力は与えられたシードを反復します。</entry>
    <entry key="SL_DSCPT_URANDNUM">一様分布する乱数信号を出力します。出力は与えられたシードを反復します。</entry>
    <entry key="SL_DSCPT_REPEATSEQ">反復信号を出力します。周期は時間ベクトルの最後の値と等しくなります。データ点間を内挿します。</entry>
    <entry key="SL_DSCPT_SIGGEN">各種波形を出力します:\n   Y(t) = 振幅*波形(周波数, t)</entry>
    <entry key="SL_DSCPT_SIN_WAVE">正弦波を出力します:\n\n   O(t) = 振幅*Sin(周波数*t+位相) + バイアス\n\n正弦波タイプは使用する計算手法を決定します。2 つのタイプのパラメーターは以下のように関連します。:\n\n1 周期のサンプル数 = 2*pi / (周波数 * サンプル時間)\n\nオフセット サンプル数 = 位相 * 1 周期のサンプル数 / (2*pi)\n\n長時間の実行のために数値的な問題 (絶対時間でオーバーフローするなど) が発生した場合、サンプルベースの正弦波タイプを使用してください。</entry>
    <entry key="SL_DSCPT_STEP">ステップを出力します。</entry>
    <entry key="SL_DSCPT_CCVR">カスタム コード変数を読み取ります。</entry>
    <entry key="SL_DSCPT_CCVW">カスタム コード変数に書き込みます。</entry>
    <entry key="SL_DSCPT_CCFCN">カスタム コード関数を呼び出します。</entry>
    <entry key="SL_DSCPT_CFCN_BLK">C コードを統合します。</entry>
    <entry key="SL_DSCPT_PYFCN_BLK">Python コードを統合します。</entry>
    <entry key="SL_DSCPT_SWITCH">入力 2 が選択した基準を満たす場合は入力 1 を通過させ、それ以外の場合は入力 3 を通過させます。入力は上から下 (または左から右) に番号が付けられます。最初と 3 番目の入力端子はデータ端子で、2 番目の入力は制御端子です。制御端子 2 の基準は、u2 &gt;= しきい値、u2 &gt; しきい値、u2 ~= 0 のいずれかです。</entry>
    <entry key="SL_DSCPT_MANUALSWITCH">ブロックをダブルクリックすることで 2 入力間の出力を切り替えます。\n</entry>
    <entry key="SL_DSCPT_ALGCONSTRAINT">入力信号 f(z) を 0 に制約し、代数的な状態 z を出力します。このブロックは、入力で 0 を生成するために必要な値を出力します。出力はいくつかのフィードバック パスを通じて入力に作用しなければなりません。代数ループのソルバーの影響を改善するために出力の初期推定を与えます。</entry>
    <entry key="SL_DSCPT_REAL_IMAG_TO_COMPLEX">実数および/または虚数の入力から複素数の出力を作成します。</entry>
    <entry key="SL_DSCPT_COMPLEX_TO_REAL_IMAG">入力の実数部および/または虚数部を出力します。</entry>
    <entry key="SL_DSCPT_MAGNITUDE_ANGLE_TO_COMPLEX">振幅および/またはラジアン位相角の入力から複素数の出力を作成します。CORDIC 近似は、出力の計算にも使用できます。</entry>
    <entry key="SL_DSCPT_COMPLEX_TO_MAGNITUDE_ANGLE">入力の振幅および/またはラジアン位相角を計算します。</entry>
    <entry key="SL_DSCPT_PROBE">ラインの幅、サンプル時間、次元を調査します。複素数信号かどうかを検出します。</entry>
    <entry key="SL_DSCPT_MATIX_CONCATENATION">水平または垂直結合を行います。1 次元ベクトルの入力信号は列ベクトルとして扱われます。例: [Mx1] 行列。出力は常に行列です。</entry>
    <entry key="SL_DSCPT_POST">後続のモデル イベント。</entry>
    <entry key="SL_DSCPT_INTERPND">事前に計算されたインデックスと小数部の値を使用して、n 次元テーブルで内挿 (または外挿) を実行します。\n\n''n'' 変数の関数を表す n 次元テーブルを指定するには、[テーブルの次元数] と [テーブル データ] を使用してください。\n\n[サブテーブル選択次元数] は、ブロックがテーブル データのサブセットだけに内挿を行うように指定できます。値として "k" を指定した場合、ブロックは、インデックスと小数部の入力と "k" のサブテーブル選択入力を組み合わせた "n-k" を表示します。既定値は 0、つまりテーブル全体の内挿です。内挿されるサブテーブルのインデックスを指定するには、選択の入力を使用してください。\n\nPrelookup ブロックを使って、インデックス、小数部、選択の入力を計算できます。</entry>
    <entry key="SL_DSCPT_WSTIME">重み付きサンプル時間で入力信号の加算、減算、乗算、除算を行います。あるいは、重み付きのサンプル時間、または重み付きのサンプル レートだけを出力します。</entry>
    <entry key="SL_DSCPT_UMINUS">信号の単項マイナスです。</entry>
    <entry key="SL_DSCPT_ALGCONSTRAINTBLOCK">入力信号 f(z) を制約し、代数状態 z を出力します。\nこのブロックは、選択された制約を満たす値 z を出力します。出力は特定のフィードバック パスを介して入力に作用しなければなりません。\n代数ループ ソルバーの効率を向上させるには、ソルバーを選択し、許容誤差を変更して出力の [初期推定] を指定します。</entry>
    <entry key="SL_DSCPT_STR2NUM">文字列信号を数値信号に変換します。</entry>
    <entry key="SL_DSCPT_SPRINTF">書式設定済みデータを string に書き込みます。</entry>
    <entry key="SL_DSCPT_DTYPE_DUPLICATE">すべての入力を正確に同じデータ型をもつようにします。</entry>
    <entry key="SL_DSCPT_DLOOKUPND">要素、ベクトルまたは 2 次元行列を table データから選択します。ベクトルが 2 次元 table から選択されている場合、モデル コンフィギュレーション設定に応じて、出力ベクトルを列または行にすることができます。\n\nブロック入力は 0 ベースのインデックスであり、たとえば、3 の入力により、その次元の 4 番目の要素が返されます。1 番目の選択インデックスは最上位 (または左) の入力端子に対応します。</entry>
    <entry key="SL_DSCPT_SECOND_ORDER_INTEGRATOR">二次型入力信号の連続時間積分です。</entry>
    <entry key="SL_DSCPT_FIR">FIR フィルターを使用して、時間とともに入力の各チャネルに個々にフィルターをかけます。調整可能なダイアログ パラメーター、または別々の入力端子を使用してフィルター係数を指定できますが、これは時変係数に役立ちます。\n\n直接型以外のフィルター構造を使用するには DSP System Toolbox のライセンスが必要です。</entry>
    <entry key="SL_DSCPT_IIR">離散 IIR フィルターを使用して、時間とともに入力の各チャネルに個々にフィルターをかけます。1/z のべき乗の昇順で分子係数と分母係数を指定してください。\n\n直接型 II 以外のフィルター構造を使用するには DSP System Toolbox のライセンスが必要です。</entry>
    <entry key="SL_DSCPT_TRANSFERFCN">z 変換の伝達関数を実行します。分子係数と分母係数を z の降べき順に設定します。分母の次数は分子の次数以上にしなければなりません。</entry>
    <entry key="SL_DSCPT_ALLPOLE">Allpole フィルターを使用して、時間とともに入力の各チャネルに個々にフィルターをかけます。調整可能なダイアログ パラメーター、または個別の入力端子を使用してフィルター係数を指定すると、時変係数の指定に便利です。\n\n直接型または直接型転置フィルター構造を使用する場合、最初の分母係数は 1 と等しくなければなりません。</entry>
    <entry key="SL_DSCPT_DTC">入力を出力のデータ型とスケーリングに変換します。\n\nこの変換には 2 つの目的があります。1 つは入力と出力の実際値を等しくすることです。もう 1 つは入力と出力の整数格納値を等しくすることです。オーバーフローと量子化誤差があると、この目的を完全に達成することができません。</entry>
    <entry key="SL_DSCPT_MPSWITCH">最初の入力の切り捨てられた値に対応する入力信号を通過させます。入力は上から下 (または左から右) に番号が付けられます。最初の入力端子は制御端子です。他の入力端子はデータ端子です。</entry>
    <entry key="Magnitude_CB">振幅</entry>
    <entry key="Angle_CB">角度</entry>
    <entry key="Magnitudeandangle_CB">振幅と角度</entry>
    <entry key="CReal_CB">実数部</entry>
    <entry key="CImag_CB">虚数部</entry>
    <entry key="Realandimag_CB">実数部と虚数部</entry>
    <entry key="None_CB">なし</entry>
    <entry key="Linear_CB">線形</entry>
    <entry key="Linear_PointSlope_CB">線形の点と傾き</entry>
    <entry key="Linear_Lagrange_CB">線形ラグランジュ</entry>
    <entry key="SPEED_CB">速度</entry>
    <entry key="PRECISION_CB">精度</entry>
    <entry key="Warning_CB">警告</entry>
    <entry key="Error_CB">エラー</entry>
    <entry key="Time_based_CB">時間ベース</entry>
    <entry key="Sample_based_CB">サンプル ベース</entry>
    <entry key="Timebased_CB">時間ベース</entry>
    <entry key="Samplebased_CB">サンプルベース</entry>
    <entry key="Exact_CB">厳密</entry>
    <entry key="Newton_Raphson_CB">ニュートン・ラフソン</entry>
    <entry key="auto_CB">自動</entry>
    <entry key="real_CB">実数</entry>
    <entry key="complex_CB">複素数</entry>
    <entry key="Explicit_CB">明示的な値</entry>
    <entry key="EvenSpacing_CB">等間隔</entry>
    <entry key="BreakpointObject_CB">ブレークポイント オブジェクト</entry>
    <entry key="TableAndBreakpoints_CB">テーブルとブレークポイント</entry>
    <entry key="LookupTableObject_CB">ルックアップ テーブル オブジェクト</entry>
    <entry key="OutputIndexAndFrac_CB">インデックスと小数部</entry>
    <entry key="OutputIndFracAsBus_CB">バスとしてのインデックスと小数部</entry>
    <entry key="OutputIndexOnly_CB">インデックスのみ</entry>
    <entry key="Flat_CB">フラット</entry>
    <entry key="None_Flat_CB">なし - フラット</entry>
    <entry key="Nearest_CB">最近傍</entry>
    <entry key="Clip_CB">クリップ</entry>
    <entry key="None_Clip_CB">なし - クリップ</entry>
    <entry key="Akima_CB">Akima スプライン</entry>
    <entry key="TrigLutInheritViaInput">継承: 入力による継承</entry>
    <entry key="Linear_indices_CB">線形インデックス</entry>
    <entry key="Subscripts_CB">添字付け</entry>
    <entry key="Same_as_input_CB">入力と同じ</entry>
    <entry key="internal_CB">内部</entry>
    <entry key="external_CB">外部</entry>
    <entry key="none_CB">なし</entry>
    <entry key="rising_CB">立ち上がり</entry>
    <entry key="falling_CB">立ち下がり</entry>
    <entry key="either_CB">両方</entry>
    <entry key="both_CB">両方</entry>
    <entry key="Variable_time_delay_CB">可変時間遅延</entry>
    <entry key="Variable_transport_delay_CB">可変伝達遅延</entry>
    <entry key="MsgDelay_time_CB">時間遅延</entry>
    <entry key="MsgDelay_transport_CB">伝達遅延</entry>
    <entry key="Ceiling_CB">正方向</entry>
    <entry key="Convergent_CB">最も近い偶数方向</entry>
    <entry key="Floor_CB">負方向</entry>
    <entry key="Round_CB">最も近い整数方向</entry>
    <entry key="Simplest_CB">最も簡潔</entry>
    <entry key="Zero_CB">ゼロ方向</entry>
    <entry key="Frame_based_CB">フレームベース</entry>
    <entry key="Use_data_type_of_Constant_value_CB">'定数値' のデータ型を使用</entry>
    <entry key="More_dot_CB">詳細...</entry>
    <entry key="Evenly_spaced_points_CB">等間隔のポイント</entry>
    <entry key="Linear_search_CB">線形探索</entry>
    <entry key="Binary_search_CB">二分探索</entry>
    <entry key="Clip_to_range_CB">範囲外を切り取る</entry>
    <entry key="Linear_extrapolation_CB">線形外挿</entry>
    <entry key="Zero_based_CB">0 ベース</entry>
    <entry key="One_based_CB">1 ベース</entry>
    <entry key="Use_simulation_time_CB">シミュレーション時間を使用</entry>
    <entry key="Use_external_signal_CB">外部信号を使用</entry>
    <entry key="Rising_CB">立ち上がり</entry>
    <entry key="Falling_CB">立ち下がり</entry>
    <entry key="Either_CB">両方</entry>
    <entry key="Level_CB">レベル</entry>
    <entry key="Level_hold_CB">レベル保持</entry>
    <entry key="DialogParameters_CB">ダイアログ パラメーター</entry>
    <entry key="InputPort_CB">入力端子</entry>
    <entry key="DirectForm_CB">直接型</entry>
    <entry key="DirectFormSym_CB">直接型対称</entry>
    <entry key="DirectFormAsym_CB">直接型反対称</entry>
    <entry key="DirectFormTransposed_CB">直接型転置</entry>
    <entry key="LatticeMA_CB">ラティス MA</entry>
    <entry key="LatticeAR_CB">ラティス AR</entry>
    <entry key="DF1_CB">直接型 I</entry>
    <entry key="DF1T_CB">直接型 I 転置構成</entry>
    <entry key="DF2_CB">直接型 II</entry>
    <entry key="DF2T_CB">直接型 II 転置構成</entry>
    <entry key="SL_DSCPT_UnitConversion">有効な単位変換を実行します。</entry>
    <entry key="Auto_CB">自動</entry>
    <entry key="Line_Search_CB">直線探索</entry>
    <entry key="Trust_Region_CB">信頼領域</entry>
    <entry key="SL_DSCPT_FirstOrderHold">入力信号の連続の区分的線形近似を出力します。</entry>
    <entry key="num_CB">信号</entry>
    <entry key="msg_CB">メッセージ</entry>
    <entry key="fcn_CB">関数呼び出し</entry>
    <entry key="SL_DSCPT_VPG">
  デューティ比 (D) と周期 (P) を入力として使用し、反復パルス信号を出力します。\n\n出力されるパルスは次の式で求められます:\n\n y(t) = 1 (t(k) &lt;= t &lt; t(k) + pw(k) の場合)\n y(t) = 0 (t(k) + pw(k) &lt;= t &lt; t(k) + P(k) の場合)\n\nここで、t(k) は 'k-1' 個のパルス出力後の時間、pw(k) はパルス幅、すなわち t(k) における入力値 D(k) および P(k) の積 (pw(k) = P(k) * D(k)) です。\n\n通常、パルス幅は 0 より大きく、P(k) より小さくなります。\n\n[ゼロのパルス幅を許可] チェック ボックスを選択すると、シミュレーション中にパルス幅がゼロになることを許可するようブロックが構成されます。しかし、こうするとブロックに直達が必要となり、代数ループが発生する可能性があります。\n\n固定のサンプル時間間隔で出力信号値を生成するには、[固定の時間間隔で実行] チェック ボックスを選択します。
</entry>
    <entry key="ContinuousLinearBlocksParameterTunabilityAuto">自動</entry>
    <entry key="ContinuousLinearBlocksParameterTunabilityOptimized">最適化済み</entry>
    <entry key="ContinuousLinearBlocksParameterTunabilityUnconstrained">制約なし</entry>
    <entry key="SL_DSCPT_CTF">
  分子係数は、ベクトルか行列式です。分母係数は、ベクトルでなければなりません。出力幅は、分子係数の行数と等しくなければなりません。s のべき乗の降順で係数を指定しなければなりません。\n\n'パラメーターの調整可能性' は、分子係数と分母係数について、実行時の調整可能性レベルを制御します。\n'自動': 最適な調整可能性レベルを Simulink で選択できるようにします。\n'最適化済み': 調整可能性がパフォーマンスに対して最適化されます。\n'制約なし': シミュレーション ターゲット全体で、調整可能性が制約されません。
</entry>
    <entry key="SL_DSCPT_CSS">
  状態空間モデル:\n dx/dt = Ax + Bu\n y = Cx + Du\n\n'パラメーターの調整可能性' は、A、B、C、D について、実行時の調整可能性レベルを制御します。\n'自動': 最適な調整可能性レベルを Simulink で選択できるようにします。\n'最適化済み': 調整可能性がパフォーマンスに対し最適化されます。\n'制約なし': シミュレーション ターゲット全体で、調整可能性が制約されません。\n\n[初期状態で 0 に指定されている D 行列で非ゼロの値を許可] チェック ボックスを選択するにはブロックが直達をもつ必要があり、代数ループが発生する可能性があります。
</entry>
    <entry key="SL_DSCPT_CZP">
  零点は行列表現です。極とゲインはベクトル表現です。出力幅は零点の行列内の列数と等しくなるか、零点がベクトルの場合は 1 になります。 \n\n[パラメーターの調整可能性] は、零点、極、ゲインについて、実行時の調整可能性レベルを制御します。 \n自動: 最適な調整可能性レベルを Simulink で選択できるようにします。 \n最適化済み: 調整可能性がパフォーマンスに対して最適化されます。 \n制約なし: シミュレーション ターゲット全体で、調整可能性が制約されません。
</entry>
    <entry key="SL_DSCPT_SLIDEGAIN">N/A</entry>
    <entry key="SL_DSCPT_ABSVAL">y = |u|</entry>
    <entry key="SL_DSCPT_SCOPE">N/A</entry>
    <entry key="MagnitudeAndAngle_CB">MagnitudeAndAngle</entry>
    <entry key="RealAndImag_CB">RealAndImag</entry>
    <entry key="int8_CB">int8</entry>
    <entry key="uint8_CB">uint8</entry>
    <entry key="int16_CB">int16</entry>
    <entry key="uint16_CB">uint16</entry>
    <entry key="int32_CB">int32</entry>
    <entry key="uint32_CB">uint32</entry>
    <entry key="double_CB">double</entry>
    <entry key="single_CB">single</entry>
    <entry key="square_CB">square</entry>
    <entry key="sqrt_CB">sqrt</entry>
    <entry key="boolean_CB">boolean</entry>
    <entry key="One_CB">1</entry>
    <entry key="Two_CB">2</entry>
    <entry key="Three_CB">3</entry>
    <entry key="Four_CB">4</entry>
    <entry key="OneSpace_CB">   1   </entry>
    <entry key="TwoSpace_CB">   2   </entry>
    <entry key="ThreeSpace_CB">   3   </entry>
    <entry key="FourSpace_CB">   4   </entry>
    <entry key="CORDIC_CB">CORDIC</entry>
    <entry key="LUT_CB">Lookup</entry>
    <entry key="TrigAngleRadian">radian</entry>
    <entry key="TrigAngleRevolution">revolution</entry>
    <entry key="x_CB">x</entry>
    <entry key="dx_dt_CB">dxdt</entry>
    <entry key="dx_div_dt_CB">dx/dt</entry>
    <entry key="ZeroCross_CB">ZeroCross</entry>
    <entry key="ZeroCrossTol_CB">ZeroCrossTolerance</entry>
    <entry key="Func_Eq_0_CB">f(z) = 0</entry>
    <entry key="Func_Eq_Z_CB">f(z) = z</entry>
  </message>
</rsccat>
