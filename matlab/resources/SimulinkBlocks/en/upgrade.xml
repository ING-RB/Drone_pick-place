<?xml version="1.0" encoding="UTF-8" ?>
<rsccat version="1.0" locale="en_US" product="SimulinkBlocks" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../schema/msgcat.xsd">
    <message>
        
        <entry key="SFunInterpND">Replace S-Function block ''Interpolation (n-D) using PreLookup'' with built-in block ''Interpolation Using Prelookup''</entry>
        <entry key="SFunPrelookup">Replace S-Function block ''PreLookup Index Search'' with built-in block ''Prelookup''</entry>
        <entry key="levelResetContIntegrator"><![CDATA[ The Integrator block has its <b>External reset</b> parameter set to <tt>level</tt>. As of R2006b, the <tt>level</tt> reset behavior was revised for backward compatibility with R14SP2 and previous releases. If you desire the <tt>level</tt> reset behavior that exists in R14SP3 and R2006a, set the <b>External reset</b> parameter to <tt>level hold</tt>. For more information about the <tt>level</tt> and <tt>level hold</tt> reset options, see <a href="matlab:doc integrator">Integrator</a> in the Simulink Reference documentation]]></entry>
        <entry key="wrongNumMaskEntries">Unexpected Mask Condition: wrong number of mask entries on block ''{0}''</entry>
        <entry key="emlFimathCastBeforeSumFalse">The input embedded.fimath for the MATLAB Function block ''{0}'' has ''CastBeforeSum'' set to false.\nThis setting is no longer supported by MATLAB Function blocks. Changing this setting to true.</entry>
        <entry key="emlFimathForFiConstructorsObsolete">The ''FIMATH for fi and fimath constructors'' with the ''MATLAB factory default'' setting for the MATLAB Function block ''{0}'' is no longer supported. Changing this setting to use the ''MATLAB Function Block FIMATH''.</entry>
        <entry key="SFTruthTableFimathCastBeforeSumFalse">The input embedded.fimath for the Stateflow Truth Table Block ''{0}'' has ''CastBeforeSum'' set to false.\nThis setting is no longer supported. Changing this setting to true.</entry>
        <entry key="SFTruthTableFimathForFiConstructorsObsolete">The ''FIMATH for fi and fimath constructors'' with the ''MATLAB factory default'' setting for the Stateflow Truth Table block ''{0}'' is no longer supported. Changing this setting to use the ''MATLAB Function Block FIMATH''.</entry>
        <entry key="mathBlockSqrtFunction1"> ''sqrt'' function in Math block has been deprecated and should be replaced by ''signedSqrt'' function in Sqrt Function block.</entry>
        <entry key="mathBlockSqrtFunction2"> ''sqrt'' function in Math block has been deprecated and should be replaced by ''sqrt'' function in Sqrt Function block.</entry>
        <entry key="unitDelayBlockContinuousMode"> Unit delay block normally uses discrete sample time. When it inherits continuous sample time, its time delay is not fixed and could change with each time step. This is not the expected behavior for a unit delay block. For continuous sample time, replace Unit Delay blocks with Memory blocks.</entry>
        <entry key="updateParameters">update parameter(s)</entry>
        <entry key="toWksSyntaxError">Unrecognized syntax in ToWorkspace block ''{0}'': Please separate the appropriate elements of the ''Maximum number of rows'' parameter into the appropriate dialog entries: [rows, decimation, ts]</entry>
        <entry key="setOutportIcEmpty">The following subsystem output ports specify an initial output value. Since the simulation is not using this InitialOutput parameter, the value is meaningless. To improve the clarity of your design, use set_param to set the initial output to empty [].  For more information, type "help set_param" at the MATLAB command line.</entry>
        <entry key="RepeatingSequenceRemoveDuplicates"> Repeating Sequence block can not process duplicate numbers in 'Time values'. If duplicate 'Time values' inputs are detected, the duplicates will be replaced by two time points spaced apart by local eps. If 'Time values' used a workspace variable, it will be replaced by a new variable, and saved as a '.mat' file in 'slprj/modeladvisor/'. The original variable remains unchanged. Compare your old values and the new values to see if the proposed values are acceptable</entry>
        <entry key="RepeatingSequenceRemoveDuplicatesResult"> The parameters of ''{0}'' have been updated. The original variable is ''{1}'', but the new variable is ''{2}''. The corresponding data is saved at ''{3}''. Please copy the file to your data directory.</entry>
        <entry key="RepeatingSequenceRemoveDuplicatesLoadFileErr"> The data file ''{0}'' generated by the upgrade advisor check is lost. To regenerate it again, you can change the variable ''{1}'' in block ''{2}'' back to its original variable name, and rerun the upgrade advisor check again.</entry> 
        <entry key="MPSwitchOneDataPortEnumUnsupported"> The control port data type is of enumerated type and the block has one data port. This cannot be automatically updated to specify indices for data port order.</entry>
        <entry key="MPSwitchDeadportsInBlockUnsupported"> The control port data type is of enumerated type but the enumerations do not map to the number of data ports in the block, hence this block cannot be automatically replaced to specify data port indices.</entry>
        <entry key="MPSwitchEnumCaseCompatible"> The control port data type is of enumerated type and ''Data port order'' is of contiguous type. Parameter ''Data port order'' will be automatically replaced to ''Specify indices'' and ''Data port indices'' will be specified.</entry>
        <entry key="initCondSetToZero">Initial condition of block ''{0}'' is not 0 or 1. Setting initial condition of updated block to 0.</entry>
        <entry key="unrecognizedFlipFlopType">Unrecognized flip-flop block type</entry>
        <entry key="skipReplaceDCM">Skipping ''{0}''.  This block may have been customized from the Aerospace library and may need to be updated.</entry>
        <entry key="fromBlockCloseFcnCallback"> The From block no longer requires a CloseFcn callback. Therefore, this function has been removed. Remove the "tagdialog Close" string from the CloseFcn callback to avoid warnings about a missing function. </entry>
        <entry key="lookupTableCompatible">The Lookup Table and Lookup Table (2-D) blocks are fully supported and compatible but are no longer being enhanced. These blocks can be replaced automatically with 1-D Lookup Table and 2-D Lookup Table blocks, respectively, which provide new settings for data types and algorithms. These settings can be used to improve memory use and calculation speed in simulation and code generation. </entry>
        <entry key="lookupTableIncompatibleRepeatedBp"> The Lookup Table and Lookup Table (2-D) blocks with repeated breakpoint data: The Lookup Table and Lookup Table (2-D) blocks are fully supported and compatible but are no longer being enhanced. These blocks can be replaced with 1-D Lookup Table and 2-D Lookup Table blocks, respectively, which provide new settings for data types and algorithms. These settings can be used to improve memory use and calculation speed in simulation and code generation. The following Lookup Table blocks and Lookup Table (2-D) blocks have repeated breakpoint data, but 1-D Lookup Table blocks and 2-D Lookup Table blocks do not support it. Please consider manually updating the breakpoints to eliminate the repeated data so that these blocks can be automatically updated. </entry>
        <entry key="lookupTableIncompatibleUnsupportedLum"> The Lookup Table and Lookup Table (2-D) blocks with "Lookup method" as ''Use Input Nearest'' or ''Use Input Above'': The Lookup Table and Lookup Table (2-D) blocks are fully supported and compatible but are no longer being enhanced. These blocks can be replaced with 1-D Lookup Table and 2-D Lookup Table blocks, respectively, which provide new settings for data types and algorithms. These settings can be used to improve memory use and calculation speed in simulation and code generation.  The following Lookup Table blocks and Lookup Table (2-D) blocks have "Lookup method" as ''Use Input Nearest'' or ''Use Input Above'', but 1-D Lookup Table blocks and 2-D Lookup Table blocks do not support it. Please consider manually updating the "Lookup Method" to "Interpolation-Extrapolation", "Interpolation-Use End Values" or "Use Input Below", so that these blocks can be automatically updated. Otherwise, the block replacement will automatically replace these blocks and set the new blocks' "Interpolation method" to "Linear" and "Extrapolation method" to "Clip''. As a result, a numerical difference might appear. </entry>
        <entry key="lookupTableIncompatibleUnsupportedExtrapMeth"> The Lookup Table and Lookup Table (2-D) blocks with "Lookup method" as ''Interpolation-Extrapolation" when the input and output are not the same floating-point type: The Lookup Table and Lookup Table (2-D) blocks are fully supported and compatible but are no longer being enhanced. These blocks can be replaced with 1-D Lookup Table and 2-D Lookup Table blocks, respectively, which provide new settings for data types and algorithms. These settings can be used to improve memory use and calculation speed in simulation and code generation. The following Lookup Table blocks and Lookup Table (2-D) blocks have "Lookup method" as ''Interpolation-Extrapolation" when the input and output are not the same floating-point type, but 1-D Lookup Table blocks and 2-D Lookup Table blocks do not support it. Please consider manually updating the "Lookup method" to "Interpolation-Use End Values" or changing port data types to be the same floating-point data type, so that these blocks can be automatically updated. Otherwise, the block replacement will automatically replace these blocks and set the new blocks' "Interpolation method" to "Linear" and "Extrapolation method" to "Clip''. As a result, a numerical difference might appear. </entry>
        <entry key="lookupTableIncompatibleUnsupportedBigProd"> The Lookup Table and Lookup Table (2-D) blocks with performing multiplication first when doing interpolation: The Lookup Table and Lookup Table (2-D) blocks are fully supported and compatible but are no longer being enhanced. These blocks can be replaced automatically with 1-D Lookup Table and 2-D Lookup Table blocks, respectively, which provide new settings for data types and algorithms. These settings can be used to improve memory use and calculation speed in simulation and code generation. The following Lookup Table blocks and Lookup Table (2-D) blocks perform multiplication first when doing interpolation, but 1-D Lookup Table blocks and 2-D Lookup Table blocks always perform division first. The block replacement will automatically replace these blocks. As a result, a numerical difference might appear after block replacement. </entry>
        <entry key="lookup1D2DChooseIndexSearchMethPrompt"> The Lookup Table and Lookup Table (2-D) blocks with evenly-spaced breakpoints: The Lookup Table and Lookup Table (2-D) blocks are fully supported and compatible but are no longer being enhanced. These blocks can be replaced automatically with 1-D Lookup Table and 2-D Lookup Table blocks, respectively, which provide new settings for data types and algorithms. These settings can be used to improve memory use and calculation speed in simulation and code generation.  Please consider automatically replacing block ''{0}''  with a 1-D Lookup Table block or 2-D Lookup Table block.  Block replacement will set ''Index search method'' to ''Binary search'' by default. Since the block ''{1}'' has evenly-spaced breakpoints, would you rather set ''Index search method'' to ''Evenly spaced points'' to speed up the search? ([y]/n/a)</entry>
        <entry key="lookupTableIncompatibleUnsupportedLumPrompt"> The Lookup Table and Lookup Table (2-D) blocks with "Lookup method" as ''Use Input Nearest'' or ''Use Input Above'': The Lookup Table and Lookup Table (2-D) blocks are fully supported and compatible but are no longer being enhanced. These blocks can be replaced automatically with 1-D Lookup Table and 2-D Lookup Table blocks, respectively, which provide new settings for data types and algorithms. These settings can be used to improve memory use and calculation speed in simulation and code generation. The block ''{0}'' has "Lookup method" as ''Use Input Nearest'' or ''Use Input Above'', but 1-D Lookup Table blocks and 2-D Lookup Table blocks do not support it. The block replacement will automatically replace block ''{1}''  with a 1-D Lookup Table block or 2-D Lookup Table block and set the new block's "Interpolation method" to "Linear" and "Extrapolation method" to "Clip''. As a result, a numerical difference might appear after block replacement. </entry>
        <entry key="lookupTableIncompatibleUnsupportedExtrapMethPrompt"> The Lookup Table and Lookup Table (2-D) blocks with "Lookup method" as ''Interpolation-Extrapolation" when the input and output are not the same floating-point type: The Lookup Table and Lookup Table (2-D) blocks are fully supported and compatible but are no longer being enhanced. These blocks can be replaced automatically with 1-D Lookup Table and 2-D Lookup Table blocks, respectively, which provide new settings for data types and algorithms. These settings can be used to improve memory use and calculation speed in simulation and code generation. The block ''{0}'' has "Lookup method" as ''Interpolation-Extrapolation" when the input and output are not the same floating-point type, but 1-D Lookup Table blocks and 2-D Lookup Table blocks do not support it. The block replacement will automatically replace block ''{1}''  with a 1-D Lookup Table block or 2-D Lookup Table block and set the new block's "Interpolation method" to "Linear" and "Extrapolation method" to "Clip''. As a result, a numerical difference might appear after block replacement. </entry>
        <entry key="lookupTableIncompatibleUnsupportedBigProdPrompt"> The Lookup Table and Lookup Table (2-D) blocks with performing multiplication first when doing interpolation: The Lookup Table and Lookup Table (2-D) blocks are fully supported and compatible but are no longer being enhanced. These blocks can be replaced automatically with 1-D Lookup Table and 2-D Lookup Table blocks, respectively, which provide new settings for data types and algorithms. These settings can be used to improve memory use and calculation speed in simulation and code generation. The block ''{0}'' performs multiplication first when doing interpolation, but 1-D Lookup Table blocks and 2-D Lookup Table blocks always perform division first. The block replacement will automatically replace block ''{1}'' with a 1-D Lookup Table block or 2-D Lookup Table block.  As a result, a numerical difference might appear after block replacement. </entry>
        <entry key="lookupTableIncompatibleReplacePrompt"> Would you like to continue to replace block ''{0}''?([y]/n/a)</entry>
        <entry key="InterpolationUpdateHiddenValidIndexParameterforFlatInterp"> The Interpolation Using Prelookup block ''{0}'' has 'Valid index input may reach last index' check box selected for the 'Flat' interpolation method. In releases prior to R2014b, this check box was hidden and always considered cleared. Starting in R2014b, the check box is visible and starts taking effect upon upgrade. To retain the current behavior, the Upgrade Advisor clears this check box</entry>
        <entry key="unrecognizedSpecAnBlock">Unrecognized Spectrum Analyzer block type in link reconnection</entry>
        <entry key="configSetRefUpdatingSourceConfigSet">Updated configuration set for variable: {0}.</entry>
        <entry key="configSetsToBeUpdated">The following configuration sets need to be updated ({0})</entry>
        <entry key="unableToUpdateCS">Error encountered while attempting to update configuration set:\n{0}\n</entry>

        <entry key="upgradeSFunctionBuilderWithPaddedBus">Buses used as inputs
        or outputs to the following S-Function Builder blocks had padding added
        to them by Simulink.  Before using one of these S-functions in a top
        model in a Rapid Accelerator simulation, regenerate that
        S-function</entry>

        <entry key="upgradeLegacyCodeToolWithPaddedBus">Buses used as inputs or
        outputs to the following Legacy Code Tool S-Function blocks had padding
        added to them by Simulink.  Before using one of these S-functions in a
        top model in a Rapid Accelerator simulation, regenerate that S-function
        </entry> 

        <entry key="upgradeOtherSFunctionWithPaddedBus">Buses used as inputs or
        outputs to the following S-Function blocks had padding added to them by
        Simulink.  Before using one of these S-functions in a top model in a
        Rapid Accelerator simulation, regenerate that S-function with the tool
        originally used to create it</entry>

        <entry key="upgradeLegacyCodeToolRtwMakeCfgFile">The rtwmakecfg file
        generated by the Legacy Code Tool might cause errors when you generate code
        using the current Simulink version. Regenerate this file before generating code
        for the associated S-functions
        </entry>

        <entry key="upgradeLegacyCodeToolTlcBlockFile">The TLC block file generated
        by the Legacy Code Tool might cause errors when you generate code
        using the current Simulink version. Regenerate this file before generating code
        for the associated S-functions
        </entry>

        <entry key="upgradeLegacyCodeToolFileFailed">Unexpected error while modifying the file {0}:\n{1}\n</entry>
        
    </message>
</rsccat>
