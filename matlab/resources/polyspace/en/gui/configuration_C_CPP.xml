<?xml version="1.0"?>
<!-- Copyright 2012-2023 The MathWorks, Inc. -->
<rsccat version="1.0" locale="en_US" product="polyspace">
  <message>
    <entry key="not_available_with_c_cpp_title" note="">Not available with C/C++ languages</entry>

    <!-- Machine configuration -->
    <entry key="ComputingSettings_node" note="">Distributed Computing</entry>
    <entry key="ComputingSettings_title" note="">Distributed Computing</entry>
    <entry key="MergedComputingSettings_node" note="">Run Settings</entry>
    <entry key="MergedComputingSettings_title" note="">Run Settings</entry>
    <entry key="distributed_settings_section" note="">Distributed Computing</entry>
    <entry key="bugfinder_run_settings_section" note="">Analysis Mode</entry>
    <entry key="extra_settings_section" note="">Other Polyspace Options</entry>
    <entry key="_batch" note="">Batch</entry>
    <entry key="_add_to_results_repository" note="analysis results">Add to results repository</entry>
    <entry key="__batch_bug_finder" note="">Run Bug Finder analysis on a remote cluster</entry>
    <entry key="__batch_bug_finder_help" note="">Send analysis to the cluster that you specified in Preferences.&lt;BR&gt;Product option -batch.</entry>
    <entry key="__batch_code_prover" note="">Run Code Prover analysis on a remote cluster</entry>
    <entry key="__batch_code_prover_help" note="">Send analysis to the cluster that you specified in Preferences.&lt;BR&gt;Product option -batch.</entry>

    <entry key="_batch_help" note="">Run Polyspace on a Polyspace cluster with batch commands.&lt;BR&gt;(Parallel Computing Toolbox required)</entry>
    <entry key="_add_to_results_repository_help" note="analysis results">Store Polyspace results in repository and enable Web-based reporting of code metrics and results.</entry>

    <entry key="_fast_analysis" note="">Use fast analysis mode for Bug Finder</entry>
    <entry key="_fast_analysis_help" note="">Run Bug Finder in fast analysis mode. Only modified files are analyzed.&lt;BR&gt;Note: Fast-analysis mode checks only a subset of the Bug Finder defects and coding rules.</entry>

    <!-- Target and Compiler -->
    <entry key="language_section" note="">Target Language</entry>
    <entry key="_lang" note="">Source code language</entry>
    <entry key="TargetCompiler_node" note="">Target &amp; Compiler</entry>
    <entry key="TargetCompiler_title" note="">Target &amp; Compiler</entry>
    <entry key="target_environment_section" note="">Target Environment</entry>
    <entry key="compiler_behavior_section" note="">Compiler Behavior</entry>
    <entry key="_target" note="">Target processor type</entry>
    <entry key="_compiler" note="">Compiler</entry>
    <entry key="_sfr_types" note="">sfr type support</entry>
    <entry key="_sfr_types_column_1" note="">Name</entry>
    <entry key="_sfr_types_column_2" note="">Size</entry>
    <entry key="_c_version" note="">C standard version</entry>
    <entry key="_cpp_version" note="">C++ standard version</entry>
    <entry key="_no_uliterals" note="">Block char16/32_t types</entry>
    <entry key="_pack_alignment_value" note="">Pack alignment value</entry>
    <entry key="_ignore_pragma_pack" note="">Ignore pragma pack directives</entry>
    <entry key="_div_round_down" note="">Division round down</entry>
    <entry key="_enum_type_definition" note="">Enum type definition</entry>
    <entry key="_logical_signed_right_shift" note="">Signed right shift</entry>
    <entry key="_for_loop_index_scope" note="">Management of 'for loop' index scope </entry>
    <entry key="_wchar_t_is" note="">Management of wchar_t</entry>
    <entry key="_wchar_t_is_unsigned_long" note="">Set wchar_t to unsigned long</entry>
    <entry key="_wchar_t_type_is" note="">Management of wchar_t</entry>
    <entry key="_size_t_is_unsigned_long" note="">Set size_t to unsigned long</entry>
    <entry key="_size_t_type_is" note="">Management of size_t</entry>

    <entry key="_target_help" note="">Select the target machine processor type.</entry>
    <entry key="_compiler_help" note="">Specify the C/C++ compiler that you use. The analysis recognises C/C++ language extensions specific to the compiler.</entry>
    <entry key="_lang_help" note="">Specify the source code language for the project:&lt;BR&gt;&lt;li&gt; C for C source code&lt;BR&gt;&lt;li&gt; CPP for C++ source code&lt;BR&gt;&lt;li&gt; C-CPP for mixed C/C++ source code (available in Bug Finder only)</entry>
    <entry key="_sfr_types_help" note="">This option allows the given list of &lt;i&gt;sfr&lt;/i&gt; types to be supported. If the list is empty, no &lt;i&gt;sfr&lt;/i&gt; types will be allowed.&lt;BR&gt;A name must only be given once. The size must be 8, 16 or 32.</entry>
    <entry key="_c_version_help" note="">Select the version of the C standard to use.</entry>
    <entry key="_cpp_version_help" note="">Select the version of the C++ standard to use.</entry>
    <entry key="_no_uliterals_help" note="">Do not allow char16_t and char32_t types.</entry>
    <entry key="_pack_alignment_value_help" note="">Pass pack alignment value to Polyspace.</entry>
    <entry key="_ignore_pragma_pack_help" note="">Select to ignore pragma pack directives.</entry>
    <entry key="_div_round_down_help" note="">Round down division and modulus of a negative number.&lt;BR&gt;&lt;BR&gt;If this option is not set, the value of -5/3 is -1.&lt;BR&gt;Round down division implies that the value of -5/3 is -2.</entry>
    <entry key="_enum_type_definition_help" note="">Specify how enum types are represented:&lt;BR&gt;&lt;li&gt;'defined-by-compiler' - integer (except in gnu dialect, the first type that can hold all of the enumerator values from the following list: signed int, unsigned int, signed long,&lt;BR&gt;unsigned long, signed long long, unsigned long long).&lt;BR&gt;&lt;li&gt;'auto-signed-first' - the first type that can hold all of the enumerator values from the following list: signed char, unsigned char, signed short, unsigned short,&lt;BR&gt;signed int, unsigned int, signed long, unsigned long, signed long long, unsigned long long.&lt;BR&gt;&lt;li&gt;'auto-unsigned-first' - the first type that can hold all of the enumerator values from the following lists:&lt;BR&gt;&#009;* If enumerator values are all positive: unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long.&lt;BR&gt;&#009;* If one or more enumerator values are negative: signed char, signed short, signed int, signed long, signed long long.</entry>
    <entry key="_logical_signed_right_shift_help" note="">Choose between arithmetical and logical computation:&lt;UL&gt;&lt;li&gt;Arithmetic: the sign bit remains:&lt;BR&gt;(-4) &gt;&gt; 1 = -2&lt;BR&gt;(-7) &gt;&gt; 1 = -4&lt;BR&gt;7 &gt;&gt; 1 = 3&lt;BR&gt;&lt;li&gt;Logical: 0 replaces the sign bit&lt;BR&gt;(-4) &gt;&gt; 1 = (-4U) &gt;&gt; 1 = 2147483646&lt;BR&gt;(-7) &gt;&gt; 1 = (-7U) &gt;&gt; 1 = 2147483644&lt;BR&gt;7 &gt;&gt; 1 = 3&lt;BR&gt;&lt;/ul&gt;</entry>
    <entry key="_for_loop_index_scope_help" note="">Change the scope of the index variable declared within a for loop.&lt;BR&gt;eg: for (int index=0; ...)'{''}' index++; // index variable is usable (out) or not (in) at this point&lt;BR&gt;&lt;BR&gt;Possible values are 'defined-by-dialect', 'in' and 'out':&lt;ul&gt;&lt;li&gt;'defined-by-dialect' is the default behavior corresponding to the selected dialect (see below).&lt;BR&gt;&lt;li&gt;'out' is the default for the dialect option visual6, visual7 and visual 7.1.&lt;BR&gt;&lt;li&gt;'in' is the default for all other dialects, including visual8 and above.&lt;/li&gt;The C++ standard specifies the index be treated as 'in'.&lt;/ul&gt;This option allows the default behavior implied by the Polyspace dialect option to be overridden.&lt;BR&gt;This option is equivalent to the Visual C++ options /Zc:forScope and Zc:forScope-.</entry>
    <entry key="_wchar_t_is_help" note="">Force wchar_t to be treated as a keyword as per the C++ standard or a typedef as with Microsoft Visual C++ 6/7 dialects.&lt;BR&gt;&lt;BR&gt;Possible values are 'defined-by-dialect', 'typedef' and 'keyword': &lt;ul&gt;&lt;li&gt;'defined-by-dialect' is the default behavior corresponding to the selected dialect (see below).&lt;BR&gt;&lt;li&gt;'typedef' is the default behavior for the dialect option; visual6, visual7 and visual 7.1.&lt;BR&gt;&lt;li&gt;'keyword' is the default behavior for all others dialects including visual8 and above.&lt;/ul&gt;This option allows the default behavior implied by the Polyspace dialect option to be overridden.&lt;BR&gt;This option is equivalent to the Visual C++ /Zc:wchar and /Zc:wchar- options.</entry>
    <entry key="_wchar_t_is_unsigned_long_help" note="">Set the underlying type of wchar_t to unsigned long, whether it is a typedef or a keyword (default is unsigned short).</entry>
    <entry key="_wchar_t_type_is_help" note="">Set the underlying type of wchar_t to the corresponding type.</entry>
    <entry key="_size_t_is_unsigned_long_help" note="">Set the expected type of size_t to unsigned long (default is unsigned int).</entry>
    <entry key="_size_t_type_is_help" note="">Set the expected type of size_t to the corresponding type.</entry>

    <!-- Macros -->
    <entry key="Macros_node" note="">Macros</entry>
    <entry key="Macros_title" note="">Preprocessor Macros</entry>
    <entry key="_D" note="">Preprocessor definitions</entry>
    <entry key="_D_column_1" note="">Macro</entry>
    <entry key="_U" note="">Disabled preprocessor definitions</entry>
    <entry key="_U_column_1" note="">Macro</entry>

    <entry key="_D_help" note="">Specify preprocessing symbols</entry>
    <entry key="_U_help" note="">Specify preprocessor definitions to be disabled</entry>

    <!-- Environment Settings -->
    <entry key="EnvironmentSettings_node" note="">Environment Settings</entry>
    <entry key="EnvironmentSettings_title" note="">Environment Settings</entry>
    <entry key="_sources_encoding" note="">Source code encoding</entry>
    <entry key="_dos" note="">Code from DOS or Windows file system</entry>
    <entry key="_stop_if_compile_error" note="">Stop analysis if a file does not compile</entry>
    <entry key="_no_extern_C" note="">Ignore link errors</entry>
    <entry key="_post_preprocessing_command" note="">Command/script to apply to preprocessed files</entry>
    <entry key="_I" note="">Include folders</entry>
    <entry key="_I_column_1" note="">Folder</entry>
    <entry key="_include" note="">Include</entry>
    <entry key="_include_column_1" note="">File</entry>

    <entry key="_sources_encoding_help" note="">Specify the encoding that the analysis uses to interpret non-ASCII characters in your source code.&lt;BR&gt;Use this option if your code does not compile or renders incorrectly in the UI because of special characters.&lt;BR&gt;For information on how to enable other encodings, click '?'.</entry>
    <entry key="_dos_help" note="">Use this option when code comes from a &lt;B&gt;DOS or Windows&lt;/B&gt; file system.&lt;BR&gt;The option helps with upper/lower cases sensitivity and control character issues.</entry>
    <entry key="_stop_if_compile_error_help" note="">Use this option to resolve all compilation errors and ensure that all files are analyzed.&lt;BR&gt;By default, files with compilation errors are not analyzed. Functions in those files are stubbed for the remaining analysis.</entry>
    <entry key="_no_extern_C_help" note="">Make no difference between C-linkage and C++-linkage.</entry>
    <entry key="_post_preprocessing_command_help" note="">Run the given command after the preprocessing phase on each source file.&lt;BR&gt;&lt;BR&gt;It is important to specify the absolute path and filename for the command file.&lt;BR&gt;The command should be designed to read from its standard input and produce its results to the standard output.</entry>
    <entry key="_I_help" note="">Include Folders</entry>
    <entry key="_include_help" note="">Specify files to be included automatically during the compilation.&lt;BR&gt;These files will be included in each C/C++ file before any &lt;i&gt;#includes&lt;/i&gt; statements are processed.</entry>

    <!-- Multitasking -->
    <entry key="Multitasking_node" note="">Multitasking</entry>
    <entry key="Multitasking_title" note="">Multitasking</entry>

    <entry key="automatic_concurrency_section" note="">Automatic Configuration</entry>
    <entry key="manual_multitasking_section" note="">Manual Configuration</entry>

    <entry key="_osek_multitasking" note="">OIL files selection</entry>
    <entry key="_osek_multitasking_column_1" note="">File</entry>

    <entry key="_autosar_multitasking">ARXML files selection</entry>
    <entry key="_autosar_multitasking_column_1" note="">File</entry>

    <entry key="_enable_concurrency_detection" note="">Enable automatic concurrency detection for Code Prover</entry>
    <entry key="_disable_concurrency_detection" note="">Disable automatic concurrency detection</entry>
    <entry key="__multitasking" note="">Configure multitasking manually</entry>
    <entry key="__external_multitasking" note="">External multitasking configuration</entry>
    <entry key="__external_multitasking_type" translate="false" note=""></entry>
    <entry key="_entry_points" note="">Tasks</entry>
    <entry key="_entry_points_column_1" note="">Task</entry>
    <entry key="_cyclic_tasks" note="">Cyclic tasks</entry>
    <entry key="_cyclic_tasks_column_1" note="">Task</entry>
    <entry key="_interrupts" note="">Interrupts</entry>
    <entry key="_interrupts_column_1" note="">Interrupt Service Routine</entry>
    <entry key="_routine_disable_interrupts" note="">Disabling all interrupts</entry>
    <entry key="_routine_enable_interrupts" note="">Disabling all interrupts (second column)</entry>
    <entry key="_routine_disable_interrupts_column_1" note="">Disabling routine</entry>
    <entry key="_routine_disable_interrupts_column_2" note="">Enabling routine</entry>
    <entry key="_critical_section_begin" note="">Critical section details</entry>
    <entry key="_critical_section_end" note="">Critical section details (second column)</entry>
    <entry key="_critical_section_begin_column_1" note="">Starting routine</entry>
    <entry key="_critical_section_begin_column_2" note="">Ending routine</entry>
    <entry key="_temporal_exclusions_file" note="">Temporally exclusive tasks</entry>
    <entry key="_temporal_exclusions_file_column_1" note="">Tasks</entry>

    <entry key="_enable_concurrency_detection_help" note="">Automatically recognize certain concurrency primitives such as pthread_create.&lt;BR&gt; &lt;ul&gt; &lt;li&gt;Code Prover: Use this option for multitasking applications that contain the concurrency primitives.&lt;br&gt;Your application must have a ‘main’ function. &lt;li&gt;Bug Finder: The option is not necessary. Bug Finder recognizes the concurrency primitives by default. &lt;/ul&gt;Click 'More Help' for list of primitives that can be detected.</entry>

    <entry key="_disable_concurrency_detection_help" note="">Disable automatic detection of certain concurrency primitives.&lt;BR&gt;Click 'More Help' for list of primitives that can be detected.</entry>
    <entry key="__multitasking_help" note="">Verify multitasking code.</entry>
    <entry key="__external_multitasking_help" note="">Specify the multitasking configuration from an external file.&lt;ul&gt;&lt;li&gt;osek: Multitasking description based on OSEK OIL files.&lt;/li&gt;&lt;li&gt;autosar: Multitasking description based on AUTOSAR ARXML files.&lt;/li&gt;&lt;/ul&gt;</entry>
    <entry key="_osek_multitasking_help" note="">Specify the list of OIL files containing the description of the OSEK multitasking configuration.
    &lt;ul&gt;&lt;li&gt;auto: Polyspace will look for OIL files in the folders containing a source or header file.&lt;/li&gt;
    &lt;li&gt;custom: Specify OIL files or folders containing the OIL files. Polyspace will look for OIL files in the given folders and sub-folders.&lt;/li&gt;&lt;/ul&gt;
    </entry>
    <entry key="_autosar_multitasking_help" note="">Specify the list of ARXML files containing the description of the AUTOSAR multitasking configuration.
    </entry>
    <entry key="_entry_points_help" note="">Specify the list of tasks to be analyzed. These entry points must not take parameters.&lt;BR&gt;If your task entry points are functions with parameters, you can encapsulate&lt;BR&gt;them in functions with no parameters and pass parameters through global variables.</entry>
    <entry key="_cyclic_tasks_help" note="">Specify the list of the cyclic tasks to be analyzed. These tasks must not take parameters.&lt;BR&gt;If your tasks are functions with parameters, you can encapsulate&lt;BR&gt;them in functions with no parameters and pass parameters through global variables.</entry>
    <entry key="_interrupts_help" note="">Specify the list of the interrupts in the system. Interrupts are cyclic tasks that cannot be preempted.</entry>
    <entry key="_critical_section_begin_help" note="">Specify the list of routines beginning and ending critical sections. Each critical section has a beginning and ending.&lt;BR&gt;When you want to model protection of shared resources, use these critical sections.</entry>
    <entry key="_routine_disable_interrupts_help"  note="">Enter the routine to disable and enable interrupts for Bug Finder analysis.&lt;BR&gt;&lt;ul&gt; &lt;li&gt;Calling the disabling routine prevents preemption of a task by other tasks and interrupts.&lt;li&gt;Calling the enabling routine reenables preemption of a task by other tasks and interrupts, if previously disabled.&lt;/ul&gt;</entry>
    <entry key="_temporal_exclusions_file_help" note="">Specify the set of points which never execute at the same time.</entry>

    <!-- Coding Standards -->
    <entry key="CodingStandards_node" note="">Coding Standards &amp; Code Metrics</entry>
    <entry key="CodingStandards_title" note="">Coding Standards &amp; Code Metrics</entry>
    <entry key="coding_standards_section" note="">Coding Standards</entry>
    <entry key="__checkers_selection_file" note="">Set checkers by file</entry>
    <entry key="__checkers_selection_file_help" note="">Check code for compliance with selection of checks defined in the file.</entry>
    <entry key="_checkers_selection_file" translate="false" note="TranslateFalseBatch; "></entry>
    <entry key="_checkers_selection_file_help" note="">Check code for compliance with selection of checks defined in the file.</entry>
    <entry key="__cert_c" note="">Check SEI CERT-C</entry>
    <entry key="__cert_c_help" note="">Check code for compliance with CERT-C standard.</entry>
    <entry key="_cert_c" translate="false" note="TranslateFalseBatch; "></entry>
    <entry key="_cert_c_help" note="">Check code for compliance with CERT-C standard.</entry>
    <entry key="__cert_cpp" note="">Check SEI CERT-C++</entry>
    <entry key="__cert_cpp_help" note="">Check code for compliance with CERT-C++ standard.</entry>
    <entry key="_cert_cpp" translate="false" note="TranslateFalseBatch; "></entry>
    <entry key="_cert_cpp_help" note="">Check code for compliance with CERT-C++ standard.</entry>
    <entry key="__iso_17961" note="">Check ISO/IEC TS 17961</entry>
    <entry key="__iso_17961_help" note="">Check code for compliance with ISO-17961 standard.</entry>
    <entry key="_iso_17961" translate="false" note="TranslateFalseBatch; "></entry>
    <entry key="_iso_17961_help" note="">Check code for compliance with ISO-17961 standard.</entry>
    <entry key="__autosar_cpp14" note="">Check AUTOSAR C++14</entry>
    <entry key="__autosar_cpp14_help" note="">Check code for compliance with AUTOSAR C++14 standard.</entry>
    <entry key="_autosar_cpp14" translate="false" note="TranslateFalseBatch; "></entry>
    <entry key="_autosar_cpp14_help" note="">Check code for compliance with AUTOSAR C++14 standard.</entry>
    <entry key="__guidelines" note="">Check Guidelines</entry>
    <entry key="__guidelines_help" note="">Check code for compliance with Coding Guidelines.</entry>	
    <entry key="_guidelines" translate="false" note="TranslateFalseBatch; "></entry>
    <entry key="_guidelines_help" note="">Check code for compliance with Coding Guidelines.</entry>
    <entry key="__cwe" note="">Check CWE</entry>
    <entry key="_cwe" translate="false" note="TranslateFalseBatch; "></entry>
    <entry key="_cwe_help" note="">Check code for compliance with CWE standard.&lt;BR&gt;cwe-658-659 activates a subset of rules for weaknesses found in software written in C (CWE-658) or C++ (CWE-659).</entry>
    <entry key="__cwe_help" note="">Check code for compliance with CWE standard.&lt;BR&gt;cwe-658-659 activates a subset of rules for weaknesses found in software written in C (CWE-658) or C++ (CWE-659).</entry>	
    <entry key="coding_standard_dialog_title" note="">Checkers selection</entry>
    <entry key="cannot_open_coding_stantard_selection_file" note="">Could not open coding standard selection file: {0}.&lt;BR&gt;Make sure that selected file is a valid Polyspace coding standard selection file.</entry>
    <entry key="cannot_open_coding_stantard_selection_file_version" note="">Could not open coding standard selection file: {0}.&lt;BR&gt;This file should be opened only with Polyspace As you Code feature.</entry>
    <entry key="backup_coding_stantard_selection_file" note="">Coding standard selection file {0} has been&lt;BR&gt;converted to the new file format.&lt;BR&gt;&lt;BR&gt;A backup of the previous file is available here&lt;BR&gt;{1} </entry>
    <entry key="coding_stantard_selection_file_already_exists" note="">Coding standard selection file {0} already exists.</entry>
    <entry key="coding_stantard_selection_file_filter" note="">Coding standard configuration file (*{0})</entry>
    <entry key="given_file_does_not_exist" note="">Given file {0} for option {1} does not exist.</entry>
    <entry key="should_import_selection_file">File {0} was created with an older version of Polyspace.\n\nClick Import to migrate your checker selections to this version of Polyspace.</entry>
    <entry key="invalid_pschk_file" note="">Invalid pschk file: {0}.\nUse the polyspace-catalog-bundler command to generate a valid file.</entry>

    <!-- Coding Rules and Code Metrics -->
    <entry key="CodingRulesCodeMetrics_node" note="">Coding Rules &amp; Code Metrics</entry>
    <entry key="CodingRulesCodeMetrics_title" note="">Coding Rules &amp; Code Metrics</entry>
    <entry key="coding_rules_section" note="">Coding Rules</entry>
    <entry key="code_metrics_section" note="">Code Metrics</entry>

    <entry key="__misra_cpp" note="">Check MISRA C++:2008</entry>
    <entry key="_misra_cpp" translate="false" note="TranslateFalseBatch; "></entry>
    <entry key="__jsf_coding_rules" note="">Check JSF AV C++</entry>
    <entry key="_jsf_coding_rules" translate="false" note="TranslateFalseBatch; "></entry>
    <entry key="__misra2" note="">Check MISRA C:2004</entry>
    <entry key="_misra2" translate="false" note="TranslateFalseBatch; "></entry>
    <entry key="__misra_ac_agc" note="">Check MISRA AC AGC</entry>
    <entry key="_misra_ac_agc" translate="false" note="TranslateFalseBatch; "></entry>
    <entry key="__misra3" note="">Check MISRA C:2012</entry>
    <entry key="_misra3" translate="false" note="TranslateFalseBatch; "></entry>
    <entry key="_misra3_agc_mode" note="">Use generated code requirements</entry>
    <entry key="__misra_c_2023" note="">Check MISRA C:2023</entry>
    <entry key="_misra_c_2023" translate="false" note="TranslateFalseBatch; "></entry>
    <entry key="_misra_c_2023_agc_mode" note="">Use generated code requirements</entry>
    <entry key="__misra_cpp_2023" note="">Check MISRA C++:2023</entry>
    <entry key="_misra_cpp_2023" translate="false" note="TranslateFalseBatch; "></entry>
    <entry key="_boolean_types" note="">Effective boolean types</entry>
    <entry key="_boolean_types_column_1" note="">Type</entry>
    <entry key="_allowed_pragmas" note="">Allowed pragmas</entry>
    <entry key="_allowed_pragmas_column_1" note="">Pragma</entry>
    <entry key="__custom_rules" note="">Check custom rules</entry>
    <entry key="_custom_rules" translate="false" note="TranslateFalseBatch; "></entry>
    <entry key="_generate_results_for" note="analysis results">Generate results for sources and</entry>
    <entry key="_generate_results_for_column_1" note="">File/Folder</entry>
    <entry key="_do_not_generate_results_for" note="analysis results">Do not generate results for</entry>
    <entry key="_do_not_generate_results_for_column_1" note="">File/Folder</entry>

    <entry key="__misra_cpp_help" note="">Check code for compliance with MISRA C++ standard.</entry>
    <entry key="_misra_cpp_help" note="">Check code for compliance with MISRA C++ standard.</entry>
    <entry key="__jsf_coding_rules_help" note="">Check code for compliance with JSF AV standard.</entry>
    <entry key="_jsf_coding_rules_help" note="">Check code for compliance with JSF AV standard.</entry>
    <entry key="__misra2_help" note="">Check code for compliance with MISRA C:2004 standard.</entry>
    <entry key="_misra2_help" note="">Check code for compliance with MISRA C:2004 standard.</entry>
    <entry key="__misra_ac_agc_help" note="">Check code for compliance with MISRA AC AGC standard.</entry>
    <entry key="_misra_ac_agc_help" note="">Check code for compliance with MISRA AC AGC standard.</entry>
    <entry key="__misra3_help" note="">Guidelines for the use of C language of both embedded control and standalone software.</entry>
    <entry key="_misra3_help" note="">When applied to generated code, some MISRA C:2012 rules change category (Required, Advisory, Readability).&lt;BR&gt;Use this option to check MISRA C:2012 with the categorization for generated code.</entry>
    <entry key="_misra3_agc_mode_help" note="">Check MISRA C:2012 in the context of automatic code generation.</entry>
    <entry key="__misra_c_2023_help" note="">Guidelines for the use of C language of both embedded control and standalone software.</entry>
    <entry key="_misra_c_2023_help" note="">When applied to generated code, some MISRA C:2023 rules change category (Required, Advisory, Readability).&lt;BR&gt;Use this option to check MISRA C:2023 with the categorization for generated code.</entry>
    <entry key="_misra_c_2023_agc_mode_help" note="">Check MISRA C:2023 in the context of automatic code generation.</entry>
    <entry key="__misra_cpp_2023_help" note="">Check code for compliance with MISRA C++:2023 standard.</entry>
    <entry key="_misra_cpp_2023_help" note="">Check code for compliance with MISRA C++:2023 standard.</entry>
    <entry key="_boolean_types_help" note="">Use this option to specify data types that you want Polyspace to consider as Boolean.&lt;BR&gt;Only data types defined by a typedef statement are supported.</entry>
    <entry key="_allowed_pragmas_help" note="">Specify pragmas for checking of:
    &lt;ul&gt;&lt;li&gt;MISRA-C and MISRA AC AGC rule 3.4 &lt;/li&gt;
    &lt;li&gt;MISRA C++ rule 16-6-1&lt;/li&gt;&lt;/ul&gt;
    The rule checker will consider the pragmas documented and not flag violations of these rules.</entry>
    <entry key="__custom_rules_help" note="">Check code for compliance with custom coding rules.</entry>
    <entry key="_custom_rules_help" note="">Check code for compliance with custom coding rules.</entry>
    <entry key="_generate_results_for_help" note="">Specify header files on which you want analysis results.
    &lt;ul&gt;&lt;li&gt;source-headers: Headers in same folders as Source files &lt;/li&gt;
    &lt;li&gt;all-headers: Headers in same folders as Source files, headers in Include folders &lt;/li&gt;
    &lt;li&gt;custom: Files that you specify, or files in folders that you specify &lt;/li&gt;&lt;/ul&gt;
    The option applies to coding rules, code metrics and Polyspace Bug Finder defects only.</entry>
    <entry key="_do_not_generate_results_for_help" note="">Specify files on which you do not want analysis results.
    &lt;ul&gt;&lt;li&gt;include-folders: Headers in Include folders &lt;/li&gt;
    &lt;li&gt;all-headers: Headers in Include folders, headers in same folders as Source files &lt;/li&gt;
    &lt;li&gt;custom: Files that you specify, or files in folders that you specify &lt;/li&gt;&lt;/ul&gt;
    The option applies to coding rules, code metrics and Polyspace Bug Finder defects only.</entry>
    <entry key="_code_metrics" note="">Calculate Code Metrics</entry>
    <entry key="_code_metrics_help" note="">Calculate Code Metrics.</entry>

    <!-- Bug Finder Multitasking -->
    <entry key="__bug_finder_multitasking" note="">Multitasking</entry>
    <entry key="__bug_finder_multitasking_help" note="">Verify multitasking code.</entry>

    <!-- Defects -->
    <entry key="BugFinderAnalysis_node" note="">Bug Finder Analysis</entry>
    <entry key="BugFinderAnalysis_title" note="">Bug Finder Analysis</entry>
    <entry key="__enable_checkers" note="">Find defects</entry>
    <entry key="__enable_checkers_help" note="">Enable or disable defect checking</entry>
    <entry key="__checkers_preset" translate="false" note="TranslateFalseBatch; "></entry>
    <entry key="__checkers_preset_help" note="">Choose defects preset</entry>
    <entry key="_checks_using_system_input_values" note="">Run stricter checks considering all values of system inputs</entry>
    <entry key="_checks_using_system_input_values_help" note="">Consider all possible values for:
    &lt;ul&gt;&lt;li&gt;Global variables&lt;/li&gt;
    &lt;li&gt;Reads of volatile variables&lt;/li&gt;
    &lt;li&gt;Returns of stubbed functions&lt;/li&gt;
    &lt;li&gt;Function inputs specified with "Consider inputs to these functions"&lt;/li&gt;&lt;/ul&gt;
    The stricter static analysis detects issues that can result from numerical edge cases,
    &lt;BR&gt;and provide example values that can lead to the detected defect.&lt;BR&gt;
    &lt;BR&gt;
    The stricter analysis is performed for functions specified with option "Consider inputs to these functions" (-system-inputs-from).
    </entry>
    <entry key="_system_inputs_from" note="">Consider inputs to these functions</entry>
    <entry key="_system_inputs_from_help" note="">Specify the functions for which the analysis considers all possible input values.
    &lt;ul&gt;&lt;li&gt;auto: Main function and tasks if any, or uncalled functions with at least one callee (when main does not exist)&lt;/li&gt;
    &lt;li&gt;uncalled: All uncalled functions&lt;/li&gt;
    &lt;li&gt;all: All functions&lt;/li&gt;
    &lt;li&gt;custom: User specified functions&lt;/li&gt;&lt;/ul&gt;
    </entry>
    <entry key="_system_inputs_from_column_1" note="">Functions</entry>
    
    <!-- Code Prover Verification -->
    <entry key="CodeProverVerification_node" note="">Code Prover Verification</entry>
    <entry key="CodeProverVerification_title" note="">Code Prover Verification</entry>
    <entry key="MainGenerator_node" note="">Main Generator</entry>
    <entry key="MainGenerator_title" note="">Main Generator</entry>
    <!-- Verification Mode -->
    <!-- <entry key="VerificationMode_node" note="">Verification Mode</entry>  -->
    <!-- <entry key="VerificationMode_title" note="">Verification Mode</entry>  -->
    <entry key="__main" note="">Verify whole application</entry>
    <entry key="_init_only_mode" note="">Verify initialization code only</entry>
    <entry key="_main" note="">Main entry point</entry>
    <entry key="_main_generator" note="">Verify module or library</entry>
    <entry key="_main_generator_mbd" note="">Verify model generated code</entry>
    <entry key="_main_generator_autosar" note="">Main generated from AUTOSAR specification</entry>
    <entry key="_class_analyzer" note="">Class</entry>
    <entry key="_class_analyzer_column_1" note="">Class</entry>
    <entry key="_class_analyzer_calls" note="">Functions to call within the specified classes</entry>
    <entry key="_class_analyzer_calls_column_1" note="">Functions</entry>
    <entry key="_class_only" note="">Analyze class content only</entry>
    <entry key="_no_constructors_init_check" note="">Skip member initialization check</entry>
    <entry key="_main_generator_writes_variables" note="">Variables to initialize</entry>
    <entry key="_main_generator_writes_variables_column_1" note="">Global variables</entry>
    <entry key="_functions_called_before_main" note="">Initialization functions</entry>
    <entry key="_functions_called_before_main_column_1" note="">Function</entry>
    <entry key="_main_generator_calls" note="">Functions to call</entry>
    <entry key="_main_generator_calls_column_1" note="">Function</entry>
    <entry key="_unit_by_unit" note="">Verify files independently</entry>
    <entry key="_unit_by_unit_common_source" note="">Common source files</entry>
    <entry key="_unit_by_unit_common_source_column_1" note="">File</entry>
    <entry key="_variables_written_before_loop" note="MBD only">Parameters</entry>
    <entry key="_variables_written_before_loop_column_1" note="MBD only">Variable</entry>
    <entry key="_variables_written_in_loop" note="MBD only">Inputs</entry>
    <entry key="_variables_written_in_loop_column_1" note="MBD only">Variable</entry>
    <entry key="_functions_called_before_loop" note="MBD only">Initialization functions</entry>
    <entry key="_functions_called_before_loop_column_1" note="MBD only">Function</entry>
    <entry key="_functions_called_in_loop" note="MBD only">Step functions</entry>
    <entry key="_functions_called_in_loop_column_1" note="MBD only">Function</entry>
    <entry key="_functions_called_after_loop" note="MBD only">Termination functions</entry>
    <entry key="_functions_called_after_loop_column_1" note="MBD only">Function</entry>
    <entry key="_shared_variables_mode" note="">Show global variable sharing and usage only</entry>
	
    <entry key="__main_help" note="">Use existing 'main' function as starting point of verification.</entry>
    <entry key="_init_only_mode_help" note="">Check initialization section of code for run-time errors and other issues.&lt;BR&gt;When verifying whole application, initialization code is beginning of 'main' to pragma 'polyspace_end_of_init'.&lt;BR&gt;When verifying a module or library, initialization code is the sequence of initialization functions.</entry>
    <entry key="_main_help" note="">Use existing 'main' function as starting point of verification.</entry>
    <entry key="_main_generator_help" note="">Automatically generate a 'main' function.</entry>
    <entry key="_class_analyzer_help" note="">Enter the list of classes used to generate the main:&lt;ul&gt;&lt;li&gt;none: no class&lt;BR&gt;&lt;li&gt;all: every classes&lt;BR&gt;&lt;li&gt;custom: list of given classes.&lt;BR&gt;Selected member functions (defined by 'Functions to call within the specified classes') of the given class list will be called by generated main.&lt;BR&gt;&lt;/ul&gt;</entry>
    <entry key="_class_only_help" note="">Analyze only the code contained in the classes specified by the Class (-class-analyzer) option.&lt;BR&gt;Any function defined outside the classes will be stubbed, even if you give Polyspace the source code.</entry>
    <entry key="_class_analyzer_calls_help" note="">Verify eligible methods of the classes specified by the option -class-analyzer. Eligible methods are static, public and protected methods of the specified classes.&lt;ul&gt;&lt;li&gt;all: Generated main calls all public and protected methods of the specified classes. Members inherited from a parent class are not called.&lt;BR&gt;&lt;li&gt;all-public: Generated main calls all methods except protected methods.&lt;BR&gt;&lt;li&gt;inherited-all: Generated main calls all public and protected methods of specified classes and their parents.&lt;BR&gt;&lt;li&gt;inherited-all-public: Generated main calls all public methods of specified classes and their parents.&lt;BR&gt;&lt;li&gt;unused: Default. Generated main calls all methods that are not called within the specified classes.&lt;BR&gt;&lt;li&gt;unused-public: With the exception of protected methods, generated main calls all methods that are not called within the specified classes.&lt;BR&gt;&lt;li&gt;inherited-unused: Generated main calls all public and protected methods of specified classes and their parents that are not called by another method.&lt;BR&gt;&lt;li&gt;inherited-unused-public: Generated main calls all public methods of specified classes and their parents that are not called by another method.&lt;BR&gt;&lt;li&gt;custom=list_of_methods: Generated main calls methods that you provide in list_of_methods.&lt;BR&gt;&lt;/ul&gt;</entry>
    <entry key="_no_constructors_init_check_help" note="">Tell the generated main to not check whether all class fields are initialized.</entry>
    <entry key="_main_generator_writes_variables_help" note="">Specify how the generated main will initialize global variables:&lt;BR&gt;&lt;li&gt;uninit - main generator writes random on not initialized global variables (C++ only)&lt;BR&gt;&lt;li&gt;none - no global variable will be written by the main&lt;BR&gt;&lt;li&gt;public - every variable except static and const variables are assigned a "random" value, representing the full range of possible values&lt;BR&gt;&lt;li&gt;all - every variable is assigned a "random" value, representing the full range of possible values&lt;BR&gt;&lt;li&gt;custom - only variables present in the list are assigned a "random" value, representing the full range of possible values</entry>
    <entry key="_functions_called_before_main_help" note="">Specify the initialization functions.&lt;br&gt;Functions called before other functions by the automatically generated main.</entry>
    <entry key="_main_generator_calls_help" note="">Specify the functions considered public.&lt;BR&gt;Functions called in random order by the automatically generated main. </entry>

    <entry key="_variables_written_before_loop_help" note="">Specify the set of variables considered parameters of the cyclic system.&lt;BR&gt;Variables written by generated main before the cyclic loop.</entry>
    <entry key="_variables_written_in_loop_help" note="">Specify the set of variables considered inputs of the cyclic system.&lt;BR&gt;Variables reset by generated main at each iteration of the cyclic loop.</entry>
    <entry key="_functions_called_before_loop_help" note="">Specify the set of initialization functions called by generated main before the step loop.</entry>
    <entry key="_functions_called_in_loop_help" note="">Specify the set of functions called in the loop:&lt;BR&gt;&lt;li&gt;none - Use this option when no subprogram is called.&lt;BR&gt;&lt;li&gt;unused - Generated main only calls functions that are not called within the files.&lt;BR&gt;&lt;li&gt;all - Generated main calls all functions. For example, if a function 'f' is called by 'g', then generated main also calls 'f' with random values for each parameter.&lt;BR&gt;&lt;li&gt;custom - Specify list of functions to be called by generated main.</entry>
    <entry key="_functions_called_after_loop_help" note="">Specify the functions called by the generated main after the cyclic loop.</entry>

    <entry key="_unit_by_unit_help" note="">Create a separate verification job for each source file in the project.&lt;br&gt;Each file is compiled and then verified individually.</entry>
    <entry key="_unit_by_unit_common_source_help" note="">Specify a list of files to include with each file verification.&lt;br&gt;Functions not included in this list are stubbed.</entry>
    <entry key="_shared_variables_mode_help" note="">Run a faster analysis to determine global variable sharing and usage.&lt;BR&gt;&lt;BR&gt;The analysis results contain:&lt;BR&gt;&lt;ul&gt;&lt;li&gt;Global variables (shared, unshared, used, unused)&lt;li&gt;Coding rules if enabled&lt;li&gt;Code metrics if enabled&lt;/ul&gt;&lt;BR&gt;The Variable Access view also shows read and write operations on all global variables.</entry>
	
    <!-- Inputs and Stubbing -->
    <entry key="InputsStubbing_node" note="">Inputs &amp; Stubbing</entry>
    <entry key="InputsStubbing_title" note="">Inputs &amp; Stubbing</entry>
    <entry key="Inputs_section" note="">Inputs</entry>
    <entry key="Stubbing_section" note="">Stubbing</entry>
    <entry key="Filtering_section" note="">Filtering</entry>
    <entry key="_data_range_specifications" note="">Constraint setup</entry>
    <entry key="_no_def_init_glob" note="">Ignore default initialization of global variables</entry>
    <entry key="_no_stl_stubs" note="">No STL stubs</entry>
    <entry key="_functions_to_stub" note="">Functions to stub</entry>
    <entry key="_library" note="">Libraries used</entry>
    <entry key="_functions_to_stub_column_1" note="">Function</entry>
    <entry key="_stub_embedded_coder_lookup_table_functions" note="">Generate stubs for Embedded Coder lookup tables</entry>

    <entry key="_data_range_specifications_help" note="">Specify data constraints for global variables, pointers and function parameters.&lt;BR&gt;Click the "Edit" button to open a wizard that guides you through the constraint setup. Alternatively, specify a constraint template file in the field.&lt;BR&gt;&lt;BR&gt;The specified constraints override values extracted from a Simulink model.</entry>
    <entry key="_no_def_init_glob_help" note="">Specify that global variables are treated as non-initialized by default. &lt;BR&gt; - 'on': Polyspace ignores implicit initialization of global variables. &lt;BR&gt;A Non initialized variable error is generated if a global variable is read before being written.&lt;BR&gt; - 'off': Polyspace considers global variables to be initialized according to ANSI C (ISO C++) standards. &lt;BR&gt; Default initialization values are 0.0 for float and 0 for int and char.</entry>
    <entry key="_no_stl_stubs_help" note="">Do not use Polyspace implementation of the Standard Template Library (STL).&lt;BR&gt;Use standard rules to stub functions of the Standard Template Library.</entry>
    <entry key="_functions_to_stub_help" note="">Specify functions that you want Polyspace to stub.</entry>
    <entry key="_library_help" note="">Specify libraries that you use in your program.&lt;BR&gt;The analysis uses smart stubs for functions from those libraries instead of generic stubs (and does not attempt to check the function implementations).&lt;BR&gt;Using this option enables faster analysis without losing precision and triggers library-specific checks on library function calls.</entry>
    <entry key="_stub_embedded_coder_lookup_table_functions_help" note="">Check this option to generate stubs for Embedded Coder lookup tables automatically</entry>

    <!-- Verification Assumption -->
    <entry key="VerificationAssumption_node" note="">Verification Assumptions</entry>
    <entry key="VerificationAssumption_title" note="">Verification Assumptions</entry>
    <entry key="_respect_types_in_fields" note="">Respect types in fields</entry>
    <entry key="_respect_types_in_globals" note="">Respect types in global variables</entry>
    <entry key="_float_rounding_mode" note="">Float rounding mode</entry>
    <entry key="_consider_volatile_qualifier_on_fields" note="">Consider volatile qualifier on fields</entry>
    <entry key="_stubbed_pointers_are_unsafe" note="">Consider environment pointers as unsafe</entry>
    <entry key="_ignore_assembly_code" note="">Ignore assembly code</entry>

    <entry key="_respect_types_in_fields_help" note="">Assume structure fields declared as non-pointer types are not used for holding pointer values.&lt;br&gt;Select option only for type-safe C code.</entry>
    <entry key="_respect_types_in_globals_help" note="">Assume global variables declared as non-pointer types are not used for holding pointer values.&lt;br&gt;Select option only for type-safe C code.</entry>
    <entry key="_float_rounding_mode_help" note="">Specify the rounding modes to consider when determining the results of floating point arithmetic. &lt;BR&gt; &lt;ul&gt;  &lt;li&gt;to-nearest: Consider the round-to-nearest mode and no extended precision. &lt;li&gt;all: Consider all rounding modes and extended precision. &lt;/ul&gt;</entry>
    <entry key="_ignore_assembly_code_help" note="">Ignore all assembly code.&lt;br&gt;Unless you turn on this option, the software assumes that assembly code can modify C/C++ variables.</entry>

    <!-- Check Behavior -->
    <entry key="ChecksAssumption_node" note="">Check Behavior</entry>
    <entry key="ChecksAssumption_title" note="">Check Behavior</entry>
    <entry key="OverflowAssumption_section" note="">Overflow</entry>
    <entry key="Initialization_section" note="">Initialization</entry>
    <entry key="DeadCode_section" note="">Dead Code</entry>
    <entry key="PointerAssumption_section" note="">Pointer</entry>
    <entry key="FloatingPoint_section" note="">Floating Point</entry>
    <entry key="ImpactAnalysis_section" note="">Impact Analysis</entry>
    <entry key="StackUsage_section" note="">Stack Usage</entry>

    <entry key="_ignore_constant_overflows" note="">Ignore overflowing computations on constants</entry>
    <entry key="_allow_negative_operand_in_shift" note="">Allow negative operand for left shifts</entry>
    <entry key="_signed_integer_overflows" note="">Overflow mode for signed integer</entry>
    <entry key="_unsigned_integer_overflows" note="">Overflow mode for unsigned integer</entry>
    <entry key="_disable_initialization_checks" note="">Disable checks for non-initialization</entry>
    <entry key="_check_globals_init" note="">Check that global variables are initialized after warm reboot</entry>
    <entry key="_detect_pointer_escape" note="">Detect stack pointer dereference outside scope</entry>
    <entry key="_allow_ptr_arith_on_struct" note="">Enable pointer arithmetic across fields</entry>
    <entry key="_size_in_bytes" note="">Allow partial allocation of structures</entry>
    <entry key="_permissive_function_pointer" note="">Permissive function pointer calls</entry>
    <entry key="_uncalled_function_checks" note="">Detect uncalled functions</entry>
    <entry key="_allow_non_finite_floats" note="">Consider non finite floats</entry>
    <entry key="_check_infinite" note="">Infinities</entry>
    <entry key="_check_nan" note="">NaNs</entry>
    <entry key="_check_subnormal" note="">Subnormal detection mode</entry>
    <entry key="_impact_analysis" note="">Enable impact analysis</entry>
    <entry key="_impact_specifications" note="">Specify sources and sinks</entry>
    <entry key="_impact_analysis_only" note="">Show impact analysis results only</entry>
    <entry key="_stack_usage" note="">Calculate Stack Usage</entry>

    <entry key="_ignore_constant_overflows_help" note="">Relax adherence to the ANSI/ISO C-90 standard when computation with constants overflows.&lt;br&gt;For example, with reference to the standard, the code &lt;i&gt;char x = 0xff;&lt;/i&gt; causes an overflow.&lt;br&gt;However, selecting this option changes the code to  &lt;i&gt;char x = -1;&lt;/i&gt;</entry>
    <entry key="_allow_negative_operand_in_shift_help" note="">The ANSI/ISO C-90 standard does not allow a shift operation on a negative number. By default, the verification stops.&lt;br&gt;&lt;br&gt;For example, the code &lt;i&gt; -2 &lt;&lt; 2 &lt;/i&gt; causes the verification to stop.&lt;br&gt;However, if you select this option, Polyspace considers the operation valid and produces the result: -2 &lt;&lt; 2 = -8</entry>
    <entry key="_signed_integer_overflows_help" note="">Specify Code Prover behavior when a signed
    integer computation results in out-of-range values (range determined by data type):&lt;ul&gt;&lt;li&gt;allow - Code Prover does not flag overflows. Overflowing results are
    wrapped around.&lt;br&gt;For instance, result of MAX_INT + 1 wraps to MIN_INT.&lt;br&gt;&lt;li&gt;forbid (default) - Code Prover flags overflows. Values that cause overflow do not propagate to subsequent operations.&lt;br&gt; This behavior conforms to the ANSI C (ISO C++) standard.&lt;br&gt;&lt;li&gt;warn-with-wrap-around - Code Prover flags
    overflows. Overflowing results are wrapped around.</entry>
    <entry key="_unsigned_integer_overflows_help" note="">Specify Code Prover behavior when an unsigned integer computation results in out-of-range values (range determined by data type):&lt;ul&gt;&lt;li&gt;allow (default) - Code Prover does not flag overflows. Overflowing results are wrapped around.&lt;br&gt;For instance, result of MAX_INT + 1 wraps to MIN_INT.&lt;br&gt; This behavior conforms to the ANSI C (ISO C++) standard.&lt;br&gt;&lt;li&gt;forbid - Code Prover flags overflows. Values that cause overflow do not propagate to subsequent operations.&lt;br&gt;&lt;li&gt;warn-with-wrap-around - Code Prover flags overflows. Overflowing results are wrapped around.</entry>
    <entry key="_scalar_overflows_behavior_help" note="">Use this option with "Detect overflow" to specify the result after a check on an integer computation or integer conversion.&lt;br&gt;&lt;br&gt;Select one of the following values: &lt;ul&gt;&lt;li&gt;truncate-on-error (default) - Result restricted to an acceptable value and verification stops.&lt;br&gt;If the check is red, all subsequent checks are black. If the check is orange, the verification continues with restricted values.&lt;br&gt;&lt;li&gt;wrap-around - Result wraps around the type range. The check has no impact on values for the rest of the verification.</entry>
    <entry key="_disable_initialization_checks_help" note="">Disable the checks:&lt;ul&gt;&lt;li&gt;Non-initialized local variable&lt;br&gt;&lt;li&gt;Non-initialized variable&lt;br&gt;&lt;li&gt;Non-initialized pointer&lt;br&gt;&lt;li&gt;Initialized return value&lt;/i&gt;&lt;/ul&gt;If you turn on this option, at declaration, variables are considered full range and pointers are null or pointing to a memory block at an unknown offset.</entry>
    <entry key="_check_globals_init_help">Check that global variables are assigned a value in designated initialization code.&lt;BR&gt;When verifying whole application, initialization code is beginning of 'main' to pragma 'polyspace_end_of_init'.&lt;BR&gt;When verifying a module or library, initialization code is the sequence of initialization functions.</entry>
    <entry key="_detect_pointer_escape_help" note="">Find cases where a function returns a pointer to one of its local variables, causing undefined behavior.</entry>
    <entry key="_allow_ptr_arith_on_struct_help" note="">Allow pointer arithmetic across bounds of structure fields - not ANSI/ISO C-90 behavior.</entry>
    <entry key="_size_in_bytes_help" note="">Allow partial memory allocation from &lt;i&gt;malloc&lt;/i&gt; or &lt;i&gt;cast&lt;/i&gt; statements.</entry>
    <entry key="_permissive_function_pointer_help" note="">By default, Polyspace allows a function pointer to call a function only if both the function pointer and function types are identical.&lt;br&gt;For example, a function with type:&lt;br&gt;&lt;i&gt;int f(int*)&lt;/i&gt;&lt;br&gt;cannot be called by a function pointer of type:&lt;br&gt;&lt;i&gt;int fptr(void*).&lt;/i&gt;&lt;br&gt;If this option is set, Polyspace allows such calls.&lt;br&gt;With applications that use function pointers extensively, this option can cause a significant loss in performance and a higher number &lt;br&gt;of orange checks as Polyspace has to consider more execution paths.</entry>
    <entry key="_uncalled_function_checks_help" note="">Detect functions that are not called directly or indirectly from main or another entry point during run-time.&lt;br&gt; &lt;li&gt;none - Do not detect uncalled functions.&lt;br&gt;&lt;li&gt;  never-called - Detect functions that are defined but never called.&lt;br&gt;  If a function func is identified as never-called, all functions called from func only are also identified as never-called.&lt;br&gt;&lt;li&gt;  called-from-unreachable - Detect functions that are defined and called from an unreachable part of the code.&lt;br&gt;  If a function func is identified as called-from-unreachable, all functions called from func only are also identified as called-from-unreachable.&lt;br&gt;&lt;li&gt;  all - Detect all uncalled functions</entry>
    <entry key="_allow_non_finite_floats_help" note="">Incorporate Inf and NaN in the verification. For instance: &lt;BR&gt; &lt;ul&gt;  &lt;li&gt;Allow Inf and NaN from floating point operations. &lt;li&gt;Assume that floating point variables with unknown values can be infinite or NaN. &lt;/ul&gt; Using the option alone effectively disables many numerical checks on floating point&lt;BR&gt;operations. If you have generally accounted for infinities and NaNs, but you are not sure&lt;BR&gt;that you have considered all situations, set the options Infinities and NaNs to warn-first.&lt;br&gt;&lt;br&gt;In Bug Finder, use this option if the analysis flags comparisons with infinities and NaNs as dead code.</entry>
    <entry key="_stubbed_pointers_are_unsafe_help" note="">Specify that environment pointers may be NULL unless constrained otherwise.&lt;br&gt;Environment pointers can be one of the following:&lt;br&gt;&lt;ul&gt;&lt;li&gt;Global or extern,&lt;/li&gt;&lt;li&gt;Return values of stubbed functions,&lt;/li&gt;&lt;li&gt;Parameters of user-defined functions whose calls are generated.&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;Unless you use this option, environment pointers are considered safe and not NULL by default.&lt;br&gt;</entry>
    <entry key="_check_infinite_help" note="">Detect operations that result in infinities (Inf-s).&lt;BR&gt;&lt;ul&gt;&lt;li&gt;allow: Do not produce a check on the operation.&lt;BR&gt;&lt;/li&gt;&lt;li&gt;warn-first: Produce a check on the operation only if the operands are not infinite.&lt;BR&gt;Continue verification even if the check is red.&lt;BR&gt;This mode highlights only the first occurrence of an infinite value.&lt;/li&gt;&lt;li&gt;forbid: Produce a check on the operation.&lt;BR&gt;Stop verification if the check is red.&lt;/li&gt;&lt;/ul&gt;</entry>
    <entry key="_check_nan_help" note="">Detect operations that result in NaN-s.&lt;BR&gt;&lt;ul&gt;&lt;li&gt;allow: Do not produce a check on the operation.&lt;BR&gt;&lt;/li&gt;&lt;li&gt;warn-first: Produce a check on the operation only if the operands are not NaN.&lt;BR&gt;Continue verification even if the check is red.&lt;BR&gt;This mode highlights only the first occurrence of a NaN.&lt;/li&gt;&lt;li&gt;forbid: Produce a check on the operation.&lt;BR&gt;Stop verification if the check is red.&lt;/li&gt;&lt;/ul&gt;</entry>
    <entry key="_check_subnormal_help" note="">Detect operations that result in subnormal floating point values.&lt;BR&gt;&lt;ul&gt;&lt;li&gt;allow: Do not produce a check on the operation.&lt;BR&gt;&lt;/li&gt;&lt;li&gt;warn-first: Produce a check on the operation only if the operands are not subnormal.&lt;BR&gt;Continue verification even if the check is red.&lt;BR&gt;This mode highlights only the first occurrence of a subnormal value.&lt;/li&gt;&lt;li&gt;warn-all: Produce a check on the operation even if the operands are subnormal.&lt;BR&gt;Continue verification even if the check is red.&lt;BR&gt;This mode highlights all occurrences of subnormal values.&lt;/li&gt;&lt;li&gt;forbid: Produce a check on the operation.&lt;BR&gt;Stop verification if the check is red.&lt;/li&gt;&lt;/ul&gt;</entry>
    <entry key="_consider_volatile_qualifier_on_fields_help" note="">Do not ignore volatile qualifier on fields of structure.&lt;br&gt;If you turn on this option, the software makes the following assumptions:&lt;ul&gt;&lt;li&gt;If one field of a structure is volatile, the structure is volatile as a whole.&lt;br&gt;All fields are volatile even when they do not have the volatile qualifier.&lt;/li&gt;&lt;li&gt;Each field of the volatile structure has full range of values at any point in the code.&lt;/li&gt;&lt;/ul&gt;</entry>
    <entry key="_impact_analysis_help" note="">Check for presence or absence of impact between program elements designated as sources and sinks.</entry>
    <entry key="_impact_specifications_help" note="">Specify XML file that identifies program elements as sources and sinks for impact analysis.</entry>
    <entry key="_impact_analysis_only_help" note="">Skip regular Code Prover checks for run-time errors, and perform impact analysis only.</entry>
    <entry key="_stack_usage_help" note="">Compute and display estimated stack usage</entry>

    <!-- Precision -->
    <entry key="Precision_node" note="">Precision</entry>
    <entry key="Precision_title" note="">Precision</entry>
    <entry key="GlobalSettings_section" note="">Global Settings</entry>
    <entry key="SpecificConstructsSettings_section" note="">Specific Construct Settings</entry>
    <entry key="_O" note="">Precision level</entry>
    <entry key="_to" note="">Verification level</entry>
    <entry key="_timeout" note="">Verification time limit</entry>
    <entry key="_retype_pointer" note="">Retype variables of pointer types</entry>
    <entry key="_retype_int_pointer" note="">Retype symbols of integer types</entry>
    <entry key="_context_sensitivity" note="">Sensitivity context</entry>
    <entry key="_context_sensitivity_column_1" note="">Procedure</entry>
    <entry key="_path_sensitivity_delta" note="">Improve precision of interprocedural analysis</entry>
    <entry key="_modules_precision" note="">Specific precision</entry>
    <entry key="_modules_precision_column_1" note="">File name</entry>
    <entry key="_modules_precision_column_2" note="">Precision</entry>

    <entry key="_O_help" note="">Specify precision level of verification. Higher precision levels result in longer verification times:&lt;ul&gt;&lt;li&gt;Level 0 - Static interval code verification.&lt;li&gt;Level 1 - Verification uses complex polyhedron model of domain values.&lt;li&gt;Level 2 - Verification uses more complex algorithms to closely model domain values (a mixed approach with integer lattices and complex polyhedrons).&lt;li&gt;Level 3 - Only suitable for code less than 1000 lines long. For such code, the selectivity may become high, resulting in a very long code verification time. For example, 1 hour per 1000 lines of code.&lt;/ul&gt;Start code verification at Level 0. Next, correct red and gray checks. Then, run verification at a higher level of precision.</entry>
    <entry key="_to_help" note="">Specify verification level. A higher verification level increases the selectivity rate.&lt;br&gt;A higher verification level also causes verification time to increase.</entry>
    <entry key="_timeout_help" note="">Stop verification if verification is not completed within specified time limit X[.Y] or X[,Y], where X represents hours and Y (optional) represents a fraction of an hour. &lt;br&gt;&lt;br&gt;For example:&lt;ul&gt;&lt;li&gt;timeout 5.75 specifies a time limit of 5 hours and 45 minutes&lt;br&gt;&lt;li&gt;timeout 3,5 specifies a time limit of 3 hours and 30 minutes&lt;/ul&gt;If verification is not completed within the specified time limit, verification is considered to have failed.</entry>
    <entry key="_retype_pointer_help" note="">Retype variables of pointer types to improve precision of pointer conversions chain, for example:&lt;BR&gt;struct A '{'int a; char b;'}' s = '{'1, 2'}';&lt;BR&gt;char *tmp = (char *)&amp;s;&lt;BR&gt;struct A *pa = (struct A *)tmp;&lt;BR&gt;assert((pa-&gt;a == 1) &amp;&amp; (pa-&gt;b == 2));&lt;BR&gt;The principle is that when a symbol of pointer type aliases to a single type of objects, its original type can be replaced by the aliased object type.&lt;BR&gt;&lt;BR&gt;This principle can be applied to fields of struct/union of a pointer type.&lt;BR&gt;You cannot use this option with 'Retype symbols of integer types' (-retype-int-pointer).</entry>
    <entry key="_retype_int_pointer_help" note="">Retype symbols of signed or unsigned integer types that have the same size as the pointer type.&lt;BR&gt;For example:&lt;BR&gt;struct S '{'&lt;BR&gt;int x;&lt;BR&gt;int y;&lt;BR&gt;int z;&lt;BR&gt;char t;&lt;BR&gt;'}' s = '{'1, 2, 3, 4'}';&lt;BR&gt;struct S2 '{'&lt;BR&gt;int first;&lt;BR&gt;void *p;&lt;BR&gt;'}' s2, *ptr = &amp;s2;&lt;BR&gt;...&lt;BR&gt;ptr-&gt;first = (int)&amp;s;&lt;BR&gt;assert(((struct S *)ptr-&gt;first)-&gt;y == 2);&lt;BR&gt;&lt;BR&gt;You cannot use this option with "Retype variables of pointer type" (-retype-pointer).</entry>
    <entry key="_context_sensitivity_help" note="">Add calling context information for checks contained in the given functions.&lt;br&gt;For example, if one call to the function results in a red check, and another call results in a green check, the calling information and color for both will be contained within the check.&lt;br&gt;&lt;br&gt;Select one of the following values:&lt;ul&gt;&lt;li&gt;none - No context sensitivity&lt;br&gt;&lt;li&gt;auto - Automatically select the functions that context sensitivity will be applied to&lt;br&gt;&lt;li&gt;custom - Provide the functions that context sensitivity will be applied to&lt;/li&gt;</entry>
    <entry key="_path_sensitivity_delta_help" note="">Improve precision of interprocedural analysis.&lt;br&gt;&lt;br&gt;WARNING: Should be used with a value less than or equal to 3.&lt;br&gt;Otherwise, the verification could take longer.</entry>
    <entry key="_modules_precision_help" note="">Specify list of compilation units to be analyzed with a precision that differs from the specified "Precision level" (-O).&lt;BR&gt;&lt;BR&gt;By default, verification uses the same precision for all compilation units.&lt;BR&gt;Compilation units are .c files only.</entry>

    <!-- Scaling -->
    <entry key="Scaling_node" note="">Scaling</entry>
    <entry key="Scaling_title" note="">Scaling</entry>
    <entry key="_inline" note="">Inline</entry>
    <entry key="_inline_column_1" note="">Procedure</entry>
    <entry key="_k_limiting" note="">Depth of verification inside structures</entry>
    <entry key="_inline_help" note="">Create, for each listed procedure, a clone of the procedure for every call.&lt;br&gt;This inlining reduces the number of aliases in a given procedure, and may improve precision.&lt;br&gt;&lt;br&gt;&lt;b&gt;Warning:&lt;/b&gt; Extensive use of this option may result in excessive code duplication and lead to scaling problems.</entry>
    <entry key="_k_limiting_help" note="">Limit the number of fields in a structure that the pointer analysis distinguishes, that is, specify the depth of analysis inside structures.&lt;br&gt;&lt;br&gt;WARNING: Should be used with a value greater than or equal to 2. Otherwise, the verification could take longer or be less accurate.</entry>

    <!-- Post verification -->
    <entry key="Advanced_node" note="">Advanced Settings</entry>
    <entry key="Advanced_title" note="">Advanced Settings</entry>
    <entry key="MergedAdvanced_node" note="">Advanced Settings</entry>
    <entry key="MergedAdvanced_title" note="">Advanced Settings</entry>
    <entry key="post_verification_section" note="">Post Verification</entry>
    <entry key="_post_analysis_command" note="">Command/script to apply after the end of the code verification</entry>
    <entry key="__other" note="">Other</entry>

    <entry key="_post_analysis_command_help" note="">Specify command or file that must be run after code verification is complete.</entry>
    <entry key="__other_help" note="">If necessary, the Technical Support team may provide non-official options for fine-tuning your verifications.</entry>

    <!-- Reporting -->
    <entry key="Reporting_node" note="">Reporting</entry>
    <entry key="MergedReporting_node" note="">Reporting</entry>
    <entry key="Reporting_title" note="">Reporting</entry>
    <entry key="MergedReporting_title" note="">Reporting</entry>
    <entry key="__report_generation" note="">Generate report</entry>
    <entry key="__report_template_code_prover" note="Code Prover option">Code Prover report</entry>
    <entry key="__report_template_code_prover_help" note="Code Prover option">Specify template for Code Prover report&lt;BR&gt;Product option -report-template.</entry>
    <entry key="__report_template_bug_finder" note="Bug Finder option">Bug Finder report</entry>
    <entry key="__report_template_bug_finder_help" note="Bug Finder option">Specify template for Bug Finder report&lt;BR&gt;Product option -report-template.</entry>
    <entry key="_report_template" note="Code Prover">Report template</entry>
    <entry key="_report_template_bug_finder" note="Bug Finder">Report template</entry>
    <entry key="_report_template_code_prover" note="Bug Finder">Report template</entry>
    <entry key="_report_output_format" note="">Output format</entry>

    <entry key="__report_generation_help" note="">Create verification report using report generation options.</entry>
    <entry key="_report_template_help" note="">Specify template for generating analysis report.</entry>
    <entry key="__bf_report_template_help" note="">Specify template for generating analysis report.</entry>
    <entry key="_report_output_format_help" note="">Specify output format of report.</entry>

  </message>
</rsccat>
