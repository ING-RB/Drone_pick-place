<?xml version="1.0"?>
<!-- Copyright 2012-2024 The MathWorks, Inc.
     Message printed in PVE for each BugFinder Checker.
     BugFinder Checker messages are not in the XML catalog (defects_catalog.xml) because they are internationalized.

     "short description" is the first message given on the Checker
     Ex: Typedef mismatch (Impact: High)

     "long description" is the message given just below the "short description"
     It is given only if message for the Checker in the Database is empty
-->
<rsccat version="1.0" locale="en_US" product="polyspace">
  <message>

  	<!--  Bug Finder -->
  	<entry key="defect" note="">Defect</entry>
  	<entry key="defects" note="">Defects</entry>


    <!-- Numerical defects - short description-->
    <entry key="numerical" note="">Numerical</entry>
    <entry key="int_zero_div" note="">Integer division by zero</entry>
    <entry key="float_zero_div" note="">Float division by zero</entry>
    <entry key="int_conv_ovfl" note="">Integer conversion overflow</entry>
    <entry key="uint_conv_ovfl" note="">Unsigned integer conversion overflow</entry>
    <entry key="sign_change" note="">Sign change integer conversion overflow</entry>
    <entry key="float_conv_ovfl" note="">Float conversion overflow</entry>
    <entry key="int_ovfl" note="">Integer overflow</entry>
    <entry key="uint_ovfl" note="">Unsigned integer overflow</entry>
    <entry key="int_constant_ovfl" note="">Integer constant overflow</entry>
    <entry key="uint_constant_ovfl" note="">Unsigned integer constant overflow</entry>
    <entry key="float_ovfl" note="">Float overflow</entry>
    <entry key="int_std_lib" note="">Invalid use of standard library integer routine</entry>
    <entry key="float_std_lib" note="">Invalid use of standard library floating point routine</entry>
    <entry key="shift_neg" note="">Shift of a negative value</entry>
    <entry key="shift_ovfl" note="">Right operand of shift operation outside allowed bounds</entry>
    <entry key="invalid_float_op" note="">Invalid operation on floats</entry>
    <entry key="float_absorption" note="">Absorption of float operand</entry>
    <entry key="subnormal" note="">Subnormal float</entry>
    <entry key="bad_plain_char_use" note="">Use of plain char type for numeric value</entry>
    <entry key="bitwise_neg" note="">Bitwise operation on negative value</entry>
    <entry key="int_precision_exceeded" note="">Integer precision exceeded</entry>
    <entry key="invalid_operation_on_boolean" note="">Possible invalid operation on boolean operand</entry>
    <entry key="int_to_float_precision_loss" note="">Precision loss in integer to float conversion</entry>

    <!-- Static memory defects - short description-->
    <entry key="static_memory" note="">Static memory</entry>
    <entry key="out_bound_array" note="">Array access out of bounds</entry>
    <entry key="null_ptr" note="">Dereference of a null pointer</entry>
    <entry key="out_bound_ptr" note="">Pointer access out of bounds</entry>
    <entry key="func_cast" note="">Unreliable cast of function pointer</entry>
    <entry key="ptr_cast" note="">Unreliable cast of pointer</entry>
    <entry key="local_addr_escape" note="">Pointer or reference to stack variable leaving scope</entry>
    <entry key="stack_ovfl" note="">Stack overflow</entry>
    <entry key="mem_std_lib" note="">Invalid use of standard library memory routine</entry>
    <entry key="str_std_lib" note="">Invalid use of standard library string routine</entry>
    <entry key="null_ptr_arith" note="">Arithmetic operation with NULL pointer</entry>
    <entry key="object_size_mismatch" note="">Wrong allocated object size for cast</entry>
    <entry key="path_buffer_overflow" note="">Use of path manipulation function without maximum-sized buffer checking</entry>
    <entry key="str_format_buffer_overflow" note="">Buffer overflow from incorrect string format specifier</entry>
    <entry key="strlib_buffer_overflow" note="">Destination buffer overflow in string manipulation</entry>
    <entry key="strlib_buffer_underflow" note="">Destination buffer underflow in string manipulation</entry>
    <entry key="putenv_auto_var" note="">Use of automatic variable as putenv-family function argument</entry>
    <entry key="ptr_to_diff_array" note="">Subtraction or comparison between pointers to different arrays</entry>
    <entry key="move_const_object" note="">Move operation on const object</entry>
    <entry key="incorrect_value_forwarding" note="">Incorrect value forwarding</entry>
    <!-- Static memory defects - default long description-->
    <entry key="func_cast_default_message" note="" translate="false">Unreliable cast between two different pointer function types.</entry>
    <entry key="ptr_cast_default_message" note="" translate="false">Unreliable cast between two different pointer types.</entry>
    <entry key="str_format_buffer_overflow_default_message" note="" translate="false">Buffer out of bound risk without correct precision in the format specifier.</entry>
    <entry key="move_const_object_default_message" note="" translate="false">The object used in the std::move operation is declared const.\nThe resources in the object will not be transferred to another object.</entry>
    <entry key="incorrect_value_forwarding_default_message" note="" translate="false">Forwarding value to other functions shall be correctly done</entry>

    <!-- Dynamic memory defects - short description -->
    <entry key="dynamic_memory" note="">Dynamic memory</entry>
    <entry key="freed_ptr" note="">Use of previously freed pointer</entry>
    <entry key="unchecked_allocated_memory" note="">Unchecked possible dynamic memory allocation failure</entry>
    <entry key="unprotected_memory_allocation" note="">Unprotected dynamic memory allocation</entry>
    <entry key="double_deallocation" note="">Deallocation of previously deallocated pointer</entry>
    <entry key="bad_free" note="">Invalid free of pointer</entry>
    <entry key="mem_leak" note="">Memory leak</entry>
    <entry key="bad_delete" note="">Invalid deletion of pointer</entry>
    <entry key="delete_non_virtual" note="">Deletion of non-virtual memory</entry>
    <entry key="win_mismatch_dealloc" note="">Mismatched alloc/dealloc functions on Windows</entry>
    <entry key="alignment_change" note="">Alignment changed after memory reallocation</entry>

    <!-- Programming defects - Short description-->
    <entry key="programming" note="">Programming</entry>
    <entry key="assert" note="">Assertion</entry>
    <entry key="bad_equal_use" note="">Invalid use of = operator</entry>
    <entry key="bad_equal_equal_use" note="">Invalid use of == operator</entry>
    <entry key="decl_mismatch" note="">Declaration mismatch</entry>
    <entry key="typedef_mismatch" note="">Typedef mismatch</entry>
    <entry key="bad_float_op" note="">Floating point comparison with equality operators</entry>
    <entry key="missing_null_char" note="">Missing null in string array</entry>
    <entry key="qualifier_mismatch" note="">Qualifier removed in conversion</entry>
    <entry key="ptr_sizeof_mismatch" note="">Wrong type used in sizeof</entry>
    <entry key="operator_precedence" note="">Possibly unintended evaluation of expression because of operator precedence rules</entry>
    <entry key="std_func_arg_mismatch" note="">Standard function call with incorrect arguments</entry>
    <entry key="invalid_memory_assumption" note="">Invalid assumptions about memory organization</entry>
    <entry key="bad_ptr_scaling" note="">Incorrect pointer scaling</entry>
    <entry key="constant_object_write" note="">Writing to const qualified object</entry>
    <entry key="improper_array_init" note="">Improper array initialization</entry>
    <entry key="memset_invalid_size" note="">Use of memset with size argument zero</entry>
    <entry key="invalid_va_list_arg" note="">Invalid va_list argument</entry>
    <entry key="non_positive_vla_size" note="">Variable length array with non-positive size</entry>
    <entry key="overlapping_assign" note="">Overlapping assignment</entry>
    <entry key="overlapping_copy" note="">Copy of overlapping memory</entry>
    <entry key="sizeof_misuse" note="">Possible misuse of sizeof</entry>
    <entry key="bad_file_access_mode_status" note="">Bad file access mode or status</entry>
    <entry key="write_internal_buffer_returned_from_std_func" note="">Modification of internal buffer returned from non-reentrant standard function</entry>
    <entry key="memset_invalid_value" note="">Call to memset family with unintended value</entry>
    <entry key="missing_switch_case" note="">Missing case for switch condition</entry>
    <entry key="other_std_lib" note="">Invalid use of standard library routine</entry>
    <entry key="autosar_lib_non_compliance" note="">Non-compliance with AUTOSAR specification</entry>
    <entry key="code_behavior_spec_non_compliance" note="">Non-compliance with code behavior specification</entry>
    <entry key="i2c_smbus_lib_non_compliance" note="">Non-compliance with I2C SMBus specification</entry>
    <entry key="bad_int_ptr_cast" note="">Unsafe conversion between pointer and integer</entry>
    <entry key="unsafe_str_to_numeric" note="string - C/C++ string">Unsafe conversion from string to numerical value</entry>
    <entry key="exit_abnormal_handler" note="">Abnormal termination of exit handler</entry>
    <entry key="memcmp_strings" note="">Memory comparison of strings</entry>
    <entry key="memcmp_padding_data" note="">Memory comparison of padding data</entry>
    <entry key="non_reentrant_std_return" note="">Misuse of return value from non-reentrant standard function</entry>
    <entry key="errno_misuse" note="">Misuse of errno</entry>
    <entry key="missing_errno_reset" note="">Errno not reset</entry>
    <entry key="character_misuse" note="">Misuse of sign-extended character value</entry>
    <entry key="char_eof_confused" note="">Character value absorbed into EOF</entry>
    <entry key="io_interleaving" note="">Alternating input and output from a stream without flush or positioning call</entry>
    <entry key="sig_handler_comp_excp_return" note="">Return from computational exception signal handler</entry>
    <entry key="sig_handler_calling_signal" note="">Signal call from within signal handler</entry>
    <entry key="sig_handler_async_unsafe" note="">Function called from signal handler not asynchronous-safe</entry>
    <entry key="sig_handler_async_unsafe_strict" note="">Function called from signal handler not asynchronous-safe (strict ISO C)</entry>
    <entry key="unprototyped_func_call" note="">Call through non-prototyped function pointer</entry>
    <entry key="file_object_misuse" note="">Misuse of a FILE object</entry>
    <entry key="flexible_array_member_struct_misuse" note="">Misuse of structure with flexible array member</entry>
    <entry key="missing_byteswap" note="">Missing byte reordering when transferring data</entry>
    <entry key="sig_handler_shared_object" note="">Shared data access within signal handler</entry>
    <entry key="sig_handler_errno_misuse" note="">Misuse of errno in a signal handler</entry>
    <entry key="invalid_file_pos" note="">Invalid file position</entry>
    <entry key="indeterminate_string" note="string - C/C++ string">Use of indeterminate string</entry>
    <entry key="macro_used_as_object" note="">Predefined macro used as an object</entry>
    <entry key="unnamed_namespace_in_header" note="">Unnamed namespace in header file</entry>
    <entry key="side_effect_ignored" note="">Side effect of expression ignored</entry>
    <entry key="pre_ucname_join_tokens" note="">Universal character name from token concatenation</entry>
    <entry key="pre_directive_macro_arg" note="">Preprocessor directive in macro argument</entry>
    <entry key="inline_constraint_not_respected" note="">Inline constraint not respected</entry>
    <entry key="va_arg_incorrect_type" note="">Incorrect data type passed to va_arg</entry>
    <entry key="too_many_va_arg_calls" note="">Too many va_arg calls for current argument list</entry>
    <entry key="stream_with_side_effect" note="">Stream argument with possibly unintended side effects</entry>
    <entry key="temp_object_access" note="">Accessing object with temporary lifetime</entry>
    <entry key="memcmp_float" note="">Memory comparison of float-point values</entry>
    <entry key="invalid_env_pointer" note="">Environment pointer invalidated by previous operation</entry>
    <entry key="narrow_wide_str_misuse" note="string - C/C++ string">Misuse of narrow or wide character string</entry>
    <entry key="side_effect_in_unsafe_macro_arg" note="">Side effect in arguments to unsafe macro</entry>
    <entry key="offsetof_misuse" note="">Incorrect use of offsetof in C++</entry>
    <entry key="va_start_misuse" note="">Incorrect use of va_start</entry>
    <entry key="va_start_incorrect_type" note="">Incorrect type data passed to va_start</entry>
    <entry key="copy_paste" note="">Copy-paste</entry>
    <entry key="clone" note="">Clone</entry>
    <entry key="duplicated_code" note="">Duplicated code</entry>
    <entry key="almost_duplicated_code" note="">Partially duplicated code</entry>
    <entry key="copy_paste_error" note="">Possible copy-paste error</entry>
    <entry key="std_string_c_str_compared_to_pointer" note="">Result of string::c_str() compared to another pointer</entry>
    <entry key="std_remove_without_erase" note="">Improper erase-remove idiom</entry>
    <entry key="invalid_iterator_usage" note="">Invalid iterator usage</entry>
    <entry key="dangling_string_view" note="">std::string_view initialized with dangling pointer</entry>
    <entry key="library_usage">Library usage</entry>
    <entry key="pointer_to_temporary_object" note="">Pointer or reference to destroyed temporary object</entry>
    <entry key="pstunit_misuse" note="">Misuse of the PSTUnit library</entry>
    <entry key="pstunit_misuse_setup_teardown">Incorrect use of test setup/teardown API</entry>
    <entry key="pstunit_misuse_fixtures">Incorrect use of test fixtures</entry>
    <entry key="pstunit_misuse_mocking">Incorrect use of mocking API</entry>
    <entry key="pstunit_misuse_registration">Incorrect test registration or definition</entry>
    <entry key="pstunit_unsupported_syntax">Unsupported syntax used with test authoring API</entry>
    <entry key="var_read_after_move">Variable read after move</entry>

    <!-- Programming defects - Default Long description-->
    <entry key="bad_equal_use_default_message" note="" translate="false">Use of '=' instead of '==' in a logical expression.</entry>
    <entry key="bad_equal_equal_use_default_message" note="" translate="false">Use of '==' instead of '=' in a statement.</entry>
    <entry key="decl_mismatch_default_message" note="" translate="false">Inconsistent multiple declarations of the same identifier.</entry>
    <entry key="bad_float_op_default_message" note="" translate="false">Floating point equality or inequality statement may be inaccurate.</entry>
    <entry key="operator_precedence_default_message" note="" translate="false">Probably missing parentheses leading to wrong order of operations.</entry>
    <entry key="ptr_sizeof_mismatch_default_message" note="" translate="false">Mismatch between pointers and sizeof.</entry>
    <entry key="missing_null_char_default_message" note="" translate="false">Missing null char at the end of an array of chars because it has been declared with less elements than the initializing string.</entry>
    <entry key="qualifier_mismatch_default_message" note="" translate="false">Cast between pointer types with different qualifiers.</entry>
    <entry key="overlapping_assign_default_message" note="" translate="false">Overlapping assignment.</entry>
    <entry key="improper_array_init_default_message" note="" translate="false">Improper array initialization.</entry>
    <entry key="overlapping_copy_default_message" note="" translate="false">Copy of overlapping memory.</entry>
    <entry key="bad_int_ptr_cast_default_message" note="" translate="false">Unsafe conversion between pointer and integer.</entry>
    <entry key="typedef_mismatch_default_message" note="" translate="false">Inconsistent multiple declarations of the same typedef.</entry>
    <entry key="unprototyped_func_call_default_message" note="" translate="false">Call through non-prototyped function pointer.</entry>
    <entry key="flexible_array_member_struct_misuse_default_message" note="" translate="false">Misuse of structure with flexible array member.</entry>
    <entry key="unnamed_namespace_in_header_default_message" note="" translate="false">Unnamed namespace in header file.</entry>
    <entry key="std_string_c_str_compared_to_pointer_default_message" note="">This comparison to a pointer might be unnecessary or unintended. Use string comparison instead.</entry>
    <entry key="std_remove_without_erase_default_message" note="">std::remove() is called but the result is not passed to the containers erase() method. No entries are removed from the container.</entry>
    <entry key="dangling_string_view_default_message" note="">An std::string_view is constructed by using an unnamed temporary variable that goes out of scope before the string_view object.</entry>
    <entry key="pointer_to_temporary_object_default_message" note="">Object destroyed at the end of the expression or controlling statement.</entry>
    <entry key="var_read_after_move_default_message">Reading moved-from variable can result in unspecified behavior.</entry>

    <!-- Object oriented defects - Short description-->
    <entry key="object_oriented" note="">Object oriented</entry>
    <entry key="object_slicing" note="">Object slicing</entry>
    <entry key="partial_override" note="">Partial override of overloaded virtual functions</entry>
    <entry key="virtual_func_hiding" note="">Incompatible types prevent overriding</entry>
    <entry key="missing_copy_ctor_call" note="">Copy constructor not called in initialization list</entry>
    <entry key="missing_base_assign_op_call" note="">Base class assignment operator not called</entry>
    <entry key="non_init_member" note="">Member not initialized in constructor</entry>
    <entry key="dtor_not_virtual" note="">Base class destructor not virtual</entry>
    <entry key="return_not_ref_to_this" note="">*this not returned in copy assignment operator</entry>
    <entry key="missing_member_init_in_list" note="">Missing explicit member initialization in initialization list</entry>
    <entry key="missing_explicit_keyword" note="">Missing explicit keyword</entry>
    <entry key="missing_self_assign_test" note="">Self assignment not tested in operator</entry>
    <entry key="breaking_data_encapsulation" note="">Return of non-const handle to encapsulated data member</entry>
    <entry key="missing_virtual_inheritance" note="">Missing virtual inheritance</entry>
    <entry key="dtor_may_throw" note="">Destructor may throw</entry>
    <entry key="rethrow_out_of_catch" note="">Rethrow outside of catch</entry>
    <entry key="excp_spec_violation" note="">Exception specification violated</entry>
    <entry key="missing_excp_handler_in_main" note="">Missing catch(...) in main</entry>
    <entry key="copy_modifying_source" note="">Copy operation modifying source operand</entry>
    <entry key="incomplete_class_ptr" note="">Conversion or deletion of incomplete class pointer</entry>
    <entry key="lambda_type_misuse" note="">Lambda used as typeid operand</entry>
    <entry key="missing_overload_new_for_aligned_obj" note="">Operator new not overloaded for possibly over-aligned class</entry>
    <entry key="memop_on_nontrivial_obj" note="">Bytewise operations on nontrivial class object</entry>

    <!-- Object oriented defects - Default Long description-->
    <entry key="return_not_ref_to_this_default_message" note="" translate="false">Assignment operator does not return a reference to *this.</entry>
    <entry key="object_slicing_default_message" note="" translate="false">Slicing on pass-by-value and class hierarchies.</entry>
    <entry key="dtor_not_virtual_default_message" note="" translate="false">Potential leaking problem if this class is expected to behave polymorphically on derived class objects deletion.</entry>
    <entry key="partial_override_default_message" note="" translate="false">Overloaded virtual function is only partially overridden.</entry>
    <entry key="missing_self_assign_test_default_message" note="" translate="false">Handle assignment to self in operator=. Leak and unneeded copies may be avoided.</entry>
    <entry key="breaking_data_encapsulation_default_message" note="" translate="false">Avoid returning handles to object internals. A client referring to an object of this class and calling this method may modify the associated object contents.</entry>
    <entry key="missing_copy_ctor_call_default_message" note="" translate="false">Not all subobjects and/or members are copied in initialization list.</entry>
    <entry key="missing_base_assign_op_call_default_message" note="" translate="false">Missing calls to copy assignment for base subobjects.</entry>
    <entry key="missing_virtual_inheritance_default_message" note="" translate="false">An accessible base class is both virtual and non-virtual in the same hierarchy.</entry>
    <entry key="missing_member_init_in_list_default_message" note="" translate="false">Missing (explicit) member initialization in list.</entry>
    <entry key="virtual_func_hiding_default_message" note="" translate="false">Hiding of virtual function results from failed override attempt.</entry>
    <entry key="missing_explicit_keyword_default_message" note="" translate="false">Missing keyword "explicit" in constructor, candidate for use in implicit conversions (from first argument type).</entry>

    <!-- C++ Exceptions defects - Short description-->
    <entry key="cpp_exceptions" note="">C++ Exceptions</entry>
    <entry key="excp_caught_by_value" note="">Exception caught by value</entry>
    <entry key="excp_handler_hidden" note="">Exception handler hidden by previous handler</entry>
    <entry key="throw_argument_expression_throws" note="">Argument expression of throw statement might raise unexpected exception</entry>
    <entry key="noexcept_function_throws" note="">Noexcept function might exit with an exception</entry>
    <entry key="throw_expression_calls_new" note="">Throw argument expression calls new</entry>

    <!-- C++ Exceptions defects - Default Long description-->
    <entry key="excp_caught_by_value_default_message" note="" translate="false">Exception is caught by value instead of reference (recommended) or pointer.</entry>
    <entry key="excp_handler_hidden_default_message" note="" translate="false">Handler hidden by previous handler. It will never be executed.</entry>
    <entry key="throw_argument_expression_throws_default_message" note="">The argument expression of 'throw' statement might raise an unexpected exception.</entry>
    <entry key="noexcept_function_throws_default_message" note="">Function explicitly marked 'noexcept' can throw. Unexpected std::terminate might occur.</entry>
    <entry key="uncaught_exception" note="">Uncaught exception</entry>
    <entry key="throw_expression_calls_new_default_message" note="">Calling new in a throw expression can result in an unhandled exception or a memory leak.</entry>

    <!-- Data-flow defects - Short description-->
    <entry key="data_flow" note="">Data flow</entry>
    <entry key="useless_write" note="">Write without a further read</entry>
    <entry key="non_init_var" note="">Non-initialized variable</entry>
    <entry key="non_init_ptr" note="">Non-initialized pointer</entry>
    <entry key="var_shadowing" note="">Variable shadowing</entry>
    <entry key="missing_return" note="">Missing return statement</entry>
    <entry key="unreachable" note="">Unreachable code</entry>
    <entry key="bad_unreachable" note="">Defective unreachable code</entry>
    <entry key="dead_code" note="">Dead code</entry>
    <entry key="useless_if" note="">Useless if</entry>
    <entry key="partially_access_array" note="">Partially accessed array</entry> <!-- backward compatibility with 13b -->
    <entry key="partially_accessed_array" note="">Partially accessed array</entry>
    <entry key="uncalled_func" note="">Static uncalled function</entry>
    <entry key="infinite_loop" note="">Infinite loop</entry>
    <entry key="non_init_ptr_conv" note="">Pointer to non initialized value converted to const pointer</entry>
    <entry key="deactivated_code" note="">Code deactivated by constant false condition</entry>
    <entry key="useless_preproc_condition" note="">Useless preprocessor conditional directive</entry>
    <!-- Data-flow defects - Default Long description-->
    <entry key="var_shadowing_default_message" note="" translate="false">A variable declared in an inner scope hides a variable with the same name declared in an outer scope.</entry>
    <entry key="missing_return_default_message" note="" translate="false">Exit path of the function without return statement or return value.</entry>
    <entry key="uncalled_func_default_message" note="" translate="false">Static function not called.</entry>
    <entry key="deactivated_code_default_message" note="" translate="false">Branch deactivated.</entry>
    <entry key="useless_preproc_condition_default_message" note="">Useless preprocessor conditional directive.</entry>

    <!-- Resource management defects - Short description -->
    <entry key="resource_management" note="">Resource management</entry>
    <entry key="read_only_resource_write" note="">Writing to read-only resource</entry>
    <entry key="closed_resource_use" note="">Use of previously closed resource</entry>
    <entry key="double_resource_close" note="">Closing previously closed resource</entry>
    <entry key="double_resource_open" note="">Opening previously opened resource</entry>
    <entry key="resource_leak" note="">Resource leak</entry>
    <entry key="resource_access_mode_mismatch" note="">Opening previously opened resource with different mode</entry>

    <!-- Concurrency defects - Short description -->
    <entry key="concurrency" note="">Concurrency</entry>
    <entry key="deadlock" note="">Deadlock</entry>
    <entry key="livelock" note="">Livelock</entry>
    <entry key="bad_lock" note="">Missing unlock</entry>
    <entry key="bad_unlock" note="">Missing lock</entry>
    <entry key="double_lock" note="">Double lock</entry>
    <entry key="double_unlock" note="">Double unlock</entry>
    <entry key="destroy_locked" note="">Destruction of locked mutex</entry>
    <entry key="lock_too_long" note="">Lock too long</entry>
    <entry key="race_cond" note="">Race condition</entry> <!-- obsolete g1030780  -->
    <entry key="data_race" note="">Data race</entry>
    <entry key="data_race_std_lib" note="">Data race through standard library function call</entry>
    <entry key="data_race_bit_fields" note="">Data race on adjacent bit fields</entry>
    <entry key="data_race_all" note="">Data race including atomic operations</entry>
    <entry key="signal_use_in_multithreaded_program" note="">Signal call in multithreaded program</entry>
    <entry key="thread_killed_with_signal" note="">Use of signal to kill thread</entry>
    <entry key="blocking_while_locked" note="">Blocking operation while holding lock</entry>
    <entry key="atomic_var_access_twice" note="">Atomic variable accessed twice in an expression</entry>
    <entry key="atomic_var_sequence_not_atomic" note="">Atomic load and store sequence not atomic</entry>
    <entry key="spurious_wakeup_not_wrapped_in_loop" note="">Function that can spuriously wake up not wrapped in loop</entry>
    <entry key="spurious_failure_not_wrapped_in_loop" note="">Function that can spuriously fail not wrapped in loop</entry>
    <entry key="thread_mem_leak" note="">Thread-specific memory leak</entry>
    <entry key="undefined_thread_id" note="">Use of undefined thread ID</entry>
    <entry key="double_join_or_detach" note="">Join or detach of a joined or detached thread</entry>
    <entry key="bad_thread_attribute" note="">Missing or double initialization of thread attribute</entry>
    <entry key="signaled_cond_var_not_unique" note="">Multiple threads waiting on same condition variable</entry>
    <entry key="asynchronously_cancellable_thread" note="">Asynchronously cancellable thread</entry>
    <entry key="multi_mutex_with_one_cond_var" note="">Multiple mutexes used with same condition variable</entry>
    <entry key="local_addr_escape_thread" note="">Automatic or thread local variable escaping from a thread</entry>

    <!-- Security defects - Short description -->
    <entry key="security" note="">Security</entry>
    <entry key="path_traversal" note="">Vulnerable path manipulation</entry>
    <entry key="missing_sentinel" note="">Array not null-terminated</entry>
    <entry key="strlib_buffer_overflow_using_source_size" note="">Destination buffer overflow using size of source buffer</entry>
    <entry key="delete_sentinel" note="">Unintended deleting the null character makes string never terminated</entry>
    <entry key="path_excessive_length" note="">Path manipulation function cannot handle path of length greater than MAX_PATH</entry>
    <entry key="dangerous_std_func" note="">Use of dangerous standard function</entry>
    <entry key="chroot_misuse" note="">File manipulation after chroot() without chdir("/")</entry>
    <entry key="ignored_return_value" note="">Ignored return value of a sensitive routine call</entry>
    <entry key="return_not_checked" note="">Returned value of a sensitive function not checked</entry>
    <entry key="bad_umask" note="">Umask used with chmod-style arguments</entry>
    <entry key="string_format" note="">Format string specifiers and arguments mismatch</entry>
    <entry key="dangerous_permissions" note="">Vulnerable permission assignments</entry>
    <entry key="rand_seed_constant" note="">Deterministic random output from constant seed</entry>
    <entry key="rand_seed_predictable" note="">Predictable random output from predictable seed</entry>
    <entry key="vulnerable_prng" note="">Vulnerable pseudo-random number generator</entry>
    <entry key="func_ptr_absolute_addr" note="">Function pointer assigned with absolute address</entry>
    <entry key="single_signal_handler" note="">Multiple signals with a single handler can cause race condition</entry>
    <entry key="toctou" note="">File access between time of check and use (TOCTOU)</entry>
    <entry key="relative_path_lib" note="">Load of library from a relative path can be controlled by an external actor</entry>
    <entry key="relative_path_cmd" note="">Execution of a binary from a relative path can be controlled by an external actor</entry>
    <entry key="non_secure_temp_file" note="">Use of non-secure temporary file</entry>
    <entry key="sensitive_stack_not_cleared" note="">Uncleared sensitive data in stack</entry>
    <entry key="sensitive_heap_not_cleared" note="">Sensitive heap memory not cleared before release</entry>
    <entry key="sensitive_data_export_with_env_var" note="">Information exposure through environmental variables or registers</entry>
    <entry key="sensitive_data_print" note="">Sensitive data printed out</entry>
    <entry key="obsolete_std_func" note="">Use of obsolete standard function</entry>
    <entry key="bad_network_connect_order" note="">Incorrect order of network connection operations</entry>
    <entry key="data_length_mismatch" note="">Mismatch between data length and size</entry>
    <entry key="unsafe_std_func" note="">Unsafe standard function</entry>
    <entry key="unsafe_std_crypt" note="">Unsafe standard encryption function</entry>
    <entry key="bad_privilege_drop_order" note="">Bad order of dropping privileges</entry>
    <entry key="missing_privilege_drop_check" note="">Privilege drop not verified</entry>
    <entry key="readlink_misuse" note="">Misuse of readlink()</entry>
    <entry key="errno_not_checked" note="">Errno not checked</entry>
    <entry key="file_exposure_to_child" note="">File descriptor exposure to child process</entry>
    <entry key="unsafe_system_call" note="">Unsafe call to a system function</entry>
    <entry key="padding_info_leak" note="">Information leak via structure padding</entry>
    <entry key="inappropriate_io_on_device" note="">Inappropriate I/O operation on device files</entry>
    <entry key="hard_coded_sensitive_data" note="">Hard-coded sensitive data</entry>
    <entry key="uncertain_memory_cleaning" note="">Uncertain memory cleaning</entry>
    <entry key="dummy_security" note="">Dummy checker to test infra work</entry>

    <!-- Security defects - Default Long description -->
    <entry key="string_format_default_message" note="" translate="false">Mismatch between the specifiers and the arguments of a format string.</entry>
    <entry key="func_ptr_absolute_addr_default_message" note="" translate="false">Function pointer assigned with absolute address.</entry>
    <entry key="unsafe_system_call_default_message" note="">Unsafe call to a system function.</entry>

    <!-- Security -CRYPTO/SSL defects - Short description -->
    <entry key="cryptography" note="">Cryptography</entry>
    <entry key="crypto_no_cleanup" note="">Object have not been cleaned up and sensitive data may have not been removed from memory</entry>
    <entry key="crypto_no_free" note="">Object have not been freed and sensitive data may have not been removed from memory</entry>
    <entry key="crypto_no_init" note="">Algorithms must be loaded by library before they can be used</entry>
    <entry key="crypto_deprecated" note="">This function is deprecated</entry>
    <entry key="crypto_bad_init" note="">This object has not been initialized properly</entry>
    <entry key="crypto_bad_free" note="">This object is attached to another one and should not be freed directly</entry>
    <entry key="crypto_bad_option" note="">The given values do not match valid options</entry>
    <entry key="crypto_md_weak_hash" note="">Nonsecure hash algorithm</entry>
    <entry key="crypto_md_no_algorithm" note="">Missing hash algorithm</entry>
    <entry key="crypto_md_bad_function" note="">Context initialized incorrectly for digest operation</entry>
    <entry key="crypto_md_no_data" note="">No data added into context</entry>
    <entry key="crypto_md_no_final" note="">Missing final step after hashing update operation</entry>
    <entry key="crypto_md_no_salt" note="">Missing salt for hashing operation</entry>
    <entry key="crypto_cipher_weak_cipher" note="">Weak cipher algorithm</entry>
    <entry key="crypto_cipher_weak_mode" note="">Weak cipher mode</entry>
    <entry key="crypto_cipher_constant_key" note="">Constant cipher key</entry>
    <entry key="crypto_cipher_constant_iv" note="">Constant block cipher initialization vector</entry>
    <entry key="crypto_cipher_predictable_key" note="">Predictable cipher key</entry>
    <entry key="crypto_cipher_predictable_iv" note="">Predictable block cipher initialization vector</entry>
    <entry key="crypto_cipher_iv_reuse_on_key_change" note="">The initialization vector must be changed as soon as a new key is used</entry>
    <entry key="crypto_cipher_no_salt_in_passwd_hash" note="">A password must be salted before being hashed to prevent chosen plain text attacks</entry>
    <entry key="crypto_cipher_bad_function" note="">Inconsistent cipher operations</entry>
    <entry key="crypto_cipher_no_algorithm" note="">Missing cipher algorithm</entry>
    <entry key="crypto_cipher_no_key" note="">Missing cipher key</entry>
    <entry key="crypto_cipher_no_iv" note="">Missing block cipher initialization vector</entry>
    <entry key="crypto_cipher_no_data" note="">Missing cipher data to process</entry>
    <entry key="crypto_cipher_no_padding" note="">A padding should be set for this block mode of operation</entry>
    <entry key="crypto_cipher_no_final" note="">Missing cipher final step</entry>
    <entry key="crypto_pkey_weak_params" note="">Nonsecure parameters for key generation</entry>
    <entry key="crypto_rsa_low_exponent" note="">Nonsecure RSA public exponent</entry>
    <entry key="crypto_pkey_incorrect_key" note="">Incorrect key for cryptographic algorithm</entry>
    <entry key="crypto_pkey_incorrect_init" note="">Context initialized incorrectly for cryptographic operation</entry>
    <entry key="crypto_pkey_no_params" note="">Missing parameters for key generation</entry>
    <entry key="crypto_pkey_no_public_key" note="">Missing public key</entry>
    <entry key="crypto_pkey_no_private_key" note="">Missing private key</entry>
    <entry key="crypto_pkey_no_peer" note="">Missing peer key</entry>
    <entry key="crypto_pkey_no_data" note="">Missing data for encryption, decryption or signing operation</entry>
    <entry key="crypto_rsa_weak_padding" note="">Weak padding for RSA algorithm</entry>
    <entry key="crypto_rsa_bad_padding" note="">Incompatible padding for RSA algorithm operation</entry>
    <entry key="crypto_rsa_no_padding" note="">Missing padding for RSA algorithm</entry>
    <entry key="crypto_rsa_no_blinding" note="">Missing blinding for RSA algorithm</entry>
    <entry key="crypto_ssl_weak_protocol" note="">Nonsecure SSL/TLS protocol</entry>
    <entry key="crypto_ssl_weak_authentication" note="">Anonymous authentication do not ensure secrecy and must be avoided</entry>
    <entry key="crypto_ssl_weak_cipher_suite" note="">Some of the proposed ciphers are too weak</entry>
    <entry key="crypto_ssl_weak_renegociation" note="">Legacy renegotiation is broken and must not be used anymore</entry>
    <entry key="crypto_ssl_no_role" note="">TLS/SSL connection method not set</entry>
    <entry key="crypto_ssl_bad_role" note="">TLS/SSL connection method set incorrectly</entry>
    <entry key="crypto_ssl_no_socket" note="">No socket have been set for communication</entry>
    <entry key="crypto_ssl_no_private_key" note="">Missing private key for X.509 certificate</entry>
    <entry key="crypto_ssl_no_certificate" note="">Missing X.509 certificate</entry>
    <entry key="crypto_ssl_hostname_not_checked" note="">Server certificate common name not checked</entry>
    <entry key="crypto_ssl_no_cert_check" note="">Private key and certificate have not been checked and may be mismatching</entry>
    <entry key="crypto_ssl_no_ca" note="">Missing certification authority list</entry>
    <entry key="crypto_ssl_cert_not_checked" note="">X.509 peer certificate not checked</entry>

    <!-- Tainted data defects - Short description -->
    <entry key="tainted_data" note="">Tainted data</entry>
    <entry key="tainted_hostid" note="">Host change using externally controlled elements</entry>
    <entry key="tainted_env_variable" note="">Use of externally controlled environment variable</entry>
    <entry key="tainted_string_format" note="">Tainted string format</entry>
    <entry key="tainted_sign_change" note="">Tainted sign change conversion</entry>
    <entry key="tainted_loop_boundary" note="">Loop bounded with tainted value</entry>
    <entry key="tainted_memory_alloc_size" note="">Memory allocation with tainted size</entry>
    <entry key="tainted_path_lib" note="">Library loaded from externally controlled path</entry>
    <entry key="tainted_path_cmd" note="">Command executed from externally controlled path</entry>
    <entry key="tainted_external_cmd" note="">Execution of externally controlled command</entry>
    <entry key="tainted_vla_size" note="">Tainted size of variable length array</entry>
    <entry key="tainted_int_mod" note="">Tainted modulo operand</entry>
    <entry key="tainted_int_division" note="">Tainted division operand</entry>
    <entry key="tainted_array_index" note="">Array access with tainted index</entry>
    <entry key="tainted_ptr_offset" note="">Pointer dereference with tainted offset</entry>
    <entry key="tainted_ptr" note="">Use of tainted pointer</entry>
    <entry key="tainted_string" note="">Tainted NULL or non-null-terminated string</entry>
    <entry key="tainted_source_use_custom" note="">Tainted source used with sensitive function</entry>

    <!-- Good practice defects - Short description -->
    <entry key="good_practice" note="">Good practice</entry>
    <entry key="unused_parameter" note="">Unused parameter</entry>
    <entry key="pass_by_value" note="">Large pass-by-value argument</entry>
    <entry key="good_practice_defects" note="">Good practice</entry>
    <entry key="hard_coded_buffer_size" note="">Hard-coded buffer size</entry>
    <entry key="hard_coded_loop_boundary" note="">Hard-coded loop boundary</entry>
    <entry key="hard_coded_mem_size" note="">Hard-coded object size used to manipulate memory</entry>
    <entry key="setjmp_longjmp_use" note="">Use of setjmp/longjmp</entry>
    <entry key="more_than_one_statement" note="">Line with more than one statement</entry>
    <entry key="delete_of_void_ptr" note="">Delete of void pointer</entry>
    <entry key="bitwise_arith_mix" note="">Bitwise and arithmetic operations on the same data</entry>
    <entry key="missing_freed_ptr_reset" note="">Missing reset of freed pointer</entry>
    <entry key="missing_switch_break" note="">Missing break of switch case</entry>
    <entry key="flexible_array_member_incorrect_size" note="">Incorrect syntax of flexible array member size</entry>
    <entry key="most_vexing_parse" note="">Ambiguous declaration syntax</entry>
    <entry key="cv_qualified_reference_type" note="">C++ reference type qualified with const or volatile</entry>
    <entry key="write_reference_to_const_type" note="">C++ reference to const-qualified type with subsequent modification</entry>
    <entry key="missing_overload_new_delete_pair" note="">Missing overload of allocation or deallocation function</entry>
    <entry key="multi_stmt_macro" note="">Macro with multiple statements</entry>
    <entry key="semicolon_terminated_macro" note="">Macro terminated with a semicolon</entry>
    <entry key="semicolon_ctrl_stmt_same_line" note="">Semicolon on the same line as an if, for or while statement</entry>
    <entry key="incorrect_indentation" note="">Incorrectly indented statement</entry>
    <entry key="sizeof_useless_op" note="">Redundant expression in sizeof operand</entry>
    <entry key="inappropriate_type_in_switch" note="">Possibly inappropriate data type for switch expression</entry>
    <entry key="forbidden_func" note="">Use of a forbidden function</entry>
    <entry key="forbidden_keyword" note="">Use of a forbidden C/C++ keyword</entry>
    <entry key="forbidden_macro" note="">Use of a forbidden macro</entry>
    <entry key="unmodified_var_not_const" note="">Unmodified variable not const-qualified</entry>
    <entry key="file_does_not_compile" note="">File does not compile</entry>
    <entry key="catch_for_generic_exception" note="">Declaration of catch for generic exception</entry>
    <entry key="throw_for_generic_exception" note="">Declaration of throw for generic exception</entry>
    <entry key="method_not_const" note="">Method not const</entry>
    <entry key="public_static_field_not_const" note="">Public static field not const</entry>
    <entry key="critical_data_member_declared_public" note="">Critical data member is not private</entry>
    <entry key="sql_injection" note="">SQL injection</entry>
    <entry key="invalid_notation_on_e_constant" note="">Invalid scientific notation format</entry>
    <entry key="useless_include" note="">Useless include</entry>
    <entry key="local_ref_to_unnamed_temporary" note="" translate="false">Reference to un-named temporary.</entry>
    <entry key="ldap_injection" note="">LDAP injection</entry>
    <entry key="plain_text_password_in_filesystem" note="">Plain text password stored in file system.</entry>
    <entry key="unused_variable" note="">Unused variable</entry>
    <entry key="useless_capture" note="">Useless capture</entry>
    <entry key="resource_injection" note="">Resource injection</entry>

    <!-- Good practice defects - Default long description -->
    <entry key="pass_by_value_default_message" note="" translate="false">The size of the passed-by-value parameter object is too large.</entry>
    <entry key="missing_switch_break_default_message" note="" translate="false">Missing break of switch case.</entry>
    <entry key="more_than_one_statement_default_message" note="" translate="false">Line with more than one statement.</entry>
    <entry key="hard_coded_buffer_size_default_message" note="" translate="false">Hard-coded buffer size.</entry>
    <entry key="hard_coded_loop_boundary_default_message" note="" translate="false">Hard-coded loop boundary.</entry>
    <entry key="unused_parameter_default_message" note="" translate="false">Unused parameter.</entry>
    <entry key="delete_of_void_ptr_default_message" note="" translate="false">Deleting void pointer may result in undefined behavior.</entry>
    <entry key="bitwise_arith_mix_default_message" note="" translate="false">Bitwise and arithmetic operations on the same data.</entry>
    <entry key="missing_freed_ptr_reset_default_message" note="" translate="false">Missing reset of freed pointer.</entry>
    <entry key="inappropriate_type_in_switch_default_message" note="" translate="false">The switch expression has a data type other than char, short, int or enum.</entry>
    <entry key="method_not_const_default_message" note="" translate="false">This non-const method does not modify any state, and should be marked const.</entry>
    <entry key="invalid_notation_on_e_constant_default_message" note="" translate="false">Constant format does not match expected format of one non-zero digit to the left of the decimal.</entry>

    <entry key="useless_include_default_message" note="" translate="false">There shall be no unused include directives.</entry>
    <entry key="local_ref_to_unnamed_temporary_default_message" note="" translate="false">An unnamed temporary object that is returned by value is captured in a reference, perhaps unintentionally.</entry>
    <entry key="unused_variable_default_message" note="">Variable is not read in this scope.</entry>
    <entry key="useless_capture_default_message" note="">Captured variable is unused in the lambda.</entry>

    <!-- Performance defects - Short description -->
    <entry key="performance" note="">Performance</entry>
    <entry key="std_endl_use" note="">std::endl may cause an unnecessary flush</entry>
    <entry key="empty_destructor_defined" note="">Empty destructors may cause unnecessary data copies</entry>
    <entry key="const_return_value" note="">Const return values may cause unnecessary data copies</entry>
    <entry key="const_parameter_value" note="">Const parameter values may cause unnecessary data copies</entry>
    <entry key="inefficient_basic_string_length" note="">Inefficient string length computation</entry>
    <entry key="move_operation_may_throw" note="">A move operation may throw</entry>
    <entry key="expensive_pass_by_value" note="">Expensive pass by value</entry>
    <entry key="expensive_return_by_value" note="">Expensive return by value</entry>
    <entry key="expensive_range_based_for_loop_iteration" note="">Expensive copy in a range-based for loop iteration</entry>
    <entry key="expensive_std_move_const_object" note="">Const std::move input may cause a more expensive object copy</entry>
    <entry key="std_move_unmovable_type" note="">std::move called on an unmovable type</entry>
    <entry key="missing_constexpr" note="">Missing constexpr specifier</entry>
    <entry key="expensive_constant_std_string" note="">Expensive construction of std::string or std::regex from constant string</entry>
    <entry key="expensive_c_str_std_string_operation" note="">Unnecessary use of std::string::c_str() or equivalent string methods</entry>
    <entry key="unnecessary_empty_string_literal" note="">Expensive use of std::string with empty string literal</entry>
    <entry key="expensive_use_of_std_string_methods" note="">Expensive use of std::string method instead of more efficient overload</entry>
    <entry key="expensive_std_string_append" note="">Expensive use of non-member std::string operator+() instead of a simple append</entry>
    <entry key="expensive_std_string_resize" note="">Expensive use of substr() to shorten a std::string</entry>
    <entry key="const_rvalue_reference_parameter" note="">Const rvalue reference parameter may cause unnecessary data copies</entry>
    <entry key="expensive_logical_operation" note="">Expensive logical operation</entry>
    <entry key="expensive_local_variable" note="">Expensive local variable copy</entry>
    <entry key="expensive_container_count" note="">Expensive use of container's count method</entry>
    <entry key="expensive_container_insertion" note="">Expensive use of container's insertion method</entry>
    <entry key="expensive_container_emptiness_check" note="">Expensive use of container's size method</entry>
    <entry key="expensive_map_insert_or_assign" note="">Expensive use of map's bracket operator to insert or assign a value</entry>
    <entry key="expensive_use_of_std_algorithm" note="">Expensive use of a standard algorithm when a more efficient method exists</entry>
    <entry key="expensive_use_of_c_string_api" note="">Expensive use of string functions from the C standard library</entry>
    <entry key="missing_make_shared" note="">Use of new or make_unique instead of more efficient make_shared</entry>
    <entry key="unnecessary_struct_padding" note="">Unnecessary padding</entry>
    <entry key="inefficient_sprintf" note="">Inefficient use of sprintf</entry>
    <entry key="expensive_post_increment" note="">Expensive post-increment operation</entry>
    <entry key="expensive_dynamic_cast" note="">Expensive dynamic_cast</entry>
    <entry key="move_operation_uses_copy" note="">Move operation uses copy</entry>
    <entry key="expensive_return_const_object" note="">Expensive return of a const object</entry>
    <entry key="prefer_range_based_for_loops" note="">Inefficient use of for loop</entry>
    <entry key="expensive_alloc_in_loop" note="">Expensive allocation in loop</entry>
    <entry key="expensive_return_std_move" note="">Expensive return caused by unnecessary std::move</entry>
    <entry key="missing_container_reserve" note="">Missing call to container's reserve method</entry>
    <entry key="unnecessary_construction_before_assignment" note="">Unnecessary construction before reassignment</entry>
    <entry key="unnecessary_impl_of_special_member_function" note="">Unnecessary implementation of a special member function</entry>
    <entry key="expensive_any_cast" note="">Expensive use of std::any_cast</entry>
    <entry key="expensive_member_initialization" note="">Expensive member initialization</entry>
    <entry key="expensive_pass_by_reference" note="">Unnecessary reference to parameter</entry>
    <entry key="expensive_unused_object" note="">Expensive unused object</entry>
    <entry key="expensive_std_function" note="">Expensive std::function type definition</entry>
    <entry key="expensive_use_of_map_instead_of_set" note="">Expensive use of map instead of set</entry>
    <entry key="expensive_copy_on_last_use" note="">Expensive last use of variable</entry>

    <!-- Performance defects - Default long description -->
    <entry key="std_endl_use_default_message" note="" translate="false">Calling std::endl implicitly flushes the IOStream.\nThis flush may be expensive, and may be unintended.</entry>
    <entry key="empty_destructor_defined_default_message" note="" translate="false">User declared destructors prevent auto-generated move constructors and move assignment operators.\nThis absence may cause a more expensive copy.</entry>
    <entry key="const_return_value_default_message" note="" translate="false">Const return values cannot be moved by the calling function.\nThis restriction may cause a more expensive copy.</entry>
    <entry key="const_parameter_value_default_message" note="" translate="false">Const parameter values cannot be moved by the called function.\nThis restriction may cause a more expensive copy.</entry>
    <entry key="inefficient_basic_string_length_default_message" note="" translate="false">std::string::length() is more efficient than passing c_str to other string length functions.</entry>
    <entry key="move_operation_may_throw_default_message" note="" translate="false">Throwing move operations are unexpected, and STL containers may use the copy operations instead.</entry>
    <entry key="expensive_pass_by_value_default_message" note="" translate="false">This input parameter can be passed by const pointer/reference.\nThis change avoids a copy for each call.</entry>
    <entry key="expensive_return_by_value_default_message" note="" translate="false">This output can be returned by pointer/reference.\nThis change avoids a copy for each call.</entry>
    <entry key="expensive_range_based_for_loop_iteration_default_message" note="" translate="false">This range-based for loop variable can be a const reference.\nThis change avoids a copy for each iteration.</entry>
    <entry key="expensive_std_move_const_object_default_message" note="" translate="false">Const std::move input cannot be moved.\nThis restriction may cause a more expensive copy.</entry>
    <entry key="std_move_unmovable_type_default_message" note="" translate="false">Both the move constructor and move assignment operator are not declared for this type.</entry>
    <entry key="missing_constexpr_default_message" note="">Constexpr specifier can be used for compile-time evaluation.\n Compile-time evaluation saves on unnecessary overheads at run time.</entry>
    <entry key="expensive_constant_std_string_default_message" note="" translate="false">A std::string is reconstructed from constant data on every block execution.\nThis can be expensive.</entry>
    <entry key="expensive_c_str_std_string_operation_default_message" note="" translate="false">The output of std::string::c_str(), std::string::data(), std::string::operator[](), or std::string::at() is passed to a function when directly passing the string would have been more efficient.</entry>
    <entry key="unnecessary_empty_string_literal_default_message" note="" translate="false">A std::string is constructed from, assigned from, or compared to an empty string literal.\nThere are more efficient alternatives.</entry>
    <entry key="expensive_use_of_std_string_methods_default_message" note="" translate="false">A std::string method is called with a double-quoted string literal parameter.\n A single-quoted character can be used instead.</entry>
    <entry key="expensive_std_string_append_default_message" note="" translate="false">The non-member std::string operator+() function is called when the append (or +=) method would have been more efficient.</entry>
    <entry key="expensive_std_string_resize_default_message" note="" translate="false">std::string::substr() is called when calling std::string::resize() is more efficient.</entry>
    <entry key="const_rvalue_reference_parameter_default_message" note="" translate="false">Const rvalue reference parameter cannot be moved.\nThis restriction may cause a more expensive copy.</entry>
    <entry key="expensive_logical_operation_default_message" note="" translate="false">This logical operation may be ordered sub-optimally.\nIf the right operand can be safely evaluated before the left operand, reorder operands to improve performance.</entry>
    <entry key="expensive_local_variable_default_message" note="" translate="false">This unmodified local variable can be a const reference.\nThis change avoids a more expensive object copy.</entry>
    <entry key="expensive_container_count_default_message" note="" translate="false">Do not use count() method to check if element exists in container. Use the less expensive find() method instead.</entry>
    <entry key="expensive_container_emptiness_check_default_message" note="" translate="false">Do not use the container's size() method to check for emptiness. Use its empty() method instead.</entry>
    <entry key="expensive_map_insert_or_assign_default_message" note="" translate="false">The [] operator is less efficient than the map's insert_or_assign() method.</entry>
    <entry key="expensive_use_of_std_algorithm_default_message" note="" translate="false">A standard algorithm was called with iterators from a container that has a more efficient method.</entry>
    <entry key="missing_make_shared_default_message" note="" translate="false">Using 'new' to initialize a shared_ptr is more expensive than using make_shared.</entry>
    <entry key="unnecessary_struct_padding_default_message" note="">Class or struct contains unnecessary padding. Members could be re-ordered to save memory.</entry>
    <entry key="inefficient_sprintf_default_message" note="">This use of sprintf could be replaced with strcpy which is more efficient.</entry>
    <entry key="expensive_post_increment_default_message" note="">This post-increment operation could be replaced by a faster pre-increment operation.</entry>
    <entry key="move_operation_uses_copy_default_message" note="">This member or base-class is copied as part of another class's move operation.\nMoving this object transfers resources correctly and is more efficient.</entry>
    <entry key="prefer_range_based_for_loops_default_message" note="">Consider using a range-based for loop, which is faster, clearer, and less error prone.</entry>
    <entry key="missing_container_reserve_default_message" note="">Preallocating memory by calling the container's reserve method before inserting elements improves performance.</entry>
    <entry key="expensive_any_cast_default_message" note="">Replace by-value cast (std::any_cast&lt;T&gt;) with by-reference cast (std::any_cast&lt;const T&amp;&gt;), which is more efficient</entry>
    <entry key="expensive_unused_object_default_message" note="">Removing unused objects that might be expensive to construct can make your code more efficient.</entry>
    <entry key="expensive_std_function_default_message" note="">One or more parameters of this std::function object uses pass-by-value semantics for objects that are expensive to copy.</entry>
    <entry key="expensive_use_of_map_instead_of_set_default_message" note="">The key is a member of the value that's being inserted. Using a std::set instead of std::map might be more efficient.</entry>
    <entry key="expensive_pass_by_reference_default_message" note="">Input parameter is cheap to copy and can be passed by value.</entry>
    <entry key="expensive_copy_on_last_use_default_message" note="">Moving variable on last use is more efficient than copying.</entry>

    <!-- Custom Checks -->
    <entry key="custom_rules" note="">User defined custom Rules</entry>
    <entry key="custom_lib" note="">Custom lib</entry>
    <entry key="custom_rule_01" note="">Custom rule 1</entry>
    <entry key="custom_rule_02" note="">Custom rule 2</entry>
    <entry key="custom_rule_03" note="">Custom rule 3</entry>
    <entry key="custom_rule_04" note="">Custom rule 4</entry>
    <entry key="custom_rule_05" note="">Custom rule 5</entry>
    <entry key="custom_rule_06" note="">Custom rule 6</entry>
    <entry key="custom_rule_07" note="">Custom rule 7</entry>
    <entry key="custom_rule_08" note="">Custom rule 8</entry>
    <entry key="custom_rule_09" note="">Custom rule 9</entry>
    <entry key="custom_rule_10" note="">Custom rule 10</entry>
    <entry key="custom_rule_11" note="">Custom rule 11</entry>
    <entry key="custom_rule_12" note="">Custom rule 12</entry>
    <entry key="custom_rule_13" note="">Custom rule 13</entry>
    <entry key="custom_rule_14" note="">Custom rule 14</entry>
    <entry key="custom_rule_15" note="">Custom rule 15</entry>
    <entry key="custom_rule_16" note="">Custom rule 16</entry>
    <entry key="custom_rule_17" note="">Custom rule 17</entry>
    <entry key="custom_rule_18" note="">Custom rule 18</entry>
    <entry key="custom_rule_19" note="">Custom rule 19</entry>
    <entry key="custom_rule_20" note="">Custom rule 20</entry>
    <entry key="custom_rule_21" note="">Custom rule 21</entry>
    <entry key="custom_rule_22" note="">Custom rule 22</entry>
    <entry key="custom_rule_23" note="">Custom rule 23</entry>
    <entry key="custom_rule_24" note="">Custom rule 24</entry>
    <entry key="custom_rule_25" note="">Custom rule 25</entry>
    <entry key="custom_rule_26" note="">Custom rule 26</entry>
    <entry key="custom_rule_27" note="">Custom rule 27</entry>
    <entry key="custom_rule_28" note="">Custom rule 28</entry>
    <entry key="custom_rule_29" note="">Custom rule 29</entry>
    <entry key="custom_rule_30" note="">Custom rule 30</entry>

    <!-- *************** Code Prover *************** -->
    <entry key="rte" note="">Run-time error</entry>

    <!-- Numerical Checks - Short description -->
    <entry key="numerical_checks" note="">Numerical</entry>
    <entry key="pow" note="">Positive power value</entry>
    <entry key="ovfl" note="">Overflow</entry>
    <entry key="sovfl" note="">Scalar overflow</entry>
    <entry key="fovfl" note="">Float overflow</entry>
    <entry key="zdv" note="">Division by zero</entry>
    <entry key="shf" note="">Invalid shift operations</entry>
    <entry key="uovfl" note="">Overflow/underflow</entry>
    <entry key="unfl" note="">Underflow</entry>

	<!-- Static Memory Checks - Short description -->
    <entry key="static_memory_checks" note="">Static memory</entry>
    <entry key="obai" note="">Out of bounds array index</entry>
    <entry key="idp" note="">Illegally dereferenced pointer</entry>
    <entry key="abs_addr" note="">Absolute address usage</entry>

	<!-- Data Flow Checks - Short description -->
    <entry key="data_flow_checks" note="">Data flow</entry>
    <entry key="nip" note="">Non-initialized pointer</entry>
    <entry key="niv" note="">Non-initialized variable</entry>
    <entry key="nivl" note="">Non-initialized local variable</entry>
    <entry key="irv" note="">Return value not initialized</entry>
    <entry key="fnc" note="">Function not called</entry>
    <entry key="fnr" note="">Function not reachable</entry>
    <entry key="global_set_at_initialization" note="">Global variable not assigned a value in initialization code</entry>

    <!-- Control Flow Checks - Short description  -->
    <entry key="control_flow_checks" note="">Control flow</entry>
    <entry key="ntc" note="">Non-terminating call</entry>
    <entry key="ntl" note="">Non-terminating loop</entry>
    <entry key="unr" note="">Unreachable code</entry>
    <entry key="k_ntc" note="">Known non-terminating call</entry>

    <!-- C++ - Short description   -->
    <entry key="cpp_checks" translate="false" note="TranslateFalseBatch; ">C++</entry>
    <entry key="exc" note="">Uncaught exception</entry>
    <entry key="excp" note="">Arithmetic exceptions</entry>
    <entry key="nnt" note="">Null this-pointer calling method</entry>
    <entry key="cpp" note="">Invalid C++ specific operations</entry>
    <entry key="oop" note="">Incorrect object oriented programming</entry>
    <entry key="frv" note="">Function not returning value</entry>
    <entry key="inf" note="">Informative checks</entry>

    <!-- Other - Short description -->
    <entry key="other_checks" note="">Other</entry>
    <entry key="asrt" note="">User assertion</entry>
    <entry key="std_lib" note="">Invalid use of standard library routine</entry>
    <entry key="autosar_use" note="">Invalid use of AUTOSAR runtime environment function</entry>
    <entry key="autosar_impl" note="">Invalid result of AUTOSAR runnable implementation</entry>
    <entry key="autosar_noimpl" note="">AUTOSAR runnable not implemented</entry>
    <entry key="simulink_design_minmax" note="">Input/Output of model reference out of specified range</entry>
    <entry key="ipt" note="">Inspection point</entry>
    <entry key="cor" note="">Correctness condition</entry>
    <entry key="precondition" note="">Precondition</entry>
    <entry key="postcondition" note="">Postcondition</entry>
    <entry key="autosar_compliance" note="">Non-compliance with AUTOSAR specification</entry>
    <entry key="i2c_smbus_compliance" note="">Non-compliance with I2C SMBus specification</entry>
    <entry key="code_behavior_spec_compliance" note="">Non-compliance with code behavior specification</entry>
    <entry key="impact_specifications" note="">Impact Specification</entry>
    <entry key="expected_impact" note="">Expected impact</entry>
    <entry key="expected_no_impact" note="">Expected absence of impact</entry>

    <!-- *************** Global Variable Results *************** -->
    <!-- Global variable - Short description -->
    <entry key="global_variable" note="">Global Variable</entry>
    <entry key="shared_global_variable" note="">Shared</entry>
    <entry key="unshared_global_variable" note="">Not shared</entry>
    <entry key="global_shared_protected_variable" note="">Protected variable</entry>
    <entry key="global_shared_unprotected_variable" note="">Potentially unprotected variable</entry>
    <entry key="global_unshared_variable" note="">Used non-shared variable</entry>
    <entry key="global_unused_variable" note="">Unused variable</entry>

    <!-- *************** Specification Results *************** -->
    <!-- Impact analysis checks - Short description -->
    <entry key="spec_check" note="">Specification Check</entry>
    <entry key="spec_violated" note="">Specification violated</entry>
    <entry key="spec_potentially_violated" note="">Specification potentially violated</entry>
    <entry key="spec_proven" note="">Specification proven</entry>
    <entry key="spec_impact" note="">Impact analysis</entry>
    <entry key="may_impact_sink" note="">Potentially impacted sink</entry>
    <entry key="impact_free_sink" note="">Impact free sink</entry>
    <entry key="impact_free_source" note="">Impact free source</entry>
    <entry key="spec_impact_couple" note="">Impact couple</entry>
    <entry key="may_impact_couple" note="">Source/Sink couple with potential impact</entry>
    <entry key="impact_free_couple" note="">Source/Sink couple impact free</entry>
    <entry key="spec_potential_impact" note="">Potential impact</entry>
    <entry key="spec_impact_free" note="">Impact free</entry>

    <!-- *************** Code Coverage *************** -->
    <entry key="code_coverage_checks" note="">Code Coverage</entry>
    <entry key="function_cov" note="">Function Coverage</entry>
    <entry key="condition_cov" note="">Condition Coverage</entry>
    <entry key="decision_cov" note="">Decision Coverage</entry>
    <entry key="condition_mcdc" note="">Condition's Contribution to MC/DC</entry>
    <entry key="decision_mcdc" translate="false" note="TranslateFalseBatch; ">MC/DC</entry>
    <entry key="block_cov" note="">Block Coverage</entry>
    <entry key="stmt_cov" note="">Statement Coverage</entry>
    <entry key="function_exit_cov" note="">Function Exit Point Coverage</entry>

	 <!-- Code Metric Names key comes from metrics name) -->
    <!-- Keys should not be translated in 13b -->
    <entry key="project_metrics">Project Metrics</entry>
    <entry key="file_metrics">File Metrics</entry>
    <entry key="function_metrics">Function Metrics</entry>
    <entry key="name">Name</entry>
    <entry key="files">Number of Files</entry>
    <entry key="ada_files">Number of Files</entry>
    <entry key="includes">Number of Headers</entry>
    <entry key="ap_cg_cycle">Number of Recursions</entry>
    <entry key="ap_cg_direct_cycle">Number of Direct Recursions</entry>
    <entry key="total_lines">Number of Lines</entry>
    <entry key="lines_without_cmt">Number of Lines Without Comment</entry>
    <entry key="comf">Comment Density</entry>
    <entry key="comr">Comment Ratio</entry>
    <entry key="path">Number of Paths</entry>
    <entry key="goto">Number of Goto Statements</entry>
    <entry key="vg">Cyclomatic Complexity</entry>
    <entry key="calling">Number of Calling Functions</entry>
    <entry key="calls">Number of Called Functions</entry>
    <entry key="param">Number of Function Parameters</entry>
    <entry key="stmt">Number of Instructions</entry>
    <entry key="level">Number of Call Levels</entry>
    <entry key="return">Number of Return Statements</entry>
    <entry key="vocf">Language Scope</entry>
    <entry key="pshv">Number of Protected Shared Variables</entry>
    <entry key="unpshv">Number of Potentially Unprotected Shared Variables</entry>
    <entry key="fco">Estimated Function Coupling</entry>
    <entry key="fcomf">Function Comment Density</entry>
    <entry key="flin">Number of Lines Within Body</entry>
    <entry key="fxln">Number of Executable Lines</entry>
    <entry key="ncalls">Number of Call Occurrences</entry>
    <entry key="classes">Number of Classes</entry>
    <entry key="packages">Number of Packages</entry>
    <entry key="packwith">Number of Packages in With Statements</entry>
    <entry key="ada_lines_without_cmt">Number of Lines Without Comment</entry>
    <entry key="subpwith">Number of Subprograms in With Statements</entry>
    <entry key="local_vars_max">Higher Estimate of Size of Local Variables</entry>
    <entry key="local_vars_min">Lower Estimate of Size of Local Variables</entry>
    <entry key="local_vars">Number of Local Non-Static Variables</entry>
    <entry key="local_static_vars">Number of Local Static Variables</entry>
    <entry key="max_stack">Maximum Stack Usage</entry>
    <entry key="min_stack">Minimum Stack Usage</entry>
    <entry key="prog_max_stack">Program Maximum Stack Usage</entry>
    <entry key="prog_min_stack">Program Minimum Stack Usage</entry>
    <entry key="fsc">Function Stress Complexity</entry>

    <!-- Define default messages for Code Metrics -->
    <entry key="name_default_message">Name</entry>
    <entry key="files_default_message" translate="false">This metric shows the number of source files considered for analysis.</entry>
    <entry key="ada_files_default_message" translate="false">This metric shows the number of files.</entry>
    <entry key="includes_default_message" translate="false">This metric shows the number of header files considered for analysis.</entry>
    <entry key="ap_cg_cycle_default_message" translate="false">This metric shows the number of recursions, both direct and indirect.</entry>
    <entry key="ap_cg_direct_cycle_default_message" translate="false">This metric shows the number of instances of a function calling itself directly.</entry>
    <entry key="total_lines_default_message" translate="false">This metric shows the total number of lines in a file.</entry>
    <entry key="lines_without_cmt_default_message" translate="false">This metric shows the total number of lines in a file excluding comment-only lines and blank lines.</entry>
    <entry key="comf_default_message" translate="false">This metric shows the ratio of number of comments to number of statements, expressed as a percentage.</entry>
    <entry key="comr_default_message" translate="false">This metric shows the ratio of number of comment lines to number of code lines, expressed as a percentage.</entry>
    <entry key="path_default_message" translate="false">This metric shows the number of paths through a function.</entry>
    <entry key="goto_default_message" translate="false">This metric shows the number of goto statements in a function.</entry>
    <entry key="vg_default_message" translate="false">This metric shows the cyclomatic complexity of a function.</entry>
    <entry key="calling_default_message" translate="false">This metric shows the number of distinct callers of a function.</entry>
    <entry key="calls_default_message" translate="false">This metric shows the number of callees of a function.</entry>
    <entry key="param_default_message" translate="false">This metric shows the number of arguments of a function.</entry>
    <entry key="stmt_default_message" translate="false">This metric shows the number of instructions in a function body.</entry>
    <entry key="level_default_message" translate="false">This metric shows the maximum depth of nesting of control flow structures in a function.</entry>
    <entry key="return_default_message" translate="false">This metric measures the number of return statements in a function.</entry>
    <entry key="vocf_default_message" translate="false">This metric estimates the cost of maintaining or changing a function.</entry>
    <entry key="pshv_default_message" translate="false">This metric shows the number of shared variables protected from concurrent access.</entry>
    <entry key="unpshv_default_message" translate="false">This metric shows the number of shared variables not protected from concurrent access.</entry>
    <entry key="fco_default_message" translate="false">This metric is calculated as: Number of call occurrences - Number of function definitions + 1.</entry>
    <entry key="fcomf_default_message" translate="false">This metric shows the ratio of number of comments to number of statements per function, expressed as a percentage.</entry>
    <entry key="flin_default_message" translate="false">This metric shows the number of lines in a function body.</entry>
    <entry key="fxln_default_message" translate="false">This metric shows the number of executable lines in a function body.</entry>
    <entry key="ncalls_default_message" translate="false">This metric shows the number of calls in a function body.</entry>
    <entry key="classes_default_message" translate="false">This metric shows the number of classes.</entry>
    <entry key="packages_default_message" translate="false">This metric shows the number of packages.</entry>
    <entry key="packwith_default_message" translate="false">This metric shows the number of packages in with statements.</entry>
    <entry key="ada_lines_without_cmt_default_message" translate="false">This metric shows the number of lines without comment.</entry>
    <entry key="subpwith_default_message" translate="false">This metric shows the number of subprograms in with statements.</entry>
    <entry key="local_vars_max_default_message" translate="false">This metric shows the total size of all local variables in a function.</entry>
    <entry key="local_vars_min_default_message" translate="false">This metric shows the total size of local variables in a function taking nested scopes into account.</entry>
    <entry key="local_vars_default_message" translate="false">This metric shows the number of local non-static variables in a function.</entry>
    <entry key="local_static_vars_default_message" translate="false">This metric shows the total number of local static variables in a function.</entry>
    <entry key="max_stack_default_message" translate="false">This metric shows the total size of all local variables in a function plus the maximum stack usage from its callees (called functions).</entry>
    <entry key="min_stack_default_message" translate="false">This metric shows the total size of all local variables in a function plus the minimum stack usage from its callees (called functions). This metric takes nested scopes into account when determining local variable size.</entry>
    <entry key="prog_max_stack_default_message" translate="false">This metric shows the maximum stack usage in the analyzed program.</entry>
    <entry key="prog_min_stack_default_message" translate="false">This metric shows the minimum stack usage in the analyzed program, taking nested scopes into account.</entry>
    <entry key="fsc_default_message">This metric shows the function stress complexity of a function.</entry>

    <!-- Classification message -->
    <entry key="classification_unbounded_input" translate="false">This check may be an issue related to unbounded input values\n</entry>
    <entry key="classification_bounded_input" translate="false">This check may be an issue related to bounded input values\n</entry>
    <entry key="classification_path_related" translate="false">This check may be a path-related issue, which is not dependent on input values\n</entry>
    <entry key="classification_safe_input_values" translate="false">The function's known input values will not cause a defect.</entry>
    <entry key="classification_unreachable" translate="false">This defect is unreachable given the function's known input values.</entry>
    <entry key="purple_box" translate="false">This is bad.</entry>

  </message>

</rsccat>
