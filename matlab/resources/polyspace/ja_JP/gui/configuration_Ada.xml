<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright 2025 The MathWorks, Inc.-->

<rsccat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" locale="ja_JP" product="polyspace" xsi:noNamespaceSchemaLocation="../../resources/schema/msgcat.xsd">
  <message>
    <entry key="MachineConfiguration_node">マシン構成</entry>
    <entry key="MachineConfiguration_title">マシン構成</entry>
    <entry key="host_machine_configuation_section">ホスト マシン構成</entry>
    <entry key="extra_settings_section">追加設定</entry>
    <entry key="_server">Polyspace Server に送信</entry>
    <entry key="_add_to_results_repository">結果リポジトリに追加</entry>
    <entry key="_server_help">検証を特定または参照先の Polyspace Server に送信します。</entry>
    <entry key="_add_to_results_repository_help">Polyspace の結果をリポジトリに保管し、コード メトリクスと結果の Web ベースのレポート作成を可能にします。</entry>
    <entry key="language_section">ターゲット言語</entry>
    <entry key="_lang">ソース コードの言語</entry>
    <entry key="TargetCompiler_node">ターゲットおよびコンパイラ</entry>
    <entry key="TargetCompiler_title">ターゲットおよびコンパイラ</entry>
    <entry key="target_environment_section">ターゲット環境</entry>
    <entry key="compiler_behavior_section">コンパイラの動作</entry>
    <entry key="_OS_target">ターゲット オペレーティング システム</entry>
    <entry key="_target">ターゲット プロセッサ タイプ</entry>
    <entry key="_extensions_for_spec_files">ファイル拡張子</entry>
    <entry key="_base_type_directly_visible">比較演算子のあいまいさを排除</entry>
    <entry key="_storage_unit">定数 Storage_Unit の値</entry>
    <entry key="_OS_target_help">ターゲット オペレーティング システムを指定してください。Polyspace では、gnat インクルード ファイルに対する Ada 標準ライブラリのみが提供されます。&lt;BR&gt;その他のオペレーティング システムについては、対応するインクルード ファイル (提供されません) を使用してプロジェクトの検証を行ってください。</entry>
    <entry key="_lang_help">プロジェクトのソース コード言語として、Ada83 ソース コードの場合は Ada83、Ada95 ソース コードの場合は Ada95 のいずれかを指定してください。</entry>
    <entry key="_target_help">ターゲット マシンのプロセッサ タイプを選択してください。</entry>
    <entry key="_extensions_for_spec_files_help">インクルードしたパッケージ仕様ファイルのファイル拡張子を指定してください。</entry>
    <entry key="_base_type_directly_visible_help">比較および等号演算子 (=、/=、&lt;=、=&gt;、&lt;、&gt;) のあいまいさを排除する場合に選択します。&lt;BR&gt;Ada リファレンス マニュアルの標準では、比較演算子と等号演算子の可視性があいまいです。&lt;BR&gt;このオプションを設定すると、コードを適正化して比較演算子と等号演算子の可視性に関するコンパイル エラーを回避できます。&lt;BR&gt;例:&lt;BR&gt;&lt;li&gt;あいまいな式 ("&lt;=" が解決不可)&lt;BR&gt;&lt;li&gt;./exemple.ada:2 で定義されている型 "X" に対する演算子が直接的に可視ではない: use 句を使うことで演算が適正化される</entry>
    <entry key="_storage_unit_help">SYSTEM パッケージで定義される定数 SYSTEM.Storage_Unit の値を設定してください。このオプションを設定すると、SYSTEM パッケージで検出される値は無視されます。&lt;BR&gt;&lt;BR&gt;既定値: &lt;ul&gt;&lt;li&gt;sparc、m68k、i386 および powerpc: 8&lt;li&gt;1750a: 16&lt;BR&gt;&lt;/ul&gt;例&lt;BR&gt;-- レコード タイプの定義&lt;BR&gt;タイプ REC はレコード&lt;BR&gt; A : integer;&lt;BR&gt; B : boolean;&lt;BR&gt; REC;&lt;BR&gt; A : integer;&lt;BR&gt; B : boolean;&lt;BR&gt; REC;&lt;BR&gt; -- このレコードの表現句&lt;BR&gt;REC はレコードを使用&lt;BR&gt; A at 0 range 0 ..31;&lt;BR&gt; B at 1 range 0 ..31;&lt;BR&gt; end record;&lt;BR&gt; &lt;BR&gt;sparc がターゲット プロセッサ タイプの場合、SYSTEM.Storage_Unit の値は 8 です。したがって、この例では 32 ビットのメモリ単位が必要なため、''A が B とオーバーラップ'' というエラーが表示されます。&lt;BR&gt;このエラー メッセージを解決するには、ストレージ単位のサイズを 32 (-storage-unit 32) に設定します。</entry>
    <entry key="Macros_node">マクロ</entry>
    <entry key="Macros_title">プリプロセッサ マクロ</entry>
    <entry key="_D">プリプロセッサ定義</entry>
    <entry key="_D_column_1">マクロ</entry>
    <entry key="_U">無効なプリプロセッサ定義</entry>
    <entry key="_U_column_1">マクロ</entry>
    <entry key="_D_help">前処理シンボルを指定します</entry>
    <entry key="_U_help">無効にするプリプロセッサ定義を指定します</entry>
    <entry key="EnvironmentSettings_node">環境設定</entry>
    <entry key="EnvironmentSettings_title">環境設定</entry>
    <entry key="_pre_analysis_command">コード検証の開始前に適用するコマンド/スクリプト</entry>
    <entry key="_I">インクルード フォルダー</entry>
    <entry key="_I_column_1">フォルダー</entry>
    <entry key="_I_help">インクルード フォルダー</entry>
    <entry key="_pre_analysis_command_help">コンパイル前にコマンドまたはファイルを実行する場合、このオプションを指定します。コマンドが既にパス内にある場合を除き、そのコマンドへの絶対パスを指定しなければなりません。&lt;BR&gt;コード検証では、ソースまたはヘッダーごとにコマンドまたはファイルが 1 回実行されます。&lt;BR&gt;コマンドは標準入力から読み取りを行い、変更されたファイルを標準出力にエコーする必要があります。&lt;BR&gt; &lt;B&gt; メモ: &lt;/B&gt;元のファイルはこのプロセスでは変更されません。</entry>
    <entry key="VerificationMode_node">検証モード</entry>
    <entry key="VerificationMode_title">検証モード</entry>
    <entry key="__main">アプリケーション全体の検証</entry>
    <entry key="_main">メイン エントリ ポイント</entry>
    <entry key="__multitasking">マルチタスキング</entry>
    <entry key="_entry_points">エントリ ポイント</entry>
    <entry key="_entry_points_column_1">タスク</entry>
    <entry key="_critical_section_begin">クリティカル セクション詳細</entry>
    <entry key="_critical_section_end">クリティカル セクション詳細</entry>
    <entry key="_critical_section_begin_column_1">開始手続き</entry>
    <entry key="_critical_section_begin_column_2">終了手続き</entry>
    <entry key="_temporal_exclusions_file">時間的に排他なタスク</entry>
    <entry key="_temporal_exclusions_file_column_1">タスク</entry>
    <entry key="_main_generator">モジュールの検証</entry>
    <entry key="_unit_by_unit">ファイルを個別に検証</entry>
    <entry key="_unit_by_unit_common_source">共通のソース ファイル</entry>
    <entry key="_unit_by_unit_common_source_column_1">ファイル</entry>
    <entry key="__main_help">所定のサブプログラム 'main' を使用してアプリケーション全体を検証します。</entry>
    <entry key="_main_help">プロジェクトの main 手続きを入力</entry>
    <entry key="__multitasking_help">マルチタスキング コードの検証</entry>
    <entry key="_entry_points_help">解析する暗黙的なタスクのリストを指定します。&lt;BR&gt;このオプションは、タスクのエントリ ポイントを指定できるため重要です。これらのエントリ ポイントではパラメーターを使わないでください。&lt;BR&gt;タスクのエントリ ポイントがパラメーターを伴う関数の場合は、これらの関数をパラメーターのない関数にカプセル化し、パラメーターはグローバル変数によって渡すことができます。</entry>
    <entry key="_critical_section_begin_help">クリティカル セクションの開始と終了の手続きを指定します。これらのクリティカル セクションは、共有リソースの保護または&lt;BR&gt;割り込みの有効化/無効化のモデル化に使用します。バイナリ セマフォの動作をモデル化するには、クリティカル セクションの開始と終了の両方に次の構文を使用します:　&lt;BR&gt;'package_name#the_semaphore_index'。</entry>
    <entry key="_temporal_exclusions_file_help">同時に実行されることのない一連のタスクを指定します。</entry>
    <entry key="_main_generator_help">モジュールを検証する 'main' 関数を自動生成します。</entry>
    <entry key="_unit_by_unit_help">プロジェクトのソース ファイルごとに個別の検証ジョブを作成します。&lt;br&gt;各ファイルはコンパイルされてから、個別に検証されます。</entry>
    <entry key="_unit_by_unit_common_source_help">各ファイル検証とともに含めるファイルのリストを指定します。&lt;br&gt;このリストに含まれていない関数はスタブされます。</entry>
    <entry key="InputsStubbing_node">入力およびスタブ</entry>
    <entry key="InputsStubbing_title">入力およびスタブ</entry>
    <entry key="Inputs_section">入力</entry>
    <entry key="Stubbing_section">スタブ</entry>
    <entry key="_data_range_specifications">制約の設定</entry>
    <entry key="__init_uninitialized_global_variables">初期化されていないグローバル変数の初期化</entry>
    <entry key="_data_range_specifications_help">グローバル変数、スタブされた関数により返される値、スタブされた手続きの出力または入出力の各パラメーターの制約を指定するファイルを選択します。&lt;br&gt;このファイルでは、main ジェネレーターで呼び出されるユーザー定義サブプログラムの引数の初期制約も設定できます。&lt;br&gt; &lt;br&gt;&lt;B&gt;形式&lt;/B&gt;: &lt;I&gt;symbol val_min val_max [reinit|init|permanent]&lt;/I&gt; の場合、&lt;br&gt;- &lt;I&gt;symbol&lt;/I&gt; は変数名、値を返す関数の名前またはサブプログラムのパラメーター名、&lt;br&gt;- &lt;I&gt;val_min&lt;/I&gt; および &lt;I&gt;val_max&lt;/I&gt; は最小値および最大値、&lt;br&gt;- &lt;I&gt;reinit&lt;/I&gt; は、main ジェネレーターで呼び出される各サブプログラムのエントリ ポイントまたはユーザー定義の main サブプログラムのエントリ ポイントにおける、グローバル変数の指定制約内への制限、&lt;br&gt;- &lt;I&gt;init&lt;/I&gt; は、main ジェネレーターによるサブプログラムの呼び出し時のサブプログラムの、入力パラメーターの指定制約に合わせた初期化、&lt;br&gt;- &lt;I&gt;permanent&lt;/I&gt; は、戻り値、出力または入出力の各パラメーターのスタブされたサブプログラムの指定の制約範囲内への制限が、そのサブプログラムの呼び出しごとに行われることを意味します。</entry>
    <entry key="__init_uninitialized_global_variables_help">初期化されていないグローバル変数の初期化: &lt;UL&gt;&lt;li&gt;乱数値の使用: 初期化されていないグローバル変数を乱数値に強制的に初期化します。&lt;li&gt;ゼロまたは乱数値の使用: 型にゼロが含まれている場合は初期化されていないグローバル変数をゼロに、それ以外の場合は乱数値に初期化します。&lt;/UL&gt;</entry>
    <entry key="VerificationAssumption_node">検証の前提条件</entry>
    <entry key="VerificationAssumption_title">検証の前提条件</entry>
    <entry key="_continue_with_all_niv">初期化されていない変数の後から続行する</entry>
    <entry key="_continue_with_in_out_niv">初期化されていない入出力パラメーターで続行する</entry>
    <entry key="_import_are_not_volatile">インポートを非 volatile として処理する</entry>
    <entry key="_export_are_not_volatile">エクスポートを非 volatile として処理する</entry>
    <entry key="_ignore_float_rounding_help">浮動小数点値による正確な計算を実行します。&lt;br&gt;これを選択しない場合、Polyspace は IEEE 754 規格に従って浮動小数点値を丸めます。</entry>
    <entry key="_continue_with_all_niv_help">初期化されていない変数をすべて検出します。&lt;br&gt;このオプションがオフの場合、検証は最初のレッド NIV の後で停止します。&lt;br&gt;&lt;B&gt;警告&lt;/B&gt;: 桁落ちを招く可能性があります。プロジェクトの最初の実行時にのみ設定してください。</entry>
    <entry key="_continue_with_in_out_niv_help">Ada 標準では、手続き (関数) の入出力パラメーターの初期化が必要です。&lt;br&gt;このオプションをオンにすると、このような変数は引き続きレッド NIV として検出されますが、後続のコードに到達できるようになるため、&lt;br&gt;このレッド エラーはコード検証に一切影響しなくなります。</entry>
    <entry key="_import_are_not_volatile_help">変数にプラグマ import(C|ASM|other, my_variable) がある場合、Polyspace ソフトウェアはその変数を volatile 変数であると見なします。&lt;br&gt;これらを通常の変数として扱う場合にこのオプションを使用します。</entry>
    <entry key="_export_are_not_volatile_help">変数にプラグマ export(C|ASM|other, my_variable) がある場合、Polyspace ソフトウェアはその変数を volatile 変数であると見なします。&lt;br&gt;これらを通常の変数として扱う場合にこのオプションを使用します。</entry>
    <entry key="Precision_node">精度</entry>
    <entry key="Precision_title">精度</entry>
    <entry key="GlobalSettings_section">グローバル設定</entry>
    <entry key="SpecificConstructsSettings_section">特定構成要素の設定</entry>
    <entry key="_O">精度レベル</entry>
    <entry key="_to">検証レベル</entry>
    <entry key="_timeout">検証時間の制限</entry>
    <entry key="_context_sensitivity">状況依存性</entry>
    <entry key="_context_sensitivity_column_1">手続き</entry>
    <entry key="_path_sensitivity_delta">手続き間解析の精度を高める</entry>
    <entry key="_modules_precision">特定の精度</entry>
    <entry key="_modules_precision_column_1">パッケージ</entry>
    <entry key="_modules_precision_column_2">精度</entry>
    <entry key="_array_expansion_size">グローバル配列変数の最大サイズ</entry>
    <entry key="_variables_to_expand">展開する変数</entry>
    <entry key="_variables_to_expand_column_1">変数</entry>
    <entry key="_variable_expansion_depth">構造体化された変数の展開制限</entry>
    <entry key="_O_help">検証の精度レベルを指定します。精度レベルが高くなると、検証時間がそれだけ長くなります。&lt;ul&gt;&lt;li&gt;レベル 0 - 静的間隔のコード検証。&lt;li&gt;レベル 1 - 検証に領域値の複雑な多面体モデルを使用します。&lt;li&gt;レベル 2 - より複雑なアルゴリズムを検証に使用して領域値を厳密にモデル化します (整数格子と複雑な多面体による混合アプローチ)。&lt;li&gt;レベル 3 - 長さが 1,000 行に満たないコードのみに適しています。こうしたコードでは選択性が高くなり、コード検証時間が非常に長くなる場合があります。たとえば、コード 1000 行につき 1 時間を要します。&lt;/ul&gt;コード検証をレベル 0 から開始してください。次に、レッド チェックとグレー チェックを修正します。その上で、精度を上げて検証を実行します。</entry>
    <entry key="_to_help">検証レベルを指定します。検証レベルを高くすると (選択性が上がり) 結果が向上しますが、検証時間も長くなります。</entry>
    <entry key="_timeout_help">指定した制限時間 X[.Y] または X[,Y] 以内に検証が完了しない場合、検証を停止します。ここで、X は時間数を、Y (オプション) は時間の小数部を表します。&lt;br&gt;&lt;br&gt;例:&lt;ul&gt;&lt;li&gt;timeout 5.75 は 5 時間 45 分の制限時間を指定&lt;br&gt;&lt;li&gt;timeout 3,5 は 3 時間 30 分の制限時間を指定&lt;/ul&gt;検証が指定の制限時間内に完了しない場合は、検証失敗と見なされます。</entry>
    <entry key="_context_sensitivity_help">所定の関数に含まれるチェックの呼び出しコンテキスト情報を追加します。&lt;br&gt;たとえば、関数に対する 1 つの呼び出しがレッド チェックとなり、別の呼び出しがグリーン チェックとなる場合、両方の呼び出し情報と色がチェック内に含められます。&lt;br&gt;&lt;br&gt;以下の値のいずれかを選択します。&lt;ul&gt;&lt;li&gt;none - 状況依存性なし&lt;br&gt;&lt;li&gt;auto - 状況依存性が適用される関数を自動選択&lt;br&gt;&lt;li&gt;custom - 状況依存性が適用される関数を指定&lt;/li&gt;</entry>
    <entry key="_path_sensitivity_delta_help">手続き内のコードをより正確に検証する場合、このオプションを選択します。&lt;br&gt;このオプションを使用すると結果の品質は向上しますが、検証時間が長くなります。&lt;br&gt;&lt;br&gt;警告: 3 以下の値を使用してください。そうしない場合、検証に時間がかかります。</entry>
    <entry key="_modules_precision_help">[精度レベル] (-O) の指定とは異なる精度で解析するコンパイル ユニットのリストを指定してください。&lt;br&gt;&lt;br&gt;既定では、すべてのコンパイル ユニットに同じ検証精度が使用されます。&lt;br&gt;ADA では、コンパイル ユニットはパッケージです。</entry>
    <entry key="_array_expansion_size_help">配列サイズを指定します (既定は 3)。長さがこの数値以下のグローバル配列変数に対しては、Polyspace は各セルを個別の変数として検証します。&lt;br&gt;このオプションはグローバル データ ディクショナリの結果に影響を及ぼします。&lt;br&gt;&lt;br&gt;&lt;B&gt;警告&lt;/B&gt;: 解析するグローバル変数の数を増やすと、コード検証時間に影響します。</entry>
    <entry key="_variables_to_expand_help">コード検証用に独立変数に分割される集合変数 (例: レコード) を指定します。&lt;br&gt;&lt;br&gt;&lt;B&gt;警告:&lt;/B&gt; このオプションはグローバル データ ディクショナリの結果に影響を及ぼします。</entry>
    <entry key="_variable_expansion_depth_help">&lt;code&gt;-variables-to-expand オプション&lt;/code&gt; で指定される、変数の展開の最大深度を指定します。</entry>
    <entry key="Advanced_node">詳細設定</entry>
    <entry key="Advanced_title">詳細設定</entry>
    <entry key="code_metrics_section">コード メトリクス</entry>
    <entry key="_no_code_metrics">コード メトリクスの生成を無効にする</entry>
    <entry key="post_verification_section">ポスト検証</entry>
    <entry key="_post_analysis_command">コード検証の終了後に適用するコマンド/スクリプト</entry>
    <entry key="__other">その他</entry>
    <entry key="_no_code_metrics_help">コード メトリクスの結果を生成しません。</entry>
    <entry key="_post_analysis_command_help">コード検証の完了後に実行しなければならないコマンドまたはファイルを指定します。</entry>
    <entry key="__other_help">必要に応じて、テクニカル サポート チームによる検証の微調整用非公式オプションの提供が可能です。</entry>
    <entry key="Reporting_node">レポート</entry>
    <entry key="Reporting_title">レポート</entry>
    <entry key="__report_generation">レポートの生成</entry>
    <entry key="_report_template">レポート テンプレート</entry>
    <entry key="_report_output_format">出力形式</entry>
    <entry key="__report_generation_help">レポート生成オプションを使用して検証レポートを作成します。</entry>
    <entry key="_report_template_help">検証レポート生成用のテンプレートを指定します。</entry>
    <entry key="_report_output_format_help">レポートの出力形式を指定します。</entry>
  </message>
</rsccat>
