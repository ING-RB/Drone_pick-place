<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright 2025 The MathWorks, Inc.-->

<rsccat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" locale="ja_JP" product="polyspace" xsi:noNamespaceSchemaLocation="../../resources/schema/msgcat.xsd">
  <message>
    <entry key="defect">欠陥</entry>
    <entry key="defects">欠陥</entry>
    <entry key="numerical">数値</entry>
    <entry key="int_zero_div">整数のゼロ除算</entry>
    <entry key="float_zero_div">浮動小数点数のゼロ除算</entry>
    <entry key="int_conv_ovfl">整数変換のオーバーフロー</entry>
    <entry key="uint_conv_ovfl">符号なし整数の変換のオーバーフロー</entry>
    <entry key="sign_change">符号変化する整数の変換のオーバーフロー</entry>
    <entry key="float_conv_ovfl">浮動小数点変換のオーバーフロー</entry>
    <entry key="int_ovfl">整数のオーバーフロー</entry>
    <entry key="uint_ovfl">符号なし整数のオーバーフロー</entry>
    <entry key="int_constant_ovfl">整数定数のオーバーフロー</entry>
    <entry key="uint_constant_ovfl">符号なし整数定数のオーバーフロー</entry>
    <entry key="float_ovfl">浮動小数点のオーバーフロー</entry>
    <entry key="int_std_lib">標準ライブラリ整数ルーチンの無効な使用</entry>
    <entry key="float_std_lib">標準ライブラリの浮動小数点ルーチンの無効な使用</entry>
    <entry key="shift_neg">負の値のシフト</entry>
    <entry key="shift_ovfl">シフト演算の右オペランドが許容範囲外</entry>
    <entry key="invalid_float_op">浮動小数点での無効な演算</entry>
    <entry key="float_absorption">浮動小数点オペランドの統合</entry>
    <entry key="subnormal">非正規浮動小数点</entry>
    <entry key="bad_plain_char_use">数値にプレーンの char 型が使用されています</entry>
    <entry key="bitwise_neg">負値でのビット演算です</entry>
    <entry key="int_precision_exceeded">整数の精度を超過しました</entry>
    <entry key="invalid_operation_on_boolean">boolean 型オペランドの演算が無効な可能性があります</entry>
    <entry key="int_to_float_precision_loss">整数から浮動小数点への変換での桁落ち</entry>
    <entry key="static_memory">静的メモリ</entry>
    <entry key="out_bound_array">配列が範囲外にアクセス</entry>
    <entry key="null_ptr">NULL ポインターのデリファレンス</entry>
    <entry key="out_bound_ptr">範囲外にアクセスするポインター</entry>
    <entry key="func_cast">関数ポインターの信頼性の低いキャスト</entry>
    <entry key="ptr_cast">ポインターの信頼性の低いキャスト</entry>
    <entry key="local_addr_escape">スタック変数へのポインターまたは参照が範囲外</entry>
    <entry key="stack_ovfl">スタックのオーバーフロー</entry>
    <entry key="mem_std_lib">標準ライブラリ メモリ ルーチンの無効な使用</entry>
    <entry key="str_std_lib">標準ライブラリ文字列ルーチンの無効な使用</entry>
    <entry key="null_ptr_arith">NULL ポインターを使用した算術演算</entry>
    <entry key="object_size_mismatch">キャストに割り当てられた誤ったオブジェクト サイズ</entry>
    <entry key="path_buffer_overflow">最大バッファー サイズのチェックがないパス操作関数を使用しています</entry>
    <entry key="str_format_buffer_overflow">無効な文字列形式指定子によるバッファー オーバーフロー</entry>
    <entry key="strlib_buffer_overflow">文字列操作で格納先バッファーがオーバーフローしています</entry>
    <entry key="strlib_buffer_underflow">文字列操作で格納先バッファーがアンダーフローしています</entry>
    <entry key="putenv_auto_var">putenv ファミリ関数の引数としての自動変数の使用</entry>
    <entry key="ptr_to_diff_array">異なる配列を指すポインター間の減算または比較</entry>
    <entry key="move_const_object">const オブジェクトの移動操作</entry>
    <entry key="incorrect_value_forwarding">不適切な値の転送</entry>
    <entry key="dynamic_memory">動的メモリ</entry>
    <entry key="freed_ptr">前に解放したポインターの使用</entry>
    <entry key="unchecked_allocated_memory">未チェックの潜在的な動的メモリの割り当てエラー</entry>
    <entry key="unprotected_memory_allocation">保護されていない動的メモリ割り当て</entry>
    <entry key="double_deallocation">以前に割り当て解除したポインターの解放</entry>
    <entry key="bad_free">ポインターの無効な解放</entry>
    <entry key="mem_leak">メモリ リーク</entry>
    <entry key="bad_delete">ポインターの無効な削除</entry>
    <entry key="delete_non_virtual">非仮想メモリの削除</entry>
    <entry key="win_mismatch_dealloc">Windows での関数 alloc と関数 dealloc の不一致</entry>
    <entry key="alignment_change">メモリの再割り当て後に変更されたアライメント</entry>
    <entry key="programming">プログラミング</entry>
    <entry key="assert">アサーション</entry>
    <entry key="bad_equal_use">= 演算子の無効な使用</entry>
    <entry key="bad_equal_equal_use">== 演算子の無効な使用</entry>
    <entry key="decl_mismatch">宣言の不一致</entry>
    <entry key="typedef_mismatch">Typedef が一致しません</entry>
    <entry key="bad_float_op">等号演算子による浮動小数点の比較</entry>
    <entry key="missing_null_char">文字列配列での null 値の欠落</entry>
    <entry key="qualifier_mismatch">変換において修飾子を削除</entry>
    <entry key="ptr_sizeof_mismatch">sizeof において使用された誤った型</entry>
    <entry key="operator_precedence">演算子の優先順位のルールにより、予期せぬ式の評価が得られる可能性があります</entry>
    <entry key="std_func_arg_mismatch">標準関数が正しくない引数で呼び出されました</entry>
    <entry key="invalid_memory_assumption">メモリ編成の前提条件が無効です</entry>
    <entry key="bad_ptr_scaling">ポインターのスケーリングが無効です</entry>
    <entry key="constant_object_write">const 修飾子付きオブジェクトに書き込んでいます</entry>
    <entry key="improper_array_init">配列の初期化が不適切です</entry>
    <entry key="memset_invalid_size">size 引数がゼロの memset を使用しています</entry>
    <entry key="invalid_va_list_arg">va_list 引数が無効です</entry>
    <entry key="non_positive_vla_size">可変長配列が正のサイズをもっていません</entry>
    <entry key="overlapping_assign">代入が重複しています</entry>
    <entry key="overlapping_copy">オーバーラップするメモリのコピーです</entry>
    <entry key="sizeof_misuse">sizeof を誤って使用している可能性があります</entry>
    <entry key="bad_file_access_mode_status">ファイル アクセス モードまたはステータスが不適切です</entry>
    <entry key="write_internal_buffer_returned_from_std_func">再呼び出し不可能な標準関数から返された内部バッファーが変更されています</entry>
    <entry key="memset_invalid_value">意図されない値をもつ memset ファミリへの呼び出しです</entry>
    <entry key="missing_switch_case">switch 条件の case がありません</entry>
    <entry key="other_std_lib">標準ライブラリ ルーチンの無効な使用</entry>
    <entry key="autosar_lib_non_compliance">AUTOSAR 仕様に非準拠</entry>
    <entry key="code_behavior_spec_non_compliance">コードの動作仕様に非準拠</entry>
    <entry key="i2c_smbus_lib_non_compliance">I2C SMBus 仕様に非準拠</entry>
    <entry key="bad_int_ptr_cast">ポインターと整数間での変換は安全ではありません</entry>
    <entry key="unsafe_str_to_numeric">文字列から数値への変換は安全ではありません</entry>
    <entry key="exit_abnormal_handler">終了ハンドラーが異常終了しました</entry>
    <entry key="memcmp_strings">文字列のメモリ比較</entry>
    <entry key="memcmp_padding_data">パディング データのメモリ比較</entry>
    <entry key="non_reentrant_std_return">再呼び出し不可能な標準関数の戻り値の不適切な使用</entry>
    <entry key="errno_misuse">errno の不適切な使用</entry>
    <entry key="missing_errno_reset">errno がリセットされていません</entry>
    <entry key="character_misuse">符号拡張文字の値の不適切な使用</entry>
    <entry key="char_eof_confused">文字の値が EOF に吸収</entry>
    <entry key="io_interleaving">フラッシュまたは位置付け呼び出しなしでのストリームからの入出力の交互実行</entry>
    <entry key="sig_handler_comp_excp_return">計算例外の信号ハンドラーからの戻り値</entry>
    <entry key="sig_handler_calling_signal">信号ハンドラー内からの信号呼び出し</entry>
    <entry key="sig_handler_async_unsafe">非同期安全ではない信号ハンドラーから呼び出された関数</entry>
    <entry key="sig_handler_async_unsafe_strict">非同期安全ではない信号ハンドラーから呼び出された関数 (厳密な ISO C)</entry>
    <entry key="unprototyped_func_call">プロトタイプのない関数ポインターによる呼び出し</entry>
    <entry key="file_object_misuse">FILE オブジェクトの不適切な使用</entry>
    <entry key="flexible_array_member_struct_misuse">フレキシブル配列メンバーをもつ構造体の不適切な使用</entry>
    <entry key="missing_byteswap">データ転送時の欠落バイトの並べ替え</entry>
    <entry key="sig_handler_shared_object">信号ハンドラー内でのデータ アクセスの共有</entry>
    <entry key="sig_handler_errno_misuse">信号ハンドラーでの errno の不適切な使用</entry>
    <entry key="invalid_file_pos">無効なファイル位置</entry>
    <entry key="indeterminate_string">不確定文字列の使用</entry>
    <entry key="macro_used_as_object">オブジェクトとして使用される事前定義されたマクロ</entry>
    <entry key="unnamed_namespace_in_header">ヘッダー ファイルの無名の名前空間</entry>
    <entry key="side_effect_ignored">式の二次的影響は無視されます</entry>
    <entry key="pre_ucname_join_tokens">トークン連結からのユニバーサル文字名</entry>
    <entry key="pre_directive_macro_arg">マクロ引数のプリプロセッサ命令</entry>
    <entry key="inline_constraint_not_respected">インライン制約が守られていません</entry>
    <entry key="va_arg_incorrect_type">無効なデータ型が va_arg に渡されました</entry>
    <entry key="too_many_va_arg_calls">現在の引数リストに対する va_arg 呼び出しが多すぎます</entry>
    <entry key="stream_with_side_effect">意図しない二次的影響の可能性があるストリーム引数</entry>
    <entry key="temp_object_access">有効期間が一時的なオブジェクトにアクセスしています</entry>
    <entry key="memcmp_float">浮動小数点値のメモリ比較</entry>
    <entry key="invalid_env_pointer">前の操作によって無効になった環境ポインター</entry>
    <entry key="narrow_wide_str_misuse">ナロー文字列またはワイド文字列の不適切な使用</entry>
    <entry key="side_effect_in_unsafe_macro_arg">安全でないマクロへの引数の二次的影響</entry>
    <entry key="offsetof_misuse">C++ の offsetof の誤った使用</entry>
    <entry key="va_start_misuse">va_start の誤った使用</entry>
    <entry key="va_start_incorrect_type">va_start に渡された不正な型のデータ</entry>
    <entry key="copy_paste">コピーして貼り付け</entry>
    <entry key="clone">クローン</entry>
    <entry key="duplicated_code">重複しているコード</entry>
    <entry key="almost_duplicated_code">部分的に重複しているコード</entry>
    <entry key="copy_paste_error">コピーして貼り付けのエラーの可能性あり</entry>
    <entry key="std_string_c_str_compared_to_pointer">別のポインターと比較された string::c_str() の結果</entry>
    <entry key="std_remove_without_erase">非プロパーな erase-remove の用法</entry>
    <entry key="invalid_iterator_usage">反復子の使用法が無効です</entry>
    <entry key="dangling_string_view">未接続のポインターにより初期化された std::string_view</entry>
    <entry key="library_usage">ライブラリの使用</entry>
    <entry key="pointer_to_temporary_object">破棄された一時オブジェクトへのポインターまたは参照</entry>
    <entry key="pstunit_misuse">PSTUnit ライブラリの不適切な使用</entry>
    <entry key="pstunit_misuse_setup_teardown">テストのセットアップまたは破棄の API の誤った使用</entry>
    <entry key="pstunit_misuse_fixtures">テスト フィクスチャの誤った使用</entry>
    <entry key="pstunit_misuse_mocking">モッキング API の誤った使用</entry>
    <entry key="pstunit_misuse_registration">誤ったテストの登録または定義</entry>
    <entry key="pstunit_unsupported_syntax">サポートされていない構文がテスト オーサリング API とともに使用されました</entry>
    <entry key="var_read_after_move">移動後の変数の読み取り</entry>
    <entry key="std_string_c_str_compared_to_pointer_default_message">このポインターとの比較は、不必要か、意図しないものである可能性があります。代わりに文字列比較を使用してください。</entry>
    <entry key="std_remove_without_erase_default_message">std::remove() が呼び出されますが、結果がコンテナーの erase() メソッドに渡されていません。エントリはコンテナーから削除されていません。</entry>
    <entry key="dangling_string_view_default_message">std::string_view は、string_view オブジェクトの前にスコープ外になる名前のない一時変数を使用して作成されます。</entry>
    <entry key="pointer_to_temporary_object_default_message">式または制御ステートメントの末尾でオブジェクトが破棄されました。</entry>
    <entry key="var_read_after_move_default_message">移動元の変数を読み取ると、未指定の動作につながる可能性があります。</entry>
    <entry key="object_oriented">オブジェクト指向</entry>
    <entry key="object_slicing">オブジェクトのスライス</entry>
    <entry key="partial_override">オーバーロードされた仮想関数の一部のみをオーバーライドします</entry>
    <entry key="virtual_func_hiding">型に互換性がないためオーバーライドされません</entry>
    <entry key="missing_copy_ctor_call">コピー コンストラクターが初期化リストで呼び出されていません</entry>
    <entry key="missing_base_assign_op_call">基底クラスの代入演算子が呼び出されていません</entry>
    <entry key="non_init_member">コンストラクターでメンバーが初期化されません</entry>
    <entry key="dtor_not_virtual">基底クラス デストラクターが非バーチャルです</entry>
    <entry key="return_not_ref_to_this">*this はコピー代入演算子に返されません</entry>
    <entry key="missing_member_init_in_list">初期化リスト内に明示的なメンバー初期化がありません</entry>
    <entry key="missing_explicit_keyword">"explicit" キーワードがありません</entry>
    <entry key="missing_self_assign_test">自己代入が演算子でテストされていません</entry>
    <entry key="breaking_data_encapsulation">カプセル化されたデータ メンバーに定数ではないハンドルが返されています</entry>
    <entry key="missing_virtual_inheritance">仮想継承がありません</entry>
    <entry key="dtor_may_throw">デストラクターは例外をスローする可能性があります</entry>
    <entry key="rethrow_out_of_catch">catch 外で例外を再スローします</entry>
    <entry key="excp_spec_violation">例外指定に違反しています</entry>
    <entry key="missing_excp_handler_in_main">main に catch(...) がありません</entry>
    <entry key="copy_modifying_source">ソース オペランドを変更するコピー操作</entry>
    <entry key="incomplete_class_ptr">不完全なクラス ポインターの変換または削除</entry>
    <entry key="lambda_type_misuse">typeid のオペランドとしてラムダが使用されています</entry>
    <entry key="missing_overload_new_for_aligned_obj">オーバーアラインの可能性のあるクラスの演算子 new がオーバーロードされていません</entry>
    <entry key="memop_on_nontrivial_obj">非トリビアルなクラス オブジェクトのバイト演算</entry>
    <entry key="cpp_exceptions">C++ の例外</entry>
    <entry key="excp_caught_by_value">例外が値によってキャッチされました</entry>
    <entry key="excp_handler_hidden">前のハンドラーによって隠された例外ハンドラーです</entry>
    <entry key="throw_argument_expression_throws">throw ステートメントの引数式は予期せぬ例外を発生させる可能性があります</entry>
    <entry key="noexcept_function_throws">関数 Noexcept は例外で終了する可能性があります</entry>
    <entry key="throw_expression_calls_new">throw の引数式が new を呼び出します</entry>
    <entry key="throw_argument_expression_throws_default_message">'throw' ステートメントの引数式は予期せぬ例外を発生させる可能性があります。</entry>
    <entry key="noexcept_function_throws_default_message">'noexcept' と明示的にマークされた関数によってスローできます。予期せぬ std::terminate が発生する可能性があります。</entry>
    <entry key="uncaught_exception">キャッチされていない例外</entry>
    <entry key="throw_expression_calls_new_default_message">throw 式で new を呼び出すと、未処理の例外またはメモリ リークが発生する可能性があります。</entry>
    <entry key="data_flow">データ フロー</entry>
    <entry key="useless_write">読み取りのない書き込み</entry>
    <entry key="non_init_var">未初期化変数</entry>
    <entry key="non_init_ptr">未初期化ポインター</entry>
    <entry key="var_shadowing">変数のシャドウイング</entry>
    <entry key="missing_return">return ステートメントがありません</entry>
    <entry key="unreachable">到達不能コード</entry>
    <entry key="bad_unreachable">欠陥のある到達不能コード</entry>
    <entry key="dead_code">デッド コード</entry>
    <entry key="useless_if">無意味な if</entry>
    <entry key="partially_access_array">部分的にアクセスされる配列</entry>
    <entry key="partially_accessed_array">部分的にアクセスされる配列</entry>
    <entry key="uncalled_func">呼び出されていない静的関数</entry>
    <entry key="infinite_loop">無限ループ</entry>
    <entry key="non_init_ptr_conv">未初期化値へのポインターが定数ポインターに変換</entry>
    <entry key="deactivated_code">条件が常に false であるために非アクティブにされたコード</entry>
    <entry key="useless_preproc_condition">無意味なプリプロセッサの条件付き命令</entry>
    <entry key="useless_preproc_condition_default_message">無意味なプリプロセッサの条件付き命令です。</entry>
    <entry key="resource_management">リソース管理</entry>
    <entry key="read_only_resource_write">読み取り専用リソースに書き込んでいます</entry>
    <entry key="closed_resource_use">以前に閉じられたリソースを使用しています</entry>
    <entry key="double_resource_close">前に閉じたリソースを閉じています</entry>
    <entry key="double_resource_open">以前に開いたリソースを開く</entry>
    <entry key="resource_leak">リソース リーク</entry>
    <entry key="resource_access_mode_mismatch">以前に開いたリソースを別のモードで開いています</entry>
    <entry key="concurrency">同時実行</entry>
    <entry key="deadlock">デッドロック</entry>
    <entry key="livelock">ライブロック</entry>
    <entry key="bad_lock">ロック解除されていません</entry>
    <entry key="bad_unlock">ロックされていません</entry>
    <entry key="double_lock">ダブル ロック</entry>
    <entry key="double_unlock">ロック解除が重複しています</entry>
    <entry key="destroy_locked">ロックされたミューテックスの破棄</entry>
    <entry key="lock_too_long">長すぎるロック</entry>
    <entry key="race_cond">競合状態</entry>
    <entry key="data_race">データ レース</entry>
    <entry key="data_race_std_lib">標準ライブラリ関数呼び出しでデータ レースが発生しました</entry>
    <entry key="data_race_bit_fields">隣接するビット フィールドでのデータ レース</entry>
    <entry key="data_race_all">データ レースに Atomic の演算が含まれています</entry>
    <entry key="signal_use_in_multithreaded_program">マルチスレッド プログラムの信号呼び出し</entry>
    <entry key="thread_killed_with_signal">スレッドを強制終了するための信号の使用</entry>
    <entry key="blocking_while_locked">ロック保持中のブロック操作</entry>
    <entry key="atomic_var_access_twice">式の中でアトミック変数へのアクセスが 2 回行われています</entry>
    <entry key="atomic_var_sequence_not_atomic">アトミックな読み込みと保存のシーケンスがアトミックではありません</entry>
    <entry key="spurious_wakeup_not_wrapped_in_loop">誤って起動する可能性のある関数はループでラップされません</entry>
    <entry key="spurious_failure_not_wrapped_in_loop">誤って失敗する可能性のある関数はループでラップされません</entry>
    <entry key="thread_mem_leak">スレッド固有のメモリ リーク</entry>
    <entry key="undefined_thread_id">未定義のスレッド ID の使用</entry>
    <entry key="double_join_or_detach">結合済みまたは分離済みスレッドの結合または分離</entry>
    <entry key="bad_thread_attribute">スレッド属性の欠落または二重初期化</entry>
    <entry key="signaled_cond_var_not_unique">複数のスレッドが同じ条件変数を待機しています</entry>
    <entry key="asynchronously_cancellable_thread">非同期にキャンセル可能なスレッド</entry>
    <entry key="multi_mutex_with_one_cond_var">複数のミューテックスで同じ条件変数が使用されています</entry>
    <entry key="local_addr_escape_thread">スレッドからエスケープする自動変数またはスレッド ローカル変数</entry>
    <entry key="security">セキュリティ</entry>
    <entry key="path_traversal">パス操作が脆弱です</entry>
    <entry key="missing_sentinel">配列が null で終了していません</entry>
    <entry key="strlib_buffer_overflow_using_source_size">ソース バッファーのサイズを使用したため、格納先バッファーがオーバーフローしています</entry>
    <entry key="delete_sentinel">意図せず null 文字を削除すると文字列が終了しません</entry>
    <entry key="path_excessive_length">パス操作関数は MAX_PATH より大きい長さのパスを処理できません</entry>
    <entry key="dangerous_std_func">危険な標準関数を使用しています</entry>
    <entry key="chroot_misuse">chroot() の後に chdir("/") を実行せずにファイルが操作されました</entry>
    <entry key="ignored_return_value">高感度ルーチンの呼び出しによる戻り値が無視されました</entry>
    <entry key="return_not_checked">要注意の関数の戻り値がチェックされていません</entry>
    <entry key="bad_umask">umask が chmod 型の引数と共に使用されています</entry>
    <entry key="string_format">書式文字列指定子と引数の不一致</entry>
    <entry key="dangerous_permissions">アクセス許可の割り当てが脆弱です</entry>
    <entry key="rand_seed_constant">定数シードからの確定的な乱数出力です</entry>
    <entry key="rand_seed_predictable">予測可能なシードによる予測可能な乱数出力です</entry>
    <entry key="vulnerable_prng">擬似乱数発生器が脆弱です</entry>
    <entry key="func_ptr_absolute_addr">関数ポインターに絶対アドレスが割り当てられています</entry>
    <entry key="single_signal_handler">1 つのハンドラーで複数の信号を使用すると競合状態が発生する場合があります</entry>
    <entry key="toctou">チェック時と使用時 (TOCTOU) の間のファイル アクセス</entry>
    <entry key="relative_path_lib">相対パスからライブラリを読み込むと、外部アクターの制御を受ける可能性があります</entry>
    <entry key="relative_path_cmd">相対パスからバイナリを実行すると、外部アクターの制御を受ける可能性があります</entry>
    <entry key="non_secure_temp_file">セキュリティで保護されていない一時ファイルを使用しています</entry>
    <entry key="sensitive_stack_not_cleared">スタック内にクリアされていない機密データがあります</entry>
    <entry key="sensitive_heap_not_cleared">要注意のヒープ メモリが解放前にクリアされていません</entry>
    <entry key="sensitive_data_export_with_env_var">環境変数またはレジスタによる情報漏えい</entry>
    <entry key="sensitive_data_print">機密データが出力されました</entry>
    <entry key="obsolete_std_func">旧式の標準関数が使用されています</entry>
    <entry key="bad_network_connect_order">ネットワーク接続操作の順序が正しくありません</entry>
    <entry key="data_length_mismatch">データの長さとサイズが一致していません</entry>
    <entry key="unsafe_std_func">安全でない標準関数</entry>
    <entry key="unsafe_std_crypt">安全でない標準暗号化関数</entry>
    <entry key="bad_privilege_drop_order">権限を削除する順序が正しくありません</entry>
    <entry key="missing_privilege_drop_check">権限の削除が検証されていません</entry>
    <entry key="readlink_misuse">readlink() の不適切な使用</entry>
    <entry key="errno_not_checked">errno の未チェック</entry>
    <entry key="file_exposure_to_child">子プロセスに対するファイル記述子の公開</entry>
    <entry key="unsafe_system_call">システム関数の安全でない呼び出し</entry>
    <entry key="padding_info_leak">構造体のパディングによる情報漏洩</entry>
    <entry key="inappropriate_io_on_device">デバイス ファイルの I/O 動作が不適切です</entry>
    <entry key="hard_coded_sensitive_data">ハードコードされた機密データ</entry>
    <entry key="uncertain_memory_cleaning">不確かなメモリのクリーン アップ</entry>
    <entry key="dummy_security">インフラ作業をテストするためのダミー チェッカー</entry>
    <entry key="unsafe_system_call_default_message">システム関数の呼び出しが安全ではありません。</entry>
    <entry key="cryptography">暗号化</entry>
    <entry key="crypto_no_cleanup">オブジェクトがクリーン アップされておらず、機密データがメモリから削除されていない可能性があります</entry>
    <entry key="crypto_no_free">オブジェクトが解放されておらず、機密データがメモリから削除されていない可能性があります</entry>
    <entry key="crypto_no_init">アルゴリズムは使用する前にライブラリに読み込まれなければなりません</entry>
    <entry key="crypto_deprecated">この関数は推奨されません</entry>
    <entry key="crypto_bad_init">このオブジェクトは適切に初期化されていません</entry>
    <entry key="crypto_bad_free">このオブジェクトは他のオブジェクトに接続されており、直接解放できません</entry>
    <entry key="crypto_bad_option">指定された値が有効なオプションと一致しません</entry>
    <entry key="crypto_md_weak_hash">ハッシュ アルゴリズムがセキュリティで保護されていません</entry>
    <entry key="crypto_md_no_algorithm">ハッシュ アルゴリズムがありません</entry>
    <entry key="crypto_md_bad_function">コンテキストがダイジェスト操作用に正しく初期化されていません</entry>
    <entry key="crypto_md_no_data">コンテキストに追加されたデータはありません</entry>
    <entry key="crypto_md_no_final">更新操作のハッシュ後に最終ステップがありません</entry>
    <entry key="crypto_md_no_salt">ハッシュ演算のソルトがありません</entry>
    <entry key="crypto_cipher_weak_cipher">脆弱な暗号アルゴリズム</entry>
    <entry key="crypto_cipher_weak_mode">脆弱な暗号モード</entry>
    <entry key="crypto_cipher_constant_key">定数の暗号キー</entry>
    <entry key="crypto_cipher_constant_iv">定数のブロック暗号初期化ベクトル</entry>
    <entry key="crypto_cipher_predictable_key">予測可能な暗号キー</entry>
    <entry key="crypto_cipher_predictable_iv">予測可能なブロック暗号初期化ベクトル</entry>
    <entry key="crypto_cipher_iv_reuse_on_key_change">新しいキーが使用された後は直ちに初期化ベクトルを変更しなければなりません</entry>
    <entry key="crypto_cipher_no_salt_in_passwd_hash">特定のプレーン テキスト攻撃を防ぐため、パスワードには、ハッシュされる前にソルトを使用しなければなりません</entry>
    <entry key="crypto_cipher_bad_function">不整合な暗号操作</entry>
    <entry key="crypto_cipher_no_algorithm">暗号アルゴリズムがありません</entry>
    <entry key="crypto_cipher_no_key">暗号キーがありません</entry>
    <entry key="crypto_cipher_no_iv">ブロック暗号初期化ベクトルがありません</entry>
    <entry key="crypto_cipher_no_data">処理する暗号データがありません</entry>
    <entry key="crypto_cipher_no_padding">操作のこのブロック モードにパディングを設定する必要があります</entry>
    <entry key="crypto_cipher_no_final">暗号化の最終ステップがありません</entry>
    <entry key="crypto_pkey_weak_params">キー生成のパラメーターがセキュリティで保護されていません</entry>
    <entry key="crypto_rsa_low_exponent">RSA 公開指数がセキュリティで保護されていません</entry>
    <entry key="crypto_pkey_incorrect_key">暗号化アルゴリズムのキーが正しくありません</entry>
    <entry key="crypto_pkey_incorrect_init">コンテキストが暗号化操作用に正しく初期化されていません</entry>
    <entry key="crypto_pkey_no_params">キー生成のパラメーターが見つかりません</entry>
    <entry key="crypto_pkey_no_public_key">公開鍵が見つかりません</entry>
    <entry key="crypto_pkey_no_private_key">秘密鍵が見つかりません</entry>
    <entry key="crypto_pkey_no_peer">ピア キーが見つかりません</entry>
    <entry key="crypto_pkey_no_data">暗号化、復号化または署名操作用のデータが見つかりません</entry>
    <entry key="crypto_rsa_weak_padding">RSA アルゴリズムのパディングが脆弱です</entry>
    <entry key="crypto_rsa_bad_padding">RSA アルゴリズム演算のパディングに互換性がありません</entry>
    <entry key="crypto_rsa_no_padding">RSA アルゴリズムのパディングが見つかりません</entry>
    <entry key="crypto_rsa_no_blinding">RSA アルゴリズムのブラインディングが見つかりません</entry>
    <entry key="crypto_ssl_weak_protocol">SSL/TLS プロトコルがセキュリティで保護されていません</entry>
    <entry key="crypto_ssl_weak_authentication">匿名認証はセキュリティを保証するもではなく、避けなければなりません</entry>
    <entry key="crypto_ssl_weak_cipher_suite">一部の推奨暗号が脆弱すぎます</entry>
    <entry key="crypto_ssl_weak_renegociation">レガシな再ネゴシエーションは破損しているため、使用しないでください</entry>
    <entry key="crypto_ssl_no_role">TLS/SSL 接続方法が設定されていません</entry>
    <entry key="crypto_ssl_bad_role">TLS/SSL 接続方法の設定が正しくありません</entry>
    <entry key="crypto_ssl_no_socket">通信用のソケットが設定されていません</entry>
    <entry key="crypto_ssl_no_private_key">X.509 証明書用の秘密鍵が見つかりません</entry>
    <entry key="crypto_ssl_no_certificate">X.509 証明書が見つかりません</entry>
    <entry key="crypto_ssl_hostname_not_checked">サーバー証明書の共通名が確認されていません</entry>
    <entry key="crypto_ssl_no_cert_check">秘密鍵と証明書がチェックされておらず、一致していない可能性があります</entry>
    <entry key="crypto_ssl_no_ca">認証機関リストが見つかりません</entry>
    <entry key="crypto_ssl_cert_not_checked">X.509 ピア証明書が確認されていません</entry>
    <entry key="tainted_data">汚染されたデータ</entry>
    <entry key="tainted_hostid">外部で制御される要素を使用したホストの変更</entry>
    <entry key="tainted_env_variable">外部制御される環境変数を使用しています</entry>
    <entry key="tainted_string_format">汚染された文字列形式</entry>
    <entry key="tainted_sign_change">汚染された符号変化の変換</entry>
    <entry key="tainted_loop_boundary">汚染された値で制限されたループ</entry>
    <entry key="tainted_memory_alloc_size">汚染されたサイズでのメモリの割り当て</entry>
    <entry key="tainted_path_lib">外部制御されるパスから読み込まれたライブラリ</entry>
    <entry key="tainted_path_cmd">外部制御されるパスから実行されたコマンド</entry>
    <entry key="tainted_external_cmd">外部制御されるコマンドの実行</entry>
    <entry key="tainted_vla_size">可変長配列の汚染されたサイズ</entry>
    <entry key="tainted_int_mod">汚染されたモジュロ オペランド</entry>
    <entry key="tainted_int_division">汚染された除算オペランド</entry>
    <entry key="tainted_array_index">汚染されたインデックスによる配列へのアクセス</entry>
    <entry key="tainted_ptr_offset">汚染されたオフセットによるポインターのデリファレンス</entry>
    <entry key="tainted_ptr">汚染されたポインターの使用</entry>
    <entry key="tainted_string">汚染された NULL 文字列または非 NULL 終端文字列</entry>
    <entry key="tainted_source_use_custom">汚染されたソースを要注意の関数と共に使用</entry>
    <entry key="good_practice">適切な手法</entry>
    <entry key="unused_parameter">未使用のパラメーターです</entry>
    <entry key="pass_by_value">値渡しの大きな引数</entry>
    <entry key="good_practice_defects">適切な手法</entry>
    <entry key="hard_coded_buffer_size">バッファー サイズがハードコードされています</entry>
    <entry key="hard_coded_loop_boundary">ループ境界がハードコードされています</entry>
    <entry key="hard_coded_mem_size">メモリの操作に使用するオブジェクトのサイズがハードコードされています</entry>
    <entry key="setjmp_longjmp_use">setjmp/longjmp の使用</entry>
    <entry key="more_than_one_statement">ステートメントが複数存在する行</entry>
    <entry key="delete_of_void_ptr">void ポインターが削除されています</entry>
    <entry key="bitwise_arith_mix">同一データでのビットごとの演算と算術演算です</entry>
    <entry key="missing_freed_ptr_reset">解放したポインターのリセットがありません</entry>
    <entry key="missing_switch_break">switch case の break がありません</entry>
    <entry key="flexible_array_member_incorrect_size">フレキシブル配列メンバー サイズの構文が正しくありません</entry>
    <entry key="most_vexing_parse">不明瞭な宣言の構文</entry>
    <entry key="cv_qualified_reference_type">const 修飾子または volatile 修飾子付きの C++ の参照型</entry>
    <entry key="write_reference_to_const_type">const 修飾子付きの型と後続の変更への C++ 参照</entry>
    <entry key="missing_overload_new_delete_pair">割り当て関数または割り当て解除関数のオーバーロードが見つかりません</entry>
    <entry key="multi_stmt_macro">マクロに複数のステートメントがあります</entry>
    <entry key="semicolon_terminated_macro">セミコロンで終了するマクロ</entry>
    <entry key="semicolon_ctrl_stmt_same_line">if、for または while ステートメントと同じ行にあるセミコロン</entry>
    <entry key="incorrect_indentation">ステートメントのインデントが正しくありません</entry>
    <entry key="sizeof_useless_op">sizeof のオペランドに含まれる式が冗長です</entry>
    <entry key="inappropriate_type_in_switch">データ型は switch 式に不適切な可能性があります</entry>
    <entry key="forbidden_func">禁止された関数の使用</entry>
    <entry key="forbidden_keyword">禁止された C/C++ キーワードの使用</entry>
    <entry key="forbidden_macro">禁止されたマクロの使用</entry>
    <entry key="unmodified_var_not_const">未変更の変数に const 修飾子が付いていません</entry>
    <entry key="file_does_not_compile">ファイルがコンパイルされません</entry>
    <entry key="catch_for_generic_exception">汎用の例外に対するキャッチの宣言</entry>
    <entry key="throw_for_generic_exception">汎用の例外に対するスローの宣言</entry>
    <entry key="method_not_const">const でないメソッド</entry>
    <entry key="public_static_field_not_const">パブリックな静的フィールドが const ではない</entry>
    <entry key="critical_data_member_declared_public">クリティカルなデータ メンバーがプライベートではありません</entry>
    <entry key="sql_injection">SQL インジェクション</entry>
    <entry key="invalid_notation_on_e_constant">科学表記形式が無効です</entry>
    <entry key="useless_include">無意味なインクルード</entry>
    <entry key="ldap_injection">LDAP インジェクション</entry>
    <entry key="plain_text_password_in_filesystem">プレーン テキストのパスワードがファイル システムに保存されています。</entry>
    <entry key="unused_variable">使用されない変数</entry>
    <entry key="useless_capture">無意味なキャプチャ</entry>
    <entry key="resource_injection">リソース インジェクション</entry>
    <entry key="unused_variable_default_message">このスコープでは変数は読み取られません。</entry>
    <entry key="useless_capture_default_message">キャプチャされた変数はラムダでは使用されません。</entry>
    <entry key="performance">パフォーマンス</entry>
    <entry key="std_endl_use">std::endl によって不要なフラッシュが生じることがあります</entry>
    <entry key="empty_destructor_defined">空のデストラクターによって不要なデータ コピーが生じることがあります</entry>
    <entry key="const_return_value">const の戻り値によって不要なデータ コピーが生じることがあります</entry>
    <entry key="const_parameter_value">const のパラメーター値によって不要なデータ コピーが生じることがあります</entry>
    <entry key="inefficient_basic_string_length">string 長の計算が非効率的です</entry>
    <entry key="move_operation_may_throw">移動操作によってスローされる可能性があります</entry>
    <entry key="expensive_pass_by_value">計算量の多い値渡し</entry>
    <entry key="expensive_return_by_value">計算量の多い値返し</entry>
    <entry key="expensive_range_based_for_loop_iteration">範囲ベースの for ループの反復における計算量の多いコピー</entry>
    <entry key="expensive_std_move_const_object">Const std::move の入力により、オブジェクト コピーの計算量が増える場合があります</entry>
    <entry key="std_move_unmovable_type">移動不可のタイプで std::move が呼び出されました</entry>
    <entry key="missing_constexpr">constexpr 指定子が見つかりません</entry>
    <entry key="expensive_constant_std_string">定数文字列からの、計算量の多い std::string または std::regex の構成</entry>
    <entry key="expensive_c_str_std_string_operation">std::string::c_str() または同等の string メソッドの不要な使用</entry>
    <entry key="unnecessary_empty_string_literal">空の文字列リテラルに対して計算量の多い std::string を使用</entry>
    <entry key="expensive_use_of_std_string_methods">より効率的なオーバーロードの代わりに、計算量の多い std::string のメソッドを使用</entry>
    <entry key="expensive_std_string_append">単純な追加の代わりに、計算量の多い std::string の非メンバー演算子 +() が使用されています</entry>
    <entry key="expensive_std_string_resize">std::string の短縮に計算量の多い substr() を使用</entry>
    <entry key="const_rvalue_reference_parameter">const rvalue 参照パラメーターにより、不要なデータ コピーが発生する可能性があります</entry>
    <entry key="expensive_logical_operation">計算量の多い論理演算です</entry>
    <entry key="expensive_local_variable">計算量の多いローカル変数のコピーです</entry>
    <entry key="expensive_container_count">計算量の多いコンテナーのカウント方法を使用</entry>
    <entry key="expensive_container_insertion">計算量の多いコンテナーの挿入メソッドを使用</entry>
    <entry key="expensive_container_emptiness_check">計算量の多い、コンテナーの size メソッドの使用</entry>
    <entry key="expensive_map_insert_or_assign">計算量の多いマップの大かっこ演算子を使用して、値を挿入または代入</entry>
    <entry key="expensive_use_of_std_algorithm">計算量の多い標準アルゴリズムを使用していますが、より効率的な方法があります</entry>
    <entry key="expensive_use_of_c_string_api">C 標準ライブラリから計算量の多い文字列関数を使用</entry>
    <entry key="missing_make_shared">より効率的な make_shared ではなく new または make_unique を使用</entry>
    <entry key="unnecessary_struct_padding">不必要なパディング</entry>
    <entry key="inefficient_sprintf">sprintf の使用が非効率的です</entry>
    <entry key="expensive_post_increment">計算量の多い後置インクリメント演算</entry>
    <entry key="expensive_dynamic_cast">計算量の多い dynamic_cast</entry>
    <entry key="move_operation_uses_copy">移動操作にコピーが使用されています</entry>
    <entry key="expensive_return_const_object">計算量の多い const オブジェクトの戻り値</entry>
    <entry key="prefer_range_based_for_loops">非効率的な for ループの使用</entry>
    <entry key="expensive_alloc_in_loop">ループ内の計算量の多い代入</entry>
    <entry key="expensive_return_std_move">不要な std::move を原因とする計算量の多い戻り値</entry>
    <entry key="missing_container_reserve">コンテナーの予約メソッドの呼び出しがありません</entry>
    <entry key="unnecessary_construction_before_assignment">再割り当て前の不要な構成</entry>
    <entry key="unnecessary_impl_of_special_member_function">特殊なメンバー関数の不要な実装</entry>
    <entry key="expensive_any_cast">計算量の多い std::any_cast の使用</entry>
    <entry key="expensive_member_initialization">計算量の多いメンバー初期化</entry>
    <entry key="expensive_pass_by_reference">パラメーターへの不要な参照</entry>
    <entry key="expensive_unused_object">計算量の多い未使用オブジェクト</entry>
    <entry key="expensive_std_function">std::function の計算量の多い型定義</entry>
    <entry key="expensive_use_of_map_instead_of_set">セットの代わりに計算量の多いマップを使用</entry>
    <entry key="expensive_copy_on_last_use">計算量の多い変数の最後の使用</entry>
    <entry key="missing_constexpr_default_message">constexpr 指定子は、コンパイル時の評価に使用できます。\n コンパイル時の評価により、実行時の不要なオーバーヘッドが節減されます。</entry>
    <entry key="unnecessary_struct_padding_default_message">クラスまたは struct に不必要なパディングが含まれています。メンバーを並べ替えてメモリを節約できます。</entry>
    <entry key="inefficient_sprintf_default_message">この sprintf の使用は、より効率的な strcpy と置き換えることができます。</entry>
    <entry key="expensive_post_increment_default_message">この後置インクリメント演算は、より高速な前置インクリメント演算に置き換えることができます。</entry>
    <entry key="move_operation_uses_copy_default_message">このメンバーまたは基底クラスは、別のクラスの移動操作の一部としてコピーされています。\nこのオブジェクトを移動すると、リソースが正しく転送され、効率性が向上します。</entry>
    <entry key="prefer_range_based_for_loops_default_message">より高速かつ明確で、エラーの発生が少ない範囲ベースの for ループの使用を検討してください。</entry>
    <entry key="missing_container_reserve_default_message">要素の挿入前にコンテナーの予約メソッドを呼び出してメモリを事前に割り当てることで、パフォーマンスが向上します。</entry>
    <entry key="expensive_any_cast_default_message">値ごとのキャスト (std::any_cast&lt;T&gt;) を、より効率的な参照ごとのキャスト (std::any_cast&lt;const T&amp;&gt;) に置き換えてください</entry>
    <entry key="expensive_unused_object_default_message">作成の計算量が多くなる可能性がある未使用オブジェクトを削除すると、コードの効率を向上させることができます。</entry>
    <entry key="expensive_std_function_default_message">この std::function オブジェクトの 1 つ以上のパラメーターは、コピーの計算量が多いオブジェクトについて値受け渡しセマンティクスを使用します。</entry>
    <entry key="expensive_use_of_map_instead_of_set_default_message">このキーは、挿入される値のメンバーです。std::map の代わりに std::set を使用すると効率が高くなる可能性があります。</entry>
    <entry key="expensive_pass_by_reference_default_message">入力パラメーターはコピーの計算量が少なく、値によって渡すことができます。</entry>
    <entry key="expensive_copy_on_last_use_default_message">最後の使用時に変数を移動する方がコピーするよりも効率的です。</entry>
    <entry key="custom_rules">ユーザー定義のカスタム ルール</entry>
    <entry key="custom_lib">カスタム lib</entry>
    <entry key="custom_rule_01">カスタム ルール 1</entry>
    <entry key="custom_rule_02">カスタム ルール 2</entry>
    <entry key="custom_rule_03">カスタム ルール 3</entry>
    <entry key="custom_rule_04">カスタム ルール 4</entry>
    <entry key="custom_rule_05">カスタム ルール 5</entry>
    <entry key="custom_rule_06">カスタム ルール 6</entry>
    <entry key="custom_rule_07">カスタム ルール 7</entry>
    <entry key="custom_rule_08">カスタム ルール 8</entry>
    <entry key="custom_rule_09">カスタム ルール 9</entry>
    <entry key="custom_rule_10">カスタム ルール 10</entry>
    <entry key="custom_rule_11">カスタム ルール 11</entry>
    <entry key="custom_rule_12">カスタム ルール 12</entry>
    <entry key="custom_rule_13">カスタム ルール 13</entry>
    <entry key="custom_rule_14">カスタム ルール 14</entry>
    <entry key="custom_rule_15">カスタム ルール 15</entry>
    <entry key="custom_rule_16">カスタム ルール 16</entry>
    <entry key="custom_rule_17">カスタム ルール 17</entry>
    <entry key="custom_rule_18">カスタム ルール 18</entry>
    <entry key="custom_rule_19">カスタム ルール 19</entry>
    <entry key="custom_rule_20">カスタム ルール 20</entry>
    <entry key="custom_rule_21">カスタム ルール 21</entry>
    <entry key="custom_rule_22">カスタム ルール 22</entry>
    <entry key="custom_rule_23">カスタム ルール 23</entry>
    <entry key="custom_rule_24">カスタム ルール 24</entry>
    <entry key="custom_rule_25">カスタム ルール 25</entry>
    <entry key="custom_rule_26">カスタム ルール 26</entry>
    <entry key="custom_rule_27">カスタム ルール 27</entry>
    <entry key="custom_rule_28">カスタム ルール 28</entry>
    <entry key="custom_rule_29">カスタム ルール 29</entry>
    <entry key="custom_rule_30">カスタム ルール 30</entry>
    <entry key="rte">実行時エラー</entry>
    <entry key="numerical_checks">数値</entry>
    <entry key="pow">正のべき乗値</entry>
    <entry key="ovfl">オーバーフロー</entry>
    <entry key="sovfl">スカラーのオーバーフロー</entry>
    <entry key="fovfl">浮動小数点のオーバーフロー</entry>
    <entry key="zdv">ゼロ除算</entry>
    <entry key="shf">無効なシフト演算</entry>
    <entry key="uovfl">オーバーフロー/アンダーフロー</entry>
    <entry key="unfl">アンダーフロー</entry>
    <entry key="static_memory_checks">静的メモリ</entry>
    <entry key="obai">範囲外の配列インデックス</entry>
    <entry key="idp">不適切にデリファレンスされたポインター</entry>
    <entry key="abs_addr">絶対アドレスの使用</entry>
    <entry key="data_flow_checks">データ フロー</entry>
    <entry key="nip">未初期化ポインター</entry>
    <entry key="niv">未初期化変数</entry>
    <entry key="nivl">未初期化ローカル変数</entry>
    <entry key="irv">初期化されていない戻り値</entry>
    <entry key="fnc">呼び出されていない関数</entry>
    <entry key="fnr">到達不能の関数</entry>
    <entry key="global_set_at_initialization">初期化コードでグローバル変数に値が割り当てられていません</entry>
    <entry key="control_flow_checks">コントロール フロー</entry>
    <entry key="ntc">無限呼び出し</entry>
    <entry key="ntl">無限ループ</entry>
    <entry key="unr">到達不能コード</entry>
    <entry key="k_ntc">既知の無限呼び出し</entry>
    <entry key="exc">キャッチされていない例外</entry>
    <entry key="excp">算術的例外処理</entry>
    <entry key="nnt">null の this ポインターを呼び出すメソッド</entry>
    <entry key="cpp">無効な C++ に固有の演算</entry>
    <entry key="oop">誤ったオブジェクト指向プログラミング</entry>
    <entry key="frv">値を返さない関数</entry>
    <entry key="inf">情報チェック</entry>
    <entry key="other_checks">その他</entry>
    <entry key="asrt">ユーザー アサーション</entry>
    <entry key="std_lib">標準ライブラリ ルーチンの無効な使用</entry>
    <entry key="autosar_use">AUTOSAR のランタイム環境関数の無効な使用</entry>
    <entry key="autosar_impl">AUTOSAR ランナブルの実装の無効な結果</entry>
    <entry key="autosar_noimpl">AUTOSAR ランナブルが実装されていません</entry>
    <entry key="simulink_design_minmax">モデル参照の入力/出力が指定された範囲外</entry>
    <entry key="ipt">検査ポイント</entry>
    <entry key="cor">正確性の条件</entry>
    <entry key="precondition">前提条件</entry>
    <entry key="postcondition">事後条件</entry>
    <entry key="autosar_compliance">AUTOSAR 仕様に非準拠</entry>
    <entry key="i2c_smbus_compliance">I2C SMBus 仕様に非準拠</entry>
    <entry key="code_behavior_spec_compliance">コードの動作仕様に非準拠</entry>
    <entry key="impact_specifications">影響仕様</entry>
    <entry key="expected_impact">予測される影響</entry>
    <entry key="expected_no_impact">予測される影響なし</entry>
    <entry key="global_variable">グローバル変数</entry>
    <entry key="shared_global_variable">共有</entry>
    <entry key="unshared_global_variable">非共有</entry>
    <entry key="global_shared_protected_variable">保護された変数</entry>
    <entry key="global_shared_unprotected_variable">保護されていない可能性のある変数</entry>
    <entry key="global_unshared_variable">使用される非共有変数</entry>
    <entry key="global_unused_variable">使用されない変数</entry>
    <entry key="spec_check">仕様チェック</entry>
    <entry key="spec_violated">仕様に違反しています</entry>
    <entry key="spec_potentially_violated">仕様に違反している可能性があります</entry>
    <entry key="spec_proven">仕様は証明されました</entry>
    <entry key="spec_impact">影響分析</entry>
    <entry key="may_impact_sink">影響を受ける可能性のあるシンク</entry>
    <entry key="impact_free_sink">影響のないシンク</entry>
    <entry key="impact_free_source">影響のないソース</entry>
    <entry key="spec_impact_couple">対への影響</entry>
    <entry key="may_impact_couple">影響を受ける可能性のあるソース/シンクの対</entry>
    <entry key="impact_free_couple">影響のないソース/シンクの対</entry>
    <entry key="spec_potential_impact">影響を受ける可能性あり</entry>
    <entry key="spec_impact_free">影響なし</entry>
    <entry key="code_coverage_checks">コード カバレッジ</entry>
    <entry key="function_cov">関数カバレッジ</entry>
    <entry key="condition_cov">条件カバレッジ</entry>
    <entry key="decision_cov">判定カバレッジ</entry>
    <entry key="condition_mcdc">MC/DC に対する条件の寄与</entry>
    <entry key="block_cov">ブロック カバレッジ</entry>
    <entry key="stmt_cov">ステートメント カバレッジ</entry>
    <entry key="function_exit_cov">関数終了点カバレッジ</entry>
    <entry key="project_metrics">プロジェクト メトリクス</entry>
    <entry key="file_metrics">ファイル メトリクス</entry>
    <entry key="function_metrics">関数メトリクス</entry>
    <entry key="name">名前</entry>
    <entry key="files">ファイルの数</entry>
    <entry key="ada_files">ファイルの数</entry>
    <entry key="includes">ヘッダーの数</entry>
    <entry key="ap_cg_cycle">再帰の数</entry>
    <entry key="ap_cg_direct_cycle">直接再帰の数</entry>
    <entry key="total_lines">行数</entry>
    <entry key="lines_without_cmt">コメントのない行の数</entry>
    <entry key="comf">コメント密度</entry>
    <entry key="comr">コメント率</entry>
    <entry key="path">パスの数</entry>
    <entry key="goto">GoTo ステートメントの数</entry>
    <entry key="vg">循環的複雑度</entry>
    <entry key="calling">呼び出し元関数の数</entry>
    <entry key="calls">呼び出された関数の数</entry>
    <entry key="param">関数パラメーターの数</entry>
    <entry key="stmt">命令の数</entry>
    <entry key="level">呼び出しレベルの数</entry>
    <entry key="return">Return ステートメントの数</entry>
    <entry key="vocf">言語スコープ</entry>
    <entry key="pshv">保護されている共有変数の数</entry>
    <entry key="unpshv">保護されていない可能性のある共有変数の数</entry>
    <entry key="fco">推定の関数結合</entry>
    <entry key="fcomf">関数のコメント密度</entry>
    <entry key="flin">本体内の行数</entry>
    <entry key="fxln">実行可能行数</entry>
    <entry key="ncalls">呼び出しの発生数</entry>
    <entry key="classes">クラスの数</entry>
    <entry key="packages">パッケージの数</entry>
    <entry key="packwith">With ステートメント内のパッケージの数</entry>
    <entry key="ada_lines_without_cmt">コメントのない行の数</entry>
    <entry key="subpwith">With ステートメント内のサブプログラムの数</entry>
    <entry key="local_vars_max">ローカル変数サイズのより高い推定値</entry>
    <entry key="local_vars_min">ローカル変数サイズのより低い推定値</entry>
    <entry key="local_vars">ローカルの非静的変数の数</entry>
    <entry key="local_static_vars">ローカルの静的変数の数</entry>
    <entry key="max_stack">最大スタック使用量</entry>
    <entry key="min_stack">最小スタック使用量</entry>
    <entry key="prog_max_stack">最大スタック使用量のプログラミング</entry>
    <entry key="prog_min_stack">最小スタック使用量のプログラミング</entry>
    <entry key="fsc">関数ストレス複雑度</entry>
    <entry key="name_default_message">名前</entry>
    <entry key="fsc_default_message">このメトリクスは関数の関数ストレス複雑度を示します。</entry>
    <entry key="func_cast_default_message">Unreliable cast between two different pointer function types.</entry>
    <entry key="ptr_cast_default_message">Unreliable cast between two different pointer types.</entry>
    <entry key="str_format_buffer_overflow_default_message">Buffer out of bound risk without correct precision in the format specifier.</entry>
    <entry key="move_const_object_default_message">The object used in the std::move operation is declared const.\nThe resources in the object will not be transferred to another object.</entry>
    <entry key="incorrect_value_forwarding_default_message">Forwarding value to other functions shall be correctly done</entry>
    <entry key="bad_equal_use_default_message">Use of '=' instead of '==' in a logical expression.</entry>
    <entry key="bad_equal_equal_use_default_message">Use of '==' instead of '=' in a statement.</entry>
    <entry key="decl_mismatch_default_message">Inconsistent multiple declarations of the same identifier.</entry>
    <entry key="bad_float_op_default_message">Floating point equality or inequality statement may be inaccurate.</entry>
    <entry key="operator_precedence_default_message">Probably missing parentheses leading to wrong order of operations.</entry>
    <entry key="ptr_sizeof_mismatch_default_message">Mismatch between pointers and sizeof.</entry>
    <entry key="missing_null_char_default_message">Missing null char at the end of an array of chars because it has been declared with less elements than the initializing string.</entry>
    <entry key="qualifier_mismatch_default_message">Cast between pointer types with different qualifiers.</entry>
    <entry key="overlapping_assign_default_message">Overlapping assignment.</entry>
    <entry key="improper_array_init_default_message">Improper array initialization.</entry>
    <entry key="overlapping_copy_default_message">Copy of overlapping memory.</entry>
    <entry key="bad_int_ptr_cast_default_message">Unsafe conversion between pointer and integer.</entry>
    <entry key="typedef_mismatch_default_message">Inconsistent multiple declarations of the same typedef.</entry>
    <entry key="unprototyped_func_call_default_message">Call through non-prototyped function pointer.</entry>
    <entry key="flexible_array_member_struct_misuse_default_message">Misuse of structure with flexible array member.</entry>
    <entry key="unnamed_namespace_in_header_default_message">Unnamed namespace in header file.</entry>
    <entry key="return_not_ref_to_this_default_message">Assignment operator does not return a reference to *this.</entry>
    <entry key="object_slicing_default_message">Slicing on pass-by-value and class hierarchies.</entry>
    <entry key="dtor_not_virtual_default_message">Potential leaking problem if this class is expected to behave polymorphically on derived class objects deletion.</entry>
    <entry key="partial_override_default_message">Overloaded virtual function is only partially overridden.</entry>
    <entry key="missing_self_assign_test_default_message">Handle assignment to self in operator=. Leak and unneeded copies may be avoided.</entry>
    <entry key="breaking_data_encapsulation_default_message">Avoid returning handles to object internals. A client referring to an object of this class and calling this method may modify the associated object contents.</entry>
    <entry key="missing_copy_ctor_call_default_message">Not all subobjects and/or members are copied in initialization list.</entry>
    <entry key="missing_base_assign_op_call_default_message">Missing calls to copy assignment for base subobjects.</entry>
    <entry key="missing_virtual_inheritance_default_message">An accessible base class is both virtual and non-virtual in the same hierarchy.</entry>
    <entry key="missing_member_init_in_list_default_message">Missing (explicit) member initialization in list.</entry>
    <entry key="virtual_func_hiding_default_message">Hiding of virtual function results from failed override attempt.</entry>
    <entry key="missing_explicit_keyword_default_message">Missing keyword "explicit" in constructor, candidate for use in implicit conversions (from first argument type).</entry>
    <entry key="excp_caught_by_value_default_message">Exception is caught by value instead of reference (recommended) or pointer.</entry>
    <entry key="excp_handler_hidden_default_message">Handler hidden by previous handler. It will never be executed.</entry>
    <entry key="var_shadowing_default_message">A variable declared in an inner scope hides a variable with the same name declared in an outer scope.</entry>
    <entry key="missing_return_default_message">Exit path of the function without return statement or return value.</entry>
    <entry key="uncalled_func_default_message">Static function not called.</entry>
    <entry key="deactivated_code_default_message">Branch deactivated.</entry>
    <entry key="string_format_default_message">Mismatch between the specifiers and the arguments of a format string.</entry>
    <entry key="func_ptr_absolute_addr_default_message">Function pointer assigned with absolute address.</entry>
    <entry key="local_ref_to_unnamed_temporary">Reference to un-named temporary.</entry>
    <entry key="pass_by_value_default_message">The size of the passed-by-value parameter object is too large.</entry>
    <entry key="missing_switch_break_default_message">Missing break of switch case.</entry>
    <entry key="more_than_one_statement_default_message">Line with more than one statement.</entry>
    <entry key="hard_coded_buffer_size_default_message">Hard-coded buffer size.</entry>
    <entry key="hard_coded_loop_boundary_default_message">Hard-coded loop boundary.</entry>
    <entry key="unused_parameter_default_message">Unused parameter.</entry>
    <entry key="delete_of_void_ptr_default_message">Deleting void pointer may result in undefined behavior.</entry>
    <entry key="bitwise_arith_mix_default_message">Bitwise and arithmetic operations on the same data.</entry>
    <entry key="missing_freed_ptr_reset_default_message">Missing reset of freed pointer.</entry>
    <entry key="inappropriate_type_in_switch_default_message">The switch expression has a data type other than char, short, int or enum.</entry>
    <entry key="method_not_const_default_message">This non-const method does not modify any state, and should be marked const.</entry>
    <entry key="invalid_notation_on_e_constant_default_message">Constant format does not match expected format of one non-zero digit to the left of the decimal.</entry>
    <entry key="useless_include_default_message">There shall be no unused include directives.</entry>
    <entry key="local_ref_to_unnamed_temporary_default_message">An unnamed temporary object that is returned by value is captured in a reference, perhaps unintentionally.</entry>
    <entry key="std_endl_use_default_message">Calling std::endl implicitly flushes the IOStream.\nThis flush may be expensive, and may be unintended.</entry>
    <entry key="empty_destructor_defined_default_message">User declared destructors prevent auto-generated move constructors and move assignment operators.\nThis absence may cause a more expensive copy.</entry>
    <entry key="const_return_value_default_message">Const return values cannot be moved by the calling function.\nThis restriction may cause a more expensive copy.</entry>
    <entry key="const_parameter_value_default_message">Const parameter values cannot be moved by the called function.\nThis restriction may cause a more expensive copy.</entry>
    <entry key="inefficient_basic_string_length_default_message">std::string::length() is more efficient than passing c_str to other string length functions.</entry>
    <entry key="move_operation_may_throw_default_message">Throwing move operations are unexpected, and STL containers may use the copy operations instead.</entry>
    <entry key="expensive_pass_by_value_default_message">This input parameter can be passed by const pointer/reference.\nThis change avoids a copy for each call.</entry>
    <entry key="expensive_return_by_value_default_message">This output can be returned by pointer/reference.\nThis change avoids a copy for each call.</entry>
    <entry key="expensive_range_based_for_loop_iteration_default_message">This range-based for loop variable can be a const reference.\nThis change avoids a copy for each iteration.</entry>
    <entry key="expensive_std_move_const_object_default_message">Const std::move input cannot be moved.\nThis restriction may cause a more expensive copy.</entry>
    <entry key="std_move_unmovable_type_default_message">Both the move constructor and move assignment operator are not declared for this type.</entry>
    <entry key="expensive_constant_std_string_default_message">A std::string is reconstructed from constant data on every block execution.\nThis can be expensive.</entry>
    <entry key="expensive_c_str_std_string_operation_default_message">The output of std::string::c_str(), std::string::data(), std::string::operator[](), or std::string::at() is passed to a function when directly passing the string would have been more efficient.</entry>
    <entry key="unnecessary_empty_string_literal_default_message">A std::string is constructed from, assigned from, or compared to an empty string literal.\nThere are more efficient alternatives.</entry>
    <entry key="expensive_use_of_std_string_methods_default_message">A std::string method is called with a double-quoted string literal parameter.\n A single-quoted character can be used instead.</entry>
    <entry key="expensive_std_string_append_default_message">The non-member std::string operator+() function is called when the append (or +=) method would have been more efficient.</entry>
    <entry key="expensive_std_string_resize_default_message">std::string::substr() is called when calling std::string::resize() is more efficient.</entry>
    <entry key="const_rvalue_reference_parameter_default_message">Const rvalue reference parameter cannot be moved.\nThis restriction may cause a more expensive copy.</entry>
    <entry key="expensive_logical_operation_default_message">This logical operation may be ordered sub-optimally.\nIf the right operand can be safely evaluated before the left operand, reorder operands to improve performance.</entry>
    <entry key="expensive_local_variable_default_message">This unmodified local variable can be a const reference.\nThis change avoids a more expensive object copy.</entry>
    <entry key="expensive_container_count_default_message">Do not use count() method to check if element exists in container. Use the less expensive find() method instead.</entry>
    <entry key="expensive_container_emptiness_check_default_message">Do not use the container's size() method to check for emptiness. Use its empty() method instead.</entry>
    <entry key="expensive_map_insert_or_assign_default_message">The [] operator is less efficient than the map's insert_or_assign() method.</entry>
    <entry key="expensive_use_of_std_algorithm_default_message">A standard algorithm was called with iterators from a container that has a more efficient method.</entry>
    <entry key="missing_make_shared_default_message">Using 'new' to initialize a shared_ptr is more expensive than using make_shared.</entry>
    <entry key="cpp_checks">C++</entry>
    <entry key="decision_mcdc">MC/DC</entry>
    <entry key="files_default_message">This metric shows the number of source files considered for analysis.</entry>
    <entry key="ada_files_default_message">This metric shows the number of files.</entry>
    <entry key="includes_default_message">This metric shows the number of header files considered for analysis.</entry>
    <entry key="ap_cg_cycle_default_message">This metric shows the number of recursions, both direct and indirect.</entry>
    <entry key="ap_cg_direct_cycle_default_message">This metric shows the number of instances of a function calling itself directly.</entry>
    <entry key="total_lines_default_message">This metric shows the total number of lines in a file.</entry>
    <entry key="lines_without_cmt_default_message">This metric shows the total number of lines in a file excluding comment-only lines and blank lines.</entry>
    <entry key="comf_default_message">This metric shows the ratio of number of comments to number of statements, expressed as a percentage.</entry>
    <entry key="comr_default_message">This metric shows the ratio of number of comment lines to number of code lines, expressed as a percentage.</entry>
    <entry key="path_default_message">This metric shows the number of paths through a function.</entry>
    <entry key="goto_default_message">This metric shows the number of goto statements in a function.</entry>
    <entry key="vg_default_message">This metric shows the cyclomatic complexity of a function.</entry>
    <entry key="calling_default_message">This metric shows the number of distinct callers of a function.</entry>
    <entry key="calls_default_message">This metric shows the number of callees of a function.</entry>
    <entry key="param_default_message">This metric shows the number of arguments of a function.</entry>
    <entry key="stmt_default_message">This metric shows the number of instructions in a function body.</entry>
    <entry key="level_default_message">This metric shows the maximum depth of nesting of control flow structures in a function.</entry>
    <entry key="return_default_message">This metric measures the number of return statements in a function.</entry>
    <entry key="vocf_default_message">This metric estimates the cost of maintaining or changing a function.</entry>
    <entry key="pshv_default_message">This metric shows the number of shared variables protected from concurrent access.</entry>
    <entry key="unpshv_default_message">This metric shows the number of shared variables not protected from concurrent access.</entry>
    <entry key="fco_default_message">This metric is calculated as: Number of call occurrences - Number of function definitions + 1.</entry>
    <entry key="fcomf_default_message">This metric shows the ratio of number of comments to number of statements per function, expressed as a percentage.</entry>
    <entry key="flin_default_message">This metric shows the number of lines in a function body.</entry>
    <entry key="fxln_default_message">This metric shows the number of executable lines in a function body.</entry>
    <entry key="ncalls_default_message">This metric shows the number of calls in a function body.</entry>
    <entry key="classes_default_message">This metric shows the number of classes.</entry>
    <entry key="packages_default_message">This metric shows the number of packages.</entry>
    <entry key="packwith_default_message">This metric shows the number of packages in with statements.</entry>
    <entry key="ada_lines_without_cmt_default_message">This metric shows the number of lines without comment.</entry>
    <entry key="subpwith_default_message">This metric shows the number of subprograms in with statements.</entry>
    <entry key="local_vars_max_default_message">This metric shows the total size of all local variables in a function.</entry>
    <entry key="local_vars_min_default_message">This metric shows the total size of local variables in a function taking nested scopes into account.</entry>
    <entry key="local_vars_default_message">This metric shows the number of local non-static variables in a function.</entry>
    <entry key="local_static_vars_default_message">This metric shows the total number of local static variables in a function.</entry>
    <entry key="max_stack_default_message">This metric shows the total size of all local variables in a function plus the maximum stack usage from its callees (called functions).</entry>
    <entry key="min_stack_default_message">This metric shows the total size of all local variables in a function plus the minimum stack usage from its callees (called functions). This metric takes nested scopes into account when determining local variable size.</entry>
    <entry key="prog_max_stack_default_message">This metric shows the maximum stack usage in the analyzed program.</entry>
    <entry key="prog_min_stack_default_message">This metric shows the minimum stack usage in the analyzed program, taking nested scopes into account.</entry>
    <entry key="classification_unbounded_input">This check may be an issue related to unbounded input values\n</entry>
    <entry key="classification_bounded_input">This check may be an issue related to bounded input values\n</entry>
    <entry key="classification_path_related">This check may be a path-related issue, which is not dependent on input values\n</entry>
    <entry key="classification_safe_input_values">The function's known input values will not cause a defect.</entry>
    <entry key="classification_unreachable">This defect is unreachable given the function's known input values.</entry>
    <entry key="purple_box">This is bad.</entry>
  </message>
</rsccat>
