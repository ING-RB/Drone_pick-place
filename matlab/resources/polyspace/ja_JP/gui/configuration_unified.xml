<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright 2025 The MathWorks, Inc.-->

<rsccat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" locale="ja_JP" product="polyspace" xsi:noNamespaceSchemaLocation="../../resources/schema/msgcat.xsd">
  <message>
    <entry key="OptionNameProjectName">名前</entry>
    <entry key="OptionNameProjectLanguage">言語</entry>
    <entry key="OptionNameProjectCreated">作成日</entry>
    <entry key="OptionNameProjectLastModified">最終更新日時</entry>
    <entry key="OptionNameProjectAuthor">作成者</entry>
    <entry key="OptionNameApplicationSourceFolders">アプリケーション ソース フォルダー</entry>
    <entry key="OptionHelpApplicationSourceFolders">プロジェクトに明示的に追加されたソース フォルダー。</entry>
    <entry key="OptionNameApplicationSourceFiles">アプリケーション ソース ファイル</entry>
    <entry key="OptionHelpApplicationSourceFiles">プロジェクトに明示的に追加されたソース ファイル。</entry>
    <entry key="OptionNamePSTUnitTestSourceFolders">Polyspace xUnit テスト フォルダー</entry>
    <entry key="OptionHelpPSTUnitTestSourceFolders">プロジェクトに明示的に追加された Polyspace Test xUnit テストを含むフォルダー。</entry>
    <entry key="OptionNamePSTUnitTestSourceFiles">Polyspace xUnit テスト ファイル</entry>
    <entry key="OptionHelpPSTUnitTestSourceFiles">プロジェクトに明示的に追加された Polyspace Test xUnit テストを含むファイル。</entry>
    <entry key="OptionNameExternalTestSourceFolders">外部テスト フォルダー</entry>
    <entry key="OptionHelpExternalTestSourceFolders">プロジェクトに明示的に追加された外部テストを含むフォルダー。</entry>
    <entry key="OptionNameExternalTestSourceFiles">外部テスト ファイル</entry>
    <entry key="OptionHelpExternalTestSourceFiles">プロジェクトに明示的に追加された外部テストを含むファイル。</entry>
    <entry key="OptionNameProjectVariables">プロジェクト変数</entry>
    <entry key="OptionHelpProjectVariables">プロジェクトの設定で省略形として使用される変数名。これらの変数を参照するには、$() で囲みます。たとえば、変数 ROOTPATH をルート フォルダー パスに設定し、別の場所で、フォルダー パスの入力を $(ROOTPATH) から始めることができます。</entry>
    <entry key="OptionNameIncludePatterns">ファイル名パターンを含める</entry>
    <entry key="OptionHelpIncludePatterns">指定したフォルダーからプロジェクトに追加するソース ファイルを識別するためのパターン。* や ? などのワイルドカードを使用すると、複数のファイルをカバーできます。</entry>
    <entry key="OptionNameExcludePatterns">除外パターン</entry>
    <entry key="OptionHelpExcludePatterns">プロジェクトから完全に除外されるファイルおよびフォルダー。たとえば、あるファイルを除外した場合、親ソース フォルダーをリフレッシュしても、そのファイルがプロジェクトに再度追加されることはありません。プロジェクトに明示的に追加されたファイルやフォルダーを除外することはできません。</entry>
    <entry key="OptionNameArtifactPath">アーティファクト ディレクトリ</entry>
    <entry key="OptionHelpArtifactPath">生成されたテスト コードやビルド情報などのプロジェクト アーティファクトを保存するフォルダー。環境変数 POLYSPACE_ARTIFACTS_DIR を設定すると、このオプションがオーバーライドされます。</entry>
    <entry key="OptionNameAllowNegativeOperandInShift">左シフトで負のオペランドを許可</entry>
    <entry key="OptionHelpAllowNegativeOperandInShift">ANSI/ISO C-90 規格では、負の数値のシフト演算は許可されていません。既定では、検証が停止します。&lt;br&gt;&lt;br&gt;たとえば、&lt;i&gt; -2 &lt;&lt; 2 &lt;/i&gt; というコードによって検証が停止します。&lt;br&gt;しかしこのオプションを選択すると、Polyspace ではこの演算が有効と見なされ、-2 &lt;&lt; 2 = -8 という結果が生じます。</entry>
    <entry key="OptionNameAllowNonFiniteFloats">非有限の浮動小数点を検討</entry>
    <entry key="OptionHelpAllowNonFiniteFloats">Inf と NaN を検証に含めます。たとえば、次のようになります: &lt;BR&gt; &lt;ul&gt; &lt;li&gt;浮動小数点演算からの Inf と NaN を許可します。 &lt;li&gt;不明な値の浮動小数点変数は無限大または NaN であると仮定します。 &lt;/ul&gt; このオプションを使用するだけで、浮動小数点演算に対する多くの数値チェックが実質的に&lt;BR&gt;無効となります。無限大と NaN を全般的に考慮したものの、すべての状況を検討したかどうか&lt;BR&gt;確信がない場合は、無限大と NaN のオプションを warn-first に設定します。&lt;br&gt;&lt;br&gt;Bug Finder では、解析で、無限大および NaN との比較にデッド コードとしてフラグを付ける場合にこのオプションを使用します。</entry>
    <entry key="OptionNameAllowPtrArithOnStruct">フィールド間のポインター演算を有効にする</entry>
    <entry key="OptionHelpAllowPtrArithOnStruct">構造体フィールドの境界を超えるポインター演算を許可します。これは ANSI/ISO C-90 の動作と異なります。</entry>
    <entry key="OptionNameAllowedPragmas">許可されるプラグマ</entry>
    <entry key="OptionHelpAllowedPragmas">以下のチェックのためのプラグマを指定します: &lt;ul&gt;&lt;li&gt;MISRA-C および MISRA AC AGC ルール 3.4 &lt;/li&gt; &lt;li&gt;MISRA C++ ルール 16-6-1&lt;/li&gt;&lt;/ul&gt; ルール チェッカーでは、ドキュメント化されたプラグマが考慮され、これらのルールの違反にはフラグが立てられません。</entry>
    <entry key="OptionNameAutosarMultitasking">ARXML ファイルの選択</entry>
    <entry key="OptionHelpAutosarMultitasking">AUTOSAR マルチタスキング構成の記述を含んだ ARXML ファイルのリストを指定します。</entry>
    <entry key="OptionNameBooleanTypes">有効な boolean 型</entry>
    <entry key="OptionHelpBooleanTypes">Polyspace が boolean と見なすデータ型を指定するにはこのオプションを使用します。&lt;BR&gt;typedef ステートメントで定義したデータ型のみがサポートされます。</entry>
    <entry key="OptionNameCheckGlobalsInit">ウォーム リブート後にグローバル変数が初期化されることをチェック</entry>
    <entry key="OptionHelpCheckGlobalsInit">指定した初期化コード内でグローバル変数に値が代入されることをチェックします。&lt;BR&gt;アプリケーション全体を検証する場合、初期化コードは、'main' の冒頭からプラグマ 'polyspace_end_of_init' までです。&lt;BR&gt;モジュールまたはライブラリを検証する場合、初期化コードは初期化関数のシーケンスです。</entry>
    <entry key="OptionNameCheckInfinite">無限大</entry>
    <entry key="OptionHelpCheckInfinite">結果が無限大 (Inf) になる演算を検出します。&lt;BR&gt;&lt;ul&gt;&lt;li&gt;allow: 演算に対するチェックを生成しません。&lt;BR&gt;&lt;/li&gt;&lt;li&gt;warn-first: オペランドが無限大でない場合にのみ演算に対するチェックを生成します。&lt;BR&gt;チェックがレッドでも検証を続行します。&lt;BR&gt;このモードでは最初に出現した無限大値のみを強調表示します。&lt;/li&gt;&lt;li&gt;forbid: 演算に対するチェックを生成します。&lt;BR&gt;チェックがレッドの場合は検証を停止します。&lt;/li&gt;&lt;/ul&gt;</entry>
    <entry key="OptionNameCheckNan">NaN</entry>
    <entry key="OptionHelpCheckNan">結果が NaN となる演算を検出します。&lt;BR&gt;&lt;ul&gt;&lt;li&gt;allow: 演算に対するチェックを生成しません。&lt;BR&gt;&lt;/li&gt;&lt;li&gt;warn-first: オペランドが NaN でない場合にのみ演算に対するチェックを生成します。&lt;BR&gt;チェックがレッドでも検証を続行します。&lt;BR&gt;このモードでは最初に出現した NaN のみを強調表示します。&lt;/li&gt;&lt;li&gt;forbid: 演算に対するチェックを生成します。&lt;BR&gt;チェックがレッドの場合は検証を停止します。&lt;/li&gt;&lt;/ul&gt;</entry>
    <entry key="OptionNameCheckSubnormal">非正規検出モード</entry>
    <entry key="OptionHelpCheckSubnormal">結果が非正規浮動小数点値となる演算を検出します｡&lt;BR&gt;&lt;ul&gt;&lt;li&gt;allow: 演算に対してチェックを生成しません｡&lt;BR&gt;&lt;/li&gt;&lt;li&gt;warn-first: オペランドが非正規でなはい場合にのみ演算に対するチェックを生成します｡&lt;BR&gt;チェックがレッドでも検証を続行します｡&lt;BR&gt;このモードでは最初に出現した非正規値のみを強調表示します｡&lt;/li&gt;&lt;li&gt;warn-all: オペランドが非正規値でも演算に対するチェックを生成します｡&lt;BR&gt;チェックがレッドでも検証を続行します｡&lt;BR&gt;このモードではすべての非正規値の出現が強調表示されます｡&lt;/li&gt;&lt;li&gt;forbid: 演算にチェックを生成します｡&lt;BR&gt;チェックがレッドの場合は検証を停止します｡&lt;/li&gt;&lt;/ul&gt;</entry>
    <entry key="OptionNameCheckersActivationFile">チェッカー アクティベーション ファイル</entry>
    <entry key="OptionHelpCheckersActivationFile">チェッカーを選択します (欠陥とコーディング ルール)。変更を保存すると、選択内容は XML として保存され、その XML ファイルへのパスがこのオプションに対し指定されます。</entry>
    <entry key="OptionNameChecksUsingSystemInputValues">システムのすべての入力値を考慮する、さらに厳密なチェックを実行</entry>
    <entry key="OptionHelpChecksUsingSystemInputValues">以下について、すべての取り得る値を考慮してください: &lt;ul&gt;&lt;li&gt;グローバル変数&lt;/li&gt;&lt;li&gt;volatile 変数の読み取り値&lt;/li&gt;&lt;li&gt;スタブされた関数の戻り値&lt;/li&gt;&lt;li&gt;[次の関数の入力を考慮する] で指定された関数入力&lt;/li&gt;&lt;/ul&gt; より厳密な静的解析では数値的なエッジ ケースから生じうる問題が検出され、&lt;BR&gt;検出された欠陥につながる可能性のある例の値が提示されます。&lt;BR&gt;&lt;BR&gt; オプション [次の関数の入力を考慮する] (-system-inputs-from) で指定された関数に対してより厳密な解析が実行されます。</entry>
    <entry key="OptionNameClassAnalyzer">クラス</entry>
    <entry key="OptionHelpClassAnalyzer">main の生成に使用するクラスのリストを入力します。&lt;ul&gt;&lt;li&gt;none: クラスなし&lt;BR&gt;&lt;li&gt;all: すべてのクラス&lt;BR&gt;&lt;li&gt;custom: 特定クラスのリスト&lt;BR&gt;特定クラスのリストの選択されたメンバー関数 ([指定クラス内で呼び出す関数] で定義) が、生成された main によって呼び出されます。&lt;BR&gt;&lt;/ul&gt;</entry>
    <entry key="OptionNameClassAnalyzerCalls">指定クラス内で呼び出す関数</entry>
    <entry key="OptionHelpClassAnalyzerCalls">オプション -class-analyzer で指定されたクラスの対象メソッドを検証します。対象メソッドは、指定したクラスの静的メソッド、パブリック メソッドおよび保護メソッドです。&lt;ul&gt;&lt;li&gt;all: 生成された main により、指定クラスのすべてのパブリック メソッドと保護メソッドが呼び出されます。親クラスから継承されたメンバーは呼び出されません。&lt;BR&gt;&lt;li&gt;all-public: 生成された main が保護メソッド以外のメソッドをすべて呼び出します。&lt;BR&gt;&lt;li&gt;inherited-all: 生成された main が指定クラスとその親のパブリック メソッドと保護メソッドをすべて呼び出します。&lt;BR&gt;&lt;li&gt;inherited-all-public: 生成された main が指定クラスとその親のパブリック メソッドをすべて呼び出します。&lt;BR&gt;&lt;li&gt;unused: 既定値です。生成された main は、指定クラス内で呼び出されないメソッドをすべて呼び出します。&lt;BR&gt;&lt;li&gt;unused-public: 生成された main は、指定クラス内で呼び出されないメソッドを (保護メソッドを除き) すべて呼び出します。&lt;BR&gt;&lt;li&gt;inherited-unused: 生成された main が、別のメソッドで呼び出されない指定クラスとその親のパブリック メソッドと保護メソッドをすべて呼び出します。&lt;BR&gt;&lt;li&gt;inherited-unused-public: 生成された main が、別のメソッドで呼び出されない指定クラスとその親のパブリック メソッドをすべて呼び出します。&lt;BR&gt;&lt;li&gt;custom=list_of_methods: 生成された main は、list_of_methods で指定されたメソッドを呼び出します。&lt;BR&gt;&lt;/ul&gt;</entry>
    <entry key="OptionNameClassOnly">クラスの内容のみを解析</entry>
    <entry key="OptionHelpClassOnly">[クラス] (-class-analyzer) オプションで指定されたクラスに含まれているコードのみを解析します。&lt;BR&gt;Polyspace でソース コードを指定した場合でも、クラス外部で定義されている関数にはすべてスタブが生成されます。</entry>
    <entry key="OptionNameCodeMetrics">コード メトリクスの計算</entry>
    <entry key="OptionHelpCodeMetrics">コード メトリクスを計算します。</entry>
    <entry key="OptionNameConsiderVolatileQualifierOnFields">フィールドに volatile 修飾子があることを考慮する</entry>
    <entry key="OptionHelpConsiderVolatileQualifierOnFields">構造体のフィールドの volatile 修飾子を無視しません。&lt;br&gt;このオプションをオンにすると、ソフトウェアは次の仮定を行います。&lt;ul&gt;&lt;li&gt;構造体の 1 つのフィールドが volatile の場合、構造体全体が volatile である。&lt;br&gt;volatile 識別子がない場合でも、すべてのフィールドが volatile である。&lt;/li&gt;&lt;li&gt;volatile 構造体の各フィールドはコード内のどの時点でも全範囲の値をもつ。&lt;/li&gt;&lt;/ul&gt;</entry>
    <entry key="OptionNameContextSensitivity">状況依存性</entry>
    <entry key="OptionHelpContextSensitivity">所定の関数に含まれるチェックの呼び出しコンテキスト情報を追加します。&lt;br&gt;たとえば、関数に対する 1 つの呼び出しがレッド チェックとなり、別の呼び出しがグリーン チェックとなる場合、両方の呼び出し情報と色がチェック内に含められます。&lt;br&gt;&lt;br&gt;以下の値のいずれかを選択します。&lt;ul&gt;&lt;li&gt;none - 状況依存性なし&lt;br&gt;&lt;li&gt;auto - 状況依存性が適用される関数を自動選択&lt;br&gt;&lt;li&gt;custom - 状況依存性が適用される関数を指定&lt;/li&gt;</entry>
    <entry key="OptionNameCriticalSection">クリティカル セクション詳細</entry>
    <entry key="OptionHelpCriticalSection">クリティカル セクションの開始ルーチンと終了ルーチンのリストを指定します。各クリティカル セクションには開始と終了があります。&lt;BR&gt;共有リソースの保護をモデル化する場合に、これらのクリティカル セクションを使用します。</entry>
    <entry key="OptionNameCyclicTasks">周期タスク</entry>
    <entry key="OptionHelpCyclicTasks">解析する周期タスクのリストを指定します。これらのタスクではパラメーターを使わないでください。&lt;BR&gt;タスクがパラメーターを伴う関数の場合は、これらの関数を&lt;BR&gt;パラメーターのない関数にカプセル化し、パラメーターはグローバル変数によって渡すことができます。</entry>
    <entry key="OptionNameDataRangeSpecifications">制約の設定</entry>
    <entry key="OptionHelpDataRangeSpecifications">グローバル変数、ポインターおよび関数パラメーターのデータ制約を指定します。&lt;BR&gt;[編集] ボタンをクリックしてウィザードを開き、指示に従って制約を設定します。あるいは、このフィールドに制約テンプレート ファイルを指定します。&lt;BR&gt;&lt;BR&gt;ここで指定する制約によって Simulink モデルから抽出された値がオーバーライドされます。</entry>
    <entry key="OptionNameDetectPointerEscape">スコープ外のスタック ポインター デリファレンスを検出</entry>
    <entry key="OptionHelpDetectPointerEscape">未定義の動作の原因となる、関数がローカル変数のいずれかにポインターを返すケースの場所を検出します。</entry>
    <entry key="OptionNameDisableInitializationChecks">未初期化のチェックを無効にする</entry>
    <entry key="OptionHelpDisableInitializationChecks">以下のチェックを無効にします。&lt;ul&gt;&lt;li&gt;未初期化ローカル変数&lt;br&gt;&lt;li&gt;未初期化変数&lt;br&gt;&lt;li&gt;未初期化ポインター&lt;br&gt;&lt;li&gt;初期化済み戻り値&lt;/i&gt;&lt;/ul&gt;このオプションをオンにすると、宣言時に変数は全範囲とみなされ、ポインターは null または不明なオフセットでメモリ ブロックを指します。</entry>
    <entry key="OptionNameDoNotGenerateResultsFor">次に対する結果を生成しない:</entry>
    <entry key="OptionHelpDoNotGenerateResultsFor">解析の結果を必要としないヘッダー ファイルを指定します。 &lt;ul&gt;&lt;li&gt;include-folders: インクルード フォルダー内のヘッダー &lt;/li&gt; &lt;li&gt;all-headers: インクルード フォルダー内のヘッダー、ソース ファイルと同じフォルダー内のヘッダー &lt;/li&gt; &lt;li&gt;custom: 指定したファイルまたは指定したフォルダー内のファイル &lt;/li&gt;&lt;/ul&gt; このオプションはコーディング ルール、コード メトリクスおよび Polyspace Bug Finder の欠陥にのみ適用されます。</entry>
    <entry key="OptionNameDos">DOS または Windows ファイル システムからのコード</entry>
    <entry key="OptionHelpDos">コードが &lt;B&gt;DOS または Windows&lt;/B&gt; ファイル システムのものである場合は、このオプションを使用します。&lt;BR&gt;このオプションは、大文字/小文字の区別や制御文字の問題に対応します。</entry>
    <entry key="OptionNameEnableBatchBugFinder">リモート クラスターで Bug Finder 解析を実行</entry>
    <entry key="OptionHelpEnableBatchBugFinder">Polyspace の解析ジョブを、MATLAB Distributed Computing Server および Polyspace Bug Finder Server で構成されたリモート クラスターに送信します。</entry>
    <entry key="OptionNameEnableBatchCodeProver">リモート クラスターで Code Prover 解析を実行</entry>
    <entry key="OptionHelpEnableBatchCodeProver">Polyspace の解析ジョブを、MATLAB Distributed Computing Server および Polyspace Code Prover Server で構成されたリモート クラスターに送信します。</entry>
    <entry key="OptionNameEnableCheckersActivationFile">カスタム チェッカー ファイルを使用</entry>
    <entry key="OptionHelpEnableCheckersActivationFile">チェッカーはチェッカー アクティベーション XML ファイルを使用して指定する必要があることを指定します。</entry>
    <entry key="OptionNameEnableConcurrencyDetection">Code Prover の同時実行の自動検出を有効にする</entry>
    <entry key="OptionHelpEnableConcurrencyDetection">pthread_create など、特定の同時実行のプリミティブ型を自動的に認識します。&lt;BR&gt; &lt;ul&gt; &lt;li&gt;Code Prover: 同時実行のプリミティブ型を含むマルチタスク アプリケーションには、このオプションを使用します。&lt;br&gt;アプリケーションには ‘main’ 関数がなければなりません。&lt;li&gt;Bug Finder: このオプションは必要ありません。Bug Finder は既定で同時実行のプリミティブ型を認識します。&lt;/ul&gt;検出できるプリミティブ型のリストについては、[詳しいヘルプ] をクリックしてください。</entry>
    <entry key="OptionNameEnableExternalMultitasking">ファイルを使用してマルチタスキング構成を指定</entry>
    <entry key="OptionHelpEnableExternalMultitasking">Polyspace はマルチタスキングの記述を外部ファイルから抽出する必要があることを指定します。</entry>
    <entry key="OptionNameEnableMain">アプリケーション全体の検証</entry>
    <entry key="OptionHelpEnableMain">アプリケーションに 'main' 関数が含まれるよう指定します。Code Prover は、この 'main' 関数を検証の開始点として使用します。</entry>
    <entry key="OptionNameEnableMultitasking">マルチタスクを手動で構成</entry>
    <entry key="OptionHelpEnableMultitasking">タスク、割り込み、共有変数の保護、および他のマルチタスク構成要素を指定します。</entry>
    <entry key="OptionNameEnableKLimiting">構造体内の検証の深さの設定</entry>
    <entry key="OptionHelpEnableKLimiting">構造体内の検証の深さを設定することを指定します。</entry>
    <entry key="OptionNameEnableReportGeneration">レポートの生成</entry>
    <entry key="OptionHelpEnableReportGeneration">静的解析の結果からレポートを生成します。</entry>
    <entry key="OptionNameEntryPoints">タスク</entry>
    <entry key="OptionHelpEntryPoints">解析するタスクのリストを指定します。これらのエントリ ポイントではパラメーターを使わないでください。&lt;BR&gt;タスクのエントリ ポイントがパラメーターを伴う関数の場合は、これらの関数を&lt;BR&gt;パラメーターのない関数にカプセル化し、パラメーターはグローバル変数によって渡すことができます。</entry>
    <entry key="OptionNameExternalMultitaskingType">マルチタスク用の外部ファイル</entry>
    <entry key="OptionHelpExternalMultitaskingType">マルチタスク用に OSEK OIL ファイルまたは AUTOSAR ARXML ファイルを指定します。</entry>
    <entry key="OptionNameFastAnalysis">Bug Finder を高速解析モードで使用</entry>
    <entry key="OptionHelpFastAnalysis">Bug Finder を高速解析モードで実行します。変更されたファイルのみが解析されます。&lt;BR&gt;メモ: 高速解析モードは、Bug Finder の欠陥ルールとコーディング ルールのサブセットのみをチェックします。</entry>
    <entry key="OptionNameFloatRoundingMode">浮動小数点の丸めモード</entry>
    <entry key="OptionHelpFloatRoundingMode">浮動小数点演算の結果を判定する場合に考慮する丸めモードを指定します。 &lt;BR&gt; &lt;ul&gt; &lt;li&gt;to-nearest: 最も近い整数への丸めモードを考慮し、拡張精度は考慮しません。 &lt;li&gt;all: すべての丸めモードと拡張精度を考慮します。 &lt;/ul&gt;</entry>
    <entry key="OptionNameFunctionsCalledAfterLoop">終了関数</entry>
    <entry key="OptionHelpFunctionsCalledAfterLoop">生成された main により循環ループの後に呼び出される関数を指定します。</entry>
    <entry key="OptionNameFunctionsCalledBeforeMain">初期化関数</entry>
    <entry key="OptionHelpFunctionsCalledBeforeMain">初期化関数を指定します。&lt;br&gt;自動生成された main によって他の関数よりも先に呼び出される関数です。</entry>
    <entry key="OptionNameFunctionsToStub">スタブを生成する関数</entry>
    <entry key="OptionHelpFunctionsToStub">Polyspace でスタブを生成する関数を指定します。</entry>
    <entry key="OptionNameGenerateResultsFor">ソースおよび次に対する結果を生成する:</entry>
    <entry key="OptionHelpGenerateResultsFor">解析の結果を必要とするヘッダー ファイルを指定します。 &lt;ul&gt;&lt;li&gt;source-headers: ソース ファイルと同じフォルダー内のヘッダー &lt;/li&gt; &lt;li&gt;all-headers: ソース ファイルと同じフォルダー内のヘッダー、インクルード フォルダー内のヘッダー &lt;/li&gt; &lt;li&gt;custom: 指定したファイルまたは指定したフォルダー内のファイル &lt;/li&gt;&lt;/ul&gt; このオプションはコーディング ルール、コード メトリクスおよび Polyspace Bug Finder の欠陥にのみ適用されます。</entry>
    <entry key="OptionNameIgnoreAssemblyCode">アセンブリ コードを無視</entry>
    <entry key="OptionHelpIgnoreAssemblyCode">すべてのアセンブリ コードを無視します。&lt;br&gt;このオプションをオンにしない限り、ソフトウェアはアセンブリ コードが C/C++ 変数を変更できると仮定します。</entry>
    <entry key="OptionNameInitOnlyMode">初期化コードのみを検証</entry>
    <entry key="OptionHelpInitOnlyMode">コードの初期化セクションにランタイム エラーおよび他の問題がないかどうかをチェックします。&lt;BR&gt;アプリケーション全体を検証する場合、初期化コードは 'main' の冒頭からプラグマ 'polyspace_end_of_init' までです。&lt;BR&gt;モジュールまたはライブラリを検証する場合、初期化コードは初期化関数のシーケンスです。</entry>
    <entry key="OptionNameInline">インライン</entry>
    <entry key="OptionHelpInline">リストされた手続きのそれぞれに対し、すべての呼び出しについて手続きのクローンを作成します。&lt;br&gt;このインライン化によって、指定された手続きでのエイリアス数が減り、精度が向上する可能性があります。&lt;br&gt;&lt;br&gt;&lt;b&gt;警告:&lt;/b&gt; このオプションを多用するとコードが過度に重複し、スケーリングの問題が発生することがあります。</entry>
    <entry key="OptionNameInternalOther">InternalOther</entry>
    <entry key="OptionHelpInternalOther"/>
    <entry key="OptionNameInterrupts">割り込み</entry>
    <entry key="OptionHelpInterrupts">システム内の割り込みのリストを指定します。割り込みは周期タスクであり、プリエンプトされません。</entry>
    <entry key="OptionNameKLimiting">構造体内の検証の深さ</entry>
    <entry key="OptionHelpKLimiting">ポインター解析で識別する構造体内のフィールド数を制限します。つまり、構造体内の解析の深さを指定します。&lt;br&gt;&lt;br&gt;警告: 2 以上の値を使用してください。そうしない場合、検証に時間がかかったり、精度が低下したりします。</entry>
    <entry key="OptionNameLibrary">使用するライブラリ</entry>
    <entry key="OptionHelpLibrary">プログラムで使用するライブラリを指定します。&lt;BR&gt;解析では、汎用的なスタブの代わりに、これらライブラリの関数に対するスマート スタブが使用されます (また、関数実装のチェックは試みません)。&lt;BR&gt;このオプションを使用することで、精度を下げずに解析が高速化でき、ライブラリ関数の呼び出しに際してライブラリ固有のチェックがトリガーされます。</entry>
    <entry key="OptionNameMain">メイン エントリ ポイント</entry>
    <entry key="OptionHelpMain">既存の main 関数を検証の開始点として使用します。</entry>
    <entry key="OptionNameMainGenerator">モジュールまたはライブラリの検証</entry>
    <entry key="OptionHelpMainGenerator">'main' 関数を自動生成します。</entry>
    <entry key="OptionNameMainGeneratorMBD">モデル生成コードの検証</entry>
    <entry key="OptionHelpMainGeneratorMBD">解析中のコードがモデルから生成されていることを指定します。Polyspace 検証を Simulink から開始する場合、このオプションは自動的に設定されます。</entry>
    <entry key="OptionNameMainGeneratorCalls">呼び出す関数</entry>
    <entry key="OptionHelpMainGeneratorCalls">パブリックと見なされる関数を指定します。&lt;BR&gt;自動生成された main によってランダムな順序で呼び出される関数です。</entry>
    <entry key="OptionNameFunctionsCalledInLoop">ステップ関数</entry>
    <entry key="OptionHelpFunctionsCalledInLoop">ループ内で呼び出す一連の関数を指定します。&lt;BR&gt;&lt;li&gt;なし - このオプションはサブプログラムを呼び出さない場合に使用します。&lt;BR&gt;&lt;li&gt;未使用 - 生成された main はファイル内で呼び出されない関数のみを呼び出します。&lt;BR&gt;&lt;li&gt;すべて - 生成された main はすべての関数を呼び出します。たとえば、関数 'f' が 'g' によって呼び出される場合、生成された main は 'f' も、各パラメーターにランダムな値を当てて呼び出します。&lt;BR&gt;&lt;li&gt;カスタム - 生成された main によって呼び出される関数のリストを指定します。</entry>
    <entry key="OptionNameMainGeneratorWritesVariables">初期化する変数</entry>
    <entry key="OptionHelpMainGeneratorWritesVariables">生成された main によるグローバル変数の初期化方法を指定します。&lt;BR&gt;&lt;li&gt;uninit - main ジェネレーターは初期化されないグローバル変数に乱数を書き込みます&lt;BR&gt;&lt;li&gt;none - main はどのグローバル変数にも書き込みを行いません&lt;BR&gt;&lt;li&gt;public - 静的および const 変数を除くすべての変数に対し、利用可能な値の全範囲を表現する "乱数" 値が代入されます&lt;BR&gt;&lt;li&gt;all - すべての変数に対し、利用可能な値の全範囲を表現する "乱数" 値が代入されます&lt;BR&gt;&lt;li&gt;custom - リストにある変数のみに対し、利用可能な値の全範囲を表現する "乱数" 値が代入されます</entry>
    <entry key="OptionNameVariablesWrittenBeforeLoop">パラメーター</entry>
    <entry key="OptionHelpVariablesWrittenBeforeLoop">循環システムのパラメーターと見なされる一連の変数を指定します。&lt;BR&gt;この変数は、生成された main によって循環ループよりも先に書き込まれます。</entry>
    <entry key="OptionNameMisra3AgcMode">MISRA C:2012 の生成されたコードの要件を使用</entry>
    <entry key="OptionHelpMisra3AgcMode">自動コード生成のコンテキストで MISRA C:2012 に沿ってチェックします。</entry>
    <entry key="OptionNameMisraC2023AgcMode">MISRA C:2023 の生成されたコードの要件を使用</entry>
    <entry key="OptionHelpMisraC2023AgcMode">自動コード生成のコンテキストで MISRA C:2023 に沿ってチェックします。</entry>
    <entry key="OptionNameModulesPrecision">特定の精度</entry>
    <entry key="OptionHelpModulesPrecision">指定された [精度レベル] (-O) とは異なる精度で解析されるコンパイル ユニットのリストを指定します。&lt;BR&gt;&lt;BR&gt;既定では、検証にはすべてのコンパイル ユニットに同じ精度が使用されます。&lt;BR&gt;コンパイル ユニットは .c ファイルのみです。</entry>
    <entry key="OptionNameNoCodeMetrics">no-code-metrics</entry>
    <entry key="OptionHelpNoCodeMetrics"/>
    <entry key="OptionNameNoConstructorsInitCheck">メンバー初期化チェックをスキップ</entry>
    <entry key="OptionHelpNoConstructorsInitCheck">生成された main に対し、すべてのクラス フィールドが初期化されているかどうかをチェックしないように指定します。</entry>
    <entry key="OptionNameNoDefInitGlob">グローバル変数の既定の初期化を無視する</entry>
    <entry key="OptionHelpNoDefInitGlob">既定でグローバル変数が未初期化として処理されるよう指定します。&lt;BR&gt; - 'on': Polyspace はグローバル変数の暗黙的な初期化を無視します。&lt;BR&gt;グローバル変数の読み取りが書き込みより前に実行されると、未初期化変数エラーが発生します。&lt;BR&gt; - 'off': Polyspace はグローバル変数が ANSI C (ISO C++) 規格に従って初期化されるものとみなします。&lt;BR&gt; 既定の初期化値は float では 0.0、int と char では 0 です。</entry>
    <entry key="OptionNameNoExtern_C">リンク エラーを無視</entry>
    <entry key="OptionHelpNoExtern_C">C リンケージと C++ リンケージを区別せずに処理します。</entry>
    <entry key="OptionNameOsekMultitasking">OIL ファイルの選択</entry>
    <entry key="OptionHelpOsekMultitasking">OSEK マルチタスキング構成の記述が格納されている OIL ファイルのリストを指定します。&lt;ul&gt;&lt;li&gt;自動: Polyspace がソース ファイルまたはヘッダー ファイルを含むフォルダー内で OIL ファイルを検索します。&lt;/li&gt; &lt;li&gt;カスタム: OIL ファイル、または OIL ファイルが格納されているフォルダーを指定します。Polyspace は指定したフォルダーとサブフォルダー内で OIL ファイルを検索します。&lt;/li&gt;&lt;/ul&gt;</entry>
    <entry key="OptionNameOtherPolyspaceOptions">その他</entry>
    <entry key="OptionHelpOtherPolyspaceOptions">静的解析用に追加のコマンド ライン フラグを指定します。</entry>
    <entry key="OptionNamePathSensitivityDelta">手続き間解析の精度を高める</entry>
    <entry key="OptionHelpPathSensitivityDelta">手続き間解析の精度を高めます。&lt;br&gt;&lt;br&gt;警告: 3 以下の値を使用してください。&lt;br&gt;そうしない場合、検証に時間がかかります。</entry>
    <entry key="OptionNamePermissiveFunctionPointer">関数ポインターの許容呼び出し</entry>
    <entry key="OptionHelpPermissiveFunctionPointer">既定では、Polyspace は関数ポインターと関数の型が同一の場合にのみ関数ポインターを使用して関数を呼び出すことができます。&lt;br&gt;たとえば、型: &lt;br&gt;&lt;i&gt;int f(int*)&lt;/i&gt;&lt;br&gt; の関数を型: &lt;br&gt;&lt;i&gt;int fptr(void*)&lt;/i&gt; の関数ポインターで呼び出すことはできません。&lt;br&gt;このオプションを設定すると、Polyspace はこのような呼び出しを許可します。&lt;br&gt;関数ポインターを広範に使用するアプリケーションでこのオプションを使用すると、Polyspace はより多くの実行パスを考慮しなければならなくなるため、&lt;br&gt;パフォーマンスが大幅に低下し、多数のオレンジ チェックが示される場合があります。</entry>
    <entry key="OptionNamePostAnalysisCommand">コード検証の終了後に適用するコマンド/スクリプト</entry>
    <entry key="OptionHelpPostAnalysisCommand">コード検証の完了後に実行しなければならないコマンドまたはファイルを指定します。</entry>
    <entry key="OptionNamePostPreprocessingCommand">前処理済みファイルに適用するコマンド/スクリプト</entry>
    <entry key="OptionHelpPostPreprocessingCommand">各ソース ファイルの前処理段階後に所定のコマンドを実行します。&lt;BR&gt;&lt;BR&gt;コマンド ファイルの絶対パスとファイル名を指定する必要があります。&lt;BR&gt;コマンドは、標準入力から読み取り、標準出力に結果を生成するものでなければなりません。</entry>
    <entry key="OptionNamePreAnalysisCommand">pre-analysis-command</entry>
    <entry key="OptionHelpPreAnalysisCommand"/>
    <entry key="OptionNamePrecisionLevel">精度レベル</entry>
    <entry key="OptionHelpPrecisionLevel">Code Prover 解析の精度レベルを指定します。精度が高くなると検証時間は長くなりますが、オレンジ チェックは少なくなります。</entry>
    <entry key="OptionNameReportOutputFormat">出力形式</entry>
    <entry key="OptionHelpReportOutputFormat">レポートの出力形式を指定します。</entry>
    <entry key="OptionNameReportTemplateBugFinder">レポート テンプレート (Bug Finder)</entry>
    <entry key="OptionHelpReportTemplateBugFinder">Bug Finder の解析結果からレポートを生成するためのテンプレートを指定します。</entry>
    <entry key="OptionNameReportTemplateCodeProver">レポート テンプレート (Code Prover)</entry>
    <entry key="OptionHelpReportTemplateCodeProver">Code Prover の解析結果からレポートを生成するためのテンプレートを指定します。</entry>
    <entry key="OptionNameRoutineInterrupts">すべての割り込みを無効にする</entry>
    <entry key="OptionHelpRoutineInterrupts">Bug Finder 解析で割り込みを無効にするルーチンと有効にするルーチンを入力します。&lt;BR&gt;&lt;ul&gt;&lt;li&gt;無効にするルーチンを呼び出すと、他のタスクと割り込みによるタスクのプリエンプションが回避されます。&lt;li&gt;有効にするルーチンを呼び出すと、以前無効になっていた場合は他のタスクと割り込みによるタスクのプリエンプションが再び有効になります。&lt;/ul&gt;</entry>
    <entry key="OptionNameSharedVariablesMode">グローバル変数の共有と使用のみを表示</entry>
    <entry key="OptionHelpSharedVariablesMode">高速解析を実行して、グローバル変数の共有と使用を判別します。&lt;BR&gt;&lt;BR&gt;解析結果には以下の内容が含まれます:&lt;BR&gt;&lt;ul&gt;&lt;li&gt;グローバル変数 (共有、非共有、使用、未使用)&lt;li&gt;コーディング ルール (有効な場合)&lt;li&gt;コード メトリクス (有効な場合)&lt;/ul&gt;&lt;BR&gt;変数アクセス ビューには、すべてのグローバル変数に対する読み取りおよび書き込み操作も表示されます。</entry>
    <entry key="OptionNameSignedIntegerOverflows">符号付き整数のオーバーフロー モード</entry>
    <entry key="OptionHelpSignedIntegerOverflows">符号付き整数の計算によって範囲外の値 (範囲はデータ型によって決まります) が発生した場合は、Code Prover の動作を指定します:&lt;ul&gt;&lt;li&gt;allow - Code Prover はオーバーフローにフラグを立てません。オーバーフローした結果はラップされます。&lt;br&gt;たとえば、MAX_INT + 1 の結果は MIN_INT にラップされます。&lt;br&gt;&lt;li&gt;forbid (既定) - Code Prover はオーバーフローにフラグを立てます。オーバーフローを引き起こす値は、以降の演算に伝播されません。&lt;br&gt; この動作は ANSI C (ISO C++) 規格に準拠しています。&lt;br&gt;&lt;li&gt;warn-with-wrap-around - Code Prover はオーバーフローにフラグを立てます。オーバーフローした結果はラップされます。</entry>
    <entry key="OptionNameSizeInBytes">構造体の部分的割り当てを許可</entry>
    <entry key="OptionHelpSizeInBytes">&lt;i&gt;malloc&lt;/i&gt; または &lt;i&gt;cast&lt;/i&gt; ステートメントからの部分的なメモリの割り当てを許可します。</entry>
    <entry key="OptionNameImpactAnalysis">影響分析を有効化</entry>
    <entry key="OptionHelpImpactAnalysis">ソースとシンクとして指定されているプログラム要素間の影響の有無を確認します。</entry>
    <entry key="OptionNameImpactSpecifications">ソースとシンクの指定</entry>
    <entry key="OptionHelpImpactSpecifications">プログラム要素をソースとシンクとして特定している XML ファイルを指定して、影響分析を行います。</entry>
    <entry key="OptionNameImpactAnalysisOnly">影響分析の結果のみを表示</entry>
    <entry key="OptionHelpImpactAnalysisOnly">実行時エラーの通常の Code Prover チェックをスキップして、影響分析のみを行います。</entry>
    <entry key="OptionNameStackUsage">スタック使用量の計算</entry>
    <entry key="OptionHelpStackUsage">スタックの推定使用量の計算と表示</entry>
    <entry key="OptionNameStopIfCompileError">ファイルがコンパイルされない場合は解析を停止</entry>
    <entry key="OptionHelpStopIfCompileError">このオプションを使用してすべてのコンパイル エラーを解決して、すべてのファイルが必ず解析されるようにします。&lt;BR&gt;既定では、コンパイル エラーのあるファイルは解析されません。これらのファイルの関数は、残りの解析用にスタブされます。</entry>
    <entry key="OptionNameStubEmbeddedCoderLookupTableFunctions">Embedded Coder ルックアップ テーブルのスタブを生成</entry>
    <entry key="OptionHelpStubEmbeddedCoderLookupTableFunctions">Embedded Coder ルックアップ テーブルのスタブを自動生成するにはこのオプションをオンにします</entry>
    <entry key="OptionNameStubbedPointersAreUnsafe">環境ポインターが安全でないことを考慮する</entry>
    <entry key="OptionHelpStubbedPointersAreUnsafe">特に制約がある場合を除き､環境ポインターが NULL である可能性があることを指定します｡&lt;br&gt;環境ポインターは次のいずれかです。&lt;br&gt;&lt;ul&gt;&lt;li&gt;global または extern､&lt;/li&gt;&lt;li&gt;スタブ化された関数の戻り値､&lt;/li&gt;&lt;li&gt;呼び出しが生成されたユーザー定義関数のパラメーター｡&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;このオプションを使用しない限り､環境ポインターは既定で、安全かつ NULL ではないとみなされます｡&lt;br&gt;</entry>
    <entry key="OptionNameSystemInputsFrom">次の関数の入力を考慮する</entry>
    <entry key="OptionHelpSystemInputsFrom">解析ですべての可能な入力値が考慮される、対象の関数を指定します。 &lt;ul&gt;&lt;li&gt;auto: main 関数およびタスク (存在する場合)、または少なくとも 1 つの呼び出し先をもつ呼び出されない関数 (main 関数が存在しない場合)&lt;/li&gt; &lt;li&gt;uncalled: 呼び出されないすべての関数&lt;/li&gt; &lt;li&gt;all: すべての関数&lt;/li&gt; &lt;li&gt;custom: ユーザー指定の関数&lt;/li&gt;&lt;/ul&gt;</entry>
    <entry key="OptionNameTemporalExclusions">時間的に排他なタスク</entry>
    <entry key="OptionHelpTemporalExclusions">同時には実行できないタスクを指定します。</entry>
    <entry key="OptionNameTimeout">検証時間の制限</entry>
    <entry key="OptionHelpTimeout">指定した制限時間 X[.Y] 以内に検証が完了しない場合、検証を停止します。ここで、X は時間数を、Y (オプション) は時間の小数部を表します。&lt;br&gt;&lt;br&gt;例:&lt;ul&gt;&lt;li&gt;timeout 5.75 は 5 時間 45 分の制限時間を指定します。&lt;br&gt;&lt;li&gt;timeout 3.5 は 3 時間 30 分の制限時間を指定します。&lt;/ul&gt;検証が指定の制限時間内に完了しない場合は、失敗と見なされます。</entry>
    <entry key="OptionNameVerificationLevel">検証レベル</entry>
    <entry key="OptionHelpVerificationLevel">検証レベルを指定します。検証レベルを高くすると選択率が上がります。&lt;br&gt;検証レベルを上げると検証時間も長くなります。</entry>
    <entry key="OptionNameUncalledFunctionChecks">呼び出されない関数の検出</entry>
    <entry key="OptionHelpUncalledFunctionChecks">実行時に main または別のエントリ ポイントから直接的または間接的に呼び出されない関数を検出します。&lt;br&gt; &lt;li&gt;none - 呼び出されない関数を検出しない。&lt;br&gt;&lt;li&gt;never-called - 定義済みの呼び出されない関数を検出。&lt;br&gt;関数 func が "never-called" と識別された場合、func からのみ呼び出される関数もすべて "never-called" として識別されます。&lt;br&gt;&lt;li&gt;called-from-unreachable - コードの到達不能の部分から呼び出される定義済みの関数を検出。&lt;br&gt;関数 func が "called-from-unreachable" と識別された場合、func からのみ呼び出される関数もすべて "called-from-unreachable" として識別されます。&lt;br&gt;&lt;li&gt;all - 呼び出されない関数をすべて検出</entry>
    <entry key="OptionNameUnitByUnit">ファイルを個別に検証</entry>
    <entry key="OptionHelpUnitByUnit">プロジェクトのソース ファイルごとに個別の検証ジョブを作成します。&lt;br&gt;各ファイルはコンパイルされてから、個別に検証されます。</entry>
    <entry key="OptionNameUnitByUnitCommonSource">共通のソース ファイル</entry>
    <entry key="OptionHelpUnitByUnitCommonSource">各ファイル検証とともに含めるファイルのリストを指定します。&lt;br&gt;このリストに含まれていない関数はスタブされます。</entry>
    <entry key="OptionNameUnsignedIntegerOverflows">符号なし整数のオーバーフロー モード</entry>
    <entry key="OptionHelpUnsignedIntegerOverflows">符号なし整数の計算によって範囲外の値 (範囲はデータ型によって決まります) が発生した場合は、Code Prover の動作を指定します:&lt;ul&gt;&lt;li&gt;allow (既定) - Code Prover はオーバーフローにフラグを立てません。オーバーフローした結果はラップされます。&lt;br&gt;たとえば、MAX_INT + 1 の結果は MIN_INT にラップされます。&lt;br&gt; この動作は ANSI C (ISO C++) 規格に準拠しています。&lt;br&gt;&lt;li&gt;forbid - Code Prover はオーバーフローにフラグを立てます。オーバーフローを引き起こす値は、以降の演算に伝播されません。&lt;br&gt;&lt;li&gt;warn-with-wrap-around - Code Prover はオーバーフローにフラグを立てます。オーバーフローした結果はラップされます。</entry>
    <entry key="OptionNameVariablesWrittenInLoop">入力</entry>
    <entry key="OptionHelpVariablesWrittenInLoop">循環システムの入力と見なされる一連の変数を指定します。&lt;BR&gt;この変数は、生成された main によって循環ループの反復ごとにリセットされます。</entry>
    <entry key="OptionNameArithmeticSignedIntegerRightShift">算術シフトとして符号付き整数を右にシフト</entry>
    <entry key="OptionHelpArithmeticSignedIntegerRightShift">コンパイラが符号付き整数の右シフトを算術シフトとして実装するよう指定します (符号ビットは保持)。ほとんどのコンパイラはこれを実装しています。</entry>
    <entry key="OptionNameBoardName">ターゲット ボード名 (テスト)</entry>
    <entry key="OptionHelpBoardName">テストの実行対象とするハードウェア ボードを指定します。このオプションはテストにのみ適用されます。</entry>
    <entry key="OptionNameIntegerDivisionRounding">負の整数除算結果の負方向への丸め</entry>
    <entry key="OptionHelpIntegerDivisionRounding">コンパイラが、2 つの整数の除算による負の商を (負の無限大に向かうように) 負方向に丸めるよう指定します。たとえば、-5/3 は -2 に丸められます。</entry>
    <entry key="OptionNameEnablePortableWordSizes">移植可能なワード サイズを有効にする</entry>
    <entry key="OptionHelpEnablePortableWordSizes">コードの実行先となるターゲット プロセッサのワード サイズを保持した、ホスト コンピューターでのコードのコンパイルを許可します。</entry>
    <entry key="OptionNameNoUliterals">char16/32_t 型がコードで定義されるよう指定</entry>
    <entry key="OptionHelpNoUliterals">コンパイラが char16_t 型と char32_t 型を組み込み型として定義せず、代わりに明示的な typedef-s によって定義するよう指定します。このオプションは、char16_t 型と char32_t 型に対し型再宣言エラーが生ずる場合に使用します。このオプションによって、これらの型の Polyspace 定義が防止されます。</entry>
    <entry key="OptionNamePackAlignmentValue">パック アライメント値</entry>
    <entry key="OptionHelpPackAlignmentValue">構造体、共用体、その他の集約型に対しパックのアライメント (バイト単位) を指定します。</entry>
    <entry key="OptionNameExternalSymbols">外部シンボル</entry>
    <entry key="OptionHelpExternalSymbols">コード内にないシンボル (変数、関数、その他) の宣言を提供します。このオプションはテストにのみ適用されます。</entry>
    <entry key="OptionNameStaticAnalysisCompilerName">コンパイル ツールチェーン (静的解析)</entry>
    <entry key="OptionHelpStaticAnalysisCompilerName">ソース コードのビルドに使用するコンパイラを指定します。このオプションは静的解析にのみ適用されます。テスト用にコンパイル ツールチェーンを指定するには、オプション [コンパイル ツールチェーン (テスト)] を指定します。</entry>
    <entry key="OptionNameSfrTypes">SFR のタイプとサイズ</entry>
    <entry key="OptionHelpSfrTypes">SFR (特殊機能レジスタ) の型を、ビット単位のサイズ (8、16、または 32) と共に指定します。</entry>
    <entry key="OptionNameToolchainName">コンパイル ツールチェーン (テスト)</entry>
    <entry key="OptionHelpToolchainName">ソース コードのビルドに使用するコンパイラを指定します。このオプションはテストにのみ適用されます。静的解析用にコンパイル ツールチェーンを指定するには、オプション [コンパイル ツールチェーン (静的解析)] を指定します。</entry>
    <entry key="OptionNameEnableCustomOptions">ツールチェーンのカスタマイズを有効にする</entry>
    <entry key="OptionHelpEnableCustomOptions">ツールチェーンの既定の仕様をオーバーライドします。</entry>
    <entry key="OptionNameToolchainOptions">ツールチェーン オプション</entry>
    <entry key="OptionHelpToolchainOptions">コンパイラやリンカなど、ツールチェーン オプションを指定します。</entry>
    <entry key="OptionNameCStandard">C 標準バージョン</entry>
    <entry key="OptionHelpCStandard">コンパイルで使用する C 標準バージョンを指定します。</entry>
    <entry key="OptionNameCppStandard">C++ 標準バージョン</entry>
    <entry key="OptionHelpCppStandard">コンパイルで使用する C++ 標準バージョンを指定します。</entry>
    <entry key="OptionNameDefines">プリプロセッサ定義</entry>
    <entry key="OptionHelpDefines">name=value の形式で、マクロの定義を指定します。たとえば、int32_t=int は前処理済みのコード内で、int32_t のすべての出現箇所を int に置き換えます。値を空のままにすると、マクロは前処理済みのコードから削除されます。名前のみを (=value の部分なしで) 入力することもできます。この場合、マクロは 1 に置き換えられます。</entry>
    <entry key="OptionNameImplicitCompilerDefinesC">暗黙的な C コンパイラ定義</entry>
    <entry key="OptionHelpImplicitCompilerDefinesC">コンパイラからのプリプロセッサ定義。このオプションは、Polyspace プロジェクトをビルド コマンドから作成する場合、自動的に設定されます。</entry>
    <entry key="OptionNameImplicitCompilerDefinesCpp">暗黙的な C++ コンパイラ定義</entry>
    <entry key="OptionHelpImplicitCompilerDefinesCpp">コンパイラからのプリプロセッサ定義。このオプションは、Polyspace プロジェクトをビルド コマンドから作成する場合、自動的に設定されます。</entry>
    <entry key="OptionNameImplicitCompilerDefinesAsm">暗黙的な Asm コンパイラ定義</entry>
    <entry key="OptionHelpImplicitCompilerDefinesAsm">コンパイラからのプリプロセッサ定義。このオプションは、Polyspace プロジェクトをビルド コマンドから作成する場合、自動的に設定されます。</entry>
    <entry key="OptionNameImplicitCompilerIncludePathsC">暗黙的な C コンパイラ インクルード パス</entry>
    <entry key="OptionHelpImplicitCompilerIncludePathsC">コンパイラからのインクルード パス。このオプションは、Polyspace プロジェクトをビルド コマンドから作成する場合、自動的に設定されます。</entry>
    <entry key="OptionNameImplicitCompilerIncludePathsCpp">暗黙的な C++ コンパイラ インクルード パス</entry>
    <entry key="OptionHelpImplicitCompilerIncludePathsCpp">コンパイラからのインクルード パス。このオプションは、Polyspace プロジェクトをビルド コマンドから作成する場合、自動的に設定されます。</entry>
    <entry key="OptionNameImplicitCompilerIncludePathsAsm">暗黙的な Asm コンパイラ インクルード パス</entry>
    <entry key="OptionHelpImplicitCompilerIncludePathsAsm">コンパイラからのインクルード パス。このオプションは、Polyspace プロジェクトをビルド コマンドから作成する場合、自動的に設定されます。</entry>
    <entry key="OptionNameIncludePaths">インクルード パス</entry>
    <entry key="OptionHelpIncludePaths">インクルード ファイルを含むフォルダーへのパスを指定します。Polyspace は、#include ステートメントと共にソースに含まれているヘッダー ファイルを、これらのフォルダー内で検索します。</entry>
    <entry key="OptionNameExternalIncludePaths">外部テストのインクルード パス</entry>
    <entry key="OptionHelpExternalIncludePaths">外部テストのインクルード ファイルを含むフォルダーへのパスを指定します。Polyspace は、#include ステートメントと共に外部テストに含まれているヘッダー ファイルを、これらのフォルダー内で検索します。</entry>
    <entry key="OptionNameAdditionalIncludePaths">追加のインクルード パス</entry>
    <entry key="OptionHelpAdditionalIncludePaths">追加のインクルード ファイルを含むフォルダーへのパスを指定します。Polyspace は、構成の [プロジェクト] タブで指定したインクルード ファイルに加えて、これらのファイルをインクルードします。</entry>
    <entry key="OptionNamePreIncludes">強制インクルード</entry>
    <entry key="OptionHelpPreIncludes">どのソース ファイルでも #include されるファイルを指定します。これらの #include は前処理の前に追加されますが、元のソースは変更されません。これらのファイルを使用して、ソース コードでは定義されていない型などを定義します。このオプションは静的解析にのみ適用されます。</entry>
    <entry key="OptionNameUndefines">無効なプリプロセッサ定義</entry>
    <entry key="OptionHelpUndefines">未定義と見なす必要があるマクロを指定します。</entry>
    <entry key="OptionNameCoverageCompactMode">カバレッジ計算のコンパクト モードを有効にする</entry>
    <entry key="OptionHelpCoverageCompactMode">このオプションを使用して、テスト実行可能ファイルの実行に必要なメモリの量を減らします。</entry>
    <entry key="OptionNameCoverageMetricLevel">カバレッジ メトリクス</entry>
    <entry key="OptionHelpCoverageMetricLevel">カバレッジ メトリクス計算のレベルを指定します。 &lt;BR&gt;&lt;li&gt;ステートメント &lt;li&gt; 判定 &lt;li&gt; 条件 &lt;li&gt; MC/DC。 &lt;BR&gt; それぞれのレベルには、前のレベルのメトリクスが含まれます。</entry>
    <entry key="OptionNameRelationalBoundary">関係演算子の境界カバレッジを有効にする</entry>
    <entry key="OptionHelpRelationalBoundary">ソース コードを関係演算子の境界カバレッジ用にインストルメント化する必要があるかどうかを指定します。</entry>
    <entry key="OptionNameRelationalBoundaryAbsTol">絶対許容誤差</entry>
    <entry key="OptionHelpRelationalBoundaryAbsTol">関係演算子の境界カバレッジの絶対許容誤差を指定します。</entry>
    <entry key="OptionNameRelationalBoundaryRelTol">相対許容誤差</entry>
    <entry key="OptionHelpRelationalBoundaryRelTol">関係演算子の境界カバレッジの相対許容誤差を指定します。</entry>
    <entry key="OptionNameExcludeFor">ExcludeFor</entry>
    <entry key="OptionHelpExcludeFor"/>
    <entry key="OptionNameLibraries">ライブラリ</entry>
    <entry key="OptionHelpLibraries">テストをビルドするためのプリコンパイルされたライブラリを指定します。</entry>
    <entry key="OptionNameExternalLibraries">外部テスト用ライブラリ</entry>
    <entry key="OptionHelpExternalLibraries">外部テストをビルドするためのプリコンパイルされたライブラリを指定します。</entry>
    <entry key="OptionNameLibraryPaths">ライブラリ パス</entry>
    <entry key="OptionHelpLibraryPaths">テストをビルドするためのプリコンパイルされたライブラリを含むフォルダーを指定します。</entry>
    <entry key="OptionNameExternalLibraryPaths">外部テストのライブラリ パス</entry>
    <entry key="OptionHelpExternalLibraryPaths">外部テストをビルドするためのプリコンパイルされたライブラリを含むフォルダーを指定します。</entry>
    <entry key="OptionNamePath">パス</entry>
    <entry key="OptionHelpPath"/>
    <entry key="OptionNameAlignment">アライメント</entry>
    <entry key="OptionHelpAlignment">構造体のような集約型のメンバーの最大アライメント (ビット単位) を指定します。たとえば、アライメントが 8 ビットである場合、最小のデータ型をもつメンバーもこれに揃えられ、構造体はメンバーと最後のパディングなしで保存できます。</entry>
    <entry key="OptionNameAtomicFloatSize">AtomicFloatSize</entry>
    <entry key="OptionHelpAtomicFloatSize"/>
    <entry key="OptionNameAtomicIntegerSize">AtomicIntegerSize</entry>
    <entry key="OptionHelpAtomicIntegerSize"/>
    <entry key="OptionNameCharBitsSize">char のサイズ</entry>
    <entry key="OptionHelpCharBitsSize">'char' データ型のサイズを指定します (ビット単位)。</entry>
    <entry key="OptionNameDoubleBitsSize">double のサイズ</entry>
    <entry key="OptionHelpDoubleBitsSize">'double' データ型のサイズを指定します (ビット単位)。</entry>
    <entry key="OptionNameEndianess">バイト順</entry>
    <entry key="OptionHelpEndianess">バイト順 (エンディアン) がリトル エンディアン (最下位バイトが最初) かビッグ エンディアン (最上位バイトが最初) かを指定します。</entry>
    <entry key="OptionNameEnumTypeDefinition">enum の基となる型</entry>
    <entry key="OptionHelpEnumTypeDefinition">enum の基となる型がどのように決定されるのかを指定します。</entry>
    <entry key="OptionNameFloatBitsSize">float のサイズ</entry>
    <entry key="OptionHelpFloatBitsSize">'float' データ型のサイズを指定します (ビット単位)。</entry>
    <entry key="OptionNameHalfBitsSize">HalfBitsSize</entry>
    <entry key="OptionHelpHalfBitsSize"/>
    <entry key="OptionNameIntBitsSize">int のサイズ</entry>
    <entry key="OptionHelpIntBitsSize">'int' データ型のサイズを指定します (ビット単位)。</entry>
    <entry key="OptionNameIsHalfSupported">IsHalfSupported</entry>
    <entry key="OptionHelpIsHalfSupported"/>
    <entry key="OptionNameIsLongLongSupported">long long のサポート</entry>
    <entry key="OptionHelpIsLongLongSupported">コンパイラがデータ型 'long long' をサポートするかどうかを指定します。ほとんどの C99 コンパイラはこのデータ型をサポートします。</entry>
    <entry key="OptionNameLongBitsSize">long のサイズ</entry>
    <entry key="OptionHelpLongBitsSize">'long' データ型のサイズを指定します (ビット単位)。</entry>
    <entry key="OptionNameLongDoubleBitsSize">long double のサイズ</entry>
    <entry key="OptionHelpLongDoubleBitsSize">'long double' データ型のサイズを指定します (ビット単位)。</entry>
    <entry key="OptionNameLongLongBitsSize">long long のサイズ</entry>
    <entry key="OptionHelpLongLongBitsSize">'long long' データ型のサイズを指定します (ビット単位)。</entry>
    <entry key="OptionNameManufacturer">プロセッサの製造元</entry>
    <entry key="OptionNameConfigMode">構成モード</entry>
    <entry key="OptionHelpConfigMode">構成の種類を表示します (読み取り専用)。</entry>
    <entry key="OptionHelpManufacturer">プロセッサの製造元</entry>
    <entry key="OptionNameProcessorName">プロセッサ名</entry>
    <entry key="OptionHelpProcessorName">プロセッサ名</entry>
    <entry key="OptionNamePointerBitsSize">ポインターのサイズ</entry>
    <entry key="OptionHelpPointerBitsSize">ポインターのデータ型のサイズを指定します (ビット単位)。</entry>
    <entry key="OptionNamePtrDiffT">ptrdiff_t の型</entry>
    <entry key="OptionHelpPtrDiffT">データ型 'ptrdiff_t' の基となる型を指定します。</entry>
    <entry key="OptionNameShortBitsSize">short のサイズ</entry>
    <entry key="OptionHelpShortBitsSize">'short' データ型のサイズを指定します (ビット単位)。</entry>
    <entry key="OptionNameSignedChar">プレーンの char を符号付きとする</entry>
    <entry key="OptionHelpSignedChar">'char' データ型を符号付きに指定します。</entry>
    <entry key="OptionNameSizeT">size_t の型</entry>
    <entry key="OptionHelpSizeT">データ型 'size_t' の基となる型を指定します。</entry>
    <entry key="OptionNameSpecificOptions">SpecificOptions</entry>
    <entry key="OptionHelpSpecificOptions"/>
    <entry key="OptionNameStructureMinAlignment">構造体の最小アライメント</entry>
    <entry key="OptionHelpStructureMinAlignment">struct 型または共用体型の変数の最小アライメント (バイト単位) を指定します。</entry>
    <entry key="OptionNameWCharT">wchar_t の型</entry>
    <entry key="OptionHelpWCharT">データ型 'wchar_t' の基となる型を指定します。</entry>
    <entry key="OptionNameWordSize">ネイティブなワード サイズ</entry>
    <entry key="OptionHelpWordSize">テスト ハードウェアのプロセッサが一度に処理できるビット数を指定します。</entry>
    <entry key="OptionNameExtraAsmFlags">追加のアセンブラー フラグ</entry>
    <entry key="OptionHelpExtraAsmFlags">アセンブリ コードのビルドを示すフラグを指定します。これらのフラグは静的解析時には使用されません。</entry>
    <entry key="OptionNameExtraCFlags">追加の C フラグ</entry>
    <entry key="OptionHelpExtraCFlags">プロジェクトのビルドに必要な C のコンパイル フラグを指定します。このオプションは、他のオプションを通して入力できないコンパイラ フラグを入力するために使用します。これらのフラグは静的解析時には使用されません。</entry>
    <entry key="OptionNameExtraCppFlags">追加の C++ フラグ</entry>
    <entry key="OptionHelpExtraCppFlags">プロジェクトのビルドに必要な C++ のコンパイル フラグを指定します。このオプションは、他のオプションを通して入力できないコンパイラ フラグを入力するために使用します。これらのフラグは静的解析時には使用されません。</entry>
    <entry key="OptionNameExtraLinkFlags">リンクの追加フラグ</entry>
    <entry key="OptionHelpExtraLinkFlags">プロジェクトのビルドに必要なリンカー フラグを指定します。これらのフラグは静的解析時には使用されません。</entry>
    <entry key="OptionNameLanguage">ソース コードの言語</entry>
    <entry key="OptionHelpLanguage">プロジェクトのソース コード言語を指定します。&lt;BR&gt;&lt;li&gt; C ソース コードでは C&lt;li&gt; C++ ソース コードでは C++ &lt;li&gt; 混在ソース コードでは C-CPP</entry>
    <entry key="OptionNameTarget">ターゲット</entry>
    <entry key="OptionHelpTarget"/>
    <entry key="OptionNameFileSpecificLanguage">ソース コードの言語</entry>
    <entry key="OptionHelpFileSpecificLanguage">選択したファイルのソース コード言語を指定します</entry>
    <entry key="OptionNameFileSpecificExtraFlags">追加フラグ</entry>
    <entry key="OptionHelpFileSpecificExtraFlags">選択したファイルの追加フラグを指定します</entry>
    <entry key="OptionNameFileSpecificImplicitCompilerDefines">暗黙的なコンパイラ定義</entry>
    <entry key="OptionHelpFileSpecificImplicitCompilerDefines">選択したファイルについて、コンパイラから渡されるプリプロセッサ定義。このオプションは、Polyspace プロジェクトをビルド コマンドから作成する場合、自動的に設定されます。</entry>
    <entry key="OptionNameFileSpecificImplicitCompilerIncludePaths">暗黙的なコンパイラ インクルード パス</entry>
    <entry key="OptionHelpFileSpecificImplicitCompilerIncludePaths">コンパイラから渡される、選択したファイルのインクルード パス。このオプションは、Polyspace プロジェクトをビルド コマンドから作成する場合、自動的に設定されます。</entry>
    <entry key="OptionNameOverrideOp">オーバーライド</entry>
    <entry key="OptionHelpOverrideOp"/>
    <entry key="OptionNameCodegenDir">生成されたテスト コードを保存するためのフォルダー</entry>
    <entry key="OptionHelpCodegenDir">グラフィカルに作成されたテストから生成されたコードを保存するフォルダーを指定します。</entry>
    <entry key="OptionNameProfilingSelection">プロファイリングのタイプ</entry>
    <entry key="OptionHelpProfilingSelection">コード カバレッジと実行プロファイリングのどちらが望ましいかを指定します。選択に基づいて、ソース コードは、コード カバレッジまたは実行時間の計算用にインストルメント化されます。</entry>
    <entry key="OptionNameDirToIgnore">無視するフォルダー</entry>
    <entry key="OptionHelpDirToIgnore">ソース コードのインストルメンテーションから除外するフォルダーを指定します。</entry>
    <entry key="OptionNameDirToInstrument">フォルダーからプロファイルへ</entry>
    <entry key="OptionHelpDirToInstrument">コードのプロファイリング用にインストルメント化するソースを含むフォルダーを指定します。 &lt;BR&gt; 既定では、すべてのソースがインストルメント化されます。インストルメント化するソースのリストを削減するには、このオプションを使用します。</entry>
    <entry key="OptionNameProfilingExtraOptions">追加オプション</entry>
    <entry key="OptionHelpProfilingExtraOptions">コード プロファイリングの追加オプションを指定します。</entry>
    <entry key="OptionNameFunCallToIgnore">無視する関数呼び出し</entry>
    <entry key="OptionHelpFunCallToIgnore">ソース コードのインストルメンテーションから除外する関数呼び出しを指定します。</entry>
    <entry key="OptionNameFileToIgnore">無視するファイル</entry>
    <entry key="OptionHelpFileToIgnore">ソース コードのインストルメンテーションから除外するファイルを指定します。</entry>
    <entry key="OptionNameFunToIgnore">無視する関数</entry>
    <entry key="OptionHelpFunToIgnore">ソース コードのインストルメンテーションから除外する関数を指定します。</entry>
    <entry key="OptionNameCommandOptions">コマンド オプション</entry>
    <entry key="OptionHelpCommandOptions">テスト実行可能ファイルに指定するコマンド オプション。</entry>
    <entry key="OptionNameExtraCommandOptions">追加の実行オプション</entry>
    <entry key="OptionHelpExtraCommandOptions">テスト実行可能ファイルに指定する追加オプション。</entry>
    <entry key="OptionNameFiltersSeparator">フィルターの区切り</entry>
    <entry key="OptionHelpFiltersSeparator">テストのフィルターを連結する際に区切りとして使用する文字列。</entry>
    <entry key="OptionNameBuildConfigProcessor">プロセッサ</entry>
    <entry key="OptionHelpBuildConfigProcessor">現在のビルド構成のプロセッサを選択します</entry>
    <entry key="ManageBoards">ボードの管理</entry>
    <entry key="AvailableBoards">使用可能なボード</entry>
    <entry key="RegisterTargetPackage">ターゲットの登録</entry>
    <entry key="SelectTargetRegistrationScript">ターゲット登録のスクリプトを選択</entry>
    <entry key="RegisteringTarget">新規ターゲットを登録中</entry>
    <entry key="FailedToRegisterTargetTitle">新規ターゲットを登録できない</entry>
    <entry key="FailedToRegisterTargetDetails">新規ターゲットを登録できない:\n\n{0}</entry>
    <entry key="UnregisterTargetPackage">ターゲットの登録解除</entry>
    <entry key="UnregisteringTarget">ターゲットを登録解除中</entry>
    <entry key="FailedToUnregisterTargetTitle">ターゲットを登録解除できない</entry>
    <entry key="FailedToUnregisterTargetDetails">ターゲットを登録解除できない:\n\n{0}</entry>
    <entry key="SelectTargetUnregistrationScript">ターゲット登録解除のスクリプトを選択</entry>
    <entry key="ManageProcessors">プロセッサの管理</entry>
    <entry key="ManageProcessorsCurrentProject">現在のプロジェクトに追加されたプロセッサの管理</entry>
    <entry key="DuplicateProcessorName">Processor ''{0}'' already exists in the project</entry>
    <entry key="EditProcessor">プロセッサ ''{0}'' の編集</entry>
    <entry key="EditProcessorTooltip">プロセッサの編集</entry>
    <entry key="DeleteProcessorTooltip">プロセッサの削除</entry>
    <entry key="CannotDeleteProcessorTooltip">[ホスト コンピューター] は削除できない</entry>
    <entry key="AvailableProcessors">使用可能なプロセッサ</entry>
    <entry key="AddingNewProcessor">新規プロセッサを追加中</entry>
    <entry key="FailedToAddNewProcessor">新規プロセッサを追加できませんでした</entry>
    <entry key="FailedToEditProcessor">プロセッサを編集できませんでした</entry>
    <entry key="FailedToRemoveProcessor">プロセッサを削除できませんでした</entry>
    <entry key="ProcessorInUse">このプロセッサは、現在次のビルド構成バリアントで使用されているため削除できません。\n\n{0}</entry>
    <entry key="AddAProcessor">プロセッサの追加</entry>
    <entry key="SelectAManufacturer">製造元の選択</entry>
    <entry key="ProcessorName">プロセッサ名</entry>
    <entry key="Custom">カスタム</entry>
    <entry key="InvalidToolchain">ツールチェーン ''{0}'' は登録されていません。</entry>
    <entry key="InvalidBoard">ターゲット リポジトリでボード ''{0}'' が見つかりません。</entry>
    <entry key="CannotConfigureBoardTitle">ボード接続を設定できません</entry>
    <entry key="CannotConfigureBoardMessage">このボードには構成可能な接続オプションはありません。</entry>
    <entry key="ConfigureBoardConnectionTooltip">ボード接続の構成</entry>
    <entry key="ConfigureBoardConnection">''{0}'' のボード接続の構成</entry>
    <entry key="ConfigureToolchainTitle">''{0}'' のツールチェーン オプションの構成</entry>
    <entry key="ConfigureCustomToolchainOptionsDescription">カスタム ツールチェーン オプションを構成します</entry>
    <entry key="OptionNameIPAddress">IP アドレス</entry>
    <entry key="OptionNamePort">ポート</entry>
    <entry key="OptionNameBaudRate">ボー レート</entry>
    <entry key="OptionNameParity">パリティ</entry>
    <entry key="OptionNameIgnoreUnusedExternalSymbols">コードの解析時に未使用の外部シンボルを無視する (テスト)</entry>
    <entry key="OptionHelpIgnoreUnusedExternalSymbols"/>
    <entry key="OptionNameCheckUndefinedSymbols">未定義のシンボルをチェック</entry>
    <entry key="OptionHelpCheckUndefinedSymbols">ビルド プロセスを開始する前に、プロジェクト内の未定義のシンボルをチェックします。 \n プロジェクト内の一部のシンボルの定義がビルド時にのみ使用可能な場合は、このオプションを無効にします。</entry>
    <entry key="OptionNameSourceEncoding">ソース コードのエンコード</entry>
    <entry key="OptionHelpSourceEncoding">ソース ファイルのエンコードを指定します。非 ASCII 文字が原因でコードがコンパイルされなかったり、ユーザー インターフェイスで正しくレンダリングされなかったりした場合、このオプションの値の変更が必要になる可能性があります。</entry>
    <entry key="OptionNameUseGoogleTest">GoogleTest を使用する</entry>
    <entry key="OptionHelpUseGoogleTest">追加オプションなしで GoogleTest のテストを実行する場合は、このオプションを選択します。</entry>
    <entry key="OptionNameUseGoogleTestNonDefault">既定以外のオプションで GoogleTest を使用する</entry>
    <entry key="OptionHelpUseGoogleTestNonDefault">追加オプションを指定して GoogleTest のテストを実行する場合は、このオプションを選択します。</entry>
    <entry key="OptionNameUseGenericExternalTestFramework">汎用的なテスト フレームワークを使用する</entry>
    <entry key="OptionHelpUseGenericExternalTestFramework">次の場合にこのオプションを選択します。 &lt;br&gt;&lt;ul&gt;&lt;li&gt;GoogleTest 以外のテスト フレームワークを使用する&lt;/li&gt;&lt;li&gt;GoogleTest を使用するが、特定のオプションを指定してテストを実行する&lt;/li&gt;&lt;/ul&gt;</entry>
    <entry key="OptionNameGenericExternalTestOutputOptions">レポートの出力オプション</entry>
    <entry key="OptionHelpGenericExternalTestOutputOptions">テスト実行可能ファイルでテスト結果ファイルの指定に使用するコマンド ライン オプションを入力します。&lt;br&gt;結果のパスを明示的に指定しない場合、変数 $(TESTOUTPUT) をオプション引数として入力できます。</entry>
    <entry key="OptionNameGenericExternalTestImplicitOutputFile">テスト出力ファイルを明示的に指定する</entry>
    <entry key="OptionHelpGenericExternalTestImplicitOutputFile">テスト出力ファイルのパスを指定します。&lt;br&gt;テスト出力のオプションで変数 $(TESTOUTPUT) を使用する場合を除き、テスト出力ファイルの場所を明示的に指定する必要があります。</entry>
    <entry key="OptionNameGenericExternalTestOutputFile">テスト出力ファイル</entry>
    <entry key="OptionHelpGenericExternalTestOutputFile">テスト結果が含まれるファイルの絶対パスを入力します。</entry>
    <entry key="OptionNameGenericExternalTestAdditionalOptions">追加オプション</entry>
    <entry key="OptionHelpGenericExternalTestAdditionalOptions">テスト実行可能ファイルで使用するコマンド ライン オプションを入力します。</entry>
    <entry key="OptionNameGenericExternalTestOutputIsXML">出力ファイルを XML 形式とする</entry>
    <entry key="OptionHelpGenericExternalTestOutputIsXML">テスト出力を XML 形式とする場合、このオプションを選択します。</entry>
    <entry key="OptionNameGenericExternalTestOutputIsNotXML">出力ファイルを XML 以外の形式とする</entry>
    <entry key="OptionHelpGenericExternalTestOutputIsNotXML">テスト出力を XML 以外の形式とする場合、このオプションを選択します。</entry>
    <entry key="OptionNameGenericExternalTestNoOutputConversion">XML ファイルで Pst-xUnit 形式を使用し、変換を使用しない</entry>
    <entry key="OptionHelpGenericExternalTestNoOutputConversion">Polyspace Test xUnit の結果と同じ XML マークアップをテスト出力の XML で使用する場合は、このオプションを選択します。</entry>
    <entry key="OptionNameGenericExternalTestConvertOutputUsingXSLT">XSLT を使用して出力を変換する</entry>
    <entry key="OptionHelpGenericExternalTestConvertOutputUsingXSLT">XSLT 変換を使用して XML テスト結果を Polyspace Test xUnit 形式に変換する場合は、このオプションを選択します。</entry>
    <entry key="OptionNameGenericExternalTestConversionXSLTFile">XSLT ファイル</entry>
    <entry key="OptionHelpGenericExternalTestConversionXSLTFile">XML テスト結果を Polyspace Test xUnit 形式に変換するための XSLT 変換ファイルを指定します。</entry>
    <entry key="OptionNameGenericExternalTestConvertOutputUsingCmd">コマンド ラインを使用して出力を変換する</entry>
    <entry key="OptionHelpGenericExternalTestConvertOutputUsingCmd">コマンドを使用して XML テスト結果を Polyspace Test xUnit 形式に変換する場合は、このオプションを選択します。</entry>
    <entry key="OptionNameGenericExternalTestConversionCmd">コマンド ライン</entry>
    <entry key="OptionHelpGenericExternalTestConversionCmd">コマンドを使用してテスト結果を Polyspace Test xUnit 形式 (XML) に変換する場合は、このオプションを選択します。</entry>
    <entry key="OptionTabProject">プロジェクト</entry>
    <entry key="OptionTabBuild">ビルド</entry>
    <entry key="OptionTabStatic">静的解析</entry>
    <entry key="OptionTabTestingProfiling">テストとプロファイリング</entry>
    <entry key="OptionPageProject">プロジェクト</entry>
    <entry key="OptionPageExternalTestsExecutionOptions">外部テスト</entry>
    <entry key="OptionPageEnvironmentSettings">環境設定</entry>
    <entry key="OptionPageInputsStubbing">入力およびスタブ</entry>
    <entry key="OptionPageMultitasking">マルチタスキング</entry>
    <entry key="OptionPageBugFinderAnalysis">欠陥とコーディング規約</entry>
    <entry key="OptionPageCheckersBehavior">チェッカー動作</entry>
    <entry key="OptionPageCodeProverVerification">実行時エラー</entry>
    <entry key="OptionPageVerificationAssumption">検証の前提条件</entry>
    <entry key="OptionPageChecksBehavior">チェック動作</entry>
    <entry key="OptionPagePrecision">精度</entry>
    <entry key="OptionPageScaling">スケーリング</entry>
    <entry key="OptionPageReporting">レポート</entry>
    <entry key="OptionPageComputingSettings">コンピューティングの設定</entry>
    <entry key="OptionPageAdvanced">詳細設定</entry>
    <entry key="OptionPageTargetCompiler">ターゲットおよびコンパイラ</entry>
    <entry key="OptionPageExternalTestBuildOptions">外部テスト</entry>
    <entry key="OptionPageFileSpecificOptions">ファイル固有のオプション</entry>
    <entry key="OptionPageTesting">テスト</entry>
    <entry key="OptionPageProfiling">すべてのプロファイリング</entry>
    <entry key="OptionPageCoverage">コード カバレッジ</entry>
    <entry key="OptionPageExecutionProfiling">実行時間</entry>
    <entry key="UnableToExcludeFolder">追加されたフォルダー/ファイルの親フォルダーの除外はサポートされていません。</entry>
    <entry key="SelectFolder">フォルダーの選択</entry>
    <entry key="AddingExcludePattern">除外パターンの追加</entry>
    <entry key="SelectSourceFolder">ソース フォルダーの選択</entry>
    <entry key="MoveToPSTUnitFolders">Polyspace xUnit テスト フォルダー セクションに移動</entry>
    <entry key="MoveToExternalTestFolders">外部テスト フォルダーに移動</entry>
    <entry key="MoveToPSTUnitFiles">Polyspace xUnit テスト ファイル セクションに移動</entry>
    <entry key="MoveToExternalTestFiles">外部テスト ファイル セクションに移動</entry>
    <entry key="ExcludePatternColumn">パターン</entry>
    <entry key="ExcludeForColumn">除外対象</entry>
    <entry key="ExcludePatterns">パスを除外する</entry>
    <entry key="PatternConcrete">具象</entry>
    <entry key="PatternGlob">グロブ</entry>
    <entry key="ExcludeForStaticAnalysis">静的解析</entry>
    <entry key="ExcludeForTest">テスト</entry>
    <entry key="ExcludeForAll">すべて</entry>
    <entry key="NonExistentPath">ファイル/フォルダー ''{0}'' が存在しません</entry>
    <entry key="UnableToExpandPath">パスを拡張できません</entry>
    <entry key="UnableToExpandCommand">コマンドを拡張できません</entry>
    <entry key="UnableToValidateInput">入力を検証できません</entry>
    <entry key="IncludeSubfolders">サブフォルダー</entry>
    <entry key="OverrideOpAppend">追加</entry>
    <entry key="OverrideOpPrepend">先頭に追加</entry>
    <entry key="OverrideOpReplace">置換</entry>
    <entry key="OverrideOpAppendIncludePaths">プロジェクトのインクルード パスの末尾に追加</entry>
    <entry key="OverrideOpPrependIncludePaths">プロジェクトのインクルード パスの先頭に追加</entry>
    <entry key="OverrideOpReplaceIncludePaths">プロジェクトのインクルード パスを置き換える</entry>
    <entry key="ModulesPrecisionColumn1">ファイル名</entry>
    <entry key="ModulesPrecisionColumn2">精度</entry>
    <entry key="SfrTypesColumn1">名前</entry>
    <entry key="SfrTypesColumn2">サイズ</entry>
    <entry key="AutosarMainGeneratorMessage">このプロジェクトは AUTOSAR 仕様から生成されました。AUTOSAR ベースのプロジェクトでは、[実行時エラー] グループのオプションを変更できません。</entry>
    <entry key="ExternalTestsUnsupportedOptionMessage">サポートされない外部テストの実行構成がプロジェクトに含まれます。リセットするにはいずれかのオプションを選択してください。</entry>
    <entry key="SelectAFile">ファイル固有のオプションを表示するには、ファイルを選択してください</entry>
    <entry key="NoFileDataAvailable">このビルド構成では、ファイル固有のオプションは使用できません。</entry>
    <entry key="FileSpecificOptionInfo">ビルド コマンドからプロジェクトを作成 (または .psprj ファイルからインポート) すると、ファイル固有のオプションが入力されます。オプションは読み取り専用です。</entry>
    <entry key="UseGlobalSettings">グローバル設定を使用</entry>
    <entry key="Remove">削除</entry>
    <entry key="RemoveSelectedRows">選択した行を削除</entry>
    <entry key="DetectedFunctions">検出された関数</entry>
    <entry key="AddSelectedFunctions">選択された関数を追加</entry>
    <entry key="RemoveSelectedFunctions">選択された関数を削除</entry>
    <entry key="AvailableFunctionsCount">{0}/{1} 個の関数</entry>
    <entry key="DetectedClasses">検出されたクラス</entry>
    <entry key="AddSelectedClasses">選択したクラスを追加</entry>
    <entry key="RemoveSelectedClasses">選択したクラスを削除</entry>
    <entry key="AvailableClassesCount">{0}/{1} クラス</entry>
    <entry key="CaseSensitive">大文字と小文字を区別する</entry>
    <entry key="WholeWord">単語単位</entry>
    <entry key="UseRegularExpression">正規表現を使用する</entry>
    <entry key="InvalidRegularExpression">無効な正規表現</entry>
    <entry key="CriticalSectionColumn1">開始ルーチン</entry>
    <entry key="CriticalSectionColumn2">終了ルーチン</entry>
    <entry key="AddStartingCriticalSectionText">開始中</entry>
    <entry key="AddEndingCriticalSectionText">終了中</entry>
    <entry key="AddStartingCriticalSectionTooltip">クリティカル セクションを開始している関数を追加します</entry>
    <entry key="AddEndingCriticalSectionTooltip">クリティカル セクションを終了している関数を追加します</entry>
    <entry key="RoutineDisableInterruptsColumn1">無効にするルーチン</entry>
    <entry key="RoutineDisableInterruptsColumn2">有効にするルーチン</entry>
    <entry key="AddEnablingInterruptText">有効にする</entry>
    <entry key="AddDisablingInterruptText">無効にする</entry>
    <entry key="AddEnablingInterruptTooltip">すべての割り込みを有効にする関数を追加します</entry>
    <entry key="AddDisablingInterruptTooltip">すべての割り込みを無効にする関数を追加します</entry>
    <entry key="ToSelectedRow">選択行に</entry>
    <entry key="ToNewRow">新規行に</entry>
    <entry key="AppendToSelectedText">選択</entry>
    <entry key="AppendToSelectedTooltip">選択</entry>
    <entry key="NewRowText">新規行</entry>
    <entry key="NewRowTooltip">新規行</entry>
    <entry key="SelectAFolder">フォルダーの選択</entry>
    <entry key="SelectingFolder">フォルダーを選択中</entry>
    <entry key="SelectingFiles">ファイルを選択中</entry>
    <entry key="GettingFunctionList">関数リストを取得中</entry>
    <entry key="GettingClassList">クラス リストを取得中</entry>
    <entry key="SelectOsekFiles">osek ファイルの選択</entry>
    <entry key="SelectAutosarFiles">AUTOSAR ファイルの選択</entry>
    <entry key="SelectImpactSpecificationsFile">影響仕様ファイルの選択</entry>
    <entry key="SelectPreincludeFiles">プレインクルード ファイルの選択</entry>
    <entry key="SelectScript">スクリプト ファイルを選択</entry>
    <entry key="SelectCFiles">C ファイルの選択</entry>
    <entry key="AddIncludePath">インクルード パスの追加</entry>
    <entry key="AddLibraryPath">ライブラリ パスの追加</entry>
    <entry key="SelectExternalTestOutputFile">出力ファイルの選択</entry>
    <entry key="SelectExternalTestXSLTFile">XSLT ファイルの選択</entry>
    <entry key="SwitchConfigTooltip">別の構成に切り替える</entry>
    <entry key="RenameConfiguration">構成名の変更</entry>
    <entry key="Active">アクティブ</entry>
    <entry key="Inactive">非アクティブ</entry>
    <entry key="ActiveBuildConfig">アクティブなビルド構成</entry>
    <entry key="ActiveBuildConfigTooltip">アクティブなビルド構成は ''{0}'' です。</entry>
    <entry key="ActiveStaticAnalysisConfig">アクティブな静的解析構成</entry>
    <entry key="ActiveStaticAnalysisConfigTooltip">アクティブな静的解析構成は ''{0}'' です。</entry>
    <entry key="ActiveTestingConfig">アクティブなテスト構成</entry>
    <entry key="ActiveTestingConfigTooltip">アクティブなテスト構成は ''{0}'' です。</entry>
    <entry key="UpdatingActiveConfig">アクティブな構成を更新中</entry>
    <entry key="MakeActiveConfig">アクティブにする</entry>
    <entry key="MakeActiveConfigTooltip">現在の構成をアクティブにする</entry>
    <entry key="SetAsActiveConfig">''{0}'' がアクティブな構成として設定されました。</entry>
    <entry key="ActiveConfigName">{0} (アクティブ)</entry>
    <entry key="AutoGenerated">自動生成</entry>
    <entry key="AutoGeneratedProjectTooltip">現在のプロジェクトはビルド コマンドから自動生成されています。アプリケーション ソースとインクルード パスへの変更は、プロジェクトを更新すると上書きされます。</entry>
    <entry key="AutoGeneratedBuildConfigTooltip">現在のビルド構成 ''{0}'' はビルド コマンドから自動生成されています。このビルド構成への変更は、プロジェクトを更新すると上書きされます。</entry>
    <entry key="AutoGeneratedActiveConfigName">{0} (自動生成、アクティブ)</entry>
    <entry key="AutoGeneratedConfigName">{0} (自動生成)</entry>
    <entry key="ConfigDuplicate">複製</entry>
    <entry key="ConfigDuplicateTooltip">現在の構成を複製</entry>
    <entry key="ConfigDuplicating">構成を複製中</entry>
    <entry key="ConfigDuplicated">構成 ''{0}'' が ''{1}'' として複製されました。</entry>
    <entry key="ConfigDuplicatedConfigure">構成 ''{0}'' が ''{1}'' として複製されました。ビルド コマンドから自動生成されたオプション (暗黙的なコンパイラおよびファイル固有のオプション) は削除されました。</entry>
    <entry key="RenameVariantTitle">名前の変更</entry>
    <entry key="RenameVariantPrompt">新規の名前を入力</entry>
    <entry key="ConfigImportTooltip">構成をファイルからインポート</entry>
    <entry key="ConfigImported">構成のインポートが完了しました</entry>
    <entry key="ConfigImportItem">構成ファイル ''{0}'' が ''{1}'' としてインポートされました。</entry>
    <entry key="ConfigImportInvalidElement">Cannot load config file {0}. This file does not contain configuration variant data.</entry>
    <entry key="CannotImportConfigFileError">Cannot load config file {0}. This file does not exist or is corrupted.</entry>
    <entry key="ConfigImportDialogTitle">インポートする構成ファイルを選択</entry>
    <entry key="ConfigImporting">構成を現在のプロジェクトにインポート中</entry>
    <entry key="ConfigExportCurrentTooltip">現在の構成をファイルにエクスポート</entry>
    <entry key="ConfigExportActive">アクティブな構成をエクスポート</entry>
    <entry key="ConfigExportActiveTooltip">アクティブな構成をファイルにエクスポート</entry>
    <entry key="ConfigExportAll">すべての構成のエクスポート</entry>
    <entry key="ConfigExportAllTooltip">すべての構成をファイルにエクスポート</entry>
    <entry key="ConfigExported">構成のエクスポートが完了しました</entry>
    <entry key="ConfigExportItem">構成 ''{0}'' が ''{1}'' にエクスポートされました。</entry>
    <entry key="ConfigExportItemConfigure">構成 ''{0}'' が ''{1}'' にエクスポートされました。ビルド コマンドから自動生成されたオプション (暗黙的なコンパイラおよびファイル固有のオプション) は削除されました。</entry>
    <entry key="CannotExportConfigFileError">Cannot write to config file {0}.</entry>
    <entry key="ConfigExportCurrentDialogTitle">現在の構成をエクスポートするファイルの選択</entry>
    <entry key="ConfigExportManyDialogTitle">構成をエクスポートするフォルダーの選択</entry>
    <entry key="ConfigExporting">構成をエクスポート中</entry>
    <entry key="CreateNewConfigurationTooltip">現在のタイプの新規構成を作成</entry>
    <entry key="NewBuildConfiguration">新規のビルド構成</entry>
    <entry key="NewStaticAnalysisConfiguration">新規の静的解析構成</entry>
    <entry key="NewTestingProfilingConfiguration">新規のテストおよびプロファイリング構成</entry>
    <entry key="CreateNewBuildConfigurationTooltip">新規のビルド構成を作成</entry>
    <entry key="CreateNewStaticAnalysisConfigurationTooltip">新規の静的解析構成を作成</entry>
    <entry key="CreateNewTestingProfilingConfigurationTooltip">新規のテストおよびプロファイリング構成を作成</entry>
    <entry key="CreatingNewBuildConfiguration">新規のビルド構成を作成中</entry>
    <entry key="CreatingNewStaticAnalysisConfiguration">新規の静的解析構成を作成中</entry>
    <entry key="CreatingNewTestingProfilingConfiguration">新規のテストおよびプロファイリング構成を作成中</entry>
    <entry key="CreatedNewBuildConfiguration">新規のビルド構成 ''{0}'' を作成しました</entry>
    <entry key="CreatedNewStaticAnalysisConfiguration">新規の静的解析構成 ''{0}'' を作成しました</entry>
    <entry key="CreatedNewTestingProfilingConfiguration">新規のテストおよびプロファイリング構成 ''{0}'' を作成しました</entry>
    <entry key="CannotRemoveActiveBuildConfigError">Cannot delete active build config.</entry>
    <entry key="CannotRemovePSConfigureBuildConfigError">Cannot delete build configuration created from a build command.</entry>
    <entry key="CannotRemoveActiveStaticAnalysisConfigError">Cannot delete active static analysis config.</entry>
    <entry key="CannotRemoveActiveTestingProfilingConfigError">Cannot delete active testing config.</entry>
    <entry key="ConfigRemoveTooltip">現在の構成を削除</entry>
    <entry key="ConfigRemoving">構成を削除中</entry>
    <entry key="ConfigRemoved">構成 ''{0}'' が削除されました。</entry>
    <entry key="ListCannotBeEmpty">リストを空にすることはできません</entry>
    <entry key="NoEmptyValueInList">リストに空の値を含めることはできません</entry>
    <entry key="ValueCannotBeEmpty">値を空にすることはできません</entry>
    <entry key="DuplicateValueFound">重複する値が見つかりました: ''{0}''</entry>
    <entry key="ValueAlreadyExists">''{0}'' は既に存在します</entry>
    <entry key="OneOrMoreInvalidPath">1 つ以上のパスが無効です</entry>
    <entry key="DuplicateProjectVariableKey">重複するプロジェクト変数キー: {0}</entry>
    <entry key="ProjectVariableKeyExists">プロジェクト変数キー ''{0}'' は既に存在します</entry>
    <entry key="PathMustBeProvided">ファイル パスを指定しなければなりません</entry>
    <entry key="CommandMustBeProvided">コマンドを指定しなければなりません</entry>
    <entry key="InvalidFormat">形式が無効です</entry>
    <entry key="HasValidationErrors">1 つ以上のオプションに検証エラーがあります</entry>
    <entry key="HasStrayExcludePattern">1 つ以上の除外パターンが存在しますが、プロジェクトにはソース/テストのファイルまたはフォルダーが含まれていません。</entry>
    <entry key="VariableNotAllowedInArtifactPath">アーティファクトのパスはプロジェクト変数をサポートしていません。</entry>
    <entry key="EnvironmentVariableOverridingArtifactPath">環境変数 ''{0}'' が ''{1}'' に設定されています。ここで指定した値の代わりに、これが使用されます</entry>
    <entry key="EnvironmentVariableArtifactPathWillBeUsed">環境変数 ''{1}'' で指定されたアーティファクトのパス ''{0}'' が使用されます</entry>
    <entry key="LoadingPlaceholder">読み込み中...</entry>
    <entry key="Add">追加</entry>
    <entry key="Cancel">キャンセル</entry>
    <entry key="ClickToAddDescription">クリックして説明を追加</entry>
    <entry key="TestConnectivity">接続テスト</entry>
    <entry key="RunningConnectivityTests">接続をテスト中...</entry>
    <entry key="RunningConnectivityTestsDetail">ボード ''{0}'' とツールチェーン ''{1}'' への接続をテスト中</entry>
    <entry key="RunningConnectivityTest">接続テスト ''{0}'' を実行中</entry>
    <entry key="ConnectivityTestPassed">接続テスト ''{0}'' にパスしました</entry>
    <entry key="ConnectivityValidationError">接続テスト ''{0}'' に失敗しました。詳細については、ログを調べてください。</entry>
    <entry key="AllConnectivityTestsPassed">すべての接続テストにパスしました。</entry>
    <entry key="DefinedByCompiler">defined-by-compiler</entry>
    <entry key="Unspecified">Unspecified</entry>
    <entry key="LittleEndian">Little endian</entry>
    <entry key="BigEndian">Big endian</entry>
    <entry key="HostComputer">Host Computer</entry>
    <entry key="DetectAutomatically">Detect automatically</entry>
  </message>
</rsccat>
