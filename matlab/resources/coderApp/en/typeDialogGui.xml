<?xml version="1.0" encoding="UTF-8" ?>
<!-- Copyright 2019-2022 The MathWorks, Inc. -->
<rsccat version="1.0" locale="en_US" product="coderApp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../schema/msgcat.xsd">
    <message>
        <!-- Toolstrip -->
        <entry key="tsTabGroupTitle" note="type refers to data type">Coder Type Editor</entry>
        <entry key="tsTabTitle" note="type refers to data type">Type Editor</entry>
        <entry key="tsCreateSectionTitle" note="type refers to data type">Type</entry>
        <entry key="tsEditSectionTitle">Edit</entry>
        <entry key="tsExportSectionTitle">Share</entry>
        <entry key="tsExportText">Share</entry>

        <!-- Miscellaneous -->
        <entry key="closeConfirmationTitle" note="types refers to data types">Export Unsaved Types</entry>
        <entry key="closeConfirmationMessage" note="types refers to data types">Export unsaved types to workspace?</entry>
        <entry key="closeConfirmationYes">Yes</entry>
        <entry key="closeConfirmationNo">No</entry>
        <entry key="classSelectorLabel">Data Type</entry>
        <entry key="workspaceBrowserTitle">Workspace Browser</entry>
        <entry key="workspaceBrowserDesc" note="variable refers to MATLAB variable">All variables in the current workspace</entry>
        <entry key="variableDocumentTypeTitle" note="type refers to data type">Type Variable Editor</entry>
        <entry key="variableDocumentTitle" note="variable refers to MATLAB variable">Editor for variable "{0}"</entry>
        <entry key="typeTreeTitle" note="type refers to data type">Type Browser</entry>
        <entry key="typeTreeDesc">Browse coder.Type objects in the current workspace</entry>
        <entry key="varTableTitle">Workspace Browser</entry>
        <entry key="varTableDesc" note="variable refers to MATLAB variable">All variables in the current workspace</entry>
        <entry key="codePaneTitle">MATLAB Code</entry>
        <entry key="codePaneDesc">MATLAB code that can be used to construct the current coder.Type object</entry>
        <entry key="miscellaneousListTitle" note="variable refers to MATLAB variable">Variables</entry>
        <entry key="columnName">Name</entry>
        <entry key="columnClass">Class</entry>
        <entry key="columnSize">Size</entry>
        <entry key="noVariablesText" note="variable refers to MATLAB variable">No variables in workspace</entry>
        <entry key="noSupportedVariablesText" note="variable refers to MATLAB variable">No supported variables in workspace</entry>
        <entry key="noTypesText">No coder.Type objects</entry>
        <entry key="childrenPropertiesTitle">Properties</entry>
        <entry key="childrenFieldsTitle">Fields</entry>
        <entry key="childrenElementsTitle">Elements</entry>
        <entry key="actionPromoteText" note="type refers to data type">Convert to Type</entry>
        <entry key="actionPromoteDesc" note="variable refers to MATLAB variable">Convert this variable into a coder.Type object</entry>
        <entry key="actionNewTypeText" note="type refers to data type">New\nType</entry>
        <entry key="actionNewTypeDesc" note="type refers to data type">Create a new type</entry>
        <entry key="actionNewTypeFromExampleText">From Example</entry>
        <entry key="actionNewTypeFromExampleDesc" note="type refers to data type">Create a new type from an example value</entry>
        <entry key="actionNewTypeFromVarText" note="variable refers to MATLAB variable">From Variable</entry>
        <entry key="actionNewTypeFromVarDesc" note="type refers to data type">Create a new type from an existing variable</entry>
        <entry key="actionEditText" note="type refers to data type">Edit Type</entry>
        <entry key="actionEditDesc">Edit a coder.Type object</entry>
        <entry key="actionAddField">Add Field</entry>
        <entry key="actionAddFieldDesc">Add a field to the struct</entry>
        <entry key="actionAddProp">Add Property</entry>
        <entry key="actionAddPropDesc" note="type refers to data type">Add a property to the type object</entry>
        <entry key="actionRemoveField">Remove Field</entry>
        <entry key="actionRemoveFieldDesc">Remove a field from the struct</entry>
        <entry key="actionRemoveProp">Remove Property</entry>
        <entry key="actionRemovePropDesc" note="type refers to data type">Remove a property from the type</entry>
        <entry key="actionRemoveProps">Remove All Properties</entry>
        <entry key="actionRemovePropsDesc">Remove all properties</entry>
        <entry key="actionRemoveFields">Remove All Fields</entry>
        <entry key="actionRemoveFieldsDesc">Remove all fields</entry>
        <entry key="actionFieldFromExample">Field from example</entry>
        <entry key="actionFieldFromExampleDesc" note="type refers to data type">Add a field that uses type of an example</entry>
        <entry key="actionPropFromExample">Property from example</entry>
        <entry key="actionPropFromExampleDesc">Add property from example</entry>
        <entry key="actionFieldFromVariable" note="variable refers to MATLAB variable">Field from variable</entry>
        <entry key="actionFieldFromVariableDesc" note="type refers to data type">Add a field that uses the type of a workspace variable</entry>
        <entry key="actionPropFromVariable" note="variable refers to MATLAB variable">Property from variable</entry>
        <entry key="actionPropFromVariableDesc" note="type refers to data type">Add a property that uses the type of a workspace variable</entry>
        <entry key="actionDefineByExample">Derive from example value</entry>
        <entry key="actionDefineByExampleDesc">Derive data type from example value</entry>
        <entry key="useOutputType">Use coder.OutputType</entry>
        <entry key="useOutputTypeDesc" note="type refers to data type">Use the type of another function's output when generating code</entry>
        <entry key="actionExportMatText">MAT File</entry>
        <entry key="actionExportMatDesc" note="types refers to data types">Export to a MAT file containing all types</entry>
        <entry key="actionExportScriptText">MATLAB Script</entry>
        <entry key="actionExportScriptDesc" note="types refers to data types">Export to a script that creates all types</entry>
        <entry key="actionSyncText">Save\nAll</entry>
        <entry key="actionSyncDesc" note="types refers to data types">Save all types to the workspace</entry>
        <entry key="syncFailedTitle">Save Failed</entry>
        <entry key="actionImportText">Load\nAll</entry>
        <entry key="actionImportDesc" note="types refers to data types">Load all types from the workspace</entry>
        <entry key="noTypesToImportDialogTitle" note="types refers to data types">No types to load</entry>
        <entry key="noTypesToImportDialogDesc">No coder.Type objects in workspace</entry>
        <entry key="actionDeleteText">Delete</entry>
        <entry key="actionDeleteDesc" note="type refers to data type">Delete selected type</entry>
        <entry key="actionDeleteAllText">Delete all</entry>
        <entry key="actionDeleteAllDesc" note="types refers to data types">Delete all types</entry>
        <entry key="actionUndoText">Undo</entry>
        <entry key="actionUndoDesc">Undo the previous change</entry>
        <entry key="actionRedoText">Redo</entry>
        <entry key="actionRedoDesc">Redo the previous change</entry>
        <entry key="actionHelpText">Help</entry>
        <entry key="actionHelpDesc">Help</entry>
        <entry key="defaultAttrCategoryTitle" note="type refers to data type">Type Properties</entry>
        <entry key="enterVariableNamePlaceholder">Enter a MATLAB variable name</entry>
        <entry key="invalidMatlabVariableName">"{0}" is not a valid MATLAB variable name</entry>
        <entry key="variableAlreadyExists">"{0}" already exists in the workspace</entry>
        <entry key="defineExampleGenericTitle" note="type refers to data type">Derive type from MATLAB value</entry>
        <entry key="defineExampleGenericDirections" note="type refers to data type">Enter MATLAB code that produces an example of your type.</entry>
        <entry key="defineExampleTitle" note="type refers to data type">Derive type from {0}</entry>
        <entry key="defineExampleDirections">Enter MATLAB code that produces a {0} object.</entry>
        <entry key="commandWindowGenericPlaceholder" note="type refers to data type">code that produces an example of your type</entry>
        <entry key="commandWindowPlaceholder">code that produces a {0} object</entry>
        <entry key="classSelectorPlaceholder">Search classes</entry>
        <entry key="classSelectorPopupHeader">Class</entry>
        <entry key="classSelectorCompletionsPrompt" note="type as a verb - eg. typing">Type to search for classes</entry>
        <entry key="classSelectorFindingCompletions">Searching for classes...</entry>
        <entry key="classSelectorNoCompletions">No matching classes found</entry>
        <entry key="invalidMatlabClassName">The value must be a valid MATLAB class name</entry>
        <entry key="sizeSelectorVarSizeTooltip" note="variable refers to the capability of being varied">This dimension is variable-sized</entry>
        <entry key="sizeSelectorPopupHeader">Size</entry>
        <entry key="sizeSelectorAddDimensionLabel">Add Dimension</entry>
        <entry key="sizeSelectorAddDimensionTooltip">Add a new dimension after the current one</entry>
        <entry key="sizeSelectorRemoveDimensionLabel">Remove Dimension</entry>
        <entry key="sizeSelectorRemoveDimensionTooltip">Remove current dimension</entry>
        <entry key="sizeSelectorDimensionUpToNOptionLabel">:{0} - Up to "{0}"</entry>
        <entry key="sizeSelectorDimensionUpToNOptionTooltip" note="variable refers to the capability of being varied">Set dimension value to be variable-sized with an upper bound of "{0}"</entry>
        <entry key="sizeSelectorDimensionExactlyNOptionLabel">{0} - Exactly "{0}"</entry>
        <entry key="sizeSelectorDimensionExactlyNOptionTooltip">Set dimension value to be exactly "{0}"</entry>
        <entry key="sizeSelectorDimensionUnboundedOptionLabel">:Inf - Unbounded</entry>
        <entry key="sizeSelectorDimensionUnboundedOptionTooltip">Set dimension value to be unbounded</entry>
        <entry key="sizeSelectorDimensionInvalidValue">Dimension value must be numeric or inf</entry>
        <entry key="newTypeDialogTitle" note="type refers to data type">New Type</entry>
        <entry key="newPropDialogTitle">New Property</entry>
        <entry key="newFieldDialogTitle">New Field</entry>
        <entry key="newTypeDialogNameLabel" note="type refers to data type">Type Name</entry>
        <entry key="newTypeNamePlaceholder" note="type refers to data type">Enter a MATLAB variable name for the type</entry>
        <entry key="newTypeExampleMenu">From Example value</entry>
        <entry key="newTypeExampleMenuDesc" note="type refers to data type">Create a type compatible with an example value</entry>
        <entry key="newTypeVarMenu" note="variable refers to MATLAB variable">From Variable</entry>
        <entry key="newTypeVarMenuDesc" note="type refers to data type">Create a type compatible with an existing MATLAB variable</entry>
        <entry key="newTypeVarDirections" note="type refers to data type">Select a workspace variable to convert to a type.</entry>
        <entry key="newTypeFailedTitle" note="type refers to data type">Type Creation Failed</entry>
        <entry key="exportButtonTitle">Export</entry>
        <entry key="exportButtonDesc" note="types refers to data types">Export all types</entry>
        <entry key="exportMatFileDialogTitle" note="types refers to data types">Export Types to MAT File</entry>
        <entry key="exportMatFileFileFilter">MAT File</entry>
        <entry key="exportScriptFileDialogTitle" note="types refers to data types">Export Types to MATLAB Script</entry>
        <entry key="exportScriptFileFilter">MATLAB File</entry>
        <entry key="exportFailedTitle">Export Failed</entry>
        <entry key="invalidMatFileName">"{0}" is not a valid MAT file name</entry>
        <entry key="invalidEmptyValue">Value cannot be empty</entry>
        <entry key="promoteErrorDialogTitle" note="variable refers to MATLAB variable">Error Promoting Variable</entry>
        <entry key="pasteTypeErrorDialogTitle" note="type refers to data type">Error Applying Type</entry>
        <entry key="copyActionText">Copy</entry>
        <entry key="pasteActionText">Paste</entry>
        <entry key="childListNoFields">No fields defined</entry>
        <entry key="childListNoProperties">No properties defined</entry>
        <entry key="pathViewerSelectTooltip">Click to select {0}</entry>
        <entry key="pathViewerEditTooltip" note="type refers to data type">Click to edit type name</entry>

        <!-- Drag-and-drop and Clipboard -->
        <entry key="dndCopyTypeInto" note="type refers to data type">Copy type into</entry>
        <entry key="dndReorderTo">Move to</entry>
        <entry key="menuPasteType" note="type refers to data type">Paste Type Into</entry>
        <entry key="menuPasteField">Paste as Field</entry>
        <entry key="menuPasteProperty">Paste as Property</entry>
        <entry key="menuPasteNewType" note="type refers to data type">Paste as New Type</entry>
    </message>
</rsccat>
