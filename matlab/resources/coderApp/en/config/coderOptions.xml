<?xml version="1.0" encoding="UTF-8" ?>
<!-- Copyright 2020-2024 The MathWorks, Inc. -->
<rsccat version="1.0" locale="en_US" product="coderApp"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../schema/msgcat.xsd">
    <message>
        <!-- Miscellaneous -->
        <entry key="genericNone">None</entry>
        <!-- Build Type -->
        <entry key="buildTypeMex">MEX</entry>
        <entry key="buildTypeLib">Static Library</entry>
        <entry key="buildTypeDll">Dynamic Library</entry>
        <entry key="buildTypeExe">Executable</entry>
        <!-- GlobalDataSyncMethod -->
        <entry key="globalSyncNone">Disabled</entry>
        <entry key="globalSyncAlways">At MEX-function entry, exit and extrinsic calls</entry>
        <entry key="globalSyncEntryAndExits">At MEX-function entry and exit</entry>
        <!-- Dynamic Memory Allocation -->
        <entry key="dynamicMemoryEnabled">Always</entry>
        <entry key="dynamicMemoryDisabled">Never</entry>
        <entry key="dynamicMemoryThreshold">For arrays with max size at or above threshold</entry>
        <!-- Row Major -->
        <entry key="rowMajorRow">Row-major</entry>
        <entry key="rowMajorColumn">Column-major</entry>
        <!-- File Partition -->
        <entry key="filePartitionMap">Generate one file for each MATLAB file</entry>
        <entry key="filePartitionSingle">Generate all functions into a single file</entry>
        <!-- Large Constant Generation -->
        <entry key="largeConstantGenerationWriteOnlyDNNConstantsToDataFiles">Write only deep learning constants to data files</entry>
        <entry key="largeConstantGenerationWriteToDataFiles">Write to data files</entry>
        <entry key="largeConstantGenerationKeepInSourceFiles">Keep in source files</entry>
        <!-- Comment Style -->
        <entry key="commentStyleAuto">Auto (Use standard comment style of the target language)</entry>
        <entry key="commentStyleMulti">Multi-line (Use C-style comments)</entry>
        <entry key="commentStyleSingle">Single-line (Use C++-style comments)</entry>
        <!-- Parentheses Level -->
        <entry key="parenthesesMax">Maximum (Specify precedence with parentheses)</entry>
        <entry key="parenthesesMin">Minimum (Rely on C/C++ operators for precedence)</entry>
        <entry key="parenthesesNominal">Nominal (Optimize for readability)</entry>
        <!-- Header Guard Style -->
        <entry key="headerGuardInclude">Use include guard</entry>
        <entry key="headerGuardPragma">Use pragma once</entry>
        <!-- Data Type Replacement -->
        <entry key="dataTypeReplacementC">Use built-in C data types</entry>
        <entry key="dataTypeReplacementCoder">Use coder typedefs</entry>
        <!-- CPP Interface Style -->
        <entry key="cppInterfaceFunctions">Each entry-point function is generated as a C++ function</entry>
        <entry key="cppInterfaceMethods">Each entry-point function is generated as a method in a C++ class</entry>
        <!-- Casting Mode -->
        <entry key="castingModeNominal">Nominal</entry>
        <entry key="castingModeStandards">Standards Compliant</entry>
        <entry key="castingModeExplicit">Explicit</entry>
        <!-- Indent Style -->
        <entry key="indentStyleKandR">K&amp;R</entry>
        <entry key="indentStyleAllman">Allman</entry>
        <!-- Generate Example Main -->
        <entry key="exampleMainDoNotGenerate">Do not generate an example main function</entry>
        <entry key="exampleMainGenerateCodeOnly">Generate, but do not compile, an example main function</entry>
        <entry key="exampleMainGenerateCodeAndCompile">Generate and compile an example main function</entry>
        <!-- Preserve Variable Names -->
        <entry key="preserveVariableNamesNone">None</entry>
        <entry key="preserveVariableNamesUserNames">User names</entry>
        <entry key="preserveVariableNamesAll">All</entry>
        <!-- Constant Inputs -->
        <entry key="constantInputsCheckValues">Check values at run time</entry>
        <entry key="constantInputsIgnoreValues">Ignore input value</entry>
        <entry key="constantInputsRemove">Remove from MEX signature</entry>
        <!-- Default Variable Initialization -->
        <entry key="defaultVariableInitializationNone">Allow uninitialized declarations</entry>
        <entry key="defaultVariableInitializationScalarsOnly">Always initialize scalars</entry>
        <entry key="defaultVariableInitializationScalarsAndArrays">Always initialize scalars and arrays</entry>
        <!-- Inline Between * and * Functions -->
        <entry key="inlineBetweenNever">Never</entry>
        <entry key="inlineBetweenReadability">Readability</entry>
        <entry key="inlineBetweenSpeed">Speed</entry>
        <entry key="inlineBetweenAlways">Always</entry>
        <!-- Endianness -->
        <entry key="endiannessBig">Big Endian</entry>
        <entry key="endiannessLittle">Little Endian</entry>
        <entry key="endiannessUnspecified">Unspecified</entry>
        <!-- Division Rounding -->
        <entry key="divRoundingFloor">Floor</entry>
        <entry key="divRoundingUndefined">Undefined</entry>
        <entry key="divRoundingZero" note="Zero as in number zero; used to indicate that rounding behavior will be to round applicable numeric values towards zero">Zero</entry>
        <!-- Largest Atomic Integer -->
        <entry key="largestAtomicIntChar">char</entry>
        <entry key="largestAtomicIntInt">int</entry>
        <entry key="largestAtomicIntLong">long</entry>
        <entry key="largestAtomicIntLongLong">long long</entry>
        <entry key="largestAtomicIntShort">short</entry>
        <!-- Largest Atomic Float -->
        <entry key="largestAtomicFloatFloat">float</entry>
        <entry key="largestAtomicFloatDouble">double</entry>
        <entry key="largestAtomicFloatNone">None</entry>
        <!-- Git Integration -->
        <entry key="repositoryStyleAuto">Auto</entry>
        <entry key="repositoryStyleForced">Force creation of a new Git repository</entry>
        <!-- Dynamic memory allocation interface -->
        <entry key="dynamicMemoryAllocationC">Use C style EmxArray</entry>
        <entry key="dynamicMemoryAllocationCpp">Use C++ coder::array</entry>
        <entry key="dynamicMemoryAllocationAuto">Determine dynamic memory allocation interface based on language</entry>
        <!-- Verbosity -->
        <entry key="verbosityInfo">Show information, warning, and error messages</entry>
        <entry key="verbositySilent">Only show warning and error messages</entry>
        <entry key="verbosityVerbose">Show all messages</entry>
        <!-- Enable clang format -->
        <entry key="codeFormatToolAuto">Use clang format based on heuristics</entry>
        <entry key="codeFormatToolClang">Always use clang format</entry>
        <entry key="codeFormatToolMW">Always use MathWorks code format tool</entry>
        <!-- Clang format config file -->
        <entry key="useClangFormatFileGen">Generate a new clang format configuration file</entry>
        <entry key="useClangFormatFileExt">Use existing clang format configuration file</entry>
         <!-- MISRA -->
        <entry key="misraCppInterfaceClassName">None</entry>
        <entry key="misraCppNamespaceRecommendation">Any valid C++ namespace</entry>
        <!-- SIL / PIL Verbosity -->
        <entry key="silPilVerbosityOff">Off</entry>
        <entry key="silPilVerbosityOn">On</entry>
        <!-- Code Profiling Code Metrics -->
        <entry key="codeProfilingCodeMetricsTime">Time</entry>
        <entry key="codeProfilingCodeMetricsTotInstr">Total Instructions</entry>
        <entry key="codeProfilingCodeMetricsFloatInstr">Float Instructions</entry>
        <entry key="codeProfilingCodeMetricsFloatOpts">Float Operations</entry>
        <entry key="codeProfilingCodeMetricsIntInstr">Integer Instructions</entry>
        <entry key="codeProfilingCodeMetricsLoadInstr">Load Instructions</entry>
        <entry key="codeProfilingCodeMetricsStoreInstr">Store Instructions</entry>
        <entry key="codeProfilingCodeMetricsTotCyc">Total Cycles</entry>
        <entry key="codeProfilingCodeMetricsL1DCM">L1 Data Cache Misses</entry>
        <entry key="codeProfilingCodeMetricsL1ICM">L1 Instruction Cache Misses</entry>
        <entry key="codeProfilingCodeMetricsL2DCM">L2 Data Cache Misses</entry>
        <entry key="codeProfilingCodeMetricsL2ICM">L2 Instruction Cache Misses</entry>
        <entry key="codeProfilingCodeMetricsTLBDM">TLB Data Misses</entry>
        <entry key="codeProfilingCodeMetricsTLBIM">TLB Instruction Misses</entry>
        <entry key="codeProfilingCodeMetricsMemStall">Memory Stall Cycles</entry>
        <entry key="codeProfilingCodeMetricsTotStall">Total Stall Cycles</entry>
        <!-- Working/Build Folder Type -->
        <entry key="buildFolderTypeProject">A subfolder of the project folder</entry>
        <entry key="buildFolderTypeCurrent">A subfolder of the MATLAB current working folder</entry>
        <entry key="workingFolderTypeProject">Project folder</entry>
        <entry key="workingFolderTypeCurrent">MATLAB current working folder</entry>
        <entry key="folderTypeSpecified">Specified folder</entry>
        <!-- CodeProfilingSaveOptions -->
        <entry key="allData">All data</entry>
        <entry key="summaryOnly">Summary only</entry>
        <entry key="metricsOnly">Metrics only</entry>
        <!-- SIMDAcceleration Value formats -->
        <entry key="simdAccelerationNone">None</entry>
        <entry key="simdAccelerationPortableFormat" note="hole is for an instruction set name">Portable ({0})</entry>
        <entry key="simdAccelerationFullFormat" note="hole is for an instruction set name">Full ({0})</entry>
        <entry key="simdAccelerationAutoFormat" note="hole is for an instruction set name">Auto ({0})</entry>
        <!-- UsePrecompiledLibraries Values -->
        <entry key="usePrecompiledLibrariesPrefer">Prefer precompiled libraries when available</entry>
        <entry key="usePrecompiledLibrariesAvoid">Avoid precompiled libraries when possible</entry>
    </message>
</rsccat>
