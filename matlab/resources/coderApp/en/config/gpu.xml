<?xml version="1.0" encoding="UTF-8" ?>
<!-- Copyright 2020-2024 The MathWorks, Inc. -->
<rsccat version="1.0" locale="en_US" product="coderApp"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../schema/msgcat.xsd">
    <message>
        <!-- Categories -->
        <entry key="category_gpu">GPU Code</entry>
        <entry key="category_gpu_device">Device</entry>
        <entry key="category_gpu_optimization">Code Optimization</entry>
        <entry key="category_gpu_customization">Code Customization</entry>
        <entry key="category_gpu_advanced">Advanced</entry>
        <!-- Params -->
        <entry key="gpuEnabled">Generate GPU code</entry>
        <entry key="gpuEnabled_desc">Control GPU code generation</entry>
        <entry key="kernelNamePrefix">Kernel name prefix</entry>
        <entry key="kernelNamePrefix_desc">Prepend this name to all generated kernels</entry>
        <entry key="selectCudaDevice">GPU device ID</entry>
        <entry key="selectCudaDevice_desc">GPU device selection in a multi GPU environment</entry>
        <entry key="maxKernelDepth">Maximum kernel launch depth</entry>
        <entry key="maxKernelDepth_desc">Maximum dynamic kernel launch depth</entry>
        <entry key="maxBlocksPerKernel">Maximum blocks per kernel</entry>
        <entry key="maxBlocksPerKernel_desc">Maximum number of thread blocks per GPU kernel</entry>
        <entry key="mallocMode">Malloc mode</entry>
        <entry key="mallocMode_desc">Memory allocation modes for CPU and GPU global memories</entry>
        <entry key="stackLimitPerThread">Stack limit</entry>
        <entry key="stackLimitPerThread_desc">Available stack limit per thread on GPU</entry>
        <entry key="mallocThreshold">Malloc threshold</entry>
        <entry key="mallocThreshold_desc">Size above which private variables are allocated on heap instead of stack</entry>
        <entry key="enableCUBLAS">Enable cuBLAS</entry>
        <entry key="enableCUBLAS_desc">Enable use of cuBLAS (Linear Algebra) library</entry>
        <entry key="enableCUSOLVER">Enable cuSOLVER</entry>
        <entry key="enableCUSOLVER_desc">Enable use of cuSOLVER (Linear Algebra) library</entry>
        <entry key="enableCUFFT">Enable cuFFT</entry>
        <entry key="enableCUFFT_desc">Enable use of cuFFT library</entry>
        <entry key="enableMemoryManager">Enable GPU memory manager</entry>
        <entry key="enableMemoryManager_desc">Enable use of the GPU memory manager for allocation and deallocation</entry>
        <entry key="benchmarking">Benchmarking</entry>
        <entry key="benchmarking_desc">Add code to benchmark GPU computation</entry>
        <entry key="safeBuild">Safe build</entry>
        <entry key="safeBuild_desc">Enable error checking in GPU code at run-time</entry>
        <entry key="computeCapability">Minimum compute capability</entry>
        <entry key="computeCapability_desc">Select the minimum CUDA compute capability for code generation</entry>
        <entry key="customComputeCapability">Custom compute capability</entry>
        <entry key="customComputeCapability_desc">Specify a custom CUDA architecture flag value</entry>
        <entry key="compilerFlags">Compiler flags</entry>
        <entry key="compilerFlags_desc">Pass additional flags to the GPU compiler</entry>
    </message>
</rsccat>
