<?xml version="1.0" encoding="UTF-8" ?>
<!-- Copyright 2020-2024 The MathWorks, Inc. -->
<rsccat version="1.0" locale="en_US" product="coderApp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../schema/msgcat.xsd">
    <message>
        <!-- Output -->
        <entry key="category_output">Output</entry>
        <entry key="buildType">Build type</entry>
        <entry key="buildType_desc">Output to build from generated C/C++ code</entry>
        <entry key="targetLang">Language</entry>
        <entry key="targetLang_desc">Language to use in generated code</entry>
        <entry key="targetLangStandard">Language standard</entry>
        <entry key="targetLangStandard_desc">Specify the language standard to use in generated code</entry>
        <entry key="genCodeOnly">Generate source code only</entry>
        <entry key="genCodeOnly_desc">Do not execute the makefile after generating code</entry>

        <!-- Speed -->
        <entry key="category_speed">Speed</entry>
        <entry key="responsivenessChecks">Enable responsiveness to CTRL+C and graphics refreshing</entry>
        <entry key="responsivenessChecks_desc">Periodically checks for Ctrl+C breaks and refreshes graphics. Without these checks the only way to end a long-running execution might be to terminate MATLAB. Turning off this check results in less generated code and faster MEX function execution.</entry>
        <entry key="extrinsicCalls">Keep extrinsic calls</entry>
        <entry key="extrinsicCalls_desc">When disabled, remove calls that require the MEX-function interface</entry>
        <entry key="integrityChecks">Check memory integrity</entry>
        <entry key="integrityChecks_desc">Detects violations of memory integrity in generated code and stops execution with a diagnostic. Without these checks, violations will lead to unpredictable behavior. The most likely cause of memory integrity issues is accessing an array out of bounds. Turning off this check results in less generated code and faster MEX function execution.</entry>
        <entry key="saturateOnIntegerOverflow">Saturate on integer overflow</entry>
        <entry key="saturateOnIntegerOverflow_desc">When selected, overflows saturate to either the minimum or maximum value that the data type can represent. Otherwise, they wrap to the appropriate value that the data type can represent.</entry>
        <entry key="purelyIntegerCode">Support only purely-integer numbers</entry>
        <entry key="purelyIntegerCode_desc">Support only integer numeric data types in the generated code. When selected, floating-point numbers will not appear in the generated code.</entry>
        <entry key="supportNonFinite">Support nonfinite numbers</entry>
        <entry key="supportNonFinite_desc">Support nonfinite values (inf, nan, -inf) in the generated code</entry>
        <entry key="loopUnrollThreshold">Loop unrolling threshold</entry>
        <entry key="loopUnrollThreshold_desc">Minimum number of iterations that generate a "for" loop</entry>
        <entry key="preserveInputData">Preserve input data for entry-point functions</entry>
        <entry key="preserveInputData_desc">Specify if the generated code must preserve the input data provided as arguments to the entry-point functions.</entry>
        <entry key="enableAutoParallelization">Enable automatic parallelization</entry>
        <entry key="enableAutoParallelization_desc">Automatically parallelize parts of the generated code by using OpenMP pragmas</entry>
        <entry key="highlightImplicitExpansionIssues">Highlight potential issues resulting from implicit expansion</entry>
        <entry key="highlightImplicitExpansionIssues_desc">Highlight potential issues resulting from implicit expansion in the code generation report</entry>
        <entry key="highlightLoopControlIssues">Highlight potential issues in use of coder.loop functions</entry>
        <entry key="highlightLoopControlIssues_desc">Highlight potential issues in use of coder.loop functions in the code generation report</entry>
        <entry key="numberOfCpuThreads">Maximum number of CPU threads</entry>
        <entry key="numberOfCpuThreads_desc">Maximum number of CPU threads to use in auto-parallelized loops</entry>
        <entry key="simdAcceleration">Hardware SIMD acceleration</entry>
        <entry key="simdAcceleration_desc">Select the level of Hardware SIMD acceleration</entry>
        <entry key="category_targetSpecificOptimizations">Target Specific Optimizations</entry>

        <!-- Memory -->
        <entry key="category_memory">Memory</entry>
        <entry key="category_dynamicMemory">Variable Sizing Support</entry>
        <entry key="globalDataSyncMethod">Global data synchronization mode</entry>
        <entry key="globalDataSyncMethod_desc">Controls when the global data of the generated MEX function is synchronized with the MATLAB workspace</entry>
        <entry key="enableVariableSizing">Enable variable-sizing</entry>
        <entry key="enableVariableSizing_desc">Enable support for variable-sized arrays</entry>
        <entry key="enableDynamicMemoryAllocation">Enable dynamic memory allocation</entry>
        <entry key="enableDynamicMemoryAllocation_desc">Enable support for dynamic memory allocation</entry>
        <entry key="dynamicMemoryAllocation">Dynamic memory allocation for variable-sized arrays</entry>
        <entry key="dynamicMemoryAllocation_desc">When to use dynamic memory allocation for variable-sized arrays</entry>
        <entry key="dynamicMemoryAllocationFixedSize">Enable dynamic memory allocation for fixed-sized arrays</entry>
        <entry key="dynamicMemoryAllocationFixedSize_desc">Enable support for dynamic memory allocation of fixed-sized arrays</entry>
        <entry key="dynamicMemoryAllocationVarSize">Dynamic memory allocation for variable-sized arrays</entry>
        <entry key="dynamicMemoryAllocationVarSize_desc">When to use dynamic memory allocation for variable-sized arrays</entry>
        <entry key="dynamicMemoryAllocationThreshold">Dynamic memory allocation threshold</entry>
        <entry key="dynamicMemoryAllocationThreshold_desc">Use dynamic memory allocation when matrix/array exceeds this threshold in bytes</entry>
        <entry key="dynamicMemoryAllocationInterface">Dynamic memory allocation interface</entry>
        <entry key="dynamicMemoryAllocationInterface_desc">Choose API code style for interfacing with variable-size arrays</entry>
        <entry key="rowMajor">Array layout</entry>
        <entry key="rowMajor_desc">Generates code for arrays using the specified layout. The layout can be column-major (first-dimension contiguous) or row-major (last-dimension contiguous).</entry>
        <entry key="highlightPotentialRowMajorIssues">Highlight potential row-major issues</entry>
        <entry key="highlightPotentialRowMajorIssues_desc">Highlight potential row-major issues in the code generation report</entry>
        <entry key="preserveArrayDimensions">Preserve array dimensions</entry>
        <entry key="preserveArrayDimensions_desc">Preserve array dimensions in generated code with N-dimensional indexing subscripting</entry>
        <entry key="stackUsageMax">Stack usage max</entry>
        <entry key="stackUsageMax_desc">Specify the maximum stack usage per application in bytes</entry>
        <entry key="multiInstanceCode">Generate re-entrant code</entry>
        <entry key="multiInstanceCode_desc">Generate reusable/reentrant code that multiple programs can use simultaneously</entry>
        <entry key="preserveUnusedStructFields">Preserve unused fields and properties</entry>
        <entry key="preserveUnusedStructFields_desc">Preserve unused struct fields and class properties in generated code</entry>

        <!-- Appearance -->
        <entry key="category_appearance">Code Appearance</entry>
        <entry key="category_comments">Comments</entry>
        <entry key="category_codeStyle">Code Style</entry>
        <entry key="category_dataTypeAlias">Custom Data Type Replacement</entry>
        <entry key="category_dataTypeAlias_grid">Data Type Aliases</entry>
        <entry key="category_namingRules">Naming Rules</entry>
        <entry key="filePartitionMethod">Generated file partitioning method</entry>
        <entry key="filePartitionMethod_desc">Choose the generated file partitioning method. Generating one file per MATLAB file facilitates correlating generated code with source code. Generating a single C/C++ file facilitates integrating generated code with existing software.</entry>
        <entry key="largeConstantGeneration">Large constant generation</entry>
        <entry key="largeConstantGeneration_desc">Specify how large constants are packaged in the generated code.</entry>
        <entry key="largeConstantThreshold">Large constant threshold</entry>
        <entry key="largeConstantThreshold_desc">Specify the size, in bytes, above which constants will be written to data files. This threshold is honored when "Large constant generation" is set to "Write only deep learning constants to data files" or "Write to data files"</entry>
        <entry key="generateComments">Include comments</entry>
        <entry key="generateComments_desc">Include comments in generated files based on the customizations below</entry>
        <entry key="commentStyle">Comment style</entry>
        <entry key="commentStyle_desc">Specify the style of comments in the generated code</entry>
        <entry key="matlabSourceComments">MATLAB source code as comments</entry>
        <entry key="matlabSourceComments_desc">Insert MATLAB source code into the generated code as comments</entry>
        <entry key="matlabSourceCommentLineNumbers">MATLAB source code comment line numbers</entry>
        <entry key="matlabSourceCommentLineNumbers_desc">Show MATLAB source code line numbers in comments</entry>
        <entry key="matlabFcnDesc">MATLAB function help text</entry>
        <entry key="matlabFcnDesc_desc">Insert MATLAB function descriptions (help text) into the generated code as part of the function banner</entry>
        <entry key="requirementsComments">Requirement summaries as comments</entry>
        <entry key="requirementsComments_desc">Include comments in the generated code that contain summaries for requirements linked to MATLAB code.</entry>
        <entry key="convertIfToSwitch">Convert if-elseif-else patterns to switch-case statements</entry>
        <entry key="convertIfToSwitch_desc">Improve readability by converting if-elseif-else patterns to switch-case statements, when possible</entry>
        <entry key="preserveExternInFcnDecls">Preserve extern keyword in function declarations</entry>
        <entry key="preserveExternInFcnDecls_desc">Specify whether the declarations of generated external functions will include the "extern" keyword</entry>
        <entry key="enableSignedLeftShifts">Use signed shift left for fixed-point operations and multiplication by powers of 2</entry>
        <entry key="enableSignedLeftShifts_desc">Specify whether to use signed shift left for multiplication by powers of 2 in the generated code</entry>
        <entry key="enableSignedRightShifts">Allow right shifts on signed integers</entry>
        <entry key="enableSignedRightShifts_desc">Specify whether to use signed right shifts or to replace these shifts with a function call that avoids signed shifts</entry>
        <entry key="parenthesesLevel">Parentheses</entry>
        <entry key="parenthesesLevel_desc">Specify the level of parenthesization in the code</entry>
        <entry key="maxIdLength">Maximum identifier length</entry>
        <entry key="maxIdLength_desc">Maximum identifier length for variable, typedef, and function names</entry>
        <entry key="headerGuardStyle">Header guard style</entry>
        <entry key="headerGuardStyle_desc">Style of preprocessor directive in generated code</entry>
        <entry key="dataTypeReplacement">Data type replacement</entry>
        <entry key="dataTypeReplacement_desc">Data type replacement</entry>
        <entry key="enableCustomReplacementTypes">Enable custom data type replacement</entry>
        <entry key="enableCustomReplacementTypes_desc">Specify the alias names for built-in MATLAB data types</entry>
        <entry key="replacementTypes_double">double</entry>
        <entry key="replacementTypes_double_desc">Specify custom replacement name for type 'double'. Custom name should be a valid C-identifier and not a reserved keyword in the target language.</entry>
        <entry key="replacementTypes_single">single</entry>
        <entry key="replacementTypes_single_desc">Specify custom replacement name for type 'single'. Custom name should be a valid C-identifier and not a reserved keyword in the target language.</entry>
        <entry key="replacementTypes_uint8">uint8</entry>
        <entry key="replacementTypes_uint8_desc">Specify custom replacement name for type 'uint8'. Custom name should be a valid C-identifier and not a reserved keyword in the target language.</entry>
        <entry key="replacementTypes_uint16">uint16</entry>
        <entry key="replacementTypes_uint16_desc">Specify custom replacement name for type 'uint16'. Custom name should be a valid C-identifier and not a reserved keyword in the target language.</entry>
        <entry key="replacementTypes_uint32">uint32 </entry>
        <entry key="replacementTypes_uint32_desc">Specify custom replacement name for type 'uint32'. Custom name should be a valid C-identifier and not a reserved keyword in the target language.</entry>
        <entry key="replacementTypes_uint64">uint64</entry>
        <entry key="replacementTypes_uint64_desc">Specify custom replacement name for type 'uint64'. Custom name should be a valid C-identifier and not a reserved keyword in the target language.</entry>
        <entry key="replacementTypes_int8">int8</entry>
        <entry key="replacementTypes_int8_desc">Specify custom replacement name for type 'int8'. Custom name should be a valid C-identifier and not a reserved keyword in the target language.</entry>
        <entry key="replacementTypes_int16">int16  </entry>
        <entry key="replacementTypes_int16_desc">Specify custom replacement name for type 'int16'. Custom name should be a valid C-identifier and not a reserved keyword in the target language.</entry>
        <entry key="replacementTypes_int32">int32</entry>
        <entry key="replacementTypes_int32_desc">Specify custom replacement name for type 'int32'. Custom name should be a valid C-identifier and not a reserved keyword in the target language.</entry>
        <entry key="replacementTypes_int64">int64</entry>
        <entry key="replacementTypes_int64_desc">Specify custom replacement name for type 'int64'. Custom name should be a valid C-identifier and not a reserved keyword in the target language.</entry>
        <entry key="replacementTypes_char">char</entry>
        <entry key="replacementTypes_char_desc">Specify custom replacement name for type 'char'. Custom name should be a valid C-identifier and not a reserved keyword in the target language.</entry>
        <entry key="replacementTypes_logical">logical</entry>
        <entry key="replacementTypes_logical_desc">Specify custom replacement name for type 'logical'. Custom name should be a valid C-identifier and not a reserved keyword in the target language.</entry>
        <entry key="importCustomTypes">Import custom types from external header files</entry>
        <entry key="importCustomTypes_desc">Specify whether to import type definition from external header files</entry>
        <entry key="customTypesHeaderFiles">Header files:</entry>
        <entry key="customTypesHeaderFiles_desc">List of header file name(s)</entry>
        <entry key="customFileNameStr">Generated source and header file name format</entry>
        <entry key="customFileNameStr_desc">File name format rule for generated files. Rule may contain valid file name characters and these macros:\n$M - Mangle\n$R - Root project name\n$N - Name of object being identified</entry>
        <entry key="customSymbolStrGlobalVar">Global variables</entry>
        <entry key="customSymbolStrGlobalVar_desc">Symbol format rule for global variables. Rule may contain valid C-identifier characters and these macros:\n$M - Mangle\n$R - Root project name\n$N - Name of object being identified</entry>
        <entry key="customSymbolStrType">Global types</entry>
        <entry key="customSymbolStrType_desc">Symbol format rule for global types. Rule may contain valid C-identifier characters and these macros:\n$M - Mangle\n$R - Root project name\n$N - Name of object being identified</entry>
        <entry key="customSymbolStrField">Field name of global types</entry>
        <entry key="customSymbolStrField_desc">Symbol format rule for field name of global types. Rule may contain valid C-identifier characters and these macros:\n$M - Mangle\n$R - Root project name\n$N - Name of object being identified</entry>
        <entry key="customSymbolStrFcn">Local functions</entry>
        <entry key="customSymbolStrFcn_desc">Symbol format rule for local functions. Rule may contain valid C-identifier characters and these macros:\n$M - Mangle\n$R - Root project name\n$N - Name of object being identified</entry>
        <entry key="customSymbolStrTmpVar">Local temporary variables</entry>
        <entry key="customSymbolStrTmpVar_desc">Symbol format rule for local temporary variables. Rule may contain valid C-identifier characters and these macros:\n$M - Mangle\n$R - Root project name\n$N - Name of object being identified</entry>
        <entry key="customSymbolStrMacro">Constant macros</entry>
        <entry key="customSymbolStrMacro_desc">Symbol format rule for constant macros. Rule may contain valid C-identifier characters and these macros:\n$M - Mangle\n$R - Root project name\n$N - Name of object being identified</entry>
        <entry key="customSymbolStrEMXArray">EMX array types</entry>
        <entry key="customSymbolStrEMXArray_desc">Symbol format rule for EMX Arrays (Embeddable mxArrays). Rule may contain valid C-identifier characters and these macros:\n$M - Mangle\n$R - Root project name\n$N - Name of object being identified</entry>
        <entry key="customSymbolStrEMXArrayFcn">EMX array utility functions</entry>
        <entry key="customSymbolStrEMXArrayFcn_desc">Symbol format rule for EMX Array utility functions. Rule may contain valid C-identifier characters and these macros:\n$M - Mangle\n$R - Root project name\n$N - Name of object being identified</entry>
        <entry key="reservedNameArray">Reserved names</entry>
        <entry key="reservedNameArray_desc">List of reserved names to exclude from generated code</entry>
        <entry key="codeTemplate">Code generation template file</entry>
        <entry key="codeTemplate_desc">Location of a code generation template file (CGT)</entry>
        <entry key="clangFormatFile">Control use of clang format configuration file</entry>
        <entry key="clangFormatFile_desc">Specify whether to generate a clang format configuration file or use an existing one</entry>
        <entry key="codeFormattingTool">Select code format tool to use</entry>
        <entry key="codeFormattingTool_desc">Specify which code format tool should be used</entry>

        <!-- C++ -->
        <entry key="category_cppFeatures">C++ Language Features</entry>
        <entry key="cppNamespace">C++ namespace</entry>
        <entry key="cppNamespace_desc">Generate C++ code under specified namespace</entry>
        <entry key="cppInterfaceStyle">Interface style</entry>
        <entry key="cppInterfaceStyle_desc">Style of interface to the generated C++ code for the MATLAB entry-point functions that you generate code from</entry>
        <entry key="cppInterfaceClassName">C++ interface class name</entry>
        <entry key="cppInterfaceClassName_desc">Interface class name for generated C++ code</entry>
        <entry key="cppPreserveClasses">Generate C++ classes from MATLAB classes</entry>
        <entry key="cppPreserveClasses_desc">Specify whether to generate C++ classes or C style structures for MATLAB classes</entry>
        <entry key="cppNamespaceForMathworksCode">Namespace for MathWorks code</entry>
        <entry key="cppNamespaceForMathworksCode_desc">Put all MathWorks code into specified C++ namespace</entry>
        <entry key="cppPreserveNamespaces">Generate C++ namespaces from MATLAB namespaces</entry>
        <entry key="cppPreserveNamespaces_desc">Specify whether to generate C++ namespaces for MATLAB namespaces</entry>
        <entry key="cppGenerateEnumClass">Generate C++ enum class from MATLAB enumeration</entry>
        <entry key="cppGenerateEnumClass_desc">Specify whether to generate C++ enum class for MATLAB enumeration</entry>

        <!-- Debugging -->
        <entry key="category_debug">Debugging</entry>
        <entry key="category_report">Code Generation Report</entry>
        <entry key="category_xil">SIL/PIL</entry>
        <entry key="enableDebugging">Enable C/C++ compiler debug mode</entry>
        <entry key="enableDebugging_desc">Compile the generated code in debug mode. The generated code is not optimized, resulting in faster compilation time but slower execution.</entry>
        <entry key="runtimeChecks">Generate run-time error checks</entry>
        <entry key="runtimeChecks_desc">Enable run-time error detection and reporting in the generated C/C++ code. If you select this option, the generated code checks for errors such as out-of-bounds array indexing.</entry>
        <entry key="verbose">Show verbose compiler output</entry>
        <entry key="verbose_desc">Show code generation stages and compiler output</entry>
        <entry key="verbosity">Show verbose compiler output</entry>
        <entry key="verbosity_desc">Show code generation stages and compiler output</entry>
        <entry key="reportPotentialDifferences">Report differences from MATLAB</entry>
        <entry key="reportPotentialDifferences_desc">Report locations in MATLAB code where the run-time behavior of generated code may differ from MATLAB code</entry>
        <entry key="generateReport">Always create a report</entry>
        <entry key="generateReport_desc">If this option is not selected, the MATLAB Coder software creates a report only if build errors occur.</entry>
        <entry key="generateCodeMetricsReport">Generate static code metrics report </entry>
        <entry key="generateCodeMetricsReport_desc">Generate a static code metrics report including generated file information, number of lines, and memory usage</entry>
        <entry key="generateCodeReplacementReport">Generate code replacements report</entry>
        <entry key="generateCodeReplacementReport_desc">Generate a code replacement report that summarizes the replacements used from the selected code replacement library</entry>
        <entry key="highlightPotentialDataTypeIssues">Highlight potential data type issues</entry>
        <entry key="highlightPotentialDataTypeIssues_desc">Enable highlight of singe-precision operations, double-precision operations, and expensive fixed-point operations in the MATLAB code pane of the code generation report</entry>
        <entry key="enableAutoParReporting">Enable automatic parallelization reporting</entry>
        <entry key="enableAutoParReporting_desc">Highlight automatically parallelized loops and show reasons for not automatically parallelizing particular loops in the MATLAB code pane of the code generation report</entry>
        <entry key="launchReport">Automatically launch a report if one is generated</entry>
        <entry key="launchReport_desc">Automatically open a code generation or error report</entry>
        <entry key="reportInfoVarName">Export report information to variable</entry>
        <entry key="reportInfoVarName_desc">Specify name of variable to export report information</entry>
        <entry key="silPilDebugging">Enable source-level debugging for SIL or PIL</entry>
        <entry key="silPilDebugging_desc">Specify whether to enable source-level debugging of generated code during a software-in-the-loop (SIL) or processor-in-the-loop (PIL) execution</entry>
        <entry key="silPilCheckConstantInputs">Check constant inputs</entry>
        <entry key="silPilCheckConstantInputs_desc">Specify whether to enable constant input checking mode for a SIL or PIL execution</entry>
        <entry key="silPilSyncGlobalData">Synchronize global data</entry>
        <entry key="silPilSyncGlobalData_desc">Specify whether to synchronize the values of global variables in the SIL or PIL execution environment with the values in the MATLAB workspace</entry>
        <entry key="codeExecutionProfiling">Enable entry point execution profiling</entry>
        <entry key="codeExecutionProfiling_desc">Enable execution-time profiling during a software-in-the-loop (SIL) or processor-in-the-loop (PIL) execution, which produces execution-time profiles for generated entry-point functions.</entry>
        <entry key="codeProfilingInstrumentation">Enable function execution profiling</entry>
        <entry key="codeProfilingInstrumentation_desc">Specify whether to enable measurement of execution times and generate metrics for functions inside generated code</entry>
        <entry key="codeProfilingSaveOptions">Specify profiling save options</entry>
        <entry key="codeProfilingSaveOptions_desc">Manage collection of profiling data.\n'All data' uploads all measurement and analysis data during  the simulation and stores the data in a workspace variable at the end of the simulation.\n'Summary data only' uploads all data during the simulation, but reduces memory usage by storing only summary data in the workspace at the end.\n'Metrics only' stores only a profiling summary on the target hardware during the simulation and uploads the summary at the end, which reduces communication bandwidth usage</entry>
        <entry key="codeStackProfiling">Enable entry point stack profiling</entry>
        <entry key="codeStackProfiling_desc">Enable stack usage profiling during a software-in-the-loop (SIL) or processor-in-the-loop (PIL) execution, which produces stack usage profiles for generated entry-point functions and internal functions</entry>
        <entry key="codeCoverage">Enable C/C++ code coverage</entry>
        <entry key="codeCoverage_desc">Specify whether to enable code coverage during a software-in-the-loop (SIL) or processor-in-the-loop (PIL) execution</entry>
        <entry key="verificationMode">Verification mode</entry>
        <entry key="verificationMode_desc">Code verification mode</entry>
        <entry key="enableMexProfiling">Enable execution profiling</entry>
        <entry key="enableMexProfiling_desc">Specify whether to enable profiling of generated MEX function</entry>
        <entry key="enableInstrumentCode">Enable support for instrumentCode function with time profiling</entry>
        <entry key="enableInstrumentCode_desc">Specify whether additional data is serialized to support instrumentCode function with time profiling</entry>

        <!-- Custom Code -->
        <entry key="category_customCode">Custom Code</entry>
        <entry key="category_crl">Code Replacement Libraries</entry>
        <entry key="category_performanceLibs">High Performance Libraries</entry>
        <entry key="category_customSourceCode">Custom C Code for Generated Files</entry>
        <entry key="customSourceCode">Source file</entry>
        <entry key="customSourceCode_desc">Code to appear at the top of generated C/C++ source files</entry>
        <entry key="customHeaderCode">Header file</entry>
        <entry key="customHeaderCode_desc">Code to appear at the top of generated header files</entry>
        <entry key="customInitializer">Initialize function</entry>
        <entry key="customInitializer_desc">Code to appear in the generated initialization function</entry>
        <entry key="customTerminator">Terminate function</entry>
        <entry key="customTerminator_desc">Code to appear in the generated terminate function</entry>
        <entry key="customInclude">Additional include directories</entry>
        <entry key="customInclude_desc">List of include directories to add to the include path when compiling the generated code</entry>
        <entry key="customSource">Additional source files</entry>
        <entry key="customSource_desc">List of source files to compile and link with the generated code</entry>
        <entry key="customLibrary">Additional libraries</entry>
        <entry key="customLibrary_desc">List of static library files to link with the generated code</entry>
        <entry key="postCodeGenCommand">Post-code-generation command</entry>
        <entry key="postCodeGenCommand_desc">Hook for updating the build information prior to compiling the generated code. For example, to add compiler or linker options.</entry>
        <entry key="codeReplacementLibrary">Code replacement library</entry>
        <entry key="codeReplacementLibrary_desc">Specify the code replacement library available to your target to generate processor-specific code to improve execution performance</entry>

        <!-- Hardware -->
        <entry key="category_hardware">Hardware</entry>
        <entry key="category_devices">Devices</entry>
        <entry key="category_hardwareImpl">Hardware Implementation</entry>
        <entry key="category_buildProcess">Build Process</entry>
        <entry key="category_prodDevice">Device (Production)</entry>
        <entry key="category_targetDevice">Device (Test)</entry>
        <entry key="category_sameDevice">Device</entry>
        <entry key="category_deviceDetails">Device Details</entry>
        <entry key="category_hardwareSizes">Sizes</entry>
        <entry key="category_toolchain">Build Process</entry>
        <entry key="hardwareName">Hardware board</entry>
        <entry key="hardwareName_desc">Name of hardware board</entry>
        <entry key="hardwareName_target">Hardware Board (Test)</entry>
        <entry key="prodEqTarget">Test hardware is the same as production hardware</entry>
        <entry key="prodEqTarget_desc">Specify that the hardware to be used to test code generated from this project is the same as the hardware on which the code will finally run. If this option is not selected, additional code is generated to emulate the final hardware on the test hardware.</entry>
        <entry key="toolchain">Toolchain</entry>
        <entry key="toolchain_desc">Toolchain to use for building a C/C++ library or executable program</entry>
        <entry key="customToolchainOptions">Custom toolchain options</entry>
        <entry key="customToolchainOptions_desc">Specify custom settings for tools in selected toolchain</entry>
        <entry key="buildConfiguration">Build configuration</entry>
        <entry key="buildConfiguration_desc">Compiler optimization or debug settings for toolchain</entry>
        <entry key="deviceVendor">Device vendor</entry>
        <entry key="deviceType">Device type</entry>
        <entry key="device_desc"><![CDATA[Select a predefined hardware device to specify the C/C++ language constraints for your microprocessor or <code>Generic-&gt;Custom</code> if your microprocessor is not listed. Select <code>ASIC/FPGA-&gt;ASIC/FPGA</code> for no constraints.]]></entry>
        <entry key="prodBitPerChar">char</entry>
        <entry key="prodBitPerChar_desc">Length in bits of the C char data type that the production hardware supports</entry>
        <entry key="prodBitPerShort">short</entry>
        <entry key="prodBitPerShort_desc">Length in bits of the C short data type that the production hardware supports</entry>
        <entry key="prodBitPerInt">int</entry>
        <entry key="prodBitPerInt_desc">Length in bits of the C int data type that the production hardware supports</entry>
        <entry key="prodBitPerLong">long</entry>
        <entry key="prodBitPerLong_desc">Length in bits of the C long data type that the production hardware supports</entry>
        <entry key="prodBitPerLongLong">long long</entry>
        <entry key="prodBitPerLongLong_desc">Length in bits of the C long long data type that the production hardware supports</entry>
        <entry key="prodBitPerFloat">float</entry>
        <entry key="prodBitPerFloat_desc">Length in bits of the C floating-point data type that the production hardware supports</entry>
        <entry key="prodBitPerDouble">double</entry>
        <entry key="prodBitPerDouble_desc">Length in bits of the C double data type that the production hardware supports</entry>
        <entry key="prodWordSize">machine word</entry>
        <entry key="prodWordSize_desc">The number of bits that the target processor can process at one time. Providing the processor's native word size allows for more efficient code to be generated when converting the endian byte order of data types.</entry>
        <entry key="prodBitPerPointer">pointer</entry>
        <entry key="prodBitPerPointer_desc">Length in bits of pointer data that the production hardware supports</entry>
        <entry key="prodBitPerSizeT">size_t</entry>
        <entry key="prodBitPerSizeT_desc">Length in bits of size_t data that the production hardware supports</entry>
        <entry key="prodBitPerPtrDiffT">ptrdiff_t</entry>
        <entry key="prodBitPerPtrDiffT_desc">Length in bits of ptrdiff_t data that the production hardware supports</entry>
        <entry key="prodEndianness">Byte ordering</entry>
        <entry key="prodEndianness_desc">Specify if the byte ordering of the target is Big Endian (most significant byte first) or Little Endian (least significant byte first).  If left unspecified, the generated code computes the result.</entry>
        <entry key="prodShiftRightIntArith">Shift right on a signed integer as an arithmetic shift</entry>
        <entry key="prodShiftRightIntArith_desc">Specify that your C/C++ compiler implements a right shift of a signed integer as an arithmetic right shift. Virtually all compilers do this.</entry>
        <entry key="prodLongLongMode">Enable long long</entry>
        <entry key="prodLongLongMode_desc">Specify that your C compiler supports long long. Most C99 compilers support long long</entry>
        <entry key="prodLargestAtomicInteger">Largest atomic integer size</entry>
        <entry key="prodLargestAtomicInteger_desc">Specify the largest integer data type that can be automatically loaded and stored on the selected hardware. All smaller integer data types will be considered atomic.</entry>
        <entry key="prodLargestAtomicFloat">Largest atomic floating-point size</entry>
        <entry key="prodLargestAtomicFloat_desc">Specify the largest floating-point data type that can be automatically loaded and stored on the selected hardware. If Double is specified, Float will be considered atomic as well.</entry>
        <entry key="prodIntDivRoundTo">Signed integer division rounds to</entry>
        <entry key="prodIntDivRoundTo_desc">Specify how your C/C++ compiler rounds the result of dividing two signed integers.  This information enables efficient C/C++ code to be generated from this project.</entry>
        <entry key="targetBitPerChar">char</entry>
        <entry key="targetBitPerChar_desc">Length in bits of the C char data type that the target hardware supports</entry>
        <entry key="targetBitPerShort">short</entry>
        <entry key="targetBitPerShort_desc">Length in bits of the C short data type that the target hardware supports</entry>
        <entry key="targetBitPerInt">int</entry>
        <entry key="targetBitPerInt_desc">Length in bits of the C int data type that the target hardware supports</entry>
        <entry key="targetBitPerLong">long</entry>
        <entry key="targetBitPerLong_desc">Length in bits of the C long data type that the target hardware supports</entry>
        <entry key="targetBitPerLongLong">long long</entry>
        <entry key="targetBitPerLongLong_desc">Length in bits of the C long long data type that the target hardware supports</entry>
        <entry key="targetBitPerFloat">float</entry>
        <entry key="targetBitPerFloat_desc">Length in bits of the C floating-point data type that the target hardware supports</entry>
        <entry key="targetBitPerDouble">double</entry>
        <entry key="targetBitPerDouble_desc">Length in bits of the C double data type that the target hardware supports</entry>
        <entry key="targetBitPerHalf">half</entry>
        <entry key="targetBitPerHalf_desc">Length in bits of the C half data type that the target hardware supports</entry>
        <entry key="targetWordSize">machine word</entry>
        <entry key="targetWordSize_desc">The number of bits that the target processor can process at one time. Providing the processor's native word size allows for more efficient code to be generated when converting the endian byte order of data types.</entry>
        <entry key="targetBitPerPointer">pointer</entry>
        <entry key="targetBitPerPointer_desc">Length in bits of pointer data that the target hardware supports</entry>
        <entry key="targetBitPerSizeT">size_t</entry>
        <entry key="targetBitPerSizeT_desc">Length in bits of size_t data that the target hardware support</entry>
        <entry key="targetBitPerPtrDiffT">ptrdiff_t</entry>
        <entry key="targetBitPerPtrDiffT_desc">Length in bits of ptrdiff_t data</entry>
        <entry key="targetEndianness">Byte ordering</entry>
        <entry key="targetEndianness_desc">Specify if the byte ordering of the target is Big Endian (most significant byte first) or Little Endian (least significant byte first). If left unspecified, the generated code computes the result.</entry>
        <entry key="targetShiftRightIntArith">Shift right on a signed integer as an arithmetic shift</entry>
        <entry key="targetShiftRightIntArith_desc">Specify that your C/C++ compiler implements a right shift of a signed integer as an arithmetic right shift. Virtually all compilers do this.</entry>
        <entry key="targetLongLongMode">Enable long long</entry>
        <entry key="targetLongLongMode_desc">Specify that your C compiler supports long long. Most C99 compilers support long long</entry>
        <entry key="targetLargestAtomicInteger">Largest atomic integer size</entry>
        <entry key="targetLargestAtomicInteger_desc">Specify the largest integer data type that can be automatically loaded and stored on the selected hardware. All smaller integer data types will be considered atomic.</entry>
        <entry key="targetLargestAtomicFloat">Largest atomic floating-point size</entry>
        <entry key="targetLargestAtomicFloat_desc">Specify the largest floating-point data type that can be automatically loaded and stored on the selected hardware. If Double is specified, Float will be considered atomic as well.</entry>
        <entry key="targetIntDivRoundTo">Signed integer division rounds to</entry>
        <entry key="targetIntDivRoundTo_desc">Specify how your C/C++ compiler rounds the result of dividing two signed integers. This information enables efficient C/C++ code to be generated from this project.</entry>

        <!-- Advanced -->
        <entry key="category_advanced">Advanced</entry>
        <entry key="category_legacy">Legacy</entry>
        <entry key="castingMode">Casting mode</entry>
        <entry key="castingMode_desc">Specify the level of casting in the code</entry>
        <entry key="indentStyle">Indent style</entry>
        <entry key="indentStyle_desc">Specify the indentation style in the code</entry>
        <entry key="indentSize">Indent size</entry>
        <entry key="indentSize_desc">Indentation size</entry>
        <entry key="columnLimit">Column limit</entry>
        <entry key="columnLimit_desc">Maximum number of columns without line break</entry>
        <entry key="constantFoldingTimeout">Constant folding timeout</entry>
        <entry key="constantFoldingTimeout_desc">Specify the maximum number of instructions to be executed when trying to determine if an expression can be reduced to a constant. You might need to increase this limit if your code contains very complicated expressions, otherwise MATLAB Coder will stop trying to analyze the expression prematurely.</entry>
        <entry key="compileTimeRecursionLimit">Compile-time recursion limit</entry>
        <entry key="compileTimeRecursionLimit_desc">Specify compile-time recursion limit. Increase this limit if you receive an error message about reaching the recursion limit. To disable recursion, set to 0.</entry>
        <entry key="enableRuntimeRecursion">Enable run-time recursion</entry>
        <entry key="enableRuntimeRecursion_desc">Disable this option to prevent run-time recursion in the generated code</entry>
        <entry key="runInitializeFcn">Automatically run the initialize function</entry>
        <entry key="runInitializeFcn_desc">Automatically insert a call to the initialize function at the beginning of your entry-point functions</entry>
        <entry key="includeInitializeFcn">Initialize function required</entry>
        <entry key="includeInitializeFcn_desc">Generate a project initialize function</entry>
        <entry key="includeTerminateFcn">Terminate function required</entry>
        <entry key="includeTerminateFcn_desc">Generate a project terminate function</entry>
        <entry key="generateExampleMain">Generate example main</entry>
        <entry key="generateExampleMain_desc">Generate an example main function</entry>
        <entry key="preserveVariableNames">Preserve variable names</entry>
        <entry key="preserveVariableNames_desc">Specifies the variable names that the variable reuse optimization must preserve</entry>
        <entry key="inlineUserFunctions">Inline strategy for user written MATLAB functions</entry>
        <entry key="inlineUserFunctions_desc">Specifies what inline strategy should be applied for all user written MATLAB functions which were not explicitly set to be inlined or not inlined using the coder.inline API</entry>
        <entry key="inlineMWFunctions">Inline strategy for MathWorks written MATLAB functions</entry>
        <entry key="inlineMWFunctions_desc">Specifies what inline strategy should be applied for all MathWorks written MATLAB functions which were not explicitly set to be inlined or not inlined using the coder.inline API</entry>
        <entry key="inlineMWFunctionsInUserFunctions">Inline strategy for calls between MathWorks functions and user functions</entry>
        <entry key="inlineMWFunctionsInUserFunctions_desc">Specifies what inline strategy should be applied for all callsites between the MW MATLAB functions and user written MATLAB functions</entry>
        <entry key="generateMakefile">Generate makefile</entry>
        <entry key="generateMakefile_desc">Enables the generation of a makefile for compiling the generated code</entry>
        <entry key="buildToolEnable">Build tool integration enable</entry>
        <entry key="buildToolEnable_desc">Determines whether or not the build tool integration is enabled</entry>
        <entry key="buildToolConfiguration">Build tool configuration</entry>
        <entry key="buildToolConfiguration_desc">Select the configuration to be used for building the generated code</entry>
        <entry key="echoExpressions">Echo expressions without terminating semicolons</entry>
        <entry key="echoExpressions_desc">Enables run-time output to appear in the MATLAB Command Window during MEX function execution for debugging. Disabling this option results in faster MEX function execution.</entry>
        <entry key="enableAutoExtrinsicCalls">Automatically introduce extrinsic calls</entry>
        <entry key="enableAutoExtrinsicCalls_desc">Unsupported functions automatically bypass code generation if possible. See also coder.extrinsic.</entry>
        <entry key="inlineThreshold">Inline threshold</entry>
        <entry key="inlineThreshold_desc">Specify the maximum size of functions to be inlined</entry>
        <entry key="inlineThresholdMax">Inline threshold max</entry>
        <entry key="inlineThresholdMax_desc">Specify the maximum size of functions after inlining</entry>
        <entry key="inlineStackLimit">Inline stack limit</entry>
        <entry key="inlineStackLimit_desc">Specify the stack size limit on inlined functions</entry>
        <entry key="enableStrengthReduction">Simplify array indexing</entry>
        <entry key="enableStrengthReduction_desc">Specify whether to use the strength reduction optimization to simplify array indexing in loops in the generated code</entry>
        <entry key="enableMemcpy">Use memcpy for vector assignment</entry>
        <entry key="enableMemcpy_desc">Optimize code by replacing for-loops with memcpy for vector assignment</entry>
        <entry key="memcpyThreshold">Memcpy threshold (bytes)</entry>
        <entry key="memcpyThreshold_desc">Use memcpy if (number of elements) * (number of bytes per element) is equal to or greater than this threshold. One byte is the width of a char in this context.</entry>
        <entry key="enableOpenMP">Enable OpenMP library if possible</entry>
        <entry key="enableOpenMP_desc">Enable the OpenMP (Portable Shared Memory Parallel Programming) library to speed up MEX function execution, if possible</entry>
        <entry key="initFltsAndDblsToZero">Use memset to initialize floats and doubles to 0.0</entry>
        <entry key="initFltsAndDblsToZero_desc">Optimize initialization of storage for floats and doubles. Select this option if the representation of floating-point zero used by your compiler and target CPU is identical to the integer bit pattern 0.</entry>
        <entry key="defaultVariableInitialization">Variable initialization</entry>
        <entry key="defaultVariableInitialization_desc">When declaring local variables, also require default values to be assigned</entry>
        <entry key="generateNonFiniteFilesIfUsed">Generate nonfinite support files if used</entry>
        <entry key="generateNonFiniteFilesIfUsed_desc">Generate nonfinite support files only if they are used</entry>
        <entry key="passStructByReference">Pass structures by reference to entry-point functions</entry>
        <entry key="passStructByReference_desc">Pass structures by reference to entry-point functions</entry>
        <entry key="constantInputs">Constant inputs</entry>
        <entry key="constantInputs_desc">Constant function parameters treatment</entry>
        <entry key="customLAPACKCallback">Custom LAPACK library callback</entry>
        <entry key="customLAPACKCallback_desc">Callback class for LAPACK library calls in code generated for certain linear algebra functions in MATLAB code</entry>
        <entry key="customFFTCallback">Custom FFT library callback</entry>
        <entry key="customFFTCallback_desc">Callback class for FFT library calls in code generated for FFT functions</entry>
        <entry key="useBuiltinFFTWLibrary">Use built-in FFTW library</entry>
        <entry key="useBuiltinFFTWLibrary_desc">Use the built-in FFTW library in code generated for FFT functions</entry>
        <entry key="customBLASCallback">Custom BLAS library callback</entry>
        <entry key="customBLASCallback_desc">Callback class for BLAS library calls in code generated for certain matrix operations in MATLAB code</entry>
        <entry key="usePrecompiledLibraries">Use precompiled libraries</entry>
        <entry key="usePrecompiledLibraries_desc">Instruct the code generator to favor either usage of precompiled libraries or usage of alternative implementations.</entry>
        <entry key="enableCRICodeCoverage">Collect code coverage</entry>
        <entry key="enableCRICodeCoverage_desc">Collect code coverage</entry>
        <entry key="enableJIT">Use JIT compilation for build type of MEX</entry>
        <entry key="enableJIT_desc">Specify whether to use just-in-time (JIT) compilation technology for MEX function generation</entry>
        <entry key="enableJITSilentBailOut">Silent JIT bailout reason</entry>
        <entry key="enableJITSilentBailOut_desc" translate="false" note="translate=false set due no translatable content"></entry>
        <entry key="generateDefaultInSwitch">Always generate a default case for switch</entry>
        <entry key="generateDefaultInSwitch_desc">Specify whether to produce a default case for all switch statements in the generated code</entry>
        <entry key="enableTraceability">Enable code traceability</entry>
        <entry key="enableTraceability_desc">Specify whether the code generation report should include code traceability</entry>
        <entry key="featureFlags">Additional flags</entry>
        <entry key="featureFlags_desc">This should be used only when requested by a MathWorks representative</entry>
        <entry key="category_inlining">Function Inlining</entry>
        <entry key="enableGitSupport">Enable Git integration support</entry>
        <entry key="enableAutoCommit">Allow automatically commit changes after codegen finished</entry>
        <entry key="repositoryStyle">Git repository creation style</entry>
        <entry key="enableImplicitExpansion">Enable implicit expansion</entry>
        <entry key="enableImplicitExpansion_desc">Implicit expansion enables binary operations on certain arrays of different sizes. Disabling this feature will make such operations produce an error instead.</entry>
        <entry key="configName">Configuration object name</entry>
        <entry key="configDescription">Configuration object description</entry>
        <entry key="cacheDynamicArrayDataPointer">Cache dynamic array data</entry>
        <entry key="cacheDynamicArrayDataPointer_desc">Improve performance by increasing vectorization of generated code</entry>
        <entry key="silPilVerbosity">SIL/PIL Verbosity</entry>
        <entry key="silPilVerbosity_desc">Display communication I/O information during software-in-the-loop (SIL) or processor-in-the-loop (PIL) execution.</entry>
        <entry key="codeProfilingCodeMetrics">SIL/PIL profiling metrics</entry>
        <entry key="codeProfilingCodeMetrics_desc">Specify type of profiling metrics that SIL/PIL execution produces.</entry>

        <!-- MISRA -->
        <entry key="category_misra">MISRA Compliance</entry>
        <entry key="justifyMISRAViolations">Generate justification comments for known MISRA violations</entry>
        <entry key="justifyMISRAViolations_desc">Generate justification comments for known MISRA violations</entry>

        <!-- App Only -->
        <entry key="category_paths">Paths</entry>
        <entry key="outputFile">Custom output file</entry>
        <entry key="outputFile_desc">Base file name for the primary output file</entry>
        <entry key="useEmbeddedCoderFeatures">Use Embedded Coder features</entry>
        <entry key="useEmbeddedCoderFeatures_desc">Whether or not to use Embedded Coder features</entry>
        <entry key="buildFolderType">Build folder</entry>
        <entry key="buildFolderType_desc">Folder in which to place all files generated during the build process</entry>
        <entry key="buildFolderPath">Build folder path</entry>
        <entry key="buildFolderPath_desc">Specify a folder in which to place all files generated during the build process</entry>
        <entry key="workingFolderType">Working folder</entry>
        <entry key="workingFolderType_desc">Folder to use as the "current working folder" during the build process</entry>
        <entry key="workingFolderPath">Working folder path</entry>
        <entry key="workingFolderPath_desc">Specify a folder to use as the "current working folder" during the build process</entry>
    </message>
</rsccat>
