<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright 2025 The MathWorks, Inc.-->

<rsccat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" locale="ko_KR" product="coderApp" xsi:noNamespaceSchemaLocation="../../resources/schema/msgcat.xsd">
  <message>
    <entry key="category_output">출력값</entry>
    <entry key="buildType">빌드 유형</entry>
    <entry key="buildType_desc">생성된 C/C++ 코드에서 빌드할 출력값</entry>
    <entry key="targetLang">언어</entry>
    <entry key="targetLang_desc">생성 코드에서 사용할 언어</entry>
    <entry key="targetLangStandard">언어 표준</entry>
    <entry key="targetLangStandard_desc">생성 코드에서 사용할 언어 표준을 지정합니다</entry>
    <entry key="genCodeOnly">소스 코드만 생성</entry>
    <entry key="genCodeOnly_desc">코드 생성 후 makefile을 실행하지 않습니다</entry>
    <entry key="category_speed">속도</entry>
    <entry key="responsivenessChecks">CTRL+C와 그래픽스 새로 고침에 대한 반응 활성화</entry>
    <entry key="responsivenessChecks_desc">주기적으로 Ctrl+C 중단을 검사하고 그래픽스를 새로 고칩니다. 이런 검사를 하지 않을 경우 MATLAB을 종료하는 것이 오래 진행 중인 실행을 종료하는 유일한 방법이 될 수도 있습니다. 이 검사를 끄면 생성 코드가 줄어들고 MEX 함수 실행 속도가 빨라집니다.</entry>
    <entry key="extrinsicCalls">외재적 호출 유지</entry>
    <entry key="extrinsicCalls_desc">비활성화된 경우 MEX 함수 인터페이스를 필요로 하는 호출을 제거합니다</entry>
    <entry key="integrityChecks">메모리 무결성 검사</entry>
    <entry key="integrityChecks_desc">생성 코드에서 메모리 무결성 위반을 감지하고 진단 결과를 제공하면서 실행을 중지합니다. 이러한 검사를 하지 않으면 위반이 예기치 않은 동작으로 이어집니다. 메모리 무결성 문제의 가장 흔한 원인은 범위를 벗어난 배열에 액세스한 것입니다. 이 검사를 끄면 생성 코드가 줄어들고 MEX 함수 실행 속도가 빨라집니다.</entry>
    <entry key="saturateOnIntegerOverflow">정수 오버플로 시 포화</entry>
    <entry key="saturateOnIntegerOverflow_desc">이 옵션을 선택하면 오버플로는 데이터형이 나타낼 수 있는 최솟값 또는 최댓값으로 포화됩니다. 선택하지 않으면 데이터형이 나타낼 수 있는 적절한 값으로 래핑됩니다.</entry>
    <entry key="purelyIntegerCode">순수 정수만 지원</entry>
    <entry key="purelyIntegerCode_desc">생성 코드에서 정수 숫자 데이터형만 지원합니다. 이 옵션을 선택하면 생성 코드에 부동소수점 숫자가 나타나지 않습니다.</entry>
    <entry key="supportNonFinite">nonfinite 숫자 지원</entry>
    <entry key="supportNonFinite_desc">생성 코드에서 nonfinite 값(inf, nan, -inf)을 지원합니다</entry>
    <entry key="loopUnrollThreshold">루프 풀기 임계값</entry>
    <entry key="loopUnrollThreshold_desc">"for"' 루프를 생성하는 최소 반복 횟수</entry>
    <entry key="preserveInputData">진입점 함수에 대한 입력 데이터 유지</entry>
    <entry key="preserveInputData_desc">진입점 함수에 대한 인수로 제공된 입력 데이터를 생성 코드에서 유지해야 하는지를 지정합니다.</entry>
    <entry key="enableAutoParallelization">자동 병렬화 활성화</entry>
    <entry key="enableAutoParallelization_desc">OpenMP 프라그마를 사용하여 생성 코드의 일부를 자동으로 병렬화합니다</entry>
    <entry key="highlightImplicitExpansionIssues">묵시적 확장으로 인해 발생할 수 있는 잠재적 문제 강조 표시</entry>
    <entry key="highlightImplicitExpansionIssues_desc">코드 생성 리포트에서 묵시적 확장으로 인해 발생할 수 있는 잠재적 문제를 강조 표시합니다</entry>
    <entry key="highlightLoopControlIssues">coder.loop 함수 사용 시 발생할 수 있는 잠재적 문제 강조 표시</entry>
    <entry key="highlightLoopControlIssues_desc">코드 생성 리포트에서 coder.loop 함수 사용 시 발생할 수 있는 잠재적 문제를 강조 표시합니다</entry>
    <entry key="numberOfCpuThreads">최대 CPU 스레드 개수</entry>
    <entry key="numberOfCpuThreads_desc">자동 병렬화 루프에 사용할 최대 CPU 스레드 개수</entry>
    <entry key="simdAcceleration">하드웨어 SIMD 가속</entry>
    <entry key="simdAcceleration_desc">하드웨어 SIMD 가속의 수준을 선택합니다</entry>
    <entry key="category_targetSpecificOptimizations">타깃별 최적화</entry>
    <entry key="category_memory">메모리</entry>
    <entry key="category_dynamicMemory">가변 크기 조정 지원</entry>
    <entry key="globalDataSyncMethod">전역 데이터 동기화 모드</entry>
    <entry key="globalDataSyncMethod_desc">생성된 MEX 함수의 전역 데이터가 언제 MATLAB 작업 공간과 동기화될지를 제어합니다</entry>
    <entry key="enableVariableSizing">가변 크기 조정 활성화</entry>
    <entry key="enableVariableSizing_desc">가변 크기 배열에 대한 지원을 활성화합니다</entry>
    <entry key="enableDynamicMemoryAllocation">동적 메모리 할당 활성화</entry>
    <entry key="enableDynamicMemoryAllocation_desc">동적 메모리 할당에 대한 지원을 활성화합니다</entry>
    <entry key="dynamicMemoryAllocation">가변 크기 배열을 위한 동적 메모리 할당</entry>
    <entry key="dynamicMemoryAllocation_desc">가변 크기 배열에 동적 메모리 할당을 사용하는 경우</entry>
    <entry key="dynamicMemoryAllocationFixedSize">고정 크기 배열을 위한 동적 메모리 할당 활성화</entry>
    <entry key="dynamicMemoryAllocationFixedSize_desc">고정 크기 배열의 동적 메모리 할당에 대한 지원을 활성화합니다</entry>
    <entry key="dynamicMemoryAllocationVarSize">가변 크기 배열을 위한 동적 메모리 할당</entry>
    <entry key="dynamicMemoryAllocationVarSize_desc">가변 크기 배열에 동적 메모리 할당을 사용하는 경우</entry>
    <entry key="dynamicMemoryAllocationThreshold">동적 메모리 할당 임계값</entry>
    <entry key="dynamicMemoryAllocationThreshold_desc">행렬/배열이 이 임계값(단위: 바이트)을 초과할 경우 동적 메모리 할당을 사용합니다</entry>
    <entry key="dynamicMemoryAllocationInterface">동적 메모리 할당 인터페이스</entry>
    <entry key="dynamicMemoryAllocationInterface_desc">가변 크기 배열과의 상호 작용을 위한 API 코드 스타일을 선택합니다</entry>
    <entry key="rowMajor">배열 레이아웃</entry>
    <entry key="rowMajor_desc">지정된 레이아웃을 사용하여 배열에 대한 코드를 생성합니다. 레이아웃은 열 우선(처음 차원이 연속적으로 배치) 또는 행 우선(마지막 차원이 연속적으로 배치)일 수 있습니다.</entry>
    <entry key="highlightPotentialRowMajorIssues">잠재적인 행 우선 문제 강조 표시</entry>
    <entry key="highlightPotentialRowMajorIssues_desc">코드 생성 리포트에서 잠재적인 행 우선 문제를 강조 표시합니다</entry>
    <entry key="preserveArrayDimensions">배열 차원 유지</entry>
    <entry key="preserveArrayDimensions_desc">N차원 인덱싱 첨자를 사용하여 생성 코드의 배열 차원을 유지합니다</entry>
    <entry key="stackUsageMax">스택 사용량 최댓값</entry>
    <entry key="stackUsageMax_desc">애플리케이션당 최대 스택 사용량(단위: 바이트)을 지정합니다</entry>
    <entry key="multiInstanceCode">재진입 코드 생성</entry>
    <entry key="multiInstanceCode_desc">여러 프로그램이 동시에 사용할 수 있는 재사용 가능/재진입 코드를 생성합니다</entry>
    <entry key="preserveUnusedStructFields">미사용 필드와 속성 유지</entry>
    <entry key="preserveUnusedStructFields_desc">생성 코드에서 미사용 구조체 필드와 클래스 속성을 유지합니다</entry>
    <entry key="category_appearance">코드 모양</entry>
    <entry key="category_comments">주석</entry>
    <entry key="category_codeStyle">코드 스타일</entry>
    <entry key="category_dataTypeAlias">사용자 지정 데이터형 대체</entry>
    <entry key="category_dataTypeAlias_grid">데이터형 별칭</entry>
    <entry key="category_namingRules">명명 규칙</entry>
    <entry key="filePartitionMethod">생성 파일 분할 방법</entry>
    <entry key="filePartitionMethod_desc">생성 파일 분할 방법을 선택합니다. MATLAB 파일당 하나의 파일을 생성하면 생성 코드와 소스 코드의 상관 관계를 파악하기가 수월합니다. 단일 C/C++ 파일을 생성하면 생성 코드를 기존 소프트웨어와 손쉽게 통합할 수 있습니다.</entry>
    <entry key="largeConstantGeneration">큰 상수 생성</entry>
    <entry key="largeConstantGeneration_desc">큰 상수를 생성 코드로 패키징하는 방법을 지정합니다.</entry>
    <entry key="largeConstantThreshold">큰 상수 임계값</entry>
    <entry key="largeConstantThreshold_desc">상수를 데이터 파일에 기록할 최소 크기(단위: 바이트)를 지정합니다. 이 임계값은 "큰 상수 생성"이 "데이터 파일에 딥러닝 상수만 쓰기" 또는 "데이터 파일에 쓰기"로 설정되어 있을 때 적용됩니다</entry>
    <entry key="generateComments">주석 포함</entry>
    <entry key="generateComments_desc">아래 사용자 지정에 따라 생성 파일에 주석을 포함합니다</entry>
    <entry key="commentStyle">주석 스타일</entry>
    <entry key="commentStyle_desc">생성 코드에서의 주석 스타일을 지정합니다</entry>
    <entry key="matlabSourceComments">MATLAB 소스 코드를 주석으로 삽입</entry>
    <entry key="matlabSourceComments_desc">MATLAB 소스 코드를 생성 코드에 주석으로 삽입합니다</entry>
    <entry key="matlabSourceCommentLineNumbers">MATLAB 소스 코드 주석 라인 번호</entry>
    <entry key="matlabSourceCommentLineNumbers_desc">MATLAB 소스 코드 라인 번호를 주석에 표시합니다</entry>
    <entry key="matlabFcnDesc">MATLAB 함수 도움말 텍스트</entry>
    <entry key="matlabFcnDesc_desc">MATLAB 함수 설명(도움말 텍스트)을 함수 배너의 일부로 생성 코드에 삽입합니다</entry>
    <entry key="requirementsComments">요구 사항 요약을 주석으로 삽입</entry>
    <entry key="requirementsComments_desc">MATLAB 코드와 관련된 요구 사항 요약 주석을 생성 코드에 포함합니다.</entry>
    <entry key="convertIfToSwitch">if-elseif-else 패턴을 switch-case 문으로 변환</entry>
    <entry key="convertIfToSwitch_desc">가능한 경우 if-elseif-else 패턴을 switch-case 문으로 변환하여 가독성을 개선합니다</entry>
    <entry key="preserveExternInFcnDecls">함수 선언에 extern 키워드 유지</entry>
    <entry key="preserveExternInFcnDecls_desc">생성된 외부 함수의 선언에 "extern" 키워드를 포함할지 여부를 지정합니다</entry>
    <entry key="enableSignedLeftShifts">고정소수점 연산 및 2의 거듭제곱이 곱해지는 연산에 부호 있는 왼쪽 시프트 사용</entry>
    <entry key="enableSignedLeftShifts_desc">생성 코드에서 2의 거듭제곱이 곱해지는 연산에 부호 있는 왼쪽 시프트를 사용할지 여부를 지정합니다</entry>
    <entry key="enableSignedRightShifts">부호 있는 정수에 대한 오른쪽 시프트 허용</entry>
    <entry key="enableSignedRightShifts_desc">부호 있는 오른쪽 시프트를 사용할지 또는 부호 있는 시프트를 피하는 함수 호출로 이 시프트를 대체할지 지정합니다</entry>
    <entry key="parenthesesLevel">소괄호</entry>
    <entry key="parenthesesLevel_desc">코드에서의 괄호 묶기 수준을 지정합니다</entry>
    <entry key="maxIdLength">최대 식별자 길이</entry>
    <entry key="maxIdLength_desc">변수, typedef, 함수 이름에 대한 최대 식별자 길이</entry>
    <entry key="headerGuardStyle">헤더 가드 스타일</entry>
    <entry key="headerGuardStyle_desc">생성 코드의 전처리기 지시문 스타일</entry>
    <entry key="dataTypeReplacement">데이터형 대체</entry>
    <entry key="dataTypeReplacement_desc">데이터형 대체</entry>
    <entry key="enableCustomReplacementTypes">사용자 지정 데이터형 대체 활성화</entry>
    <entry key="enableCustomReplacementTypes_desc">내장 MATLAB 데이터형의 별칭 이름을 지정합니다</entry>
    <entry key="replacementTypes_double">double</entry>
    <entry key="replacementTypes_double_desc">'double'형에 대한 사용자 지정 대체 이름을 지정합니다. 사용자 지정 이름은 타깃 언어의 예약 키워드가 아닌 유효한 C 식별자여야 합니다.</entry>
    <entry key="replacementTypes_single">single</entry>
    <entry key="replacementTypes_single_desc">'single'형에 대한 사용자 지정 대체 이름을 지정합니다. 사용자 지정 이름은 타깃 언어의 예약 키워드가 아닌 유효한 C 식별자여야 합니다.</entry>
    <entry key="replacementTypes_uint8">uint8</entry>
    <entry key="replacementTypes_uint8_desc">'uint8'형에 대한 사용자 지정 대체 이름을 지정합니다. 사용자 지정 이름은 타깃 언어의 예약 키워드가 아닌 유효한 C 식별자여야 합니다.</entry>
    <entry key="replacementTypes_uint16">uint16</entry>
    <entry key="replacementTypes_uint16_desc">'uint16'형에 대한 사용자 지정 대체 이름을 지정합니다. 사용자 지정 이름은 타깃 언어의 예약 키워드가 아닌 유효한 C 식별자여야 합니다.</entry>
    <entry key="replacementTypes_uint32">uint32 </entry>
    <entry key="replacementTypes_uint32_desc">'uint32'형에 대한 사용자 지정 대체 이름을 지정합니다. 사용자 지정 이름은 타깃 언어의 예약 키워드가 아닌 유효한 C 식별자여야 합니다.</entry>
    <entry key="replacementTypes_uint64">uint64</entry>
    <entry key="replacementTypes_uint64_desc">'uint64'형에 대한 사용자 지정 대체 이름을 지정합니다. 사용자 지정 이름은 타깃 언어의 예약 키워드가 아닌 유효한 C 식별자여야 합니다.</entry>
    <entry key="replacementTypes_int8">int8</entry>
    <entry key="replacementTypes_int8_desc">'int8'형에 대한 사용자 지정 대체 이름을 지정합니다. 사용자 지정 이름은 타깃 언어의 예약 키워드가 아닌 유효한 C 식별자여야 합니다.</entry>
    <entry key="replacementTypes_int16">int16  </entry>
    <entry key="replacementTypes_int16_desc">'int16'형에 대한 사용자 지정 대체 이름을 지정합니다. 사용자 지정 이름은 타깃 언어의 예약 키워드가 아닌 유효한 C 식별자여야 합니다.</entry>
    <entry key="replacementTypes_int32">int32</entry>
    <entry key="replacementTypes_int32_desc">'int32'형에 대한 사용자 지정 대체 이름을 지정합니다. 사용자 지정 이름은 타깃 언어의 예약 키워드가 아닌 유효한 C 식별자여야 합니다.</entry>
    <entry key="replacementTypes_int64">int64</entry>
    <entry key="replacementTypes_int64_desc">'int64'형에 대한 사용자 지정 대체 이름을 지정합니다. 사용자 지정 이름은 타깃 언어의 예약 키워드가 아닌 유효한 C 식별자여야 합니다.</entry>
    <entry key="replacementTypes_char">char</entry>
    <entry key="replacementTypes_char_desc">'char'형에 대한 사용자 지정 대체 이름을 지정합니다. 사용자 지정 이름은 타깃 언어의 예약 키워드가 아닌 유효한 C 식별자여야 합니다.</entry>
    <entry key="replacementTypes_logical">logical</entry>
    <entry key="replacementTypes_logical_desc">'logical'형에 대한 사용자 지정 대체 이름을 지정합니다. 사용자 지정 이름은 타깃 언어의 예약 키워드가 아닌 유효한 C 식별자여야 합니다.</entry>
    <entry key="importCustomTypes">외부 헤더 파일에서 사용자 지정 유형 가져오기</entry>
    <entry key="importCustomTypes_desc">외부 헤더 파일에서 유형 정의를 가져올지 여부를 지정합니다</entry>
    <entry key="customTypesHeaderFiles">헤더 파일:</entry>
    <entry key="customTypesHeaderFiles_desc">헤더 파일 이름 목록</entry>
    <entry key="customFileNameStr">생성된 소스 및 헤더 파일 이름 형식</entry>
    <entry key="customFileNameStr_desc">생성된 파일의 파일 이름 형식 규칙입니다. 규칙은 유효한 파일 이름 문자와 다음 매크로를 포함할 수 있습니다:\n$M - 변형\n$R - 루트 프로젝트 이름\n$N - 식별할 객체 이름</entry>
    <entry key="customSymbolStrGlobalVar">전역 변수</entry>
    <entry key="customSymbolStrGlobalVar_desc">전역 변수에 대한 기호 형식 규칙입니다. 규칙은 유효한 C 식별자 문자와 다음 매크로를 포함할 수 있습니다:\n$M - 변형\n$R - 루트 프로젝트 이름\n$N - 식별할 객체 이름</entry>
    <entry key="customSymbolStrType">전역 유형</entry>
    <entry key="customSymbolStrType_desc">전역 유형에 대한 기호 형식 규칙입니다. 규칙은 유효한 C 식별자 문자와 다음 매크로를 포함할 수 있습니다:\n$M - 변형\n$R - 루트 프로젝트 이름\n$N - 식별할 객체 이름</entry>
    <entry key="customSymbolStrField">전역 유형의 필드 이름</entry>
    <entry key="customSymbolStrField_desc">전역 유형의 필드 이름에 대한 기호 형식 규칙입니다. 규칙은 유효한 C 식별자 문자와 다음 매크로를 포함할 수 있습니다:\n$M - 변형\n$R - 루트 프로젝트 이름\n$N - 식별할 객체 이름</entry>
    <entry key="customSymbolStrFcn">로컬 함수</entry>
    <entry key="customSymbolStrFcn_desc">로컬 함수에 대한 기호 형식 규칙입니다. 규칙은 유효한 C 식별자 문자와 다음 매크로를 포함할 수 있습니다:\n$M - 변형\n$R - 루트 프로젝트 이름\n$N - 식별할 객체 이름</entry>
    <entry key="customSymbolStrTmpVar">로컬 임시 변수</entry>
    <entry key="customSymbolStrTmpVar_desc">로컬 임시 변수에 대한 기호 형식 규칙입니다. 규칙은 유효한 C 식별자 문자와 다음 매크로를 포함할 수 있습니다:\n$M - 변형\n$R - 루트 프로젝트 이름\n$N - 식별할 객체 이름</entry>
    <entry key="customSymbolStrMacro">상수 매크로</entry>
    <entry key="customSymbolStrMacro_desc">상수 매크로에 대한 기호 형식 규칙입니다. 규칙은 유효한 C 식별자 문자와 다음 매크로를 포함할 수 있습니다:\n$M - 변형\n$R - 루트 프로젝트 이름\n$N - 식별할 객체 이름</entry>
    <entry key="customSymbolStrEMXArray">EMX 배열 유형</entry>
    <entry key="customSymbolStrEMXArray_desc">EMX 배열(Embeddable mxArrays)에 대한 기호 형식 규칙입니다. 규칙은 유효한 C 식별자 문자와 다음 매크로를 포함할 수 있습니다:\n$M - 변형\n$R - 루트 프로젝트 이름\n$N - 식별할 객체 이름</entry>
    <entry key="customSymbolStrEMXArrayFcn">EMX 배열 유틸리티 함수</entry>
    <entry key="customSymbolStrEMXArrayFcn_desc">EMX 배열 유틸리티 함수에 대한 기호 형식 규칙입니다. 규칙은 유효한 C 식별자 문자와 다음 매크로를 포함할 수 있습니다:\n$M - 변형\n$R - 루트 프로젝트 이름\n$N - 식별할 객체 이름</entry>
    <entry key="reservedNameArray">예약된 이름</entry>
    <entry key="reservedNameArray_desc">생성 코드에서 제외할 예약된 이름 목록</entry>
    <entry key="codeTemplate">코드 생성 템플릿 파일</entry>
    <entry key="codeTemplate_desc">코드 생성 템플릿 파일(CGT, code generation template)의 위치</entry>
    <entry key="clangFormatFile">clang 형식 구성 파일 사용 제어</entry>
    <entry key="clangFormatFile_desc">clang 형식 구성 파일을 생성할지 아니면 기존 구성 파일을 사용할지 지정합니다</entry>
    <entry key="codeFormattingTool">사용할 코드 형식 툴 선택</entry>
    <entry key="codeFormattingTool_desc">사용할 코드 형식 툴을 지정합니다</entry>
    <entry key="category_cppFeatures">C++ 언어 특징</entry>
    <entry key="cppNamespace">C++ 네임스페이스</entry>
    <entry key="cppNamespace_desc">지정된 네임스페이스 아래에 C++ 코드를 생성합니다</entry>
    <entry key="cppInterfaceStyle">인터페이스 스타일</entry>
    <entry key="cppInterfaceStyle_desc">Style of interface to the generated C++ code for the MATLAB entry-point functions that you generate code from</entry>
    <entry key="cppInterfaceClassName">C++ 인터페이스 클래스 이름</entry>
    <entry key="cppInterfaceClassName_desc">생성 C++ 코드의 인터페이스 클래스 이름</entry>
    <entry key="cppPreserveClasses">MATLAB 클래스에서 C++ 클래스 생성</entry>
    <entry key="cppPreserveClasses_desc">MATLAB 클래스에 대해 C++ 클래스 또는 C 스타일 구조체를 생성할지 지정합니다</entry>
    <entry key="cppNamespaceForMathworksCode">MathWorks 코드를 위한 네임스페이스</entry>
    <entry key="cppNamespaceForMathworksCode_desc">MathWorks 코드를 지정된 C++ 네임스페이스에 모두 넣습니다</entry>
    <entry key="cppPreserveNamespaces">MATLAB 네임스페이스에서 C++ 네임스페이스 생성</entry>
    <entry key="cppPreserveNamespaces_desc">MATLAB 네임스페이스를 위한 C++ 네임스페이스를 생성할지 지정합니다</entry>
    <entry key="cppGenerateEnumClass">MATLAB 열거형에서 C++ 열거형 클래스 생성</entry>
    <entry key="cppGenerateEnumClass_desc">MATLAB 열거형에 대해 C++ 열거형 클래스를 생성할지 지정합니다</entry>
    <entry key="category_debug">디버그</entry>
    <entry key="category_report">코드 생성 리포트</entry>
    <entry key="category_xil">SIL/PIL</entry>
    <entry key="enableDebugging">C/C++ 컴파일러 디버그 모드 활성화</entry>
    <entry key="enableDebugging_desc">생성 코드를 디버그 모드로 컴파일합니다. 생성 코드가 최적화되지 않으며, 컴파일 시간은 빨라지지만 실행 속도는 느려집니다.</entry>
    <entry key="runtimeChecks">런타임 오류 검사 생성</entry>
    <entry key="runtimeChecks_desc">생성된 C/C++ 코드에서 런타임 오류 감지 및 리포팅을 활성화합니다. 이 옵션을 선택하면 범위를 벗어난 배열 인덱싱과 같은 오류가 검사됩니다.</entry>
    <entry key="verbose">상세 컴파일러 출력값 표시</entry>
    <entry key="verbose_desc">코드 생성 단계와 컴파일러 출력값을 표시합니다</entry>
    <entry key="verbosity">상세 컴파일러 출력값 표시</entry>
    <entry key="verbosity_desc">코드 생성 단계와 컴파일러 출력값을 표시합니다</entry>
    <entry key="reportPotentialDifferences">MATLAB에서 차이점 보고</entry>
    <entry key="reportPotentialDifferences_desc">생성 코드의 런타임 동작이 MATLAB 코드와 다를 수 있는 MATLAB 코드 위치를 보고합니다</entry>
    <entry key="generateReport">항상 리포트 생성</entry>
    <entry key="generateReport_desc">이 옵션을 선택하지 않으면 MATLAB Coder는 빌드 오류가 발생한 경우에만 리포트를 생성합니다.</entry>
    <entry key="generateCodeMetricsReport">정적 코드 메트릭 리포트 생성 </entry>
    <entry key="generateCodeMetricsReport_desc">생성 파일 정보, 라인 수, 메모리 사용량 등이 포함된 정적 코드 메트릭 리포트를 생성합니다</entry>
    <entry key="generateCodeReplacementReport">코드 대체 리포트 생성</entry>
    <entry key="generateCodeReplacementReport_desc">선택한 코드 대체 라이브러리에서 사용된 대체 상황을 요약한 코드 대체 리포트를 생성합니다</entry>
    <entry key="highlightPotentialDataTypeIssues">잠재적 데이터형 문제 강조 표시</entry>
    <entry key="highlightPotentialDataTypeIssues_desc">코드 생성 리포트의 MATLAB 코드 창에서 단정밀도 연산, 배정밀도 연산, 비용이 많이 드는 고정소수점 연산을 강조 표시합니다</entry>
    <entry key="enableAutoParReporting">자동 병렬화 리포팅 활성화</entry>
    <entry key="enableAutoParReporting_desc">코드 생성 리포트의 MATLAB 코드 창에서 자동으로 병렬화된 루프를 강조 표시하고 특정 루프를 자동으로 병렬화하지 않은 이유를 표시합니다</entry>
    <entry key="launchReport">리포트가 생성된 경우 자동으로 실행</entry>
    <entry key="launchReport_desc">코드 생성 리포트 또는 오류 리포트를 자동으로 엽니다</entry>
    <entry key="reportInfoVarName">리포트 정보를 변수로 내보내기</entry>
    <entry key="reportInfoVarName_desc">리포트 정보를 내보낼 변수 이름을 지정합니다</entry>
    <entry key="silPilDebugging">SIL 또는 PIL에 대한 소스 수준 디버그 활성화</entry>
    <entry key="silPilDebugging_desc">SIL(Software-in-the-Loop) 또는 PIL(Processor-in-the-Loop)을 실행하는 동안 생성 코드의 소스 수준 디버깅을 활성화할지 여부를 지정합니다</entry>
    <entry key="silPilCheckConstantInputs">상수 입력값 검사</entry>
    <entry key="silPilCheckConstantInputs_desc">SIL 실행 또는 PIL 실행에 대해 상수 입력값 검사 모드를 활성화할지 여부를 지정합니다</entry>
    <entry key="silPilSyncGlobalData">전역 데이터 동기화</entry>
    <entry key="silPilSyncGlobalData_desc">SIL 실행 환경 또는 PIL 실행 환경의 전역 변수 값을 MATLAB 작업 공간의 값과 동기화할지 여부를 지정합니다</entry>
    <entry key="codeExecutionProfiling">진입점 실행 프로파일링 활성화</entry>
    <entry key="codeExecutionProfiling_desc">생성된 진입점 함수에 대한 실행 시간 프로파일을 생성하는 SIL(Software-in-the-Loop) 또는 PIL(Processor-in-the-Loop)을 실행하는 동안 실행 시간 프로파일링을 활성화합니다.</entry>
    <entry key="codeProfilingInstrumentation">함수 실행 프로파일링 활성화</entry>
    <entry key="codeProfilingInstrumentation_desc">실행 시간 측정을 활성화하고 생성 코드 내부의 함수에 대한 메트릭을 생성할지 여부를 지정합니다</entry>
    <entry key="codeProfilingSaveOptions">프로파일링 저장 옵션 지정</entry>
    <entry key="codeProfilingSaveOptions_desc">프로파일링 데이터의 수집을 관리합니다.\n'모든 데이터' 옵션은 시뮬레이션 동안 모든 측정 데이터와 분석 데이터를 업로드하며, 시뮬레이션 종료 시 해당 데이터를 작업 공간 변수에 저장합니다.\n'요약 데이터만' 옵션은 시뮬레이션 동안 모든 데이터를 업로드하지만, 종료 시 작업 공간에는 요약 데이터만을 저장하여 메모리 사용량을 줄입니다.\n'메트릭만' 옵션은 시뮬레이션 동안 타깃 하드웨어에 프로파일링 요약만을 저장해 두었다가 종료 시에 이 요약을 업로드함으로써 통신 대역폭 사용량을 줄입니다</entry>
    <entry key="codeStackProfiling">진입점 스택 프로파일링 활성화</entry>
    <entry key="codeStackProfiling_desc">SIL(Software-in-the-loop) 또는 PIL(Processor-in-the-loop)을 실행하는 동안 스택 사용량 프로파일링을 활성화하여, 생성된 진입점 함수와 내부 함수에 대한 스택 사용량 프로파일을 생성합니다. </entry>
    <entry key="codeCoverage">C/C++ 코드 커버리지 활성화</entry>
    <entry key="codeCoverage_desc">SIL(Software-in-the-loop) 또는 PIL(Processor-in-the-loop)을 실행하는 동안 코드 커버리지를 활성화할지 여부를 지정합니다</entry>
    <entry key="verificationMode">검증 모드</entry>
    <entry key="verificationMode_desc">코드 검증 모드</entry>
    <entry key="enableMexProfiling">실행 프로파일링 활성화</entry>
    <entry key="enableMexProfiling_desc">생성된 MEX 함수의 프로파일링을 활성화할지 여부를 지정합니다</entry>
    <entry key="enableInstrumentCode">시간 프로파일링을 사용하는 instrumentCode 함수에 대한 지원 활성화</entry>
    <entry key="enableInstrumentCode_desc">시간 프로파일링을 사용하는 instrumentCode 함수를 지원하기 위해 추가 데이터를 직렬화할지 여부를 지정합니다</entry>
    <entry key="category_customCode">사용자 지정 코드</entry>
    <entry key="category_crl">코드 대체 라이브러리</entry>
    <entry key="category_performanceLibs">고성능 라이브러리</entry>
    <entry key="category_customSourceCode">생성 파일을 위한 C 코드 사용자 지정</entry>
    <entry key="customSourceCode">소스 파일</entry>
    <entry key="customSourceCode_desc">생성된 C/C++ 소스 파일의 맨 위에 표시할 코드</entry>
    <entry key="customHeaderCode">헤더 파일</entry>
    <entry key="customHeaderCode_desc">생성된 헤더 파일의 맨 위에 표시할 코드</entry>
    <entry key="customInitializer">초기화 함수</entry>
    <entry key="customInitializer_desc">생성된 초기화 함수에 표시할 코드</entry>
    <entry key="customTerminator">종료 함수</entry>
    <entry key="customTerminator_desc">생성된 종료 함수에 표시할 코드</entry>
    <entry key="customInclude">추가 include 디렉터리</entry>
    <entry key="customInclude_desc">생성 코드를 컴파일할 때 include 경로에 추가할 include 디렉터리 목록</entry>
    <entry key="customSource">추가 소스 파일</entry>
    <entry key="customSource_desc">컴파일하고 생성 코드와 연결할 소스 파일 목록</entry>
    <entry key="customLibrary">추가 라이브러리</entry>
    <entry key="customLibrary_desc">생성 코드와 연결할 정적 라이브러리 파일 목록</entry>
    <entry key="postCodeGenCommand">코드 생성 후처리 명령</entry>
    <entry key="postCodeGenCommand_desc">생성 코드를 컴파일하기 전에 빌드 정보를 업데이트하는 후크입니다. 컴파일러 또는 링커 옵션을 추가하는 것을 예로 들 수 있습니다.</entry>
    <entry key="codeReplacementLibrary">코드 대체 라이브러리</entry>
    <entry key="codeReplacementLibrary_desc">프로세서별 코드를 생성하여 실행 성능을 향상시키기 위해 타깃에 사용 가능한 코드 대체 라이브러리를 지정합니다</entry>
    <entry key="category_hardware">하드웨어</entry>
    <entry key="category_devices">장치</entry>
    <entry key="category_hardwareImpl">하드웨어 구현</entry>
    <entry key="category_buildProcess">빌드 프로세스</entry>
    <entry key="category_prodDevice">장치(프로덕션)</entry>
    <entry key="category_targetDevice">장치(테스트)</entry>
    <entry key="category_sameDevice">장치</entry>
    <entry key="category_deviceDetails">장치 세부 정보</entry>
    <entry key="category_hardwareSizes">크기</entry>
    <entry key="category_toolchain">빌드 프로세스</entry>
    <entry key="hardwareName">하드웨어 보드</entry>
    <entry key="hardwareName_desc">하드웨어 보드 이름</entry>
    <entry key="hardwareName_target">하드웨어 보드(테스트)</entry>
    <entry key="prodEqTarget">테스트 하드웨어가 프로덕션 하드웨어와 동일함</entry>
    <entry key="prodEqTarget_desc">이 프로젝트에서 생성된 코드를 테스트하는 데 사용되는 하드웨어가 코드가 최종적으로 실행되는 하드웨어와 동일한지 지정합니다. 이 옵션을 선택하지 않으면 테스트 하드웨어에서 최종 하드웨어를 에뮬레이션할 수 있도록 추가 코드가 생성됩니다.</entry>
    <entry key="toolchain">툴체인</entry>
    <entry key="toolchain_desc">C/C++ 라이브러리 또는 실행 프로그램 빌드에 사용할 툴체인</entry>
    <entry key="customToolchainOptions">사용자 지정 툴체인 옵션</entry>
    <entry key="customToolchainOptions_desc">선택한 툴체인의 툴에 대해 사용자 지정 설정을 합니다</entry>
    <entry key="buildConfiguration">빌드 구성</entry>
    <entry key="buildConfiguration_desc">툴체인을 위한 컴파일러 최적화 또는 디버그 설정</entry>
    <entry key="deviceVendor">장치 공급업체</entry>
    <entry key="deviceType">장치 유형</entry>
    <entry key="device_desc">사용 중인 마이크로프로세서에 대한 C/C++ 언어 제약 조건을 지정하려면 미리 정의된 하드웨어 장치를 선택하고, 사용 중인 마이크로프로세서가 표시되지 않으면 &lt;code&gt;Generic-&amp;gt;Custom&lt;/code&gt;을 선택합니다. 제약 조건이 없는 경우&lt;code&gt;ASIC/FPGA-&amp;gt;ASIC/FPGA&lt;/code&gt;를 선택하십시오.</entry>
    <entry key="prodBitPerChar">char</entry>
    <entry key="prodBitPerChar_desc">프로덕션 하드웨어가 지원하는 C char 데이터형의 길이(단위: 비트)</entry>
    <entry key="prodBitPerShort">short</entry>
    <entry key="prodBitPerShort_desc">프로덕션 하드웨어가 지원하는 C short 데이터형의 길이(단위: 비트)</entry>
    <entry key="prodBitPerInt">int</entry>
    <entry key="prodBitPerInt_desc">프로덕션 하드웨어가 지원하는 C int 데이터형의 길이(단위: 비트)</entry>
    <entry key="prodBitPerLong">long</entry>
    <entry key="prodBitPerLong_desc">프로덕션 하드웨어가 지원하는 C long 데이터형의 길이(단위: 비트)</entry>
    <entry key="prodBitPerLongLong">long long</entry>
    <entry key="prodBitPerLongLong_desc">프로덕션 하드웨어가 지원하는 C long long 데이터형의 길이(단위: 비트)</entry>
    <entry key="prodBitPerFloat">float</entry>
    <entry key="prodBitPerFloat_desc">프로덕션 하드웨어가 지원하는 C 부동소수점 데이터형의 길이(단위: 비트)</entry>
    <entry key="prodBitPerDouble">double</entry>
    <entry key="prodBitPerDouble_desc">프로덕션 하드웨어가 지원하는 C double 데이터형의 길이(단위: 비트)</entry>
    <entry key="prodWordSize">머신 워드</entry>
    <entry key="prodWordSize_desc">타깃 프로세서가 한 번에 처리할 수 있는 비트 수입니다. 프로세서의 네이티브 워드 크기를 제공하면 데이터형의 엔디안 바이트 순서를 변환할 때 더 효율적인 코드를 생성할 수 있습니다.</entry>
    <entry key="prodBitPerPointer">pointer</entry>
    <entry key="prodBitPerPointer_desc">프로덕션 하드웨어가 지원하는 pointer 데이터의 길이(단위: 비트)</entry>
    <entry key="prodBitPerSizeT">size_t</entry>
    <entry key="prodBitPerSizeT_desc">프로덕션 하드웨어가 지원하는 size_t 데이터의 길이(단위: 비트)</entry>
    <entry key="prodBitPerPtrDiffT">ptrdiff_t</entry>
    <entry key="prodBitPerPtrDiffT_desc">프로덕션 하드웨어가 지원하는 ptrdiff_t 데이터의 길이(단위: 비트)</entry>
    <entry key="prodEndianness">바이트 순서</entry>
    <entry key="prodEndianness_desc">타깃의 바이트 순서가 빅 엔디안인지(최상위 바이트 먼저) 또는 리틀 엔디안인지(최하위 바이트 먼저) 지정합니다. 지정되지 않은 경우 생성 코드가 결과를 계산합니다.</entry>
    <entry key="prodShiftRightIntArith">산술 시프트로 부호 있는 정수에 대한 오른쪽 시프트 수행</entry>
    <entry key="prodShiftRightIntArith_desc">C/C++ 컴파일러가 산술 시프트로 부호 있는 정수에 대한 오른쪽 시프트를 구현하도록 지정합니다. 거의 모든 컴파일러에서 이를 수행합니다.</entry>
    <entry key="prodLongLongMode">long long형 사용</entry>
    <entry key="prodLongLongMode_desc">C 컴파일러가 long long형을 지원하도록 합니다. 대부분의 C99 컴파일러는 long long 데이터형을 지원합니다</entry>
    <entry key="prodLargestAtomicInteger">최대 아토믹 정수 크기</entry>
    <entry key="prodLargestAtomicInteger_desc">선택한 하드웨어에서 자동으로 불러와서 저장할 수 있는 최대 정수 데이터형을 지정합니다. 더 작은 정수 데이터형은 모두 아토믹으로 간주됩니다.</entry>
    <entry key="prodLargestAtomicFloat">최대 아토믹 부동소수점 크기</entry>
    <entry key="prodLargestAtomicFloat_desc">선택한 하드웨어에서 자동으로 불러와서 저장할 수 있는 최대 부동소수점 데이터형을 지정합니다. double형이 지정된 경우 float형도 아토믹으로 간주됩니다.</entry>
    <entry key="prodIntDivRoundTo">부호 있는 정수 나눗셈의 반올림 방식</entry>
    <entry key="prodIntDivRoundTo_desc">C/C++ 컴파일러가 두 개의 부호 있는 정수를 나눈 결과를 반올림하는 방법을 지정합니다. 이 정보를 사용하면 이 프로젝트에서 효율적인 C/C++ 코드를 생성할 수 있습니다.</entry>
    <entry key="targetBitPerChar">char</entry>
    <entry key="targetBitPerChar_desc">타깃 하드웨어가 지원하는 C char 데이터형의 길이(단위: 비트)</entry>
    <entry key="targetBitPerShort">short</entry>
    <entry key="targetBitPerShort_desc">타깃 하드웨어가 지원하는 C short 데이터형의 길이(단위: 비트)</entry>
    <entry key="targetBitPerInt">int</entry>
    <entry key="targetBitPerInt_desc">타깃 하드웨어가 지원하는 C int 데이터형의 길이(단위: 비트)</entry>
    <entry key="targetBitPerLong">long</entry>
    <entry key="targetBitPerLong_desc">타깃 하드웨어가 지원하는 C long 데이터형의 길이(단위: 비트)</entry>
    <entry key="targetBitPerLongLong">long long</entry>
    <entry key="targetBitPerLongLong_desc">타깃 하드웨어가 지원하는 C long long 데이터형의 길이(단위: 비트)</entry>
    <entry key="targetBitPerFloat">float</entry>
    <entry key="targetBitPerFloat_desc">타깃 하드웨어가 지원하는 C 부동소수점 데이터형의 길이(단위: 비트)</entry>
    <entry key="targetBitPerDouble">double</entry>
    <entry key="targetBitPerDouble_desc">타깃 하드웨어가 지원하는 C double 데이터형의 길이(단위: 비트)</entry>
    <entry key="targetBitPerHalf">half</entry>
    <entry key="targetBitPerHalf_desc">타깃 하드웨어가 지원하는 C half 데이터형의 길이(단위: 비트)</entry>
    <entry key="targetWordSize">머신 워드</entry>
    <entry key="targetWordSize_desc">타깃 프로세서가 한 번에 처리할 수 있는 비트 수입니다. 프로세서의 네이티브 워드 크기를 제공하면 데이터형의 엔디안 바이트 순서를 변환할 때 더 효율적인 코드를 생성할 수 있습니다.</entry>
    <entry key="targetBitPerPointer">pointer</entry>
    <entry key="targetBitPerPointer_desc">타깃 하드웨어가 지원하는 pointer 데이터의 길이(단위: 비트)</entry>
    <entry key="targetBitPerSizeT">size_t</entry>
    <entry key="targetBitPerSizeT_desc">타깃 하드웨어가 지원하는 size_t 데이터의 길이(단위: 비트)</entry>
    <entry key="targetBitPerPtrDiffT">ptrdiff_t</entry>
    <entry key="targetBitPerPtrDiffT_desc">ptrdiff_t 데이터의 길이(단위: 비트)</entry>
    <entry key="targetEndianness">바이트 순서</entry>
    <entry key="targetEndianness_desc">타깃의 바이트 순서가 빅 엔디안인지(최상위 바이트 먼저) 또는 리틀 엔디안인지(최하위 바이트 먼저) 지정합니다. 지정되지 않은 경우 생성 코드가 결과를 계산합니다.</entry>
    <entry key="targetShiftRightIntArith">산술 시프트로 부호 있는 정수에 대한 오른쪽 시프트 수행</entry>
    <entry key="targetShiftRightIntArith_desc">C/C++ 컴파일러가 산술 시프트로 부호 있는 정수에 대한 오른쪽 시프트를 구현하도록 지정합니다. 거의 모든 컴파일러에서 이를 수행합니다.</entry>
    <entry key="targetLongLongMode">long long형 사용</entry>
    <entry key="targetLongLongMode_desc">C 컴파일러가 long long형을 지원하도록 합니다. 대부분의 C99 컴파일러는 long long 데이터형을 지원합니다</entry>
    <entry key="targetLargestAtomicInteger">최대 아토믹 정수 크기</entry>
    <entry key="targetLargestAtomicInteger_desc">선택한 하드웨어에서 자동으로 불러와서 저장할 수 있는 최대 정수 데이터형을 지정합니다. 더 작은 정수 데이터형은 모두 아토믹으로 간주됩니다.</entry>
    <entry key="targetLargestAtomicFloat">최대 아토믹 부동소수점 크기</entry>
    <entry key="targetLargestAtomicFloat_desc">선택한 하드웨어에서 자동으로 불러와서 저장할 수 있는 최대 부동소수점 데이터형을 지정합니다. double형이 지정된 경우 float형도 아토믹으로 간주됩니다.</entry>
    <entry key="targetIntDivRoundTo">부호 있는 정수 나눗셈의 반올림 방식</entry>
    <entry key="targetIntDivRoundTo_desc">C/C++ 컴파일러가 두 개의 부호 있는 정수를 나눈 결과를 반올림하는 방법을 지정합니다. 이 정보를 사용하면 이 프로젝트에서 효율적인 C/C++ 코드를 생성할 수 있습니다.</entry>
    <entry key="category_advanced">고급</entry>
    <entry key="category_legacy">레거시</entry>
    <entry key="castingMode">형변환 모드</entry>
    <entry key="castingMode_desc">코드에 형변환 수준을 지정합니다</entry>
    <entry key="indentStyle">들여쓰기 스타일</entry>
    <entry key="indentStyle_desc">코드에 들여쓰기 스타일을 지정합니다</entry>
    <entry key="indentSize">들여쓰기 크기</entry>
    <entry key="indentSize_desc">들여쓰기 크기</entry>
    <entry key="columnLimit">열 제한</entry>
    <entry key="columnLimit_desc">줄 바꿈 없는 최대 열 개수</entry>
    <entry key="constantFoldingTimeout">상수 폴딩 제한 시간</entry>
    <entry key="constantFoldingTimeout_desc">표현식을 상수로 축약할 수 있는지 결정하려고 할 때 실행할 최대 명령어 수를 지정합니다. 코드에 매우 복잡한 표현식이 포함되어 있는 경우, 이 한도를 늘려야 할 수도 있습니다. 그렇지 않으면 MATLAB Coder가 표현식의 분석을 조기에 중단할 것입니다.</entry>
    <entry key="compileTimeRecursionLimit">컴파일타임 재귀 제한</entry>
    <entry key="compileTimeRecursionLimit_desc">컴파일타임 재귀 제한을 지정합니다. 재귀 제한에 도달했다는 오류 메시지가 표시되면 이 제한을 늘리십시오. 재귀를 비활성화하려면 0으로 설정하십시오.</entry>
    <entry key="enableRuntimeRecursion">런타임 재귀 활성화</entry>
    <entry key="enableRuntimeRecursion_desc">생성 코드에서 런타임 재귀를 방지하려면 이 옵션을 비활성화합니다</entry>
    <entry key="runInitializeFcn">초기화 함수 자동 실행</entry>
    <entry key="runInitializeFcn_desc">진입점 함수 시작 시 초기화 함수에 자동으로 호출을 삽입합니다</entry>
    <entry key="includeInitializeFcn">초기화 함수 필요함</entry>
    <entry key="includeInitializeFcn_desc">프로젝트 초기화 함수를 생성합니다</entry>
    <entry key="includeTerminateFcn">종료 함수 필요함</entry>
    <entry key="includeTerminateFcn_desc">프로젝트 종료 함수를 생성합니다</entry>
    <entry key="generateExampleMain">샘플 메인 생성</entry>
    <entry key="generateExampleMain_desc">샘플 메인 함수를 생성합니다</entry>
    <entry key="preserveVariableNames">변수 이름 유지</entry>
    <entry key="preserveVariableNames_desc">변수 재사용 최적화가 유지해야 할 변수 이름을 지정합니다</entry>
    <entry key="inlineUserFunctions">사용자 작성 MATLAB 함수를 위한 인라인 전략</entry>
    <entry key="inlineUserFunctions_desc">인라인으로 명시적으로 설정되지 않았거나 coder.inline API를 사용하여 인라인으로 설정되지 않은 모든 사용자 작성 MATLAB 함수에 적용할 인라인 전략을 지정합니다</entry>
    <entry key="inlineMWFunctions">MathWorks 작성 MATLAB 함수를 위한 인라인 전략</entry>
    <entry key="inlineMWFunctions_desc">인라인으로 명시적으로 설정되지 않았거나 coder.inline API를 사용하여 인라인으로 설정되지 않은 모든 MathWorks 작성 MATLAB 함수에 적용할 인라인 전략을 지정합니다</entry>
    <entry key="inlineMWFunctionsInUserFunctions">MathWorks 함수와 사용자 함수 간의 호출을 위한 인라인 전략</entry>
    <entry key="inlineMWFunctionsInUserFunctions_desc">MW MATLAB 함수와 사용자 작성 MATLAB 함수 사이의 모든 호출 위치에 적용할 인라인 전략을 지정합니다</entry>
    <entry key="generateMakefile">makefile 생성</entry>
    <entry key="generateMakefile_desc">생성 코드를 컴파일하기 위해 makefile이 생성되도록 합니다</entry>
    <entry key="buildToolEnable">빌드 툴 통합 활성화</entry>
    <entry key="buildToolEnable_desc">빌드 툴 통합을 활성화할지 여부를 지정합니다</entry>
    <entry key="buildToolConfiguration">빌드 툴 구성</entry>
    <entry key="buildToolConfiguration_desc">생성 코드의 빌드에 사용할 구성을 선택합니다</entry>
    <entry key="echoExpressions">종료 세미콜론이 없는 표현식 에코</entry>
    <entry key="echoExpressions_desc">디버깅을 위해 MEX 함수를 실행하는 동안 MATLAB 명령 창에 런타임 출력값이 표시되도록 활성화합니다. 이 옵션을 비활성화하면 MEX 함수가 더 빨리 실행됩니다.</entry>
    <entry key="enableAutoExtrinsicCalls">외재적 호출 자동 도입</entry>
    <entry key="enableAutoExtrinsicCalls_desc">지원되지 않는 함수는 가능한 경우 코드 생성을 자동으로 우회합니다. coder.extrinsic도 참조하십시오.</entry>
    <entry key="inlineThreshold">인라인 임계값</entry>
    <entry key="inlineThreshold_desc">인라인 처리될 함수의 최대 크기를 지정합니다</entry>
    <entry key="inlineThresholdMax">인라인 임계값 최댓값</entry>
    <entry key="inlineThresholdMax_desc">인라인 처리 후 함수의 최대 크기를 지정합니다</entry>
    <entry key="inlineStackLimit">인라인 스택 제한</entry>
    <entry key="inlineStackLimit_desc">인라인 처리된 함수의 스택 크기 제한을 지정합니다</entry>
    <entry key="enableStrengthReduction">배열 인덱싱 단순화</entry>
    <entry key="enableStrengthReduction_desc">생성 코드의 루프에서 배열 인덱싱을 단순화하기 위해 강도 감소(strength reduction) 최적화를 사용할지 여부를 지정합니다</entry>
    <entry key="enableMemcpy">벡터 할당에 memcpy 사용</entry>
    <entry key="enableMemcpy_desc">벡터 할당에 대해 for 루프를 memcpy로 대체하여 코드를 최적화합니다</entry>
    <entry key="memcpyThreshold">memcpy 임계값(단위: 바이트)</entry>
    <entry key="memcpyThreshold_desc">(요소 개수) * (요소당 바이트 수)가 이 임계값보다 크거나 같은 경우 memcpy를 사용합니다. 이 경우 1바이트가 한 문자의 너비입니다.</entry>
    <entry key="enableOpenMP">가능한 경우 OpenMP 라이브러리 활성화</entry>
    <entry key="enableOpenMP_desc">가능한 경우 OpenMP(Portable Shared Memory Parallel Programming) 라이브러리를 활성화하여 MEX 함수 실행 속도를 높입니다</entry>
    <entry key="initFltsAndDblsToZero">memset를 사용하여 부동소수점 및 double형을 0.0으로 초기화</entry>
    <entry key="initFltsAndDblsToZero_desc">부동소수점 및 double형에 대한 저장공간 초기화를 최적화합니다. 컴파일러와 타깃 CPU에서 사용하는 부동소수점 0의 표현이 정수 비트 패턴 0과 동일한 경우 이 옵션을 선택하십시오.</entry>
    <entry key="defaultVariableInitialization">변수 초기화</entry>
    <entry key="defaultVariableInitialization_desc">지역 변수를 선언할 때 디폴트 값도 할당해야 합니다</entry>
    <entry key="generateNonFiniteFilesIfUsed">사용되는 경우 nonfinite 지원 파일 생성</entry>
    <entry key="generateNonFiniteFilesIfUsed_desc">사용되는 경우에만 nonfinite 지원 파일을 생성합니다</entry>
    <entry key="passStructByReference">진입점 함수에 대한 참조 방식으로 구조체 전달</entry>
    <entry key="passStructByReference_desc">진입점 함수를 참조하는 방식으로 구조체를 전달합니다</entry>
    <entry key="constantInputs">상수 입력값</entry>
    <entry key="constantInputs_desc">상수 함수 파라미터 처리</entry>
    <entry key="customLAPACKCallback">사용자 지정 LAPACK 라이브러리 콜백</entry>
    <entry key="customLAPACKCallback_desc">MATLAB 코드의 특정 선형 대수 함수에 대해 생성된 코드의 LAPACK 라이브러리 호출에 대한 콜백 클래스</entry>
    <entry key="customFFTCallback">사용자 지정 FFT 라이브러리 콜백</entry>
    <entry key="customFFTCallback_desc">FFT 함수에 대해 생성된 코드의 FFT 라이브러리 호출에 대한 콜백 클래스</entry>
    <entry key="useBuiltinFFTWLibrary">내장 FFTW 라이브러리 사용</entry>
    <entry key="useBuiltinFFTWLibrary_desc">FFT 함수에 대해 생성된 코드에서 내장된 FFTW 라이브러리를 사용합니다</entry>
    <entry key="customBLASCallback">사용자 지정 BLAS 라이브러리 콜백</entry>
    <entry key="customBLASCallback_desc">MATLAB 코드의 특정 행렬 연산에 대해 생성된 코드의 BLAS 라이브러리 호출에 대한 콜백 클래스</entry>
    <entry key="usePrecompiledLibraries">미리 컴파일된 라이브러리 사용</entry>
    <entry key="usePrecompiledLibraries_desc">미리 컴파일된 라이브러리 사용이나 대체 구현 사용 중 하나를 선호하도록 코드 생성기에 지시합니다.</entry>
    <entry key="enableCRICodeCoverage">코드 커버리지 수집</entry>
    <entry key="enableCRICodeCoverage_desc">코드 커버리지를 수집합니다</entry>
    <entry key="enableJIT">MEX의 빌드 유형에 대해 JIT 컴파일 사용</entry>
    <entry key="enableJIT_desc">MEX 함수 생성에 JIT(Just-in-Time) 컴파일 기술을 사용할지 여부를 지정합니다</entry>
    <entry key="enableJITSilentBailOut">Silent JIT bailout 이유</entry>
    <entry key="generateDefaultInSwitch">항상 switch에 대한 디폴트 case 생성</entry>
    <entry key="generateDefaultInSwitch_desc">생성 코드의 모든 switch 문에 대해 디폴트 case를 생성할지 여부를 지정합니다</entry>
    <entry key="enableTraceability">코드 추적성 활성화</entry>
    <entry key="enableTraceability_desc">코드 생성 리포트에 코드 추적성을 포함할지 여부를 지정합니다</entry>
    <entry key="featureFlags">추가 플래그</entry>
    <entry key="featureFlags_desc">MathWorks 담당자가 요청한 경우에만 사용해야 합니다</entry>
    <entry key="category_inlining">함수 인라인 처리</entry>
    <entry key="enableGitSupport">Git 연동 지원 활성화</entry>
    <entry key="enableAutoCommit">codegen 종료 후 자동으로 변경 내용 커밋</entry>
    <entry key="repositoryStyle">Git 리포지토리 생성 스타일</entry>
    <entry key="enableImplicitExpansion">묵시적 확장 활성화</entry>
    <entry key="enableImplicitExpansion_desc">묵시적 확장을 활성화하면 크기가 서로 다른 특정 배열에 대한 이항 연산을 수행할 수 있습니다. 이 기능을 비활성화하면 이러한 연산에서 오류가 발생합니다.</entry>
    <entry key="configName">구성 객체 이름</entry>
    <entry key="configDescription">구성 객체 설명</entry>
    <entry key="cacheDynamicArrayDataPointer">동적 배열 데이터 캐시</entry>
    <entry key="cacheDynamicArrayDataPointer_desc">생성 코드의 벡터화를 증가시켜 성능을 향상시킵니다</entry>
    <entry key="silPilVerbosity">SIL/PIL 세부 정보 표시</entry>
    <entry key="silPilVerbosity_desc">SIL(Software-In-the-Loop) 또는 PIL(Processor-In-the-Loop)을 실행하는 동안 통신 I/O 정보를 표시합니다.</entry>
    <entry key="codeProfilingCodeMetrics">SIL/PIL 프로파일링 메트릭</entry>
    <entry key="codeProfilingCodeMetrics_desc">SIL/PIL 실행에서 생성하는 프로파일링 메트릭의 유형을 지정합니다.</entry>
    <entry key="category_misra">MISRA 준수</entry>
    <entry key="justifyMISRAViolations">알려진 MISRA 위반에 대한 정당화 사유 주석 생성</entry>
    <entry key="justifyMISRAViolations_desc">알려진 MISRA 위반에 대한 정당화 사유 주석을 생성합니다</entry>
    <entry key="category_paths">경로</entry>
    <entry key="outputFile">사용자 지정 출력 파일</entry>
    <entry key="outputFile_desc">기본 출력 파일의 기본 파일 이름</entry>
    <entry key="useEmbeddedCoderFeatures">Embedded Coder 기능 사용</entry>
    <entry key="useEmbeddedCoderFeatures_desc">Embedded Coder 기능 사용 여부</entry>
    <entry key="buildFolderType">빌드 폴더</entry>
    <entry key="buildFolderType_desc">빌드 프로세스 중에 생성된 모든 파일을 배치할 폴더</entry>
    <entry key="buildFolderPath">빌드 폴더 경로</entry>
    <entry key="buildFolderPath_desc">빌드 프로세스 중에 생성된 모든 파일을 배치할 폴더를 지정합니다</entry>
    <entry key="workingFolderType">작업 폴더</entry>
    <entry key="workingFolderType_desc">빌드 프로세스 중에 "현재 작업 폴더"로 사용할 폴더</entry>
    <entry key="workingFolderPath">작업 폴더 경로</entry>
    <entry key="workingFolderPath_desc">빌드 프로세스 중에 "현재 작업 폴더"로 사용할 폴더를 지정합니다</entry>
    <entry key="enableJITSilentBailOut_desc"/>
  </message>
</rsccat>
