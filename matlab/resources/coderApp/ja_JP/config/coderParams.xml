<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright 2025 The MathWorks, Inc.-->

<rsccat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" locale="ja_JP" product="coderApp" xsi:noNamespaceSchemaLocation="../../resources/schema/msgcat.xsd">
  <message>
    <entry key="category_output">出力</entry>
    <entry key="buildType">ビルド タイプ</entry>
    <entry key="buildType_desc">生成された C/C++ コードからビルドするための出力</entry>
    <entry key="targetLang">言語</entry>
    <entry key="targetLang_desc">生成コード内で使用する言語</entry>
    <entry key="targetLangStandard">言語標準</entry>
    <entry key="targetLangStandard_desc">生成されたコードで使用する言語標準を指定します</entry>
    <entry key="genCodeOnly">ソース コードのみを生成</entry>
    <entry key="genCodeOnly_desc">コードの生成後に makefile を実行しません</entry>
    <entry key="category_speed">速度</entry>
    <entry key="responsivenessChecks">Ctrl + C キーへの応答、およびグラフィックスの更新を有効にする</entry>
    <entry key="responsivenessChecks_desc">Ctrl + C キーによる中断に対して定期的にチェックを行い、グラフィックスを更新します。これらのチェックを行わないと、長時間の実行を終了する唯一の方法は、MATLAB を終了させることになる可能性があります。このチェックをオフにすると生成されるコードが減少し、MEX 関数の実行が高速化します。</entry>
    <entry key="extrinsicCalls">外部呼び出しを維持</entry>
    <entry key="extrinsicCalls_desc">無効にする場合は、MEX 関数インターフェイスを必要とする呼び出しを削除します</entry>
    <entry key="integrityChecks">メモリの整合性をチェック</entry>
    <entry key="integrityChecks_desc">生成コード内のメモリの整合性の違反を検出し、診断で実行を停止します。これらのチェックを行わないと、違反によって予期しない動作をもたらす可能性があります。メモリの整合性の問題の原因として最も可能性が高いのは、範囲外の配列へのアクセスです。このチェックをオフにすると生成されるコードが減少し、MEX 関数の実行が高速化します。</entry>
    <entry key="saturateOnIntegerOverflow">整数オーバーフローで飽和</entry>
    <entry key="saturateOnIntegerOverflow_desc">選択されている場合、データ型で表せる最小値または最大値のいずれかがオーバーフローで飽和します。選択されていない場合は、データ型で表せる適切な値にラッピングされます。</entry>
    <entry key="purelyIntegerCode">純粋な整数のみをサポート</entry>
    <entry key="purelyIntegerCode_desc">生成コード内の整数の数値データ型のみをサポートします。選択した場合、浮動小数点数は生成コード内に表示されません。</entry>
    <entry key="supportNonFinite">非有限数のサポート</entry>
    <entry key="supportNonFinite_desc">生成コード内の非有限値 (inf、nan、-inf) をサポートします</entry>
    <entry key="loopUnrollThreshold">ループ展開のしきい値</entry>
    <entry key="loopUnrollThreshold_desc">"for" ループを生成する最小反復回数</entry>
    <entry key="preserveInputData">エントリポイント関数の入力データを保持</entry>
    <entry key="preserveInputData_desc">エントリポイント関数に対する引数として指定されている入力データを生成コードで保持する必要があるかどうかを指定します。</entry>
    <entry key="enableAutoParallelization">自動並列化を有効にする</entry>
    <entry key="enableAutoParallelization_desc">OpenMP プラグマを使用して、生成コードの各部を自動的に並列化します</entry>
    <entry key="highlightImplicitExpansionIssues">暗黙的な拡張によって生じる潜在的な問題を強調表示</entry>
    <entry key="highlightImplicitExpansionIssues_desc">暗黙的な拡張によって生じる潜在的な問題を、コード生成レポートで強調表示します</entry>
    <entry key="highlightLoopControlIssues">coder.loop 関数を使用する際の潜在的な問題を強調表示</entry>
    <entry key="highlightLoopControlIssues_desc">コード生成レポートで coder.loop 関数を使用する際の潜在的な問題を強調表示します</entry>
    <entry key="numberOfCpuThreads">CPU スレッドの最大数</entry>
    <entry key="numberOfCpuThreads_desc">自動並列化されたループで使用する CPU スレッドの最大数</entry>
    <entry key="simdAcceleration">ハードウェア SIMD アクセラレーション</entry>
    <entry key="simdAcceleration_desc">ハードウェア SIMD アクセラレーションのレベルを選択します</entry>
    <entry key="category_targetSpecificOptimizations">ターゲット固有の最適化</entry>
    <entry key="category_memory">メモリ</entry>
    <entry key="category_dynamicMemory">可変サイズ サポート</entry>
    <entry key="globalDataSyncMethod">グローバルなデータ同期モード</entry>
    <entry key="globalDataSyncMethod_desc">生成された MEX 関数のグローバル データが MATLAB ワークスペースといつ同期されるかを制御します</entry>
    <entry key="enableVariableSizing">可変サイズを有効化</entry>
    <entry key="enableVariableSizing_desc">可変サイズの配列のサポートを有効化します</entry>
    <entry key="enableDynamicMemoryAllocation">動的メモリ割り当てを有効化</entry>
    <entry key="enableDynamicMemoryAllocation_desc">動的メモリ割り当てのサポートを有効にします</entry>
    <entry key="dynamicMemoryAllocation">可変サイズの配列に対する動的メモリ割り当て</entry>
    <entry key="dynamicMemoryAllocation_desc">可変サイズの配列に動的メモリ割り当てを使用するタイミング</entry>
    <entry key="dynamicMemoryAllocationFixedSize">固定サイズの配列に対する動的メモリ割り当てを有効化</entry>
    <entry key="dynamicMemoryAllocationFixedSize_desc">固定サイズの配列に対する動的メモリ割り当てのサポートを有効にします</entry>
    <entry key="dynamicMemoryAllocationVarSize">可変サイズの配列に対する動的メモリ割り当て</entry>
    <entry key="dynamicMemoryAllocationVarSize_desc">可変サイズの配列に動的メモリ割り当てを使用するタイミング</entry>
    <entry key="dynamicMemoryAllocationThreshold">動的メモリ割り当てしきい値</entry>
    <entry key="dynamicMemoryAllocationThreshold_desc">行列/配列がこのしきい値 (バイト単位) を超えた場合、動的メモリ割り当てを使用します</entry>
    <entry key="dynamicMemoryAllocationInterface">動的メモリ割り当てインターフェイス</entry>
    <entry key="dynamicMemoryAllocationInterface_desc">可変サイズの配列と連携するための API コード スタイルを選択します</entry>
    <entry key="rowMajor">配列のレイアウト</entry>
    <entry key="rowMajor_desc">指定されたレイアウトを使用して配列のコードを生成します。レイアウトは列優先 (最初の次元の連続) または行優先 (最後の次元の連続) にできます。</entry>
    <entry key="highlightPotentialRowMajorIssues">潜在的な行優先の問題を強調表示</entry>
    <entry key="highlightPotentialRowMajorIssues_desc">潜在的な行優先の問題をコード生成レポートで強調表示します</entry>
    <entry key="preserveArrayDimensions">配列の次元を保持</entry>
    <entry key="preserveArrayDimensions_desc">生成されたコードで、N 次元のインデックスの添字を使用して配列の次元が保持されます</entry>
    <entry key="stackUsageMax">最大スタック使用量</entry>
    <entry key="stackUsageMax_desc">アプリケーションごとの最大スタック使用量をバイト単位で指定します</entry>
    <entry key="multiInstanceCode">再呼び出し可能なコードを生成</entry>
    <entry key="multiInstanceCode_desc">複数のプログラムが同時に使用できる再利用可能/再呼び出し可能なコードを生成します</entry>
    <entry key="preserveUnusedStructFields">未使用のフィールドとプロパティを保持</entry>
    <entry key="preserveUnusedStructFields_desc">生成コード内で未使用の struct フィールドとクラス プロパティを保持します</entry>
    <entry key="category_appearance">コード外観</entry>
    <entry key="category_comments">コメント</entry>
    <entry key="category_codeStyle">コード スタイル</entry>
    <entry key="category_dataTypeAlias">カスタム データ型置換</entry>
    <entry key="category_dataTypeAlias_grid">データ型エイリアス</entry>
    <entry key="category_namingRules">命名規則</entry>
    <entry key="filePartitionMethod">生成されたファイルの分割法</entry>
    <entry key="filePartitionMethod_desc">生成されたファイルの分割法を選択してください。MATLAB ファイルごとに 1 つのファイルを生成すると、生成コードをソース コードと関連付けやすくなります。1 つの C/C++ ファイルを生成すると、生成コードを既存のソフトウェアと統合しやすくなります。</entry>
    <entry key="largeConstantGeneration">大きな定数の生成</entry>
    <entry key="largeConstantGeneration_desc">大きな定数を生成コード内にパッケージ化する方法を指定します。</entry>
    <entry key="largeConstantThreshold">大きな定数のしきい値</entry>
    <entry key="largeConstantThreshold_desc">データ ファイルに書き込まれる定数のサイズをバイト単位で指定します。このしきい値は [大きな定数の生成] が [深層学習の定数のみをデータ ファイルに書き込む] または [データ ファイルに書き込む] に設定されている場合に適用されます</entry>
    <entry key="generateComments">コメントを含める</entry>
    <entry key="generateComments_desc">以下のカスタマイズに基づき、生成されたファイルにコメントを含めます</entry>
    <entry key="commentStyle">コメント スタイル</entry>
    <entry key="commentStyle_desc">生成コード内のコメントのスタイルを指定します</entry>
    <entry key="matlabSourceComments">コメントを示す MATLAB ソース コード</entry>
    <entry key="matlabSourceComments_desc">MATLAB ソース コードを生成コード内にコメントとして挿入します</entry>
    <entry key="matlabSourceCommentLineNumbers">MATLAB ソース コード コメントの行番号</entry>
    <entry key="matlabSourceCommentLineNumbers_desc">MATLAB ソース コードの行番号をコメントに表示します</entry>
    <entry key="matlabFcnDesc">MATLAB 関数のヘルプ テキスト</entry>
    <entry key="matlabFcnDesc_desc">MATLAB 関数の説明 (ヘルプ テキスト) を生成コード内に関数バナーの一部として挿入します</entry>
    <entry key="requirementsComments">コメントとしての要件の概要</entry>
    <entry key="requirementsComments_desc">MATLAB コードにリンクされている要件の概要を含むコメントを生成コードに含めます。</entry>
    <entry key="convertIfToSwitch">if-elseif-else のパターンを switch-case ステートメントに変換する</entry>
    <entry key="convertIfToSwitch_desc">可能な場合は、if-elseif-else のパターンを switch-case ステートメントに変換することで可読性を高めます</entry>
    <entry key="preserveExternInFcnDecls">関数の宣言で extern キーワードを保持する</entry>
    <entry key="preserveExternInFcnDecls_desc">生成された外部関数の宣言が "extern" キーワードを含むかどうかを指定します</entry>
    <entry key="enableSignedLeftShifts">固定小数点の演算および 2 のべき乗の乗算には符号付き左シフトを使用する</entry>
    <entry key="enableSignedLeftShifts_desc">生成コード内での 2 のべき乗の乗算に、符号付きの左シフトを使用するかどうかを指定します</entry>
    <entry key="enableSignedRightShifts">符号付き整数の右シフトを許可</entry>
    <entry key="enableSignedRightShifts_desc">符号付きの右シフトを使用するか、これらのシフトを符号付きのシフトを回避する関数呼び出しに置き換えるかを指定します</entry>
    <entry key="parenthesesLevel">かっこ</entry>
    <entry key="parenthesesLevel_desc">コード内のかっこのレベルを指定します</entry>
    <entry key="maxIdLength">識別子の最大の長さ</entry>
    <entry key="maxIdLength_desc">変数 typedef と関数名に対する識別子の最大の長さ</entry>
    <entry key="headerGuardStyle">ヘッダー ガード スタイル</entry>
    <entry key="headerGuardStyle_desc">生成コードにおけるプリプロセッサ命令のスタイル</entry>
    <entry key="dataTypeReplacement">データ型置換</entry>
    <entry key="dataTypeReplacement_desc">データ型置換</entry>
    <entry key="enableCustomReplacementTypes">カスタム データ型置換を有効化</entry>
    <entry key="enableCustomReplacementTypes_desc">組み込みの MATLAB データ型のエイリアス名を指定します</entry>
    <entry key="replacementTypes_double">double</entry>
    <entry key="replacementTypes_double_desc">'double' 型のカスタム置換名を指定します。カスタム名は、ターゲット言語の予約キーワードではなく、有効な C の識別子でなければなりません。</entry>
    <entry key="replacementTypes_single">single</entry>
    <entry key="replacementTypes_single_desc">'single' 型のカスタム置換名を指定します。カスタム名は、ターゲット言語の予約キーワードではなく、有効な C の識別子でなければなりません。</entry>
    <entry key="replacementTypes_uint8">uint8</entry>
    <entry key="replacementTypes_uint8_desc">'uint8' 型のカスタム置換名を指定します。カスタム名は、ターゲット言語の予約キーワードではなく、有効な C の識別子でなければなりません。</entry>
    <entry key="replacementTypes_uint16">uint16</entry>
    <entry key="replacementTypes_uint16_desc">'uint16' 型のカスタム置換名を指定します。カスタム名は、ターゲット言語の予約キーワードではなく、有効な C の識別子でなければなりません。</entry>
    <entry key="replacementTypes_uint32">uint32 </entry>
    <entry key="replacementTypes_uint32_desc">'uint32' 型のカスタム置換名を指定します。カスタム名は、ターゲット言語の予約キーワードではなく、有効な C の識別子でなければなりません。</entry>
    <entry key="replacementTypes_uint64">uint64</entry>
    <entry key="replacementTypes_uint64_desc">'uint64' 型のカスタム置換名を指定します。カスタム名は、ターゲット言語の予約キーワードではなく、有効な C の識別子でなければなりません。</entry>
    <entry key="replacementTypes_int8">int8</entry>
    <entry key="replacementTypes_int8_desc">'int8' 型のカスタム置換名を指定します。カスタム名は、ターゲット言語の予約キーワードではなく、有効な C の識別子でなければなりません。</entry>
    <entry key="replacementTypes_int16">int16  </entry>
    <entry key="replacementTypes_int16_desc">'int16' 型のカスタム置換名を指定します。カスタム名は、ターゲット言語の予約キーワードではなく、有効な C の識別子でなければなりません。</entry>
    <entry key="replacementTypes_int32">int32</entry>
    <entry key="replacementTypes_int32_desc">'int32' 型のカスタム置換名を指定します。カスタム名は、ターゲット言語の予約キーワードではなく、有効な C の識別子でなければなりません。</entry>
    <entry key="replacementTypes_int64">int64</entry>
    <entry key="replacementTypes_int64_desc">'int64' 型のカスタム置換名を指定します。カスタム名は、ターゲット言語の予約キーワードではなく、有効な C の識別子でなければなりません。</entry>
    <entry key="replacementTypes_char">char</entry>
    <entry key="replacementTypes_char_desc">'char' 型のカスタム置換名を指定します。カスタム名は、ターゲット言語の予約キーワードではなく、有効な C の識別子でなければなりません。</entry>
    <entry key="replacementTypes_logical">logical</entry>
    <entry key="replacementTypes_logical_desc">'logical' 型のカスタム置換名を指定します。カスタム名は、ターゲット言語の予約キーワードではなく、有効な C の識別子でなければなりません。</entry>
    <entry key="importCustomTypes">外部ヘッダー ファイルからカスタムの型をインポート</entry>
    <entry key="importCustomTypes_desc">型定義を外部ヘッダー ファイルからインポートするかどうかを指定します</entry>
    <entry key="customTypesHeaderFiles">ヘッダー ファイル:</entry>
    <entry key="customTypesHeaderFiles_desc">ヘッダー ファイル名のリスト</entry>
    <entry key="customFileNameStr">生成されるソース ファイルおよびヘッダー ファイルの名前の形式</entry>
    <entry key="customFileNameStr_desc">生成されるファイルのファイル名形式のルールです。ルールには有効なファイル名の文字と以下のマクロが含まれている場合があります:\n$M - マングル\n$R - ルートのプロジェクト名\n$N - 識別されるオブジェクト名</entry>
    <entry key="customSymbolStrGlobalVar">グローバル変数</entry>
    <entry key="customSymbolStrGlobalVar_desc">グローバル変数のシンボル形式のルールです。ルールには有効な C の識別子の文字と以下のマクロが含まれている場合があります:\n$M - マングル\n$R - ルートのプジェクト名\n$N - 識別されるオブジェクト名</entry>
    <entry key="customSymbolStrType">グローバルなタイプ</entry>
    <entry key="customSymbolStrType_desc">グローバルなタイプのシンボル形式のルールです。ルールには有効な C の識別子の文字と以下のマクロが含まれている場合があります:\n$M - マングル\n$R - ルートのプジェクト名\n$N - 識別されるオブジェクト名</entry>
    <entry key="customSymbolStrField">グローバルなタイプのフィールド名</entry>
    <entry key="customSymbolStrField_desc">グローバルなタイプのフィールド名のシンボル形式のルールです。ルールには有効な C の識別子の文字と以下のマクロが含まれている場合があります:\n$M - マングル\n$R - ルートのプジェクト名\n$N - 識別されるオブジェクト名</entry>
    <entry key="customSymbolStrFcn">ローカル関数</entry>
    <entry key="customSymbolStrFcn_desc">ローカル関数に対するシンボル形式のルールです。ルールには有効な C の識別子の文字と以下のマクロが含まれている場合があります:\n$M - マングル\n$R - ルートのプジェクト名\n$N - 識別されるオブジェクト名</entry>
    <entry key="customSymbolStrTmpVar">ローカルな一時変数</entry>
    <entry key="customSymbolStrTmpVar_desc">ローカルな一時変数に対するシンボル形式のルールです。ルールには有効な C の識別子の文字と以下のマクロが含まれている場合があります:\n$M - マングル\n$R - ルートのプジェクト名\n$N - 識別されるオブジェクト名</entry>
    <entry key="customSymbolStrMacro">定数のマクロ</entry>
    <entry key="customSymbolStrMacro_desc">定数のマクロのシンボル形式のルールです。ルールには有効な C の識別子の文字と以下のマクロが含まれている場合があります:\n$M - マングル\n$R - ルートのプジェクト名\n$N - 識別されるオブジェクト名</entry>
    <entry key="customSymbolStrEMXArray">EMX 配列タイプ</entry>
    <entry key="customSymbolStrEMXArray_desc">EMX 配列 (組み込み可能な mxArray) のシンボル形式のルールです。ルールには有効な C の識別子の文字と以下のマクロが含まれている場合があります:\n$M - マングル\n$R - ルートのプジェクト名\n$N - 識別されるオブジェクト名</entry>
    <entry key="customSymbolStrEMXArrayFcn">EMX 配列ユーティリティ関数</entry>
    <entry key="customSymbolStrEMXArrayFcn_desc">EMX 配列ユーティリティ関数のシンボル形式のルールです。ルールには有効な C の識別子の文字と以下のマクロが含まれている場合があります:\n$M - マングル\n$R - ルートのプジェクト名\n$N - 識別されるオブジェクト名</entry>
    <entry key="reservedNameArray">予約名</entry>
    <entry key="reservedNameArray_desc">生成コードから除外する予約名のリスト</entry>
    <entry key="codeTemplate">コード生成テンプレート ファイル</entry>
    <entry key="codeTemplate_desc">コード生成テンプレート (CGT) ファイルの場所</entry>
    <entry key="clangFormatFile">clang 形式の構成ファイルの使用を制御</entry>
    <entry key="clangFormatFile_desc">clang 形式の構成ファイルを生成するか、または既存のものを使用するかを指定します</entry>
    <entry key="codeFormattingTool">使用するコード形式ツールの選択</entry>
    <entry key="codeFormattingTool_desc">どのコード形式ツールを使用するかを指定します</entry>
    <entry key="category_cppFeatures">C++ 言語機能</entry>
    <entry key="cppNamespace">C++ 名前空間</entry>
    <entry key="cppNamespace_desc">指定した名前空間で C++ コードを生成します</entry>
    <entry key="cppInterfaceStyle">インターフェイス スタイル</entry>
    <entry key="cppInterfaceStyle_desc">コードの生成元である MATLAB エントリポイント関数について生成された C++ コードに対するインターフェイスのスタイル</entry>
    <entry key="cppInterfaceClassName">C++ インターフェイス クラス名</entry>
    <entry key="cppInterfaceClassName_desc">生成された C++ コードのインターフェイス クラス名</entry>
    <entry key="cppPreserveClasses">MATLAB クラスから C++ クラスを生成</entry>
    <entry key="cppPreserveClasses_desc">MATLAB クラスについて C++ クラスまたは C スタイル構造体を生成するかどうかを指定します</entry>
    <entry key="cppNamespaceForMathworksCode">MathWorks コードの名前空間</entry>
    <entry key="cppNamespaceForMathworksCode_desc">すべての MathWorks コードを指定した C++ 名前空間に挿入します</entry>
    <entry key="cppPreserveNamespaces">MATLAB 名前空間から C++ 名前空間を生成</entry>
    <entry key="cppPreserveNamespaces_desc">MATLAB 名前空間に対する C++ 名前空間を生成するかどうかを指定します</entry>
    <entry key="cppGenerateEnumClass">MATLAB 列挙から C++ enum クラスを生成</entry>
    <entry key="cppGenerateEnumClass_desc">MATLAB 列挙に対する C++ enum クラスを生成するかどうかを指定します</entry>
    <entry key="category_debug">デバッグ</entry>
    <entry key="category_report">コード生成レポート</entry>
    <entry key="category_xil">SIL/PIL</entry>
    <entry key="enableDebugging">C/C++ コンパイラのデバッグ モードを有効にする</entry>
    <entry key="enableDebugging_desc">デバッグ モードで生成コードをコンパイルしてください。生成コードは最適化されていないためコンパイル時間は短くなりますが、実行速度は遅くなります。</entry>
    <entry key="runtimeChecks">実行時エラー チェックの生成</entry>
    <entry key="runtimeChecks_desc">実行時エラーの検出と生成された C/C++ コードでのレポートを有効にします。このオプションを選択した場合、生成コードは範囲外の配列インデックスなどのエラーをチェックします。</entry>
    <entry key="verbose">詳細なコンパイラ出力を表示</entry>
    <entry key="verbose_desc">コード生成の段階とコンパイラの出力を表示</entry>
    <entry key="verbosity">詳細なコンパイラ出力を表示</entry>
    <entry key="verbosity_desc">コード生成の段階とコンパイラの出力を表示</entry>
    <entry key="reportPotentialDifferences">MATLAB との相違点をレポート</entry>
    <entry key="reportPotentialDifferences_desc">MATLAB コードにおいて、生成コードの実行時の動作が MATLAB コードとは異なる可能性がある場所をレポートします</entry>
    <entry key="generateReport">常にレポートを作成</entry>
    <entry key="generateReport_desc">このオプションが選択されていない場合、ビルド エラーが発生したときのみ MATLAB Coder ソフトウェアによってレポートが作成されます。</entry>
    <entry key="generateCodeMetricsReport">静的コード メトリクス レポートの生成 </entry>
    <entry key="generateCodeMetricsReport_desc">生成ファイル情報、行数、メモリ使用量などの静的コード メトリクス レポートを生成します</entry>
    <entry key="generateCodeReplacementReport">コード置換レポートの生成</entry>
    <entry key="generateCodeReplacementReport_desc">コード置換レポートを生成します。このレポートは、選択されたコード置換ライブラリで使用された置き換えをまとめたものです</entry>
    <entry key="highlightPotentialDataTypeIssues">潜在的なデータ型の問題を強調表示</entry>
    <entry key="highlightPotentialDataTypeIssues_desc">コード生成レポートの [MATLAB コード] ペインで、単精度演算、倍精度演算、計算量の多い固定小数点演算の強調表示を有効にします</entry>
    <entry key="enableAutoParReporting">自動並列化のレポートを有効にする</entry>
    <entry key="enableAutoParReporting_desc">コード生成レポートの [MATLAB コード] ペインで、自動並列化されたループを強調表示し、特定のループを自動並列化しない理由を示します</entry>
    <entry key="launchReport">レポート生成時の自動起動</entry>
    <entry key="launchReport_desc">コード生成レポートまたはエラー レポートを自動的に開きます</entry>
    <entry key="reportInfoVarName">レポート情報を変数にエクスポート</entry>
    <entry key="reportInfoVarName_desc">レポート情報のエクスポート先の変数名を指定します</entry>
    <entry key="silPilDebugging">SIL または PIL でソースレベル デバッグを有効にする</entry>
    <entry key="silPilDebugging_desc">ソフトウェアインザループ (SIL) またはプロセッサインザループ (PIL) の実行中に生成コードのソースレベル デバッグを有効にするかどうかを指定します</entry>
    <entry key="silPilCheckConstantInputs">定数入力をチェック</entry>
    <entry key="silPilCheckConstantInputs_desc">SIL または PIL の実行で定数入力チェック モードを有効にするかどうかを指定します</entry>
    <entry key="silPilSyncGlobalData">グローバル データを同期</entry>
    <entry key="silPilSyncGlobalData_desc">SIL または PIL 実行環境内のグローバル変数の値を、MATLAB ワークスペース内の値と同期するかどうかを指定します</entry>
    <entry key="codeExecutionProfiling">エントリ ポイント実行プロファイリングを有効にする</entry>
    <entry key="codeExecutionProfiling_desc">ソフトウェアインザループ (SIL) またはプロセッサインザループ (PIL) の実行中の実行時間プロファイリングを有効にします。これにより、生成されたエントリポイント関数の実行時間プロファイルが生成されます。</entry>
    <entry key="codeProfilingInstrumentation">関数実行プロファイリングを有効にする</entry>
    <entry key="codeProfilingInstrumentation_desc">実行時間の測定を有効にし、生成コード内の関数のメトリクスを生成するかどうかを指定します</entry>
    <entry key="codeProfilingSaveOptions">プロファイリング保存オプションの指定</entry>
    <entry key="codeProfilingSaveOptions_desc">プロファイリング データの収集を管理します。\n[すべてのデータ] は、シミュレーション中にすべての測定データと解析データをアップロードし、シミュレーションの終了時にデータをワークスペース変数に保存します。\n[要約データのみ] は、シミュレーション中にすべてのデータをアップロードしますが、終了時には要約データのみをワークスペースに保存することで、メモリ使用量を削減します。\n[メトリクスのみ] は、シミュレーション中にプロファイリングの概要のみをターゲット ハードウェアに保存し、終了時に概要をアップロードすることで、通信に使用する帯域幅を削減します</entry>
    <entry key="codeStackProfiling">エントリ ポイント スタック プロファイリングを有効にする</entry>
    <entry key="codeStackProfiling_desc">ソフトウェアインザループ (SIL) またはプロセッサインザループ (PIL) の実行中のスタック使用量プロファイリングを有効にします。これにより、生成されたエントリポイント関数と内部関数のスタック使用量プロファイルが生成されます</entry>
    <entry key="codeCoverage">C/C++ コード カバレッジを有効にする</entry>
    <entry key="codeCoverage_desc">ソフトウェアインザループ (SIL) またはプロセッサインザループ (PIL) の実行中にコード カバレッジを有効にするかどうかを指定します</entry>
    <entry key="verificationMode">検証モード</entry>
    <entry key="verificationMode_desc">コード検証モード</entry>
    <entry key="enableMexProfiling">実行プロファイリングを有効にする</entry>
    <entry key="enableMexProfiling_desc">生成された MEX 関数のプロファイリングを有効にするかどうかを指定します</entry>
    <entry key="enableInstrumentCode">時間プロファイリングによる関数 instrumentCode のサポートを有効にする</entry>
    <entry key="enableInstrumentCode_desc">時間プロファイリングによって関数 instrumentCode をサポートするために追加データをシリアル化するかどうかを指定します</entry>
    <entry key="category_customCode">カスタム コード</entry>
    <entry key="category_crl">コード置換ライブラリ</entry>
    <entry key="category_performanceLibs">高性能ライブラリ</entry>
    <entry key="category_customSourceCode">生成されたファイルのカスタム C コード</entry>
    <entry key="customSourceCode">ソース ファイル</entry>
    <entry key="customSourceCode_desc">生成された C/C++ ソース ファイルの上部に表示するコード</entry>
    <entry key="customHeaderCode">ヘッダー ファイル</entry>
    <entry key="customHeaderCode_desc">生成されたヘッダー ファイルの上部に表示するコード</entry>
    <entry key="customInitializer">初期化関数</entry>
    <entry key="customInitializer_desc">生成された初期化関数に表示するコード</entry>
    <entry key="customTerminator">終了関数</entry>
    <entry key="customTerminator_desc">生成された終了関数に表示するコード</entry>
    <entry key="customInclude">追加インクルード ディレクトリ</entry>
    <entry key="customInclude_desc">生成コードのコンパイルに際してインクルード パスに追加するインクルード ディレクトリのリスト</entry>
    <entry key="customSource">追加ソース ファイル</entry>
    <entry key="customSource_desc">コンパイルして生成コードとリンクするソース ファイルのリスト</entry>
    <entry key="customLibrary">追加ライブラリ</entry>
    <entry key="customLibrary_desc">生成コードとリンクするスタティック ライブラリ ファイルのリスト</entry>
    <entry key="postCodeGenCommand">コード生成後のコマンド</entry>
    <entry key="postCodeGenCommand_desc">生成コードのコンパイル前にビルド情報を更新するためのフック。たとえば、コンパイラまたはリンカーのオプションを追加します。</entry>
    <entry key="codeReplacementLibrary">コード置換ライブラリ</entry>
    <entry key="codeReplacementLibrary_desc">ターゲットで利用可能なコード置換ライブラリを指定して、実行パフォーマンスを高めるプロセッサ固有のコードを生成します</entry>
    <entry key="category_hardware">ハードウェア</entry>
    <entry key="category_devices">デバイス</entry>
    <entry key="category_hardwareImpl">ハードウェア実行</entry>
    <entry key="category_buildProcess">ビルド プロセス</entry>
    <entry key="category_prodDevice">デバイス (製品)</entry>
    <entry key="category_targetDevice">デバイス (テスト)</entry>
    <entry key="category_sameDevice">デバイス</entry>
    <entry key="category_deviceDetails">デバイスの詳細</entry>
    <entry key="category_hardwareSizes">サイズ</entry>
    <entry key="category_toolchain">ビルド プロセス</entry>
    <entry key="hardwareName">ハードウェア ボード</entry>
    <entry key="hardwareName_desc">ハードウェア ボードの名前</entry>
    <entry key="hardwareName_target">ハードウェア ボード (テスト)</entry>
    <entry key="prodEqTarget">テスト ハードウェアを製品ハードウェアと同じにする</entry>
    <entry key="prodEqTarget_desc">このプロジェクトから生成されたコードのテストに使用されるハードウェアが、コードを最終的に実行するハードウェアと同じであることを指定します。このオプションが選択されない場合、テスト ハードウェア上で最終ハードウェアをエミュレートするための追加コードが生成されます。</entry>
    <entry key="toolchain">ツールチェーン</entry>
    <entry key="toolchain_desc">C/C++ ライブラリまたは実行可能プログラムのビルドに使用するツールチェーン</entry>
    <entry key="customToolchainOptions">カスタム ツールチェーン オプション</entry>
    <entry key="customToolchainOptions_desc">選択したツールチェーンのツールに対し、カスタム設定を指定します</entry>
    <entry key="buildConfiguration">ビルド構成</entry>
    <entry key="buildConfiguration_desc">ツールチェーンのコンパイラ最適化またはデバッグ設定</entry>
    <entry key="deviceVendor">デバイス ベンダー</entry>
    <entry key="deviceType">デバイス タイプ</entry>
    <entry key="device_desc">事前定義されたハードウェア デバイスを選択し、ご利用のマイクロプロセッサについて C/C++ 言語の制約を指定するか、マイクロプロセッサがリストされていない場合は &lt;code&gt;[汎用] &gt; [カスタム]&lt;/code&gt; を選択します。制約なしの場合は &lt;code&gt;[ASIC/FPGA] &gt; [ASIC/FPGA]&lt;/code&gt; を選択します。</entry>
    <entry key="prodBitPerChar">char</entry>
    <entry key="prodBitPerChar_desc">製品ハードウェアがサポートする C の char データ型のビット長</entry>
    <entry key="prodBitPerShort">short</entry>
    <entry key="prodBitPerShort_desc">製品ハードウェアがサポートする C の short データ型のビット長</entry>
    <entry key="prodBitPerInt">int</entry>
    <entry key="prodBitPerInt_desc">製品ハードウェアがサポートする C の int データ型のビット長</entry>
    <entry key="prodBitPerLong">long</entry>
    <entry key="prodBitPerLong_desc">製品ハードウェアがサポートする C の long データ型のビット長</entry>
    <entry key="prodBitPerLongLong">long long</entry>
    <entry key="prodBitPerLongLong_desc">製品ハードウェアがサポートする C の long long データ型のビット長</entry>
    <entry key="prodBitPerFloat">float</entry>
    <entry key="prodBitPerFloat_desc">製品ハードウェアがサポートする C の浮動小数点データ型のビット長</entry>
    <entry key="prodBitPerDouble">double</entry>
    <entry key="prodBitPerDouble_desc">製品ハードウェアがサポートする C の double データ型のビット長</entry>
    <entry key="prodWordSize">マシン ワード</entry>
    <entry key="prodWordSize_desc">ターゲットプロセッサが一度に処理することのできるビット数。プロセッサのネイティブ ワード サイズを与えると、データ型のエンディアン バイト順を変換する際に、より効率的なコードを生成できるようになります。</entry>
    <entry key="prodBitPerPointer">ポインター</entry>
    <entry key="prodBitPerPointer_desc">製品ハードウェアがサポートするポインター データのビット長</entry>
    <entry key="prodBitPerSizeT">size_t</entry>
    <entry key="prodBitPerSizeT_desc">製品ハードウェアがサポートする size_t データのビット長</entry>
    <entry key="prodBitPerPtrDiffT">ptrdiff_t</entry>
    <entry key="prodBitPerPtrDiffT_desc">製品ハードウェアがサポートする ptrdiff_t データのビット長</entry>
    <entry key="prodEndianness">バイト順</entry>
    <entry key="prodEndianness_desc">ターゲットのバイト順として [ビッグ エンディアン] (最初が最上位バイト) または [リトル エンディアン] (最初が最下位バイト) を指定します。このオプションが指定されない場合、生成コードにより結果が算出されます。</entry>
    <entry key="prodShiftRightIntArith">算術シフトとして符号付き整数を右にシフト</entry>
    <entry key="prodShiftRightIntArith_desc">C/C++ コンパイラが算術右シフトとして符号付き整数を右にシフトすることを指定します。実質的にはすべてのコンパイラはこの操作を行います。</entry>
    <entry key="prodLongLongMode">long long を有効にする</entry>
    <entry key="prodLongLongMode_desc">ご使用の C コンパイラが long long をサポートしていることを指定します。ほとんどの C99 コンパイラは long long をサポートします</entry>
    <entry key="prodLargestAtomicInteger">最大 Atomic 整数サイズ</entry>
    <entry key="prodLargestAtomicInteger_desc">選択したハードウェアへの自動読み込みと保存が可能な最大整数データ型を指定します。小さい整数データ型はすべて Atomic と見なされます。</entry>
    <entry key="prodLargestAtomicFloat">最大 Atomic 浮動小数点サイズ</entry>
    <entry key="prodLargestAtomicFloat_desc">選択したハードウェアへの自動読み込みと保存が可能な最大浮動小数点データ型を指定します。Double が指定されている場合、Float も Atomic と見なされます。</entry>
    <entry key="prodIntDivRoundTo">符号付き整数の除算の丸め</entry>
    <entry key="prodIntDivRoundTo_desc">2 つの符号付き整数の除算結果を C/C++ コンパイラでどのように丸めるかを指定します。この情報により、このプロジェクトから効率的な C/C++ コードを生成できるようになります。</entry>
    <entry key="targetBitPerChar">char</entry>
    <entry key="targetBitPerChar_desc">ターゲット ハードウェアがサポートする C の char データ型のビット長</entry>
    <entry key="targetBitPerShort">short</entry>
    <entry key="targetBitPerShort_desc">ターゲット ハードウェアがサポートする C の short データ型のビット長</entry>
    <entry key="targetBitPerInt">int</entry>
    <entry key="targetBitPerInt_desc">ターゲット ハードウェアがサポートする C の int データ型のビット長</entry>
    <entry key="targetBitPerLong">long</entry>
    <entry key="targetBitPerLong_desc">ターゲット ハードウェアがサポートする C の long データ型のビット長</entry>
    <entry key="targetBitPerLongLong">long long</entry>
    <entry key="targetBitPerLongLong_desc">ターゲット ハードウェアがサポートする C の long long データ型のビット長</entry>
    <entry key="targetBitPerFloat">float</entry>
    <entry key="targetBitPerFloat_desc">ターゲット ハードウェアがサポートする C の浮動小数点データ型のビット長</entry>
    <entry key="targetBitPerDouble">double</entry>
    <entry key="targetBitPerDouble_desc">ターゲット ハードウェアがサポートする C の double データ型のビット長</entry>
    <entry key="targetBitPerHalf">half</entry>
    <entry key="targetBitPerHalf_desc">ターゲット ハードウェアがサポートする C の half データ型のビット長</entry>
    <entry key="targetWordSize">マシン ワード</entry>
    <entry key="targetWordSize_desc">ターゲットプロセッサが一度に処理することのできるビット数。プロセッサのネイティブ ワード サイズを与えると、データ型のエンディアン バイト順を変換する際に、より効率的なコードを生成できるようになります。</entry>
    <entry key="targetBitPerPointer">ポインター</entry>
    <entry key="targetBitPerPointer_desc">ターゲット ハードウェアがサポートするポインター データのビット長</entry>
    <entry key="targetBitPerSizeT">size_t</entry>
    <entry key="targetBitPerSizeT_desc">ターゲット ハードウェアがサポートする size_t データのビット長</entry>
    <entry key="targetBitPerPtrDiffT">ptrdiff_t</entry>
    <entry key="targetBitPerPtrDiffT_desc">ptrdiff_t データのビット長</entry>
    <entry key="targetEndianness">バイト順</entry>
    <entry key="targetEndianness_desc">ターゲットのバイト順として [ビッグ エンディアン] (最初が最上位バイト) または [リトル エンディアン] (最初が最下位バイト) を指定します。このオプションが指定されない場合、生成コードにより結果が算出されます。</entry>
    <entry key="targetShiftRightIntArith">算術シフトとして符号付き整数を右にシフト</entry>
    <entry key="targetShiftRightIntArith_desc">C/C++ コンパイラが算術右シフトとして符号付き整数を右にシフトすることを指定します。実質的にはすべてのコンパイラはこの操作を行います。</entry>
    <entry key="targetLongLongMode">long long を有効にする</entry>
    <entry key="targetLongLongMode_desc">ご使用の C コンパイラが long long をサポートしていることを指定します。ほとんどの C99 コンパイラは long long をサポートします</entry>
    <entry key="targetLargestAtomicInteger">最大 Atomic 整数サイズ</entry>
    <entry key="targetLargestAtomicInteger_desc">選択したハードウェアへの自動読み込みと保存が可能な最大整数データ型を指定します。小さい整数データ型はすべて Atomic と見なされます。</entry>
    <entry key="targetLargestAtomicFloat">最大 Atomic 浮動小数点サイズ</entry>
    <entry key="targetLargestAtomicFloat_desc">選択したハードウェアへの自動読み込みと保存が可能な最大浮動小数点データ型を指定します。Double が指定されている場合、Float も Atomic と見なされます。</entry>
    <entry key="targetIntDivRoundTo">符号付き整数の除算の丸め</entry>
    <entry key="targetIntDivRoundTo_desc">2 つの符号付き整数の除算結果を C/C++ コンパイラでどのように丸めるかを指定します。この情報により、このプロジェクトから効率的な C/C++ コードを生成できるようになります。</entry>
    <entry key="category_advanced">詳細設定</entry>
    <entry key="category_legacy">レガシ</entry>
    <entry key="castingMode">キャスト モード</entry>
    <entry key="castingMode_desc">コード内のキャストのレベルを指定します</entry>
    <entry key="indentStyle">インデント スタイル</entry>
    <entry key="indentStyle_desc">コードのインデント スタイルを指定します</entry>
    <entry key="indentSize">インデント サイズ</entry>
    <entry key="indentSize_desc">インデントのサイズです</entry>
    <entry key="columnLimit">列の制限</entry>
    <entry key="columnLimit_desc">改行なしの最大列数</entry>
    <entry key="constantFoldingTimeout">定数畳み込みのタイムアウト</entry>
    <entry key="constantFoldingTimeout_desc">式を定数に省略できるかどうかを特定する場合に、実行される指示の最大数を指定します。非常に複雑な式がコードに含まれている場合は、この制限を引き上げる必要があります。そうしないと、MATLAB Coder は式の解析を途中で停止します。</entry>
    <entry key="compileTimeRecursionLimit">コンパイル時の再帰限界値</entry>
    <entry key="compileTimeRecursionLimit_desc">コンパイル時の再帰限界値を指定します。再帰限界値に達しているというエラー メッセージが表示された場合は、この限界値を上げてください。再帰を無効にするには 0 に設定します。</entry>
    <entry key="enableRuntimeRecursion">実行時の再帰を有効にする</entry>
    <entry key="enableRuntimeRecursion_desc">生成コードで実行時の再帰を防ぐには、このオプションを無効にします</entry>
    <entry key="runInitializeFcn">初期化関数を自動的に実行</entry>
    <entry key="runInitializeFcn_desc">エントリポイント関数の先頭に初期化関数の呼び出しを自動的に挿入します</entry>
    <entry key="includeInitializeFcn">初期化関数が必要</entry>
    <entry key="includeInitializeFcn_desc">プロジェクトの初期化関数を生成します</entry>
    <entry key="includeTerminateFcn">終了関数が必要</entry>
    <entry key="includeTerminateFcn_desc">プロジェクトの終了関数を生成します</entry>
    <entry key="generateExampleMain">main の例の生成</entry>
    <entry key="generateExampleMain_desc">main 関数の例を生成する</entry>
    <entry key="preserveVariableNames">変数名の保持</entry>
    <entry key="preserveVariableNames_desc">変数再利用の最適化において保持しなければならない変数名を指定します</entry>
    <entry key="inlineUserFunctions">ユーザー定義の MATLAB 関数に対するインライン手法</entry>
    <entry key="inlineUserFunctions_desc">ユーザー定義の MATLAB 関数のうち、coder.inline API を使用してインライン化するかインライン化しないかを明示的に設定されていないものすべてに適用するインライン手法を指定します</entry>
    <entry key="inlineMWFunctions">MathWorks 定義の MATLAB 関数に対するインライン手法</entry>
    <entry key="inlineMWFunctions_desc">MathWorks 定義の MATLAB 関数のうち、coder.inline API を使用してインライン化するかインライン化しないかを明示的に設定されていないものすべてに適用するインライン手法を指定します</entry>
    <entry key="inlineMWFunctionsInUserFunctions">MathWorks 関数とユーザー関数の間の呼び出しに対するインライン手法</entry>
    <entry key="inlineMWFunctionsInUserFunctions_desc">MathWorks MATLAB 関数とユーザー MATLAB 関数の間ですべての呼び出し側に適用するインライン手法を指定します</entry>
    <entry key="generateMakefile">makefile の生成</entry>
    <entry key="generateMakefile_desc">makefile の生成を有効にして生成コードをコンパイルします</entry>
    <entry key="buildToolEnable">ビルド ツール統合が有効</entry>
    <entry key="buildToolEnable_desc">ビルド ツール統合が有効かどうかを判定します</entry>
    <entry key="buildToolConfiguration">ビルド ツールを設定</entry>
    <entry key="buildToolConfiguration_desc">生成コードのビルドに使用する設定を選択します</entry>
    <entry key="echoExpressions">終端のセミコロンなしの式をエコー</entry>
    <entry key="echoExpressions_desc">実行時出力を、デバッグでの MEX 関数の実行時に MATLAB コマンド ウィンドウで表示できるようにします。このオプションを無効にすると、MEX 関数の実行が速くなります。</entry>
    <entry key="enableAutoExtrinsicCalls">外部呼び出しを自動的に導入</entry>
    <entry key="enableAutoExtrinsicCalls_desc">可能な場合は、サポートされていない関数による自動的なコード生成を回避します。coder.extrinsic も参照してください。</entry>
    <entry key="inlineThreshold">インラインしきい値</entry>
    <entry key="inlineThreshold_desc">インラインする関数の最大サイズを指定してください</entry>
    <entry key="inlineThresholdMax">最大インラインしきい値</entry>
    <entry key="inlineThresholdMax_desc">インライン後の関数の最大サイズを指定してください</entry>
    <entry key="inlineStackLimit">インライン スタック制限</entry>
    <entry key="inlineStackLimit_desc">インラインされた関数のスタック サイズ制限を指定してください</entry>
    <entry key="enableStrengthReduction">配列のインデックスを簡略化する</entry>
    <entry key="enableStrengthReduction_desc">生成コードでループ内の配列のインデックスを簡略化するために強度低減の最適化を使用するかどうかを指定します</entry>
    <entry key="enableMemcpy">ベクトルの代入に対する memcpy の使用</entry>
    <entry key="enableMemcpy_desc">ベクトルの割り当てに対する for ループを memcpy に置き換えることでコードを最適化します</entry>
    <entry key="memcpyThreshold">memcpy しきい値 (バイト)</entry>
    <entry key="memcpyThreshold_desc">(要素数) * (要素当たりのバイト数) がこのしきい値以上の場合に memcpy を使用します。1 バイトはこのコンテキスト内の文字幅です。</entry>
    <entry key="enableOpenMP">可能な場合は OpenMP ライブラリを有効にする</entry>
    <entry key="enableOpenMP_desc">可能な場合は、OpenMP (Portable Shared Memory Parallel Programming) ライブラリを有効にすると、MEX 関数の実行を高速化できます</entry>
    <entry key="initFltsAndDblsToZero">float と double を 0.0 に初期化するために memset を使用</entry>
    <entry key="initFltsAndDblsToZero_desc">float と double に対するストレージの初期化を最適化します。コンパイラとターゲット CPU で使われる浮動小数点 0 の表現が整数ビット パターン 0 と同一の場合、このオプションを選択してください。</entry>
    <entry key="defaultVariableInitialization">変数の初期化</entry>
    <entry key="defaultVariableInitialization_desc">ローカル変数の宣言時に、既定値の代入も必要とします</entry>
    <entry key="generateNonFiniteFilesIfUsed">非有限サポート ファイルを生成 (使用されている場合)</entry>
    <entry key="generateNonFiniteFilesIfUsed_desc">非有限サポート ファイルを生成します (使用されている場合のみ)</entry>
    <entry key="passStructByReference">エントリポイント関数に構造体を参照で渡す</entry>
    <entry key="passStructByReference_desc">エントリポイント関数に構造体を参照で渡します</entry>
    <entry key="constantInputs">定数入力</entry>
    <entry key="constantInputs_desc">定数関数パラメーターの取り扱い方法です</entry>
    <entry key="customLAPACKCallback">カスタム LAPACK ライブラリのコールバック</entry>
    <entry key="customLAPACKCallback_desc">MATLAB コード内の特定の線形代数関数に対して生成されたコード内の LAPACK ライブラリの呼び出し用コールバック クラス</entry>
    <entry key="customFFTCallback">カスタム FFT ライブラリのコールバック</entry>
    <entry key="customFFTCallback_desc">FFT 関数に対して生成されたコード内の FFT ライブラリの呼び出し用コールバック クラス</entry>
    <entry key="useBuiltinFFTWLibrary">組み込み FFTW ライブラリの使用</entry>
    <entry key="useBuiltinFFTWLibrary_desc">FFT 関数に対して生成されたコード内で組み込み FFTW ライブラリを使用します</entry>
    <entry key="customBLASCallback">カスタム BLAS ライブラリのコールバック</entry>
    <entry key="customBLASCallback_desc">MATLAB コード内の特定の行列演算に対して生成されたコード内の BLAS ライブラリの呼び出し用コールバック クラス</entry>
    <entry key="usePrecompiledLibraries">プリコンパイルされたライブラリの使用</entry>
    <entry key="usePrecompiledLibraries_desc">プリコンパイルされたライブラリの使用または代替の実装の使用のいずれかを優先するように、コード ジェネレーターに指示します。</entry>
    <entry key="enableCRICodeCoverage">コード カバレッジの収集</entry>
    <entry key="enableCRICodeCoverage_desc">コード カバレッジの収集</entry>
    <entry key="enableJIT">MEX のビルド タイプに JIT コンパイルを使用</entry>
    <entry key="enableJIT_desc">MEX 関数の生成に just-in-time (JIT) コンパイル テクノロジーを使用するかどうかを指定します</entry>
    <entry key="enableJITSilentBailOut">サイレント JIT ベイルアウトの原因</entry>
    <entry key="generateDefaultInSwitch">switch の default ケースを常に生成する</entry>
    <entry key="generateDefaultInSwitch_desc">生成コードですべての switch ステートメントに対し default ケースを生成するかどうかを指定します</entry>
    <entry key="enableTraceability">コードのトレーサビリティを有効にする</entry>
    <entry key="enableTraceability_desc">コード生成レポートにコードのトレーサビリティを含める必要があるかどうかを指定します</entry>
    <entry key="featureFlags">追加フラグ</entry>
    <entry key="featureFlags_desc">これは、MathWorks の担当者からリクエストされた場合にのみ使用します</entry>
    <entry key="category_inlining">関数のインライン化</entry>
    <entry key="enableGitSupport">Git 統合のサポートを有効にする</entry>
    <entry key="enableAutoCommit">codegen の終了後に変更の自動コミットを許可する</entry>
    <entry key="repositoryStyle">Git リポジトリの作成スタイル</entry>
    <entry key="enableImplicitExpansion">暗黙的な拡張を有効にする</entry>
    <entry key="enableImplicitExpansion_desc">暗黙的な拡張を行うと、サイズの異なる特定の配列の二項演算が可能になります。この機能を無効にすると、そうした演算は代わりにエラーを出力するようになります。</entry>
    <entry key="configName">構成オブジェクト名</entry>
    <entry key="configDescription">構成オブジェクトの説明</entry>
    <entry key="cacheDynamicArrayDataPointer">動的な配列データをキャッシュ</entry>
    <entry key="cacheDynamicArrayDataPointer_desc">生成コードのベクトル化を増やすことによりパフォーマンスを向上します</entry>
    <entry key="silPilVerbosity">SIL/PIL の詳細</entry>
    <entry key="silPilVerbosity_desc">ソフトウェアインザループ (SIL) またはプロセッサインザループ (PIL) の実行中に、通信の I/O 情報を表示します。</entry>
    <entry key="codeProfilingCodeMetrics">SIL/PIL プロファイリング メトリクス</entry>
    <entry key="codeProfilingCodeMetrics_desc">SIL/PIL の実行により生成されるプロファイリング メトリクスのタイプを指定します。</entry>
    <entry key="category_misra">MISRA 準拠</entry>
    <entry key="justifyMISRAViolations">既知の MISRA 違反について正当化のコメントを生成</entry>
    <entry key="justifyMISRAViolations_desc">既知の MISRA 違反について正当化のコメントを生成</entry>
    <entry key="category_paths">パス</entry>
    <entry key="outputFile">カスタム出力ファイル</entry>
    <entry key="outputFile_desc">主要な出力ファイルの基準ファイル名</entry>
    <entry key="useEmbeddedCoderFeatures">Embedded Coder 機能の使用</entry>
    <entry key="useEmbeddedCoderFeatures_desc">Embedded Coder 機能を使用するかどうか</entry>
    <entry key="buildFolderType">ビルド フォルダー</entry>
    <entry key="buildFolderType_desc">プロセス中に生成されたすべてのファイルを配置するフォルダーです</entry>
    <entry key="buildFolderPath">ビルド フォルダーのパス</entry>
    <entry key="buildFolderPath_desc">ビルド プロセス中に生成されたすべてのファイルを配置するフォルダーを指定します</entry>
    <entry key="workingFolderType">作業フォルダー</entry>
    <entry key="workingFolderType_desc">ビルド プロセス中に "現在の作業フォルダー" として使用するフォルダーです</entry>
    <entry key="workingFolderPath">作業フォルダーのパス</entry>
    <entry key="workingFolderPath_desc">ビルド プロセス中に "現在の作業フォルダー" として使用するフォルダーを指定します</entry>
    <entry key="enableJITSilentBailOut_desc"/>
  </message>
</rsccat>
