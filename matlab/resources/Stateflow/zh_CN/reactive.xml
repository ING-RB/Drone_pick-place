<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright 2024 The MathWorks, Inc.-->

<rsccat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" locale="zh_CN" product="Stateflow" xsi:noNamespaceSchemaLocation="../../resources/schema/msgcat.xsd">
  <message>
    <entry key="Editor">测试序列编辑器</entry>
    <entry key="Step">步骤</entry>
    <entry key="Block">模块</entry>
    <entry key="malOutputNotDefinedinRTT"> 输出 {0} {1} 尚未写入模块 {2} 中。 </entry>
    <entry key="ReactiveTestingBlockInvalidSymbol">符号 {0} 是测试序列中的保留字。请重命名 {2} 中所有出现的 {1}。</entry>
    <entry key="UnconditionalTransShadowInRTTBlock">{0} {1} 有一个无条件 {2} 转移 {3}，它遮蔽了以下转移:\n{4}。</entry>
    <entry key="UnusedDataInReactiveTestingTableChart">{0} is defined, but is never used in the Test Sequence block. &lt;a href= "matlab: internal.stateflow.dialogs.UnusedObjectDeleter.createDeleter(''{1}'')"&gt; Delete this object.&lt;/a&gt;</entry>
    <entry key="HdlCodegenNotSupportedForRTT">Test Sequence 模块 {0} 不支持 HDL 代码生成。</entry>
    <entry key="WhenStateNoChildrenRTT"> 在步骤 {0} 下需要两个或更多子步骤，因为在该步骤上启用了 when 分解。 </entry>
    <entry key="WhenChildMissingWhenConditionRTT"> 步骤 {0} 中需要 when 条件，因为它不是 when 分解步骤 {1} 的最后一个子级。 </entry>
    <entry key="WhenChildInvalidWhenConditionRTT"> A when condition is not allowed in step {0}, since it is the last child of when-decomposition step {1}. </entry>
    <entry key="NonWhenChildInvalidWhenConditionRTT"> A when condition is not allowed in step {0}, since its parent {1} is not a when-decomposition step. </entry>
    <entry key="UnreachableTestStep">步骤 {0} 不可达。</entry>
    <entry key="InvalidTransitionDestination">转移 {0} 指向无效的下一个步骤 ''{1}''。</entry>
    <entry key="UndefinedStep">Test Sequence 模块中未定义步骤 {0}。</entry>
    <entry key="ImportTestSequenceCloseUI">请关闭 Test Sequence 模块 {0} UI 以使用 sltest.testsequence API。</entry>
    <entry key="InvalidTestSequence"> {0} 不是有效的 Test Sequence 模块。</entry>
    <entry key="SymbolRedefinition">Test Sequence 模块中已定义符号 {0}。</entry>
    <entry key="StepRedefinition">Test Sequence 模块中已定义步骤 {0}。</entry>
    <entry key="StepDepthDiffer">Step {0} and {1} are not at the same depth.</entry>
    <entry key="InvalidStepName">Invalid step name: ''{0}''.</entry>
    <entry key="InvalidSymbolName">Invalid symbol name: ''{0}''.</entry>
    <entry key="InvalidActiveStepDataScope">激活步骤数据的作用域无效: ''{0}''。仅允许 ''局部'' 和 ''输出''。</entry>
    <entry key="InvalidMessageScope">Invalid scope for message: ''{0}''. Only ''Input'' and ''Output'' are allowed.</entry>
    <entry key="InvalidFunctionCallScope">Invalid scope for function call: ''{0}''. Only ''Output'' is allowed.</entry>
    <entry key="InvalidTriggerScope">Invalid scope for trigger: ''{0}''. Only ''Output'' is allowed.</entry>
    <entry key="TestSequenceLocked">Test Sequence block {0} is locked.</entry>
    <entry key="ModelIsBusy">Cannot use sltest.testsequence API while model is busy.</entry>
    <entry key="TransitionNotAllowOnWhenStepChild">Transitions are not allowed in When Step children.</entry>
    <entry key="DeleteUniqueStep">Step {0} is the unique step in Test Sequence block and cannot be deleted.</entry>
    <entry key="InvalidStepIndex">Index {0} is not a valid index for Step {1}.</entry>
    <entry key="InvalidTransitionIndex">Transition {0} is not a valid transition for Step {1}.</entry>
    <entry key="InvalidTransitionProperty">Transition has no property named {0}.</entry>
    <entry key="InvalidStepProperty">Step {0} has no property named {1}.</entry>
    <entry key="NonWhenChildInvalidRead">Step {0} has no WhenCondition property since its parent is not a when-decomposition step.</entry>
    <entry key="UndefinedSymbolName">No symbol named ''{0}'' is defined in Test Sequence block.</entry>
    <entry key="InvalidSymbolProperty">Symbol ''{0}'' has no property ''{1}''.</entry>
    <entry key="InvalidTSBProperty">Test Sequence block has no property ''{0}''.</entry>
    <entry key="ReadOnlySymbolProperty">Cannot set read-only property ''{0}'' in ''{1}''.</entry>
    <entry key="PropertyError">Cannot set value ''{0}'' to property ''{1}'' in ''{2}''.</entry>
    <entry key="MissingRegExpName">RegExp requires Name parameter.</entry>
    <entry key="MissingStepName">Step ''Name'' is required.</entry>
    <entry key="NonUniqueStructParameter">Too many arguments when {0} is given as a struct object.</entry>
    <entry key="TSBNameConflict">A Test Sequence block named ''{0}'' cannot be added because a block of the same name already exists.</entry>
    <entry key="DeprecatedParameter"> 参数 ''{0}'' 已弃用，请改用 ''{1}''。</entry>
    <entry key="DeprecatedParameterIsIgnored"> 参数 ''{0}'' 被忽略，将改用 ''{1}''。</entry>
    <entry key="ActiveStepOutputNameShadowing">无法创建名为 ''{0}'' 的激活步骤输出数据，因为同名输出已存在。正在创建名为 ''{1}'' 的输出数据。</entry>
    <entry key="InvalidIndentStepFirstChild">Step {0} cannot be indented because it is the first child of step {1}.</entry>
    <entry key="InvalidOutdentStepNoParent">Step {0} cannot be outdented because it has no parent.</entry>
    <entry key="InvalidOutdentStepNotLastChild">Step {0} cannot be outdented because it is not the last child of step {1}.</entry>
    <entry key="TestSequenceScenarioInPrevVersion">测试序列 ''{0}'' 使用的是在 R2020b 中引入的场景。如果导出为更早的版本，此图将失去功能。</entry>
    <entry key="InvalidScenarioName">场景名称 ''{0}'' 无效。</entry>
    <entry key="RepeatedCreateScenario">Scenarios can only be enabled once in Test Sequence ''{0}''.</entry>
    <entry key="AddScenarioBeforeEnable">Cannot add scenarios before enabling scenarios for Test Sequence ''{0}''. Use ''sltest.testsequence.useScenario'' to enable scenarios.</entry>
    <entry key="DeleteScenarioBeforeEnable">Cannot delete scenarios before enabling scenarios for Test Sequence ''{0}''. Use ''sltest.testsequence.useScenario'' to enable scenarios.</entry>
    <entry key="RetrieveScenarioBeforeEnable">Cannot get scenario names before enabling scenarios for Test Sequence ''{0}''. Use ''sltest.testsequence.useScenario'' to enable scenarios.</entry>
    <entry key="EditScenarioBeforeEnable">在为测试序列 ''{0}'' 启用场景之前，无法编辑场景。请使用 ''sltest.testsequence.useScenario'' 来启用场景。</entry>
    <entry key="ControlScenarioBeforeEnable">Cannot set scenario control source before enabling scenarios for Test Sequence ''{0}''. Use ''sltest.testsequence.useScenario'' to enable scenarios.</entry>
    <entry key="GetScenarioControlBeforeEnable">Cannot get scenario control source before enabling scenarios for Test Sequence ''{0}''. Use ''sltest.testsequence.useScenario'' to enable scenarios.</entry>
    <entry key="ActivateScenarioBeforeEnable">Cannot activate scenario before enabling scenarios for Test Sequence ''{0}''. Use ''sltest.testsequence.useScenario'' to enable scenarios.</entry>
    <entry key="ActivateScenarioForWorkspaceControl">Cannot activate scenario when controlling scenario from workspace for Test Sequence ''{0}''. Use ''sltest.testsequence.setScenarioControlSource'' to change the scenario control source for the Test Sequence to Block.</entry>
    <entry key="GetActiveScenarioBeforeEnable">Cannot get active scenario before enabling scenarios for Test Sequence ''{0}''. Use ''sltest.testsequence.useScenario'' to enable scenarios.</entry>
    <entry key="GetActiveScenarioForWorkspaceControl">Cannot get active scenario when controlling scenario from workspace for Test Sequence ''{0}''. Use ''sltest.testsequence.setScenarioControlSource'' to change the scenario control source for the Test Sequence to Block.</entry>
    <entry key="ScenarioRedefinition">Scenario {0} is already defined in Test Sequence block.</entry>
    <entry key="InvalidStepPathWithScenarioEnabled">Invalid step path ''{0}'' with scenarios enabled.</entry>
    <entry key="DeleteScenarioParameter">无法删除场景参数 ''{0}''，因为 Test Sequence 模块正在使用该参数。</entry>
    <entry key="DeleteUniqueScenario">Scenario {0} is the only scenario in Test Sequence block and cannot be deleted.</entry>
    <entry key="MultipleTSPathAPI">Only one test sequence path is allowed when using sltest.testsequence API</entry>
    <entry key="CreateOutportForStepActivity">创建数据以监控激活步骤</entry>
    <entry key="StepActivityOutputLink">正在输出测试序列的激活步骤</entry>
    <entry key="StepActivityLocalLink">跟踪测试序列的激活步骤</entry>
    <entry key="StepActivityDataTypeLabel">数据类型</entry>
    <entry key="LicenseNotAvailable">Unable to check out a Simulink Test license.</entry>
    <entry key="GetAssessmentInvalidArgument">Argument to ''sltest.getAssessment'' must be a model name.</entry>
    <entry key="GetAssessmentNoAssessments">没有可用于模型 ''{0}'' 的评估。</entry>
    <entry key="AssessmentSetSummaryTitle">摘要</entry>
    <entry key="AssessmentSetUntestedAsmtTitle">未经测试的评估(前 10 个)</entry>
    <entry key="AssessmentSetPassedAsmtTitle">已通过的评估(前 10 个)</entry>
    <entry key="AssessmentSetFailedAsmtTitle">失败的评估(前 10 个)</entry>
    <entry key="BadUsageInSimplified">Test Sequence 模块使用的旧语义将在以后的版本中删除。在模块 {0} 中检测到可能导致在新语义中出现不同行为的代码模式。请参阅 &lt;a href="matlab:helpview(fullfile(docroot, 'sltest', 'helptargets.map'), 'semantics_change_rn')"&gt;R2021a Simulink Test 发行说明&lt;/a&gt;，了解关于如何更新该模块、删除警告和更改 Test Sequence 模块以使用新语义的信息。</entry>
    <entry key="InvalidScenarioParameterValue">The value of Scenario Parameter ''{0}'' is not valid. Use the index of the scenario to specify it.</entry>
  </message>
</rsccat>
