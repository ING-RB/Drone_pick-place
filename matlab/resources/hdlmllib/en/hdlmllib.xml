<?xml version="1.0" encoding="UTF-8" ?>
<!-- Copyright 2014-2024 The MathWorks, Inc. -->
<rsccat version="1.0" locale="en_US" product="hdlmllib" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../schema/msgcat.xsd">
    <message>
        <entry key="ArgumentMustBeConstant">The ''{0}'' input argument to ''{1}'' must be constant.</entry>
        <entry key="ArgumentPassedToFillHasNoEffect">'FillValue' argument passed to boundary fill method has no effect.</entry>
        <entry key="Bits2WordInvalidLikeArg">If 3 or 4 arguments are used with hdl.bits2word, the final 2 arguments must be ''like'' followed by a prototype (p).</entry>
        <entry key="Bits2WordInvalidLikeType">The prototype (p) cannot be of type ''{0}''. It must be a valid integer, floating-point, or fixed-point type.</entry>
        <entry key="Bits2WordInvalidNumBitsForType">The number of bits specified ({0}) does not match the number of bits expected for a value of type ''{1}'' ({2}).</entry>
        <entry key="Bits2WordInvalidNumRows">The number of rows in the binary input (b) must be equal to the number of bits in the specified type ({0}), or an integer multiple if n or typename is provided.</entry>
        <entry key="Bits2WordInvalidTypeName">Specified type must be a valid integer, floating-point, or fixed-point type.</entry>
        <entry key="EdgeUnsupportedMethod">The ''{0}'' edge method is unsupported for HDL code generation.</entry>
        <entry key="ImageMustBe2D">Image inputs must have no more than 2 dimensions.</entry>
        <entry key="IncompleteNameValuePair">Incorrect number of input arguments. Each parameter must be followed by a corresponding value.</entry>
        <entry key="InvalidBoundaryConstant">''BoundaryConstant'' of ''hdl.WorkingSet'' must be an integer scalar value.</entry>
        <entry key="InvalidOrigin">Origin defined is invalid. Origin Should fit inside the kernel window.</entry>
        <entry key="InvalidParameter">Parameter ''{0}'' is undefined.</entry>
        <entry key="InvalidPixel">Invalid pixel position.</entry> 
        <entry key="IteratorfunOutputSizeIncorrect">Output size of hdl.iteratorfun must have same size as third input.</entry>
        <entry key="KernelMustBeFcnHandle">The first input argument to ''{0}'' must be a function handle.</entry>
        <entry key="KernelMustHaveAnOutput">The function handle passed to ''{0}'' must have at least one output argument.</entry>
        <entry key="KernelMustNotBeAnonymous">The function handle passed to ''{0}'' must not be an anonymous function.</entry>
        <entry key="KernelMustNotUseVarargin">The function handle passed to ''{0}'' must not use ''varargin''.</entry>
        <entry key="KernelMustNotUseVarargout">The function handle passed to ''{0}'' must not use ''varargout''.</entry>
        <entry key="KernelShouldFitInsideImage">Kernel window should fit inside the input image.</entry>
        <entry key="KernelSizeIncorrect">The kernelSize input argument to ''hdl.WorkingSet'' must be a 2-element vector of positive integers.</entry>
        <entry key="MoreThanOneParameter">More than one ''{0}'' found.</entry>
        <entry key="NoMoreWorkingSets">No more working sets.</entry>
        <entry key="NpufunArgumentMustBeConstant">The ''{0}'' input argument to ''hdl.npufun'' must be constant.</entry>
        <entry key="NpufunImageMustBeLtEqTo3D">Image inputs for the ''hdl.npufun'' function must have no more than 3 dimensions.</entry>
        <entry key="NpufunImageMustNotBeEmpty">Image inputs for the ''hdl.npufun'' function must not be empty.</entry>
        <entry key="NpufunImagesMustBeSameSize">Image inputs for the ''hdl.npufun'' function must all be the same size.</entry>
        <entry key="NpufunInvalidArgument">Invalid argument ''{0}'' provided to ''hdl.npufun'' function. Input data arguments must be matrices of the same size or the character array ''KernelArg'' followed by the kernel argument.</entry>
        <entry key="NpufunInvalidBoundaryMethod">''BoundaryMethod'' of ''hdl.npufun'' must be one of the character arrays ''constant'' or ''replicate''.</entry>
        <entry key="NpufunKernelMustHaveScalarOutputs">The kernelFun function for ''hdl.npufun'' must have scalar outputs.</entry>
        <entry key="NpufunKernelMustHaveScalarOutputsPerDepth">The kernelFun function for ''hdl.npufun'' must output a vector with same number of elements as the depth of the input matrix.</entry>
        <entry key="NpufunKernelSizeIncorrect">The kernelSize input argument to ''hdl.npufun'' must be a 2-element vector of positive integers.</entry>
        <entry key="NpufunNeedsInputImage">The ''hdl.npufun'' function requires at least 1 image input.</entry>
        <entry key="NpufunStreamedInputsMustComeFirst">All streamed inputs to ''hdl.npufun'' must come before any non-streamed ''KernelArg'' arguments.</entry>
        <entry key="OriginProvidedInWrapMethod">Incorrect origin provided in the 'Wrap' Method.</entry>
        <entry key="PipePragmaBadNumOut">The coder.hdl.pipeline pragma may only be applied to function calls that return a single value, but the current context expects {0} outputs.</entry>
        <entry key="PragmaBadNumArgs">Invalid number of arguments to {0} pragma.  Expected 1 or 2 arguments, but received {1}.</entry>
        <entry key="PragmaInvalidArg">The {0} argument to the {1} must be a compile-time integer constant.</entry>
        <entry key="RAMAddress">Input number {0, number, integer}, {1}, must be unsigned and between 2 and 31 bits long, with no fractional bits.</entry>
        <entry key="RAMIVDataComplexMismatch">The complexity of the RAM initial value must match the complexity of the RAM data input.</entry>
        <entry key="RAMIVMatrixUnsupported">RAM initial values must either be scalar or vector. Matrices are not supported.</entry>
        <entry key="RAMIVMustBeNumeric">RAM initial values must be specified with numeric arrays. Cell arrays, structs, and other non-numeric data are not supported.</entry>
        <entry key="RAMIVMustBeZeroForBusInput">RAM initial values must be zero when data input is of type {0}.</entry>
        <entry key="RAMNonScalarVector">Only scalar and vector inputs are supported.</entry>
        <entry key="RAMNumAccessesNotSame">Every input must either be scalar or have the same number of elements as other non-scalar inputs when ''VectorAccess'' is set to ''Serial''.</entry>
        <entry key="RAMNumBanksNotSame">Either all inputs must have the same number of elements, or all inputs except the data input must be scalar to correctly infer banks of RAM when ''VectorAccess'' is set to ''Parallel''.</entry>
        <entry key="RAMTooLarge">The RAM is configured too large to be simulated in Simulink. Please reduce the number of RAM banks, the RAM address width, and/or the RAM word size.</entry>
        <entry key="RAMTDPSameAddress">True Dual Port RAM does not support multiple accesses to the same address when one access is a write.</entry>
        <entry key="RAMWeFraction">Fractional length of fixed-point 'Write Enable' input must be 0.</entry>
        <entry key="RAMWeSigned">'Write Enable' fixed-point input must be unsigned.</entry>
        <entry key="RAMWordLengthMismatch">Word length of 'Write Data' must be integer multiple of word length of 'Write Enable'.</entry>
        <entry key="ReadWriteAddressNotSame">RAM read and write addresses should be the same size.</entry>
        <entry key="RAMWriteDataSameType">True Dual Port RAM's write data ports must have the same type and complexity.</entry>
        <entry key="RAMWriteEnableSameType">True Dual Port RAM's write enable ports must have the same type.</entry>
        <entry key="StablePragmaBadArg">The first argument to coder.hdl.stable pragma must be a char array specifying the input port name.</entry>
        <entry key="StreamMatInvCholeskySingleOnly">Streaming matrix inverse using cholesky decomposition supports only single data types.</entry>
        <entry key="StreamMatInvGJordanSingleAndDoubleOnly">Streaming matrix inverse using Gauss-Jordan elimination supports only single and double data types.</entry>
        <entry key="StreamMatMultSingleOnly">Streaming matrix multiply supports only single data types.</entry>
        <entry key="TreeSumProdDimArgMustBeConst">Optional dimension argument to hdl.treesum/hdl.treeprod must be constant.</entry>
        <entry key="TreeSumProdInvalidDimArg">Dimension argument to hdl.treesum/hdl.treeprod must be a positive integer scalar or ''all''.</entry>
        <entry key="TreeSumProdInvalidInputArray">The input array to hdl.treesum/hdl.treeprod cannot have more than 2 dimensions.</entry>
        <entry key="TreeSumProdNotEnoughInputArgs">Not enough input arguments to hdl.treesum/hdl.treeprod. Expected at least 1 argument.</entry>
        <entry key="InvalidTapLengthValue">For hdl.TappedDelay, the TapLength property must be set to a factor of the NumDelays properties, less than or equal to the NumDelays properties, and greater than zero.</entry>
        <entry key="TapDelayICMismatch">The number of initial conditions does not match the number of delays.</entry>
        <entry key="UnsupportedIVSize">The RAM is organized as {0, number, integer} banks of {1, number, integer} entries, but the initial value specified has {2, number, integer} entries. The RAM initial value must be either a scalar, or a vector that has {1, number, integer} or {3, number, integer} entries. It could also be a matrix that has {3, number, integer} entries in which the dimensions of the matrix can be either mxn or nxm, where m is {0, number, integer} and n is {1, number, integer}. </entry>
        <entry key="UnsupportedMatrixIVSize">Invalid matrix dimensions for RAM initial value. The RAM is configured with {0, number, integer} banks, each having {1, number, integer} entries. However, the specified matrix initial value has dimensions [{2, number, integer}, {3, number, integer}]. The matrix dimensions must either be [{1, number, integer}, {0, number, integer}] or [{0, number, integer}, {1, number, integer}].</entry>
        <entry key="UnsupportedNonSymmPositiveDefinite">Streaming matrix inverse using cholesky decomposition supports only symmetric positive definite matrices, consider selecting Gauss-Jordan algorithm to support all square matrices.</entry>
        <entry key="UnsupportedDataTypeForHDLRam">The RAM block is not supported for ''{0}'' data type.</entry>
        <entry key="UnsupportedNestedBusTypeForHDLRam">RAM block does not support nested bus inputs.</entry>
        <entry key="UnsupportedArrayOfBusesRAMSerial">The RAM Block does not support array of bus at the data input port when ''VectorAccess'' is set to ''Serial''.</entry>
        <entry key="UnsupportedBusUfix1TypeForHDLRam">The RAM block does not support bus inputs that use ufix1 or boolean data types.</entry>
        <entry key="Word2BitsNotEnoughOutputBits">Not enough output bits (n) specified for input data type. Expected at least {0}.</entry>
        <entry key="Word2BitsNumBitsMustBeConst">Number of bits argument (n) must be constant.</entry>
        <entry key="Word2BitsInvalidBitsArg">Number of bits argument (n) must be a positive integer scalar.</entry>
        <entry key="Word2BitsInvalidInputArg">Input argument (d) must be a valid non-complex type.</entry>
        <entry key="Word2BitsInvalidNumFloatBits">Expected exactly {0} bits for input of type ''{1}'' but received {2}.</entry>
        <entry key="interpnGridPointArgMustBeConst">Invalid value for sample grid points argument to hdl.interpn function. Value must be a compile-time constant.</entry>
        <entry key="interpnSampleValueArgMustBeConst">Invalid value for sample values argument to hdl.interpn function. Value must be a compile-time constant.</entry>
        <entry key="interpnMethodArgMustBeConst">Interpolation and extrapolation method arguments to hdl.interpn function must be compile-time constants.</entry>
    </message>
</rsccat>

<!-- LocalWords:  npufun treesum treeprod a iteratorfun mxn nxm
-->
