<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright 2025 The MathWorks, Inc.-->

<rsccat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" locale="ja_JP" product="hdlmllib" xsi:noNamespaceSchemaLocation="../../resources/schema/msgcat.xsd">
  <message>
    <entry key="ArgumentMustBeConstant">''{1}'' の入力引数 ''{0}'' は定数でなければなりません。</entry>
    <entry key="ArgumentPassedToFillHasNoEffect">境界塗りつぶしメソッドに引数 'FillValue' を渡しても効果はありません。</entry>
    <entry key="Bits2WordInvalidLikeArg">hdl.bits2word で 3 個または 4 個の引数が使用される場合、最後の 2 個の引数は、''like'' と、その後に続くプロトタイプ (p) でなければなりません。</entry>
    <entry key="Bits2WordInvalidLikeType">プロトタイプ (p) を ''{0}'' 型にすることはできません。有効な整数、浮動小数点、固定小数点のいずれかの型とする必要があります。</entry>
    <entry key="Bits2WordInvalidNumBitsForType">指定されているビット数 ({0}) が、''{1}'' 型の値に必要なビット数 ({2}) と一致しません。</entry>
    <entry key="Bits2WordInvalidNumRows">バイナリ入力の行数 (b) は、指定された型のビット数 ({0}) と等しくなければなりません。あるいは、n または typename が指定されている場合は整数倍でなければなりません。</entry>
    <entry key="Bits2WordInvalidTypeName">指定する型は、有効な整数、浮動小数点、固定小数点のいずれかの型でなければなりません。</entry>
    <entry key="EdgeUnsupportedMethod">エッジ メソッド ''{0}'' は HDL コード生成でサポートされていません。</entry>
    <entry key="ImageMustBe2D">Image inputs must have no more than 2 dimensions.</entry>
    <entry key="IncompleteNameValuePair">入力引数の数が正しくありません。各パラメーターの後には対応する値が必要です。</entry>
    <entry key="InvalidBoundaryConstant">''BoundaryConstant'' of ''hdl.WorkingSet'' must be an integer scalar value.</entry>
    <entry key="InvalidOrigin">Origin defined is invalid. Origin Should fit inside the kernel window.</entry>
    <entry key="InvalidParameter">Parameter ''{0}'' is undefined.</entry>
    <entry key="InvalidPixel">Invalid pixel position.</entry>
    <entry key="IteratorfunOutputSizeIncorrect">Output size of hdl.iteratorfun must have same size as third input.</entry>
    <entry key="KernelMustBeFcnHandle">The first input argument to ''{0}'' must be a function handle.</entry>
    <entry key="KernelMustHaveAnOutput">The function handle passed to ''{0}'' must have at least one output argument.</entry>
    <entry key="KernelMustNotBeAnonymous">The function handle passed to ''{0}'' must not be an anonymous function.</entry>
    <entry key="KernelMustNotUseVarargin">''{0}'' に渡す関数ハンドルで ''varargin'' を使用してはなりません。</entry>
    <entry key="KernelMustNotUseVarargout">''{0}'' に渡す関数ハンドルで ''varargout'' を使用してはなりません。</entry>
    <entry key="KernelShouldFitInsideImage">Kernel window should fit inside the input image.</entry>
    <entry key="KernelSizeIncorrect">The kernelSize input argument to ''hdl.WorkingSet'' must be a 2-element vector of positive integers.</entry>
    <entry key="MoreThanOneParameter">More than one ''{0}'' found.</entry>
    <entry key="NoMoreWorkingSets">No more working sets.</entry>
    <entry key="NpufunArgumentMustBeConstant">''hdl.npufun'' の入力引数 ''{0}'' は定数でなければなりません。</entry>
    <entry key="NpufunImageMustBeLtEqTo3D">関数 ''hdl.npufun'' のイメージ入力の次元は 3 以下である必要があります。</entry>
    <entry key="NpufunImageMustNotBeEmpty">関数 ''hdl.npufun'' のイメージ入力を空にすることはできません。</entry>
    <entry key="NpufunImagesMustBeSameSize">関数 ''hdl.npufun'' のイメージ入力はすべて同じサイズである必要があります。</entry>
    <entry key="NpufunInvalidArgument">Invalid argument ''{0}'' provided to ''hdl.npufun'' function. Input data arguments must be matrices of the same size or the character array ''KernelArg'' followed by the kernel argument.</entry>
    <entry key="NpufunInvalidBoundaryMethod">''hdl.npufun'' の ''BoundaryMethod'' は、文字配列 ''constant'' または ''replicate'' のいずれかでなければなりません。</entry>
    <entry key="NpufunKernelMustHaveScalarOutputs">''hdl.npufun'' に対する関数 kernelFun にはスカラー出力が必要です。</entry>
    <entry key="NpufunKernelMustHaveScalarOutputsPerDepth">''hdl.npufun'' に対する関数 kernelFun は、入力行列の深さと同じ要素数をもつベクトルを出力する必要があります。</entry>
    <entry key="NpufunKernelSizeIncorrect">''hdl.npufun'' に対する入力引数 kernelSize は正の整数の 2 要素ベクトルである必要があります。</entry>
    <entry key="NpufunNeedsInputImage">関数 ''hdl.npufun'' には少なくとも 1 つのイメージ入力が必要です。</entry>
    <entry key="NpufunStreamedInputsMustComeFirst">All streamed inputs to ''hdl.npufun'' must come before any non-streamed ''KernelArg'' arguments.</entry>
    <entry key="OriginProvidedInWrapMethod">Incorrect origin provided in the 'Wrap' Method.</entry>
    <entry key="PipePragmaBadNumOut">coder.hdl.pipeline プラグマは単一値を返す関数呼び出しのみに適用できますが、現在のコンテキストは {0} 個の出力が予想されます。</entry>
    <entry key="PragmaBadNumArgs">{0} プラグマの引数の数が無効です。1 個または 2 個の引数が必要ですが、受け取った数は {1} 個です。</entry>
    <entry key="PragmaInvalidArg">{1} の引数 {0} はコンパイル時の整数定数でなければなりません。</entry>
    <entry key="RAMAddress">入力番号 {0, number, integer}、{1} は、符号なしで長さが 2 ～ 31 ビット (小数ビットなし) でなければなりません。</entry>
    <entry key="RAMIVDataComplexMismatch">RAM の初期値の実数/複素数は、RAM のデータ入力の実数/複素数と一致しなければなりません。</entry>
    <entry key="RAMIVMatrixUnsupported">RAM の初期値はスカラーまたはベクトルのいずれかでなければなりません。行列はサポートされていません。</entry>
    <entry key="RAMIVMustBeNumeric">RAM の初期値は数値配列で指定しなければなりません。セル配列、struct、その他の非数値データはサポートされていません。</entry>
    <entry key="RAMIVMustBeZeroForBusInput">RAM initial values must be zero when data input is of type {0}.</entry>
    <entry key="RAMNonScalarVector">スカラー入力とベクトル入力のみがサポートされます。</entry>
    <entry key="RAMNumAccessesNotSame">''VectorAccess'' を ''Serial'' に設定した場合、各入力はスカラーであるか、他の非スカラー入力と同じ要素数をもたなければなりません。</entry>
    <entry key="RAMNumBanksNotSame">''VectorAccess'' を ''Parallel'' に設定した場合、RAM のバンクを正しく推定するには、すべての入力の要素数が同じであるか、データ入力以外のすべての入力がスカラーでなければなりません。</entry>
    <entry key="RAMTooLarge">RAM の構成が大きすぎて Simulink でシミュレーションできません。RAM バンクの数、RAM アドレス幅、RAM ワード サイズを小さくしてください。</entry>
    <entry key="RAMTDPSameAddress">True Dual Port RAM は、1 つのアクセスが書き込みである場合、同一のアドレスへの複数のアクセスをサポートしません。</entry>
    <entry key="RAMWeFraction">'Write Enable' 入力の固定小数点の小数部の長さは 0 でなければなりません。</entry>
    <entry key="RAMWeSigned">'Write Enable' の固定小数点の入力は符号なしでなければなりません。</entry>
    <entry key="RAMWordLengthMismatch">'Write Data' の語長は 'Write Enable' の語長の整数倍でなければなりません。</entry>
    <entry key="ReadWriteAddressNotSame">RAM の読み取りアドレスと書き込みアドレスは同じサイズでなければなりません。</entry>
    <entry key="RAMWriteDataSameType">True Dual Port RAM の書き込みデータ端子は、型と実数/複素数が同じでなければなりません。</entry>
    <entry key="RAMWriteEnableSameType">True Dual Port RAM の書き込みイネーブル端子は同じタイプでなければなりません。</entry>
    <entry key="StablePragmaBadArg">coder.hdl.stable プラグマの最初の引数は、入力端子名を指定する char 配列でなければなりません。</entry>
    <entry key="StreamMatInvCholeskySingleOnly">コレスキー分解を使用するストリーミング逆行列では、single データ型のみがサポートされます。</entry>
    <entry key="StreamMatInvGJordanSingleAndDoubleOnly">ガウス ジョルダン消去法を使用するストリーミング逆行列では、single および double データ型のみがサポートされます。</entry>
    <entry key="StreamMatMultSingleOnly">ストリーミング行列乗算では、single データ型のみがサポートされます。</entry>
    <entry key="TreeSumProdDimArgMustBeConst">hdl.treesum/hdl.treeprod に対するオプションの次元引数は定数である必要があります。</entry>
    <entry key="TreeSumProdInvalidDimArg">hdl.treesum/hdl.treeprod に対する次元引数は正の整数スカラーか ''all'' である必要があります。</entry>
    <entry key="TreeSumProdInvalidInputArray">hdl.treesum/hdl.treeprod への入力配列の次元数を 2 より大きくすることはできません。</entry>
    <entry key="TreeSumProdNotEnoughInputArgs">hdl.treesum/hdl.treeprod の入力引数が不足しています。少なくとも 1 つの引数が必要です。</entry>
    <entry key="InvalidTapLengthValue">For hdl.TappedDelay, the TapLength property must be set to a factor of the NumDelays properties, less than or equal to the NumDelays properties, and greater than zero.</entry>
    <entry key="TapDelayICMismatch">The number of initial conditions does not match the number of delays.</entry>
    <entry key="UnsupportedIVSize">The RAM is organized as {0, number, integer} banks of {1, number, integer} entries, but the initial value specified has {2, number, integer} entries. The RAM initial value must be either a scalar, or a vector that has {1, number, integer} or {3, number, integer} entries. It could also be a matrix that has {3, number, integer} entries in which the dimensions of the matrix can be either mxn or nxm, where m is {0, number, integer} and n is {1, number, integer}. </entry>
    <entry key="UnsupportedMatrixIVSize">Invalid matrix dimensions for RAM initial value. The RAM is configured with {0, number, integer} banks, each having {1, number, integer} entries. However, the specified matrix initial value has dimensions [{2, number, integer}, {3, number, integer}]. The matrix dimensions must either be [{1, number, integer}, {0, number, integer}] or [{0, number, integer}, {1, number, integer}].</entry>
    <entry key="UnsupportedNonSymmPositiveDefinite">コレスキー分解を使用するストリーミング逆行列では、対称正定値行列のみがサポートされます。すべての正方行列をサポートするには、ガウス ジョルダン アルゴリズムの選択を検討してください。</entry>
    <entry key="UnsupportedDataTypeForHDLRam">RAM ブロックは ''{0}'' データ型についてサポートされていません。</entry>
    <entry key="UnsupportedNestedBusTypeForHDLRam">RAM ブロックは入れ子のバス入力をサポートしません。</entry>
    <entry key="UnsupportedArrayOfBusesRAMSerial">''VectorAccess'' を ''Serial'' に設定した場合、RAM ブロックは、データ入力端子でのバス配列をサポートしません。</entry>
    <entry key="UnsupportedBusUfix1TypeForHDLRam">RAM ブロックは、ufix1 データ型または boolean データ型を使用するバス入力をサポートしません。</entry>
    <entry key="Word2BitsNotEnoughOutputBits">入力データ型に十分な出力ビット (n) が指定されていません。少なくとも {0} 個が必要です。</entry>
    <entry key="Word2BitsNumBitsMustBeConst">ビット数の引数 (n) は定数でなければなりません。</entry>
    <entry key="Word2BitsInvalidBitsArg">ビット数の引数 (n) は正の整数スカラーでなければなりません。</entry>
    <entry key="Word2BitsInvalidInputArg">入力引数 (d) は有効な非複素数型でなければなりません。</entry>
    <entry key="Word2BitsInvalidNumFloatBits">''{1}'' 型の入力には正確に {0} ビットが必要ですが、受け取ったのは {2} です。</entry>
    <entry key="interpnGridPointArgMustBeConst">関数 hdl.interpn のサンプル グリッド点の引数の値が無効です。値はコンパイル時の定数でなければなりません。</entry>
    <entry key="interpnSampleValueArgMustBeConst">関数 hdl.interpn のサンプル値の引数の値が無効です。値はコンパイル時の定数でなければなりません。</entry>
    <entry key="interpnMethodArgMustBeConst">関数 hdl.interpn の内挿法および外挿法の引数はコンパイル時の定数でなければなりません。</entry>
  </message>
</rsccat>
