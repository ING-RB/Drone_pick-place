<!-- Copyright 2009-2024 The MathWorks, Inc. -->
<rsccat version="1.0" locale="en_US" product="Simulink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../../matlab/resources/schema/msgcat.xsd">
  <message>
    <entry key="StringInvalidInputTypeSetting"><![CDATA[<sldiag objui="inport" objparam="{0,number,integer}" objname="{1}">Input port {0,number,integer}</sldiag> of block ''{1}'' does not support signals of data type ''{2}''. The signal must be of data type string.]]></entry>
    <entry key="StringInvalidOutputTypeSetting"><![CDATA[<sldiag objui="outport" objparam="{0,number,integer}" objname="{1}">Output port {0,number,integer}</sldiag> of block ''{1}'' does not support signals of data type ''{2}''. The signal must be of data type string.]]></entry>
    <entry key="InvalidNumberofInputs">Block ''{0}'' expects between {1, number, integer} and {2, number, integer} input ports, but currently has {3, number, integer} input ports.</entry>
    <entry key="InvalidNumberofOutputs">Block ''{0}'' expects between {1, number, integer} and {2, number, integer} output ports, but currently has {3, number, integer} output ports.</entry>
    <entry key="InvalidFormatString">The format string ''{0}'' in block ''{1}'' is not valid.</entry>
    <entry key="SL_DSCPT_STRLEN">Output the number of characters in the input string.</entry>
    <entry key="SL_DSCPT_UINT8TOSTRING">Convert a uint8 vector to a string signal. Each element in the input vector is treated as an ASCII value during the conversion.\n\nFor example, the input vector [72 101 108 108 111] will be converted to the string "Hello".</entry>
    <entry key="SL_DSCPT_STRINGTOUINT8">Convert a string signal to a uint8 vector. Each character in the string is converted to its corresponding ASCII value.\n\nFor example, the input string “Hello” will be converted to [72 101 108 108 111].</entry>
    <entry key="SL_DSCPT_STR2NUM">Convert an input string to a double signal.</entry>
    <entry key="SL_DSCPT_STR2ENUM">Convert an input string to an enumerated signal.</entry>
    <entry key="NoEnumValueFound">Input string ''{0}'' of block ''{2}'' does not match any enumerated value in enumerated data type ''{1}''.</entry>
    <entry key="SL_DSCPT_STRCMP">Compare two input strings.</entry>
    <entry key="SL_DSCPT_SUBSTR">Extract a substring from a string signal. The substring includes ''len'' characters, starting from the character at index ''idx''.\n\nIf ''len'' causes the substring to extend beyond the end of the string, the output signal will contain fewer than ''len'' characters.\n\nIf the ''Output string from ''idx'' to end'' checkbox is selected, the substring includes the characters starting from the character at ''idx'' to the end of the string.\n\nFor example, if input string is “hello 123”, input ''idx'' is 1, and input ''len'' is 5, the output will be "hello". The block extracts a substring starting at 1 and the next 4 characters for a total of 5 characters (hello).</entry>
    <entry key="SubstringIndexOutOfRange">In block ''{0}'' the starting index value is out of range. The starting index ('idx') must be between 1 and the length of the input string ({1, number, integer}).</entry>
    <entry key="SL_DSCPT_STRFIND">Return the index of the first occurrence of the pattern string ''sub'' in the text string ''str''.\n\nReturn -1 if the pattern string is not part of the text string.</entry>
    <entry key="SL_DSCPT_TOSTRING">Convert the input signal to a string signal.</entry>
    <entry key="StringCompareCaseSensitive">Case sensitive</entry>
    <entry key="StringCompareNumOfChars">Number of characters:</entry>
    <entry key="StringValue">String:</entry>
    <entry key="MaximumLength">Output vector size:</entry>
    <entry key="SL_DSCPT_STRINGCONSTANT">Output the string specified by the ''String'' parameter.</entry>
    <entry key="StringBufferOverflow"><![CDATA[The string at <sldiag objui="outport" objparam="{0, number, integer}" objname="{1}">output port {0, number, integer}</sldiag> of block ''{1}'' has a length of {2, number, integer} characters, which is larger than the maximum length of {3, number, integer} characters specified by the block.]]></entry>
    <entry key="SubStringMismatchedStringDataTypes">In block ''{0}'', the output data type was already set to {1}, but a data type {2} was propagated.</entry>
    <entry key="SubstringIndexInvalidDataType"><![CDATA[In block ''{0}'', <sldiag objui="inport" objparam="2" objname="{0}">input port 2</sldiag> must have an integer data type.]]></entry>
    <entry key="SubstringLengthInvalidDataType"><![CDATA[In block ''{0}'', <sldiag objui="inport" objparam="3" objname="{0}">input port 3</sldiag> must have an unsigned integer data type.]]></entry>
    <entry key="NonExtendedASCIIString">Block ''{0}'' only supports Extended-ASCII characters(ISO-8859-1). Parameter ''{1}'' contains unsupported characters.</entry>
    <entry key="ParamValueExceedMaxStringLength">Parameter ''{0}'' of block ''{1}'' has a value of {2}. The maximum number of characters in a string must be {3} or less.</entry>
    <entry key="VectorSizeExceedMaxStringLength">Input vector size {0} of block ''{1}'' exceeds the maximum number of characters in a string. The maximum number of characters in a string must be {2} or less.</entry>
    <entry key="StringLengthOverFlow">Error in ''{0}'': Number of characters in ''{1}'' exceeds {2, number, integer}.</entry>
    <entry key="SL_PARAM_COMPLEXITY" note="Indicates whether signal output is a real or complex number">Complexity: </entry>
    <entry key="InvalidComplexOutput">Output is expected Real.</entry>
    <entry key="SL_DSCPT_FORMATSTRING">Compose an output string signal based on the ''Format'' parameter and input signals. The ''Format'' parameter determines the number of the input signals.\n\nFor example, if the ''Format'' parameter is set to "%s is %f.", the block expects two inputs, a string signal and a single or double signal. If the first input is the string "Pi" and the second input is a double value 3.14, the output will be "Pi is 3.14."</entry>
    <entry key="SL_DSCPT_SCANSTRING">Scan an input string and convert it to signals per the format specified by ''Format'' parameter. Output the results as numeric or string signals.\n\nFor example, if the ''Format'' parameter is set to "%s is %f.", the block outputs two parts, a string signal and a single signal. If the input is the string "Pi is 3.14", the two outputs will be "Pi" and "3.14".</entry>
    <entry key="SL_DSCPT_STRCAT">Concatenate input strings to form one output string.</entry>
    <entry key="SL_PARAM_INPUTFORMAT">Format:</entry>
    <entry key="InvalidInputDataType"><![CDATA[<sldiag objui="inport" objparam="{0, number, integer}" objname="{1}">Input port {0, number, integer}</sldiag> of block ''{1}'' does not support a signal of data type ''{2}''. The input port expects a signal of data type ''{3}''.]]></entry>
    <entry key="InvalidInputDataTypeFloat"><![CDATA[<sldiag objui="inport" objparam="{0, number, integer}" objname="{1}">Input port {0, number, integer}</sldiag> of block ''{1}'' does not support a signal of data type ''{2}''. The input port expects a signal of data type ''single'' or ''double''.]]></entry>
    <entry key="InvalidInputDataTypeInteger"><![CDATA[<sldiag objui="inport" objparam="{0, number, integer}" objname="{1}">Input port {0, number, integer}</sldiag> of block ''{1}'' does not support a signal of data type ''{2}''. Consider using data type ''{3}'' for this input port.]]></entry>
    <entry key="InvalidInputDataTypeUnsupportedInteger"><![CDATA[<sldiag objui="inport" objparam="{0, number, integer}" objname="{1}">Input port {0, number, integer}</sldiag> of block ''{1}'' does not support format specifier ''{2}''. An integer format specifier must match an integer type in the Hardware Implementation device detail settings with 8, 16, 32, or 64 number of bits.]]></entry>
    <entry key="InvParameterDatatypeNotSupportString">String data type, specified in parameter ''{0}'', is not supported for block ''{1}''.</entry>
    <entry key="InvalidInputDataTypeString"><![CDATA[<sldiag objui="inport" objparam="{0, number, integer}" objname="{1}">Input port {0, number, integer}</sldiag> of block ''{1}'' does not support a signal of data type ''{2}''. The input port expects a signal of data type ''string''.]]></entry>
    <entry key="OnlyScalarString">Parameter ''{0}'' of block ''{1}'' only accepts scalar string value. Simulink has no support for array of strings yet.</entry>
    <entry key="ParameterValueIsNotString">Parameter ''{0}'' of block ''{1}'' only accepts string value. Evaluated value of expression ''{2}'' is not a string.</entry>
    <entry key="CompareAll">Entire string</entry>
    <entry key="CompareFirstN">First N characters</entry>
    <entry key="Compare_Option">Compare Option:</entry>
    <entry key="InheritMaximumLength">Inherit maximum length from input</entry>
    <entry key="StringFromIdxToEnd">Output string from ''idx'' to end</entry>
    <entry key="ScanNotAllOutputsWritten">In block ''{0}'' the input string signal does not match the ''Format'' parameter. {1,number,integer} of the {2,number,integer} output ports were successfully assigned.</entry>
    <entry key="ScanStringInvalidIntegerType"><![CDATA[At <sldiag objui="outport" objparam="{0,number,integer}" objname="{1}">output port {0,number,integer}</sldiag> of block ''{1}'', the ''{2}'' specifier is not supported with a target integer width of {3,number,integer} bits. Only integer widths of 16, 32, and 64 bits are supported. Consider using a different length specifier.]]></entry>
    <entry key="NoC89SupportForBlock"><![CDATA[Failed to generate C code for block {0}. A common solution is to set ''Language standard'' to ''C99 (ISO)''.
      <actions exclusiveFixIts="yes">
         <action type="fixit">
           <cmd>configset.internal.fixIt(''{0}'',''TargetLangStandard'',''C99 (ISO)'')</cmd>
           <txt>Select the ''C99 (ISO)'' <sldiag objui="configset" objparam="TargetLangStandard">Language standard</sldiag>.</txt>
         </action>
      </actions>]]>
    </entry>
    <entry key="InvStringSignalAsBusElement"> Element ''{0}'', of ''{1}'', is a string data type that is invalid: </entry>
    <entry key="InvPrmSettingWithStringType">Invalid setting in block ''{0}'' for parameter ''{1}'' when output data type is string.</entry>
    <entry key="RapidAccelNotSupported"> Rapid accelerator simulation is not supported when the model contains Simulink string data type. </entry>
    <entry key="RapidAccelCmdSimNotSupported">Rapid accelerator simulation from the MATLAB command line (''sim'' function) is not supported when the model contains Simulink string data type. Instead, simulate the model from Simulink Editor.</entry>
    <entry key="ExtModeSimNotSupported"> External mode simulation is not supported when the model contains Simulink string data type. </entry>
    <entry key="AsciiToStringOverflowTruncation"> The input vector of ''{0}'' requires a buffer size of  ''{1, number, integer}'' bytes to store all characters, and a null terminator at the end. This required buffer size exceeds the buffer size (''{2,number, integer}'' bytes) of the dynamic string specified by the configuration parameter “Buffer size of dynamically-sized string”. For generated code, the ASCII To String block truncates the string output to fit the buffer of ''{3,number, integer}'' bytes. To avoid truncation, consider increasing the string buffer size. </entry>
    <entry key="Contains">Contains</entry>
    <entry key="StartsWith">Starts with</entry>
    <entry key="EndsWith">Ends with</entry>
    <entry key="ContainsDescription">Determine if a string (str) contains, starts with, or ends with a pattern (sub).</entry>
    <entry key="CountDescription">Count occurrences of pattern (sub) in string (str). Counting is non-overlapping. If two occurrences of pattern overlap, the overlap is counted only once.</entry>
    <entry key="Count">Count</entry>
    <entry key="ContainsFunction">Function: </entry>
    <entry key="OutputOverflowError">The output of block ''{0}'' at port {1,number,integer} is {2,number,integer} and overflows its current data type ''{3}''. Consider another output data type that can fit the value of the output. </entry>
    <entry key="TargetDataTypeNotInSupportedList">Output signal of block ''{0}'' drives signal of data type ''{1}''. Output data type of this block must be ''{2}''.</entry>
    <entry key="UnsupportedCPPStringInBus">Delay block ''{0}'' does not support bus with string elements when 'Show enable port' is selected and string is generated as C++ std::string.</entry>
    <!--The following entries are for place holder purpose currently. Will revisit them later-->
    <entry key="StringStripCharNotEqualOne">Invalid ''Character'' setting in ''{0}'': ''{1}'' contains multiple characters. The removal of more than one character is not supported.</entry>
    <entry key="StripLeft">Remove from left side</entry>
    <entry key="StripRight">Remove from right side</entry>
    <entry key="StripBoth">Remove from left side and right side</entry>
    <entry key="StripChar_Options">Character to strip</entry>
    <entry key="StripCharValue">Character</entry>
    <entry key="StripWhiteSpace">Whitespaces, tab, line break</entry>
    <entry key="ReplaceDescription">Replace all occurrences of the old substring with the new substring</entry>
    <entry key="Replace">Replace</entry>
    <entry key="Erase">Erase</entry>
    <entry key="ReplaceBetweenDescription">Replace substring in str with the text in newStr. The substrings that are replaced occur between the substrings startStr and endStr. Or, replace substring in str that occurs between the positions startPos and endPos in str</entry>
    <entry key="ReplaceBetween">Replace between</entry>
    <entry key="EraseBetween">Erase between</entry>
    <entry key="RangeTypeSubstring">all pairs of starting and ending substrings</entry>
    <entry key="RangeTypeIndex">starting and ending indices</entry>
    <entry key="RangeType">Range between:</entry>
    <entry key="Boundary">Inclusive</entry>
    <entry key="ReplaceBetweenStartIndexOOR">Input value of start index ({1,number,integer}) of block ''{0}'' must be no smaller than 0 for exclusive setting and no smaller than 1 for inclusive setting.</entry>
    <entry key="ReplaceBetweenEndIndexOOR">Length of input string is {1,number,integer} in block ''{0}''. Input value of end index ({2,number,integer}) must be no greater than {1,number,integer} for inclusive setting and no greater than {3,number,integer} for exclusive setting.</entry>
    <entry key="ReplaceBetweenInconsistentStartEndIndex">Invalid combination of start index ({1,number,integer}) and end index ({2,number,integer}) for block ''{0}''.</entry>
    <entry key="ReplaceBetweenUnsupportedIndexTypeIndex">Input port {1,number,integer} of block ''{0}'' must have 8-, 16- or 32-bit integer type.</entry>
    <entry key="MaxNumCharacters">Maximum number of characters:</entry>
  </message>
</rsccat>
