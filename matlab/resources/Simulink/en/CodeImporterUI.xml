<?xml version="1.0" encoding="UTF-8" ?>
<!-- Copyright 2019 The MathWorks, Inc. -->
<rsccat version="1.0" locale="en_US" product="Simulink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../schema/msgcat.xsd">
  <message>
    <entry key="CustomCodeParsingFailed">Custom code parsing failed with the messages: {0}</entry>
    <!-- Dialog -->
    <entry key="Title">Code Importer</entry>
    <entry key="SaveDialogTitle">Save Code Importer Settings to File</entry>
    <entry key="ConfirmationDialogTitle">Simulink Code Importer</entry>
    <entry key="ConfirmationDialogMsg">Save import settings before closing?</entry>
    <entry key="ConfirmationDialogButtonYesLabel">Yes</entry>
    <entry key="ConfirmationDialogButtonNoLabel">No</entry>
    <entry key="ProjectDialogTitle">Specify Existing Project File</entry>
    <entry key="AddToProjectSuccessDlg">Add to Project</entry>
    <entry key="AddToProjectSuccessMsg">Successfully added to project</entry>
    <entry key="InferHdrConfirmationDlgTitle">Auto-fill Interface headers</entry>
    <entry key="InferHdrConfirmationDlgMsg">Proceeding further will replace previous values in ''{0}'' with auto-filled headers. Would you like to continue?</entry>
    <entry key="InferHdrConfirmationDlgYesLabel">Yes</entry>
    <entry key="InferHdrConfirmationDlgNoLabel">No</entry>

    <!-- Breadcrumbs -->
    <entry key="Topic_Welcome">Welcome</entry>
    <entry key="Topic_SimulinkLib">Settings</entry>
    <entry key="Topic_ConfigCode">Specify Custom Code</entry>
    <entry key="Topic_Analyze">Analyze</entry>
    <entry key="Topic_WhatToImport">Configure</entry>
    <entry key="Topic_Options">Options</entry>
    <entry key="Topic_Finish">Import</entry>

    <!-- JavaScript -->
    <entry key="status">Status</entry>
    <entry key="QuestionHelpTitle">What to consider</entry>
    <entry key="OptionHelpTitle">About the selected option</entry>
    <entry key="back">Back</entry>
    <entry key="next">Next</entry>
    <entry key="save">Save</entry>
    <entry key="startNew">Start</entry>
    <entry key="loadButton">Load</entry>
    <entry key="finish">Finish</entry>
    <entry key="empty_selection">You have not selected any answer!</entry>
    <entry key="error">Error</entry>
    <entry key="needNumericValue">Please enter a numeric value.</entry>    
    <entry key="categoryTitle">Category</entry>
    <entry key="parameterTitle">Parameter</entry>
    <entry key="newValueTitle">New Value</entry>
    <entry key="oldValueTitle">Old Value</entry>
    <entry key="sbxupdate">Update Sandbox</entry>
    <entry key="addtoprjBtn">Add</entry>
    <entry key="addtoprjLabel">Add Simulink library or model files to project? </entry>
    <entry key="inferBtnToolTip">Auto-fill interface headers from specified source files</entry>
    <entry key="slInterfaceTableNameColumnLabel">Name</entry>
    <entry key="slInterfaceTableButtonColumnLabel">Simulink Interface</entry>
    <entry key="slInterfaceTableButtonDefInterface">Define</entry>
    <entry key="slInterfaceTableButtonModiInterface">Modify</entry>
    <entry key="slInterfaceTableButtonValInterface">Validate</entry>
    <entry key="existingBlocksTableNameColumnLabel">Name</entry>
    <entry key="existingBlocksTableBlockColumnLabel">Existing Imported Blocks</entry>

    <!-- Simulink Interface Dialogs -->
    <entry key="slInterfaceQuestionDlgTitle">Configure Simulink interface for "{0}"</entry>
    <entry key="slInterfaceQuestionConstructorLabel">Constructor for class instantiation:</entry>
    <entry key="slInterfaceQuestionInitLabel">Initialization method:</entry>
    <entry key="slInterfaceQuestionTermLabel">Cleanup method:</entry>
    <entry key="slInterfaceQuestionStepLabel">Methods for output code:</entry>
    
    <!-- Question: Welcome -->
    <entry key="Question_Start"><![CDATA[
                        <center><b><u>Code Importer</u></b></center><br/><br/>
    <p>The Code Importer allows you to import custom code for modeling, verification, and validation.</p>
    <br/><br/>
    <p>The Code Importer:
    <ul>
    <li>Analyzes the custom code for functions, classes, types, global variables, and their dependencies.</li>
    <li>Imports custom code into a Simulink library or model containing callable functions, classes, and types.</li>
    <li>Creates a Simulink Test file (Simulink Test license required).</li>
    </ul>
    </p>]]></entry>
    
    <entry key="Question_Start_SLTest"><![CDATA[
                        <center><b><u>Code Importer</u></b></center><br/><br/>
    <p>The Code Importer allows you to import custom code for modeling, verification, and validation.</p>
    <br/><br/>
    <p>The Code Importer:
    <ul>
    <li>Analyzes the custom code for functions, types, global variables, and their dependencies.</li>
    <li>Imports custom code into a Simulink library or model containing callable functions and types.</li>
    <li>Creates a Simulink Test file.</li>
    </ul>
    </p>]]></entry>
    
    <entry key="Option_Start_New">Start a new import</entry>
    <entry key="Option_Start_Existing">Load a file saved from a previous import</entry>
    <entry key="Option_Start_SelectFile">Select file:</entry>
    <entry key="OptionHint_Start_SelectFile">Select a file saved from previous import.</entry>
    <entry key="Option_ConfigCodeImporter_Language">Select language to import:</entry>

    <!-- Question: ConfigCodeImporter -->
    <entry key="Option_ConfigCodeLibrary_ProjectName">Library or model name: </entry>
    <entry key="OptionHint_ConfigCodeLibrary_ProjectName">Specify a name for the output Simulink library or model and artifact files. </entry>
    <entry key="Option_ConfigCodeLibrary_ProjectFolder">Output folder: </entry>
    <entry key="OptionHint_ConfigCodeLibrary_ProjectFolder">Specify a folder that stores output Simulink library or model and artifact files. </entry>
    <entry key="Option_ConfigCodeLibrary_LibraryBrowserName">Simulink library browser name: </entry>
    <entry key="OptionHint_ConfigCodeLibrary_LibraryBrowserName">Specify the name that shows up in Simulink Library Browser. </entry>
    <entry key="Option_OptionsCreateSLBlocks_Checkbox">Add generated library to Simulink Library Browser.</entry>
    <entry key="OptionHint_OptionsCreateSLBlocks_Checkbox">Select this to add generated library to Simulink Library Browser.</entry>
    <entry key="Question_ConfigCodeImporter"><![CDATA[ <b> Specify the output Simulink library or model name and output folder:</b>
    ]]></entry>
    <entry key="QuestionHint_ConfigCodeImporter"><![CDATA[ Library or model name: Name of the Simulink library or model that imports functions or classes. The name is also used for the generated Simulink artifact files. <br/><br/>
    Output folder: Folder that stores output Simulink library or model and artifact files. A new Simulink library will be generated in the output folder if the specified library or model does not exist in that folder. <br/><br/>
    ]]></entry>
    
    <entry key="QuestionHint_ConfigCodeImporter_SLTest"><![CDATA[ Library or model name: Name of the Simulink library or model that imports functions or classes. The name is also used for the generated Simulink artifact files. <br/><br/>
    Output folder: Folder that stores output Simulink library or model and artifact files. A new Simulink library will be generated in the output folder if the specified library or model does not exist in that folder. <br/><br/>
    Select <b>C Code Unit Testing</b> if you want to isolate and test a subset of your custom code. <br/><br/>
    Select <b>Integration Testing</b> if you want to test your entire custom code.
    ]]></entry>
    <entry key="OutputFolderUnspecified">The output folder must be specified. </entry>
    
    <!-- Question: ConfigCodeLibrary -->
    <entry key="Question_ConfigCodeLibrary"><![CDATA[<b>Specify custom code information:</b>]]></entry>
    <entry key="QuestionHint_ConfigCodeLibrary"><![CDATA[<p>For custom code options, path must be full path or relative to the output folder.</p>
    <p>When specifying defines, use ';' to separate multiple defines or flags. "-D" is optional.</p>]]> </entry>
    <entry key="QuestionHint_ConfigCodeLibrary_InferHeaders"><![CDATA[To compute interface headers from specified source files, you can click {0}]]> </entry>
    
    <entry key="Option_ConfigCodeCompiler_Language">Language:</entry>
    <entry key="OptionHint_ConfigCodeCompiler_Language">Specify the language to compile and parse the custom code.</entry>
    <entry key="Option_ConfigCodeCompiler_Defines">Defines:</entry>
    <entry key="OptionHint_ConfigCodeCompiler_Defines">Specify preprocessor macro definitions to be added to the compiler command line.</entry>
    <entry key="Option_ConfigCodeLibrary_SourceFiles">Source files:</entry>
    <entry key="OptionHint_ConfigCodeLibrary_SourceFiles">Specify source files to be imported.</entry>
    <entry key="Option_ConfigCodeLibrary_IncludeFiles">Interface headers:</entry>
    <entry key="OptionHint_ConfigCodeLibrary_IncludeFiles">Specify interface headers to be imported.</entry>
    <entry key="Option_ConfigCodeLibrary_IncludePaths">Include directories:</entry>
    <entry key="OptionHint_ConfigCodeLibrary_IncludePaths">Specify a list of folder paths that contain files to include in the compiled target.</entry>
    <entry key="Option_ConfigCodeLibrary_Libraries">Libraries:</entry>
    <entry key="OptionHint_ConfigCodeLibrary_Libraries">Specify a list of libraries that contain custom object code to link.</entry>
    <entry key="Option_ConfigCodeLibrary_MetadataFile">Metadata file:</entry>
    <entry key="OptionHint_ConfigCodeLibrary_MetadataFile">Specify Metadata file path.</entry>
    <entry key="Option_ConfigCodeCompiler_CompilerFlags">Compiler flags:</entry>
    <entry key="OptionHint_ConfigCodeCompiler_CompilerFlags">Specify additional compiler flags.</entry>
    <entry key="Option_ConfigCodeCompiler_LinkerFlags">Linker flags:</entry>
    <entry key="OptionHint_ConfigCodeCompiler_LinkerFlags">Specify additional linker flags.</entry>

    <!-- Question: optional: ConfigUpdateMode -->
    <entry key="Question_ConfigUpdateMode"><![CDATA[<b>Blocks in the specified output Simulink library or model already import the {0} listed in the table below. You can replace the existing blocks or import {0} as new blocks:</b>]]></entry>
    
    <entry key="Option_UpdateExisting">Replace existing blocks</entry>
    
    <entry key="Option_Overwrite">Import as new blocks</entry>
    
    <!-- Question: WhatToImportAnalyze -->
    <entry key="Question_WhatToImportAnalyze"><![CDATA[<p>Click <b>Next</b> to:</p>
    <ul>
    <li>Analyze the custom code for functions, classes, types, global variables, and their dependencies.</li></ul>]]></entry>
	
    <!-- Question: WhatToImportFunction -->
    <entry key="Question_WhatToImportFunction"><![CDATA[<b>Select the functions to import:</b>]]></entry>
    <entry key="QuestionHint_WhatToImportFunction"><![CDATA[<p>A C Caller block will be generated for each selected function.</p>
    <p>Select at least one function to import.</p>]]></entry>
    <entry key="Option_WhatToImportFunction_EntryFunctions">Only show entry-point functions</entry>
    <!--<entry key="OptionHint_WhatToImportFunction_EntryFunctions">Select this checkbox to view entry functions only.</entry>-->
    <entry key="OptionHint_WhatToImportFunction_FunctionNameFilter">Find functions by name</entry>

    <!-- Question: PortSpecificationsMapping -->
    <entry key="Question_PortSpecificationsMapping"><![CDATA[<b>Edit the block port specifications for the previously selected functions.</b>]]></entry>
    <entry key="QuestionHint_PortSpecificationsMapping"><![CDATA[<p>C Caller blocks will be generated with default port specifications unless you specify otherwise.</p><p> The port specifications can also be updated in the imported C Caller blocks in the output Simulink library or model.</p>]]></entry>

    <!-- Question: WhatToImportClass -->
    <entry key="Question_WhatToImportClass"><![CDATA[<b>Select the classes to import:</b>]]></entry>
    <entry key="QuestionHint_WhatToImportClass"><![CDATA[<p>A C Function block will be generated for each selected class.</p>
    <p>Select at least one class to import.</p>]]></entry>
    <entry key="OptionHint_WhatToImportClass_ClassNameFilter">Find classes by name</entry>

    <!-- Question: ClassSimulinkInterface -->
    <entry key="Question_ClassSimulinkInterface"><![CDATA[<b>Define Simulink interfaces for the previously selected classes.</b>]]></entry>
    <entry key="QuestionHint_ClassSimulinkInterface"><![CDATA[ <p> Click 'Define Interface' to start the process for selecting constructor, methods and editing Ports And Parameters, and algorithm scripts for the class.</p>
    <p>C Function blocks will be generated with the defined Simulink interface.</p>
    <p>The Simulink interface settings can also be updated in the imported C Function blocks in the output Simulink library or model.</p>]]></entry>
    <entry key="OptionHint_ClassSimulinkInterface_ClassNameFilter">Find classes by name</entry>
    
    <!-- Question: WhatToImportType -->
    <entry key="Question_WhatToImportType"><![CDATA[<b>Select types to import:</b>]]></entry>
    <entry key="QuestionHint_WhatToImportType"><![CDATA[ <p> Types required by the previously selected functions or classes are automatically selected.</p>
    <p>All selected types will be imported into a Simulink data dictionary that is linked to the output Simulink library or model. If no data dictionary is linked, a new data dictionary will be generated.</p>]]></entry>
    <entry key="Option_WhatToImportType_ImportToFile">Import types to file</entry>
    <entry key="OptionHint_WhatToImportType_ImportToFile">Select this option to import struct types into ''project_name_types.mat'' file and import enum types into MATLAB class files.</entry>
    <entry key="OptionHint_WhatToImportType_TypeNameFilter">Find types by name</entry>
    
    <!-- Question: OptionsGlobalIO -->
    <entry key="Question_OptionsGlobalIO"><![CDATA[<b>Global variables as function interfaces:</b>]]></entry>
    <entry key="QuestionHint_OptionsGlobalIO"><![CDATA[When this parameter is selected, global variables accessed by the functions are automatically inferred as function interfaces using custom code analysis. For more information, see  <a href="matlab:helpview('simulink', 'Tag_ConfigSet_Sim_CustomCodeGlobalsAsFunctionIO')">{0}</a>.]]></entry>
    <entry key="Option_OptionsGlobalIO_Checkbox">Automatically infer global variables as function interfaces</entry>
      <entry key="OptionHint_OptionsGlobalIO_Checkbox">Deselect this parameter if the functions do not use global variables as their interfaces or it is desired to manually set the global variables as function interfaces.</entry>
        
    <!-- Question: Finish -->
    <entry key="Question_Finish">Summary of import settings:</entry>
    <!-- Question: NextStep -->
    <entry key="Question_NextStep"><![CDATA[<center><b><u>Code Import Successful</u></b></center><br/><br/>
    <p><b>Next steps:</b></p>{0}]]></entry>
    <entry key="OutputFolderCDHyperlink">Change the MATLAB current folder to the output folder.</entry>
    <entry key="OpenLibraryHyperlink">Open the Simulink library or model</entry>
    <entry key="Option_ConfigProject_AddToProject"></entry>
    <entry key="OptionHint_ConfigProject_AddToProject">Specify existing project file</entry>
    
	<!-- Question: ConfigTestType -->
	<entry key="Question_ConfigTestType"><![CDATA[<b>Specify testing method:</b>]]></entry>
	
	<entry key="Option_ConfigTestType_UnitTest">C Code Unit Testing</entry>
	<entry key="OptionHint_ConfigTestType_UnitTest"><![CDATA[<p>The option you selected creates a sandbox from the specified source files. The sandbox will consist of:
    <ul>
    <li>Interface header file.</li>
    <li>Auto-stub files for undefined symbols.</li>
    <li>Manual stub files to allow manually editing undefined symbols.</li>
    </ul></p>]]></entry>
	<entry key="Option_ConfigTestType_PackageTest">Integration Testing</entry>
	<entry key="OptionHint_ConfigTestType_PackageTest">The selected option imports the specified custom code without generating stubs for the missing symbols.</entry>
    
	<!-- Question: ConfigSandbox-->
	<entry key="Question_ConfigSandbox"><![CDATA[<b>Specify output test sandbox mode:</b>]]></entry>
	<entry key="QuestionHint_ConfigSandbox"><![CDATA[<p>Select <strong>"Generate aggregated header"</strong> to generate a sandbox for the specified C code source file with a minimal aggregated header file and stubs for undefined symbols. This sandbox mode supports only a single source file.</p>
    <p>Select <strong>"Generate preprocessed source"</strong> to generate a sandbox containing a preprocessed version of the C code and stubs for undefined symbols.</p>
    <p>Select <strong>"Use original source"</strong> to generate a sandbox using the original C code with no modifications.</p>]]></entry>
	
    <entry key="Option_ConfigSandbox_AggregatedHeader">Generate aggregated header</entry>
	<entry key="OptionHint_ConfigSandbox_AggregatedHeader"><![CDATA[<p>The specified <b>Aggregated Header sandbox</b> will be generated with the following settings</p>]]></entry>
    <entry key="Option_ConfigSandbox_PreprocessedSource">Generate preprocessed source</entry>
	<entry key="OptionHint_ConfigSandbox_PreprocessedSource"><![CDATA[<p>The specified <b>Preprocessed Source sandbox</b> will be generated with the following settings</p>]]></entry>
    <entry key="Option_ConfigSandbox_UseOriginalCode">Use original source</entry>
	<entry key="OptionHint_ConfigSandbox_UseOriginalCode"><![CDATA[<p>The specified <b> Use Original Source sandbox</b> will be generated with the following settings</p>]]></entry>
    <!-- Additional Sandbox options -->
    <entry key="Question_ConfigSandboxSettings"><![CDATA[<b>Specify output test sandbox settings:</b>]]></entry>
    <entry key="Option_ConfigSandbox_CopySources">Copy source files</entry>
	<entry key="OptionHint_ConfigSandbox_CopySources"><![CDATA[<ul><li>The specified source files will be copied into the ''src'' directory in the output test sandbox.</p></li></ul>]]></entry>
    <entry key="Option_ConfigSandbox_CopyHeadersSources">Copy header files and source files</entry>
    <entry key="OptionHint_ConfigSandbox_CopyHeadersSources"><![CDATA[<ul><li><p>The specified header files and source files will be copied into the ''include'' directory and ''src'' directory in the output test sandbox, respectively.</p></li></ul>]]></entry>
	<entry key="Option_ConfigSandbox_RemovePragmas">Remove pragmas from the aggregated header</entry>
	<entry key="OptionHint_ConfigSandbox_RemovePragmas"><![CDATA[<ul><li><p>All ''#pragmas'' will be removed from the aggregated header.</p></li></ul>]]></entry>
    <entry key="Option_ConfigSandbox_RemovePragmasSource">Remove pragmas from the preprocessed source</entry>
    <entry key="OptionHint_ConfigSandbox_RemovePragmasSource"><![CDATA[<ul><li><p>All ''#pragmas'' will be removed from the preprocessed source.</p></li></ul>]]></entry>
	<entry key="Option_ConfigSandbox_RemoveVarDefinition">Remove global variable definitions from the aggregated header</entry>
	<entry key="OptionHint_ConfigSandbox_RemoveVarDefinition"><![CDATA[<ul><li><p>All global variable definitions will be removed and replaced with extern declarations in the aggregated header.</p></li></ul>]]></entry>
    
	
	<!-- Question: WhatToImportAnalyzeSandbox -->
	<entry key="Question_WhatToImportAnalyzeSandbox"><![CDATA[<p>Click <b>Next</b> to:</p>
    <ul>
    <li>Analyze the custom code for functions, types, global variables, and their dependencies.</li>
    <li>Generate a test sandbox based on the specified settings.</li>
    <li>Generate auto-stub files for undefined symbols and manual stub files to manually edit undefined symbols.</li></ul>]]></entry>
	
	<!-- Question: WhatToImportFinishSandbox -->
    <entry key="Question_WhatToImportFinishSandbox"><![CDATA[Test sandbox has been created in the output folder. {0} <p><b>Artifacts generated:</b></p>{1} {2}<br/><p>Click <b>Update Sandbox</b> if you have made changes to the manual stub files.<br/> Note: Updating the sandbox will regenerate the auto stub files.</p>]]></entry>
    <entry key="SandboxFolderCDHyperlink">Change the MATLAB current folder to the sandbox folder.</entry>
	<entry key="QuestionHint_WhatToImportFinishSandbox"> <![CDATA[ <p>Auto-stub files: Files containing automatically stubbed undefined symbols. </p><br/>
    <p> Manual stub files: Files that allow you to manually edit stubs of undefined symbols</p><br/>
    <p>Do not modify the following as these will always be regenerated:</p>
    <ul>
    <li>Auto-stub files</li>
    <li>Specified source files</li>
    <li>Header files located in the sandbox ''include'' directory.</li></ul>
    ]]></entry>
    <entry key="SandboxUpdateErrorUI">Sandbox files have changed. Click on ''Update Sandbox'' to refresh the sandbox.</entry>
	<entry key="CustomCodeChangedSandboxUpdateErrorUI">Custom code files specified in the ''CustomCode'' section have changed. Click on ''Update Sandbox'' to refresh the sandbox.</entry>
    <entry key="AutostubSourceHyperlink">Auto stub source</entry>
    <entry key="AutostubHeaderHyperlink">Auto stub header</entry>
    <entry key="ManualstubSourceHyperlink">Manual stub source</entry>
    <entry key="ManualstubHeaderHyperlink">Manual stub header</entry>
	
	
	<!-- Question: optional: WhatToImportOverwriteSandbox -->
    <entry key="Question_WhatToImportOverwriteSandbox"><![CDATA[<b>The specified output sandbox already exists. You can update the existing sandbox or overwrite it.</b>]]></entry>
    <entry key="Option_WhatToImportOverwriteSandbox_Update">Update - Preserve the changes made to the manual stub files</entry>
    <entry key="Option_WhatToImportOverwriteSandbox_Overwrite">Overwrite - Delete the existing sandbox and create a new one</entry>
    
    <!-- Question: optional: CreateTestHarness -->
    <entry key="Question_CreateTestHarness"> <![CDATA[<b> Create test harness:</b>]]></entry>
    <entry key="Option_CreateTestHarness_Auto">Automatically create test harness for all imported functions or classes</entry>
    <entry key="Option_CreateTestHarness_Skip">Skip</entry>
    
    
  </message>
</rsccat>

<!-- LocalWords: -->
