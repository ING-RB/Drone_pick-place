<?xml version="1.0" encoding="UTF-8" ?>
<!-- Copyright 2009-2025 The MathWorks, Inc. -->
<rsccat version="1.0" locale="en_US" product="Simulink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../../matlab/resources/schema/msgcat.xsd">
  <message>
    <entry key="CodeVariantConfigExternalMode_fix">Variant activation time is updated.</entry>
    <entry key="LogicalModeledAsBitwiseError"><![CDATA[You have chosen to represent logical operators using Bitwise operators. This is not supported when the model contains variant blocks in 'startup' activation. Change the 'Operator to represent Bitwise and Logical Operator blocks' to 'Logical Operator'.
    <actions exclusiveFixIts="yes">
    <action type="fixit">
    <cmd>slprivate(''variantfixes'',''LogicalModeledAsBitwiseError'',''{0}'')</cmd>
    <txt>Change the 'Operator to represent Bitwise and Logical Operator blocks' to 'Logical Operator'.</txt>
    </action>
</actions> ]]>
    </entry>
    <entry key="LogicalModeledAsBitwiseError_fix">Changed the 'Operator to represent Bitwise and Logical Operator blocks' to 'Logical Operator'.</entry>
    <entry key="CodeVariantCustomStorageClassesIgnored_fix">The Ignore custom storage classes option is disabled.</entry>
    <entry key="CannotChangeGPCDuringUpdate">Cannot change parameter ''{0}'' of the variant subsystem block ''{1}'' while simulation is running.</entry>
    <entry key="VariantBusStateLogUnsupported">State logging is not supported when some of the states are removed.</entry>
    <entry key="DimensionEmptyDueToVariants">The compiled port dimensions is empty. One possible reason could be due to this port being in the path of an inactive variant. Consider making this port active. </entry>
    <entry key="SampleTimeEmptyDueToVariants">The compiled port sample time is empty. One possible reason could be due to this port being in the path of an inactive variant. Consider making this port active. </entry>
    <entry key="VariantConditionParseError">The variant control expression ''{0}'' used by block ''{1}'' is invalid.</entry>
    <entry key="ConstraintConditionParseError">The condition specified for constraint ''{0}'' is invalid.</entry>
    <entry key="CSS_UpgradeAdvisorWarning_NoFixIt">
      <![CDATA[
               Model contains one or more Configurable Subsystems which need to be converted to Variant Subsystems. \n
               <actions exclusiveFixIts="yes">
               <action type="suggestion">
               <txt>Run upgrade advisor to manually convert Configurable Subsystem blocks to Variant Subsystem blocks.</txt>
               </action>
               </actions>
      ]]>
    </entry>
    <entry key="VariantControlNonNumericValue">Variant control variable value "{0}" must be numeric, a valid enumerated value of Simulink.IntEnumType, or a structure that contains fields with valid values.</entry>   
    <entry key="VariantConditionNotVariantObject">Variant control ''{0}'' of variant block ''{1}'' must be a condition expression or name of a Simulink.VariantExpression object in the global scope workspace of the model. Ensure that the condition does not match the model name.</entry>
    <entry key="VariantConditionUndefinedWarning" note="Variant Manager shows one warning per object during import control variables">Variant control ''{0}'' used by model ''{1}'' must be a condition expression or name of a Simulink.VariantExpression object in the global scope workspace of the model. Ensure that the condition does not match the model name.</entry>
    <entry key="ExpressionParseErrorIntegerLiteralOverflow">Unsupported numeric value ''{0}'' in variant condition expression ''{1}''. Only integers that can fit into the integer type for this system are allowed.</entry>
    <entry key="VariantControlVariableModelName" note="stringDatatypeUpdate">You cannot set a variant control variable with name ''{0}'' for block ''{1}'' because it matches the name of the model ''{2}''. If this variable is referenced in the condition expression of a Simulink.VariantExpression object that is defined in a global scope workspace, Simulink converts the condition expression to an empty character vector when you load or open the model.</entry>
    <entry key="VariantObjectDependencyLoop1Object">There is a dependency loop in the Condition expression of Simulink.VariantExpression object {0}, which is not allowed.</entry>
    <entry key="VariantObjectDependencyLoopNObjects">There is a dependency loop in the Condition expressions of Simulink.VariantExpression objects {0} and {1}, which is not allowed.</entry>
    <entry key="VariantCannotBeChangedDuringCompilation">Modifying the active variant of the block ''{0}'' by a callback on a block other than itself is not supported.</entry>
    <entry key="InvalidVariantControlForIVSimCodegenBlock">Variant control switch for the choices of Variant block ''{0}'' in Variant control mode 'sim codegen switching' must be either ''(sim)'' or ''(codegen)''.</entry>
    <entry key="InlineVariantWithMultipleDefaultPorts">Variant {0} block ''{1}'' has multiple default ports. Only one port can be specified as the default port.</entry>
    <entry key="VariantSrcBusTypesMustBeSame">Invalid connection detected for ''{0}'' at input port {1,number,integer}. All inputs to a Variant source block need to have identical signal names and hierarchies.</entry>
    <entry key="VariantSSBusTypesMustBeSame">Invalid connection detected for ''{0}''. All outputs from the choice blocks of a Variant Subsystem must have identical signal names and hierarchies.</entry>
    <entry key="InlineVariantZeroVariantsNotAllowedFixAZVC">The value of parameter 'AllowZeroVariantControls' is set to 'on'</entry>
    <entry key="convertToVariantProtectedMdlPortOrdering">Converting a protected model reference block to variant system may not preserve the input and output port order.</entry>
    <entry key="convertToVariantNotAllowed">Model ''{0}'' is in Restricted mode. Incorrect to convert Subsystem to Variant Subsystem when model is in Restricted mode.</entry>
    <entry key="ConvertMRVToVariantSuccess">Successfully converted Model Variants block to Variant Subsystem block ''{0}''.</entry>
    <entry key="ConvertMRVToVariantSuccessSave">All Model Variants blocks in model ''{0}'' converted to Variant Subsystem blocks. Save the model to preserve the converted Variant Subsystem blocks.</entry>
    <entry key="ConvertToVariantwithBadModelDef">Unable to convert Model Variants block ''{0}'' to Variant Subsystem block as model referenced by Model Variants block ''{0}'' is either invalid or not found.</entry>
    <entry key="ConvertToVariantwithOldModelDef">Unable to convert Model Variants block ''{0}'' to Variant Subsystem block as one or more models referenced by Model Variants block ''{0}'' are saved in older Simulink release.</entry>
    <entry key="ConvertToVariantwithOldModelDefForMdl">Unable to convert Model block ''{0}'' to Variant Subsystem block as model referenced is saved in older Simulink release.</entry>
    <entry key="ConvertMRVToVariantFailed">
      <![CDATA[
               Failed to convert Model Variants block ''{0}'' to Variant Subsystem block automatically.
               <actions exclusiveFixIts="yes">
               <action type="suggestion">
               <cmd>upgradeadvisor(''{1}'')</cmd>
               <txt>Run upgrade advisor to manually convert Model Variants block to Variant Subsystem block .</txt>
               </action>
               </actions>
      ]]>
    </entry>
    <entry key='convertToVariantForCSSNotAllowed'>Programmatic conversion of Configurable Subsystem block ''{0}'' to Variant Subsystem is not supported. Use the context menu to convert to Variant Subsystem.</entry>
    <entry key="convertToVariantForCSSReference">Programmatic conversion of Configurable Subsystem block ''{0}'' to Variant Subsystem is not supported as it is a reference of ''{1}''. Please convert the referenced block ''{1}'' first.</entry>
    <entry key="convertToVariantForBlockDiagram">The conversion of Block Diagram to Variant is not supported.</entry>
    <entry key="convertToVariantForVAS">Failed to convert block ''{0}'' to Variant Subsystem because it is a Variant Assembly Subsystem.</entry>
    <entry key="InlineVariantExtOutputNotSupportedFixCSVList"><![CDATA[A comma separated list of variables is specified for the parameter <a href="matlab:load_system(bdroot);configset.highlightParameter(bdroot,'OutputSaveName')">OutputSaveName</a>.]]></entry>
    <entry key="IVFunctionCallCodeReuseDstFcnJoin">The specified value of ''Code generation function packaging'' parameter for the block ''{0}'' is not supported as function call signal on its outport is connected to a variant block. Consider changing the value of this parameter to ''inline'' or ''auto''.</entry>
    <entry key="InlineVariantFunctionCallCodeReuseOnlyInline">The specified value of ''Code generation function packaging'' parameter for the block ''{0}'' is not supported because it has received a propagated variant condition. Consider changing the value of this parameter to ''inline''.</entry>
    <entry key="MaskWorkspaceSupportInvalidForReusableCodegen">''Code generation function packaging'' for the block ''{0}'' is set to ''reusable'' which is not supported because the variant control variable ''{1}'' originates from the mask workspace. Set the value of the parameter to ''inline'' or ''auto'' or ''non-reusable''.</entry>
    <entry key="InvalidVATSimCodegen">The variant activation time for variant block ''{0}'' must be set to either "update diagram analyze all choices" or "update diagram" when its variant control mode is set to "sim codegen switching".</entry>
    <entry key="InvalidVATRuntime">Invalid variant activation ''{0}'' for the block ''{1}''.</entry>
    <entry key="SimulinkVariantConflictWithBusElement">Simulink.VariantExpressions object ''{0}'' has a potential conflict with one of the bus elements ''{0}'' of the bus object ''{1}''. To resolve this error, change Simulink.VariantExpressions object with a different identifier.</entry>
    <entry key="SimulinkVariantConflictWithRunTimeParameter">Simulink.VariantExpressions object ''{0}'' has a potential conflict with the run-time parameter ''{0}'' for the block ''{1}''. To resolve this error, change Simulink.VariantExpressions object with a different identifier.</entry>
    <entry key="ConvertDefaultParameterBehaviorToTunable_fix">The Default parameter behavior is set to ''Tunable'' in the optimization pane.</entry>
    <entry key="VariantControlWithStructElemConflictWithStateflowStruct">Structures in variant controls of variant blocks must be different from structures in Stateflow and MATLAB Function blocks.</entry>
<entry key="NonSimulinkParamConflictWithVarControl_fix">Variant control variable ''{0}'' has been converted to Simulink.Parameter with 'CompilerFlag' custom storage class.</entry>
<entry key="NonSimulinkParamNotSupportedForStartup_fix">Variant control variable ''{0}'' has been converted to Simulink.Parameter with 'ExportedGlobal' storage class.</entry>
<entry key="NonSimulinkParamWithVariantTransConflictWithCC">Using the same variable for the variant transition with parameter ''{1}'' with ''startup'' activation time in Stateflow chart ''{0}'' and the variant control variable of variant block ''{2}'' is not supported when the ''Variant activation time'' of the variant block is set to ''code compile''.</entry>
<entry key="CSStoVSSGUITitle">Convert to Variant Subsystem: </entry>
<entry key="LinearlyImplicitSystemWithStartupVariants">Unable to generate code for model ''{0}'' because it uses the ''{1}'' solver and contains startup variant blocks connected to continuous state blocks that specifies a linearly implicit system of ODEs. The use of ''{1}'' with linearly implicit equations with startup variants is not supported.</entry>
<entry key="CSStoVSSGUIdescText">Simulink copies the block choices of the configurable subsystem to the variant subsystem. By default, the copy operation does not create links to the configurable subsystem library. Also, the current block choice is made the active variant selection.\n\nThe table allows assigning of variant controls to the choices in the variant subsystem.</entry>
<entry key="CSStoVSSGUICheckBoxName">Copy without creating links to the configurable subsystem library</entry>
<entry key="CSStoVSSGUICheckBoxGroupName">Specify copy option</entry>
<entry key="CSStoVSSGUIVariantGroupName">Specify variant controls</entry>
<entry key="CSStoVSSGUIDescription">Description</entry>
<entry key="CSStoVSSConversionStage">Configurable Subsystem to Variant Subsystem</entry>
<entry key="ConvertToVariant">Convert to Variant Subsystem</entry>
<entry key="ControlVariableInConflict">Value of the control variable ''{0}'' conflicts with value in configuration ''{1}'' used by model ''{2}''.</entry>
<entry key="SubmodelConfigInConflict">Submodel configuration ''{0}'' for submodel ''{1}'' is in conflict with value ''{2}'' in configuration ''{3}'' used by model ''{4}''.</entry>
<entry key="ConfigInConflictWithPreviousValidation">Cannot validate model ''{0}'' using variant configuration ''{1}'' as it has already been validated for configuration ''{2}'' earlier in the hierarchy.</entry>
<entry key="ConfigInConflictWithPreviousSelection">Cannot validate model ''{0}'' using variant configuration ''{1}'' as it conflicts with submodel configuration selection ''{2}'' in model ''{3}'' earlier in the hierarchy.</entry>
<entry key="FailedConstraint">Constraint ''{0}'' failed.{1}</entry>
<entry key="ConfigDataNotFound">Variant configuration object ''{0}'' not found.</entry>
<entry key="VCDONotFound">Model ''{0}'' does not have any Variant Configuration Data attached</entry>
<entry key="ConfigDataNotFoundForConfig">Unable to find variant configuration object ''{0}'' containing configuration ''{1}'' that is associated with ''{2}''.</entry>
<entry key="EmptyConfigurationName">Name of variant configuration cannot be empty.</entry>
<entry key="SkippingValidation">Skipping further validation of the variant configuration ''{0}''.</entry>
<entry key="ErrorInEvalOfBeginningOfVarControl">You cannot specify the variant control for the block ''{0}'' to be ignored. Remove the "%" in front of the "Variant control" block parameter value of ''{1}'' to specify the variant condition.</entry>
<entry key="ErrorInEvalOfVarControl">Variant control ''{0}'' used by block ''{1}'' must return a logical value.</entry>
<entry key="InvalidModelName">Argument must be name of a model.</entry>
<entry key="InvalidModelNameOrHandle">Argument must be name or handle of a model.</entry>
<entry key="InvalidElement">Invalid element at index ''{0}''.</entry>
<entry key="InvalidArgument">Invalid input for argument {0,number,integer}.</entry>
<entry key="InvalidVectorOfConfigs">Invalid vector of variant configurations.</entry>
<entry key="VariantConfigMustBeUnique">Variant configurations must have unique names.</entry>
<entry key="InvalidVectorOfConstraints">Invalid vector of constraints.</entry>
<entry key="ConstraintsMustBeUnique">Constraints must have unique names.</entry>
<entry key="InvalidVectorOfSubModelConfigs">Invalid vector of submodel configurations.</entry>
<entry key="InvalidVectorOfControlVars">Invalid vector of control variables.</entry>
<entry key="NonUniqueFieldValues">Values of the field ''{0}'' are not unique.</entry>
<entry key="ArgNotVectorOfStructs">Argument must be vector of structures.</entry>
<entry key="RequiredFieldsNotFound">Required field(s) not found in vector of structures.</entry>
<entry key="InvalidFieldValues">Invalid value(s) of field ''{0}''.</entry>
<entry key="InvalidControlVarValue">Invalid value of a control variable.</entry>
<entry key="InvalidVariantControlExprValue"><![CDATA[Invalid variable ''{0}'' used in Variant control expression.
    <actions exclusiveFixIts="yes">
        <action type="fixit">
            <cmd>slprivate(''variantRobustVarRefHotlink_cb'', ''loadFile'', ''{1}'', ''{0}'')</cmd>
            <txt>Load a file into base workspace.</txt>
        </action>
        <action type="fixit">
            <cmd>slprivate(''variantRobustVarRefHotlink_cb'', ''createEntry'', ''Value'', ''{0}'', ''{1}'', ''{2}'')</cmd>
            <txt>Create a new variable.</txt>
        </action>
    </actions> ]]>
</entry>
<entry key="InvalidVariantControlExprType"><![CDATA[Invalid type ''{0}'' used in Variant control expression.
    <actions exclusiveFixIts="yes">
        <action type="fixit">
            <cmd>slprivate(''variantRobustVarRefHotlink_cb'', ''loadFile'', ''{1}'', ''{0}'')</cmd>
            <txt>Load a file into base workspace.</txt>
        </action>
        <action type="fixit">
            <cmd>slprivate(''variantRobustVarRefHotlink_cb'', ''createEntry'', ''Enum'', ''{0}'', ''{1}'', ''{2}'', ''{3}'')</cmd>
            <txt>Create a new enumeration type.</txt>
        </action>
        <action type="fixit">
            <cmd>slprivate(''variantRobustVarRefHotlink_cb'', ''createEntry'', ''Struct'', ''{0}'', ''{1}'', ''{2}'', ''{3}'')</cmd>
            <txt>Create a new struct type.</txt>
        </action>
    </actions> ]]>
</entry>
<entry key="InvalidVariableName">Invalid MATLAB variable name.</entry>
<entry key="CreateNewDataDlg_EnumType">Enum Type:</entry>
<entry key="ValueNotString" note="stringDatatypeUpdate">Value is not a character vector.</entry>
<entry key="ConfigNotFound">Variant configuration ''{0}'' not found.</entry>
<entry key="ConfigNotFoundinVCDOForModel">No variant configuration ''{0}'' found in variant configuration object ''{1}'' that is associated with ''{2}''.</entry>
<entry key="AnotherConfigExists">Variant configuration with name ''{0}'' already exists.</entry>
<entry key="ControlVarNotFound">Control variable ''{0}'' not found in variant configuration ''{1}''.</entry>
<entry key="ControlVarsMustBeUnique">Control variables in a variant configuration must have unique names.</entry>
<entry key="ConstraintNotFound">Constraint ''{0}'' not found.</entry>
<entry key="AnotherConstraintExists">Another constraint with name ''{0}'' exists.</entry>
<entry key="SubModelEntriesMustBeUnique">Names of submodels in a variant configuration must be unique.</entry>
<entry key="InvalidConfigForModel">Variant configuration ''{0}'' of model ''{1}'' is not valid.</entry>
<entry key="NoEditDefaultForPassEmptyCH">Passthrough choice and Empty choice support only 'default' variant control, 'default' cannot be modified.</entry>
<!-- Note: An additional parameter({2}) is introduced in the following error message ids to facilitate same error id, irrespective of the value of 'StartupVariants' feature. This is done to avoid adding a new error id and updating all the tests capturing this error id, with feature control. Once we turn on the feature, we can replace the parameter value with the one with startup -->
<entry key="ExportFunctionInlineVariantBuildFailure">Build failed. All function-call input ports of subsystem ''{0}'' must have same variant condition. Based on the setting of the ''GeneratePreprocessorConditionals'', current variant conditions on function-call inports {1} are '{'{2}'}'.</entry>
<entry key="VarCondPropUnsupportedVSSBlockErr_fix">The block parameter 'PropagateConditions' has been enabled for the Variant Subsystem block </entry>
<entry key="VarCondParamAccessorWSVarIncompatibleConditions">Invalid use of Parameter Writer block ''{0}'' that writes to workspace variable ''{1}'' because Parameter Writer block ''{0}'' and user blocks of workspace variable ''{1}'' have different variant conditions.</entry>
<entry key="ExpressionParseError">Operation not supported. Parsing of expression failed.\n''{0}''\n{1}</entry>
<entry key="VarSrc" translate="false" note="TranslateFalseBatch;">Source</entry>
<entry key="VarSink" translate="false" note="TranslateFalseBatch;">Sink</entry>
<entry key="VarStart" translate="false" note="TranslateFalseBatch;">Start</entry>
<entry key="VarSrcEndPort">input</entry>
<entry key="VarSinkStartPort">output</entry>
<entry key="ModelFileNotFound">Unable to find model file ''{0}''. Check if the file is on the MATLAB path.</entry>
<entry key="InlineVariantSimEventBlockNotSupportedForCC">SimEvents blocks and Stateflow charts with messages are not supported when block ''{0}'' has a propagated variant condition and is present on a path that can generate preprocessor conditions because ''Variant activation time'' is set to ''code compile''. Set the ''Variant activation time'' of all the variant blocks to ''update diagram'' or if the variant activation time is set to 'inherit from Simulink.VariantControl', set the activation time of the Simulink.VariantControl objects to ''update diagram''.</entry>
<entry key="MATLABTimeStampEng" translate="false" note="TranslateFalseBatch;">% -------------------------------------------------------------------\n%  Generated by MATLAB on {0}\n%  MATLAB version: {1}\n% -------------------------------------------------------------------\n\n</entry>
<entry key="CausedBy">Caused by:</entry>
<entry key="VariantManagerProcessingVariantBlocksInModelHierarchy">Processing variant blocks in model hierarchy.</entry>
<entry key="VariantManagerProcessingVariantControlExpr">Processing variant control expressions.</entry>
<entry key="VariantManagerProcessingVariablesFromVariantCondition">Processing variables from variant condition.</entry>
<entry key="VariantManagerSLDDNotFound">Unable to find data dictionary ''{1}'' used by model ''{0}''. Fix the data source for model ''{0}'' to launch the Variant Manager.</entry>
<entry key="VariantManagerErrorWhileLaunching">Error occurred while launching Variant Manager for model ''{0}''.\n{1}</entry>
<entry key="VariantManagerSaveVCDOTmpDirFailure">Unable to write to folder ''{0}''.</entry>
<entry key="VariantManagerSaveVCDOFileNameisVCDOName">The output MATLAB script name ''{0}'' is same as the variant configuration object name ''{0}''. Select a different MATLAB script name to save the variant configuration object.</entry>
<entry key="VariantManagerSaveVCDOFileNameisReserved">The output MATLAB script name ''{0}'' is invalid as it is a reserved name. Select a different MATLAB script name to save the variant configuration object.</entry>
<entry key="VariantManagerParamNameisVCDOName">Control variable ''{0}'' of type ''{1}'' in configuration ''{2}'' has the same name as the Variant Configuration Object. Generating MATLAB script for Variant Configuration Object ''{3}'' is not supported in this scenario. Consider renaming the control variable ''{0}''.</entry>
<entry key="VariantManagerSaveVCDOUnableToValidateCorrectness">Unable to validate correctness of generated MATLAB script.</entry>
<entry key="VariantManagerSaveVCDOOutputFilePrefix">Generated {0}</entry>
<entry key="VariantManagerImportVCDOSuccess">Imported variant configuration object ''{0}'' from {1}.</entry>
<entry key="VariantManagerImportVCDOMissingDefinition">Unable to find variant configuration object ''{0}'' in {1}.</entry>
<entry key="VariantManagerImportVCDOMissingDefinitions">Unable to find variant configuration object(s) in {0}.</entry>
<entry key="VariantManagerImportVCDOSyntaxErrors">Unable to import variant configuration object(s) from {0}.\n{1}</entry>
<entry key="GetCtrlVarsUnexpectedInput">Input argument ''{0}'' is not a valid model or block path.</entry>
<entry key="InputToConvertToVariantMustBeScalar">Invalid input argument specified for Simulink.VariantUtils.convertToVariantSubsystem API. The argument must be a scalar.</entry>
<entry key="ConvertToVariantWithIRTNotSupported">Unable to convert Model block ''{0}'' to a Variant Subsystem because this Model block contains an Initialize, Reinitialize, Reset, Terminate, or Periodic event port.</entry>
<entry key="ConvertToVariantScheduledWithScheduleEditorNotSupported">Unable to convert Model block ''{0}'' to a Variant Subsystem because this Model block is scheduled with the Schedule Editor.</entry>
<entry key="ConvertToVariantWithInvalidNameNotSupported">Converting a Model block ''{0}'' with invalid Model name parameter ''{1}'' to a Variant Subsystem is not supported. Model name must be a valid MATLAB identifier.</entry>
<entry key="C2VInconsistentInterface">The model block ''{0}'' could not be converted to Variant Subsystem because it has inconsistent interface with the referred model. Save the referred model and try converting to Variant Subsystem again.</entry>
<entry key="InvalidModelNameForVariantLegend"> First argument for the method variantLegend must be a non-empty character array or string</entry>
<entry key="InvalidActionForVariantLegend"> Second argument for the method variantLegend must either be 'open','print','showCodeConditions' or 'close'</entry>
<entry key="ModelNotLoadedForVariantLegend"> Model ''{0}'' is not loaded</entry>
<entry key="InvalidNumberOfInputs"> Invalid number of input arguments specified</entry>
<entry key="LegendNotOpen">Open Variant Condition legend before invoking action ''{0}''</entry>
<entry key="InvalidValuePairForVariantLegend"> Input for the 'value' argument in method variantLegend must either be 'on' or 'off'</entry>
<entry key="ConvertToVariantForModelBlockWithNoReferredModelNotSupported">The model ''{0}'' referenced by Model block ''{1}'' is not found. Converting this Model block to a Variant Subsystem is not supported.</entry>
<entry key="ConvertToVariantForImplicitLibraryNotAllowed">Converting block ''{0}'' with implicit library link to a Variant Subsystem is not supported.</entry>
<entry key="ConvertToVariantForLibraryModelVarNotAllowed">Converting Model Variants block ''{0}'' with a library link to a Variant Subsystem is not supported.</entry>
<entry key="OutputWhenUnconnected_fix">The command
'set_param(''{0}'','OutputWhenUnconnected','off')' is executed for the output port block.</entry>
<entry key="ConstBlockDoesNotSupportVirtualBus">Virtual bus is not supported when Variant Subsystem block ''{0}'' has an Outport block with "Specify output when source is unconnected" enabled. To fix this error, make all inputs to ''{1}'' as non-virtual.</entry>
<entry key="SubsystemToVariantConvertFail">Block ''{0}'' has control ports. Converting Subsystem or Model block with control ports to a Variant Subsystem is not supported.</entry>
<entry key="SubsystemToVSSConvertFail">Converting Subsystem or Model block with only data, enable, trigger and reset ports to a Variant Subsystem is allowed.</entry>
<entry key="ReferredModelHasControlPorts">The Variant choice ''{0}'' referred by block ''{1}'' has control ports. Converting Subsystem or Model block with control ports to a Variant Subsystem is not supported.</entry>
<entry key="ConvertingLockedLibraryBlockToVSSFail">Unable to convert block ''{0}'' to Variant Subsystem because this block is in a locked library. Unlock this library and try again.</entry>
<entry key="VariantControlChangedWithoutStartupAndFastRestartEnabled">Changing the active variant of Variant Block ''{0}'' after the model is compiled and the ''Variant activation time'' is set to a value other than ''startup'' is not supported.</entry>
<entry key="VSSContChoicesDiffName">Control port block names of choices in Variant Subsystems must be the same. Variant Subsystem ''{0}'' has conflicting control port blocks with name ''{1}'' in choice ''{2}'' and ''{3}'' in choice ''{4}''.</entry>
<entry key="VariantParamOnMdlBlockErr">Setting 'Variant' parameter for Model block ''{0}'' is not supported. Please use Variant Subsystem blocks with a set of Model block as choices to achieve the same functionality.</entry>
<entry key="SemanticErrorInConditionExpression">Invalid variant control expression ''{1}'' found in block ''{0}''.</entry>
<entry key="SemanticErrorInConditionExpressionNoBlock">Invalid variant control expression ''{0}''. </entry>
<entry key="SimCodegenKeywordInVariantObjectNotAllowed">Simulink.VariantExpression object condition ''{0}'' contains (sim) or (codegen) variant keyword which is not allowed.</entry>
<entry key="DefaultKeywordInVariantObjectNotAllowed">Simulink.VariantExpression object condition ''{0}'' contains (default) variant keyword which is not allowed.</entry>
<entry key="GeneratingReport">Generating detailed summary</entry>
<entry key="VariantManagerClashingVariables"> Clashes detected for variable(s) ''{0}'' with other variables in the variant control table. Modify the variables in the variant control table to resolve the clashes.</entry>
<entry key="VATypeTooltip">Specify variant activation time for the variant block. Variant activation time could either be update diagram, update diagram analyze all choices, code compile, startup or inherit from Simulink.VariantControl.</entry>
<entry key="Exp_UpdateDiagram_desc">The active choice is determined by the variant control expression that evaluates to true. For example, V==EngineType.Small or V==1. The active choice is chosen before propagation of signal attributes. No attributes are propagated to the inactive choices and the inactive choices are removed prior to propagation of signal attributes.</entry>
<entry key="Exp_UpdateDiagramAAC_desc">The active choice is determined by the variant control expression that evaluates to true. For example, V==EngineType.Small or V==1. The active choice is chosen after propagation of signal attributes. Signal attributes are propagated to the active and inactive choices to ensure that the choices have the same attributes. Inactive choices are removed at end of update diagram.</entry>
<entry key="Exp_CodeCompileTime_desc">The active choice is determined by the variant control expression that evaluates to true. For example, V==EngineType.Small or V==1. All choices are analyzed and must have the same signal attributes. For simulation, the inactive choices are removed at the end of update diagram before model start occurs. For Embedded Coder,  the C code contains #if statements and thus the inactive choices are removed when building the generated code.</entry>
<entry key="Exp_startup_desc"><![CDATA[The active choice is determined by the variant control expression that evaluates to true. For example, V==1. All choices are analyzed and available at model start. For simulation, the active choice can be changed when the model is initialized with 'Fast Restart' enabled. For code generation, the C code contains regular if statements.]]></entry>
<entry key="Exp_runtime_desc"><![CDATA[The active choice is determined by the variant control expression that evaluates to true. For example, V==1. All choices are analyzed and available at model start. The active choice can be changed during simulation or execution of generated code by using a Parameter Writer block. For code generation, the C code contains regular if statements.]]></entry>
<entry key="Exp_inherit_desc">Active choice and the variant activation time for the block is determined by the 'Value' and 'ActivationTime' fields respectively of the Simulink.VariantControl objects present in the variant control expressions.</entry>
<entry key="simcodegen_UpdateDiagram_desc"><![CDATA[There must be two choices, <b>"(sim)"</b> and <b>"(codegen)"</b>. The active choice,<b> "(sim)" </b>when simulating or <b>"(codegen)"</b> when generating code, is chosen before propagation of signal attributes. No attributes are propagated to the inactive choices and the inactive choices are removed prior to propagation of signal attributes.]]></entry>
<entry key="simcodegen_UpdateDiagramAAC_desc"><![CDATA[There must be two choices,<b> "(sim)"</b> and <b>"(codegen)"</b>. The active choice, <b>"(sim)"</b> when simulating or <b>"(codegen)"</b> when generating code, is chosen after propagation of signal attributes. Signal attributes are propagated to the active and inactive choices to ensure that the choices have the same attributes (all choices are analyzed).]]></entry>
<entry key="Label_desc">The variant control is a string and the specified active choice is processed before propagation of signal attributes. No attributes are propagated to the inactive choices and the inactive choices are removed prior to propagation of signal attributes.</entry>
<entry key="ConnectorBlk_VariantExpr_desc">An active choice is determined by a variant control expression that evaluates to true. For example, V==EngineType.Small or V==1.</entry>
<entry key="MRVTestHarnessMoveWarn">Test harnesses associated with block ''{0}'' has been deleted and is associated with its choice blocks.</entry>
<entry key="VCTypeTooltip">Specify variant control mode for the variant block. Variant control mode could either be expression, label or sim codegen switching.</entry>
<entry key="LabelComboBox">Label mode active choice:</entry>
<entry key="LabelComboBoxToolTip">Use the specified variant instead of selecting the active variant from the variant control</entry>
<entry key="LabelMode_VariantControlColumnName">Variant control label</entry>
<entry key="ExpressionMode_VariantControlColumnName">Variant control expression</entry>
<entry key="SimCodegenMode_VariantControlColumnName">Variant control switch</entry>
<entry key="VariantWithICProp">Outport block ''{0}'' is connected via ''{1}'' variant blocks and inherits Initial Condition from its sources. Set the Initial Condition explicitly when connected through ''{1}'' variant blocks.</entry>
<entry key="StartupVariantWithICProp">Outport block ''{0}'' is connected to startup variant blocks and is inheriting Initial Condition from its sources. Set the Initial Condition of the block ''{0}'' explicitly when connected through startup variant blocks.</entry>
<entry key="InvalidVSSMdlChoicesMergedRates">The Output port {0,number,integer} of Variant Subsystem choice ''{1}'' is driven by multiple functions. Model blocks whose outports are driven by multiple functions cannot be used as Variant Subsystem choices.</entry>
<entry key="InvalidVSSMdlChoicesOuts">The Variant Subsystem ''{0}'' choices driving Outport block ''{1}'' of Variant Subsystem have different function-call initiators. Variant Subsystems with the option "Analyze all choices during update diagram and generate preprocessor conditionals" selected and driven by multiple function-calls driving same Outport block are not supported.</entry>
<!--Variant Subsystem block 'A/B' is in Export Function model and has Inport block 'A/B/In1' which is not used in choice block 'A/B/C'. Delete the Inport block 'A/B/In1' if it is not used in any of the choices to fix this error.-->
<entry key="UAEmptyVarObjCheckTitle">Identify variant blocks using variantexpression objects with empty conditions</entry>
<entry key="UAEmptyVarObjCheckTitleTips">Analyze the model to identify variant blocks using variantexpression objects with empty conditions</entry>
<entry key="UAEmptyVarObjCheckName">Identify variant blocks using variantexpression objects with empty conditions</entry>
<entry key="UAEmptyVarObjCheckDescription">Check if the variant blocks in the model have variantexpression objects with non-empty conditions</entry>
<entry key="UAEmptyVarObjPassMessage">None of the variant blocks in the model or library have variantexpression objects with empty conditions</entry>
<entry key="UAEmptyVarObjFailMessage">These blocks in the model or library have variantexpression objects with empty conditions</entry>
<entry key="UAEmptyVarObjRecommendedAction">Please use valid conditions in the variantexpression objects. For example, simVar = Simulink.VariantExpression(''a==1''), where simVar is a Simulink VariantExpression object</entry>
<entry key="UAEmptyVarObjTableTitle">VariantExpression Object to block usage</entry>
<entry key="UAEmptyVarObjTableColumnOneHeading">VariantExpression Object</entry>
<entry key="UAEmptyVarObjTableColumnTwoHeading">Block Name</entry>
<!-- Variant Connector block -->
<entry key= "ConnectorBlkTypeTooltip">Specify connector block type. Variant connector type could either be leaf, primary or nonprimary.</entry>
<entry key= "ConnectorBlkTagTooltip"> Associate primary and nonprimary block(s) with specified tag. </entry>
<entry key= "ConnectorBlkInvalidVC" note="stringDatatypeUpdate">The variant control specified for {0} block ''{1}'' is invalid.</entry>
<entry key= "ConnectorType"> Connector type</entry>
<entry key= "PRIMARY_CONNECTOR_TYPE_CB"> Primary</entry>
<entry key= "NONPRIMARY_CONNECTOR_TYPE_CB"> Nonprimary</entry>
<entry key= "LEAF_CONNECTOR_TYPE_CB"> Leaf</entry>
<entry key= "ConnectorTag"> Connector tag</entry>
<entry key= "VariantPort">condition </entry>
<entry key= "VarConnector" translate="false" note="TranslateFalseBatch;">Variant Connector</entry>
<entry key= "AssociatedRegionIsCrossConnected"> Incorrect modeling pattern found. Bounded region formed by primary {0} ''{1}'' is unbounded.</entry>
<entry key= "NotAssociatedNonPrimaryBlk"> Nonprimary {0} ''{1}'' is not associated with any primary Variant Connector block. Add primary Variant Connector block with same connector tag in model hierarchy ''{2}'' to make it a valid bounded region. </entry>
<entry key= "NotAssociatedNonPrimaryBlkButHasPrimaryBlk"> Incorrect modeling pattern found. Nonprimary {0} ''{1}'' is not part of any bounded region. The condition port of nonprimary ''{1}'' block is not connected with condition port of primary ''{2}'' block. </entry>
<entry key= "AssociationBetNonConditionedPort"> Incorrect modeling pattern found. The condition port of nonprimary {0} ''{1}'' is not connected with condition port of primary ''{2}'' block. Connect the condition ports of primary and nonprimary blocks to make it a valid bounded region.</entry>
<entry key= "VariantControlCouldNotBeSetOnNonPrimaryBlk"> Incorrect to set variant control on nonprimary {0} ''{1}''. Nonprimary block inherits variant control from associated primary block during model compile. </entry>
<entry key= "NotUniqueAssociatedRegionConnectorTag"> Bounded regions formed by primary {0} ''{1}'' and primary {2} ''{3}'' have same connector tag '{'{4}'}' in model hierarchy ''{5}''. Connector tag used by primary and non-primary blocks forming a bounded region must be unique in a model hierarchy.</entry>
<entry key= "OverlappingAssociatedRegion">  Incorrect modeling pattern found. Bounded region formed by primary {0} ''{1}'' block is overlapping with bounded region formed by {2} {3} ''{4}'' block. </entry>
<entry key= "StandaloneBlkInAssociatedRegion"> Incorrect modeling pattern found. Leaf {0} ''{1}'' block is inside bounded region formed by primary {2} ''{3}'' block.</entry>
<entry key= "FlexibleVSSInAssociatedRegion"> Incorrect modeling pattern found. Variant Subsystem ''{0}'' block with flexible I/O is inside bounded region formed by primary {1} ''{2}'' block.</entry>
<entry key= "PrimaryDoesNotHaveAssociatedNonPrimary"> Primary {0} ''{1}'' block is not associated with any nonprimary Variant Connector block. Add nonprimary Variant Connector block with same connector tag in model hierarchy ''{2}'' to make it a valid bounded region.</entry>
<entry key= "ConnectorBlkInLoop">Block diagram ''{0}'' contains leaf {1} ''{2}'' block in loop. Only primary and nonprimary Variant Connector blocks are allowed within a model loop. </entry>
<entry key= "ConnectorBlkMismatchVariantControls">Number of {0} ports in {1} block ''{2}'' does not match the number of elements defined in variant controls.</entry>
<entry key= "ConnectorBlkWithBusLine"> Connecting Variant Connector block ''{0}'' to Simscape bus lines is not supported. Connect the block to connection lines.</entry>
<entry key= "constrainBoundedRegionInOneHierarchy"> Incorrect modeling pattern found. All blocks in the bounded region formed by primary {0} ''{1}'' must be in same model hierarchy.</entry>
<entry key= "ParallelAssociatedRegion">  Incorrect modeling pattern found. The variant condition on all blocks within the bounded regions is not the same because the bounded regions formed by primary {0} ''{1}'' and primary {2} ''{3}'' contain each other. </entry>
<entry key= "BadNegation"> Internal error in variant condition handling</entry>
<entry key= "VSSLabelRemovedOrUpdated"> Active choice of the Variant Subsystem block ''{0}'' has been deleted or the label has been updated. Select another active choice. </entry>
<entry key= "IVLabelRemovedOrUpdated"> The active port of the inline variant block ''{0}'' has been deleted or the label has been updated. Select another active port. </entry>
<entry key= "NewPortsErrorInCompilation">Input and/or output ports of the below blocks have changed compared to what was saved in the model. Compile or simulate the model again. Also, save this model to ensure that on the next load it does not throw this error during compilation.</entry>
<entry key= "InputPortChangeErrorInCompilation">Input ports of ''{0}'' are changed.</entry>
<entry key= "OutputPortChangeErrorInCompilation">Output ports of ''{0}'' are changed.</entry>
<entry key= "ConditionsFromDiffWks">Variant condition {0} on the block ''{1}'' either contains
variables originating from different workspaces, including the Simulink.SimulationInput workspaces or it contains variables from mask or model workspace
used inside a user defined or a built-in MATLAB function.This is not a supported workflow.</entry>
<entry key= "MultipleConditionsFromDiffWks">Variant control variables of the block ''{0}'' must
be defined in the same workspace.</entry>
<entry key= "ConditionsNotInGlobalWithPropagate">Variant condition on block ''{0}'' originates from either mask or model workspace and has 'Propagate conditions outside of Variant Subsystem' set to 'on'. Variant conditions originating from mask or model workspace is not supported.</entry>
<entry key= "MaskWksUsedForVariantsNotInSupportedVAT">Variant conditions on the block ''{0}'' originates from mask workspace or the model workspace. Blocks that have 'Variant activation time' set to 'code compile' is not supported.</entry>
<entry key= "SSRefDDUsedForVariantsNotInSupportedVAT">'Variant activation time' set as 'code compile' is not supported for block ''{0}'' because its variant conditions originate from a subsystem reference data dictionary.</entry>
<entry key= "ModelArgUsedAsVariantControl">Variant control variable ''{0}'' on the block ''{1}'' originates from a model argument ''{2}'' in the model workspace. Model arguments can be used to change the active variants only when 'Variant activation time' is set to 'startup' or 'runtime'.</entry>
<entry key= "LooserVariantConditionOfSignalSourceThanDestinationWarn">
  <![CDATA[
           Block ''{0}'' with propagated variant condition {1} has a looser condition than block ''{2}'' with propagated variant condition {3}. To fix this issue, modify the model so that the source and destination blocks have the same propagated variant condition.
           <actions exclusiveFixIts="no">
           <action type="suppression"> </action>
           </actions>
  ]]>
</entry>
<entry key= "LooserVariantConditionOfSignalSourceThanDestinationErr">Block ''{0}'' with propagated variant condition {1} has a looser condition than block ''{2}'' with propagated variant condition {3}. To fix this issue, modify the model so that the source and destination blocks have the same propagated variant condition.
</entry>
<entry key= "UnconditionalSignalSourceUsedWithVariantConditionWarn">
  <![CDATA[
           Unconditional block ''{0}'' consumed by block ''{1}'' with  propagated variant condition {2}. To fix this issue, modify the model so that the source and destination blocks have the same propagated variant condition.
           <actions exclusiveFixIts="no">
           <action type="suppression"> </action>
           </actions>
  ]]>
</entry>
<entry key= "UnconditionalSignalSourceUsedWithVariantConditionErr"> Unconditional block ''{0}'' consumed by block ''{1}'' with  propagated variant condition {2}. To fix this issue, modify the model so that the source and destination blocks have the same propagated variant condition.
</entry>
<entry key= "VarLenLimitFromNonGlobalWks">Length of variant control variable {0} on block ''{1}'' must be less than 40 because the variable is defined in mask or model workspace.</entry>
<entry key= "ConditionPropagatingOutsideScopeofMaskWks">Propagating variant condition {0} outside the scope of its mask workspace is not supported because the condition originates from the mask workspace of block ''{1}'' </entry>
<entry key= "ConditionPropagatingOutsideScopeofModelWks">Propagating variant condition {0} outside the scope of its model workspace is not supported because the condition originates from the model workspace of block ''{1}''.</entry>
<entry key= "ConditionOnDSMIsFromMaskNotInHier">Propagating variant condition {0} outside the scope of its mask workspace is not supported on block ''{1}'' because the condition originates from the mask workspace of block ''{2}''.</entry>
<entry key= "ConditionPropagatingOutsideScopeofSSRef">The variant condition {0} originates from Subsystem reference data dictionary. Propagating this condition outside the scope of the Subsystem reference "{1}" is not supported.</entry>
<entry key= "DSMConditionsMismatchWithDSRorDSWBlock">The combination of the computed code generation variant control expression for the Data Store Memory block and Data Store Read or Data Store Write block ''{0}'' is not supported for code generation as the computed code generation variant control expression for the Data Store Memory block is always false. </entry>
<entry key= "InactiveRefDSMBlk"> Unable to propagate variant condition through model reference hierarchy because the variant condition of Reference Data Store Memory block "{0}" always evaluates to false.</entry>
<entry key= "RefDSMBlkInsideStateChart"> Propagating variant conditions from Reference Data Store Memory block "{0}" to the containing Stateflow block "{1}" is not supported.</entry>
<entry key= "ConditionFromMaskorModelOnSimFcn">Propagating variant condition "{0}" on block  "{1}" is not supported because the condition variable is defined in the mask or model workspace.</entry>
<entry key= "InheritedConditionFromMaskorModelOnSimFcn">Variant Condition Expression set to '(inherit)' on the block "{0}" do not support Variant Condition inheriting from mask or model workspace.</entry>
<entry key="MixOfCCandRTVAT">Propagated variant condition to block ''{0}'' contains both ''code compile'' and ''runtime'' variant activation time.</entry>
<entry key="MixOfSTandRTVAT">Propagated variant condition to block ''{0}'' contains both ''startup'' and ''runtime'' variant activation time.</entry>
<entry key="SameVCVInRTAndOtherVarBlks">Variant control variable ''{0}'' used in the Variant Block ''{1}'' with ''Variant activation time'' set to ''runtime'' is also used in another Variant Block ''{2}'' which is not configured with ''runtime'' variant activation time. Modify the variant control variable in either ''{1}'' or ''{2}'' or set the same variant activation time in both the blocks. Ensure variant control variable ''{0}'' originate from the same workspace.</entry>
<entry key="ConfigurableSubsystemWarning">
  <![CDATA[This model contains one or more Configurable Subsystem blocks which must be converted to a
           Variant Subsystem. Variant Subsystems provide more functionality. Support for Configurable
           Subsystem will be removed in a future release.\n
<actions exclusiveFixIts="yes">
<action type="suggestion">
<cmd>upgradeadvisor(''{0}'')</cmd>
<txt>Run upgrade advisor to convert Configurable Subsystems to Variant Subsystems.</txt>
</action>
</actions>
  ]]>
</entry>
<entry key="ConfigurableSubsystemError">
  <![CDATA[Configurable Subsystem block ''{0}'' must be converted to a Variant
           Subsystem. Variant Subsystems provide more functionality. Support for Configurable
           Subsystem will be removed in a future release. To convert this error to a warning,
           use: set_param(''{1}'','ConfigurableSubsystemUsage','warning').
<actions exclusiveFixIts="yes">
<action type="suggestion">
<cmd>upgradeadvisor(''{1}'')</cmd>
<txt>Run upgrade advisor to convert Configurable Subsystems to Variant Subsystems.</txt>
</action>
</actions>
  ]]>
</entry>

<entry key="CSSdeprecationError">
  <![CDATA[Configurable Subsystem block ''{0}'' must be converted to a Variant
           Subsystem. Variant Subsystems provide more functionality. Support for Configurable
           Subsystem has been removed.
           <actions exclusiveFixIts="yes">
           <action type="suggestion">
           <cmd>upgradeadvisor(''{1}'')</cmd>
           <txt>Run upgrade advisor to convert Configurable Subsystems to Variant Subsystems.</txt>
           </action>
           </actions>
  ]]>
</entry>
<entry key="InvalidCSSDiagnosticType">Invalid input arguments for ConfigurableSubsystemUsage. Input parameter ''{0}'' is not a valid diagnostic type.</entry>
<!-- VAS related diagnostic messages start -->
<entry key="InvalidBlockModToVAS">Variant Subsystem block ''{0}'' in variant assembly mode supports only addition or deletion of input ports, output ports, connection ports or control ports.</entry>
<entry key="VASChoiceInvalidSetParam">Changing parameter ''{0}'' of the block ''{1}'' which is a choice block of a Variant Subsystem in variant assembly mode is not supported.</entry>
<entry key="VASChoiceAndPortSameName"><![CDATA[These filenames returned by the choice selection matches one of the port names of the Variant Assembly Subsystem block: {0}
<actions exclusiveFixIts="yes">
    <action type="suggestion">
        <txt>Either rename the port block or use different filename as a choice</txt>
    </action>
</actions>
]]>
</entry>
<entry key="ChangeVASChoicesAfterCompile">Changing the choices of Variant Assembly Subsystem block ''{0}'' is not supported when the model is initialized with Fast Restart or the model is simulating.</entry>
<!-- Label Mode related diagnostic messages start -->
<entry key="VASErrorInVarSelEval">Unable to validate the variant choices specifier expression ''{0}'' of Variant Assembly Subsystem block ''{1}''.</entry>
<entry key="VASFilesMustBeInPath">The following files matched by file name pattern(s) specified in 'Variant choices specifier' must be on MATLAB path: {0}.</entry>
<entry key="VASChoicesMustHaveUniqueFileNames">Following files matched by file name pattern(s) specified in 'Variant choices specifier' appear in multiple folders: {0}.</entry>
<entry key="EmptyVarChocSpec">Variant choices specifier value must be non-empty. Use the expression '''{}'' to remove all the choices from the Variant Subsystem block.</entry>
<entry key="VASShadowedfile">File ''{0}'' is shadowed by a file with the same name on path ''{1}''.</entry>
<!-- Label Mode related diagnostic messages end -->
<!-- Expression Mode related diagnostic messages start -->
<entry key="VASUnableToValidateEnum">Validation of ''Variant choices enumeration'' value ''{0}'' in Variant Assembly Subsystem block ''{1}'' failed.</entry>
<entry key="VASEnumMemberNotModelSubsys">These enumeration members are not model filenames or subsystem filenames on MATLAB path: {0}.</entry>
<entry key="VASInvalidEnumName">Invalid enumeration class ''{0}''. Enumeration class name must start with a letter and can contain letters, numbers, and underscores.</entry>
<entry key="VASUndefEnumName">Enumeration class ''{0}'' is undefined.</entry>
<entry key="VASInvalidVCVName">Invalid variant control variable ''{1}'' in Variant Assembly Subsystem block ''{0}''. Variant control variable must be a valid MATLAB variable or a valid MATLAB structure.</entry>
<!-- Expression Mode related diagnostic messages end -->
<!-- System Composer related diagnostic messages start -->
<entry key="VACOnlyInterfacesAllowedToAdd">Variant Component ''{0}'' is in variant assembly mode which only allows addition or removal of inports, outports and physical connection ports in the component canvas.</entry>
<entry key="LinkToNodeNotSuppForVACChoice">Linking component to a model is not supported when it is a choice of a Variant Assembly Component.</entry>
<entry key="InlineCompForVACChoice">Inlining a component is not supported when it is a choice of a Variant Assembly Component.</entry>
<!-- System Composer related diagnostic messages end -->
<!-- VAS related diagnostic messages end -->
<!-- VSS to VAS conversion related diagnostic messages start -->
<entry key="UnableToConvert">Unable to convert Variant Subsystem block ''{0}'' to Variant Assembly Subsystem.</entry>
<entry key="VSSBlkLinkedToLib">Variant Subsystem block is linked to a library.</entry>
<entry key="VSSInsideLockedLib">Variant Subsystem block belongs to a locked (read only) library.</entry>
<entry key="VCMMustBeLabel">To convert Variant Subsystem block ''{0}'' to Variant Assembly Subsystem block, set ''Variant control mode'' to ''label''.</entry>
<entry key="VCMMustBeLabelOrExpression">To convert Variant Subsystem block ''{0}'' to Variant Assembly Subsystem block, set ''Variant control mode'' to ''label'' or ''expression''.</entry>
<entry key="CannotConvertSSToSSRef">Unable to convert the following list of Subsystem choice blocks to a Subsystem Reference block: {0}.</entry>
<entry key="MultiChoiceLinkedToSameFile">Multiple {0} choice blocks as listed below are linked to the same filename ''{1}'': {2}.</entry>
<entry key="ModelWithSubsysBlkNameLoaded">Unable to convert subsystem choice block ''{0}'' to a Subsystem Reference block with filename ''{1}'' as there exists a loaded model/subsystem file in MATLAB path with the same name in ''{2}''. Modify the block name of the choice block ''{0}'' to a different name.</entry>
<entry key="InvalidFirstArg">Argument must be a Variant Subsystem block path specified as a character vector, a string scalar, or a Variant Subsystem block handle specified as a numeric scalar.</entry>
<entry key="SSWithSameModifiedName">Subsystem file names generated from subsystem choices ''{1}'' must be unique. Change names of the subsystem choices so that the file generated from only one subsystem choice has the name ''{0}''.</entry>
<entry key="UnappliedChanges">Variant Subsystem block has unapplied changes. Click Apply to proceed with conversion.</entry>
<entry key="FolderPathUnused">Value ''{0}'' for parameter ''SubsystemFilesFolderPath'' in Simulink.VariantUtils.convertToVariantAssemblySubsystem is unused because Variant Subsystem block ''{1}'' does not contain any Subsystem blocks.</entry>
<entry key="FolderPathReq">Relative or absolute folder path of new subsystem files must be specified in parameter ''SubsystemFilesFolderPath'' because Variant Subsystem block ''{0}'' has at least one Subsystem choice.</entry>
<!-- Label Mode related diagnostic messages start -->
<entry key="PropValUnusedForLabel">Value ''{0}'' for parameter ''{1}'' in Simulink.VariantUtils.convertToVariantAssemblySubsystem is unused because ''Variant control mode'' of Variant Subsystem block ''{2}'' is set to ''label''.</entry>
<entry key="WarnDeprecatedAPI">Simulink.VariantUtils.convertToVariantAssemblySubsystem called using syntax that will be deprecated in future release. Consider specifying pairs of arguments as Name=Value using syntax: Simulink.VariantUtils.convertToVariantAssemblySubsystem(vssBlockPathOrHandle, SubsystemFilesFolderPath=subsystemFilesFolderPath).</entry>
<entry key="WarnVariantManagerDeprecatedAPI">Simulink.VariantManager.{0} will be removed in a future release. Use Simulink.VariantUtils.{1} instead.</entry>
<entry key="MixPVPairWithPos">When two positional inputs are used, no additional name-value arguments are supported. This syntax will be deprecated in future release. Use only one positional input as the block path or handle and additional name-value pair inputs.</entry>
<!-- Label Mode related diagnostic messages end -->
<!-- Expression Mode related diagnostic messages start -->
<entry key="PropValReqForExp">When ''Variant control mode'' of Variant Subsystem block ''{1}'' is set to ''expression'', a value for parameter ''{0}'' must be specified.</entry>
<entry key="InvalidVCVNameValue">Value must be a valid variable name, or a valid structure field name.</entry>
<entry key="InvalidEnumFilePathValue">Value must be a relative or an absolute path to a MATLAB file to be created.</entry>
<entry key="InvalidVCVNameDialog">Variant control variable value must be a valid variable name or a valid structure field name.</entry>
<entry key="InvalidEnumClassNameDialog">Enumeration class name must be valid MATLAB class name.</entry>
<entry key="EnumClassExistsInMemory">Enumeration class ''{0}'' defined by Simulink.defineIntEnumType already exists. Specify a different name for the enumeration class or delete ''{0}'' from memory.</entry>
<entry key="UnableToWriteEnumFile">Unable to write to enumeration class file ''{0}''. Check write permission.</entry>
<entry key="UnableToCloseEnumFile">Unable to close enumeration class file ''{0}''.</entry>
<!-- Expression Mode related diagnostic messages end -->
<!-- System Composer related diagnostic messages start -->
<entry key="ConvertToVCNotSuppForVACChoice">Conversion to Variant Component is not supported for a choice of a Variant Assembly Component.</entry>
<entry key="NotSuppAPIForArch">To convert a Variant Component block to a Variant Assembly Component block, use systemcomposer.arch.VariantComponent.makeVariantAssembly.</entry>
<entry key="OnlyVCInArchMdlSupp">Conversion to Variant Assembly Component block is only supported for Variant Component blocks in architecture models.</entry>
<entry key="VCInVAMode">Variant Component block ''{0}'' is already operating in Variant Assembly mode.</entry>
<!-- System Composer related diagnostic messages end -->
<!-- VSS to VAS conversion related diagnostic messages end -->
<!-- Variant Start End Blocks related diagnostic messages begins -->
<entry key="MultipleVariantStartBlocksDetected">Variant Start blocks ''{0}'' and ''{1}'' have same Variant Start End Tag. Variant Start End Tag must be unique for a pair of Variant Start End blocks in a given hierarchy.</entry>
<entry key="MultipleVariantEndBlocksDetected">Variant End blocks ''{0}'' and ''{1}'' have same Variant Start End Tag. Variant Start End Tag must be unique for a pair of Variant Start End blocks in a given hierarchy.</entry>
<entry key="VariantStartBlockMissing">Variant End block ''{0}'' has no paired Variant Start block present in the current hierarchy.</entry>
<entry key="VariantEndBlockMissing">Variant Start block ''{0}'' has no paired Variant End block present in the current hierarchy.</entry>
<entry key="UnsupportedBlockPresentBetweenVariantStartAndVariantEnd">Block ''{0}'' which is in the bounded region of Variant Start Block ''{1}'' and Variant End Block ''{2}'' is not supported.</entry>
<entry key="UnsupportedBEPInportBlockPresentBetweenVariantStartAndVariantEnd"><![CDATA[Signal from Variant Start block ''{2}'' to <sldiag objui="inport" objparam="{0,number,integer}" objname="{1}">input port ''{0,number,integer}''</sldiag>  of block ''{1}'' is not supported, because the signal corresponds to a bus port in the path of a Variant Start and Variant End block. Remove the element that is present in the bounded region.]]></entry>
<entry key="UnsupportedBEPOutportBlockPresentBetweenVariantStartAndVariantEnd"><![CDATA[Signal from Variant Start block ''{2}'' to <sldiag objui="outport" objparam="{0,number,integer}" objname="{1}">output port ''{0,number,integer}''</sldiag>  of block ''{1}'' is not supported, because the signal corresponds to a bus port in the path of a Variant Start and Variant End block. Remove the element that is present in the bounded region.]]></entry>
<entry key="NotReachingVariantEnd">Unable to find a path from the output port ''{0, number, integer}'' of the block ''{1}'' to the corresponding port of Variant End Block ''{2}''.</entry>
<entry key="SignalReachingInputPortOfMainVariantStart">Signal from the output port ''{0,number,integer}'' to the input port of Variant Start Block ''{1}'' might cause the condition to escape the bounded region.</entry>
<entry key="SignalReachingWrongInputPortOfVariantEnd">Signal from the output port ''{0,number,integer}'' must not reach input port ''{1,number,integer}'' of the Variant End Block ''{2}'' as the signal might be branched.</entry>
<entry key="SignalConnectedToWrongOutputPortVariantStart">Signal from the output port ''{0,number,integer}'' must not be connected to output port ''{1,number,integer}'' of Variant Start Block ''{2}'' as the signal might be branched.</entry>
<entry key="SignalReachingOutputPortOfVariantEnd">Signal from the output port ''{0,number,integer}'' must not reach output port of Variant End Block ''{1}'' as the signal might be branched.</entry>
<entry key="VariantStartLoopDetected">Signal originating from Variant Start Block ''{0}'' reaches the same block again.</entry>
<entry key="DirectConnectionBetweenVariantStartEndMissing">Unable to find a direct connection from output port ''{0, number, integer}'' of the block ''{1}'' to the paired Variant End Block ''{2}''.</entry>
<entry key="BlocksWithConnectionPortNotSupported">Block ''{0}'' with connection ports is not supported for Variant Start and Variant End blocks.</entry>
<entry key="BoundedRegionDoesNotEncompass">Bounded Region created by the Variant Start Block ''{0}'' is not encompassed by the bounded region created by the Variant Start Block ''{1}''.</entry>
<entry key="VarFcnCallPortCannotBeDrivenByMultiRateFcnCaller">The function call input port {0,number,integer} of {1} ''{2}'' cannot be driven by a multirate function call initiator.</entry>
<entry key="InvalidVariantStartEndTag">Variant Start End Tag name specified in ''{0}'' is not a valid MATLAB identifier. Valid identifiers start with a letter, contain no spaces or special characters and are at most {1,number,integer} characters long.</entry>
<entry key="UnexpectedBlockDetected">Unexpected block ''{0}'' found in Simulink compile. Remove the
block and compile again.</entry>
<entry key="VariantStartWithMaskControl">Variant Start block ''{0}'' with variant control variable "{1}" in the mask is not supported as it will result in the variant conditions propagating outside the scope of the mask.</entry>
<entry key="ErrorWhenConditionPropagatesToBoundedRegions"> The bounded region defined by the variant start/end block ''{0}'' has conditions coming into the bounded region from other variant blocks. </entry>
<entry key="MultipleVariantStartWithSameTagWarning">Multiple Variant Start blocks with Variant Start End Tag {0} detected in current hierarchy. This will result in Variant End Block not having correct number of ports. Remove the unnecessary blocks present in the model.</entry>
<!-- Variant Start End Blocks related diagnostic messages ends -->
<entry key="inherit_no_svc_title">Variant block found without any Simulink.VariantControl objects.</entry>
<entry key="inherit_no_svc_description">These blocks have their variant activation time set to 'inherit from Simulink.VariantControl', but do not contain any Simulink.VariantControl objects.</entry>
<entry key="inherit_no_svc_action">Use Simulink.VariantControl objects as VariantControl when blocks are in inherit mode</entry>
<entry key="UnsupportedUseOfBusWithvariants">Generating HDL code for Variant Subsystem block ''{0}'' is not supported because it accepts or outputs bus signals and 'Variant activation time' is set to 'startup'.
Change 'Variant activation time' to 'update diagram'.</entry>        
<entry key="EnableSSRefDDBaseWSAccessForIRTAndSimFcnBlocks"><![CDATA[When block "{0}" is inside subsystem reference block "{1}" with attached data dictionary "{2}" and has a variant condition, "{2}" must have access to base workspace.
<actions exclusiveFixIts="yes">
<action type="fixit">
<cmd>slprivate(''variantfixes'',''SSRefDDBaseWSAccessForIRTAndSimFcnBlocks'',''{2}'')</cmd>
<txt>Enable access to the base workspace.</txt>
</action>
</actions> ]]></entry>
<entry key="EnableSSRefDDBaseWSAccessForIRTAndSimFcnBlocks_fix">Access to the base workspace is enabled.</entry>
<entry key="OutportCGVCEorSTVCEIsTighterThanSource"> The outport block ''{0}'' variant condition
''{1}'' is stricter than the source block ''{2}'' variant condition. To fix this, ensure that the
source block variant condition matches the variant condition on the outport block.</entry>
<entry key="HDLcodegenForSTFromMask"> Variant controls on the block ''{0}'' are defined in the mask or model workspace. To generate HDL code of variant blocks in startup activation time, define variant control variables in the global workspace.</entry>
<entry key="AutosarcodegenForSTFromMask"> Variant controls on the block ''{0}'' are defined in the
mask or model workspace. To generate AUTOSAR code of variant blocks in startup activation time, define variant control variables in the global workspace.</entry>
<entry key="InvalidParameterWriteToInvVAT">The Parameter writer block ''{0}'' is writing the global workspace variable ''{1}'' which is used as variant control expression in variant block ''{2}'' with ''{3}'' activation. We support this workflow only for startup activation.</entry>
<entry key="ConstantSampleTimeInAperiodicModelVM"><![CDATA[Connecting the <sldiag objui="inport" objparam="{0,number,integer}" objname="{1}">input port {0,number,integer}</sldiag> of the block ''{1}'' to a block with constant rate or leaving it unconnected is not supported.
    <actions exclusiveFixIts="yes">
    <action type="fixit">
    <cmd>slprivate(''variantfixes'',''InsertSignalConversionBlkAtInput'', {0,number,integer},''{1}'');</cmd>
    <txt>You can fix this error by inserting a Signal Conversion block at the input of the corresponding input port {0,number,integer} of the ''{1}'' block.</txt>
    </action>
    </actions> ]]></entry>
    <entry key="ConstantSampleTimeInAperiodicModelVM_fix">Signal Conversion block is inserted at input of corresponding Outport. </entry>
<entry key="RuntimeVariantChangedInSimWithoutParamW">Changing the active variant choice of the Variant block ''{0}'' with ''runtime'' activation during a simulation without a Parameter Writer Block is not supported.</entry>
<entry key="RateBasedModelInvalidPorts">Model block ''{0}'' is a choice in Variant Subsystem ''{1}'' and has the ''Schedule rates'' parameter selected and the ''Schedule rates with'' parameter set to ''Ports''. During compile Model block ''{0}'' has number of rates changed causing update in the rate ports. To avoid this error in next compile ensure that Variant Subsystem is updated for correct input ports and save the model or compile the model again.</entry>
<!-- AutomatePortSync related diagnostic messages start -->
<entry key="AutomatePortSyncAPIInSimulinkSubdomain">Simulink.VariantUtils.updateVariantSubsystemPorts is not supported for architecture models. Use systemcomposer.arch.VariantComponent.updatePortsFromChoices instead to update the ports of a variant component in a System Composer model.</entry>
<entry key="AutomatePortSyncModeRequired">The value of parameter ''Mode'' must be specified as either ''addPorts'' or ''addAndDeletePorts''.</entry>
<entry key="VSSPortSyncMsgAfterAddingPorts">The missing ports have been added. </entry>
<entry key="VSSPortSyncMsgAfterAddingAndDeletingPorts">The missing ports have been added and extra ports have been deleted. </entry>
<entry key="LabelModeNotAllowedWithOtherParameters">Converting to a Variant Subsystem in label mode using the options 'VariantActivationTime', 'VariantControl', 'EmptyChoice' is not supported.</entry>
<entry key="EmptyVariantControlExpression">Specify a variant control expression to convert to a Variant Subsystem in expression mode.</entry>
<!-- AutomatePortSync related diagnostic messages end -->
<entry key="AlwaysFalseBlockRemovedSameFCNName">Subsystem ''{0}'' and ''{1}'' have same function name ''{2}'',  but are not identical because subsystem ''{1}'' has inactive block(s) which are removed during compilation. </entry>
<entry key="DefaultChoiceAlwaysFalseVariantBlocks">Block ''{0}'' has a (default) choice that always evaluates to false. Remove the (default) choice or modify the variant control expressions to ensure it does not always evaluate to false.</entry>
<entry key="PassThroughUnsupportedVSSPorts">Variant Subsystem block ''{0}'' has connection or control ports, and 'Built-in passthrough choice' is selected. Either set 'Built-in passthrough choice' to 'off' or use data input and output ports on Variant Subsystem.</entry>
<entry key="PassThroughUnsupportedChoicePorts">Choice block ''{0}'' has connection or control ports, and Variant Subsystem ''{1}'' has 'Built-in passthrough choice' selected. Either set 'Built-in passthrough choice' to 'off' or use data input and output ports on choice.</entry>
<entry key="PassThroughAZVCExclusive">Variant Subsystem ''{0}'' does not support 'Built-in passthrough choice' and 'Built-in empty choice' set to 'on' simultaneously.</entry>
<entry key="DataPortsMissMatchInVSS">When 'Built-in passthrough choice' is set to 'on', the number of data input ports of Variant Subsystem block ''{0}'' must be the same as the number of data output ports.</entry>
<entry key="DataPortMissMatchChoiceAndVSS">When 'Built-in passthrough choice' is set to 'on', the data input and output ports of variant choice ''{0}'' must be the same as that of Variant Subsystem block ''{1}''.</entry>
</message>
</rsccat>
<!-- LocalWords:  unexported writeable rsccat xmlns xsi msgcat xsd Encap Oup Nonprimary nonprimary
     # LocalWords:  Inp Qual Cmplx FV Frm YN CStates FCall Func Structuredness slmask modelling VAS
     # LocalWords:  NObjects Mis Sto VSSGUI VSSGU Idesc VSS Configs Dirs Deps Dep helptargets if's
     # LocalWords:  CExpr MExpr showcodeconditions variantfixes azvc upgradeadvisor CCand STVAT rsim
     LocalWords:  conditionals AVariant unselected vss systemcomposer WS IRT SSRefDDBaseWSAccessForIRTAndSimFcnBlocks
     LocalWords:  variantexpression passthrough
-->
