<?xml version="1.0" encoding="UTF-8" ?>
<!-- Copyright 2019 The MathWorks, Inc. -->
<rsccat version="1.0" locale="en_US" product="Simulink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../schema/msgcat.xsd">
  <message>
    <entry key="CustomCodeParsingFailed">Custom code parsing failed with the messages: {0}</entry>
    <!-- Dialog -->
    <entry key="Title">C/C++ Code Importer</entry>
    <!-- Breadcrumbs -->
    <entry key="Topic_Welcome">Welcome</entry>
    <entry key="Topic_ConfigCode">Specify C/C++ Library</entry>
    <entry key="Topic_WhatToImport">What to import</entry>
    <entry key="Topic_Options">Options</entry>
    <entry key="Topic_Finish">Create Simulink Library</entry>

    <!-- JavaScript -->
    <entry key="status">Status</entry>
    <entry key="QuestionHelpTitle">What to consider</entry>
    <entry key="OptionHelpTitle">About the selected option</entry>
    <entry key="back">Back</entry>
    <entry key="next">Next</entry>
    <entry key="save">Save</entry>
    <entry key="finish">Finish</entry>
    <entry key="empty_selection">You have not selected any answer!</entry>
    <entry key="error">Error</entry>
    <entry key="needNumericValue">Please enter a numeric value.</entry>    
    <entry key="categoryTitle">Category</entry>
    <entry key="parameterTitle">Parameter</entry>
    <entry key="newValueTitle">New Value</entry>
    <entry key="oldValueTitle">Old Value</entry>
    
    <!-- Question: Welcome -->
    <entry key="Question_Start"><![CDATA[<p>C/C++ Code Import Wizard helps you create Simulink library from your C/C++ library. </p>The Import Wizard tool:<ul><li>Asks a few questions about your C/C++ library.</li><li>Validates your library against missing functions or variables.</li><li>Create Simulink library at the end.</li></ul><p>You may save your settings into a file and start over later. Do you want to start a new import?</p>]]></entry>
    <entry key="Option_Start_New">Start a new import</entry>
    <entry key="Option_Start_ProjectName">Project name: </entry>
    <entry key="OptionHint_Start_ProjectName">Specify a project name. </entry>
    <entry key="Option_Start_ProjectFolder">Project root folder: </entry>
    <entry key="OptionHint_Start_ProjectFolder">Specify a project folder that stores created library and other artifacts. </entry>

    <entry key="Option_Start_Existing">Load a file saved from a previous import</entry>
    <entry key="Option_Start_SelectFile">Select file:</entry>
    <entry key="OptionHint_Start_SelectFile">Select a file saved from previous import.</entry>

    <!-- Question: ConfigOutput -->
    <entry key="Question_ConfigOutput">Specify an output folder that stores created library and other artifacts.</entry>
    <entry key="QuestionHint_ConfigOutput">Specify a folder that stores the created Simulink library, optional auto-stub files, logs and project file. You can also specify the Simulink library name.</entry>
    <entry key="Option_ConfigOutput_Folder">Output folder:</entry>
    <entry key="OptionHint_ConfigOutput_Folder">Output folder is required. We will auto save the progress in LibraryName_project.m file.</entry>
    <entry key="Option_ConfigOutput_LibraryName">Simulink library name:</entry>
    <entry key="OptionHint_ConfigOutput_LibraryName">Simulink library name must be a valid identifier name.</entry>    
    
    <!-- Question: ConfigCodeLibrary -->
    <entry key="Question_ConfigCodeLibrary">Specify your C/C++ library information.</entry>
    <entry key="QuestionHint_ConfigCodeLibrary">Specify your C/C++ library information. Use ';' to separate multiple files or directories. "Project root folder" is the working directory that holds all generated files and imported library model. Recommend using relative paths to "Project root folder" to specify C code files and directories. At least a source file or an include file must be specified. If no include file is specified, an aggregated interface header file will be auto-generated after analyzing the source files.</entry>
    <entry key="Option_ConfigCodeLibrary_LibraryFolder">Library folder:</entry>
    <entry key="OptionHint_ConfigCodeLibrary_LibraryFolder">Specify the root folder of your code library.</entry>
    <entry key="Option_ManualStubFiles">Manual stub files:</entry>
    <entry key="OptionHint_ManualStubFiles">Specify the manual stub file names.</entry>
    <entry key="Option_AutoStubFile">Auto-stub file:</entry>
    <entry key="OptionHint_AutoStubFile">Specify the auto stub file name.</entry>
    <entry key="Option_ConfigCodeLibrary_ModuleName">Module name:</entry>
    <entry key="OptionHint_ConfigCodeLibrary_ModuleName">Specify your module name.</entry>
    <entry key="Option_ConfigCodeLibrary_SourceFiles">Source files:</entry>
    <entry key="OptionHint_ConfigCodeLibrary_SourceFiles">Specify source files to be imported.</entry>
    <entry key="Option_ConfigCodeLibrary_IncludeFiles">Include files:</entry>
    <entry key="OptionHint_ConfigCodeLibrary_IncludeFiles">Specify header files to be imported. If left empty, an interface header file will be auto-generated based on specified source files.</entry>
    <entry key="Option_ConfigCodeLibrary_IncludePaths">Include paths:</entry>
    <entry key="OptionHint_ConfigCodeLibrary_IncludePaths">Specify paths for include header files.</entry>
    <entry key="Option_ConfigCodeLibrary_LibraryPaths">Library paths:</entry>
    <entry key="OptionHint_ConfigCodeLibrary_LibraryPaths">Specify paths that contains libraries.</entry>
    <entry key="Option_ConfigCodeLibrary_Libraries">Libraries:</entry>
    <entry key="OptionHint_ConfigCodeLibrary_Libraries">Specify library file names.</entry>

    <!-- Question: ConfigCodeCompiler -->
    <entry key="Question_ConfigCodeCompiler">Specify your C/C++ compiler information.</entry>
    <entry key="QuestionHint_ConfigCodeCompiler">Specify your C/C++ compiler information. Use ';' to separate multiple defines or flags. "-D" is optional when specifying defines. </entry>
    <entry key="Option_ConfigCodeCompiler_Language">Language:</entry>
    <entry key="OptionHint_ConfigCodeCompiler_Language">Specify your code language.</entry>
    <entry key="Option_ConfigCodeCompiler_Defines">Defines:</entry>
    <entry key="OptionHint_ConfigCodeCompiler_Defines">Additional defines for compiler.</entry>
    <entry key="Option_ConfigCodeCompiler_CompilerFlags">Compiler flags:</entry>
    <entry key="OptionHint_ConfigCodeCompiler_CompilerFlags">Additional compiler flags.</entry>
    <entry key="Option_ConfigCodeCompiler_LinkerFlags">Linker flags:</entry>
    <entry key="OptionHint_ConfigCodeCompiler_LinkerFlags">Additional linker flags.</entry>

    <!-- Question: WhatToImportAnalyze -->
    <entry key="Question_WhatToImportAnalyze">We will parse your library to find functions and types that may be imported.</entry>
    
    <!-- Question: WhatToImportFunction -->
    <entry key="Question_WhatToImportFunction">Select functions you want to import.</entry>
    <entry key="QuestionHint_WhatToImportFunction">Select all functions or a subset of functions to be imported into Simulink library. Some functions may not be imported due to limitations.</entry>
    <entry key="Option_WhatToImportFunction_CCaller">Also import functions as C caller blocks.</entry>
    <entry key="OptionHint_WhatToImportFunction_CCaller">Function will be imported into Simulink library workspace. Check this to also import functions as C caller blocks.</entry>
    
    <!-- Question: WhatToImportType -->
    <entry key="Question_WhatToImportType">Select types you want to import.</entry>
    <entry key="QuestionHint_WhatToImportType">Select all types or a subset of types to be imported into Simulink library. Some types must be imported if they are used by imported functions.</entry>
    <entry key="Option_WhatToImportType_ImportToFile">Import types to file</entry>
    <entry key="OptionHint_WhatToImportType_ImportToFile">Select this option to import struct types into ''project_name_types.mat'' file and import enum types into MATLAB class files.</entry>
    
    <!-- Question: OptionsGlobalIO -->
    <entry key="Question_OptionsGlobalIO">Global variables are found in your library. Before creating Simulink library, we want to analyze your source files to look for functions that access global variables as interface. This analysis will take a while but it is important to create correct function interface.</entry>
    <entry key="QuestionHint_OptionsGlobalIO">Functions may read/write global variables. These access may be considered as function interface in the created Simulink library. This analysis may be necessary for your application. For more information, see "doc link".</entry>
    <entry key="Option_OptionsGlobalIO_Checkbox">Global variables as function I/O</entry>
    <entry key="OptionHint_OptionsGlobalIO_Checkbox">Unselect this when you are sure your functions don't access global variables as function interface.</entry>
        
    <!-- Question: OptionsAutoStub -->
    <entry key="Question_OptionsAutoStub">Detect missing definition of functions or variables in your library and generate auto-stub file for you. This analysis may take more time.</entry>
    <entry key="QuestionHint_OptionsAutoStub">When analyzing your library code, we may generate auto-stub file for functions which definitions are missing.</entry>
    <entry key="Option_OptionsAutoStub_Checkbox">Detect and generate auto-stub file</entry>
    <entry key="OptionHint_OptionsAutoStub_Checkbox">Auto-stub function will be created inside your output folder.</entry>
    <entry key="Option_OptionsAggregateHeader_Checkbox">Generate aggregated header file</entry>
    <entry key="OptionHint_OptionsAggregateHeader_Checkbox">Generate aggregated header file inside your output folder.</entry>

    <!-- Question: Finish -->
    <entry key="Question_Finish">You have selected to import following functions and types into Simulink.</entry>
    <!-- Question: NextStep -->
    <entry key="Question_NextStep"><![CDATA[A Simulink library is created from your C/C++ library into project root folder: {0} <p><b>Files generated:</b></p>{1}]]></entry>
    
  </message>
</rsccat>

<!-- LocalWords: -->
