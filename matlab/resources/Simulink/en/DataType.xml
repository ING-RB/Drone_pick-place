<?xml version="1.0" encoding="UTF-8" ?>
<!-- Copyright 2009-2025 The MathWorks, Inc. -->
<rsccat version="1.0" locale="en_US" product="Simulink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../../matlab/resources/schema/msgcat.xsd">
  <message>
    <entry key="AliasTypeEmissionRequiresECoderLicense">An ERT or ERT derived target is required to preserve the names of alias data types in the generated code.  Reverting to built-in types during code generation.</entry>
    <entry key="AliasTypesNotSupportedForMultiWordCodeGen">Alias data type ''{0}'' has multiword base type ''{1}''.  Code generation does not support multiword aliases; reverting to base type.</entry>
    <entry key="AliasType_BaseType_Auto">Invalid BaseType specified; BaseType may not be set to ''auto''</entry>
    <entry key="AliasType_BaseType_Bus">BaseType ''{0}'' must not be specified as a bus.</entry>
    <entry key="AliasType_BaseType_ValueType">BaseType ''{0}'' must not be specified using a Simulink.ValueType object.</entry>
    <entry key="AliasType_ErrResolvingDataType">Error resolving BaseType ''{0}''</entry>
    <entry key="AliasType_Invalid_BaseType">Invalid BaseType specified; BaseType must be a valid identifier</entry>
    <entry key="AliasType_Invalid_ResolvedDataType">BaseType ''{0}'' did not resolve to a valid data type</entry>
    <entry key="AliasType_Invalid_ResolvedDataType_Bus">BaseType ''{0}'' did not resolve to a valid data type.  Cannot specify BaseType to be a bus object</entry>
    <entry key="AliasType_Invalid_ResolvedDataType_Enum">BaseType ''{0}'' did not resolve to a valid enumerated data type</entry>
    <entry key="AliasType_Invalid_ResolvedDataType_EnumMetaClassObj">BaseType ''{0}'' is invalid because it resolves to a meta.class object that represents an enumerated data type.  To create an alias to this enumerated data type set the BaseType to ''Enum: {1}''</entry>
    <entry key="AliasType_Invalid_ResolvedDataType_Unscaled">BaseType ''{0}'' is invalid because it does not contain scaling information</entry>
    <entry key="AliasType_Invalid_ResolvedDataType_DataScope">Simulink.AliasType object ''{0}'' and its base type, ''{1}'', have inconsistent scopes. Set ''DataScope'' to ''Exported'' for ''{2}'', or set ''DataScope'' to ''Auto'' and ''HeaderFile'' to '''' for ''{3}''.</entry>
    <entry key="BlockDataTypeError">Datatype error reported from block ''{0}''</entry>
    <entry key="UnknownBusType">Bus type ''{0}'' is not registered with the block diagram ''{1}''.</entry>
    <entry key="Bus_Invalid_Elements">Invalid Elements specified for bus object ''{0}''; the Elements must be an empty array, or array of objects of the class Simulink.BusElement</entry>
    <entry key="Bus_Invalid_Elements2">Invalid Elements specified; the Elements must be an empty array, or array of objects of the class Simulink.BusElement</entry>
    <entry key="Bus_Invalid_Elements3">''Elements'' must be an empty array or an array of Simulink.ConnectionElement objects.</entry>
    <entry key="Bus_Invalid_Elements4">''Elements'' must be an empty array or an array of Simulink.FunctionElement objects.</entry>
    <entry key="BusElementCannotBeComplex">Element ''{0}'' of data type ''{1}'' may not be complex since it is of the bus type ''{2}''; set its ''Complexity'' to ''real''</entry>
    <entry key="BusDoesNotEvalToServiceBus">Client server port ''{2}'' expects Simulink.ServiceBus object, but data type ''{0}'' resolves to a Simulink.Bus for parameter ''{1}''</entry>
    <entry key="BusElementCannotBeNonScalar">Element ''{0}'' of data type ''{1}'' must be scalar since it is of the bus type ''{2}''; set its ''Dimensions'' to 1. Alternately, consider setting the ''Mux blocks used to create bus signals'' diagnostic in the Connectivity pane of the Configuration Parameters dialog to ''error'' to support arrays of buses.</entry>
    <entry key="BusElementCannotHaveSameNameAsType">Both the name and the data type of element ''{0}'' in the bus type ''{1}'' are same; this is not allowed when the target language is C++. Consider specifying a different name for the element or its data type.</entry>
    <entry key="BusElementCannotHaveSameNameAsTypeForSim">Both the name and the data type of element ''{0}'' in the bus type ''{1}'' are same; this is not allowed when the simulation target language is C++. Consider specifying a different name for the element or its data type.</entry>
    <entry key="BusElementMustInheritSampleTime">Element ''{0}'' of data type ''{1}'' must inherit its sample time since it is of the bus type ''{2}''; set its ''SampleTime'' to -1</entry>
    <entry key="BusElementNonInheritSampleTimeSpecified">Sample time of ''{1}'' in bus object ''{2}'' (specified as the data type for block ''{3}'') must be inherited (-1). To specify a non-inherited sample time (''{0}'') for a bus element, use the SampleTime parameter of the block that produces the signal corresponding to this element.</entry>
    <entry key="BusElementNonInheritSampleTimeSpecifiedNoBlock">Sample time of ''{1}'' in bus object ''{2}'' must be inherited (-1). To specify a non-inherited sample time (''{0}'') for a bus element, use the SampleTime parameter of the block that produces the signal corresponding to this element.</entry>
    <entry key="BusElementMustUseNonFramedSamplingMode">Element ''{0}'' of data type ''{1}'' may not specify a framed sampling mode since it is of the bus type ''{2}''; set its ''SamplingMode'' to ''Sample based''</entry>
    <entry key="BusElementMustUseNonFramedSamplingMode_Not2D">Element ''{0}'' of data type ''{1}'' may not specify a framed sampling mode since it is not 2-Dimensional; set its ''SamplingMode'' to ''Sample based''</entry>
    <entry key="InvalidInterfaceSimscapeBus">Invalid interface, ''{0}'', specified. Supported interfaces are of the format "Bus: &lt;object name&gt;" and "Inherit: auto".</entry>
    <entry key="InvalidInterfacePMIOPort">Invalid interface, ''{0}'', specified. Supported interfaces are of the format "Bus: &lt;object name&gt;", "Connection: &lt;domain name&gt;", and "Inherit: auto".</entry>
    <entry key="InvalidInterfaceSimscapeBusSupportCompositeDomain">Invalid interface, ''{0}'', specified. Supported interfaces are of the format "Bus: &lt;object name&gt;","CompositeConnection: &lt;domain name&gt;" and "Inherit: auto".</entry>
    <entry key="InvalidInterfacePMIOPortSupportCompositeDomain">Invalid interface, ''{0}'', specified. Supported interfaces are of the format "Bus: &lt;object name&gt;", "CompositeConnection: &lt;domain name&gt;", "Connection: &lt;domain name&gt;", and "Inherit: auto".</entry>
    <entry key="BusElementIncompatibleType">Invalid data type ''{2}'' specified for Simulink.BusElement object ''{0}'' in Simulink.Bus object ''{1}''. Specify a valid data type that is compatible with bus elements.</entry>
    <entry key="ConnectionElementIncompatibleType">Invalid type ''{2}'' specified for Simulink.ConnectionElement object ''{0}'' in Simulink.ConnectionBus object ''{1}''. Specify a valid Simscape domain type or a Simulink.ConnectionBus object to create hierarchical connections.</entry>
    <entry key="SignalBusObjectOnPhysmodBlock">Specifying Simulink.Bus object ''{0}'' for block ''{1}'' is not supported. Specify Simulink.ConnectionBus objects for Simscape Bus connections.</entry>
    <entry key="SimscapeBusConnectionNameErrorChild">Child port {0,number,integer} for block ''{1}'' specifies an invalid connection name, ''{2}''. Use any of the element names defined under the interface, ''{3}'', or use the "Inherit: auto" interface option to specify custom names.</entry>
    <entry key="SimscapeBusConnectionTypeErrorChild">Child port {0,number,integer} (''{1}'') for block ''{2}'' expects a ''{3}'' domain connection according to the interface, ''{4}'', but is connected to a different type. Use the same domain type to connect to this port, or "Inherit: auto" interface option to infer types from connections.</entry>
    <entry key="SimscapeBusConnectionNameErrorChildResolvedBus">Child port {0,number,integer} for block ''{1}'' specifies an invalid connection name, ''{2}''. Use any of the element names defined under the interface, ''{3}''.</entry>
    <entry key="SimscapeBusConnectionTypeErrorChildResolvedBus">Child port {0,number,integer} (''{1}'') for block ''{2}'' expects a ''{3}'' domain connection according to the interface, ''{4}'', but is connected to a different type. Use the same domain type to connect to this port.</entry>
    <entry key="SimscapeBusConnectionTypeErrorParent">Parent bus port for block ''{0}'' expects a ''{1}'' bus but is connected to a different type. Use the same bus type to connect to this port, or specify the "Inherit: auto" option to remove the interface specification.</entry>
    <entry key="FlexibleBusConnectedToSimscapeComponentError">Simscape Bus block ''{0}'' with a connection type of "Inherit: auto" is connected to a Simscape block with a specified interface. Use the same interface on the bus block to connect the two blocks.</entry>
    <entry key="PMIOPortConnectionTypeErrorBus">Connection Port block ''{0}'' expects a ''{1}'' bus connection, but is connected to a different type. Use the same bus type to connect to this port, or specify the "Inherit: auto" option to remove the interface specification.</entry>
    <entry key="PMIOPortConnectionTypeErrorSimscape">Connection Port block ''{0}'' expects a ''{1}'' Simscape domain, but is connected to a different type. Use the same domain to connect to this port, or specify the "Inherit: auto" option to remove the interface specification.</entry>
    <entry key="PMIOPortConnectionTypeErrorBusForParentSS">Subsystem block ''{0}'' expects a ''{2}'' bus connection according to the interface specified on Connection Port block ''{1}'', but is connected to a different type. Use the same bus type to connect to this port, or specify the "Inherit: auto" option to remove the interface specification.</entry>
    <entry key="PMIOPortConnectionTypeErrorSimscapeForParentSS">Subsystem block ''{0}'' expects a ''{2}'' Simscape domain according to the interface specified on Connection Port block ''{1}'', but is connected to a different type. Use the same domain to connect to this port, or specify the "Inherit: auto" option to remove the interface specification.</entry>
    <entry key="BusObjectAndElementsModeMismatch">Mode for bus element ''{1}'' does not match mode of bus object ''{0}''. Specify both element and object modes to be either 'Signal', or 'Connection'.</entry>
    <entry key="BusObjectNotInScope">Simulink.Bus object ''{0}'' is not in scope from ''{1}''</entry>
    <entry key="BusParameterMustBeZeroOrStruct">Invalid value specified for the parameter {0} of block ''{1}''. The incoming signal is a non-virtual bus with datatype ''{2}'' and the acceptable values for the parameter are zero or a finite numeric MATLAB structure. Specify zero or use Simulink.Bus.createMATLABStruct to create a MATLAB structure from the bus signal</entry>
    <entry key="BusParameterMustBeZeroOrStructVCNV">Invalid value specified for parameter {0} of block ''{1}''. The incoming signal is a virtual bus that contains an nonvirtual bus. Acceptable values for the parameter are zero or a finite numeric MATLAB structure. Specify zero or use Simulink.Bus.createMATLABStruct to create a MATLAB structure from the bus signal.</entry>
    <entry key="BusParameterMustBeStruct">The parameter {0} of block ''{1}'' must be a valid structure..</entry>
    <entry key="BusSameNameAsExistingType">Cannot register bus data type ''{0}'' because another type with this name already exists</entry>
    <entry key="CanAcceptOnlyDblAndBool">The input and output port data types of {0} must be either ''double'' or ''boolean''.  However, the input (or output) port of ''{1}'' is driven by (or driving) signal of data type ''{2}''</entry>
    <entry key="CannotDispMergedSignal"><![CDATA[The selected signal originating from <sldiag objui="outport" objparam="{0,number,integer}" objname="{1}">output port {0,number,integer}</sldiag> on ''{1}'' cannot be displayed because it is being merged]]></entry>
    <entry key="CannotInitSomeDStates">Not all discrete states in model ''{0}'' could be initialized.  This generally happens when a model contains non-double or complex discrete states.  Use ''Structure with time'' or ''Structure'' format to initialize states</entry>
    <entry key="ConstantNonBuiltinOutportDtype"><![CDATA[The sample time of <sldiag objui="outport" objparam="{0,number,integer}" objname="{1}">output port {0,number,integer}</sldiag> of block ''{1}'' is constant, yet its data type is ''{2}''; the sample time of an output port may be constant only if its data type is stored in a built-in type.  If the block has an input port, consider placing a Zero Order Hold block at the input port, to force a non-constant sample time.  Alternatively, if this block is an S-Function, consider using the option SS_OPTION_DISALLOW_CONSTANT_SAMPLE_TIME]]></entry>
    <entry key="DataTypeIsNotAnEnumType">''{0}'' attempts to access an enumerated value from data type ''{1}'' but this is not an enumerated data type</entry>
    <entry key="DataTypeObjectNotInScope">Simulink.DataType object ''{0}'' is not in scope from ''{1}''</entry>
    <entry key="DataTypeObjectNotInScopeHitCross"><![CDATA[Simulink.DataType object ''{0}'' is not in scope from ''{1}''.
    <actions exclusiveFixIts="yes">
    <action type="fixit">
    <cmd>feval(''Simulink.createHitCrossMessage'');</cmd>
    <txt>In the MATLAB Command Window, run 'Simulink.createHitCrossMessage' to create a hit crossing message bus object in the base workspace.</txt>
    </action>
    </actions>]]>
    </entry>
    <entry key="DataTypePropertiesNotSet">''{0}'' cannot get the properties of data type ''{1}'' since they have not been set</entry>
    <entry key="DataTypeSizeHasNotBeenSet">Size of data type ''{0}'' has not been set</entry>
    <entry key="DataType_InvalidHeaderFile">The data type must specify a HeaderFile property that has no delimiters (''\'' will be implied), or matching delimiters</entry>
    <entry key="DataType_ErrNonAsciiPropertyValue"> Invalid value ''{0}'' for property ''{1}'' because this property only supports ascii characters.</entry>
    <entry key="DataType_InvalidCharsInHeaderFileName">Invalid value ''{0}'' for property ''HeaderFile'' because the following characters are not supported: ''*?"&lt;&gt;|''.</entry>
    <entry key="DataType_WithIntrinsicFixptName">Invalid name ''{0}'' for data type object; you cannot specify the names of data type objects as "int", "uint", "sfix", "ufix", or "flt" followed by a numeric value since this format is reserved for built-in and intrinsic fixed point types. For example, instead of specifying a data type object with the name 'uint33', you can set the name of the object to 'uint33_T'. </entry>
    <entry key="DefaultDataTypeMethodInRightClickBuild">The data types for blocks inside the subsystem ''{0}'' are under-specified. Simulink is using a heuristic to select the data types for these blocks. This could lead to inconsistency between the behavior of the code generated for that subsystem using ''Build Subsystem'', and the behavior in the full model. Consider setting the ''Underspecified data types'' parameter specified in the ''Data Validity'' Group of the ''Diagnostics'' tab of the Configuration Parameters dialog to ''warning'' or ''error'' in order to see a list of relevant blocks</entry>
    <entry key="DefaultDataTypeMethodUsedAtPort">The data types for some signals in this model are under-specified.  Simulink is using a heuristic to select these data types.  The heuristic leads to reasonable choices in most cases.  Usage of the heuristic can be avoided by setting signal data types using Signal Specification blocks or signal objects. The list of signals with under-specified data types are:</entry>
    <entry key="DefaultDataTypeMethodUsedAtOutPortBlk"><![CDATA[Signal with under-specified data types: <sldiag objui="outport" objparam="{0,number,integer}" objname="{1}">output port {0,number,integer}</sldiag> of ''{1}''.]]></entry>
    <entry key="DefaultDataTypeMethodUsedAtInPortBlk"><![CDATA[Signal with under-specified data types: <sldiag objui="inport" objparam="{0,number,integer}" objname="{1}">input port {0,number,integer}</sldiag> of ''{1}''.]]></entry>
    <entry key="DworkNamesMustBeUnique">Data type work vector names must be unique.  Data type work {0,number,integer} and {1,number,integer} of ''{2}'' have the same name ''{3}''</entry>
    <entry key="EnablePortsMustHaveIsPositiveRegistered">The enable signal of ''{0}'' may not be of data type ''{1}'' because that type has no positive function registered</entry>
    <entry key="TrigPortsDataTypeNeedRepresentZero">The trigger signal of ''{0}'' may not be of data type ''{1}'' because that type can't represent zero</entry>
    <entry key="EnablePortsDataTypeNeedRepresentZero">The enable signal of ''{0}'' may not be of data type ''{1}'' because that type can't represent zero</entry>
    <entry key="EnumTypeInvalidClass">Cannot register enumerated data type ''{0}''.</entry>
    <entry key="EnumTypeInvalidClassWithBlock">''{0}'' cannot register enumerated data type ''{1}''.</entry>
    <entry key="EnumTypeInvalidIndex">''{0}'' attempts to access enumerated value with index {1,number,integer} from enumerated data type ''{2}''. This data type has {3,number,integer} enumerated values so the index must be in the range 0:{4,number,integer}</entry>
    <entry key="EnumTypeInvalidValue">''{0}'' attempts to access enumerated value with underlying value {1,number,integer} from enumerated data type ''{2}'' but this data type does not have an enumerated value with this underlying value</entry>
    <entry key="EnumTypeOverflowDuringConversion">Overflow occurred in ''{0}'' during the conversion from data type ''{1}'' to enumerated data type ''{2}''</entry>
    <entry key="EnumTypePrecisionLossDuringConversion">Loss of precision occurred in ''{0}'' during the conversion from data type ''{1}'' to enumerated data type ''{2}''</entry>
    <entry key="EnumTypeValuesDoNotFitIntoProdTargetInt">''{0}'' cannot register enumerated data type ''{1}'' because its underlying values do not fit into the integer type on the production target hardware ({2,number,integer} bits).</entry>
    <entry key="EnumTypeValuesDoNotFitIntoTargetInt">''{0}'' cannot register enumerated data type ''{1}'' because its underlying values do not fit into the integer type on the current target hardware ({2,number,integer} bits).</entry>
    <entry key="EnumTypeNotAClass">Cannot register enumerated data type because value specified is not a class.</entry>
    <entry key="EnumTypeNotAClassWithName">Cannot register enumerated data type ''{0}'' because there is no class with this name.</entry>
    <entry key="EnumTypeNotAnEnumerationClass">Cannot register enumerated data type ''{0}'' because it is not a valid enumeration class.</entry>
    <entry key="EnumTypeWithInvalidSuperclass">Cannot register enumerated data type ''{0}'' because it has an invalid superclass.</entry>
    <entry key="EnumTypeWithMultipleInheritance">Cannot register enumerated data type ''{0}'' because it has multiple superclasses.</entry>
    <entry key="EnumTypeInsidePackage">Unable to register enumerated data type ''{0}'' inside a namespace because it does not extend Simulink.IntEnumType.</entry>
    <entry key="EnumTypeWithComplexValues">Cannot register enumerated data type ''{0}'' with complex values</entry>
    <entry key="EnumTypeWithInvalidIntValues">Cannot register enumerated data type ''{0}'' with enumeration values greater than or equal to 2^31.</entry>
    <entry key="EnumTypeWithNoEnumStrings">Cannot register enumerated data type ''{0}'' with no enumerated values</entry>
    <entry key="EnumType_ReturnArgumentMustBeAString" note="stringDatatypeUpdate">Static method {0} must return a character vector</entry>
    <entry key="EnumType_ReturnArgumentMustBeBoolean">Static method {0} must return a scalar logical number (true/false)</entry>
    <entry key="GetEnumTypeInfoArg1">Input argument 1 must be the name of a valid enumerated data type</entry>
    <entry key="GetEnumTypeInfoArg2">Input argument 2 must be a valid property name ({0})</entry>
    <entry key="EnumType_CannotHandleNamespaceOverride">Unable to use definition of enumerated type ''{0}'' because of the method "generatedCodeIdentifier"</entry>
    <entry key="EnumTypeCannotRetrieveProperty">Error retrieving value for ''{0}''.</entry>
    <entry key="EnumType_SameNameAsExistingType">Cannot register enumerated data type ''{0}'' because another type with this name already exists</entry>
    <entry key="EnumType_SameNameAsExistingTypeWithBlock">Cannot register enumerated data type ''{0}'' for ''{1}'' because another type with this name already exists</entry>
    <entry key="EnumType_SameNameAsWorkspaceVar">Cannot register enumerated data type ''{0}'' because there is a global variable with the same name as this type</entry>
    <entry key="EnumType_SameNameAsWorkspaceVarWithBlock">Cannot register enumerated data type ''{0}'' for ''{1}'' because there is a global variable with the same name as this type</entry>
    <entry key="EnumType_SameNameAsAnyOtherWorkspaceVar">Failed to register enumerated data type ''{0}'' because a variable with the same name exists in the ''{1}''</entry>
    <entry key="EnumType_SameNameAsAnyOtherWorkspaceVarWithBlock">Failed to register enumerated data type ''{0}'' for block ''{1}'' because a variable with the same name exists in the ''{2}''</entry>
    <entry key="EnumType_ValuesDoNotFitIntoStorageType">''{0}'' cannot register enumerated data type ''{1}'' because its underlying values do not fit into the storage type ''{2}''.</entry>
    <entry key="EnumType_InvalidValueForSort">Sort only supports 2-dimensional matrices for distinct enumerations with duplicate underlying values.</entry>
    <entry key="DynamicEnum_CannotConvertFromOtherClass">Cannot convert objects of class ''{0}'' to enumeration class ''{1}''</entry>
    <entry key="DynamicEnum_InvalidNumericValue">The input array could not be converted to the ''{0}'' enumeration class because not all elements match the underlying values of the enumerated list</entry>
    <entry key="DynamicEnum_DuplicateAttributeDefinition">Cannot specify ''{0}'' more than once</entry>
    <entry key="DynamicEnum_DuplicateEnumUsage">Enumeration types ''{1}'' and ''{2}'' using same member identifier ''{0}''. Even though the setting 'EnumMemberNameClash' is set to ''{3}'', this setting only applies to imported types with identical values and target-independent data types</entry>
    <entry key="DynamicEnum_EmptyDescription">Cannot specify empty description</entry>
    <entry key="DynamicEnum_EmptyHeaderFile">Cannot specify empty header file</entry>
    <entry key="DynamicEnum_EmptyCppNamespace">Cannot specify empty CppNamespace</entry>
    <entry key="DynamicEnum_InvalidDefaultValue">Default value does not match any of the enumeration names</entry>
    <entry key="DynamicEnum_InvalidStorageType">Storage type is not the name of a built-in integer type in Simulink</entry>
    <entry key="DynamicEnum_NotEnoughInputs">Not enough input arguments.  At least 3 inputs must be provided</entry>
    <entry key="DynamicEnum_MismatchInPVPairs">Invalid number of input arguments</entry>
    <entry key="DynamicEnum_InvalidClassName">Invalid name for enumeration class ''{0}''</entry>
    <entry key="DynamicEnum_EmptyEnumStrings">No enumeration names specified</entry>
    <entry key="DynamicEnum_MismatchInNumberOfValues">Number of underlying numeric values ({0,number,integer}) does not match the number of enumeration names ({1,number,integer})</entry>
    <entry key="DynamicEnum_EnumValuesNotInteger">Underlying numeric values must be scalar real integers less than 2^31.</entry>
    <entry key="DynamicEnum_EnumValuesOutOfRange">Underlying numeric values do not fit into the specified StorageType</entry>
    <entry key="DynamicEnum_EnumValuesComplexOrSparse">Underlying numeric values cannot be complex or sparse</entry>
    <entry key="DynamicEnum_SecondArgMustBeCellOfStrings" note="stringDatatypeUpdate">Second argument must be a cell array of character vectors, where each character vector is a valid enumeration name</entry>
    <entry key="DynamicEnum_InvalidEnumString">Cannot define enumeration with name ''{0}'' because this is not a valid MATLAB identifier</entry>
    <entry key="DynamicEnum_DuplicateEnumString">Cannot define enumeration with the same name ''{0}'' more than once</entry>
    <entry key="DynamicEnum_AttributeNameMustBeString" note="stringDatatypeUpdate">Input argument {0,number,integer} must be a character vector</entry>
    <entry key="DynamicEnum_AttributeValueMustBeString" note="stringDatatypeUpdate">Value of ''{0}'' must be specified as a character vector</entry>
    <entry key="DynamicEnum_AttributeValueMustBeLogical">Value of ''{0}'' must be specified as a logical scalar</entry>
    <entry key="UnsupportedDataScopeForIsTunableInCode">To set 'IsTunableInCode' to true for enumeration type ''{0}'', 'DataScope' must be 'Imported' or 'Auto' and 'HeaderFile' must be specified. </entry>
    <entry key="TunableEnumWithDuplicateValues">Code generation is not supported since the enumeration type ''{0}'' has duplicated or invalid values and ''IsTunableInCode'' is set to true</entry>
    <entry key="InvalidTunableEnumSimImportDefn">Simulation and code generation are not supported because the model ''{0}'' has enumerated type ''{1}'' with ''IsTunableInCode'' property set to ''true''' and the configuration parameter ''SimGenImportedTypeDefs'' set to ''off''</entry>
    <entry key="DynamicEnum_InvalidAttributeName">Invalid attribute for enumeration class ''{0}''</entry>
    <entry key="DynamicEnum_CannotClearClass">Cannot clear class ''{0}'' because instances of the class still exist.</entry>
    <entry key="DynamicEnum_CannotClearClassCreatedByDictionary">Cannot clear enumeration class ''{0}'' because it was defined by a data dictionary.</entry>
    <entry key="DynamicEnum_CannotClearClassCreatedByStateflow">Cannot clear enumeration class ''{0}'' because it was defined by Stateflow.</entry>
    <entry key="DynamicEnum_CannotClearClassCreatedByMask">Cannot clear enumeration class ''{0}'' because it was defined by Simulink Mask.</entry>
    <entry key="DynamicEnum_CannotClearClassCreatedBySllogging">Cannot clear enumeration class ''{0}'' because it was defined by Simulink Logging.</entry>
    <entry key="DynamicEnum_CannotRedefineClassCreatedByDictionary">Unable to define enumeration class ''{0}'' because an enumeration class with the same name is loaded in another data dictionary. Close the Simulink model linked to the existing data dictionary or execute the command ''Simulink.data.dictionary.closeAll''.</entry>
    <entry key="DynamicEnum_CannotRedefineClassCreatedByMask">Cannot define enumeration class ''{0}'' because it was previously defined by a Simulink Mask.</entry>
    <entry key="DynamicEnum_CannotRedefineClassCreatedByStateflow">Cannot define enumeration class ''{0}'' because it was previously defined by Stateflow.  To manually clear the class, type:\nSimulink.clearIntEnumType(''{0}'')</entry>
    <entry key="DynamicEnum_CannotRedefineClass">Cannot define enumeration class ''{0}'' because it was previously defined.</entry>
    <entry key="DynamicEnum_DictionaryCannotClearClass">Dictionary cannot define enumeration class ''{0}'' because it already exists.  Use Simulink.clearIntEnumType to clear the existing class.</entry>
    <entry key="DynamicEnum_StateflowCannotClearClass">Stateflow cannot define enumeration class ''{0}'' because it already exists.  Use Simulink.clearIntEnumType to clear the existing class.</entry>
    <entry key="DynamicEnum_NowNotOwnedByDictionary">Cannot clear enumeration class ''{0}'' because instances of the class still exist.  Class is no longer owned by a data dictionary.</entry>
    <entry key="DynamicEnum_NowNotOwnedByStateflow">Cannot clear enumeration class ''{0}'' because instances of the class still exist.  Class is no longer owned by Stateflow.</entry>
    <entry key="DynamicEnum_NowNotOwnedByMask">Cannot clear enumeration class ''{0}'' because instances of the class still exist.  Class is no longer owned by Simulink Mask.</entry>
    <entry key="DynamicEnum_NowNotOwnedBySllogging">Cannot clear enumeration class ''{0}'' because instances of the class still exist.  Class is no longer owned by Simulink Logging.</entry>
    <entry key="DynamicEnum_CannotModifyStorageType">Cannot modify storage type of existing class ''{0}''</entry>
    <entry key="DynamicEnum_TypeNotAClass">Class ''{0}'' does not exist.</entry>
    <entry key="DynamicEnum_TypeNotAnEnumerationClass">Cannot clear class ''{0}'' because it is not a valid enumeration class.</entry>
    <entry key="ErrOverFlowDetected"><![CDATA[Overflow condition has been detected at time {0} in ''{1}''<actions exclusiveFixIts="no"><action type="suppression"></action></actions>]]></entry>
    <entry key="ErrSaturationOccurred"><![CDATA[Saturation has occurred at time {0} in ''{1}''<actions exclusiveFixIts="no"><action type="suppression"></action></actions>]]></entry>
    <entry key="ErrorDownCastOfInterfacedVar"><![CDATA[Parameter {0} of ''{1}'' is being cast from data type ''{2}'' to the data type ''{3}''. Downcasts and signed/unsigned mismatches of tunable parameter expressions are not allowed in order to ensure consistent behavior between simulation and generated code<actions exclusiveFixIts="no"><action type="suppression"></action></actions>]]></entry>

    <entry key="FixedPointLicenseFailDt"><![CDATA[''{0}'' specifies a data type of ''{1}''. Use of this data type requires a <a href="matlab:web('https://www.mathworks.com/products/fixed-point-designer.html')">Fixed-Point Designer</a> license, but license checkout failed.
    <actions exclusiveFixIts="yes">
    <action type="fixit" id="DTO">
    <cmd>fxptui.removeFixptUsageFromModel(gcs)</cmd>
    <txt>Click "Fix" to override data types in the model with doubles.\nIf your model still uses fixed-point data types, you may need to reconfigure your model to use floating-point types. For more information, see the <a href="matlab:helpview(fullfile(docroot,'fixedpoint','fixedpoint.map'), 'dto_nolicense')">documentation</a>.</txt>
    </action>
    </actions>]]>
    </entry>

    <entry key="FixedPointLicenseFailLog"><![CDATA[''{0}'' requested logging of min, max or overflow. Logging requires a <a href="matlab:web('https://www.mathworks.com/products/fixed-point-designer.html')">Fixed-Point Designer</a>, but license checkout failed.
    <actions exclusiveFixIts="yes">
    <action type="fixit">
    <cmd>fxptui.removeMMOFromModel(gcs)</cmd>
    <txt>Turn off fixed-point instrumentation.</txt>
    </action>
    </actions>]]>
    </entry>

    <entry key="CVTLicenseFailDt"><![CDATA[''{0}'' specifies a data type of ''{1}''. Use of this data type requires a <a href="matlab:web('https://www.mathworks.com/products/computer-vision.html')">Computer Vision Toolbox</a> license, but license checkout failed<actions exclusiveFixIts="no"><action type="suppression"></action></actions>]]></entry>

    <entry key="HDLFloatTypecastInvInputPortDataType">Invalid data type ''{0}'' specified for ''{1}'' on the input. Only half, single, double, uint16, uint32 and uint64 data types are supported.</entry>
    <entry key="HDLBitSliceIdxRangeError">Invalid slice index specified for ''{0}'' on the input. MSB and LSB positions must be less than or equal to the word length of the input data type.</entry>
    <entry key="HDLBitSliceIdxValueError">Invalid slice index specified for ''{0}'' on the input. MSB position must be greater than or equal to LSB position.</entry>
    <entry key="HDLBitSliceInvInputPortDataType">Invalid data type ''{0}'' specified for ''{1}'' on the input. Only integer, boolean or fixed-point data types are supported.</entry>
    <entry key="HDLBitSliceFixptSlopeBiasError">Invalid data type ''{0}'' specified for ''{1}'' on the input. Fixed-point input types should have slope in powers of 2 and zero bias.</entry>
    <entry key="ImportedTypeWithNoHeader">''{0}'' has DataScope set to ''Imported'' and no header file specified. A header file must be specified for ''Imported'' data types.</entry>
    <entry key="InitComplexFlagOfBoolDTypeError">Boolean signals cannot be complex</entry>
    <entry key="InitComplexFlagOfOpaqueDTypeError">Custom signals cannot be complex</entry>
    <entry key="InitComplexFlagOfStructDTypeError">Struct signals cannot be complex</entry>
    <entry key="InitComplexSignalError">An error occurred while initializing a signal''s numeric type (real or complex)</entry>
    <entry key="InitDataTypeError">An error occurred while initializing a signal''s data type</entry>
    <entry key="InputMustBeBoolOrDbl">Cannot set the input port data type of ''{0}'' to ''{1}''.  The input port data type must be either ''double'' or ''boolean''.  Signals of other data types can be converted to ''double'' or ''boolean'' by using a Data Type Conversion</entry>
    <entry key="InputMustBeIntegerForConvertToEnumType">''{0}'' cannot convert signal from data type ''{1}'' to enumerated data type ''{2}''. The data type of the input signal must be an integer type</entry>
    <entry key="InputPortCannotAcceptMixedDataType"><![CDATA[Input port cannot accept mixed data types. <sldiag objui="inport" objparam="{0,number,integer}" objname="{1}">Input port {0,number,integer}</sldiag> of ''{1}'' expects a signal with unique data type. However, it is driven by a signal with elements of differing data types.]]></entry>
    <entry key="InputPortCannotAcceptMixedDataTypeVirtualBus"><![CDATA[<sldiag objui="inport" objparam="{0,number,integer}" objname="{1}">Input port {0,number,integer}</sldiag> of Outport block ''{1}'' expects a signal with a unique data type, but receives a virtual bus with elements that have different data types. Use an Out Bus Element block to output a virtual bus with elements that have different data types.]]></entry>
    <entry key="InputPortCannotAcceptMixedDataTypeForVSSWithHint">The inport block ''{0}'' cannot accept a signal with elements of differing data types. This can be usually fixed by inserting a Signal Conversion block with the ''Signal copy'' option selected, inside the choice blocks of ''{1}''.</entry>
    <entry key="InputPortCannotAcceptMixedDataTypeWithHint">The inport block ''{0}'' is directly connected to outport ''{1}'' and therefore cannot accept a signal with elements of differing data types. This can be usually fixed by inserting a Signal Conversion block with the ''Signal copy'' option selected, at the output of the inport block ''{0}''. Alternatively, if this input port is within a function-call subsystem, consider checking the ''Latch input for feedback signals of function-call subsystem outputs'' option.</entry>
    <entry key="InputPortCannotAcceptMixedDataTypeWithHint_Feedback"><![CDATA[Input port cannot accept mixed data types. <sldiag objui="inport" objparam="{0,number,integer}" objname="{1}">Input port {0,number,integer}</sldiag> of ''{1}'' expects a signal with unique data type. However, it is driven by a signal with elements of differing data types. If this input port is within a function-call subsystem, consider checking the ''Latch input for feedback signals of function-call subsystem outputs'' option. Otherwise, insert a Signal Conversion block with the ''Signal copy'' option selected, at the output of block ''{2}''. ]]></entry>
    <entry key="InputPortCannotAcceptMixedSignal"><![CDATA[Input port cannot accept mixed numeric types. <sldiag objui="inport" objparam="{0,number,integer}" objname="{1}">Input port {0,number,integer}</sldiag> of ''{1}'' expects a real or complex signal. However, it is driven by a signal that includes both real and complex elements]]></entry>
    <entry key="InputPortCannotAcceptMixedSignalWithHint"><![CDATA[Input port cannot accept mixed numeric types. <sldiag objui="inport" objparam="{0,number,integer}" objname="{1}">Input port {0,number,integer}</sldiag> of ''{1}'' expects a real or complex signal. However, it is driven by a signal that includes both real and complex elements. This can be usually fixed by inserting a Signal Conversion block with the ''Signal copy'' option selected, at the output of block ''{2}''.  Alternatively, if this input port is within a function-call subsystem, consider checking the ''Latch input for feedback signals of function-call subsystem outputs'' option.]]></entry>
    <entry key="InputPortComplexSignalMismatch"><![CDATA[Complex signal mismatch. <sldiag objui="inport" objparam="{0,number,integer}" objname="{1}">Input port {0,number,integer}</sldiag> of ''{1}'' expects a signal of {2}. However, it is driven by a signal of {3}]]></entry>
    <entry key="InputPortDataTypeMismatch"><![CDATA[Data type mismatch. <sldiag objui="inport" objparam="{0,number,integer}" objname="{1}">Input port {0,number,integer}</sldiag> of ''{1}'' expects a signal of {2}. However, it is driven by a signal of {3}.]]></entry>
    <entry key="InvBoolPortDType">{0} does not accept ''boolean'' signals. The input signal(s) of ''{1}'' must be ''uint8'', ''uint16'', ''uint32'', ''int8'', ''int16'', ''int32'', ''single'', or ''double''</entry>
    <entry key="InvBuiltinPortDType">{0} does not accept signals of data type ''{1}''. ''{2}'' only accepts the ''boolean'', ''uint8'', ''uint16'', ''uint32'', ''int8'', ''int16'', ''int32'', ''single'', ''double'' data types</entry>
    <entry key="InvDataConstructForParameter">The parameter {0} of ''{1}'' is not being successfully constructed</entry>
    <entry key="InvConvertBetweenForParameter">The parameter {0} of ''{1}'' is not being successfully converted from type ''{2}'' to ''{3}''{4}{5}</entry>
    <entry key="InvConvertBetweenForPortDType">The input signal(s) of ''{0}'' are not being successfully converted from type ''{1}'' to ''{2}''{3}{4}</entry>
    <entry key="InvConvertBetweenForTriggerPortDType">The trigger signal of ''{0}'' is not being successfully converted from data type ''{1}'' to ''{2}''</entry>
    <entry key="InvDWorkBooleanComplexDwork">Boolean dworks cannot be complex. Dwork index {0,number,integer} of ''{1}'' is a ''boolean'' dwork. It cannot be complex</entry>
    <entry key="InvDWorkEnumTypeComplexDwork">Enumerated dworks cannot be complex. Dwork index {0,number,integer} of ''{1}'' is a dwork with enumerated data type ''{2}''. It cannot be complex</entry>
    <entry key="InvDWorkOpaqueComplexDwork">Custom dworks cannot be complex. Dwork index {0,number,integer} of ''{1}'' is a dwork with data type ''{2}''. It cannot be complex</entry>
    <entry key="InvDWorkStructComplexDwork">Struct dworks cannot be complex. Dwork index {0,number,integer} of ''{1}'' is a dwork with data type ''{2}''. It cannot be complex</entry>
    <entry key="InvDisagreeInternalRuleDType">Data type mismatch. The internal rule determines the output of ''{0}'' to be a signal of data type ''{1}''. However, it is driving a signal of data type ''{2}''.</entry>
    <entry key="InvFixptAndBuiltinPortDType">{0} does not accept signals of data type ''{1}''. ''{2}'' only accepts ''boolean'', ''uint8'', ''uint16'', ''uint32'', ''int8'', ''int16'', ''int32'', ''single'', ''double'', and fixed-point data types</entry>
    <entry key="InvFixptBoolOutPortDType">{0} does not accept ''boolean'' signals at output port. The output signal(s) of ''{1}'' must be ''uint8'', ''uint16'', ''uint32'', ''int8'', ''int16'', ''int32'', ''single'', ''double'', or one of the fixed-point data types</entry>
    <entry key="InvFixptBoolOutputPortDType">Output port(s) of {0} does not accept ''boolean'' signals. The output signal(s) of ''{1}'' must be ''uint8'', ''uint16'', ''uint32'', ''int8'', ''int16'', ''int32'', ''single'', or ''double'', or one of the fixed-point data types</entry>
    <entry key="InvFixptBoolPortDType">{0} does not accept ''boolean'' signals. The input and output signal(s) of ''{1}'' must be ''uint8'', ''uint16'', ''uint32'', ''int8'', ''int16'', ''int32'', ''single'', ''double'', or one of the fixed-point data types</entry>
    <entry key="InvInputBooleanComplexSignal"><![CDATA[Boolean signals cannot be complex. <sldiag objui="inport" objparam="{0,number,integer}" objname="{1}">Input port {0,number,integer}</sldiag> of ''{1}'' is a ''boolean'' signal. It cannot be complex]]></entry>
    <entry key="InvInputHalfComplexSignal"><![CDATA[Half-precision signals cannot be complex. <sldiag objui="inport" objparam="{0,number,integer}" objname="{1}">Input port {0,number,integer}</sldiag> of ''{1}'' is a ''half-precision'' signal. It cannot be complex]]></entry>
    <entry key="InvInputEnumTypeComplexSignal"><![CDATA[Enumerated signals cannot be complex. <sldiag objui="inport" objparam="{0,number,integer}" objname="{1}">Input port {0,number,integer}</sldiag> of ''{1}'' is a signal with enumerated data type ''{2}''. It cannot be complex]]></entry>
    <entry key="InvInputFixptComplexSignal"><![CDATA[<sldiag objui="inport" objparam="{0,number,integer}" objname="{1}">Input port {0,number,integer}</sldiag> of ''{1}'' is a fixed-point signal of data type ''{2}'' with non-zero bias or slope that is not a power of 2. The signal cannot be complex]]></entry>
    <entry key="InvInputOpaqueComplexSignal"><![CDATA[Custom signals cannot be complex. <sldiag objui="inport" objparam="{0,number,integer}" objname="{1}">Input port {0,number,integer}</sldiag> of ''{1}'' is a signal with data type ''{2}''. It cannot be complex during code generation.]]></entry>
    <entry key="InvInputPortComplexSignalSetting"><![CDATA[Input port complex signal mismatch.  <sldiag objui="inport" objparam="{0,number,integer}" objname="{1}">Input port {0,number,integer}</sldiag> of ''{1}'' expects a {2} signal. Based on the output port complex signal, the input port must be a {3} signal]]></entry>
    <entry key="InvInputPortDType">The input port data type of {0} must be one of the MATLAB data types. However, the input port of ''{1}'' is driven by a signal of data type ''{2}''</entry>
    <entry key="InvInputPortDTypeNotSupported">The input port of {0} does not support the data type ''{1}''. However, the input port of ''{2}'' is driven by a signal of this data type</entry>
    <entry key="InvInputPortDataType">Invalid data type ''{0}'' specified for ''{1}'' input port {2,number,integer}</entry>
    <entry key="InvInputStructComplexSignal"><![CDATA[Struct signals cannot be complex. <sldiag objui="inport" objparam="{0,number,integer}" objname="{1}">Input port {0,number,integer}</sldiag> of ''{1}'' is a signal with data type ''{2}''. It cannot be complex]]></entry>
    <entry key="InvIsPositiveForEnablePortDType">The enable port signal of ''{0}'' is not being successfully processed by the positive function registered for data type ''{1}''</entry>
    <entry key="InvMPSwtControlPortOutOfBounds">Out of bounds switch input specified for ''{0}''.  The control input must be greater than or equal to 1 and less than or equal to the number of inputs if using one-based indexing; The control input must be greater than or equal to 0 and less than the number of inputs if using zero-based indexing</entry>
    <entry key="InvMPSwtPortDataTypes">Data type mismatch. The dominant data type of input ports of ''{0}'' is ''{1}''. However, the data type of output port is ''{2}''. They should match</entry>
    <entry key="InvNonDoublePortDType">Only ''double'' signals are accepted by block type {0}.  The signals at the ports of ''{1}'' are of data type ''{2}''.</entry>
    <entry key="InvNonFloatPortDType">Only ''single'' or ''double'' signals are accepted by block type {0}.  The signals at the ports of ''{1}'' are of data type ''{2}''.</entry>
    <entry key="InvOPortDTypeChooseIntrinsic">''{0}'' cannot set its output port data type to ''{1}''; one way to avoid this problem is to explicitly choose an intrinsic output data type</entry>
    <entry key="InvOutputBooleanComplexSignal"><![CDATA[Boolean signals cannot be complex. <sldiag objui="outport" objparam="{0,number,integer}" objname="{1}">Output port {0,number,integer}</sldiag> of ''{1}'' is a ''boolean'' signal. It cannot be complex]]></entry>
    <entry key="InvOutputHalfComplexSignal"><![CDATA[Half-precision signals cannot be complex. <sldiag objui="outport" objparam="{0,number,integer}" objname="{1}">Output port {0,number,integer}</sldiag> of ''{1}'' is a ''half-precision'' signal. It cannot be complex]]></entry>
    <entry key="InvOutputEnumTypeComplexSignal"><![CDATA[Enumerated signals cannot be complex. <sldiag objui="outport" objparam="{0,number,integer}" objname="{1}">Output port {0,number,integer}</sldiag> of ''{1}'' is a signal with enumerated data type ''{2}''. It cannot be complex]]></entry>
    <entry key="InvOutputFixptComplexSignal"><![CDATA[<sldiag objui="outport" objparam="{0,number,integer}" objname="{1}">Output port {0,number,integer}</sldiag> of ''{1}'' is a fixed-point signal of data type ''{2}'' with non-zero bias or slope that is not a power of 2. The signal cannot be complex]]></entry>
    <entry key="InvOutputOpaqueComplexSignal"><![CDATA[Custom signals cannot be complex. <sldiag objui="outport" objparam="{0,number,integer}" objname="{1}">Output port {0,number,integer}</sldiag> of ''{1}'' is a signal with data type ''{2}''. It cannot be complex during code generation.]]></entry>
    <entry key="InvOutputPortComplexSignalSetting"><![CDATA[Output port complex signal mismatch.  <sldiag objui="outport" objparam="{0,number,integer}" objname="{1}">Output port {0,number,integer}</sldiag> of ''{1}'' is a {2} signal. Based on the input port complex signal, the output port must be a {3} signal]]></entry>
    <entry key="InvOutputPortDTypeNotSupported">The output port of {0} does not support the data type ''{1}''. However, the output port of ''{2}'' is driven by a signal of this data type</entry>
    <entry key="InvOutputPortDataType">Invalid data type ''{0}'' specified for ''{1}'' output port {2,number,integer}</entry>
    <entry key="InvOutputStructComplexSignal"><![CDATA[Struct signals cannot be complex. <sldiag objui="outport" objparam="{0,number,integer}" objname="{1}">Output port {0,number,integer}</sldiag> of ''{1}'' is a signal with data type ''{2}''. It cannot be complex]]></entry>
    <entry key="InvPortDType">''{0}'' does not support signals of data type ''{1}''. {2} supports only ''uint8'', ''uint16'', ''uint32'', ''int8'', ''int16'', ''int32'', ''single'', or ''double'' built-in data types</entry>
    <entry key="InvPortDTypeFunctionName">Signals of type ''{0}'' are not supported by ''{1}'' block. {2} supports only data types of ''uint8'', ''uint16'', ''uint32'', ''int8'', ''int16'', ''int32'', ''single'', ''double'', or ''half''</entry>
    <entry key="InvPortDTypeSupport">Invalid {0} port data type ''{1}'' in ''{2}''. The data type must be ''boolean'', ''uint8'', ''uint16'', ''uint32'', ''int8'', ''int16'', ''int32'', ''single'', ''double'', or one of the fixed-point data types</entry>
    <entry key="InvPortDTypeWithoutConvertBetween">The input signal(s) of ''{0}'' may not be of type ''{1}'' because that type has no type conversion function registered</entry>
    <entry key="InvalidDataType">Specified data type ''{0}'' by ''{1}'' is not a valid identifier</entry>
    <entry key="InvalidDataTypeElementIndex">''{0}'' attempts to use invalid element index {1,number,integer} for data type id {2,number,integer}</entry>
    <entry key="InvalidDataTypeId">''{0}'' attempts to use invalid data type id {1,number,integer}</entry>
    <entry key="InvalidDataTypeNumElements">Unable to register data type ''{0}'' for ''{1}'' due to the following error: The number of elements must be greater than zero for this data type.</entry>
    <entry key="InvalidTypeNumElements">Unable to register type ''{0}'' for ''{1}'' due to the following error: The number of elements must be greater than zero for this type.</entry>
    <entry key="InvalidInputPortComplexSignal"><![CDATA[Invalid input port numeric type. Numeric type (real or complex) of <sldiag objui="inport" objparam="{0,number,integer}" objname="{1}">input port {0,number,integer}</sldiag> of ''{1}'' is invalid]]></entry>
    <entry key="BuiltinDataTypeNameNotAllowed">Invalid bus object name ''{0}''. Bus object name must not be a built-in data type name or 'auto'.</entry>
    <entry key="InvalidInputPortDataType"><![CDATA[Invalid input port data type. Data type of <sldiag objui="inport" objparam="{0,number,integer}" objname="{1}">input port {0,number,integer}</sldiag> of ''{1}'' is invalid]]></entry>
    <entry key="InvalidOutputPortComplexSignal"><![CDATA[Invalid output port numeric type. Numeric type (real or complex) of <sldiag objui="outport" objparam="{0,number,integer}" objname="{1}">output port {0,number,integer}</sldiag> of ''{1}'' is invalid]]></entry>
    <entry key="InvalidOutputPortDataType"><![CDATA[Invalid output port data type. Data type of <sldiag objui="outport" objparam="{0,number,integer}" objname="{1}">output port {0,number,integer}</sldiag> of ''{1}'' is invalid.]]></entry>
    <entry key="InvalidResetInputDataType">Cannot set the reset input port data type of ''{0}'' to ''{1}''. The reset input port data type must be ''uint8'', ''uint16'', ''uint32'', ''int8'', ''int16'', ''int32'', ''single'', ''double'', ''boolean'', or ''ufix1''. Signals of other data types can be converted to these data types by using a Data Type Conversion block.</entry>
    <entry key="InvalidEnableInputDataType">Cannot set the enable input port data type of ''{0}'' to ''{1}''. The enable input port data type must be ''uint8'', ''uint16'', ''uint32'', ''int8'', ''int16'', ''int32'', ''single'', ''double'', ''boolean'', or ''ufix1''. Signals of other data types can be converted to these data types by using a Data Type Conversion block.</entry>
    <entry key="LoggingNonBuiltInSignalNotSupported">Cannot log non-built-in data type signals</entry>
    <entry key="MdlRefInputPortCannotAcceptMixedDataTypeWithHint"><![CDATA[Input port cannot accept mixed data types. <sldiag objui="inport" objparam="{0,number,integer}" objname="{1}">Input port {0,number,integer}</sldiag> of model block ''{1}'' expects a signal with unique data type. However, it is driven by a signal with elements of differing data types. This can be usually fixed by inserting a Signal Conversion block with the ''Signal copy'' option selected, at the output of Inport block {2,number,integer} of the referenced model. Alternatively, if this input port is within a function-call model, consider checking the ''Latch input for feedback signals of function-call subsystem outputs'' option.]]></entry>
    <entry key="MdlRefInputPortCannotAcceptMixedSignalWithHint"><![CDATA[Input port cannot accept mixed numeric types. <sldiag objui="inport" objparam="{0,number,integer}" objname="{1}">Input port {0,number,integer}</sldiag> of model block ''{1}'' expects a real or complex signal. However, it is driven by a signal that includes both real and complex elements. This can be usually fixed by inserting a Signal Conversion block with the ''Signal copy'' option selected, at the output of Inport block {2} of the referenced model.  Alternatively, if this input port is within a function-call model, consider checking the ''Latch input for feedback signals of function-call subsystem outputs'' option.]]></entry>
    <entry key="MustSpecifyAllOrNoneDWorkNames">Some of data type work vector names of ''{0}'' are not specified.  Either all or none of data type work vector names must be specified</entry>
    <entry key="NonSingleOrDoubleComplexSignal">Input port and output port of ''{0}'' must be of type ''single'' or ''double'' when complex</entry>
    <entry key="NumericType_CannotBeAlias">Unscaled numeric type cannot be an alias data type</entry>
    <entry key="NumericType_DirectUseOfUnscaled">Invalid attempt to use the unscaled numeric type ''{0}'' directly as a data type</entry>
    <entry key="NumericType_DisableIsAlias">Unscaled numeric type cannot be an alias data type. Setting the object''s IsAlias property to false</entry>
    <entry key="NumericType_WarnForOldProperties">Property ''{0}'' is obsolete and will be removed in a future release.  Update your code to use property ''{1}'' instead</entry>
    <entry key="NumericType_WarnForOldProperties2">Property ''{0}'' is obsolete and will be removed in a future release.  Update your code to use property ''{1}'' instead.  If you receive this warning during MAT-file loading, please re-save your MAT-file</entry>
    <entry key="NumericType_WarnForOldMethods">Method ''{0}'' is obsolete and will be removed in a future release.  Update your code to use property ''{1}'' instead</entry>
    <entry key="OpaqueType_Empty_HeaderFile">The data type object ''{0}'' must specify a HeaderFile property</entry>
    <entry key="OpaqueType_Invalid_Size">Invalid Size specified; the Size must be greater than 0</entry>
    <entry key="ObjectInScopeNotBus">Variable or object ''{0}'' in scope from ''{1}'' is not a Simulink.Bus object</entry>
    <entry key="ObjectInScopeNotDataType">Variable or object ''{0}'' in scope from ''{1}'' is not a Simulink.DataType object</entry>
    <entry key="OutputMustBeBoolOrDbl">Cannot set the output port data type of ''{0}'' to ''{1}''.  The output port data type must be either ''double'' or ''boolean''</entry>
    <entry key="OutputMustBeInt8OrDbl">Cannot set the output port {0,number,integer} data type of ''{1}'' to ''{2}''.  The output port data type must be either ''double'' or ''int8''</entry>
    <entry key="OutputPortCannotAcceptMixedDataType"><![CDATA[Output port cannot have mixed data types. <sldiag objui="outport" objparam="{0,number,integer}" objname="{1}">Output port {0,number,integer}</sldiag> of ''{1}'' expects a signal with unique data type. However, it is driving a signal with elements of differing data types]]></entry>
    <entry key="OutputPortCannotAcceptMixedDataTypeWithHint"><![CDATA[Output port cannot have mixed data types. <sldiag objui="outport" objparam="{0,number,integer}" objname="{1}">Output port {0,number,integer}</sldiag> of ''{1}'' expects a signal with unique data type. However, it is driving a signal with elements of differing data types. This can be usually fixed by inserting a Signal Conversion block with the ''Signal copy'' option selected, at its output]]></entry>
    <entry key="OutputPortCannotAcceptMixedSignal"><![CDATA[Output port cannot have mixed numeric types. <sldiag objui="outport" objparam="{0,number,integer}" objname="{1}">Output port {0,number,integer}</sldiag> of ''{1}'' expects a real or complex signal. However, it is driving a signal that includes both real and complex elements]]></entry>
    <entry key="OutputPortCannotAcceptMixedSignalWithHint"><![CDATA[Output port cannot have mixed numeric types. <sldiag objui="outport" objparam="{0,number,integer}" objname="{1}">Output port {0,number,integer}</sldiag> of ''{1}'' expects a real or complex signal. However, it is driving a signal that includes both real and complex elements This can be usually fixed by inserting a Signal Conversion block with the ''Signal copy'' option selected, at its output]]></entry>
    <entry key="OutputPortComplexSignalMismatch"><![CDATA[Complex signal mismatch. <sldiag objui="outport" objparam="{0,number,integer}" objname="{1}">Output port {0,number,integer}</sldiag> of ''{1}'' is a signal of {2}. However, it is driving a signal of {3}]]></entry>
    <entry key="OutputPortDataTypeMismatch"><![CDATA[Data type mismatch. <sldiag objui="outport" objparam="{0,number,integer}" objname="{1}">Output port {0,number,integer}</sldiag> of ''{1}'' is a signal of {2}. However, it is driving a signal of {3}.]]></entry>
    <entry key="StringParameterMustBeZero">Invalid value for parameter {0} of block ''{1}''. The incoming signal is either a string data type or a bus signal with at least one element that is a string data type. String data types must have 0 as an initial value.</entry>
    <entry key="ParameterMustBeZero">''{0}'' cannot specify a nonzero value for parameter {1}.  The parameter needs to be converted to the datatype ''{2}'', which does not have a datatype conversion function registered.  Register a datatype conversion function, or use the value zero</entry>
    <entry key="ParameterNoConversionOfEnums">''{0}'' cannot convert parameter {1} from data type ''{2}'' to data type ''{3}'' because conversion of parameters with enumerated data types is not supported</entry>
    <entry key="ParameterNoEmptyValueForTunableEnums">''{0}'' cannot specify ''[]'' as the value of {1} since empty values are not supported for parameters with tunable enumerated type ''{2}''</entry>
    <entry key="ParameterNoConversionOfTunableEnums">''{0}'' cannot convert parameter {1} from data type ''{2}'' to data type ''{3}'' because conversion of parameters with tunable enumerated data types is not supported</entry>
    <entry key="ParameterNoConversionOfStructTypes">''{0}'' cannot convert parameter {1} from data type ''{2}'' to data type ''{3}'' because conversion of parameters with struct data types is not supported</entry>
    <entry key="ParameterNoConversionOfStrings">Converting parameter ''{1}'' from data type ''{2}'' to data type ''{3}'' is not supported by ''{0}'' because conversion between string and nonstring data types is not supported.</entry>
    <entry key="PortComplexSignalMismatch"><![CDATA[Port complex signal mismatch.  If any input of {0} is a complex signal, then the output must be a complex signal.  The <sldiag objui="inport" objparam="{1,number,integer}" objname="{2}">input port {1,number,integer}</sldiag> of ''{2}'' is a complex signal.  However, the output port is a real signal.]]></entry>
    <entry key="ProdHWPromotion">''{0}'' is configured to automatically select the output data type via internal rule.  It selected an integer data type with at least {1,number,integer} bits.  Based on the production hardware characteristics, this size is not allowed.  To change the production hardware characteristics, select "Configuration Parameters" from the model''s Simulation menu, then select the Hardware Implementation page.</entry>
    <entry key="PropBackwardComplexSignalError"><![CDATA[An error occurred while propagating {0} from ''{1}'', <sldiag objui="inport" objparam="{2,number,integer}" objname="{1}">Input port {2,number,integer}</sldiag>.]]></entry>
    <entry key="PropBackwardDataTypeError"><![CDATA[An error occurred while propagating {0} from ''{1}'', <sldiag objui="inport" objparam="{2,number,integer}" objname="{1}">Input port {2,number,integer}</sldiag>.]]></entry>
    <entry key="PropForwardComplexSignalError"><![CDATA[An error occurred while propagating {0} from ''{1}'', <sldiag objui="outport" objparam="{2,number,integer}" objname="{1}">Output port {2,number,integer}</sldiag>.]]></entry>
    <entry key="PropForwardDataTypeError"><![CDATA[An error occurred while propagating {0} from ''{1}'', <sldiag objui="outport" objparam="{2,number,integer}" objname="{1}">Output port {2,number,integer}</sldiag>.]]></entry>
    <entry key="RealInputsComplexOutputErr">Output port complex signal mismatch.  If all inputs of {0} are real signals, then the output must be a real signal.  All inputs of ''{1}'' are real signals.  However, the output port is a complex signal</entry>
    <entry key="ReqInvalidDiagnostic">Block {0} requested an invalid diagnostic</entry>
    <entry key="ResetPortsMustBeBoolOrDbl"><![CDATA[Cannot set the data type of <sldiag objui="inport" objparam="{0,number,integer}" objname="{1}">input port {0,number,integer}</sldiag> of ''{1}'' to ''{2}''. The reset signal of an integrator must be of type ''double'' or ''boolean''. Signals of other data types can be converted to ''double'' or ''boolean'' by using a Data Type Conversion]]></entry>
    <entry key="ServiceBusDoesNotEvalToBus">Port {2} expects Simulink.Bus object, but data type ''{0}'' resolves to a Simulink.ServiceBus for parameter ''{1}''. </entry>
    <entry key="SFcnInputPortComplexSignalHasNotBeenSet">Input port complex signal of S-function ''{0}'' has not been set properly</entry>
    <entry key="SFcnInputPortDataTypeHasNotBeenSet">Input port data type of S-function ''{0}'' has not been set properly</entry>
    <entry key="SFcnOutputPortComplexSignalHasNotBeenSet">Output port complex signal of S-function ''{0}'' has not been set properly</entry>
    <entry key="SFcnOutputPortDataTypeHasNotBeenSet">Output port data type of S-function ''{0}'' has not been set properly</entry>
    <entry key="SharedBusAliasedToAnonStruct">Simulink is mapping bus type ''{0}'' to structure type ''{1}'' (defined for a parameter structure). As a result, the bus type cannot be exported. Change the DataScope of the bus object from ''Exported'' to ''Auto''.</entry>
    <entry key="SignalAttribPropDataTypeMixed">mixed data type</entry>
    <entry key="SignalAttribPropDataTypeFullyKnown">data type ''{0}''</entry>
    <entry key="SignalAttribPropDataTypePartiallyKnown">data type '{'{0}, unknown'}'</entry>
    <entry key="SignalAttribPropNumericTypeMixed">mixed numeric type</entry>
    <entry key="SignalAttribPropNumericTypeFullyKnown">numeric type {0}</entry>
    <entry key="SignalAttribPropDataNumericTypePartiallyKnown">numeric type '{'{0}, unknown'}'</entry>
    <entry key="SignedOnlyPortDType">{0} does not accept ''boolean'' or ''unsigned'' signals. The input and output signal(s) of ''{1}'' must be ''int8'', ''int16'', ''int32'', ''single'', or ''double'', or one of the signed fixed-point data types</entry>
    <entry key="SpecificInvConvertBetweenForTriggerPortDType">The trigger signal of ''{0}'' is not being successfully converted from data type ''{1}'' to ''{2}''; {3}</entry>
    <entry key="SpecificInvIsPositiveForEnablePortDType">The enable port signal of ''{0}'' is not being successfully processed by the positive function registered for data type ''{1}''; {2}</entry>
    <entry key="StructElementCannotBeComplexBoolean">Element ''{0}'' of data type ''{1}'' may not be of boolean data type ''{2}'' since that element is complex</entry>
    <entry key="StructElementCannotBeComplexOpaque">Element ''{0}'' of data type ''{1}'' may not be of custom data type ''{2}'' since that element is complex</entry>
    <entry key="StructElementCannotBeComplexStruct">Element ''{0}'' of data type ''{1}'' may not be of struct data type ''{2}'' since that element is complex</entry>
    <entry key="StructElementCannotBeComplexEnum">Element ''{0}'' of data type ''{1}'' may not be of enumerated data type ''{2}'' since that element is complex</entry>
    <entry key="StructElementCannotBeCustomOpaque">Element ''{0}'' of data type ''{1}'' may not be of custom data type ''{2}'' since custom elements are not supported in bus</entry>
    <entry key="StructElement_Invalid_DType">Invalid bus type specified for registration: non-numeric element(s) found.</entry>
    <entry key="StructElement_DataTypeEvalErr">Error evaluating DataType property.</entry>
    <entry key="StructElement_DataType_Auto">Invalid DataType specified; DataType may not be set to ''auto''</entry>
    <entry key="StructElement_Type_Empty">Invalid Type specified; Type may not be empty.</entry>
    <entry key="StructElement_DataType_FcnCall">Invalid DataType specified; function-call signals are not supported as data types on elements.</entry>
    <entry key="StructElement_DataType_Struct">Invalid DataType specified; ''struct'' is not supported as data type on elements.</entry>
    <entry key="StructElement_ErrResolvingDataType">Error resolving DataType ''{0}''</entry>
    <entry key="StructElement_ErrResolvingType">Error resolving Type ''{0}''</entry>
    <entry key="StructElement_Invalid_Name">Name ''{0}'' must start with an alphabetic or '''' character, followed by alphanumeric or '''' characters. Name must not start with ''sl_padding''.</entry>
    <entry key="StructElement_Invalid_NumDimensions">''Dimensions'' must be a double vector consisting of positive elements. For signals with more than 2 dimensions, the trailing dimension must not be 1.</entry>
    <entry key="StructElement_Invalid_NumDimensions_WithName">''Dimensions'' of ''{0}'' must be a double vector consisting of positive elements. For signals with more than 2 dimensions, the trailing dimension must not be 1.</entry>
    <entry key="StructElement_Invalid_ResolvedDataType">DataType ''{0}'' did not resolve to a valid data type</entry>
    <entry key="StructElement_Invalid_ResolvedDataType_Enum">DataType ''{0}'' did not resolve to a valid enumerated data type</entry>
    <entry key="StructElement_Invalid_ResolvedDataType_Unscaled">DataType ''{0}'' is invalid because it does not contain scaling information</entry>
    <entry key="StructType_Duplicate_Names">Invalid Elements specified; Elements must have unique names</entry>
    <entry key="StructType_Duplicate_Names2">Invalid Elements specified for data type ''{0}''; Elements must have unique names</entry>
    <entry key="StructType_Invalid_Elements">Invalid Elements specified; the Elements must be an empty array, or array of objects of the class Simulink.StructElement</entry>
    <entry key="StructParam_DifferentAttrib">Inconsistent field ''{0}'':\n Expected: {1}\n   Actual: {2}</entry>
    <entry key="StructParam_DifferentNamesOrder">Fields of structure ''{0}'' do not match:\n Expected fields:\n\t {1}\n   Actual fields:\n\t {2}</entry>
    <entry key="StructParam_ExtraNames">Fields of structure ''{0}'' do not match:\n   Extra fields:\n\t{1}\n Expected fields:\n\t{2}\n\n Actual fields:\n\t{3}</entry>
    <entry key="StructParam_MissedExtraNames">Fields of structure ''{0}'' do not match:\n Missing fields:\n\t{1}\n Extra fields:\n\t{2}\n Expected fields:\n\t{3}\n\n Actual fields:\n\t{4}</entry>
    <entry key="StructParam_MissedNames">Fields of structure ''{0}'' do not match:\n Missing fields:\n\t{1}\n Expected fields:\n\t{2}\n\n Actual fields:\n\t{3}</entry>
    <entry key="SwtDataTypeOutputDisagreeRule"><![CDATA[An error occurred while the Simulink model was propagating data types. Data type propagation proposed that the Switch block ''{0}'' accept data type ''{1}'' for input port 1 and data type ''{2}'' for <sldiag objui="inport" objparam="2" objname="{0}">input port 2</sldiag>. This Switch block is configured to inherit its output data type via an internal rule which determined that the output data type should be ''{3}''.  However, the data type of the output signal had already been set to ''{4}''. There are several actions you can take to resolve this error. You can change the data type settings for the Switch block. Alternately, you can change the data type settings of the blocks connected to the Switch block''s inputs and/or outputs. You can also insert Data Type Conversion blocks or Signal Specification blocks on the Switch block''s input and/or output signals to resolve data type propagation errors]]></entry>
    <entry key="TowksCannotLogNonDblOrComplexInMatFormat">The ''matrix'' format is used for data logging of ''{0}''. Logging non-double or complex signal is not supported in ''matrix'' format. Use ''Structure with time'' or ''Structure'' format (see Save Format in parameter dialog)</entry>
    <entry key="TriggerSignalCannotBeEnumType">The trigger signal of ''{0}'' is invalid because it has an enumerated data type ''{1}''</entry>
    <entry key="TriggerPortsMustHaveConvertBetweenRegistered">The trigger signal of ''{0}'' may not be of type ''{1}'' because that type has no type conversion function registered</entry>
    <entry key="UdtDoesNotEvalToDataType">''{0}'' does not resolve to a valid data type for parameter ''{1}'' in ''{2}''.</entry>
    <entry key="UdtDoesNotEvalToEnum">''{0}'' does not resolve to an enumerated data type for parameter ''{1}'' in ''{2}''.</entry>
    <entry key="UdtDoesNotEvalToBus">''{0}'' does not resolve to a Simulink.Bus object for parameter ''{1}'' in ''{2}''.</entry>
    <entry key="UdtEmptyDataType">Parameter ''{0}'' cannot be empty.</entry>
    <entry key="UdtEvalsToFixdtWithNoScaling">''{0}'' resolves to a fixed-point data type with unspecified scaling for parameter ''{1}'' in ''{2}'', but such data type is not supported by this parameter.</entry>
    <entry key="UdtEvalsToUnsupportedBuiltin">''{0}'' resolves to a built-in data type, but the parameter ''{1}'' in ''{2}'' does not support this built-in data type.</entry>
    <entry key="UdtEvalsToUnsupportedEnum">''{0}'' resolves to an enumerated data type, but the parameter ''{1}'' in ''{2}'' does not support enumerated data types.</entry>
    <entry key="UdtEvalsToImplicitBus">''{0}'' resolves to a bus data type for parameter ''{1}'' in ''{2}''. However, if you want to specify a bus data type for a block data type parameter, you must do so explicitly by prefixing it with ''Bus: ''.</entry>
    <entry key="UdtEvalsToUnsupportedFixdt">''{0}'' resolves to a fixed-point data type for parameter ''{1}'' in ''{2}'', but fixed-point data types are not supported by this parameter.</entry>
    <entry key="UdtEvalsToUnsupportedFixdtScalingMode">''{0}'' resolves to a fixed-point data type for parameter ''{1}'' in ''{2}'', but the scaling mode of the resolved data type is not supported by this parameter.</entry>
    <entry key="UdtEvalsToUnsupportedHalfPrecisionType">''{0}'' resolves to half precision floating-point data type for parameter ''{1}'' in ''{2}'', but half precision floating-point data type is not supported by this parameter.</entry>
    <entry key="UdtEvalsToUnsupportedFixdtSignMode">''{0}'' resolves to a fixed-point data type for parameter ''{1}'' in ''{2}'', but the sign mode of the resolved data type is not supported by this parameter.</entry>
    <entry key="UdtEvalsToUnsupportedInheritRule">''{0}'' resolves to an inheritance rule, but the parameter ''{1}'' in ''{2}'' does not support this inheritance rule.</entry>
    <entry key="UdtInvBuiltin">''{0}'' specifies a built-in data type for parameter ''{1}'' which does not support it.</entry>
    <entry key="UdtInvEnumName">''{0}'' does not provide a valid enumerated data type name for parameter ''{1}''.</entry>
    <entry key="UdtInvBusName">''{0}'' does not provide a valid bus data type name for parameter ''{1}''.</entry>
    <entry key="UdtInvFixdt">''{0}'' specifies a fixed-point data type for parameter ''{1}'', but the syntax of the expression is incorrect.</entry>
    <entry key="UdtInvInherit">''{0}'' specifies an inheritance rule for parameter ''{1}'' which does not support it.</entry>
    <entry key="UdtInvalidValue">Invalid data type specification in ''{0}''.</entry>
    <entry key="UdtNoEnum">''{0}'' specifies an enumerated data type, but the parameter ''{1}'' does not support enumerated data types.</entry>
    <entry key="UdtNoBus">''{0}'' specifies a bus data type, but the parameter ''{1}'' does not support bus data types.</entry>
    <entry key="UdtReplaceExprHint">''{0}'' is not a valid data type for parameter ''{1}'' in ''{2}''. It needs to be replaced with a MATLAB expression that resolves to a valid Simulink data type object</entry>
    <entry key="UndefinedDataTypeToBeAliasedTo">''{0}'' cannot define data type ''{1}'' to be aliased to id {2,number,integer} because no data type with that id exists</entry>
    <entry key="UnscaledFixptTypeByBlkParam">The data type ''{0}'' specified by block parameter ''{1}'' at ''{2}'' is not valid here because no scaling information is available</entry>
    <entry key="WarnDownCastOfInterfacedVar"><![CDATA[Parameter {0} of ''{1}'' is being cast from data type ''{2}'' to the data type ''{3}''. Downcasts and signed/unsigned mismatches of tunable parameter expressions are not recommended in order to ensure consistent behavior between simulation and generated code<actions exclusiveFixIts="no"><action type="suppression"></action></actions>]]></entry>
    <entry key="WarningEnumSafeCastDetected"><![CDATA[Safe cast detected at time {0} in ''{1}''.<actions exclusiveFixIts="no"><action type="suppression"></action></actions>]]></entry>
    <entry key="WarningOverFlowDetected"><![CDATA[Wrap on overflow detected at time {0} in ''{1}''.<actions exclusiveFixIts="no"><action type="suppression"></action></actions>]]></entry>
    <entry key="WarningSaturationOccurred"><![CDATA[Saturate on overflow detected at time {0} in ''{1}''.<actions exclusiveFixIts="no"><action type="suppression"></action></actions>]]></entry>
    <entry key="AbsTimeOverflowDetected"><![CDATA[Overflow condition detected while evaluating absolute time at {0} for model ''{1}''. This indicates the simulation time is greater than the ''Application life span(days)''.<actions exclusiveFixIts="no"><action type="suppression"></action></actions>]]></entry>
    <entry key="RTWOverFlowDetected"><![CDATA[Overflow detected while evaluating the output of ''{0}''.<actions exclusiveFixIts="no"><action type="suppression"></action></actions>]]></entry>
    <entry key="RTWEnumSafeCastDetected"><![CDATA[Safe cast detected while evaluating the output of ''{0}''.<actions exclusiveFixIts="no"><action type="suppression"></action></actions>]]></entry>
    <entry key="NumericType_InvalidInput">Input must be of type ''embedded.numerictype''</entry>
    <entry key="NumericType_ScaledDoubleType">Invalid datatype ''Scaled Double'' for Simulink.NumericType object</entry>
    <entry key="EnumDataTypeNotSupportMinMax">Minimum and maximum are not supported for enumerated data type ''{0}''</entry>
    <entry key="EnumDataTypeNotSupportMinMaxOnBusElement">Minimum and maximum are not supported for enumerated data type ''{0}'' on element ''{1}''</entry>
    <entry key="StringDataTypeNotSupportMinMaxOnBusElement">Minimum and maximum are not supported for string data type on element ''{0}''</entry>
    <entry key="BusDataTypeNotSupportMinMaxOnBusElement">Minimum and maximum are not supported for bus data type. Specify minimum and maximum on leaf elements of bus object ''{0}'' on element ''{1}''</entry>
    <entry key="BusElement_Inconsistent">Inconsistent element specification</entry>
    <entry key="BusElementMinValueMustBeFiniteRealDoubleScalar">Minimum on element ''{0}'' must be a finite real double scalar value</entry>
    <entry key="BusElementMaxValueMustBeFiniteRealDoubleScalar">Maximum on element ''{0}'' must be a finite real double scalar value</entry>
    <entry key="SignalTypeMinValueMustBeFiniteRealDoubleScalar">Minimum of a Signal Type object must be a finite real double scalar value</entry>
    <entry key="SignalTypeMaxValueMustBeFiniteRealDoubleScalar">Maximum of a Signal Type object must be a finite real double scalar value</entry>
    <entry key="BusElementMinGreaterThanMax">Minimum ({0}) is greater than maximum ({1}) on element ''{2}''</entry>
    <entry key="BusElementMinIsOutOfDTRange">Minimum ({0}) is out of data type range [{1}, {2}] on element ''{3}''</entry>
    <entry key="BusElementMaxIsOutOfDTRange">Maximum ({0}) is out of data type range [{1}, {2}] on element ''{3}''</entry>
    <entry key="CustomDataTypeNotSupportMinMax">Minimum and maximum are not supported for data type ''{0}'' on element ''{1}''</entry>
    <entry key="StringType_InvalidMaxLength">Maximum length argument must be an integer from {0} to {1}, inclusive, or a string representing a valid symbolic dimension expression that can evaluate to an integer from {0} to {1}.</entry>
    <entry key="StringType_NotSupportedInAliasType">AliasType does not support string data type as base type.</entry>
    <entry key="StringType_ExprMustResolveSymDimsId">
        <![CDATA[
                 The expression ''{0}'' of the maximum length argument in the "stringtype" function must be a valid symbolic dimension expression. For more information, see <a href="matlab:helpview(''ecoder'',''dim_variants_for_array_sizes'')">symbolic dimension</a>.
        ]]>
    </entry>
    <entry key="StringType_SymbolicDimensionDisabled">Using symbolic variables for maximum length argument ''{0}'' of stringtype in model ''{1}'' is not supported because the model has 'Allow symbolic dimension specification' set to off or uses a non ERT target file. Numeric value of the expression is used for maximum length argument of the string data type.</entry>
    <entry key="StringType_ExprMustBeScalar">The expression ''{0}'' of the maximum length argument of the string data type must evaluate to a scalar.</entry>
    <entry key="StringType_ExprMustBePositiveInteger">The expression ''{0}'' of the maximum length argument of the string data type must evaluate to a positive integer.</entry>
    <entry key="StringType_SymbolicDimensionIgnoredByStateflow1">Symbolic expression for maximum length argument of string data type is not supported for Stateflow blocks, MATLAB Function block and MATLAB System block. Numeric value of expression ''{0}'' is used in code generated by block ''{1}''.</entry>
    <entry key="StringType_SymbolicDimensionIgnoredByStateflow2">Symbolic expression for maximum length argument of string data type is not supported for Stateflow blocks, MATLAB Function block and MATLAB System block. Numeric value of the symbolic expression in string data type ''{0}'' is used in code generated by block ''{1}''.</entry>
    <entry key="StringType_NotSupportedInSlDataObject">DataType ''{0}'' resolved to a string data type, which is not supported by {1} object.</entry>
    <entry key="SpecifyParamsForBestPrecisionMode">Best-precision mode has been specified for the data type parameter ''{0}'' in ''{1}''. In order to calculate the best scaling correctly, at least one of the following block parameters should be specified: ''{2}''</entry>
    <entry key="InvalidDataScope">''{0}'' is not a valid value for DataScope. Values must be one of ''Auto'', ''Exported'', or ''Imported''</entry>
    <entry key="InvalidImageTypeName">''{0}'' is not a valid name for an image type. Names must be of the form ''Image_COLORFORMAT_(Row|Col)_UNDERLYINGCLASS_(\\d+_)?\\d+_\\d+$'', where COLORFORMAT must be one of ''BGRA'', ''RGB'', ''BGR'', or ''Grayscale'', and UNDERLYINGCLASS must be one of ''int8'', ''uint8'', ''int16'', ''uint16'', ''int32'', ''uint32'', ''double'', ''single'' or ''boolean''</entry>
    <entry key="InvalidImageTypeColorFormat">''{0}'' is not a valid value for ColorFormat. Values must be one of ''BGRA'', ''RGB'', ''BGR'', or ''Grayscale''</entry>
    <entry key="InvalidImageTypeNumChannels">{0,number,integer} is not a valid number of channels for the ColorFormat ''{1}''; the expected number of channels is {2,number,integer}</entry>
    <entry key="InvalidImageTypeNumChannels2">{0,number,integer} is not a valid number of channels for the ColorFormat ''{1}''; the expected number of channels is greater than zero</entry>
    <entry key="InvalidImageTypeNumRows">{0} is not a valid number of rows; the expected number of rows is an integer greater than zero</entry>
    <entry key="InvalidImageTypeNumConstructorArgs">{0,number,integer} is not a valid number of arguments to the ImageType constructor. Supported constructors are Simulink.ImageType() and Simulink.ImageType(ROWS, COLUMNS, NUMCHANNELS, Name, Value), where supported name, values pairs are ClassUnderlying, ColorFormat, and Layout.</entry>
    <entry key="InvalidImageTypeNumCols">{0} is not a valid number of cols; the expected number of cols is an integer greater than zero</entry>
    <entry key="InvalidImageTypeLayout">''{0}'' is not a valid value for Layout. Values must be one of ''RowMajor'', or ''ColumnMajor''</entry>
    <entry key="InvalidImageTypeBaseType">''{0}'' is not a valid value for BaseType. Values must be one of ''Double'', ''Single'', ''int8'', ''uint8'', ''int16'', ''uint16'', ''int32'', ''uint32'', or ''boolean''</entry>
    <entry key="InvalidImageTypeDataScope">The DataScope of an image type must be set to ''Auto''</entry>
    <entry key="InvalidImageTypeHeaderFile">The HeaderFile of an image type must be set to ''''</entry>
    <entry key="ImageType_NotSupportedInAliasType">AliasType does not support image data type as base type.</entry>
    <entry key="BlockObjectDTONameClashEditTime">''{0}'' is not a valid identifier for parameter ''{1}'' in ''{2}''. Starting identifiers with ''dtoDbl'', ''dtoSgl'', or ''dtoScl'' is not allowed as this name space is reserved for internal use with data type override mode.</entry>
    <entry key="BlockObjectDTONameClashCompileTime">Potential name clash found for identifier ''{0}'' for parameter ''{1}'' in ''{2}''. This error is caused by one of two conditions. First, entering a parameter value that starts with ''dtoDbl'', ''dtoSgl'', or ''dtoScl'' is not allowed as this name space is reserved for internal use with data type override mode. Second, if your model has active data type override settings and the software has created overridden identifier ''{3}'', a variable cannot exist with this same name in any workspace visible to the model.</entry>
    <entry key="BlockObjectDTONameTooLong">The identifier ''{0}'' for parameter ''{1}'' in ''{2}'' is too long. The model has active data type override settings and the software has created overridden identifier ''{3}'' which exceeds maximum length of {4, number, integer}. Reduce the length of ''{0}'' identifier. </entry>
    <entry key="NoMatchingDataTypeConstructor">No constructor ''{0}'' with matching signature found.</entry>
    <entry key="setInvalidUse">You cannot use SET to change the properties of a {0} object; \n use dot notation instead.</entry>
    <entry key="UndefinedMethod">No method ''{0}'' with matching signature found for class ''{1}''.</entry>
    <entry key="AbstractAttribute">Abstract classes cannot be instantiated.  Class ''{0}'' is declared as Abstract.</entry>
    <entry key="OldDataTypeSpecificationBlock">A data type has been specified using the old structure format. Support for this format will be removed in a future release. Numeric type objects are the preferred form of specification.  To construct a Numeric Type object use NUMERICTYPE or FIXDT. To convert a legacy structure specification to a numeric type object see FIXDTUPDATE.  The data type was used by ''{0}''.</entry>
    <entry key="OldDataTypeSpecification">A data type has been specified using the old structure format. Support for this format will be removed in a future release. Numeric type objects are the preferred form of specification.  To construct a Numeric Type object use NUMERICTYPE or FIXDT. To convert a legacy structure specification to a numeric type object see FIXDTUPDATE.</entry>
    <entry key="StructToMultiBuses">Structured value of model argument ''{0}'' of ''{1}'' might be mapped to duplicates of bus type {2}. This may result in uncompilable code.</entry>
    <entry key="RefreshDataTypeInWorkspace">--- Refresh data types ---</entry>
    <entry key="DataTypeExpression">&lt;data type expression&gt;</entry>
    <entry key="HalfRapidAccelNotSupported">Rapid accelerator simulation is not supported when the model contains ''half-precision'' data type. </entry>
    <entry key="HalfGPUCodeNotSupported">GPU Code generation is not supported when the model contains ''half-precision'' data type in struct types. </entry>
    <entry key="HalfGPUMallocModeNotSupported">Malloc mode must be set to discrete for generating GPU code with ''half-precision'' data type.</entry>
    <entry key="HalfGPUComputeCapabilityNotSupported">Compute capability of 5.3 or higher is required for generating GPU code with ''half-precision'' data type. </entry>
    <entry key="HalfExternalModeNotSupported">When the model contains ''half-precision'' data types, external mode simulation is supported only if the transport layer of the communication channel uses XCP.</entry>
    <entry key="PointerExternalModeNotSupported">When the model contains ''pointer'' data types, external mode simulation is not supported.</entry>
    <entry key="HalfCPPCodegenNotSupported">C++ code generation is not supported when the model contains ''half'' data type. </entry>
    <entry key="ValueTypeDoesNotSupportBuses">Specifying Simulink.Bus object ''{0}'' as the data type of Simulink.ValueType object ''{1}'' is not supported.</entry>
    <entry key="ValueTypeDoesNotSupportBusesLocal">Specifying Simulink.Bus object as the data type of Simulink.ValueType object is not supported.</entry>
    <entry key="ValueTypeDoesNotSupportRecursiveValueType">Specifying Simulink.ValueType object as the data type of a Simulink.ValueType object is not supported.</entry>
    <entry key="ValueTypeDoesNotSupportEmptyDataType">The data type of a value type object may not be set to an empty string.</entry>
    <entry key="OpaqueDataTypeMismatch"><![CDATA[{4}
    <actions exclusiveFixIts="yes">
    <action type="fixit">
    <cmd>{0}(''{1}'',{2,number,integer},''{3,number,integer}'')</cmd>
    <txt>Set the output of {1} to match the input.</txt>
    </action>
    </actions>]]></entry>
    <entry key="OpaqueDataTypeMismatchFixed">Block ''{0}'' is now updated. Rerun the simulation.</entry>
  </message>
</rsccat>

<!-- LocalWords:  xml UTF CDATA Datatype datatype Downcasts nonvirtual dworks
     LocalWords:  fxptui MMO XCP
-->
