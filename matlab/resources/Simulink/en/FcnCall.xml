<?xml version="1.0" encoding="UTF-8" ?>
<!-- Copyright 2009-2024 The MathWorks, Inc. -->
<rsccat version="1.0" locale="en_US" product="Simulink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../../matlab/resources/schema/msgcat.xsd">
  <message>
<!-- Misc: FcnCall Connection -->
    <entry key="FcnCallConnMustBeSFcnOrCoreBlk">Function-call port of block ''{0}'' is connected to ''{1}'' which does not produce a function-call signal. Blocks that can produce function-call signals include Stateflow charts, root-level Inport blocks with parameter 'Output function call' selected, or S-functions.</entry>
    <entry key="FcnCallConnMustBeRootFcnCallInportBlk"><![CDATA[Function-call port of block ''{0}'' is connected to ''{1}'' which does not produce a function-call signal.
    <actions exclusiveFixIts="yes">
        <action type="fixit">
            <cmd>set_param_action(''{2}'', ''OutputFunctionCall'', ''on'');</cmd>
            <txt>Select 'Output function call' parameter on Inport block ''{2}''.</txt>
        </action>
        <action type="suggestion">
            <txt>Alternatively, use a Function-Call Generator, a Stateflow chart, or an S-function to produce a function-call signal.</txt>
        </action>
      </actions>]]>
    </entry>
    <entry key="FcnCallConnMustBeFromPort0">Function-call port of block ''{0}'' must be connected to a block whose output port produces a function-call signal. Blocks that can produce function-call signals include Stateflow charts, root-level Inport blocks with parameter 'Output function call' selected, or S-functions (which must produce the signal out of port 1 only). ''{1}'' is not producing a function-call signal.</entry>
    <entry key="InvFcnCallConn">Invalid "function-call" connection.</entry>
    <entry key="InvFcnCallConnEnd_FcnCallSysEnd"><![CDATA[Invalid connection ends with block ''{0}'' on <sldiag objui="inport" objparam="{1,number,integer}" objname="{0}">input port {1,number,integer}</sldiag>, element {2,number,integer}.]]></entry>
    <entry key="InvFcnCallConnStart_NonSFcnStart">Invalid connection starting from ''{0}'' (output port {1,number,integer}, element {2,number,integer}) is disallowed because it is not a valid function-call initiator. Blocks that can produce function-call signals include Stateflow charts, root-level Inport blocks, or S-functions.</entry>
    <entry key="InvFcnCallConn_MultSys"><![CDATA[Invalid function-call connection originating from function-call initiator ''{0}'' on <sldiag objui="outport" objparam="{1,number,integer}" objname="{3}">output port {1,number,integer}</sldiag>, element {2,number,integer}. The destination function-call block ''{3}'' resides within a nonvirtual subsystem. To fix the error, place the destination function-call block at (or above) the same level in the model hierarchy as the function-call initiator.]]></entry>
    <entry key="InvFcnCallConn_NonFcnCallEnd">Invalid connection ends with ''{0}'' which is illegal because it is not a function-call block.</entry>
    <entry key="InvFcnCallConn_SFcnStart">Function-call initiator ''{0}'' is attempting to invoke a function-call block on output port {1,number,integer}, element {2,number,integer} even though this port element has not been configured to output a function-call signal.</entry>
    <entry key="InvFcnCallConn_Async">Invalid connection starts with S-function ''{0}'', which is making a function call on output port element {1,number,integer}. An asynchronous function call generator must drive a function call port of a subsystem or a Model block. </entry>
    <entry key="InvFcnCallInport_Dst">Invalid function-call connection from Inport block ''{0}'' to function-call block ''{1}''. Cannot invoke a function-call from function-call initiator ''{2}'' that is outside nonvirtual subsystem ''{3}'' with the function-call block.</entry>
    <entry key="InvFcnCallInport_VarDst">Invalid function-call connection from Inport block ''{0}'' to Variant Source block or Variant Subsystem outport ''{1}''. Invoking a function-call from function-call initiator ''{2}'' that is outside nonvirtual subsystem ''{3}'' with function-call block is not supported.</entry>    
    <entry key="InvFcnCallInport_Src"><![CDATA[Invalid function-call connection originating from function-call initiator ''{0}'' on <sldiag objui="outport" objparam="{1,number,integer}" objname="{2,number,integer}">output port {1,number,integer}</sldiag> element {2,number,integer}. The function-call initiator cannot invoke a function-call block inside a nonvirtual subsystem ''{3}'' via the subsystem input port {4,number,integer}.]]></entry>
    <entry key="InvFcnCallConn_MdlRef_RefBld">Invalid function-call connection originating from function-call initiator ''{0}'' to port {1,number,integer} of Model block ''{2}''. The function-call initiator must reside at the same level in the model hierarchy as the Model block. If you want to keep the function-call initiator at a different level in the model hierarchy, change 'Function Packaging' for subsystem ''{3}'' to 'Inline'.</entry>
    <entry key="InvFcnCallSigToStream"><![CDATA[Unable to log signal that originates from <sldiag objui="outport" objparam="{0,number,integer}" objname="{1}">output port {0,number,integer}</sldiag> of block ''{1}'' because logging function-call signals is not supported. To stop logging the signal, ensure that it is not marked for signal logging, connected to a To Workspace block or Record block, or connected to an Outport block if output logging is enabled.]]></entry>
    <entry key="InvFcnCallSigToWks">The To Workspace block ''{0}'' is connected to a function-call signal.  To Workspace blocks do not support function-call signals.</entry>
    <entry key="InvVariantSrcInExportFcn">Variant Source block ''{0}'' with multiple input ports found in the root window of ''{1}''. Only single input port Variant Source blocks are supported in root window when the model is configured for export function.</entry>
    <entry key="FcnCallGeneratorNumOfIterationsMustBeScalar"><![CDATA[Invalid setting for Function-Call Generator block ''{0}''. <sldiag objui="blockdlg" objparam="{1}">''Number of iterations''</sldiag> must be scalar when <sldiag objui="blockdlg" objparam="{2}">''Disallow wide output''</sldiag> option is selected.]]></entry>
    <entry key="FcnCallGeneratorNumOfIterationsMustBePositive"><![CDATA[Invalid setting for Function-Call Generator block ''{0}''. Each element of <sldiag objui="blockdlg" objparam="{1}">''Number of iterations''</sldiag> parameter must be a positive integer.]]></entry>
    <entry key="FcnCallGeneratorUnsupportedEnablePortDataType">Data type ''{0}'' is not supported for enable input port of Function-Call Generator block ''{1}''. Data type must be double, single, int8, uint8, int16, uint16, int32, uint32, or boolean.</entry>
    <entry key="RootOutportCannotAcceptFcnCall">Root-level Outport block ''{0}'' cannot accept a function-call signal.</entry>
    <entry key="CannotMuxFcnCallRootInportWithOtherBlock">
      Root-level Inport block ''{0}'' is configured to output a function-call signal. Therefore, its output cannot be combined with output of ''{1}'' through block ''{2}''.
    </entry>
    <entry key="NoFCSSCycles">Function-call cycles are not supported. A function-call cycle occurs when a block containing function-call initiator blocks such as Stateflow Charts or S-function blocks directly or indirectly drives other function-call input ports of the same block.</entry>
    <entry key="FCSSCycle1">Output port {1} of block ''{0}'' drives input port {3} of block ''{2}''.</entry>
    <entry key="FCSSCycle2">Output port {1} of block ''{0}'' and output port {3} of block ''{2}'' drive input port {5} of block ''{4}''.</entry>
    <entry key="FCSSCycle3">Function-call output ports of {0}and ''{1}'' drive input port {3} of block ''{2}''.</entry>
    <entry key="MessageCannotBeFcnCallInpArg"><![CDATA[
      An invalid message signal is passed to <sldiag objui="inport" objparam="{0,number,integer}" objname="{1}">input port {0,number,integer}</sldiag> of ''{1}'' from <sldiag objui="outport" objparam="{2,number,integer}" objname="{3}">output port {2,number,integer}</sldiag> of ''{3}''. Passing a message signal to a function-call block from its initiators is not allowed.
    ]]></entry>

    <entry key="MessageCannotBeFcnCallRetVal"><![CDATA[
      An invalid message signal is passed to <sldiag objui="inport" objparam="{0,number,integer}" objname="{1}">input port {0,number,integer}</sldiag> of ''{1}'' from <sldiag objui="outport" objparam="{2,number,integer}" objname="{3}">output port {2,number,integer}</sldiag> of ''{3}''. Feeding back a message signal from a function-call block to its initiators is not allowed.
    ]]></entry>

    <entry key="UnresolvableRootDataPortGroupInLoop">
      <![CDATA[Cannot simulate this model in accelerator mode. Consider simulating the model in normal mode, or changing 'Task priority' parameter of Asynchronous Task Specification blocks ''{1}'' to non-empty values.
      <actions exclusiveFixIts="yes">
        <action type="fixit">
            <cmd>set_param_action(''{0}'', ''SimulationMode'', ''Normal'');</cmd>
            <txt>Change 'Simulation Mode' to 'Normal'.</txt>
        </action>
      </actions>]]>
    </entry>
    <entry key="NGSrcsForMdlBlkEventInitsInLoop">
      <![CDATA[A data dependency violation has been detected. When the Model block ''{0}'' has model event ports, its model initialize port has the highest priority, followed by model reset ports, model terminate port, and other function-call input ports. Therefore, the block ''{1}'' that drives one of model event ports should execute before ''{2}''. However, the data dependency between these two blocks violates this requirement. See <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''function_call_adaptation'')">help page</a> for details.]]>
    </entry>

    <entry key="NGSrcsForAsyncFcnCallInLoop">
      <![CDATA[A data dependency violation has been detected involving asynchronous function-call initiators and corresponding Rate Transition blocks, or subsystems or referenced models containing such Rate Transition blocks. See <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''rate_transitions_and_ansynchronous_blocks'')">help page</a> for details.]]>
    </entry>

    <entry key="NonGraphicalSrcsLoop">
      <![CDATA[A data dependency violation has been detected. See <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''function_call_adaptation'')">help page</a> for details.]]>
    </entry>

    <entry key="NGSrcForMultiRateInitsForExpFcnMdlRefInLoop">
      <![CDATA[When the Model block ''{1}'' references an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'', its function-call initiators must execute rate-monotonically. This implies that ''{2}'' driving its <sldiag objui="inport" objparam="{3}" objname="{1}">input port ''{3}''</sldiag> in a faster rate must execute before ''{4}'' that drives <sldiag objui="inport" objparam="{5}" objname="{1}">input port ''{5}''</sldiag> with a slower rate.]]>
    </entry>

    <entry key="NGSrcForSameRateInitsForIRTPortsInLoop">
      <![CDATA[Model block ''{0}'' has one or more 'Model events simulation' parameters selected. When a Model block has model event ports, its model initialize port has the highest priority, followed by model reset ports, model terminate port, and other function-call input ports. When two initiators execute in the same task, this implies that ''{1}'' driving <sldiag objui="inport" objparam="{2}" objname="{0}">input port ''{2}''</sldiag> of the referenced model must execute before ''{3}'' that drives its <sldiag objui="inport" objparam="{4}" objname="{0}">input port ''{4}''</sldiag>.]]>
    </entry>

    <entry key="NGSrcForSameRateInitsForAdaptedMdlRefInLoop">
      <![CDATA[Model block ''{0}'' has the <sldiag objui="blockdlg" objparam="ShowModelPeriodicEventPorts">'Schedule rates'</sldiag> parameter selected. Therefore, its function-call input ports must execute in the order of their sample times or task priorities. When two initiators execute in the same task, this implies that ''{1}'' driving <sldiag objui="inport" objparam="{2}" objname="{0}">input port ''{2}''</sldiag> of the referenced model must execute before ''{3}'' that drives its <sldiag objui="inport" objparam="{4}" objname="{0}">input port ''{4}''</sldiag>.]]>
    </entry>

    <entry key="TaskCausedNonGraphicalSrcsLoopSuggestion1">
      <![CDATA[
      <actions exclusiveFixIts="yes">
        <action type="fixit">
            <cmd>set_param_action(''{0}'', ''Solver'', ''FixedStepDiscrete'');set_param_action(''{0}'', ''SolverMode'', ''MultiTasking'');</cmd>
            <txt>Consider executing those function-call input ports in different tasks to fix this problem. One possible solution is to change model ''{0}'' to multitasking mode so that initiators with different sample times will execute in different tasks.</txt>
        </action>
     </actions>]]>
    </entry>

    <entry key="TaskCausedNonGraphicalSrcsLoopSuggestion2">
      <![CDATA[
      <actions exclusiveFixIts="yes">
        <action type="suggestion">
            <txt>Consider specifying different sample times for those initiators so that they execute in different tasks when model ''{0}'' is in multitasking mode.</txt>
        </action>
     </actions>]]>
    </entry>

    <entry key="NGSrcForMuxedFcnCallInLoop">
      ''{2}'' is to sort before ''{3}'' because they both drive input port {0,number,integer} of function-call block ''{1}'' through Mux block ''{4}''. When a function-call block is called by multiple initiators in the same task with their function-call output signals muxed together, the signal are scheduled in the order they are connected to the Mux block.
    </entry>
    <entry key="NGSrcForMergeFcnCallInLoop">
      ''{2}'' is to sort before ''{3}'' because they both drive input port {0,number,integer} of function-call block ''{1}'' through Merge block ''{4}''. When a function-call block is called by multiple initiators in the same task with their function-call output signals merged, the signal are scheduled in the order they are connected to the Merge block.
    </entry>
    <entry key="NGSrcForExpFcnMdlRootPortGroupInLoop">
      Specification on function-call root-level Inport block ''{0}'' indicates it should execute before ''{1}'' in the export-function model. The following factors impact the relative scheduling order of function-call root-level Inport blocks in an export-function model: block priorities, sample times specified, and port numbers.
    </entry>

<!-- Run Time Check / Periodic FcnCall -->
    <entry key="PeriodicFCSSMustBeCalledOnceWhenEnabled"><![CDATA[The function-call initiator executed function-call subsystem ''{0}'' multiple times on time step {1}. This periodic function-call subsystem must be invoked periodically once it is activated (enabled) and until it is terminated (disabled).
    <actions exclusiveFixIts="yes">
        <action type="suggestion">
            <txt>Consider adjusting the initiator to invoke the function-call periodically.</txt>
        </action>
        <action type="fixit">
            <cmd>set_param_action(''{2}'', ''SampleTimeType'', ''triggered'');</cmd>
            <txt>Alternatively, consider changing dialog parameter <sldiag objui="blockdlg" objparam="SampleTimeType">'Sample time type'</sldiag> of ''{2}'' from 'periodic' to 'triggered'.</txt>
        </action>
    </actions>]]>
    </entry>
    <entry key="PeriodicFcnCallMdlMustBeCalledOnceWhenEnabled"><![CDATA[The function-call initiator executed function-call Model block ''{0}'' multiple times on time step {1}. This periodic function-call block must be invoked periodically once it is activated (enabled) and until it is terminated (disabled).
    <actions exclusiveFixIts="yes">
        <action type="suggestion">
            <txt>Consider adjusting the initiator to invoke the function-call periodically.</txt>
        </action>
        <action type="suggestion">
            <txt>Alternatively, consider changing dialog parameter <sldiag objui="blockdlg" objparam="SampleTimeType">'Sample time type'</sldiag> of ''{2}'' from 'periodic' to 'triggered'.</txt>
        </action>
    </actions>]]>
    </entry>
    <entry key="PeriodicFCSSMustNotBeCalledWhenDisabled">Function-call block ''{0}'' must not be executed during the same time step that it is deactivated (disabled) by its function-call initiator because it has a periodic sample time. The function-call initiator both executed and disabled the function-call block on time step ''{1}''.</entry>
    <entry key="RootPeriodicFcnCallMustBeCalledOnceWhenEnabled"><![CDATA[The function-call initiator executed function-call block ''{0}'' multiple times on time step {1}. This periodic function-call block must be invoked periodically at a rate of {2} once it is activated (enabled) and until it is terminated (disabled).
    <actions exclusiveFixIts="yes">
        <action type="suggestion">
            <txt>Consider adjusting the initiator to invoke the function-call periodically.</txt>
        </action>
        <action type="suggestion">
            <txt>Alternatively, consider changing dialog parameter <sldiag objui="blockdlg" objparam="SampleTimeType">'Sample time type'</sldiag> of ''{3}'' from 'periodic' to 'triggered'.</txt>
        </action>
     </actions>]]>
    </entry>
    <entry key="RootPeriodicFcnCallMustBeCalledOnceWhenEnabled2">The function-call initiator executed function-call block ''{0}'' multiple times on time step {1}. This periodic function-call block must be invoked periodically at a rate of {2} once it is activated (enabled) and until it is terminated (disabled). Consider adjusting the initiator to invoke the function-call periodically.</entry>
    <entry key="RootPeriodicFcnCallMustBeCalledWhenEnabled2">The function-call initiator did not execute function-call block ''{0}'' on time step {1}. This periodic function-call block must be invoked periodically at a rate of {2} once it is activated (enabled) and until it is terminated (disabled). Consider adjusting the initiator to invoke the function-call periodically.</entry>
    <entry key="RootPeriodicFcnCallWithAbsTimeMustBeCalledWhenEnabled">The function-call initiator did not execute function-call block ''{0}'' on time step {1}. This periodic function-call block contains ''{3}'' using absolute or elapsed time and must be invoked periodically at a rate of {2} once it is activated (enabled) and until it is terminated (disabled). Consider adjusting the initiator to invoke the function-call periodically.</entry>
    <entry key="PeriodicEventPortCannotBeGrounded">When Model block ''{0}'' has the ''Schedule rates'' parameter selected and ''Schedule rates with'' is set to ''Ports'', its function-call input port ''{1}'' must be executed periodically when it is activated (enabled) by its function-call initiator because it has a periodic sample time. However, this function-call input port will never be invoked because it is not connected to an active initiator.</entry>
    <entry key="PeriodicEventPortMustBeCalledOnceWhenEnabled">The function-call initiator connected to input port ''{0}'' executed the Model block ''{1}'' multiple times on time step ''{2}''. When the Model block has the ''Schedule rates'' parameter selected and ''Schedule rates with'' is set to ''Ports'', it must be executed periodically once it is activated (enabled) by its function-call initiator until it is terminated (disabled).</entry>
    <entry key="PeriodicEventPortMustBeCalledWhenEnabled">The function-call initiator connected to input port ''{0}'' did not execute the Model block ''{1}'' on time step ''{2}''. When the Model block has the ''Schedule rates'' parameter selected and ''Schedule rates with'' is set to ''Ports'', it must be executed periodically once it is activated (enabled) by its function-call initiator until it is terminated (disabled).</entry>

    <entry key="AccExpFcnMdlPeriodicFcnCallMustBeCalledOnceWhenEnabled">
      The function-call initiator ''{2}'' executed the function-call input port ''{0}'' of the Model block ''{1}'' multiple times at time {3}. Inside the referenced model, the function-call block driven by corresponding input port of the Model block has been configured to a periodic function-call block. It must be executed periodically once it is activated (enabled) by its function-call initiator until it is terminated (disabled).
    </entry>

    <entry key="AccExpFcnMdlPeriodFCWithAbsElpsTMustBeCalledWhenEnabled">
      The function-call initiator ''{2}'' did not execute the function-call input port ''{0}'' of the Model block ''{1}'' at time {3}. The function-call block driven by corresponding input port of the Model block has been configured to a periodic function-call block. It contains ''{4}'' which is either a model block with ''Schedule rates'' parameter selected or uses absolute or elapsed time and must be executed periodically once it is activated (enabled) and until it is terminated (disabled).
    </entry>

    <entry key="ExpFcnMdlMustNotBeEnabledDuringSim">The model referenced by Model block ''{0}'' has a root inport which outputs a function-call signal. The function-call subsystems driven by the root inport must be enabled at the start of simulation, and should not be disabled or re-enabled during the simulation. However, at time {1}, the function-call signal originating from output port {2,number,integer} of ''{3}'' attempts to enable the function via input port {4,number,integer} of the Model block.</entry>

    <entry key="ExpFcnMdlMustNotBeDisabledDuringSim">The model referenced by Model block ''{0}'' has a root inport which outputs a function-call signal. The function-call subsystems driven by the root inport must be enabled at the start of simulation, and should not be disabled or re-enabled during the simulation. However, at time {1}, the function-call signal originating from output port {2,number,integer} of ''{3}'' attempts to disable the function via input port {4,number,integer} of the Model block.</entry>

    <entry key="ExplicitFCSSCalledWhenNotEnabled">Function-call initiator ''{0}'' attempted to execute function-call subsystem ''{1}'' while it was inactive (disabled) on time step ''{2}''. The function-call subsystem must be activated by a function-call initiator before execution can occur.</entry>
    <entry key="ExplicitFCSSDisabledWhenDisabled">Function-call initiator ''{0}'' attempted to redisable function-call subsystem ''{1}'' on time step ''{2}''. The function-call subsystem cannot be redisabled by the same function-call initiator; there is a flaw in the implementation of the function-call initiator.</entry>
    <entry key="ExplicitFCSSEnabledWhenEnabled">Function-call initiator ''{0}'' attempted to reenable function-call subsystem ''{1}'' on time step ''{2}''. The function-call subsystem cannot be reactivated by the same function-call initiator; there is a flaw in the implementation of the function-call initiator.</entry>
    <entry key="SfcnNotAdvCallingDisable">The function-call initiator ''{0}'' may not call ssDisableSystemWithTid since it has not been configured to be capable of such via ssSetExplicitFCSSCtrl.</entry>
    <entry key="SfcnNotAdvCallingEnable">The function-call initiator ''{0}'' may not call ssEnableSystemWithTid since it has not been configured to be capable of such via ssSetExplicitFCSSCtrl.</entry>

    <entry key="PeriodicFCSSCannotBeChildOfTriggeredFCSS"><![CDATA[Function-call subsystem ''{0}'' is configured to execute periodically. Therefore, it cannot be placed inside a triggered function-call subsystem or model ''{1}''.
    <actions exclusiveFixIts="yes">
        <action type="fixit">
            <cmd>set_param_action(''{2}'', ''SampleTimeType'', ''triggered'');</cmd>
            <txt>Consider changing dialog parameter <sldiag objui="blockdlg" objparam="SampleTimeType">'Sample time type'</sldiag> of ''{2}'' from 'periodic' to 'triggered'.</txt>
        </action>
        <action type="fixit">
            <cmd>set_param_action(''{3}'', ''SampleTimeType'', ''periodic'');</cmd>
            <txt>Alternatively, consider changing dialog parameter <sldiag objui="blockdlg" objparam="SampleTimeType">'Sample time type'</sldiag> of ''{3}'' to 'periodic'.</txt>
        </action>
     </actions>]]>
    </entry>
    <entry key="PeriodicFCSSCannotBeChildOfTriggeredFCSS2"><![CDATA[Function-call block ''{0}'' is configured to execute periodically. Therefore, it cannot be placed inside a triggered function-call subsystem or model ''{1}''.
    <actions exclusiveFixIts="yes">
        <action type="suggestion">
            <txt>Consider changing dialog parameter <sldiag objui="blockdlg" objparam="SampleTimeType">'Sample time type'</sldiag> of ''{2}'' from 'periodic' to 'triggered'.</txt>
        </action>
        <action type="fixit">
            <cmd>set_param_action(''{3}'', ''SampleTimeType'', ''periodic'');</cmd>
            <txt>Alternatively, consider changing dialog parameter <sldiag objui="blockdlg" objparam="SampleTimeType">'Sample time type'</sldiag> of ''{3}'' to 'periodic'.</txt>
        </action>
     </actions>]]>
    </entry>

    <entry key="PeriodicFCSSCannotBeChildOfTriggeredSS"><![CDATA[Function-call subsystem ''{0}'' is configured to execute periodically. Therefore, it cannot be placed inside a triggered subsystem ''{1}''.
    <actions exclusiveFixIts="yes">
        <action type="fixit">
            <cmd>set_param_action(''{2}'', ''SampleTimeType'', ''triggered'');</cmd>
            <txt>Consider changing dialog parameter <sldiag objui="blockdlg" objparam="SampleTimeType">'Sample time type'</sldiag> of ''{2}'' from 'periodic' to 'triggered'.</txt>
        </action>
     </actions>]]>
    </entry>
    <entry key="PeriodicFCSSCannotBeChildOfTriggeredSS2"><![CDATA[Function-call block ''{0}'' is configured to execute periodically. Therefore, it cannot be placed inside a triggered subsystem ''{1}''.
    <actions exclusiveFixIts="yes">
        <action type="suggestion">
            <txt>Consider changing dialog parameter <sldiag objui="blockdlg" objparam="SampleTimeType">'Sample time type'</sldiag> of ''{2}'' from 'periodic' to 'triggered'.</txt>
        </action>
     </actions>]]>
    </entry>

    <entry key="PeriodicFCSSCallerMustHaveDiscreteTs">
    Function-call subsystem ''{0}'' is configured to execute periodically. Therefore, it must be called by an initiator with a discrete sample time.
    </entry>

    <entry key="InvRootLvlPeriodicFcnCallPort"><![CDATA[Trigger Port block ''{0}'' has specified its dialog parameter 'Sample time type' to 'periodic'. Since this block is placed at the root level of the model, it is not allowed to set its parameter 'Sample time' to -1.
    <actions exclusiveFixIts="yes">
        <action type="suggestion">
            <txt>Consider specifying a discrete sample time.</txt>
        </action>
        <action type="fixit">
            <cmd>set_param_action(''{0}'', ''SampleTimeType'', ''triggered'');</cmd>
            <txt>Alternatively, consider changing dialog parameter <sldiag objui="blockdlg" objparam="SampleTimeType">'Sample time type'</sldiag> of ''{0}'' to 'triggered'.</txt>
        </action>
     </actions>]]>
    </entry>

    <entry key="InvRootInportFcnCallMultiIteration">
    Since the function-call root-level Inport block ''{0}'' has specified a discrete sample time ''{1}'', and none of function-call blocks it directly drives is set up to execute periodically, executing the function-call multiple times at a given sample time is not supported. However, the workspace variable specified as the external input has specified the block will invoke function-call multiple times at time ''{2}''. Consider either updating the workspace variable so that at any time step the function-call will be invoked only once, or set up any function-call subsystem this root-level Inport block directly drives to execute periodically, by specifying dialog parameter 'Sample time type' to 'periodic' on the Trigger Port block inside the function-call subsystem.
    </entry>

<!-- Run Time Check / Adapted model -->
    <entry key="AdaptedModelInvalidExecOrder1"><![CDATA[
    When the Model block ''{0}'' has the ''Schedule rates'' parameter selected and ''Schedule rates with'' is set to ''Ports'', all its function-call input ports must be invoked in the sequence of the task priorities of specified rates. Function-call <sldiag objui="inport" objparam="{1}" objname="{0}">input port ''{1}''</sldiag> was specified a discrete rate {2}, which has a higher priority than that of discrete rate {4} specified for function-call input port ''{3}''. However, at time {5}, function-call <sldiag objui="inport" objparam="{3}" objname="{0}">input port ''{3}''</sldiag> was invoked before ''{1}''.
    ]]></entry>

    <entry key="AdaptedModelInvalidExecOrder2"><![CDATA[
    When the Model block ''{0}'' has the ''Schedule rates'' parameter selected and ''Schedule rates with'' is set to ''Ports'', all its function-call input ports must be invoked in the sequence of the specified task priorities. Function-call <sldiag objui="inport" objparam="{1}" objname="{0}">input port ''{1}''</sldiag> was specified a task priority {2,number,integer} via an Asynchronous Task Specification block inside the referenced model, which has a higher priority than the task priority {4,number,integer} specified for function-call input port ''{3}''. However, at time {5}, function-call <sldiag objui="inport" objparam="{3}" objname="{0}">input port ''{3}''</sldiag> was invoked before ''{1}''.
    ]]></entry>

    <entry key="InvalidExecOrderForFcnsAdaptedToPartitions"><![CDATA[
    When the Model block ''{0}'' is scheduling rates with 'Schedule Editor', all the partitions corresponding to the async function-calls must be invoked in the sequence of the specified task priorities. Function-call <sldiag objui="inport" objparam="{1}" objname="{0}">input port ''{1}''</sldiag> was specified a task priority {2,number,integer} via an Asynchronous Task Specification block inside the referenced model, which has a higher priority than the function-call <sldiag objui="inport" objparam="{3}" objname="{0}">input port ''{3}''</sldiag> with task priority {4,number,integer}. However, at time {5}, partition ''{6}'' was invoked before ''{7}''.
    ]]></entry>

    <entry key="AdaptedModelInvalidExecOrder3"><![CDATA[
    When the Model block ''{0}'' has the ''Schedule rates'' parameter selected and ''Schedule rates with'' is set to ''Ports'', all its function-call input ports must be invoked in the sequence of the specified task priorities. Function-call <sldiag objui="inport" objparam="{1}" objname="{0}">input port ''{1}''</sldiag> was specified a task priority {2,number,integer} via an Asynchronous Task Specification block inside the referenced model, which has a higher priority than the discrete rate {4} specified for function-call input port ''{3}''. However, at time {5}, function-call <sldiag objui="inport" objparam="{3}" objname="{0}">input port ''{3}''</sldiag> was invoked before ''{1}''.
    ]]></entry>

    <!-- Port-Grouped Block -->
    <entry key="DataDepViolationInvolvingDataPortGroup">A data dependency violation is detected involving at least one function-call block driven by a root-level Inport block that outputs a function-call signal. In model ''{0}'', all blocks that are not driven by root-level Inport blocks producing function-call signals must execute either before or after the corresponding function-call invocations. Details of this data dependency violation are listed below:</entry>
    <entry key="DataDepViolationInvolvingDataPortGroup1">Block ''{0}'' needs to execute after the function-call block ''{1}'' driven by the root-level Inport block ''{2}''.</entry>
    <entry key="DataDepViolationInvolvingDataPortGroup1a">Block ''{0}'' needs to execute after the root-level Inport block ''{1}''.</entry>
    <entry key="DataDepViolationInvolvingDataPortGroup2">Block ''{0}'' needs to execute before the function-call block ''{1}'' driven by the root-level Inport block ''{2}''.</entry>
    <entry key="DataDepViolationInvolvingDataPortGroup2a">The function-call block ''{0}'' driven by the root-level Inport block ''{1}'' needs to execute before the function-call block ''{2}'' driven by another root-level Inport block ''{3}''.</entry>
    <entry key="DataDepViolationInvolvingFcnCallPortGroups">A data dependency loop is detected involving at least two function-call blocks driven by root-level Inport blocks producing function-call signals. Details of this loop are listed below:</entry>
    <entry key="DataDepViolationInvolvingFcnCallPortGroup">The function-call block ''{0}'' driven by root-level Inport block ''{1}'' needs to read output of function-call block''{2}'' that is driven by another root-level Inport block ''{3}''. However, the latter function-call block computes its output directly or indirectly from output of the former one.</entry>
    <entry key="DataDepViolationInvolvingFcnCallPortGroup2">The function-call block ''{0}'' driven by root-level Inport block ''{1}'' needs to execute after another root-level Inport block ''{2}''. However, the latter invokes function-call blocks that compute their outputs directly or indirectly from output of the former one.</entry>
    <entry key="NonInlinedSFcnCannotCallModelBlkWithFcnCallInput">Code generation is not supported for the non-inlined S-function ''{0}'' that is invoking a function-call input at input port {1,number,integer} of the Model block ''{2}''. Consider converting the non-inlined S-function ''{3}'' to an inlined S-function by providing a corresponding TLC implementation.</entry>
    <entry key="ExpFcnMdlInvUnionRateWithGroundSrc">
      <![CDATA[Unable to use <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'' as a model reference. Root level Outport block ''{1}'' must not mix grounded sources with signals from multiple exported functions, Initialize, Reset, or Terminate functions.]]>
    </entry>
<!-- Branched Function-Call -->
    <entry key="BranchedFunctionCallCannotProduceRetVal">A function-call signal, originating at initiator ''{0}'', is branched incorrectly. The function-call block ''{1}'', which is part of this branched function-call network, violates the following requirement: the block output signals may not be fed back directly to the initiator. Consider inserting a block to provide a delay on this feedback signal.</entry>
    <entry key="BranchedFunctionCallInvalidBranching"><![CDATA[A function-call signal, originating at element {0,number,integer} of <sldiag objui="outport" objparam="{1,number,integer}" objname="{2}">output port {1,number,integer}</sldiag> of initiator ''{2}'', is branched incorrectly. The function-call signal branch, connected to ''{3}'', needs to be recreated using a Function-Call Split block.]]></entry>
    <entry key="BranchedFunctionCallInvalidCommonInitiatorCallingFCSS"><![CDATA[A function-call signal, originating at <sldiag objui="outport" objparam="{0,number,integer}" objname="{1}">output port {0,number,integer}</sldiag> of initiator ''{1}'', is branched incorrectly. The function-call signal is fed to element {2,number,integer} and element {3,number,integer} of <sldiag objui="inport" objparam="{4}" objname="{5}">input port {4}</sldiag> of block ''{5}''. To use multiple initiators to call a function-call block, all function-call signals invoking the block must be unique.]]></entry>
    <entry key="BranchedFunctionCallInvalidCommonInitiatorCallingNonSS"><![CDATA[A function-call signal, originating at <sldiag objui="outport" objparam="{0,number,integer}" objname="{1}">output port {0,number,integer}</sldiag> of initiator ''{1}'', is branched incorrectly. The function-call signal is fed to element {2,number,integer} and element {3,number,integer} of <sldiag objui="inport" objparam="{4,number,integer}" objname="{5}">input port {4,number,integer}</sldiag> of block ''{5}''. To use multiple initiators to call a function-call block, all function-call signals invoking the block must be unique.]]></entry>
    <entry key="BranchedFunctionCallInvalidCompInfo"><![CDATA[A function-call signal, originating at <sldiag objui="outport" objparam="{0,number,integer}" objname="{1}">output port {0,number,integer}</sldiag> of initiator ''{1}'', is branched incorrectly. The function-call blocks ''{2}'' and ''{3}'' violate the requirement that all function-call blocks within a branched function-call network must reside at the same nonvirtual hierarchical level of the model.]]></entry>

    <entry key="BranchedFunctionCallInvalidFcnCallBlock"><![CDATA[A function-call signal, originating at <sldiag objui="outport" objparam="{0,number,integer}" objname="{1}">output port {0,number,integer}</sldiag> of initiator ''{1}'', is branched incorrectly. An S-function block ''{2}'' is supported in a branched function-call network, only when the model simulates in normal mode. Consider changing the simulation mode of this model to 'Normal', or using the following workaround: Insert a function-call subsystem with a function-call initiator such as a Stateflow chart inside it. Change the connections such that the original function-call signal from ''{3}'' is connected to the function-call input port of the inserted function-call subsystem, and let the function-call initiator inside the inserted function-call subsystem drive the S-function block.]]></entry>
    <entry key="BranchedFunctionCallInvalideMultipleCaller"><![CDATA[A function-call signal, originating at <sldiag objui="outport" objparam="{0,number,integer}" objname="{1}">output port {0,number,integer}</sldiag> of initiator ''{1}'', is branched incorrectly. The function-call block ''{2}'' is invoked by multiple initiators. Each function-call block within a branched function-call network must be invoked by a unique initiator.]]></entry>
    <entry key="BranchedFunctionCallInvalidWideFcnCall"><![CDATA[A function-call signal, originating at <sldiag objui="outport" objparam="{0,number,integer}" objname="{1}">output port {0,number,integer}</sldiag> of initiator ''{1}'', is branched incorrectly. The function call initiator ''{2}'' emits a function-call signal with multiple elements. All function-call initiators within a branched function-call network must emit scalar function-call signals.]]></entry>
    <entry key="NonInlinedSFcnCannotInvokeBranchedFcnCall">Code generation is not supported for the non-inlined S-function ''{0}'' that is invoking a branched function-call signal. Consider converting the non-inlined S-function to an inlined S-function by providing a corresponding TLC implementation.</entry>

<!-- Function-Call Feedback Latch -->
    <entry key="FcnCallLatchDisallowVarSizeInput">The input signal to the Function-Call Feedback Latch block ''{0}'' is either a variable-sized signal or a bus signal containing variable-sized signals. This block does not support variable-sized signal inputs.</entry>
    <entry key="FcnCallLatchInvalidDstBlock">The output of the Function-Call Feedback Latch block ''{0}'' is connected to an invalid destination ''{1}''. The output of a Function-Call Feedback Latch block must be connected to the data input port of a function-call block.</entry>
    <entry key="FcnCallLatchInvalidDstSFcn">The output of the Function-Call Feedback Latch block ''{0}'' is connected to an invalid destination ''{1}''. Connecting the data input port of an S-function block to the output of a Function-Call Feedback Latch block is allowed only when the model simulates in normal mode.</entry>
    <entry key="FcnCallLatchInvalidDstPort">The output of the Function-Call Feedback Latch block ''{0}'' is connected to an invalid destination port {1,number,integer} of block ''{2}''. The output of a Function-Call Feedback Latch block must be connected to a data input port of a function-call subsystem or model.</entry>
    <entry key="FcnCallLatchInvalidDstPortOfMdlBlk"><![CDATA[The output of the Function-Call Feedback Latch block ''{0}'' cannot be connected to <sldiag objui="inport" objparam="{1}" objname="{2}">input port ''{1}''</sldiag> of Model block ''{2}'' because this data input port is not associated with any function-call input port of ''{2}''.]]></entry>
    <entry key="FcnCallLatchInvalidDstPortOfExpSFcnBlk"><![CDATA[The output of the Function-Call Feedback Latch block ''{0}'' cannot be connected to <sldiag objui="inport" objparam="{1,number,integer}" objname="{2}">input port {1,number,integer}</sldiag> of S-Function block ''{2}'' configured to export function calls, because this S-Function block has more than one function-call input port.]]></entry>
    <entry key="FcnCallLatchInvalidDstPortOfFcnCallCoreBlk"><![CDATA[The output of the Function-Call Feedback Latch block ''{0}'' cannot be connected to <sldiag objui="inport" objparam="{1,number,integer}" objname="{2}">input port {1,number,integer}</sldiag> of block ''{2}'' configured to export function calls, because this block has more than one function-call input port.]]></entry>
    <entry key="FcnCallLatchInvalidDstWithMultiCaller">Connecting the output of the Function-Call Feedback Latch block ''{0}'' to a function-call subsystem ''{1}'' with a non-scalar function-call trigger signal is not allowed. To latch the input signal, select 'Latch input for feedback signals of function-call subsystem outputs' option on the corresponding Inport block instead. </entry>
    <entry key="FcnCallLatchInvalidMultiDsts">The output of Function-Call Feedback Latch block ''{0}'' is connected to multiple destinations. The output of a Function-Call Feedback Latch block must be connected to exactly one data input port of a function-call subsystem or model.</entry>
    <entry key="FcnCallLatchInvalidMultiDstsDetail"><![CDATA[<sldiag objui="inport" objparam="{0,number,integer}" objname="{1}">Input port {0,number,integer}</sldiag> of block ''{1}'' is connected to the output of Function-Call Feedback Latch block ''{2}''.]]></entry>
    <entry key="FcnCallLatchInvalidMultiDstBlocks">The output of Function-Call Feedback Latch block ''{0}'' is connected to multiple destination blocks. The output of a Function-Call Feedback Latch block must be connected to one function-call subsystem or model block.</entry>    
    <entry key="FcnCallLatchInvalidMultiDstsBlocksDetail"><![CDATA[ block ''{0}'' and block ''{1}'' are connected to the output of Function-Call Feedback Latch block ''{2}''.]]></entry>
    <entry key="FcnCallLatchInvalidMultiDstPortGroup">The output of Function-Call Feedback Latch block ''{0}'' is connected to input port ''{1}'' of Model block ''{2}'' driving multiple exported functions. The output of a Function-Call Feedback Latch block may be connected to ports driving at most one exported function.</entry>   
    <entry key="FcnCallLatchInvalidDst">The output of the Function-Call Feedback Latch block ''{0}'' must be connected to a data input of a function-call subsystem or model.</entry>
    <entry key="FcnCallLatchNoFeedbackSignal1a">The Function-Call Feedback Latch block ''{0}'' is not connected to a feedback signal involving function-call blocks, because its source block ''{1}'' is scheduled to execute before the destination block ''{2}'' in a branched function-call network. Consider removing the Function-Call Feedback Latch block.</entry>
    <entry key="FcnCallLatchNoFeedbackSignal1b">The Function-Call Feedback Latch block ''{0}'' is not connected to a feedback signal involving function-call blocks, because its source block ''{1}'' is the functional parent of the destination block ''{2}'', and therefore, the source block is to execute before the destination. Consider removing the Function-Call Feedback Latch block.</entry>
    <entry key="FcnCallLatchNoFeedbackSignal2">The Function-Call Feedback Latch block ''{0}'' is not connected to a feedback signal involving function-call blocks. Its source block ''{1}'' and destination block ''{2}'' are not driven by function-call signals from a common initiator. Consider removing the Function-Call Feedback Latch block.</entry>
    <entry key="FcnCallLatchNoFeedbackSignal3">The Function-Call Feedback Latch block ''{0}'' is not connected to a feedback signal involving function-call blocks. Its input is not from a function-call block. Consider removing the Function-Call Feedback Latch block.</entry>
    <entry key="FcnCallLatchRedundantSSInportLatched"><![CDATA[The Function-Call Feedback Latch block ''{0}'' placed in front of <sldiag objui="inport" objparam="{1,number,integer}" objname="{2}">input port {1,number,integer}</sldiag> of ''{2}'' is unnecessary, because the dialog parameter 'Latch input for feedback signals of function-call subsystem outputs' on ''{3}'' is also selected. Consider either removing the Function-Call Feedback Latch block or clearing the dialog parameter.]]></entry>
    <entry key="FcnCallLatchRedundantSimulinkFcnLatched"><![CDATA[The Function-Call Feedback Latch block ''{0}'' placed in front of <sldiag objui="inport" objparam="{1,number,integer}" objname="{0}">input port {1,number,integer}</sldiag> of Simulink function ''{2}'' is unnecessary, because the Simulink Function block already latches all its input signals. Consider removing the Function-Call Feedback Latch block.]]></entry>
    <entry key="FcnCallLatchRedundantSimulinkFcnInMdlRefLatched"><![CDATA[The Function-Call Feedback Latch block ''{0}'' is unnecessary. The block is placed in front of <sldiag objui="inport" objparam="{1}" objname="{2}">input port ''{1}''</sldiag> of the Model block ''{2}'' that has Simulink function ''{3}'' inside the referenced model and the Simulink Function block already latches all its input signals. Consider removing the Function-Call Feedback Latch block.]]></entry>
    <entry key="FcnCallLatchRedundantMdlRefInportLatched"><![CDATA[The Function-Call Feedback Latch block ''{0}'', placed in front of <sldiag objui="inport" objparam="{1}" objname="{0}">input port ''{1}''</sldiag> of ''{2}'', is unnecessary, because the dialog parameter 'Latch input for feedback signals of function-call subsystem outputs' is also selected on the root-level Inport block inside the referenced model. Consider either removing the Function-Call Feedback Latch block or clearing the dialog parameter.]]></entry>
    <entry key="FcnCallLatchInvalidWideFcnCall">The output of the Function-Call Feedback Latch block ''{0}'' cannot be connected to a function-call block ''{1}''. This configuration is incorrect because ''{1}'' is called by the function-call initiator ''{2}'', which emits a function-call signal with multiple elements. The output of a Function-Call Feedback Latch block must be connected to a function-call block invoked by a function-call initiator that emits a scalar function-call signal.</entry>
    <entry key="FcnCallLatchCannotWorkWithNonInlinedSFcn">Code generation is not supported for the non-inlined S-function ''{0}'' that is invoking a function-call block that is used in combination with Function-Call Feedback Latch block ''{1}''. Consider converting the non-inlined S-function ''{2}'' to an inlined S-function by providing a corresponding TLC implementation.</entry>

<!-- Function-Call Split -->
<entry key="FcnCallSplitBlkHasInvalidSrc"><![CDATA[The Function-Call Split block ''{0}'' must be driven by a function-call initiator. However, the input of this block comes from <sldiag objui="outport" objparam="{1,number,integer}" objname="{2}">output port {1,number,integer}</sldiag> of block ''{2}'', which is not a function-call signal.]]></entry>
<entry key="FcnCallSplitDisallowVarSizeInput">The input signal to the Function-Call Split ''{0}'' is a variable-sized signal. This block does not support variable-sized signal inputs.</entry>
<entry key="FcnCallSplitDisallowsCompositeDims">The input to the Function-Call Split ''{0}'' contains multiple elements. This block only supports a scalar function-call input.</entry>

<!-- Function-Call Execution -->
    <entry key="BlockRunFcnCallError">
      Block ''{0}'' had an error during function-call invocation:\n{1}
    </entry>
    <entry key="BlockDisableFcnCallError">
      Block ''{0}'' had an error during function-call disabling:\n{1}
    </entry>
    <entry key="BlockEnableFcnCallError">
      Block ''{0}'' had an error during function-call enabling:\n{1}
    </entry>

<!-- Model Entry Point Functions -->
    <entry key="InvalidMdlInitFcnCall">Error executing function-call at the model initialize port of Model block ''{0}'' at time {1}. The model terminate port must be called before the Model block can be initialized again. You may choose to hide the model terminate port to allow Simulink to handle the model terminate event automatically.</entry>
    <entry key="InvalidMdlResetFcnCall">Error executing function-call at the model reset port ''{0}'' of Model block ''{1}'' at time {2}. The Model block must be initialized via the model initialize port before any other function-call can be executed. You may choose to hide the model initialize port to allow Simulink to handle the model initialize event automatically.</entry>
    <entry key="InvalidMdlTermFcnCall">Error executing function-call at the model terminate port of Model block ''{0}'' at time {1}. The Model block must be initialized via the model initialize port before any function-call can be executed. You can choose to hide the model initialize port to allow Simulink to handle the model initialize event automatically.</entry>
    <entry key="InvalidNonMdlEventFcnCall"><![CDATA[Error executing function-call at <sldiag objui="inport" objparam="{0}" objname="{1}">input port ''{0}''</sldiag> of Model block ''{1}'' at time {2}. The Model block must be initialized via the model initialize port before any function-call can be executed. Also, the Model block cannot be called by any function-call after it has been terminated via the model terminate port. You can choose to hide the model initialize and terminate ports to allow Simulink to handle the model initialize and terminate events automatically.]]></entry>
    <entry key="InvalidNonMdlEventSimulinkFcn">Error executing Simulink function ''{0}'' inside the model referenced by Model block ''{1}'' at time {2}. The Model block must be initialized via the model initialize port before any function-call can be executed. Also, the Model block cannot be called by any function-call after it has been terminated via the model terminate port. You can choose to hide the model initialize and terminate ports to allow Simulink to handle the model initialize and terminate events automatically.</entry>

<!-- Model Reference -->
    <entry key="FcnCallPortMustBeDrivenByAsyncFcnCaller">The function call input port ''{0}'' of model block ''{1}'' must be driven by an asynchronous function call initiator.</entry>
    <entry key="FcnCallPortCannotBeDrivenByAsyncFcnCaller">The function call input port ''{0}'' of model block ''{1}'' cannot be driven by an asynchronous function call initiator.</entry>
    <entry key="NoRTWForRootFcnCallInport">Stand-alone code generation is not supported for model ''{0}'' because the model contains a root-level Inport block ''{1}'' that outputs a function-call signal.</entry>
    <entry key="NoVarStepSolverForRootFcnCall">
      <![CDATA[Variable-step solver is not supported for model ''{0}'' because the model contains a root-level Inport block ''{1}'' that outputs a function-call signal.
      <actions exclusiveFixIts="yes">
        <action type="fixit" id="SolverParameterFixedStepFix">
          <cmd>set_param_action(''{0}'', 'Solver', 'FixedStepDiscrete');</cmd>
          <txt>Consider setting the configuration parameter <sldiag objui="configset" objparam="SolverType" objname="{0}">''Solver selection'' > ''Type''</sldiag> to ''Fixed-step''.</txt>
        </action>
      </actions>]]>
    </entry>
    <entry key="NoVarStepSolverForSimulinkFunction">
      <![CDATA[Variable-step solver is not supported for model ''{0}'' because the model exports a Simulink function.
      <actions exclusiveFixIts="yes">
        <action type="fixit">
          <cmd>set_param_action(''{0}'', 'Solver', 'FixedStepDiscrete');</cmd>
          <txt>Consider setting the configuration parameter <sldiag objui="configset" objparam="SolverType" objname="{0}">''Solver selection'' > ''Type''</sldiag> to ''Fixed-step''.</txt>
        </action>
      </actions>]]>
    </entry>
    <entry key="NoVarStepSolverForSWArchModel">
      <![CDATA[Variable-step solver is not supported for software architecture model ''{0}''.
      <actions exclusiveFixIts="yes">
        <action type="fixit">
          <cmd>set_param_action(''{0}'', 'Solver', 'FixedStepDiscrete');</cmd>
          <txt>Consider setting the configuration parameter <sldiag objui="configset" objparam="SolverType" objname="{0}">''Solver selection'' > ''Type''</sldiag> to ''Fixed-step''.</txt>
        </action>
      </actions>]]>
    </entry>
    <entry key="NoModelRefMinAlgLoopForSimulinkFunction"><![CDATA[Invalid setting for 'Minimize artificial algebraic loop occurrences' option in Model Referencing pane of Configuration Parameters dialog box for model ''{0}'' that exports a Simulink function.
    <actions exclusiveFixIts="yes">
        <action type="fixit">
          <cmd>set_param_action(''{0}'', 'ModelReferenceMinAlgLoopOccurrences', 'off');</cmd>
          <txt>Clear Configuration Parameters option 'Minimize artificial algebraic loop occurrences'.</txt>
        </action>
      </actions>]]></entry>
    <entry key="NoModelRefMinAlgLoopForRootFcnCallInport"><![CDATA[Invalid setting for 'Minimize artificial algebraic loop occurrences' option in Model Referencing pane of Configuration Parameters dialog box for model ''{0}'' containing a root-level Inport block ''{1}'' that outputs a function-call signal.
    <actions exclusiveFixIts="yes">
        <action type="fixit">
          <cmd>set_param_action(''{0}'', 'ModelReferenceMinAlgLoopOccurrences', 'off');</cmd>
          <txt>Clear Configuration Parameters option 'Minimize artificial algebraic loop occurrences'.</txt>
        </action>
      </actions>]]></entry>
    <entry key="NoModelRefMinAlgLoopForSWArchMdl"><![CDATA[Invalid setting for 'Minimize artificial algebraic loop occurrences' option in Model Referencing pane of Configuration Parameters dialog box for software architecture model ''{0}''.
    <actions exclusiveFixIts="yes">
        <action type="fixit">
          <cmd>set_param_action(''{0}'', 'ModelReferenceMinAlgLoopOccurrences', 'off');</cmd>
          <txt>Clear Configuration Parameters option 'Minimize artificial algebraic loop occurrences'.</txt>
        </action>
      </actions>]]></entry>
	<entry key="SWArchModelRefMustBeFcnCallAtRoot">Unable to compile model ''{0}''. Trigger type of root-level trigger ports in software architectures must be function-call.</entry>
    <entry key="MultiInstanceFcnCallInport"><![CDATA[''Configuration Parameters > Model Referencing > Total number of instances allowed per top model'' is set to ''Multiple'' for model ''{0}''. Block ''{1}'' of this model is a root-level Inport block that outputs a function-call signal. A model that contains any function-call root-level Inport blocks cannot be configured to be referenced multiple times.
    <actions exclusiveFixIts="yes">
        <action type="fixit">
            <cmd>configset.internal.fixIt(''{0}'',''ModelReferenceNumInstancesAllowed'',''Single'')</cmd>
            <txt>Consider setting the configuration parameter <sldiag objui="configset" objparam="ModelReferenceNumInstancesAllowed" objname="{0}">Total number of instances allowed per top model</sldiag> to ''One''.</txt>
        </action>
    </actions>]]>
    </entry>
    <entry key="InvFcnCallerBlockInAlgLoop">Detected an algebraic loop containing a Function Caller block ''{0}''. Function Caller blocks are not allowed in algebraic loops.</entry>
    <entry key="InvFcnCallMdlRefInAlgLoop">Detected an algebraic loop containing a Model block ''{0}'' (referencing model ''{1}'') that has at least one function-call input signal. Such Model blocks are not allowed in algebraic loops.</entry>
    <entry key="FcnCallModelRefInvDiagSettings">The current diagnostic settings for model ''{0}'' are not valid because the model contains Model block ''{1}'' and the referenced model ''{2}'' contains a root-level Inport block that outputs a function-call signal. See errors reported below for details.</entry>
    <entry key="FcnCallRootInportInvDiagSettings">The current diagnostic settings for model ''{0}'' are not valid because the model contains root-level Inport block ''{1}'' that outputs a function-call signal. See errors reported below for details.</entry>
    
    <entry key="FcnCallRootInvMultiTaskRateTransMsg"><![CDATA[The <sldiag objui="configset" objparam="MultiTaskRateTransMsg" objname="{0}">''Multitask data transfer''</sldiag> option in the Sample Time Diagnostics pane of the Configuration Parameters dialog box for model ''{0}'' is not set to ''error''.
    <actions exclusiveFixIts="no">
        <action type="fixit">
            <cmd>set_param_action(''{0}'', ''MultiTaskRateTransMsg'', ''error'');</cmd>
            <txt>Set <sldiag objui="configset" objparam="MultiTaskRateTransMsg" objname="{0}">''Multitask data transfer''</sldiag> to ''error''.</txt>
        </action>
    </actions> 
    ]]>
    </entry>

   <entry key="FcnCallRootInvMultiTaskCondExecSysMsg"><![CDATA[The ''Multitask conditionally executed subsystem'' option in the Sample Time Diagnostics pane of the Configuration Parameters dialog box for model ''{0}'' is not set  to ''error''.
    <actions exclusiveFixIts="no">
        <action type="fixit">
            <cmd>set_param_action(''{0}'', ''MultiTaskCondExecSysMsg'', ''error'');</cmd>
            <txt>Set ''Multitask conditionally executed subsystem'' in ''{0}'' to  ''error''.</txt>
        </action>
    </actions> 
    ]]>
    </entry>

    <entry key="FcnCallRootNeedSimplifiedInitMode"><![CDATA[The model ''{0}'' needs to be in Simplified initialization mode. For more information, see <a href="matlab:helpview([docroot '/simulink/ug/simplified-initialization-mode.html'])">Simplified initialization mode</a>.
    <actions exclusiveFixIts="yes">
    <action type="fixit">
    <cmd>configset.internal.fixIt(''{0}'',''UnderspecifiedInitializationDetection'',''Simplified'')</cmd>
    <txt>Set the parameter <sldiag objui="configset" objparam="UnderspecifiedInitializationDetection">'Underspecified initialization detection'</sldiag> in the Diagnostics page of the Configuration Parameters dialog to 'Simplified'.</txt>
    </action>
    </actions>
    ]]>
    </entry>

<!-- Export Function Model -->
    <entry key="InvalidAsyncLoggingForExportFcnMdl1">
      <![CDATA[Inside an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'', logging root-level Outport blocks or signals in Dataset format is not supported, when the Outport block or the signal is driven by function-call root-level Inport block with inherited sample time (-1). Consider either specifying a discrete sample time on ''{1}'', or changing the 'Format' parameter in 'Configuration Parameters' > 'Data Import/Export' > 'Save to workspace' to options other than 'Dataset'.]]>
    </entry>
    <entry key="InvalidAsyncLoggingForExportFcnMdl2">
      <![CDATA[Inside an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'', logging root-level Outport blocks or signals in Dataset format is not supported, when the Outport block or the signal is driven by Simulink function ''{1}''. Consider changing the 'Format' parameter in 'Configuration Parameters' > 'Data Import/Export' > 'Save to workspace' to options other than 'Dataset'.]]>
    </entry>

    <entry key="InvPartialSrcForMuxInExpFcnMdl"><![CDATA[
      Invalid partial element selection from <sldiag objui="outport" objparam="{2,number,integer}" objname="{3}">output port {2,number,integer}</sldiag> of ''{3}'' to <sldiag objui="inport" objparam="{1,number,integer}" objname="{0}">input port {1,number,integer}</sldiag> of Mux block ''{0}''. Any input signal of a Mux block feeding root-level Outport blocks in the export-function model must include all elements of the source output port. Consider removing any element selection block such as Selector or Demux blocks on the signal path.
    ]]></entry>

    <entry key="InvSameSrcsForMuxInExpFcnMdl"><![CDATA[
      Invalid connection from <sldiag objui="outport" objparam="{3,number,integer}" objname="{4}">output port {3,number,integer}</sldiag> of ''{4}'' to input ports {1,number,integer} and {2,number,integer} of Mux block ''{0}''. Input signals to a Mux block feeding root-level Outport blocks in the export-function model must come from different source output ports.
    ]]></entry>

    <entry key="InvStorageClassForMuxInExpFcnMdl"><![CDATA[
      Input signal to <sldiag objui="inport" objparam="{1,number,integer}" objname="{0}">input port {1,number,integer}</sldiag> of Mux block ''{0}'' cannot have a non-auto storage class when the Mux block is connected to root-level Outport blocks in an export-function model.
    ]]></entry>

    <entry key="InvalidCallingSequenceForExportFcnMdl">
      Model block ''{0}'' requires that function-call input port ''{1}'' execute before function-call input port ''{2}''. However, this execution order was violated at time {3}.
      <![CDATA[
          <actions exclusiveFixIts="yes">
              <action type="fixit">
                  <cmd>configset.internal.fixIt(''{4}'', ''EnableRefExpFcnMdlSchedulingChecks'', ''off'')</cmd>
                  <txt>To disable this error message, clear the parameter <sldiag objui="configset" objparam="EnableRefExpFcnMdlSchedulingChecks">'Enable strict scheduling checks for referenced models'</sldiag> in the Model Referencing page of the Configuration Parameters dialog.</txt>
              </action>
      </actions>]]>
    </entry>
    
    <entry key="PotentialExpFcnMdlWithReferenceBlock"><![CDATA[
    Model ''{0}'' contains blocks with library links. To determine if Model ''{0}'' is an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')"> export-function model</a> and its execution domain type, select 'Upgrade Advisor > Check Export Function models'.]]> </entry>

    <entry key="InvalidExpFcnDomain">''Export function'' execution domain is only applicable at the root level of a model.</entry>

    <entry key="InportSampleTimeMsg">Inport ''{0}'' has a sample time of {1}.</entry>
    <entry key="OutportSampleTimeMsg">Outport ''{0}'' has a sample time of {1}.</entry>
    <entry key="FunctionSampleTimeMsg">Function ''{0}'' has a sample time of {1}.</entry>

    <entry key="InvalidBranchingToMultiRootOutport">
      ''{0}'' is driven by the function-call root-level Inport block(s). Therefore, it is not allowed to branch the output signal from output port {1,number,integer} of this block to feed multiple root Outport blocks ''{2}'' and ''{3}''.
    </entry>

    <entry key="DiffTsBetweenRootAndNestedFcnCallPortGroupInExpFcnMdl">
      <![CDATA[Inside an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a>, the function-call signal to <sldiag objui="inport" objparam="{0}" objname="{1}">input port ''{0}''</sldiag> of ''{1}'' is directly driven by function-call signal from root-level Inport block ''{2}''. Therefore, these function-call signals must have the same sample time. However, the block ''{2}'' has specified the sample time of {3}, while the function-call signal to <sldiag objui="inport" objparam="{0}" objname="{1}">input port ''{0}''</sldiag> of ''{1}'' has set a sample time of {4}.]]>
    </entry>

    <entry key="DiffTsBetweenRootInportAndPeriodicFCSSInExpFcnMdl">
      <![CDATA[Inside an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a>, ''{0}'' is configured to a periodic function-call subsystem with sample time {1}. However, it is driven by the function-call root-level Inport block ''{2}'' that has specified a different sample time {3}.]]>
      <![CDATA[
      <actions exclusiveFixIts="yes">
        <action type="suggestion">
            <txt>Consider updating sample times to make them consistent.</txt>
        </action>
        <action type="fixit">
            <cmd>set_param_action(''{4}'', ''SampleTime'', ''-1'');</cmd>
            <txt>Alternatively, set <sldiag objui="blockdlg" objparam="SampleTimeType">'Sample time'</sldiag> parameter of Trigger Port block ''{4}'' to '-1'.</txt>
        </action>
      </actions>]]>
    </entry>
    <entry key="DiffTsBetweenRootInportAndPeriodicFCSSInExpFcnMdl2">
      <![CDATA[Inside an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a>, ''{0}'' is configured to a periodic function-call subsystem with sample time {1}. However, it is driven by the function-call root-level Inport block ''{2}'' that has specified a different sample time {3}.]]>
      <![CDATA[
      <actions exclusiveFixIts="yes">
        <action type="suggestion">
            <txt>Consider updating sample times to make them consistent.</txt>
        </action>
        <action type="suggestion">
            <txt>Alternatively, set <sldiag objui="blockdlg" objparam="SampleTimeType">'Sample time'</sldiag> parameter of Trigger Port block ''{4}'' to '-1'.</txt>
        </action>
      </actions>]]>
    </entry>

    <entry key="IndirectConnBetweenRootAndNestedFcnCallPortGroupInExpFcnMdl"><![CDATA[
      Inside the model referenced by Model block ''{0}'', the root-level Inport block corresponding to <sldiag objui="inport" objparam="{1}" objname="{0}">input port ''{1}''</sldiag> of the Model block has specified a non-inherited sample time {2}. In this case, the function-call signal to this input port of the Model block must be directly driven by the function-call root-level Inport block with the same sample time.
    ]]></entry>
    <entry key="ExpFcnMdlCompAndSpecifiedSampleTimeNotEqual">
      <![CDATA[Inside the model referenced by Model block ''{0}'', the function-call context driven by the function-call signal to its input port ''{1}'' has specified the sample time of {2}. However, the function-call initiator ''{3}'' has a different sample time of {4}.
       <actions exclusiveFixIts="yes">
           <action type="fixit">
               <cmd>configset.internal.fixIt(''{5}'', ''EnableRefExpFcnMdlSchedulingChecks'', ''off'')</cmd>
               <txt>To disable this error message, clear the parameter <sldiag objui="configset" objparam="EnableRefExpFcnMdlSchedulingChecks">'Enable strict scheduling checks for referenced models'</sldiag> in the Model Referencing page of the Configuration Parameters dialog.</txt>
           </action>
           <action type="suggestion">
               <txt>Alternatively, consider updating the sample time of the function-call initiator.</txt>
           </action>
        </actions>]]>
    </entry>
    <entry key="ExpFcnMdlCompAndSpecifiedSampleTimeMismatch"><![CDATA[
      Inside the model referenced by Model block ''{0}'', the function-call context driven by the function-call signal to its <sldiag objui="inport" objparam="{1}" objname="{0}">input port ''{1}''</sldiag> has specified the sample time of {2} on the dialog of corresponding Inport block. However, the function-call initiator ''{3}'' has a sample time of {4} that can not provide enough resolution. Consider changing sample time of {5} to a value such that the sample time {6} is its integral multiple.
    ]]></entry>

    <entry key="ExpFcnMdlCompAndSpecifiedSampleTimeMismatch2"><![CDATA[
      Inside the model referenced by Model block ''{0}'', the function-call context driven by the function-call signal to its <sldiag objui="inport" objparam="{1}" objname="{0}">input port ''{1}''</sldiag> has specified a discrete sample time of {2} on the dialog of corresponding Inport block. However, the function-call initiator ''{3}'' has an asynchronous sample time.
    ]]></entry>

    <entry key="ExpFcnMdlCompAndSpecifiedSampleTimeMismatch3"><![CDATA[
      Inside the model referenced by Model block ''{0}'', the function-call context driven by the function-call signal to its <sldiag objui="inport" objparam="{1}" objname="{0}">input port ''{1}''</sldiag> has specified the sample time of {2} on the dialog box of corresponding Inport block. However, it was invoked by the function-call initiator ''{3}'' at time {4}, that is not a multiple of the specified sample time.
    ]]></entry>

    <entry key="InvalidSampleTimeSetOnRootDataOutportInExpFcnMdl">
      <![CDATA[Invalid sample time {0} for Outport block ''{1}'' at the root level of an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> or a software architecture model. Sample time of the block must be set to inherited (-1).]]>
      <![CDATA[
      <actions exclusiveFixIts="no">
        <action type="fixit">
            <cmd>set_param_action(''{1}'', ''SampleTime'', ''-1'');</cmd>
            <txt>Consider setting <sldiag objui="blockdlg" objparam="SampleTime">'Sample time'</sldiag> parameter on Outport block ''{1}'' to '-1'.</txt>
      </action>
      </actions>]]>
    </entry>

   <entry key="InvalidSampleTimeSetOnRootDataInportInExpFcnMdl">
      <![CDATA[It is not allowed to set sample time of {0} on the root-level Inport block ''{1}''. When a data root-level Inport block is inside an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a>, the sample time of the block must be inherited (-1).]]>
      <![CDATA[
      <actions exclusiveFixIts="no">
        <action type="fixit">
            <cmd>set_param_action(''{1}'', ''SampleTime'', ''-1'');</cmd>
            <txt>Consider setting <sldiag objui="blockdlg" objparam="SampleTime">'Sample time'</sldiag> parameter on Inport block ''{1}'' to '-1'.</txt>
        </action>
      </actions>]]>
    </entry>

    <entry key="InvalidSampleTimeSetOnSynthRootDataInportInExpFcnMdl">
       <![CDATA[Sample time must be inherited (-1) for the Inport block that corresponds to In Bus Element block ''{0}'' at the root level of an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> or a software architecture model.
      <actions exclusiveFixIts="yes">      
      <action type="fixit" id="BEPInExportFunctionMdl" retvalue="false">
            <cmd>Simulink.internal.setInheritedSampleTimeForPortInExpFcnMdl(''{0}'');</cmd>
            <txt>Set <sldiag objui="blockdlg" objparam="SampleTime">'Sample time'</sldiag> to '-1' on all elements of the bus port that corresponds to In Bus Element block ''{0}''.</txt>
      </action>
      </actions>]]>
  </entry>

  <entry key="InvalidSampleTimeSetOnRootDataBEPInExpFcnMdl">
      <![CDATA[Sample time must be inherited (-1) for In Bus Element block ''{0}'' when it is at the root level of an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a>.]]>
  </entry>

  <entry key="InvalidSampleTimeSetOnRootFcnCallInportInExpFcnMdl">
      <![CDATA[It is not allowed to set sample time of {0} on the root-level Inport block ''{1}''. When a root-level Inport block outputs a function-call signal and is inside an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a>, the sample time of the block must be discrete or inherited (-1).]]>
      <![CDATA[
      <actions exclusiveFixIts="no">
      <action type="suggestion">
        <cmd>Simulink.internal.OpenBlockParamsDialog(''{1}'', ''SampleTime'')</cmd>
        <txt>Consider specifying <sldiag objui="blockdlg" objparam="SampleTime">'Sample time'</sldiag> parameter on Inport block ''{1}'' to '-1' or a discrete rate.</txt>
      </action>
      </actions>]]>
    </entry>

    <entry key="InvalidSampleTimeSetOnRootFcnCallInportInAsyncFcnCallMdl">
      It is not allowed to set sample time of {0} on the root-level Inport block ''{1}''. When a root-level Inport block outputs an asynchronous function-call signal by connecting to an Asynchronous Task Specification block, the sample time of the Inport block must be inherited (-1).
      <![CDATA[
      <actions exclusiveFixIts="no">
        <action type="fixit">
            <cmd>set_param_action(''{1}'', ''SampleTime'', ''-1'');</cmd>
            <txt>Consider setting <sldiag objui="blockdlg" objparam="SampleTime">'Sample time'</sldiag> parameter on Inport block ''{1}'' to '-1'.</txt>
      </action>
      </actions>]]>
    </entry>

    <entry key="InvalidPeriodicFCSSInExpFcnMdl">
      <![CDATA[Inside an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a>, to configure ''{0}'' to a periodic function-call block, it must be directly driven by a function-call root-level Inport block that has specified a discrete sample time.
      <actions exclusiveFixIts="yes">
        <action type="suggestion">
            <txt>Consider connecting the function-call input of this block directly to a function-call root-level Inport block and specify a discrete sample time on the Inport block.</txt>
        </action>
        <action type="fixit">
            <cmd>set_param_action(''{1}'', ''SampleTimeType'', ''triggered'');</cmd>
            <txt>Alternatively, consider changing dialog parameter <sldiag objui="blockdlg" objparam="SampleTimeType">'Sample time type'</sldiag> of ''{1}'' to 'triggered'.</txt>
        </action>
     </actions>]]>
    </entry>
    <entry key="InvalidPeriodicFCSSInExpFcnMdl2">
      <![CDATA[Inside an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a>, to configure ''{0}'' to a periodic function-call block, it must be directly driven by a function-call root-level Inport block that has specified a discrete sample time.
      <actions exclusiveFixIts="yes">
        <action type="suggestion">
            <txt>Consider connecting the function-call input of this block directly to a function-call root-level Inport block and specify a discrete sample time on the Inport block.</txt>
        </action>
        <action type="suggestion">
            <txt>Alternatively, consider changing dialog parameter <sldiag objui="blockdlg" objparam="SampleTimeType">'Sample time type'</sldiag> of ''{1}'' to 'triggered'.</txt>
        </action>
     </actions>]]>
    </entry>

    <entry key="PeriodicFcnCallInputMustBeScalar"><![CDATA[
      Inside the model referenced by Model block ''{0}'', the function-call subsystem directly driven by the function-call signal via <sldiag objui="inport" objparam="{1}" objname="{0}">input port {1}</sldiag> of the Model block is configured to a periodic function-call subsystem with sample time {2}. Therefore, the function-call signal to this input port must be a scalar signal. However, the signal to this input has a width of {3,number,integer}.
    ]]></entry>

    <entry key="InvExpFcnMdlInFcnCallSubsystem">
      <![CDATA[Model block ''{0}'' referencing model ''{1}'' has been improperly placed in the {2} subsystem ''{3}''. The referenced model must inherit a sample time in such a subsystem. However, the referenced model ''{4}'' is set up to <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export functions</a> so that it cannot inherit a sample time.]]>
    </entry>

    <entry key="ExpFcnMdlInFcnCallSubsystemMustInheritSampleTime">
      <![CDATA[Model block ''{0}'' has been improperly placed in the {1} subsystem ''{2}''. All function-call root inports in the referenced <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export function model</a> ''{3}'' must inherit sample time.]]>
    </entry>

    <entry key="RefExpCallMdlMustBeInRootOfExpFcnMdl">
      <![CDATA[Model block ''{0}'' referencing an export-function model ''{1}'' has been improperly placed inside the nonvirtual subsystem ''{2}''. When the parent model ''{3}'' is set up to <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export functions</a>, it can only reference another export-function model placed in the root level.]]>
    </entry>

    <entry key="FcnCallPortCannotResetState">
      <![CDATA[The Trigger Port block ''{0}'' has set its parameter 'State when enabling' to 'reset'. This block is inside function-call subsystem ''{1}'' directly driven by function-call root-level Inport block ''{2}'' in the <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{3}''. Since the function-call root-level Inport block inside an export-function model doesn't enable or disable function-call blocks it directly drives, the 'reset' option will have no effect.
      <actions exclusiveFixIts="yes">
        <action type="fixit">
            <cmd>set_param_action(''{0}'', ''StatesWhenEnabling'', ''held'');</cmd>
            <txt>Consider changing the parameter to 'held' to eliminate this warning.</txt>
        </action>
      </actions>]]>
    </entry>

    <entry key="OutportCannotResetInitVal">
      <![CDATA[The Outport block ''{0}'' has set its parameter 'Output when disabled' to 'reset'. This block is inside function-call subsystem ''{1}'' directly driven by function-call root-level Inport block ''{2}'' in the <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{3}''. Since the function-call root-level Inport block inside an export-function model doesn't enable or disable function-call blocks it directly drives, the 'reset' option will have no effect.]]>
      <![CDATA[
      <actions exclusiveFixIts="yes">
        <action type="fixit">
            <cmd>set_param_action(''{0}'', ''OutputWhenDisabled'', ''held'');</cmd>
            <txt>Consider changing the parameter to 'held' to eliminate this warning.</txt>
        </action>
      </actions>]]>
    </entry>

    <entry key="SWArchModelHasNoSimBehaviorForDirectlyConnectedRootIO1">
      Inside the software architecture model ''{0}'', root-level Outport block ''{2}'' does not copy the input from root-level Inport block ''{1}'' during simulation because Inport block ''{1}'' is connected to Outport block ''{2}'' through Interface Adapter block ''{3}''. Include the Interface Adapter block in a function if a signal copy is required during simulation.
    </entry>
    <entry key="SWArchModelHasNoSimBehaviorForDirectlyConnectedRootIO2">
      Inside the software architecture model ''{0}'', root-level Outport block ''{2}'' does not copy the input from root-level Inport block ''{1}'' during simulation because Inport block ''{1}'' is directly connected to Outport block ''{2}''. Connect these root-level Inport and Outport blocks through a function if a signal copy is desired in simulation.
    </entry>

    <entry key="AsyncFcnCallPortGroupsAccessingGlobalDSM"><![CDATA[
      Inside the model referenced by Model block ''{0}'', the function-call contexts driven by function-call signal to its <sldiag objui="inport" objparam="{1}" objname="{0}">input port ''{1}''</sldiag> with access to the global data store defined by the global Simulink.Signal object ''{2}'' is configured to execute in an asynchronous task. Global data stores accessed within a model must all execute in a single, periodic task.
    ]]></entry>

    <entry key="SimulinkFunctionPortGroupsAccessingGlobalDSM">
      Function ''{0}'' in Model block ''{1}'' is called with an asynchronous sampling time and contains a reader or writer to the global data store defined by the Simulink.Signal object ''{2}''. Global data stores accessed within a model must all execute in a single, periodic task.
    </entry>

    <entry key="MultiTsGlobalDSMAccessedByDescExpFcnMdls">
      <![CDATA[In model ''{0}'', the global data store defined by the global Simulink.Signal object ''{1}'' is accessed by blocks inside the models referenced by Model blocks ''{2}'' and ''{3}'', respectively. However, the accessor blocks have specified different sample times {4} and {5}, respectively. This can lead to a data integrity issue.
          <actions exclusiveFixIts = "yes">
             <action_catalog id="Simulink:SampleTime:DSMErrMsgFixits" ids="AdjustSampleTimes">
                 <arg>{1}</arg>
             </action_catalog>
             <action_catalog id="Simulink:SampleTime:DSMErrMsgFixits" ids="MultiTaskDSMMsgSetToNone">
                 <arg>{0}</arg>
             </action_catalog>
         </actions>
    ]]></entry>
    <entry key="MultiTsGlobalDSMAccessedByDescExpFcnMdls2">
      <![CDATA[In model ''{0}'', the global data store defined by the global Simulink.Signal object ''{1}'' is accessed by blocks inside the model referenced by Model block ''{2}''. However, the accessor blocks have specified different sample times {3} and {4}, respectively. This can lead to a data integrity issue.
         <actions exclusiveFixIts = "yes">
             <action_catalog id="Simulink:SampleTime:DSMErrMsgFixits" ids="AdjustSampleTimes">
                 <arg>{1}</arg>
             </action_catalog>
             <action_catalog id="Simulink:SampleTime:DSMErrMsgFixits" ids="MultiTaskDSMMsgSetToNone">
                 <arg>{0}</arg>
             </action_catalog>
         </actions>
    ]]></entry>

    <entry key="MultitaskRateTransitionBetweenExpFcnMdlPortGroupsErr"><![CDATA[
    In the model referenced by Model block ''{0}'', the function-call blocks driven by input ports ''{1}'' and ''{2}'' have a data transfer connection between them. However, they have different sample times {3} and {4}, which can lead to a data integrity issue.
      <actions exclusiveFixIts="yes">
        <action type="suggestion">
          <txt>Consider adjusting the sample times of function-call input signals.</txt>
        </action>
        <action type="fixit">
          <cmd>configset.internal.fixIt(''{5}'', ''MultiTaskRateTransMsg'', ''warning'')</cmd>
          <txt>To disable this error message, set the parameter <sldiag objui="configset" objparam="MultiTaskRateTransMsg">MultiTaskRateTransMsg</sldiag> in the Configuration Parameters dialog to 'warning'.</txt>
        </action>
      </actions>
      ]]>
    </entry>
    <entry key="MultitaskRateTransitionBetweenExpFcnMdlPortGroupsWarn">
    In the model referenced by Model block ''{0}'', the function-call blocks driven by input ports ''{1}'' and ''{2}'' have a data transfer connection between them. However, they have different sample times {3} and {4}, which can lead to a data integrity issue. Consider adjusting the sample times of function-call input signals.
    </entry>

    <entry key="MultitaskRateTransitionBetweenExpAndSLFcnPortGroupsErr"><![CDATA[
    In the model referenced by Model block ''{0}'', the function-call block triggered by <sldiag objui="inport" objparam="{1}" objname="{0}">input port {1}</sldiag> and the Simulink function ''{2}'' are connected. The two functions are invoked with different sample times {3} and {4}, which can lead to a data integrity issue.
      <actions exclusiveFixIts="yes">
        <action type="suggestion">
          <txt>Consider adjusting the sample times of function-call input signals.</txt>
        </action>
        <action type="fixit">
          <cmd>configset.internal.fixIt(''{5}'', ''MultiTaskRateTransMsg'', ''warning'')</cmd>
          <txt>To disable this error message, set the parameter <sldiag objui="configset" objparam="MultiTaskRateTransMsg">MultiTaskRateTransMsg</sldiag> in the Configuration Parameters dialog to 'warning'.</txt>
        </action>
      </actions>
      ]]>
    </entry>
    <entry key="MultitaskRateTransitionBetweenExpAndSLFcnPortGroupsWarn"><![CDATA[
    In the model referenced by Model block ''{0}'', the function-call block triggered by <sldiag objui="inport" objparam="{1}" objname="{0}">input port {1}</sldiag> and the Simulink function ''{2}'' are connected. The two functions are invoked with different sample times {3} and {4}, which can lead to a data integrity issue. Consider adjusting the sample times of function-call input signals.
    ]]></entry>

    <entry key="MultitaskRateTransitionBetweenSLFcnPortGroupsErr"><![CDATA[
    In the model referenced by Model block ''{0}'', the Simulink functions ''{1}'' and ''{2}'' are connected. The two functions are invoked with different sample times {3} and {4}, which can lead to a data integrity issue. Consider adjusting the sample times of blocks which invoke these functions.
      <actions exclusiveFixIts="yes">
        <action type="suggestion">
          <txt>Consider adjusting the sample times of function-call input signals.</txt>
        </action>
        <action type="fixit">
          <cmd>configset.internal.fixIt(''{5}'', ''MultiTaskRateTransMsg'', ''warning'')</cmd>
          <txt>To disable this error message, set the parameter <sldiag objui="configset" objparam="MultiTaskRateTransMsg">MultiTaskRateTransMsg</sldiag> in the Configuration Parameters dialog to 'warning'.</txt>
        </action>
      </actions>
      ]]>
    </entry>
    <entry key="MultitaskRateTransitionBetweenSLFcnPortGroupsWarn">
    In the model referenced by Model block ''{0}'', the Simulink functions ''{1}'' and ''{2}'' are connected. The two functions are invoked with different sample times {3} and {4}, which can lead to a data integrity issue. Consider adjusting the sample times of blocks which invoke these functions. Consider adjusting the sample times of function-call input signals.
    </entry>

    <entry key="UnionTsInputMultitaskRateTransMsgErr">
      Input port ''{0}'' of Model block ''{1}'' is connected to function-call contexts driven by different sample times {2}, respectively. This can lead to a data integrity issue.
      <![CDATA[
          <actions exclusiveFixIts="yes">
              <action type="suggestion">
                  <txt>Alternatively, consider splitting this input port into multiple ports to feed each function-call context separately.</txt>
              </action>
              <action type="fixit">
                  <cmd>configset.internal.fixIt(''{3}'', ''MultiTaskRateTransMsg'', ''warning'')</cmd>
                  <txt>To disable this error message, set the parameter <sldiag objui="configset" objparam="MultiTaskRateTransMsg">MultiTaskRateTransMsg</sldiag> in the Configuration Parameters dialog to 'warning'.</txt>
              </action>
      </actions>]]>
    </entry>
    <entry key="UnionTsInputMultitaskRateTransMsgWarn">
      Input port ''{0}'' of Model block ''{1}'' is connected to function-call contexts driven by different sample times {2}, respectively. This can lead to a data integrity issue. Consider splitting this input port into multiple ports to feed each function-call context separately.
    </entry>

    <entry key="UnionTsOutputMultitaskLoggingWarn">
      Output port ''{0}'' of Model block ''{1}'' has a sample time {2}, faster than sample times of the following function-call initiators or Simulink functions driving it. When the model executes in a multitasking mode, the value of output signal is logged or used by downstream blocks before the functions are invoked, causing a delay.
      <![CDATA[
          <actions exclusiveFixIts="yes">
              <action type="fixit">
                  <cmd>set_param_action(''{3}'', ''SolverMode'', ''SingleTasking'');</cmd>
                  <txt>Clear configuration parameter <sldiag objui="configset" objparam="EnableMultiTasking" objname="{0}">'Solver' > 'Treat each discrete rate as a separate task'</sldiag> option to change model ''{3}'' to execute in single-tasking mode.</txt>
              </action>
              <action type="suggestion">
                  <txt>Alternatively, use a single block to invoke all the functions driving this output port.</txt>
              </action>
      </actions>]]>
    </entry>
    <entry key="UnionTsOutputMultitaskLoggingWarnDetail1">
      Function-call initiator ''{0}'' has a sample time {1}.
    </entry>
     <entry key="UnionTsOutputMultitaskLoggingWarnDetail2">
      Simulink function ''{0}'' has a sample time {1}.
    </entry>
    <entry key="InvalidDstsForRootInportInDataPortGroup">
      <![CDATA[The root-level Inport block ''{0}'' is connected to nonvirtual block ''{1}'', which is not in any exported function. In an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a>, a root-level Inport block must be connected to one or more exported functions or left unconnected.]]>
    </entry>

    <entry key="InvalidSrcsForRootOutportInDataPortGroup">
      <![CDATA[The root-level Outport block ''{0}'' is driven by block ''{1}'', which is not in any exported function. In an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a>, a root-level Outport block must be driven by one or more exported functions or left unconnected.]]>
    </entry>

    <entry key="InvalidSrcsForRootOutportInMultiFcnCallPortGroups">
      <![CDATA[The root-level Outport block ''{0}'' is driven by function-call root-level Inport blocks ''{1}'' and ''{2}''. In an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a>, the input of the root-level Outport block driven by multiple function-call root-level Inport blocks must come from the full region of output of its source block.]]>
    </entry>

    <entry key="InvalidSrcsForRootOutportInMultiServerFcnCallPortGroups">
      <![CDATA[The root-level Outport block ''{0}'' is driven by Simulink functions ''{1}'' and ''{2}''. Inside an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a>, the input of the root-level Outport block driven by multiple Simulink Function blocks must come from the full region of output of its source block.]]>
    </entry>

    <entry key="InvalidSrcsForRootOutportInMixedFcnCallPortGroups">
      <![CDATA[The root-level Outport block ''{0}'' is driven by Simulink function ''{1}'' and function-call root-level Inport block ''{2}''. Inside an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a>, the input of the root-level Outport block driven by a Simulink Function block and function-call root-level Inport block must come from the full region of output of its source block.]]>
    </entry>

     <entry key="NonVirtBusCreatorDrvRegularRootOutportInExpFcnMdl">
      <![CDATA[Bus Creator block ''{1}'' must directly connect to a root-level Out Bus Element block because the Bus Creator block creates a nonvirtual bus and is at the root level of <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}''. Replace Outport block ''{2}'' with an Out Bus Element block.]]>
     </entry>
     <entry key="NonVirtBusCreatorInvDstInExpFcnMdl">
      <![CDATA[Bus Creator block ''{1}'' must directly connect to a root-level Out Bus Element block because the Bus Creator block creates a nonvirtual bus and is at the root level of <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}''.]]>
     </entry>
     <entry key="NonVirtBusCreatorInMultiFcnsInExpFcnMdl">
      <![CDATA[Inputs to Bus Creator block ''{1}'' must be driven by the same root-level function-call signal or Simulink function because the Bus Creator block creates a nonvirtual bus and is at the root level of <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}''.]]>
    </entry>

    <entry key="NonFcnCallBlkNotAllowedForExportFcn">
      <![CDATA[For nonvirtual block ''{1}'' of type ''{2}'' to be placed at the root level of <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'', the block must have a constant sample time.]]>
    </entry>

    <entry key="NonFcnCallBlkDisallowConstRateNotAllowedForExportFcn1"><![CDATA[
    Placing nonvirtual block ''{1}'' of type ''{2}'' at the root level of <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'' is not supported. 
    <actions exclusiveFixIts="yes">
        <action type="fixit" retvalue="false">
            <cmd>delete_block(''{1}'');</cmd>
            <txt>Delete block ''{1}'' from the root level of ''{0}''.</txt>
        </action>
     </actions>
    ]]>
    </entry>
    <entry key="NonFcnCallBlkDisallowConstRateNotAllowedForExportFcn2"><![CDATA[
    Placing nonvirtual block ''{1}'' of type ''{2}'' at the root level of <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'' is not supported. 
    <actions exclusiveFixIts="yes">
        <action type="fixit" retvalue="false">
            <cmd>delete_block(''{1}'');</cmd>
            <txt>Delete block ''{1}'' from the root level of ''{0}''.</txt>
        </action>
        <action type="fixit">
            <cmd>set_param_action(''{0}'', ''SetExecutionDomain'', ''off'');</cmd>
            <txt>If this model is not intended to be an export-function model, at the root level of model ''{0}'', open the Property Inspector. On the Execution tab, clear 'Set execution domain', or choose 'Domain' option other than 'Export function'.</txt>
        </action>
     </actions>
    ]]>
    </entry>

    <entry key="ConstBlkNotAllowedForExportFcnWithNonConstRate">
      <![CDATA[To place Constant block ''{1}'' at the root level of <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'', the 'Sample time' parameter of this block must be set to 'inf'.
          <actions exclusiveFixIts="yes">
              <action type="fixit" retvalue="false">
                  <cmd>set_param_action(''{1}'', ''SampleTime'', ''inf'');</cmd>
                  <txt>Set 'Sample time' parameter of ''{1}'' to 'inf'.</txt>
              </action>
      </actions>]]>
    </entry>

    <entry key="NonVirtualSubsysNotAllowedForExportFcn">
      <![CDATA[To place nonvirtual subsystem ''{1}'' at the root level of <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'', the block must have a constant sample time.]]>
    </entry>

    <entry key="TunableConstTsBlkNotAllowedForExpFcnMdlWithSuggestion1">
      <![CDATA[In the root level of <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'', block ''{1}'' has an input signal originated from Constant blocks with tunable run time parameters. Code generation is not supported for this case. Consider moving the block ''{1}'' into its destination function-call block ''{2}''.]]>
    </entry>
    <entry key="TunableConstTsBlkNotAllowedForExpFcnMdlWithSuggestion2">
      <![CDATA[In the root level of <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'', block ''{1}'' has an input signal originated from Constant blocks with tunable run time parameters. Code generation is not supported for this case. Since the block ''{1}'' does not drive any function-call blocks, consider removing this block ''{1}''.]]>
    </entry>
    <entry key="TunableConstTsBlkNotAllowedForExpFcnMdlWithFix">
      <![CDATA[In the root level of <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'', block ''{1}'' has an input signal originated from Constant blocks with tunable run time parameters. Code generation is not supported for this case.
      <actions exclusiveFixIts="yes">
           <action type="fixit">
               <cmd>configset.internal.fixIt(''{0}'',''DefaultParameterBehavior'',''Inlined'')</cmd>
                   <txt>Select the option ''Default parameter behavior'' for the model ''{0}'' to 'Inlined'.</txt>
           </action>
           <action type="suggestion">
                   <txt>Move the block ''{1}'' into its destination function-call block ''{2}''.</txt>
           </action>
      </actions>
      ]]>
    </entry>
    <entry key="TunableConstBlkNotAllowedToDrvMultiExportFcns">
      <![CDATA[In the root level of <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'', Constant block ''{1}'' has a tunable run time parameter. Code generation is not supported because this block drives both <sldiag objui="inport" objparam="{2,number,integer}" objname="{3}">input port {2,number,integer}</sldiag> of block ''{3}'' and <sldiag objui="inport" objparam="{4,number,integer}" objname="{5}">input port {4,number,integer}</sldiag> of block ''{5}'' in different sample times ''{6}'' and ''{7}'', respectively. Consider making a copy of block ''{1}'' and rewiring the connections so that this block and each of its copies has only one destination.]]>
    </entry>

    <entry key="TunableConstBlkNotAllowedToDrvMultiExportFcnsWithFix">
      <![CDATA[In the root level of <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'', Constant block ''{1}'' has a tunable run time parameter. Code generation is not supported because this block drives both <sldiag objui="inport" objparam="{2,number,integer}" objname="{3}">input port {2,number,integer}</sldiag> of block ''{3}'' and <sldiag objui="inport" objparam="{4,number,integer}" objname="{5}">input port {4,number,integer}</sldiag> of block ''{5}'' in different sample times ''{6}'' and ''{7}'', respectively. Consider taking either one or both of following actions:
      <actions exclusiveFixIts="yes">
           <action type="fixit">
               <cmd>configset.internal.fixIt(''{0}'',''DefaultParameterBehavior'',''Inlined'')</cmd>
                   <txt>Select the option ''Default parameter behavior'' for the model ''{0}'' to 'Inlined'.</txt>
           </action>
           <action type="suggestion">
                   <txt>Make a copy of block ''{1}'' and rewiring the connections so that this block and each of its copies has only one destination.</txt>
           </action>
      </actions>
      ]]>
    </entry>

    <entry key="FcnCallSubsysMustBeDrvByRootFcnCallInportInExpFcnMdl1">
      <![CDATA[In the <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'', function-call input port {2,number,integer} of block ''{1}'' must be driven by a function-call root-level Inport block.]]>
    </entry>
    <entry key="FcnCallSubsysMustBeDrvByRootFcnCallInportInExpFcnMdl2"><![CDATA[
    In the <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'', function-call input port {2,number,integer} of block ''{1}'' must be driven by a function-call root-level Inport block.
    <actions exclusiveFixIts="yes">
        <action type="fixit" retvalue="false">
            <cmd>delete_block(''{1}'');</cmd>
            <txt>Delete block ''{1}'' from the root level of ''{0}''.</txt>
        </action>
        <action type="fixit">
            <cmd>set_param_action(''{0}'', ''SetExecutionDomain'', ''off'');</cmd>
            <txt>If this model is not intended to be an export-function model, at the root level of model ''{0}'', open the Property Inspector. On the Execution tab, clear 'Set execution domain', or choose 'Domain' option other than 'Export function'.</txt>
        </action>
     </actions>]]>
    </entry>

    <entry key="InvExpFcnMdlDataPortGroupRootInport">
      <![CDATA[Invalid connection between ''{1}'' and input port {3,number,integer} of ''{2}'' of type ''{4}''. In <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'', a root-level Inport block must be connected to one of the following blocks: an exported function, a Simulink function, an Initialize/Reset/Terminate function, or a Terminator block.]]>
    </entry>

    <entry key="RootOutportMustBeDrvByRootFcnCallInportInExpFcnMdl1">
      <![CDATA[In the <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'', root-level Outport block ''{1}'' must be connected to a function-call block that is driven by a function-call root-level Inport block, a Simulink function, or a Merge or Mux block that is driven only by such function-call blocks.]]>
    </entry>
    <entry key="RootOutportMustBeDrvByRootFcnCallInportInExpFcnMdl2"><![CDATA[
    In the <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'', root-level Outport block ''{1}'' must be connected to a function-call block that is driven by a function-call root-level Inport block, a Simulink function, or a Merge or Mux block that is driven only by such function-call blocks.
    <actions exclusiveFixIts="yes">
        <action type="fixit">
            <cmd>set_param_action(''{0}'', ''SetExecutionDomain'', ''off'');</cmd>
            <txt>If this model is not intended to be an export-function model, at the root level of model ''{0}'', open the Property Inspector. On the Execution tab, clear 'Set execution domain', or choose 'Domain' option other than 'Export function'.</txt>
        </action>
     </actions>]]>
    </entry>

    <entry key="InvExpFcnMdlDataPortGroupRootOutport">
      <![CDATA[Invalid connection between ''{1}'' and output port {3,number,integer} of ''{2}'' of type ''{4}''. In <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'', a root-level Outport block must be connected to one of the following blocks: an exported function, a Simulink function, an Initialize/Reset/Terminate function, a Merge or Mux block that is driven by exported functions, or a Ground block.]]>
    </entry>
    <entry key="InvExpFcnMdlDataPortGroupRootOutportDrvByVM">
      <![CDATA[Invalid connection between ''{1}'' and  ''{2}''. In <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'', a root-level Outport block must be connected to one of the following blocks: an exported function, a Simulink function, an Initialize/Reset/Terminate function, a Merge or Mux block that is driven by exported functions, or a Ground block.]]>
    </entry>
    <entry key="InvExpFcnMdlDataPortGroupRootOutportDrvByMdlBlk">
      <![CDATA[Block ''{0}'' must be driven by a signal with a discrete or inherited rate, a ground signal, or no signal because Model block ''{1}'' schedules rates with ports and the corresponding output port, ''{2}'', connects to a root-level Outport or Out Bus Element block in <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{3}''.]]>
    </entry>
    <entry key="InvExpFcnMdlDataPortGroupRootOutportDrvConstRate">
      <![CDATA[Export-function model ''{0}'' does not support root-level Outport block ''{1}'' inheriting a constant rate from output port {3,number,integer} of Model block ''{2}''. Change the rate of the source block in ''{2}'' to a nonconstant value or disconnect ''{1}'' from its source block.]]>
    </entry>
    <entry key="RootOutportMustBeDrivenByRootFcnCallInputForAsync">
      <![CDATA[In the <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'', the root-level Outport block ''{1}'' is connected to a function-call block that is triggered by a function-call root-level Inport block as well as a block that is not triggered by a function-call root-level Inport block. This is not supported. The root-level Outport block ''{1}'' must be connected to only one of the following: \n\t1) A function-call block that is triggered by a function-call root-level Inport block. \n\t2) A Merge block that is driven only by function-call blocks such as those mentioned in 1). \n\t3) A block which is not driven by a function-call root-level Inport block.]]>
    </entry>
    <entry key="BEPInForExportFcn">
      <![CDATA[Model ''{0}'' has function-call root-level Inport blocks, or is set up to <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export functions</a>. Bus Element Inports (e.g. ''{1}'') are not supported at the root-level for such models. Consider using an Inport block instead.]]>
    </entry>
    <entry key="BEPOutForExportFcn">
      <![CDATA[Model ''{0}'' has function-call root-level Outport blocks, or is set up to <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export functions</a>. Bus Element Outports (e.g. ''{1}'') are not supported at the root-level for such models. Consider using an Outport block instead.]]>
    </entry>

    <entry key="RootBEPNotSupportedIRTForExportFcn">
      <![CDATA[When model ''{0}'' has function-call root-level Inport blocks, or is set up to <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export functions</a>, Bus Element port block ''{1}'' cannot be connected to Initialize, Reset or Terminate Function blocks.]]>
    </entry>

    <entry key="RootInportCannotOutputVirtualBusForExportFcn">
      <![CDATA[When model ''{0}'' has function-call root-level Inport blocks, or is set up to <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export functions</a>, the output signal of the root-level Inport block ''{1}'' cannot be a virtual bus. Consider replacing this Inport block with an In Bus Element block, or changing the output to a nonvirtual bus.
               <actions exclusiveFixIts="yes">
                 <action type="fixit">
                   <cmd>set_param_action(''{1}'', ''BusOutputAsStruct'', ''on'');</cmd>
                   <txt>Select the option ''Output as nonvirtual bus'' for the root inport {1}</txt>
                 </action>
               </actions>
]]>
    </entry>

    <entry key="RootOutportCannotAcceptVirtualBusForExportFcn">
      <![CDATA[When model ''{0}'' has function-call root-level Inport blocks, or is set up to <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export functions</a>, the input signal to the root-level Outport block ''{1}'' cannot be a virtual bus. Consider replacing this Outport block with an Out Bus Element block, or making the input signal a nonvirtual bus.]]>
    </entry>

    <entry key="StorageClassSpecOnBothRootOutportAndItsSourceBlockForExportFcn">
      <![CDATA[Model ''{0}'' has function-call root-level Inport blocks, or is set up to <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export functions</a>. The root-level Outport block ''{1}'' and the driving signal line both cannot have storage class specification in such a model.]]>
    </entry>    
 
    <entry key="PlatformServicesSpecOnBothRootOutportAndItsSourceBlockForExportFcn">
      <![CDATA[Model ''{0}'' has function-call root-level Inport blocks or is set up to export functions (see Help Center). In such a model, it is not supported that root-level Outport block ''{1}'' is mapped to a sender service interface and its driving signal is mapped to a measurement service interface. Remove driving signal that is mapped to measurement service interface from code mappings.]]>
    </entry>    
   
    <entry key="RootOutportCannotOutputVirtualBusForExportFcn">
      <![CDATA[When model ''{0}'' has function-call root-level Inport blocks, or is set up to <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')"> export functions</a>, the root-level Outport block ''{1}'' cannot have a virtual bus input signal, or output a virtual bus in the parent model if the model is being referenced when the incoming bus is nonvirtual. Consider either replacing this Outport block with an Out Bus Element block, or making the input signal a nonvirtual bus, and selecting the option ''Output as nonvirtual bus in parent model''.
               <actions exclusiveFixIts="yes">
                 <action type="fixit">
                   <cmd>Simulink.ModelReference.internal.ModelRefFixes(''NonvirtualOutportForExpFcn'',''{1}'')</cmd>
                   <txt>Select the option ''Output as nonvirtual bus'' for the root outport {1}</txt>
                 </action>
               </actions>
      ]]>
    </entry>
    <entry key="RootOutportCannotOutputVirtualBusForExportFcn_fix"> Executed the command
    set_param(''{0}'',''BusOutputAsStruct'', ''on'') </entry>

    <entry key="RootLevelSignalLoggingNotAllowedForExportFcn">
      <![CDATA[In the <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'', logging or streaming root-level signal originating from <sldiag objui="outport" objparam="{1,number,integer}" objname="{2}">output port {1,number,integer}</sldiag> of block ''{2}'' is not allowed.]]>
    </entry>

    <entry key="RootLevelSignalLoggingNotAllowedForExportFcn2">
      <![CDATA[In the <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'', logging or streaming root-level signal originating from block ''{1}'' is not allowed.]]>
    </entry>

    <entry key="DatasetOutputLoggingNotAllowedForAsyncFcnCallMdl">
      <![CDATA[Unable to use 'Dataset' format because model ''{0}'' contains function-call root-level Inport blocks connected to Asynchronous Task Specification blocks.
          <actions exclusiveFixIts="yes">
              <action type="suggestion">
                  <txt>Remove all Asynchronous Task Specification blocks and set up this model as an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a>.</txt>
              </action>
              <action type="suggestion">
                  <txt>If this model is not intended to be an export-function model, specify a different option in Configuration Parameters > Data Import/Export > Save to workspace or file > Format.</txt>
              </action>
         </actions>
      ]]>
    </entry>

    <entry key="InvalidExpFcnMdlRootLevelSignalToLogOrView">
      <![CDATA[The output signal from block ''{0}'' cannot be logged or viewed. Inside an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a>, a root-level data signal can be logged in Dataset format or viewed only if it originates from a function-call subsystem.]]>
    </entry>

    <entry key="InvalidExpFcnMdlRootLevelScopeSaveFormat">
      <![CDATA[To log the root-level data signal inside an  <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a>, ''{0}'' must set the dialog parameter 'Logging' > 'Save format' to 'Dataset'.
      <actions exclusiveFixIts="no">
        <action type="fixit">
            <cmd>set_param_action(''{0}'', ''DataLoggingSaveFormat'', ''Dataset'');</cmd>
            <txt>Set the ''Save format'' to ''Dataset'' in ''{0}''.</txt>
        </action>
      </actions> 
      ]]></entry>

    <entry key="ExportFcnModelCannotExecConcurrently"><![CDATA[Concurrent execution of tasks in <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'' is not supported.
    <actions exclusiveFixIts="no">
      <action type="fixit">
            <cmd>set_param_action(''{0}'', ''ConcurrentTasks'', ''off'');</cmd>
            <txt>In the Configuration Parameters dialog box, deselect 'Solver > Tasking and sample time options > Allow tasks to execute concurrently on target' option.</txt>
        </action>
      </actions> 
    ]]></entry>

    <entry key="SWArchMdlCannotExecConcurrently"><![CDATA[In the software architecture model ''{0}'', 'Configuration Parameters' > 'Allow tasks to execute concurrently on target' may not be selected.
    <actions exclusiveFixIts="no">
        <action type="fixit">
            <cmd>set_param_action(''{0}'', ''ConcurrentTasks'', ''off'');</cmd>
            <txt>Clear 'Configuration Parameters' > 'Allow tasks to execute concurrently on target' option.</txt>
        </action>
      </actions> 
      ]]></entry>

    <entry key="ExportFcnModelInvalidSampleTimeConstraint"><![CDATA[In the <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'', the parameter 'Periodic sample time constraint' in 'Configuration Parameters' > 'Solver' > 'Tasking and sample time options' must be set to 'Unconstrained'.
    <actions exclusiveFixIts="no">
        <action type="fixit">
            <cmd>set_param_action(''{0}'', ''SampleTimeConstraint'', ''Unconstrained'');</cmd>
            <txt>Set the ''Periodic sample time constraint'' to ''Unconstrained'' in ''{0}''.</txt>
        </action>
    </actions> 
    ]]></entry>

    <entry key="SWArchMdlInvalidSampleTimeConstraint"><![CDATA[In the software architecture model ''{0}'', 'Periodic sample time constraint' parameter in 'Configuration Parameters > Solver > Tasking and sample time options' must be set to 'Unconstrained'.
    <actions exclusiveFixIts="no">
        <action type="fixit">
            <cmd>set_param_action(''{0}'', ''SampleTimeConstraint'', ''Unconstrained'');</cmd>
            <txt>Set the ''Periodic sample time constraint'' to ''Unconstrained'' in ''{0}''.</txt>
        </action>
    </actions> 
    ]]></entry>

    <entry key="MuxLoggingAtRootLevelForExportFcn">
      <![CDATA[Signal logging is not supported for mux signals inside export-function models. Log signals at the input for block ''{0}'' instead.]]>
    </entry>

    <entry key="RootFcnCallInportMustBeBuiltWithERT">The system target file must be set to ert.tlc in order to generate code because the model ''{0}'' contains a root-level Inport block ''{1}'' that outputs a function-call signal.
    <![CDATA[
        <actions exclusiveFixIts="yes">
            <action type="fixit">
                <cmd>configset.internal.fixIt(''{0}'',''SystemTargetFile'',''ert.tlc'')</cmd>
                <txt>Set system target file <sldiag objui="configset" objparam="SystemTargetFile">SystemTargetFile</sldiag> to ert.tlc.</txt>
            </action>
        </actions>
    ]]>
    </entry>

    <entry key="RootFcnCallInportDoesNotSupportClassicCallInterface"><![CDATA[<sldiag objui="configset" objparam="GRTInterface">Classic call interface</sldiag> must be cleared in order to generate code because the model ''{0}'' contains a root-level Inport block ''{1}'' that outputs a function-call signal.
    <actions exclusiveFixIts="yes">
        <action type="fixit">
            <cmd>configset.internal.fixIt(''{0}'',''GRTInterface'',''off'')</cmd>
            <txt>Clear <sldiag objui="configset" objparam="GRTInterface">GRTInterface</sldiag> parameter.</txt>
        </action>
    </actions>]]>
    </entry>

    <entry key="RootFcnCallInportRequiresSampleERTMain"><![CDATA[The option 'Configuration Parameters' > 'Code Generation' > 'Generate code only' must be checked because the model ''{0}'' contains a root-level Inport block ''{1}'' that outputs a function-call signal and the option 'Configuration Parameters' > 'Code Generation' > 'Templates' > 'Custom templates' > 'Generate an example main program' is unchecked.]]></entry>

    <entry key="ExportFcnModelMustBeBuiltWithERT">
      <![CDATA[In the <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'', the system target file must be set to ert.tlc to generate code.]]>
      <![CDATA[
          <actions exclusiveFixIts="yes">
              <action type="fixit">
                  <cmd>configset.internal.fixIt(''{0}'',''SystemTargetFile'',''ert.tlc'')</cmd>
                  <txt>Set system target file <sldiag objui="configset" objparam="SystemTargetFile">SystemTargetFile</sldiag> to ert.tlc.</txt>
              </action>
          </actions>
      ]]>
    </entry>

    <entry key="SWArchMdlMustBeBuiltWithERT">
      <![CDATA[In the software architecture model ''{0}'', the system target file must be set to ert.tlc to generate code.]]>
      <![CDATA[
          <actions exclusiveFixIts="yes">
              <action type="fixit">
                  <cmd>configset.internal.fixIt(''{0}'',''SystemTargetFile'',''ert.tlc'')</cmd>
                  <txt>Set system target file <sldiag objui="configset" objparam="SystemTargetFile">SystemTargetFile</sldiag> to ert.tlc.</txt>
              </action>
          </actions>
      ]]>
    </entry>

    <entry key="ExportFcnModelDoesNotSupportClassicCallInterface"><![CDATA[In the <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'', it is not allowed to select <sldiag objui="configset" objparam="GRTInterface">'Classic call interface' parameter</sldiag>.
    <actions exclusiveFixIts="yes">
        <action type="fixit">
            <cmd>configset.internal.fixIt(''{0}'',''GRTInterface'',''off'')</cmd>
            <txt>Clear <sldiag objui="configset" objparam="GRTInterface">GRTInterface</sldiag> parameter.</txt>
        </action>
    </actions>]]>
    </entry>

    <entry key="SWArchMdlDoesNotSupportClassicCallInterface"><![CDATA[Invalid selection for <sldiag objui="configset" objparam="GRTInterface">'Classic call interface' parameter</sldiag> in the software architecture model''{0}''.
    <actions exclusiveFixIts="yes">
        <action type="fixit">
            <cmd>configset.internal.fixIt(''{0}'',''GRTInterface'',''off'')</cmd>
            <txt>Clear <sldiag objui="configset" objparam="GRTInterface">GRTInterface</sldiag> parameter.</txt>
        </action>
    </actions>]]>
    </entry>

    <entry key="ExportFcnModelRequiresSampleERTMain">
      <![CDATA[In the <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'', when 'Configuration Parameters' > 'Code Generation' > 'Templates' > 'Custom templates' > 'Generate an example main program' is not checked, it is required to check 'Configuration Parameters' > 'Code Generation' > 'Generate code only'.]]>
      <![CDATA[<actions exclusiveFixIts="yes">
        <action type="fixit">
            <cmd>configset.internal.fixIt(''{0}'', ''GenCodeOnly'', ''on'')</cmd>
            <txt>Consider selecting the parameter <sldiag objui="configset" objparam="GenCodeOnly">'Generate code only'</sldiag>.</txt>
        </action>
        <action type="fixit">
            <cmd>configset.internal.fixIt(''{0}'', ''GenerateSampleERTMain'', ''on'')</cmd>
            <txt>Alternatively, select the parameter <sldiag objui="configset" objparam="GenerateSampleERTMain">'Generate an example main program'</sldiag>.</txt>
        </action>
      </actions>]]>
    </entry>
    
    <entry key="ExportFcnCallModelInvalidExecOrderInBranchFcnCall">
      Model block ''{0}'' requires that function-call input port ''{1}'' execute before function-call input port ''{2}''. However, these two function-call input ports are driven by a branched function-call signal originating from output port {3,number,integer} of initiator ''{4}'', and an opposite execution order is specified by Function-Call Split block(s) connected to this branched function-call signal.
      <![CDATA[<actions exclusiveFixIts="yes">
        <action type="fixit" id="EnableSchedulingChecks">
            <cmd>configset.internal.fixIt(''{5}'', ''EnableRefExpFcnMdlSchedulingChecks'', ''off'')</cmd>
            <txt>To disable this error message, clear the parameter <sldiag objui="configset" objparam="EnableRefExpFcnMdlSchedulingChecks">'Enable strict scheduling checks for referenced models'</sldiag> in the Model Referencing page of the Configuration Parameters dialog.</txt>
        </action>
      </actions>]]>
    </entry>

    <entry key="InvalidExecOrderInTopModelSameTs">
      The function-call input ports ''{0}'' and ''{1}'' of the Model block ''{2}'' are driven by different function-call initiators, ''{3}'' and ''{4}'', respectively. Since these two initiators have the same sample time, their relative execution order could be ambiguous and lead to different simulation results. Consider using a Function-Call Split block or a common function-call initiator block such as a Stateflow chart to schedule the function-calls for these two input ports in a deterministic order.
    </entry>

    <entry key="InvalidExecOrderInTopModelSameTs2"><![CDATA[
      The function-call <sldiag objui="inport" objparam="{0}" objname="{1}">input port ''{0}''</sldiag> of the Model block ''{1}'' are driven by different function-call initiators, ''{2}'' and ''{3}'', respectively. Since these two initiators have the same sample time, their relative execution order could be ambiguous and lead to different simulation results. Consider using a Function-Call Split block or a common function-call initiator block such as a Stateflow chart to schedule the function-calls for these two input ports in a deterministic order.
    ]]></entry>

    <entry key="InvalidExecOrderInTopModelPriorityEqualOrUnknown">
      Task priorities of the sample times for function-call input ports ''{0}'' and ''{1}'' of the Model block ''{2}'' are equal or the priority relationship is unknown. Since these two function-call input ports are driven by different function-call initiators, ''{3}'' and ''{4}'', respectively, the relative execution order of these initiators could be ambiguous and lead to different simulation results.
        <![CDATA[
            <actions exclusiveFixIts="yes">
                <action type="fixit">
                    <cmd>configset.internal.fixIt(''{5}'', ''EnableRefExpFcnMdlSchedulingChecks'', ''off'')</cmd>
                    <txt>To disable this error message, clear the parameter <sldiag objui="configset" objparam="EnableRefExpFcnMdlSchedulingChecks">'Enable strict scheduling checks for referenced models'</sldiag> in the Model Referencing page of the Configuration Parameters dialog.</txt>
                </action>
                <action type="suggestion">
                    <txt>Alternatively, consider adjusting asynchronous task priority or using a Function-Call Split block or a common function-call initiator block such as a Stateflow chart to schedule function-calls for these two input ports in a deterministic order.</txt>
                </action>
            </actions>
        ]]>
    </entry>

    <entry key="InvalidExecOrderInTopModelReversePriority">
      Model block ''{0}'' requires that function-call input port ''{1}'' execute before function-call input port ''{2}''. However, this execution order cannot be honored because the task priority of the sample time for function-call input port ''{1}'' is lower than that of function-call input port ''{2}''. The two function-call input ports are driven by the function-call initiator blocks, ''{3}'' and ''{4}'', respectively. Consider using a function-call initiator with faster sample time (higher priority) or higher asynchronous task priority for function-call input port ''{1}''.
        <![CDATA[
            <actions exclusiveFixIts="yes">
                <action type="fixit">
                    <cmd>configset.internal.fixIt(''{5}'', ''EnableRefExpFcnMdlSchedulingChecks'', ''off'')</cmd>
                    <txt>To disable this error message, clear the parameter <sldiag objui="configset" objparam="EnableRefExpFcnMdlSchedulingChecks">'Enable strict scheduling checks for referenced models'</sldiag> in the Model Referencing page of the Configuration Parameters dialog.</txt>
                </action>
                <action type="suggestion">
                    <txt>Alternatively, consider using a Function-Call Split block or a common function-call initiator block such as a Stateflow chart to schedule function-calls for these two input ports in the required order.</txt>
                </action>
            </actions>
        ]]>
    </entry>

    <entry key="FcnCallPortMustBeDrivenByFcnCallRootInportInExportFcnModel">
      <![CDATA[The function call <sldiag objui="inport" objparam="{0}" objname="{1}">input port ''{0}''</sldiag> of Model block ''{1}'' must be driven by a function-call root-level Inport block since the Model block resides at the root level and the parent model ''{2}'' is an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a>.]]>
    </entry>

    <entry key="InvalidExecOrderInParentExportFcnModel">
      Model block ''{0}'' requires that function-call input port ''{1}'' execute before function-call input port ''{2}''. However, this execution order cannot be honored because function-call root-level Inport block ''{3}'', which drives function-call input port ''{1}'', is specified to execute after function-call root-level Inport block ''{4}'', which drives function-call input port ''{2}''.
        <![CDATA[
            <actions exclusiveFixIts="yes">
                <action type="fixit">
                    <cmd>configset.internal.fixIt(''{5}'', ''EnableRefExpFcnMdlSchedulingChecks'', ''off'')</cmd>
                    <txt>To disable this error message, clear the parameter <sldiag objui="configset" objparam="EnableRefExpFcnMdlSchedulingChecks">'Enable strict scheduling checks for referenced models'</sldiag> in the Model Referencing page of the Configuration Parameters dialog.</txt>
            </action>
            <action type="suggestion">
                   <txt>Alternatively, consider adjusting the execution order of the function-call root-level Inport blocks in the parent model ''{5}'' to match that of the referenced model ''{6}''.</txt>
               </action>
            </actions>
        ]]>
    </entry>

    <entry key="NonExportFcnModelBlockNotAllowedInExportFcnModel">
      <![CDATA[Model block ''{0}'' is not allowed to be placed inside <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{1}'' because the referenced model ''{2}'' contains discrete rates.]]>
      <![CDATA[
      <actions exclusiveFixIts="no">
      <action type="fixit">
        <cmd>set_param_action(''{0}'', ''ShowModelPeriodicEventPorts'', ''on'');</cmd>
        <txt>Consider selecting <sldiag objui="blockdlg" objparam="ShowModelPeriodicEventPorts">'Schedule rates'</sldiag> parameter on Model block ''{0}'' to <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''function_call_adaptation'')">adapt discrete rates in the referenced model to function-call input ports</a>, and connect them to function-call root-level Inport blocks.</txt>
      </action>
      </actions>]]>
    </entry>    

    <entry key="ExportFcnModelElapsedTimeNotSupported">
      <![CDATA[In the <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'', block ''{1}'' that uses elapsed time cannot be allowed inside a function-call subsystem driven by function-call root-level Inport block ''{2}'' with an inherited sample time (-1).]]>
      <![CDATA[
      <actions exclusiveFixIts="no">
      <action type="suggestion">
        <cmd>Simulink.internal.OpenBlockParamsDialog(''{3}'', ''SampleTime'')</cmd>
        <txt>To fix this, set <sldiag objui="blockdlg" objparam="SampleTime">'Sample time'</sldiag> on Inport block ''{3}'' to a discrete rate.</txt>
      </action>
      </actions>]]>
    </entry>

    <entry key="ExportFcnModelElapsedTimeNotSupported2a">
      <![CDATA[In the <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'', block ''{1}'' that uses elapsed time cannot be placed in a triggered function-call subsystem ''{2}'' that is directly driven by function-call root-level Inport block ''{3}''.]]>
      <![CDATA[
      <actions exclusiveFixIts="no">
      <action type="fixit">
        <cmd>set_param_action(''{4}'', ''SampleTimeType'', ''periodic'');</cmd>
        <txt>Consider changing the dialog parameter <sldiag objui="blockdlg" objparam="SampleTimeType">'Sample time type'</sldiag> of ''{4}'' to 'periodic'.</txt>
      </action>
      </actions>]]>
    </entry>
    <entry key="ExportFcnModelElapsedTimeNotSupported2b">
      <![CDATA[In the <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'', block ''{1}'' that uses elapsed time cannot be placed in a triggered function-call subsystem ''{2}'' that is directly driven by function-call root-level Inport block ''{3}''.]]>
      <![CDATA[
      <actions exclusiveFixIts="no">
      <action type="suggestion">
        <txt>Consider changing the dialog parameter <sldiag objui="blockdlg" objparam="SampleTimeType">'Sample time type'</sldiag> of ''{4}'' to 'periodic'.</txt>
      </action>
      </actions>]]>
    </entry>
    <entry key="ExportFcnModelElapsedTimeNotSupported3a">
      <![CDATA[In the <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'', block ''{1}'' uses elapsed time. This block cannot be placed in a function-call subsystem driven by triggered function-call subsystem ''{2}'', because ''{3}'' is directly driven by function-call root-level Inport block ''{4}''.]]>
      <![CDATA[
      <actions exclusiveFixIts="no">
      <action type="fixit">
        <cmd>set_param_action(''{5}'', ''SampleTimeType'', ''periodic'');</cmd>
        <txt>Consider changing the dialog parameter <sldiag objui="blockdlg" objparam="SampleTimeType">'Sample time type'</sldiag> of  ''{5}'' to 'periodic'.</txt>
      </action>
      </actions>]]>
    </entry>
    <entry key="ExportFcnModelElapsedTimeNotSupported3b">
      <![CDATA[In the <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'', block ''{1}'' uses elapsed time. This block cannot be placed in a function-call subsystem driven by triggered function-call subsystem ''{2}'', because ''{3}'' is directly driven by function-call root-level Inport block ''{4}''.]]>
      <![CDATA[
      <actions exclusiveFixIts="no">
      <action type="suggestion">
        <txt>Consider changing the dialog parameter <sldiag objui="blockdlg" objparam="SampleTimeType">'Sample time type'</sldiag> of  ''{5}'' to 'periodic'.</txt>
      </action>
      </actions>]]>
    </entry>
    <entry key="ExportFcnModelAbsoluteTimeNotSupported">
      <![CDATA[In the <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'', block ''{1}'' that uses absolute time cannot be allowed inside a function-call subsystem driven by function-call root-level Inport block ''{2}'' with an inherited sample time (-1).]]>
      <![CDATA[
      <actions exclusiveFixIts="no">
      <action type="suggestion">
        <cmd>Simulink.internal.OpenBlockParamsDialog(''{3}'', ''SampleTime'')</cmd>
        <txt>To fix this, set <sldiag objui="blockdlg" objparam="SampleTime">'Sample time'</sldiag> on Inport block ''{3}'' to a discrete rate.</txt>
      </action>
      </actions>]]>
    </entry>

    <entry key="ExportFcnModelAbsoluteTimeNotSupported2a">
      <![CDATA[In the <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'', block ''{1}'' that uses absolute time cannot be placed in a triggered function-call subsystem ''{2}'' that is directly driven by function-call root-level Inport block ''{3}''.]]>
      <![CDATA[
      <actions exclusiveFixIts="no">
      <action type="fixit">
        <cmd>set_param_action(''{4}'', ''SampleTimeType'', ''periodic'');</cmd>
        <txt>Consider changing the dialog parameter <sldiag objui="blockdlg" objparam="SampleTimeType">'Sample time type'</sldiag> of  ''{4}'' to 'periodic'.</txt>
      </action>
      </actions>]]>
    </entry>

    <entry key="ExportFcnModelAbsoluteTimeNotSupported2b">
      <![CDATA[In the <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'', block ''{1}'' that uses absolute time cannot be placed in a triggered function-call subsystem ''{2}'' that is directly driven by function-call root-level Inport block ''{3}''.]]>
      <![CDATA[
      <actions exclusiveFixIts="no">
      <action type="suggestion">
        <txt>Consider changing the dialog parameter <sldiag objui="blockdlg" objparam="SampleTimeType">'Sample time type'</sldiag> of  ''{4}'' to 'periodic'.</txt>
      </action>
      </actions>]]>
    </entry>

    <entry key="ExportFcnModelAbsoluteTimeNotSupported3a">
      <![CDATA[In the <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'', block ''{1}'' uses absolute time. This block cannot be placed in a function-call subsystem driven by triggered function-call subsystem ''{2}'', because ''{3}'' is directly driven by function-call root-level Inport block ''{4}''.]]>
      <![CDATA[
      <actions exclusiveFixIts="no">
      <action type="fixit">
        <cmd>set_param_action(''{5}'', ''SampleTimeType'', ''periodic'');</cmd>
        <txt>Consider changing the dialog parameter <sldiag objui="blockdlg" objparam="SampleTimeType">'Sample time type'</sldiag> of  ''{5}'' to 'periodic'.</txt>
      </action>
      </actions>]]>
    </entry>

    <entry key="ExportFcnModelAbsoluteTimeNotSupported3b">
      <![CDATA[In the <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'', block ''{1}'' uses absolute time. This block cannot be placed in a function-call subsystem driven by triggered function-call subsystem ''{2}'', because ''{3}'' is directly driven by function-call root-level Inport block ''{4}''.]]>
      <![CDATA[
      <actions exclusiveFixIts="no">
      <action type="suggestion">
        <txt>Consider changing the dialog parameter <sldiag objui="blockdlg" objparam="SampleTimeType">'Sample time type'</sldiag> of  ''{5}'' to 'periodic'.</txt>
      </action>
      </actions>]]>
    </entry>

    <entry key="ExportedAsyncJMAABBClockResolutionMismatch">
        <![CDATA[Block ''{0}'', triggered by the function-call input port ''{1,number,integer}'' of model block ''{2}'' uses absolute or elapsed time. The base timer resolution ''{3}'' of the model block ''{2}'' is different from the timer resolution ''{4}'' of the caller. The base timer resolution of the model block and the caller timer resolution must be the same.
        ]]>
    </entry>

    <entry key="ExportFcnModelNonInlinedSFcnsNotSupported">
      <![CDATA[In the <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'', code generation is not supported for the non-inlined S-function ''{1}''. Consider converting the non-inlined S-function to an inlined S-function by providing a corresponding TLC implementation, or connecting each function-call root-level Inport block to an Asynchronous Task Specification block, which will introduce asynchronous function-call behavior.]]>
    </entry>

    <entry key="ExportFcnModelMatFileLoggingNotSupported">
       <![CDATA[In the <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'', MAT-file logging is not supported for code generation.
          <actions exclusiveFixIts="yes">
              <action type="fixit">
                  <cmd>configset.internal.fixIt(''{0}'', ''MatFileLogging'', ''off'')</cmd>
                  <txt>Clear the configuration parameter <sldiag objui="configset" objparam="MatFileLogging">MatFileLogging</sldiag>.</txt>
              </action>
          </actions>
      ]]>
    </entry>

    <entry key="SWArchMdlMatFileLoggingNotSupported">
       <![CDATA[In the software architecture model ''{0}'', MAT-file logging is not supported for code generation.
          <actions exclusiveFixIts="yes">
              <action type="fixit">
                  <cmd>configset.internal.fixIt(''{0}'', ''MatFileLogging'', ''off'')</cmd>
                  <txt>Clear the configuration parameter <sldiag objui="configset" objparam="MatFileLogging">MatFileLogging</sldiag>.</txt>
              </action>
          </actions>
      ]]>
    </entry>

    <entry key="MixedRootFcnCallInportToAsyncTaskSpecConnections1">
        <![CDATA[In model ''{0}'', function-call root-level Inport block ''{1}'' is connected to an Asynchronous Task Specification block ''{2}'', while the other function-call root-level Inport block ''{3}'' is not.
            <actions exclusiveFixIts="yes">
                <action type="fixit" retvalue="false">
                    <cmd>set_param_action(''{0}'', ''SetExecutionDomain'', ''on'');set_param_action(''{0}'', ''ExecutionDomainType'', ''ExportFunction''); set_param(''{2}'', ''Commented'', ''Through'');</cmd>
                    <txt>To set up this model as an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a>, comment through or remove the Asynchronous Task Specification block ''{2}''.</txt>
                </action>
                <action type="suggestion">
                    <txt>If this model is not intended to be an export-function model, connect ''{3}'' to an Asynchronous Task Specification block, and at the root level of this model, open the Property Inspector. On the Execution tab, clear 'Set execution domain', or choose 'Domain' option other than 'Export function'.</txt>
                </action>
    </actions>]]>
    </entry>

    <entry key="MixedRootFcnCallInportToAsyncTaskSpecConnections2">
        <![CDATA[In model ''{0}'', function-call root-level Inport block ''{1}'' is connected to an Asynchronous Task Specification block ''{2}'', while the other function-call root-level Inport block ''{3}'' is not.
            <actions exclusiveFixIts="yes">
                <action type="suggestion">
                <txt>If this model is not intended to be an export-function model, connect ''{3}'' to an Asynchronous Task Specification block, and at the root level of this model, open the Property Inspector. On the Execution tab, clear 'Set execution domain', or choose 'Domain' option other than 'Export function'.</txt>
                </action>
                <action type="fixit" retvalue="false">
                    <cmd>set_param_action(''{0}'', ''SetExecutionDomain'', ''on'');set_param_action(''{0}'', ''ExecutionDomainType'', ''ExportFunction''); set_param(''{2}'', ''Commented'', ''Through'');</cmd>
                    <txt>Alternatively, to set up this model as an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a>, comment through or remove the Asynchronous Task Specification block ''{2}''. At the root level of this model, open the Property Inspector. On the Execution tab, select 'Set execution domain', and set 'Domain' to 'Export function'.</txt>
                </action>
    </actions>]]>
    </entry>

    <entry key="FcnCallRootInportCannotDriveSimEventsGateway">
      It is not allowed for a function-call root-level Inport block ''{0}'' to drive a SimEvents Gateway block ''{1}''.
    </entry>

    <entry key="MultiInstanceERTCodeNotSupportedForExpFcnMdl"><![CDATA[Generating reusable code is not supported for <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}''.]]>
    <![CDATA[<actions exclusiveFixIts="yes">
      <action type="fixit">
        <cmd>configset.internal.fixIt(''{0}'', ''CodeInterfacePackaging'', ''Nonreusable function'')</cmd>
        <txt>Consider setting the option <sldiag objui="configset" objparam="CodeInterfacePackaging">'Code interface packaging'</sldiag> to 'Nonreusable function' in 'Configuration Parameters' > 'Code Generation' > 'Interface'.</txt>
      </action>
      </actions>]]>
    </entry>

    <entry key="MergeConstantSampleTimeDisallowedInExpFcnMdl">At root level of export function model ''{0}'', source block ''{1}'' of Merge block ''{2}'' is not a function-call subsystem or subsystem that includes an Initialize Function, Terminate Function, Reinitialize Function, or Reset Function block. Connect ''{2}'' to a valid source block.</entry>

    <entry key="MergeMdlBlkUnconnectedPortDisallowedInExpFcnMdl"><![CDATA[Output port ''{2}'' of block ''{1}'' is an invalid input to Merge block ''{0}''. In the root graph of an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a>, all sources driving inputs to a Merge block must be driven by function-call root level Inport blocks, Simulink functions, or Initialize, Reset, or Terminate Function blocks.]]></entry>

    <entry key="FcnCallerNotInFcnCallPortGroupInExpFcnMdl"><![CDATA[The Function Caller block ''{0}'' is inside the <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{1}''. Therefore, it must be placed inside a Simulink Function block or driven by a function-call root-level Inport block. However, the block is inside the subsystem ''{2}'' and violates this rule.]]></entry>

    <entry key="SLFcnHasInputFromCaller"><![CDATA[The connection between input port {0,number,integer} of Simulink function ''{1}'' and <sldiag objui="outport" objparam="{2,number,integer}" objname="{3}">output port {2,number,integer}</sldiag> of block ''{3}'' is invalid. Such connection might lead to unexpected behaviors because the Simulink function could be called while ''{4}'' executes.]]></entry>

    <entry key="SLFcnInRefMdlHasInputFromCaller"><![CDATA[The connection between input to Simulink function ''{0}'' via input port {1,number,integer} of the Model block ''{2}'' and <sldiag objui="outport" objparam="{3,number,integer}" objname="{4}">output port {3,number,integer}</sldiag> of block ''{4}'' is invalid. Such connection might lead to unexpected behaviors because the Simulink function could be called while ''{5}'' executes.]]></entry>

    <entry key="FcnCallBlkShouldLatchInputFromSimulinkFcn"><![CDATA[The connection between input port {0,number,integer} of the function-call block ''{1}'' and output port {2,number,integer} of Simulink function ''{3}'' is invalid. Such connection might lead to unexpected behaviors because the Simulink function could be called while ''{4}'' executes. Consider placing a Function-Call Feedback Latch block before corresponding input, or selecting 'Latch input for feedback signals of function-call subsystem outputs' parameter on the Inport block corresponding to <sldiag objui="inport" objparam="{5,number,integer}" objname="{6}">input port {5,number,integer}</sldiag> of ''{6}''.]]></entry>

    <entry key="SLFcnConstTsUncalled">Simulink Coder does not generate code for uncalled Simulink function ''{0}'' defined by block ''{1}''.</entry>
    <entry key="SLFcnUncalledInPossibleExpFcnMdl"><![CDATA[Simulink Coder does not generate code for uncalled Simulink function ''{0}'' defined by block ''{1}''.
    <actions exclusiveFixIts="yes">
        <action type="fixit">
            <cmd>set_param_action(''{2}'', ''SetExecutionDomain'', ''on'');set_param_action(''{2}'', ''ExecutionDomainType'', ''ExportFunction'');</cmd>
            <txt>To generate code for this function, specify model ''{2}'' as an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a>. At the root level of the model, open the Property Inspector. On the Execution tab, select 'Set execution domain', and set 'Domain' to 'Export function'.</txt>
        </action>
     </actions>
    ]]>
    </entry>

    <entry key="SLFcnHasInvalidInputConnection"><![CDATA[The connection between input port {0,number,integer} of scoped Simulink function ''{1}'' and <sldiag objui="outport" objparam="{2,number,integer}" objname="{3}">output port {2,number,integer}</sldiag> of block ''{3}'' is invalid. The input of a scoped Simulink function called from outside the scoping subsystem must be connected to another Simulink function, Merge, Constant or an Inport block.]]></entry>

    <entry key="SLFcnHasInvalidOutputConnection"><![CDATA[The connection between output port {0,number,integer} of scoped Simulink function ''{1}'' and <sldiag objui="inport" objparam="{2,number,integer}" objname="{3}">input port {2,number,integer}</sldiag> of block ''{3}'' is invalid. The output of a scoped Simulink function called from outside the scoping subsystem must be connected to only one of the following blocks: Simulink Function, Outport, Terminator, Scope, Display, To Workspace, or To File. ]]></entry>

<!-- Stub Function-Call -->
    <entry key="BadFcnCallStubInportNum">One or more Argument Inport blocks of Simulink function ''{0}'' are either missing or numbered incorrectly. Argument Inport blocks must be numbered consecutively starting with 1.</entry>
    <entry key="BadFcnCallStubOutportNum">One or more Argument Outport blocks of  Simulink function ''{0}'' are either missing or numbered incorrectly. Argument Outport blocks must be numbered consecutively starting with 1.</entry>
    <entry key="BadFcnCallStubStatusNum">There can be only one Function-Call Stub Status block in system ''{0}''.</entry>
    <entry key="RootInportFcnCallNoAsyncTaskSpecBlk">An Asynchronous Task Specification block must be placed at the output port of Inport block ''{0}'' since the Inport block is configured to output a function-call signal.</entry>
    <entry key="RootInportFcnCallNoAsyncTaskSpecBlkWithFix"><![CDATA[
    Since the root-level Inport block ''{0}'' is configured to output a function-call signal and is not connected to an Asynchronous Task Specification block, the model should be set up as an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a>.
    <actions exclusiveFixIts="yes">
        <action type="fixit">
            <cmd>set_param_action(''{1}'', ''SetExecutionDomain'', ''on'');set_param_action(''{1}'', ''ExecutionDomainType'', ''ExportFunction'');</cmd>
            <txt>At the root level of model ''{1}'', open the Property Inspector. On the Execution tab, select 'Set execution domain', and set 'Domain' to 'Export function'.</txt>
        </action>
     </actions>
    ]]>
    </entry>
    <entry key="MdlWithRootSLFcnOnlyNotSetAsExpFcnMdl"><![CDATA[
    Model ''{0}'' only contains Simulink Function blocks at root-level. To export Simulink Functions, ''{0}'' needs to be set up as an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a>.
    <actions exclusiveFixIts="yes">
        <action type="fixit">
            <cmd>set_param_action(''{0}'', ''SetExecutionDomain'', ''on''); set_param_action(''{0}'', ''ExecutionDomainType'', ''ExportFunction'');</cmd>
            <txt>To set up Model''{0}'' as an export-function model, at the root-level of this model, select 'Property Inspector > Execution > Set execution domain'. From the 'Domain' list, select 'Export function'.</txt>
        </action>
     </actions>
    ]]>
    </entry>
     <entry key="MdlWithGlobalSLFcnMdlBlkNotSetAsExpFcnMdl"><![CDATA[
     To export Simulink functions from Model block ''{1}'', Model ''{0}'' must be set up as an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')"> export-function model</a>.
    <actions exclusiveFixIts="yes">
        <action type="fixit">
            <cmd>set_param_action(''{0}'', ''SetExecutionDomain'', ''on''); set_param_action(''{0}'', ''ExecutionDomainType'', ''ExportFunction'');</cmd>
            <txt>To set up Model''{0}'' as an export-function model, at the root-level of this model, click the canvas to clear the selection from any blocks. Go to 'Property Inspector > Execution > Set execution domain'. From the 'Domain' list, select 'Export function'.</txt>
        </action>
     </actions>
    ]]>
    </entry>
    <entry key="InvMdlWithNoRootFcnCallSetToExpFcns"><![CDATA[
    To be set up as an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a>, model ''{0}'' must have function-call Inport blocks or Simulink functions at the root level.
    <actions exclusiveFixIts="yes">
        <action type="fixit">
            <cmd>set_param_action(''{0}'', ''SetExecutionDomain'', ''off'');</cmd>
            <txt>At the root level of this model, open the Property Inspector. On the Execution tab, clear 'Set execution domain', or choose 'Domain' option other than 'Export function'.</txt>
        </action>
     </actions>
    ]]>
    </entry>
    <entry key="InvMdlWithPotentialRootFcnCallInportSetToExpFcns"><![CDATA[
    To be set up as an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a>, model ''{0}'' must have function-call Inport blocks or Simulink functions at the root level.
    <actions exclusiveFixIts="yes">
        <action type="fixit">
            <cmd>set_param_action(''{1}'', ''OutputFunctionCall'', ''on'');</cmd>
            <txt>Select 'Output function call' parameter on Inport block ''{1}''.</txt>
        </action>
     </actions>
    ]]>
    </entry>
    <entry key="InvMdlWithRootCtrlPortSetToExpFcns"><![CDATA[
    Unable to set up model ''{1}'' as an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> because the model contains a root-level control port ''{0}''.
    <actions exclusiveFixIts="yes">
        <action type="fixit">
            <cmd>set_param_action(''{1}'', ''SetExecutionDomain'', ''off'');</cmd>
            <txt>At the root level of model ''{1}'', open the Property Inspector. On the Execution tab, clear 'Set execution domain', or choose 'Domain' option other than 'Export function'.</txt>
        </action>
        <action type="fixit" retvalue="false">
            <cmd>delete_block(''{0}'');</cmd>
            <txt>Delete the control port ''{0}'' in the root graph of ''{1}''.</txt>
        </action>
     </actions>
    ]]>
    </entry>
    <entry key="MdlWithClientServerPortMustSetToExpFcns"><![CDATA[
    Model ''{0}'' must be set up as an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> because the model contains function port ''{1}''.
    <actions exclusiveFixIts="yes">
        <action type="fixit">
        <cmd>set_param_action(''{0}'', ''SetExecutionDomain'', ''on'');set_param_action(''{0}'', ''ExecutionDomainType'', ''ExportFunction'');</cmd>
            <txt>To set up this model as an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a>, at the root level of this model, open the Property Inspector. On the Execution tab, select 'Set execution domain', and set 'Domain' to 'Export function'.</txt>
        </action>
     </actions>
    ]]>
    </entry>
    <entry key="InvMdlWithAsyncTaskSpecSetToExpFcns"><![CDATA[
    Unable to set up model ''{1}'' as an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a>, because function-call root-level Inport block ''{0}'' is connected to an Asynchronous Task Specification block ''{1}''.
    <actions exclusiveFixIts="yes">
        <action type="fixit" retvalue="false">
            <cmd>set_param(''{1}'', ''Commented'', ''Through'');</cmd>
            <txt>Comment through or remove Asynchronous Task Specification block ''{1}'', and reconnect function-call root-level Inport block.</txt>
        </action>
        <action type="fixit">
            <cmd>set_param_action(''{2}'', ''SetExecutionDomain'', ''off'');</cmd>
            <txt>If this model is not intended to be an export-function model, at the root level of model ''{2}'', open the Property Inspector. On the Execution tab, clear 'Set execution domain', or choose 'Domain' option other than 'Export function'.</txt>
        </action>
     </actions>
    ]]>
    </entry>
    <entry key="RootInportFcnCallWithAsyncTaskSpecBlkMultDsts">Inport block ''{0}'' has a connection that is not valid. Since an Asynchronous Task Specification block has been placed at the output port of this Inport block, the output signal of the Inport block cannot be connected to any other block (including another Asynchronous Task Specification block).</entry>
    <entry key="AsyncTaskSpecBlkNotDrivenByRootInportFcnCall">Asynchronous Task Specification block ''{0}'' must be directly connected to the output port of a root-level Inport block that has been configured to output a function-call signal.</entry>
    <entry key="AsyncTaskSpecBlkUnconnectedOutput">Output of Asynchronous Task Specification block ''{0}'' cannot be unconnected or connected to a Terminator block.</entry>
    <entry key="ExpFcnSpecBlkNotDrivenByRootInportFcnCall">Export Function Specification block ''{0}'' must be directly connected to the output port of a root-level Inport block that has been configured to output a function-call signal.</entry>
    <entry key="ExpFcnSpecBlkUnconnectedOutput">Output of Export Function Specification block ''{0}'' cannot be unconnected or connected to a Terminator block.</entry>
    <entry key="RootInportFcnCallInvalidDst"><![CDATA[Inport block ''{0}'' has selected its dialog parameter 'Output function call'. However, it connects to <sldiag objui="inport" objparam="{1,number,integer}" objname="{2}">input port {1,number,integer}</sldiag> of ''{2}'' that cannot accept a function-call signal.]]></entry>
    <entry key="RootInportFcnCallNotAllowedWithRootControlPort"><![CDATA[
    Unable to configure Inport block ''{0}'' output a function-call signal because a control port ''{1}'' is at the root level of the model.
    <actions exclusiveFixIts="yes">
        <action type="fixit" retvalue="false">
            <cmd>delete_block(''{1}'');</cmd>
            <txt>Delete the control port block ''{1}''.</txt>
        </action>
     </actions>
     ]]>
    </entry>
    <entry key="SimulinkFunctionNotAllowedWithForEach">Simulink function ''{0}'' cannot be placed inside a For Each block.</entry>
    <entry key="SimulinkFunctionGlobalNotAllowedInNonVirtualSS">Simulink function ''{0}'' defined by ''{1}'' is configured to be global, and must be placed either at the root level of a model or in a virtual subsystem hierarchy.</entry>
    <entry key="RootInportFcnCallDuplicateNotAllowed">Duplicate Inport block ''{0}'' is not allowed because ''Output function call'' option is selected for the original Inport block ''{1}''.</entry>
    <entry key="InvalidAsyncBlockWithinSimulinkFunction">Asynchronous block ''{0}'' is not allowed inside a Simulink Function block.</entry>

    <entry key="DataRootInportDrvMultiFcnCallPortGroups"><![CDATA[The root-level Inport block ''{0}'' is connected to input port {1,number,integer} of ''{2}'', which is driven by function-call root-level Inport block ''{3}'', and input port {4,number,integer} of ''{5}'', which is driven by another function-call root-level Inport block ''{6}''. All destinations of a root-level Inport block must be driven by the same function-call root-level Inport block. Consider splitting the root-level Inport block ''{7}'' into two Inport blocks to drive each destination separately.]]></entry>

    <entry key="RateTransBlkDrvMultiFcnCallPortGroups"><![CDATA[The Rate Transition block ''{0}'' is connected to input port {1,number,integer} of ''{2}'', which is driven by function-call root Inport block ''{3}'', and input port {4,number,integer} of ''{5}'', which is driven by another function-call root-level Inport block ''{6}''. All destinations of a Rate Transition block must be driven by the same function-call root-level Inport block. Consider using two Rate Transition blocks to drive each destination separately.]]></entry>

    <entry key="RateTransBlkDrvDataAndFcnCallPortGroups"><![CDATA[The Rate Transition block ''{0}'' is connected to input port {1,number,integer} of ''{2}'', which is driven by function-call root Inport block ''{3}'', and input port {4,number,integer} of ''{5}'', which is not driven by any function-call root-level Inport block. All destinations of a Rate Transition block must be driven by the same function-call root-level Inport block. Consider using two Rate Transition blocks to drive each destination separately.]]></entry>

    <entry key="DataRootInportDrvFcnCallAndDataPortGroups">In a model with a root-level Inport block which outputs a function-call signal, all destinations of the root-level Inport block ''{0}'' must be either Simulink functions or driven by function-call root-level Inport blocks. However, ''{1}'' violates this rule.</entry>

    <entry key="DataRootOutportInFcnCallAndDataPortGroups">In a model with a root-level Inport block which outputs a function-call signal, all sources of any root-level Outport block, such as ''{0}'', must be either Simulink functions or blocks driven by function-call root-level Inport blocks. However, ''{1}'' violates this rule.</entry>

    <entry key="FcNodeInMultiFcnCallPortGroups">The function-call block ''{0}'' is driven by function-call root-level Inport blocks ''{1}'' and ''{2}''. Any function-call block can only be driven by at most one function-call root-level Inport block.</entry>
    <entry key="FcNodeInDataAndFcnCallPortGroups">The trigger to Function-Call Subsystem block ''{0}'' should be traced back to the same exported function initiator. The following triggers have different initiators:</entry>
    <entry key="FcNodeInDataAndFcnCallPortGroupsCauseData">The non-exported initiator, ''{0}'' is driving the Function-Call Subsystem block.</entry>
    <entry key="FcNodeInDataAndFcnCallPortGroupsCauseExpRoot">The exported root inport, ''{0}'' is driving the Function-Call Subsystem block.</entry>
    <entry key="FcNodeInDataAndFcnCallPortGroupsCauseSimFcn">The exported Simulink Function, ''{0}'' is driving the Function-Call Subsystem block.</entry>
    <entry key="FcnCallSysCalledByMultiFcnCallPorts">The function-call block ''{0}'' is driven by multiple function-call root-level Inport blocks. Any function-call block can only be directly or indirectly driven by at most one function-call root-level Inport block.</entry>

    <entry key="InvFcnCallSysCalledByMultiFcnCallRootInports">
    Inside an export-function model, when a function-call block ''{0}'' is indirectly driven by multiple function-call root-level Inport blocks, all its initiators must be driven by the same set of function-call root-level Inport blocks. However, ''{1}'' is invoked by function-call signals originating from ''{2}'' and ''{3}'' that violate this rule.</entry>

    <entry key="InvExpFcnMdlCalledByMultiFcnCallRootInports"><![CDATA[
    Connecting <sldiag objui="inport" objparam="{1}" objname="{0}">input port ''{1}''</sldiag> of Model block ''{0}'' to multiple function-call root-level Inport blocks ''{2}'' and ''{3}'' is not supported when this Model block references an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a>.]]></entry>

    <entry key="LoopCausedByNgSrcForExpFcnMdlInSingleTaskingHarness">
      The function-call initiators invoking the export-function model referenced by Model block ''{0}'' must execute in the order of their sample times or task priorities. In a model with a single task, this implies that ''{1}'' must execute before ''{2}''. However, applying this rule caused a data dependency violation. Consider clearing the 'Configuration Parameters' > 'Solver' > 'Treat each discrete rate as a separate task' option or tracing the data connections between the blocks listed below to resolve the data dependency loop.
    </entry>
    <entry key="LoopCausedByNgSrcForExpFcnMdlInSingleTaskingHarnessDetail">
      Block ''{0}'' is involved in the loop.
    </entry>

    <entry key="LoopCausedByMuxedFcnCaller">
      ''{0}'' must execute before ''{1}'' because they both drive the same function-call block through Mux block ''{2}''. When a function-call block is called by multiple initiators in the same task muxing their function-call output signals, the one connected to the input port of lower index of the Mux block executes before the one connected to the input port of higher index of the Mux block.
    </entry>

    <entry key="FcnCallNumInOutArgsMismatchCallerSrcFcnDst">Function ''{2}'' defined by ''{1}'' differs in number of reusable arguments from its caller ''{0}''.</entry>
    <entry key="FcnCallNumInOutArgsMismatchCallerSrcGenericDst">Function ''{1}'' differs in number of reusable arguments from its caller ''{0}''.</entry>
    <entry key="FcnCallNumInOutArgsMismatchGenericSrcFcnDst">Function ''{1}'' defined by ''{0}'' differs in number of reusable arguments from its caller.</entry>
    <entry key="FcnCallNumInOutArgsMismatchGenericSrcDst">Function ''{0}'' differs in number of reusable arguments from its caller.</entry>

    <entry key="FcnCallNumInArgsMismatchCallerSrcFcnDst">Function ''{4}'', defined
    by ''{1}'', was expecting {2,number,integer} input 
    arguments, but was called by ''{0}'' with {3,number,integer}.</entry>
    <entry key="FcnCallNumInArgsMismatchCallerSrcGenericDst">Function ''{3}''
    was expecting {1,number,integer} input arguments, but was called by 
    ''{0}'' with {2,number,integer}.</entry>
    <entry key="FcnCallNumInArgsMismatchGenericSrcFcnDst">Function ''{3}'', 
    defined by ''{0}'', was expecting {1,number,integer} input 
    arguments, but was called with {2,number,integer}.</entry>
    <entry key="FcnCallNumInArgsMismatchGenericSrcDst">Function ''{2}'' was
    expecting {0,number,integer} input arguments, but was called with 
    {1,number,integer}.</entry>

    <entry key="FcnCallInArgDTypeMismatchCallerSrcFcnDst">Function ''{5}'',
    defined by ''{1}'', was expecting datatype ''{4}'' for input  
    argument {2,number,integer}, but was called by ''{0}'' with 
    ''{3}''.</entry>
    <entry key="FcnCallInArgDTypeMismatchCallerSrcGenericDst">Function ''{4}''
    was expecting datatype ''{3}'' for input argument {1,number,integer}, 
    but was called by ''{0}'' with ''{2}''.</entry>
    <entry key="FcnCallInArgDTypeMismatchGenericSrcFcnDst">Function ''{4}'', 
    defined by ''{0}'', was expecting datatype ''{3}'' for input 
    argument {1,number,integer}, but was called with ''{2}''.</entry>
    <entry key="FcnCallInArgDTypeMismatchGenericSrcDst">Function ''{3}'' was 
    expecting datatype of ID {2,number,integer} for input argument {0,number,integer}, 
    but was called with {1,number,integer}.</entry>

    <entry key="FcnCallInArgCplxMismatchCallerSrcFcnDst">Function ''{5}'', 
    defined by ''{1}'', was expecting complexity {4,number,integer} (0=real or
    1=complex) for input argument {2,number,integer}, but was called by 
    ''{0}'' with {3,number,integer}.</entry>
    <entry key="FcnCallInArgCplxMismatchCallerSrcGenericDst">Function ''{4}''
    was expecting complexity {3,number,integer} (0=real or 1=complex) for input
    argument {1,number,integer}, but was called by ''{0}'' with 
    {2,number,integer}.</entry>
    <entry key="FcnCallInArgCplxMismatchGenericSrcFcnDst">Function ''{4}'',
    defined by ''{0}'', was expecting complexity {3,number,integer} (0=real or
    1=complex) for input argument {1,number,integer}, but was called with 
    {2,number,integer}.</entry>
    <entry key="FcnCallInArgCplxMismatchGenericSrcDst">Function ''{3}'' was 
    expecting complexity {2,number,integer} (0=real or 1=complex) for input argument 
    {0,number,integer}, but was called with {1,number,integer}.</entry>

    <entry key="FcnCallInArgDimsMismatchCallerSrcFcnDst">Function ''{5}'', 
    defined by ''{1}'', was expecting dimensions ''{4}'' 
    for input argument {2,number,integer}, but was called by ''{0}'' with 
    ''{3}''.</entry>
    <entry key="FcnCallInArgDimsMismatchCallerSrcGenericDst">Function ''{4}''
    was expecting dimensions ''{3}'' for input 
    argument {1,number,integer}, but was called by ''{0}'' with
    ''{2}''.</entry>
    <entry key="FcnCallInArgDimsMismatchGenericSrcFcnDst">Function ''{4}'',
    defined by ''{0}'', was expecting dimensions ''{3}''
    for input argument {1,number,integer}, but was called with 
    ''{2}''.</entry>
    <entry key="FcnCallInArgDimsMismatchGenericSrcDst">Function ''{3}'' was 
    expecting dimensions ''{2}'' for input argument 
    {0,number,integer}, but was called with ''{1}''.</entry>

    <entry key="FcnCallNumOutArgsMismatchCallerSrcFcnDst">Function ''{4}'', defined
    by ''{1}'', was expecting {2,number,integer} output 
    arguments, but was called by ''{0}'' with {3,number,integer}.</entry>
    <entry key="FcnCallNumOutArgsMismatchCallerSrcGenericDst">Function ''{3}''
    was expecting {1,number,integer} output arguments, but was called by 
    ''{0}'' with {2,number,integer}.</entry>
    <entry key="FcnCallNumOutArgsMismatchGenericSrcFcnDst">Function ''{3}'', 
    defined by ''{0}'', was expecting {1,number,integer} output 
    arguments, but was called with {2,number,integer}.</entry>
    <entry key="FcnCallNumOutArgsMismatchGenericSrcDst">Function ''{2}'' was
    expecting {0,number,integer} output arguments, but was called with 
    {1,number,integer}.</entry>

    <entry key="FcnCallOutArgDTypeMismatchCallerSrcFcnDst">Function ''{5}'',
    defined by ''{1}'', was expecting datatype ''{4}'' for output  
    argument {2,number,integer}, but was called by ''{0}'' with 
    ''{3}''.</entry>
    <entry key="FcnCallOutArgDTypeMismatchCallerSrcGenericDst">Function ''{4}''
    was expecting datatype ''{3}'' for output argument {1,number,integer}, 
    but was called by ''{0}'' with ''{2}''.</entry>
    <entry key="FcnCallOutArgDTypeMismatchGenericSrcFcnDst">Function ''{4}'', 
    defined by ''{0}'', was expecting datatype ''{3}'' for output 
    argument {1,number,integer}, but was called with ''{2}''.</entry>
    <entry key="FcnCallOutArgDTypeMismatchGenericSrcDst">Function ''{3}'' was 
    expecting datatype of ID {2,number,integer} for output argument {0,number,integer}, 
    but was called with {1,number,integer}.</entry>

    <entry key="FcnCallOutArgCplxMismatchCallerSrcFcnDst">Function ''{5}'', 
    defined by ''{1}'', was expecting complexity {4,number,integer} (0=real or
    1=complex) for output argument {2,number,integer}, but was called by 
    ''{0}'' with {3,number,integer}.</entry>
    <entry key="FcnCallOutArgCplxMismatchCallerSrcGenericDst">Function ''{4}''
    was expecting complexity {3,number,integer} (0=real or 1=complex) for output 
    argument {1,number,integer}, but was called by ''{0}'' with 
    {2,number,integer}.</entry>
    <entry key="FcnCallOutArgCplxMismatchGenericSrcFcnDst">Function ''{4}'',
    defined by ''{0}'', was expecting complexity {3,number,integer} (0=real or
    1=complex) for output argument {1,number,integer}, but was called with 
    {2,number,integer}.</entry>
    <entry key="FcnCallOutArgCplxMismatchGenericSrcDst">Function ''{3}'' was 
    expecting complexity {2,number,integer} (0=real or 1=complex) for output argument 
    {0,number,integer}, but was called with {1,number,integer}.</entry>

    <entry key="FcnCallOutArgDimsMismatchCallerSrcFcnDst">Function ''{5}'', 
    defined by ''{1}'', was expecting dimensions ''{4}'' 
    for output argument {2,number,integer}, but was called by ''{0}'' with 
    ''{3}''.</entry>
    <entry key="FcnCallOutArgDimsMismatchCallerSrcGenericDst">Function ''{4}''
    was expecting dimensions ''{3}'' for output  
    argument {1,number,integer}, but was called by ''{0}'' with
    ''{2}''.</entry>
    <entry key="FcnCallOutArgDimsMismatchGenericSrcFcnDst">Function ''{4}'',
    defined by ''{0}'', was expecting dimensions ''{3}''
    for output argument {1,number,integer}, but was called with 
    ''{2}''.</entry>
    <entry key="FcnCallOutArgDimsMismatchGenericSrcDst">Function ''{3}'' was 
    expecting dimensions ''{2}'' for output argument 
    {0,number,integer}, but was called with ''{1}''.</entry>

    <entry key="ssCallSimulinkFunctionExecArgInvalid">S-Function block ''{0}'' passes an invalid argument to ''ssCallSimulinkFunction'' macro to call Simulink function ''{1}''. The argument {2,number,integer} (known as ''{3}'') must be a pointer to a valid array of ''_ssFcnCallExecArgInfo'' struct, and the struct field ''dataPtr'' must point to a pre-assigned memory buffer for each associated Simulink function argument.</entry>
    
    <entry key="ssCallSimulinkFunctionFail">Memory access violation occurs when S-Function block ''{0}'' is using ''ssCallSimulinkFunction'' macro to call Simulink function ''{1}''. Ensure both the fourth and sixth argument (known as ''execInArg'' and ''execOutArg'') are a pointer to a valid array of ''_ssFcnCallExecArgInfo'' struct, and in each array element, the struct fields ''dataPtr'' and ''dataSize'' are associated with a pre-assigned memory buffer with data type and size matching the corresponding Simulink function argument.</entry>
    
    <entry key="FcnCallSubsysInvalidRoutingBlock"><![CDATA[The function-call signal
      driving function-call input port of block ''{0}'' cannot be routed through
      <sldiag objui="outport" objparam="{1,number,integer}" objname="{2}">output port {1,number,integer}</sldiag> of block ''{2}''. This function-call signal
      can be routed through a From, Goto, Inport, Outport, or Subsystem
      block.]]></entry>
    <entry key="FcnCallBlockInvalidRoutingBlock"><![CDATA[The function-call signal
      driving <sldiag objui="inport" objparam="{0,number,integer}" objname="{1}">input port {0,number,integer}</sldiag> of block ''{1}'' cannot be routed
      through <sldiag objui="outport" objparam="{2,number,integer}" objname="{3}">output port {2,number,integer}</sldiag> of block ''{3}''. This
      function-call signal can be routed through a From, Goto, Inport, Outport,
      or Subsystem block.]]></entry>
    <entry key="SlFcnCodeGenVarSizedSideIO">Block ''{0}'' contains a variable-sized signal which is being used within a Simulink Function to connect to local signals within the model, this is not supported for model reference code generation.</entry>
    <entry key="StubPortBlockMustBeInFcnCallSubsys">Cannot define function arguments for subsystem ''{0}''. Arguments may be defined only for a Simulink function.</entry>
    <entry key="StubPortBlockNotAllowedInRoot">Cannot define function arguments at the root level of a block diagram. Arguments may be defined only for a Simulink function.</entry>
    <entry key="SimulinkFunctionInvDiagSettings"><![CDATA[Configuration Parameters settings for the <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> ''{0}'' are invalid.]]></entry>
    <entry key="SWArchMdlInvDiagSettings">Invalid configuration parameter settings for software architecture model ''{0}''.</entry>
    <entry key="InvFcnCallName">The variable ''{0}'' does not provide a valid function-call object type name.</entry>
    <entry key="FcnCallObjectSignature">Signature:</entry>
    <entry key="ResolveToFcnCallObjInMaskWorkspace">The symbol ''{0}'' resolved to a function signature object in the mask workspace; Function signature objects should only be created in the base workspace</entry>
    <entry key="ResolveToFcnCallObjInModelWorkspace">The symbol ''{0}'' resolved to a function signature object in the model workspace; Function  signature objects should only be created in the base workspace</entry>
    <entry key="FcnCallEmptyArguments">The function signature object ''{0}'' must contain at least one argument (input or output).</entry>
    <entry key="FcnCallPortArgMismatch">The function signature object ''{0}'' must contain the same number of arguments (input and output) as the number of Stub Inports and Outports in the function-call subsystem.</entry>
    <entry key="FcnCallIncorrectComplexEntry">The complexity of function argument ''{0}'' must be set to 'auto', 'real' or 'complex'.</entry>
    <entry key="FcnCallIncorrectArgumentEntry">The argument provided should either be of type Simulink.FunctionArgument, Simulink.FunctionStatusArgument or a vector of these objects.</entry>
    <entry key="FcnCallIncorrectDataTypeEntry">The data type of function argument ''{0}'' must not be a function signature object.</entry>
    <entry key="FcnCallIncorrectArgTypeEntry">The argument type of function argument ''{0}'' must be set to 'input', 'output' or 'inout'.</entry>
    <entry key="FcnCallIncorrectStatusArgEntry">The function signature object ''{0}'' can have only one status argument set.</entry>
    <entry key="FcnCallArgScope">Scope:</entry>
    <entry key="FcnCallArgument">Arguments</entry>
    <entry key="FcnCallInputArg">Input arguments</entry>
    <entry key="FcnCallOutputArg">Output arguments</entry>
    <entry key="InvalidSimulinkFunctionName">The function name ''{0}'' of the Simulink Function block ''{1}'' must be a valid ANSI C identifier.</entry>
    <entry key="InvalidFunctionNameAtCaller"> Function name, ''{0}'', called by the Function Caller block ''{1}'' must be a valid ANSI C identifier.</entry>
    <entry key="InvalidFunctionScopeName"> The block ''{0}'' contains Simulink functions, and the block name also represents the name of the scope for these Simulink functions. The block name specified, ''{1}'' is not a valid ANSI C identifier required for being a scope name. Valid identifiers start with an alphabetic or ''_'' character, followed by alphanumeric or ''_'' characters.</entry>
    <entry key="InvalidFunctionCallerScopeName"> The block ''{0}'' is invoking a scoped Simulink function. The specified scope name, ''{1}'' is not a valid ANSI C identifier, which is required for a scope name. Valid identifiers start with an alphabetic or ''_'' character, followed by alphanumeric or ''_'' characters.</entry>
    <entry key="InvalidTriggerPortScopeName"> Scope name ''{0}'' is empty or is not a valid ANSI C identifier, which is required for a scope name. Valid identifiers start with an alphabetic or ''_'' character, followed by alphanumeric or ''_'' characters.</entry> 
    <entry key="DuplicateInArgName"> Input argument names provided in the function prototype of block ''{0}'' must be unique.</entry>
    <entry key="DuplicateOutArgName"> Output argument names provided in the function prototype of block ''{0}'' must be unique.</entry> 
    <entry key="FcnCallDuplicateServerBlock">Two blocks ''{0}'', and ''{1}'' are defining the same function ''{2}''. Function names must be unique.</entry>
    <entry key="AmbiguousSourceModel">Global function ''{0}'' is defined in multiple models.</entry>
    <entry key="FunctionIncludedBy">The function is included from model ''{0}'' for caller block ''{1}''.</entry>
    <entry key="FunctionDefinedIn">The function is defined in model ''{0}'' by function block''{1}''.</entry>
    <entry key="GlobalSimulinkFcnNotInExpFcnMdl"><![CDATA[
    Simulink function ''{0}'' must be in an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> to be called by block ''{2}'' from another model.
    <actions exclusiveFixIts="yes">
        <action type="suggestion">
            <txt>At the root level of the model referenced by Model block ''{1}'', open the 'Property Inspector'. On the 'Execution' tab, select 'Set execution domain', and set 'Domain' to 'Export function'.</txt>
        </action>
    </actions>]]>
    </entry>
    <entry key="GlobalSimulinkFcnNotInExpFcnMdlWithFix"><![CDATA[
    Simulink function ''{0}'' must be in an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> to be called by block ''{2}'' from another model. 
    <actions exclusiveFixIts="yes">
        <action type="fixit">
            <cmd>set_param_action(''{3}'', ''SetExecutionDomain'', ''on'');set_param_action(''{3}'', ''ExecutionDomainType'', ''ExportFunction'');</cmd>
            <txt>At the root level of model ''{3}'' referenced by Model block ''{1}'', open the 'Property Inspector'. On the 'Execution' tab, select 'Set execution domain', and set 'Domain' to 'Export function'.</txt>
        </action>
    </actions>]]>
    </entry>
    <entry key="UndefinedFunctionBuilt">The function ''{0}'' called by block ''{1}'' has not been defined in the model.</entry>
    <entry key="UnknownFunctionInvoked">A definition for the function ''{0}'' called by block ''{1}'', could not be found. </entry>
    <entry key="UnknownFunctionSkipped">Block ''{1}'' does not call function ''{0}'' from client port ''{2}'' because the client port is not connected to a server port with valid function element ''{0}'' defined.</entry>
    <entry key="UnknownServerReferred">Cannot find a Simulink function named ''{0}'' in the model.</entry>   
    <entry key="CallingUndeclaredFunction">Block ''{1}'' must declare the function prototype to call Simulink function ''{0}''. For S-Function block, use ''ssDeclareFunctionCaller'' macro to declare the function prototype.</entry>
    <entry key="UnresolvedScopedFunctionCall">Block ''{0}'' is unable to call the function ''{1}'' with scope name ''{2}'' because the function definition is not found.
    <![CDATA[
    <actions exclusiveFixIts="yes">
        <action type="suggestion" id="scopedFcn">
            <txt>To call a scoped function, see <a href="matlab:helpview(fullfile(docroot, 'simulink/ug/troubleshoot-block-unable-to-call-function.html'))">Resolve Error: Block is Unable to Call the Scoped Simulink Function</a> for more information.</txt>
        </action>
        <action type="fixit" id="fcnPort" retvalue="false">
            <cmd>slprivate(''insertFunctionElementPort'', bdroot(''{0}''), ''{2}'', ''{1}'', true);</cmd>
            <txt>To call a port-scoped function outside the model, add a Function Element Call block ''{2}.{1}'' at the model root level.</txt>
        </action>
    </actions>]]>
    </entry>
    <entry key="CallerScopeCannotBeCurrentModelName">Block ''{0}'' is unable to call the function ''{1}'' using the model name ''{2}'' as the scope name. Correct the scope name and the function placement.
    <![CDATA[To learn about the correct use, see <a href="matlab:helpview(fullfile(docroot, 'simulink/ug/troubleshoot-block-unable-to-call-function.html'))">Resolve Error: Block is Unable to Call the Scoped Simulink Function</a>.]]>
    </entry>
    <entry key="UnableToCallFunctionFromRef">Block ''{0}'' in the reference model is unable to call the scoped Simulink function ''{1}'' defined by block ''{2}''. 
    <![CDATA[
    <actions exclusiveFixIts="yes">
        <action type="fixit" id="setGlobal" retvalue="false">
            <cmd>set_param(''{3}'', ''FunctionVisibility'', ''global'');</cmd>
            <txt>Set ''FunctionVisibility'' parameter of block ''{3}'' to ''global''.</txt>
        </action>
        <action type="suggestion" id="moveFcnToRef">
            <txt>Move block ''{2}'' that defines the scoped Simulink function ''{1}'' into a reference model (configure as export-function model), and use that model name as the scope name in the caller block ''{0}''. See <a href="matlab:helpview(fullfile(docroot, 'simulink/ug/simulink-functions-in-referenced-models.html'))">Simulink Function Blocks in Referenced Models</a> for more information.</txt>
        </action>
    </actions>]]>
    </entry>
    <entry key="UnableToCallScopedFunctionFromRef">Block ''{0}'' in the reference model is unable to call the Simulink function ''{1}'' defined by block ''{2}'' using scope name ''{4}''. 
    <![CDATA[
    <actions exclusiveFixIts="yes">
        <action type="fixit" id="setGlobal" retvalue="false">
            <cmd>set_param(''{3}'', ''FunctionVisibility'', ''global''); set_param(''{0}'', ''FunctionPrototype'', regexprep(get_param(''{0}'', ''FunctionPrototype''), ''(\\w+)\\.'', ''''));</cmd>
            <txt>Set ''FunctionVisibility'' parameter of block ''{3}'' to ''global'' and remove the scope name in the caller block ''{0}''.</txt>
        </action>
        <action_catalog id="Simulink:FcnCall:UnableToCallFunctionFromRef" ids="moveFcnToRef">
            <arg>{0}</arg> <arg>{1}</arg> <arg>{2}</arg> <arg>{3}</arg>
        </action_catalog>
    </actions>]]>
    </entry>
    <entry key="MultiInstanceIfCallScopeIsModelName">There are multiple instances of the reference model ''{0}'' that defines the Simulink function ''{1}''. The function is called by block ''{2}'' using that model name as the scope name which does not specify an instance. Thus, the function is resolved to one instance in Model block ''{3}''.
    <![CDATA[
    <actions exclusiveFixIts="yes">
        <action type="fixit" id="ChangeCallerScope" retvalue="false" enabled="true">
            <cmd>set_param(''{2}'', ''FunctionPrototype'', regexprep(get_param(''{2}'', ''FunctionPrototype''), ''(\\w+)\\.'', ''__ARG1__.''));</cmd>
            <cargs>
                <carg name="__ARG1__" type="text">
                    <txt_prompt></txt_prompt>
                    <def_cmd>"{4}"</def_cmd>
                </carg>
            </cargs>
            <txt>In the caller block ''{2}'', change the scope name to the Model block (instance) name:</txt>
        </action>
        <action type="fixit" id="RemoveInstanceToOne" retvalue="false">
            <txt>Keep only one Model block referencing ''{0}'' and remove others.</txt>
        </action>
    </actions>]]>
    </entry>
    <entry key="RequireSingleInstanceIfCallScopeIsModelName">When generating code for the top model, reference model ''{0}'' that defines the Simulink function ''{1}'' only allows a single instance, because the function is called by block ''{2}'' using that model name ''{0}'' as the scope name which does not specify an instance. 
    <![CDATA[
    <actions exclusiveFixIts="yes">
        <action type="fixit" id="AllowSingleInstance" retvalue="false">
            <cmd>configset.internal.fixIt(''{0}'', ''ModelReferenceNumInstancesAllowed'', ''Single'');</cmd>
            <txt>For model ''{0}'', set <sldiag objui="configset" objparam="ModelReferenceNumInstancesAllowed"></sldiag> parameter to ''Single''.</txt>
        </action>
    </actions>]]>
    </entry>
    <entry key="FcnCallArgumentCatalogMismatch">There is a mismatch in argument specifications between function definition of ''{0}'' and its caller.</entry>
    <entry key="FcnCallArgumentPrototypeInvalidDatatype">Datatype ''{1}'' specified in prototype specification at block ''{0}'' is invalid.</entry>
    <entry key="FcnCallArgumentSpecificationMismatch">The number of input/output argument specifications provided, and the number of input/output arguments provided in the function prototype at block ''{0}'' must match.</entry>
    <entry key="FcnCallArgumentSpecificationInvalid">The expressions provided for input/output argument specifications at block ''{0}'' must evaluate to a built-in datatype or a Simulink.NumericType object.</entry>
    <entry key="FcnCallArgumentSpecificationINOUTMismatch">The input and output
    argument specifications provided for argument ''{0}'' which is both an input
    and output argument at block ''{1}'', must match.</entry>
    <entry key="FcnCallArgsINOUTMismatch">The specifications of dimensions,
    complexity and data type for the reusable input argument {0,number,integer},
    and reusable output argument {1,number,integer} at block ''{2}'', must match.</entry>
    <entry key="FcnCallNeedsNonvirtualBus"><![CDATA[Block ''{1}'' requires the bus at its <sldiag objui="inport" objparam="{0,number,integer}" objname="{1}">input port {0,number,integer}</sldiag> to be nonvirtual. Consider inserting a Signal Conversion block to convert the bus to nonvirtual.]]></entry>
    <entry key="FcnCallArgNotShared">The data scope of data type ''{2}'' must be set to ''Imported'' or ''Exported''. This condition is required to be able to export the declaration of argument ''{0}'' of function ''{1}''.</entry>
    <entry key="FcnCallPrototypeInvalid" note="stringDatatypeUpdate">The character vector ''{0}'' specified for prototype specification is invalid.</entry>
    <entry key="FcnCallNeedsTimeAccess">Block ''{0}'' is not able to access absolute time because it is contained in a Simulink Function block. Consider changing your model such that time is passed in as an argument to the Simulink function.</entry>
    <entry key="FunctionCallerNonSourceInheritedTs">Function Caller block ''{0}'' must specify inherited sample time (-1 is inherited) when the block is not a source.</entry>
    <entry key="FunctionCallerNonNumericTypeInArgSpec">Input argument specifications at Function Caller block ''{0}'' must specify examples of built-in or user-defined data types. Examples of user-defined data types, including Bus, Fixed-point, Enumerations, and Alias types, may be provided with a Simulink.Parameter object.</entry>
    <entry key="FunctionCallerNonNumericTypeOutArgSpec">Output argument specifications at Function Caller block ''{0}'' must specify examples of built-in or user-defined data types. Examples of user-defined data types, including Bus, Fixed-point, Enumerations, and Alias types, may be provided with a Simulink.Parameter object.</entry>
    <entry key="FcnCallNeedsGlobalDWork">Function ''{0}'' may not be invoked concurrently because it contains block ''{1}'' which may access global data through its dwork vectors. This diagnostic is reported because ''Can be invoked concurrently'' option is selected in the AUTOSAR configuration for the Simulink Function block ''{2}''.</entry>
    <entry key="FcnCallNeedsGlobalOutputs">Function ''{0}'' may not be invoked concurrently because it contains block ''{1}'' with persistent outputs. This diagnostic is reported because ''Can be invoked concurrently'' option is selected in the AUTOSAR configuration for Simulink Function block ''{2}''.</entry>
    <entry key="SimulinkFunctionInvalidBusVarDims">Data type ''{0}'' of argument ''{1}'' of the function ''{2}'' defined in block ''{3}'' is a bus containing variable-size elements. Simulink does not support calling Simulink Functions with variable-sized arguments.</entry>
    <entry key="SimulinkFunctionCycleMsg">Simulink does not support the execution of function-call cycles:</entry>
    <entry key="CascadeSimulinkFunction">Function ''{0}'' contains block ''{1}'' which calls ''{2}''</entry>
    <entry key="SimulinkFunctionInconsistentPrototype">The arguments for function ''{0}'' must use consistent names between ''{1}'' and ''{2}''.</entry>
    <entry key="SimulinkFunctionInvalidRootIOForCoder">Simulink function ''{0}'' defined in model ''{1}'' may not be connected to root Inport or root Outport blocks when the model is generating code as a model reference target.</entry>
    <entry key="SimulinkFunctionInvalidScalarRootIOForCoder"><![CDATA[The scalar root-level Inport block ''{0}'' defined in model ''{1}'' may not be connected to Simulink Function blocks when the model is generating code as a model reference target unless ''Configuration Parameters'' > ''Model referencing'' > ''Pass fixed-size scalar root inputs by value for code generation'' is deselected.]]></entry>
    <entry key="SimulinkFunctionNonreusableCodeInterface">Model ''{0}'' may not generate reusable or C++ class code because it contains a global Simulink function defined in ''{1}''. Consider setting the option 'Code interface packaging' to 'Nonreusable function'.</entry>
    <entry key="SingleInstScopedSimulinkFunctionNonreusableCodeInterface">Model ''{0}'' may not generate reusable code because it contains one or more Scoped Single Instance Simulink functions. Consider setting the option 'Code interface packaging' to 'Nonreusable function'.</entry>
    <entry key="SimulinkFunctionInvalidLocation">The block ''{0}'' defining Simulink function ''{1}'',  must be contained at the root level of a model or within the root level of a referenced model.</entry>
    <entry key="SimulinkFunctionInRefMdlInvalidLocation">Inside the model referenced by Model block ''{0}'' there are global Simulink functions. Therefore, this Model block must be contained within the root level of a model or within a virtual subsystem hierarchy.</entry>
    <entry key="SimulinkFunctionInSSInvalidAccess">The Simulink function ''{0}'' cannot be accessed by ''{2}'' because the function is scoped to a nonvirtual subsystem ''{1}''.</entry>
    <entry key="SimulinkFunctionInAtomicSSInvalidAccess">The subsystem block ''{0}'' is atomic. Consider clearing the 'Treat as atomic unit' flag on the subsystem block dialog.</entry>
    <entry key="SimulinkFunctionAndCallerDifferentRates">The sample time {0} of the function ''{1}'' defined by block ''{2}'' differs from the sample time {3} of its caller block ''{4}''.</entry>
    <entry key="SimulinkFunctionAndCallerDifferentTasks">The function ''{0}'' defined by block ''{1}'' resides in a different task from the task of its caller block ''{2}''.</entry>
    <entry key="SimulinkFunctionDrivenByDifferentRates">Function ''{0}'' defined by block ''{1}'' is invoked by multiple callers with different sample times. It is called by ''{2}'' with sample time {3} and by ''{4}'' with sample time {5}.</entry> 
    <entry key="FcnCallerNotSupportRateType">Sample time of block ''{0}'' must not be continuous because it contains a call to a Simulink function.</entry>
    <entry key="FunctionCallerSvcIntrfArgMismatch">Argument specifications for function ''{0}'' specified in Function Caller block ''{1}'' and in service interface assigned to client-server port ''{2}'' do not match. </entry>
    <entry key="FunctionCallerUnspecifiedArgDims">Provide Input argument specifications and Output argument specifications for the Function Caller block ''{0}'' because the corresponding Simulink function could not be resolved to within this hierarchy, model, or any referenced model.</entry> 
    <entry key="ClientPortUnspecifiedArgDims">Provide argument specifications for client-server port ''{0}'' by assigning it a service interface because the corresponding Simulink function could not be resolved to within this hierarchy, model, or any referenced model. Alternatively provide Input argument specifications and Output argument specifications for the Function Caller block ''{1}''.</entry>
    <entry key="FunctionCallerServicePortInvalidDataType">Invalid datatype for client-server port ''{0}''. Only service interfaces can be assigned to client-server ports. </entry> 
    <entry key="StubInputPortBlockUnspecifiedDataType">The argument input block ''{0}'' must specify a data type.</entry> 
    <entry key="StubInputPortBlockUnspecifiedDimension">The argument input block''{0}'' must fully specify its dimension.</entry> 
    <entry key="StubInputPortBlockUnspecifiedSignalType">The argument input block ''{0}'' must specify a signal type.</entry> 
    <entry key="StubOutputPortBlockUnspecifiedDataType">The argument output block ''{0}'' must specify a data type.</entry> 
    <entry key="StubOutputPortBlockUnspecifiedDimension">The argument output block''{0}'' must fully specify its dimension.</entry> 
    <entry key="StubOutputPortBlockUnspecifiedSignalType">The argument output block ''{0}'' must specify a signal type.</entry>
    <entry key="StubInputPortBlockGlobalVar">The signal leaving the argument input block ''{0}'' must not be testpointed or have a non-auto storage class.</entry> 
    <entry key="StubOutputPortBlockGlobalVar">The signal entering the argument output block ''{0}'' must not be testpointed or have a non-auto storage class.</entry> 
    <entry key="SimFunCallAcrossMdls">$PRODUCT$ does not support calls to Simulink Functions across model boundaries. Define the Simulink Function ''{0}'' within the same model as its caller.</entry>
    <entry key="SimulinkFunctionSFcnAPIDataTypeInvalid">Block ''{0}'' defining Simulink Function ''{1}'', is providing an invalid data type ''{2,number,integer}'' for argument ''{3}''.</entry>
    <entry key="SimulinkFunctionSFcnAPINotFound">Cannot find argument ''{0}'' of function ''{1}'' for ''{2}''.</entry>
    <entry key="ServiceInterfaceTypeConflict">Interface name ''{0}'' for port ''{1}'' has been used for a different definition. Consider using a different name.</entry>
    <entry key="ServiceInterfaceTypeAndSharedDataTypeConflict">Interface name ''{0}'' for port ''{1}'' has previously been declared as an exported type. Consider using a different name.</entry>
    <entry key="CPPClassNotAllowedForFunctionCallsDefinedOutsideModel">Code generator cannot produce C++ class interface for model ''{0}''. Model contains block ''{1}'', which calls a Simulink function (''{2}'') that is defined outside the model hierarchy.</entry>
    <entry key="CPPClassNotAllowedForFCSSCalledByNonInlinedSFcn">Code generator cannot produce C++ class interface for model ''{0}''. Model contains function-call subsystem ''{1}'', which is called by a non-inlined S-Function ''{2}''.</entry>
    <entry key="NoMessageInport"> No message is passed to function-call block.</entry>
    <entry key="InvalidInportNumberForMessageType"> Passing multiple messages into a function-call block is not allowed.</entry>
    <entry key="InvalidOutportNumberForMessageType">Function Caller block ''{0}'' may have at most one output because the block is configured for asynchronous execution.</entry>
    <entry key="PortScopedSimulinkFunctionMustBeAtRootLevel"><![CDATA[Simulink Function block ''{0}'' must be placed at the root level of an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a> because its function visibility is set to ''port''.]]>
    </entry>
    <entry key="SimulinkFunctionProvidedNoServicePort"><![CDATA[Because Simulink function ''{0}'' has function visibility set to ''port'', it must have an associated Function Element block ''{2}.{1}'' placed at the model root level.
    <actions exclusiveFixIts="yes">
        <action type="fixit" id="fcnPort" retvalue="false">
            <cmd>slprivate(''insertFunctionElementPort'', bdroot(''{0}''), ''{2}'', ''{1}'', false);</cmd>
            <txt>Add a Function Element block ''{2}.{1}'' at the model root level.</txt>
        </action>
    </actions>]]>
    </entry>
    <entry key="FunctionCallerRequestedNoServicePort"><![CDATA[Function Caller block ''{0}'' calls an undefined function ''{2}.{1}'' associated with Function Element block ''{3}''. To call an external port-scoped function, use a Function Element Call block instead.
    <actions exclusiveFixIts="yes">
        <action type="fixit" id="fcnPort" retvalue="false">
            <cmd>slprivate(''insertFunctionElementPort'', bdroot(''{0}''), ''{2}'', ''{1}'', true);</cmd>
            <txt>Replace block ''{3}'' with a Function Element Call block ''{2}.{1}'' placed at the model root level.</txt>
        </action>
    </actions>]]>
    </entry>
    <entry key="ClientPortNotAtRootLevel"><![CDATA[The block ''{0}'' is a Function Element Call port and must be placed at the root level of an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a>.]]></entry>
    <entry key="ServerPortNotAtRootLevel"><![CDATA[The block ''{0}'' is a Function Element port and must be placed at the root level of an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a>.]]></entry>
    <entry key="SimulinkFunctionProvidedNoServicePortTs">The Simulink function ''{0}'' is providing a definition for a service through port name ''{1}''. This port must specify its sample-time.</entry>
    <entry key="SimulinkFunctionDuplicateServiceName">Block ''{0}'' is defining a service ''{1}'' through port ''{2}'', but block ''{3}'' is also defining a service of the same name through a different port.</entry>
    <entry key="CannotCreateSubsystemFromClientServerPorts">Cannot create Subsystem from block ''{0}'' because the block contains client-server ports. Client-server ports must reside at the root level of a model.</entry>
    <entry key="ClientServerNoBranching">Block ''{0}'' is making a client call through port number {1,number,integer}. This port must be connected to a server port, and the connection cannot be branched to multiple client ports.</entry>
    <entry key="ClientServerSyncExpFcnOnly"><![CDATA[Block ''{0}'' is making a synchronous client call through input port ''{1}'', and must be placed in an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a>.
     <actions exclusiveFixIts="yes">
        <action type="fixit">
        <cmd>set_param_action(''{2}'', ''SetExecutionDomain'', ''on'');set_param_action(''{2}'', ''ExecutionDomainType'', ''ExportFunction'');</cmd>
            <txt>To set up model ''{2}'' as an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a>, at the root level of this model, open the Property Inspector. On the Execution tab, select 'Set execution domain', and set 'Domain' to 'Export function'.</txt>
        </action>
     </actions>]]>
    </entry>
    <entry key="ClientServerSyncSWArchOnly"><![CDATA[Block ''{0}'' is making a synchronous client call through input port ''{1}'', and must be placed in a software architecture model.]]>
    </entry>
    <entry key="ClientServerNoAccel">Accelerator mode simulation is not supported because model ''{0}'' contains asynchronous client-server function ports.</entry>
    <entry key="ClientServerNoRapid">Rapid Accelerator mode simulation is not supported because model ''{0}'' contains client-server function ports.</entry>
    <entry key="ClientServerNoSILPIL">Model ''{0}'' does not support Software-in-the-loop (SIL) or processor-in-the-loop (PIL) simulation mode for the current target ''{1}'' because the model contains client/server function ports.</entry>
    <entry key="AsyncFunctionCallerNoLogging">Logging the output of Function Caller block ''{0}'' is not supported because the block is configured for asynchronous execution.</entry>
    <entry key="AsyncFunctionCallerConnection">The output of Function Caller block ''{0}'' must be connected to a message triggered subsystem placed in the root level of the model ''{1}'' because the block is configured for asynchronous execution.</entry>
    <entry key="AsyncCallerMsgTrigSubsysSetting"><![CDATA[Message triggered subsystem ''{0}'' for being the asynchronous response function of Function Caller block ''{1}'' must have parameter ''TriggerTime'' set to ''on message available'' and parameter ''ScheduleAsAperiodic'' set to off in the associated Trigger Port block.
        <actions exclusiveFixIts="yes">
            <action type="fixit">
                <cmd>set_param_action(''{2}'', ''TriggerTime'', ''on message available''); set_param_action(''{2}'', ''ScheduleAsAperiodic'', ''off'');</cmd>
                <txt>Set parameter <sldiag objui="blockdlg" objparam="TriggerTime" objname="{2}">''Trigger time''</sldiag> to ''on message available'' and turn off parameter <sldiag objui="blockdlg" objparam="ScheduleAsAperiodic" objname="{2}">''Schedule as aperiodic partition''</sldiag> for block ''{2}''.</txt>
            </action>
        </actions>]]>
    </entry>
    <entry key="AsyncCallerMsgTrigSSMustBeAtRoot">Message triggered subsystem ''{0}'' for being the asynchronous response function of Function Caller block ''{1}'' must be placed at the root level of model ''{2}''.
    </entry>
    <entry key="AsyncFunctionNeedsMultiTasking">The block ''{0}'' contains the asynchronous function ''{1}''.  To allow this you must set the 'Configuration Parameters' > 'Solver' > 'Treat each discrete rate as a separate task' option.
     <![CDATA[
          <actions exclusiveFixIts="yes">
              <action type="fixit">
                  <cmd>set_param_action(''{2}'', ''SolverMode'', ''MultiTasking'');</cmd>
                  <txt>Set configuration parameter <sldiag objui="configset" objparam="EnableMultiTasking" objname="{0}">'Solver' > 'Treat each discrete rate as a separate task'</sldiag> option to change model ''{2}'' to execute in multi-tasking mode.</txt>
              </action>
          </actions>]]>
    </entry>
    <entry key="AsyncFunctionNeedsScheduleEditor">The block ''{0}'' contains the asynchronous function ''{1}''.  The block must either be placed in an export-function model or you must set the 'Schedule rates with' parameter to 'Schedule Editor' from the Block Parameters dialog.
     <![CDATA[
          <actions exclusiveFixIts="yes">
              <action type="fixit">
              <cmd>set_param_action(''{0}'', ''ScheduleRatesWith'', ''Schedule Editor'');</cmd>
                  <txt>Change 'Schedule rates with' to 'Schedule Editor'.</txt>
              </action>
      </actions>]]>
    </entry>
    <entry key="AsyncFunctionNeedsClientPort">The Function Caller block ''{0}''  must resolve to a client port when the 'Execute function call asynchronously' option is checked.</entry>
    <entry key="AsyncFunctionNeedsServerPort">The Simulink Function block ''{0}''  must be port scoped to a server port when the 'Execute function call asynchronously' option is checked.</entry>
    <entry key="AsyncFunctionDisallowPublicSimulinkFunctions">Simulink Function block ''{0}'' must be configured in one of the two following ways when the model contains port-scoped asynchronous Simulink functions:
    (1) Set visibility to 'scoped' and place the block inside a virtual subsystem, so that the function is private to the model.
    (2) Set visibility to 'port' and configure it with a Function Element Out block.
    </entry>
    <entry key="AsyncFunctionDisallowInheritedFunctions">Function ''{0}'' in model ''{1}'' must specify a periodic sample time because the model contains functions scoped to one or more ports.
    </entry>
    <entry key="AsyncFunctionDisallowInheritedFcnsSWArch">Function ''{0}'' in model ''{1}'' must have a periodic sample time because the model contains functions scoped to one or more ports. Open the Functions Editor and edit the function period.
    <![CDATA[
    <actions exclusiveFixIts="yes">
        <action type="suggestion" id="openFunctionsEditor" retvalue="false">
            <cmd>swarch.internal.fixes.showArchitectureEditor(''{1}'')</cmd>
            <txt>Open Functions Editor.</txt>
        </action>
    </actions>
    ]]>
    </entry>
    <entry key="AsyncSpecificationMismatch"> Function ''{0}'' scoped through server port ''{1}'' must have matching specifications for 'Execute function call asynchronously' option at the Simulink Function and corresponding Function Caller blocks.</entry>
    <entry key="UnsupportedAsyncCodegenTargets">Code generation for the Function Caller block ''{0}'' is not supported because the block is configured for asynchronous execution.</entry>
    <entry key="UnsupportedCGForAsyncFcnMultiOutputs">Code generation for the Function Caller block ''{0}'' with more than one output argument is not supported when the block is configured for asynchronous execution.</entry>
    <entry key="AsyncInterfaceMismatchAtCaller">
    <![CDATA[Asynchronicity of the function call execution of the Function Caller block ''{2}'' in Simulink behavior must match the function ''{0}'' defined in the interface of client port ''{1}''.
    <actions exclusiveFixIts="yes">
        <action type="fixit" id="AsyncInterfaceMismatchAtCallerFix">
            <cmd>set_param_action(''{2}'', ''AsynchronousCaller'', ''{3}'');</cmd>
            <txt>Set the 'AsynchronousFunction' parameter of the Function Caller block ''{2}'' to match the 'Asynchronous' parameter of the interface for the function ''{0}''.</txt> 
        </action>
    </actions>
    ]]>
    </entry>
    <entry key="AsyncInterfaceMismatchAtFunction">
    <![CDATA[Asynchronicity of the function call execution of the Trigger block ''{2}'' in Simulink behavior must match the function ''{0}'' defined in the interface of server port ''{1}''.
    <actions exclusiveFixIts="yes">
        <action type="fixit" id="AsyncInterfaceMismatchAtFunctionFix">
            <cmd>set_param_action(''{2}'', ''AsynchronousFunction'', ''{3}'');</cmd>
            <txt>Set the 'AsynchronousFunction' parameter of the Trigger block ''{2}'' to match the 'Asynchronous' parameter of the interface for the function ''{0}''.</txt>
        </action>
    </actions>
    ]]>
    </entry>
    <entry key="ArgBlockFcnArgMinMismatch">
    <![CDATA['Minimum' parameter of function argument ''{0}'' in function ''{1}'' defined in ''{2}'' must match 'OutMin' parameter of argument block ''{3}''
    <actions exclusiveFixIts="yes">
        <action type="fixit" id="ArgBlockFcnArgMinMismatchFix">
            <cmd>set_param_action(''{3}'', ''OutMin'', ''{4}'');</cmd>
            <txt>Set the 'OutMin' parameter of the Argument block ''{5}'' to match the 'Minimum' property of the function argument in ''{2}''.</txt>
        </action>
    </actions>
    ]]>
    </entry>
    <entry key="ArgBlockFcnArgMaxMismatch">
    <![CDATA['Maximum' parameter of function argument ''{0}'' in function ''{1}'' defined in ''{2}'' must match 'OutMax' parameter of argument block ''{3}''
    <actions exclusiveFixIts="yes">
        <action type="fixit" id="ArgBlockFcnArgMaxMismatchFix">
            <cmd>set_param_action(''{3}'', ''OutMax'', ''{4}'');</cmd>
            <txt>Set the 'OutMax' parameter of the Argument block ''{5}'' to match the 'Maximum' property of the function argument in ''{2}''.</txt>
        </action>
    </actions>
    ]]>
    </entry>
    <entry key="AsyncInterfaceMismatchSelect">Select</entry>
    <entry key="AsyncInterfaceMismatchDeselect">Deselect</entry> 
    <entry key="UnsupportedCGForAsyncFcnVoidOutput">Code generation for the Function Caller block ''{0}'' with no output arguments is not supported when the block is configured for asynchronous execution.</entry>
    <entry key="InvalidFunctionOrder">In export-function model ''{0}'', function ''{1}'' and ''{2}'' have a conflicting order.
    <![CDATA[
    <actions exclusiveFixIts="yes">
        <action type="fixit" retvalue="false">
            <cmd>set_param("{0}","OrderFunctionsByDependency","off"); tcg = sltp.TaskConnectivityGraph("{0}"); tcg.assignInputPortPrioritiesForModel();</cmd>
            <txt>The model has become inconsistent. Click the ''Fix'' button to resolve it.</txt>
        </action>
    </actions>
    ]]>
    </entry>
    <entry key="ClientPortDelegateUnsupported">
      <![CDATA[Invalid connection between the function port ''{0}'' of Model block ''{1}'' and data port ''{2}''. A function port must be connected to an exporting function port of another Model block. See <a href="matlab:helpview('systemcomposer', 'author-service-interfaces-for-client-server-communication')">Author Service Interfaces for Client-Server Communication</a> in the System Composer documentation for more information on how to model client-server communication.]]>
    </entry>
    <entry key="ClientPortConnectionUnsupported">
      <![CDATA[Invalid connection between the function port ''{0}'' of Model block ''{1}'' and block ''{2}''. A function port must be connected to an exporting function port of another Model block. See <a href="matlab:helpview('systemcomposer', 'author-service-interfaces-for-client-server-communication')">Author Service Interfaces for Client-Server Communication</a> in the System Composer documentation for more information on how to model client-server communication.]]>
    </entry>
    <entry key="ServerPortDelegateUnsupported">
      <![CDATA[Invalid connection between the exporting function port ''{0}'' of Model block ''{1}'' and data port ''{2}''. An exporting function port must be connected to a function port of another Model block. See <a href="matlab:helpview('systemcomposer', 'author-service-interfaces-for-client-server-communication')">Author Service Interfaces for Client-Server Communication</a> in the System Composer documentation for more information on how to model client-server communication.]]>
    </entry>
    <entry key="ServerPortConnectionUnsupported">
      <![CDATA[Invalid connection between the exporting function port ''{0}'' of Model block ''{1}'' and block ''{2}''. An exporting function port must be connected to a function port of another Model block. See <a href="matlab:helpview('systemcomposer', 'author-service-interfaces-for-client-server-communication')">Author Service Interfaces for Client-Server Communication</a> in the System Composer documentation for more information on how to model client-server communication.]]>
    </entry>
    <entry key="ClientServerModelRefPortsMustHaveSameInterfaceForCG">
      <![CDATA[For code generation, server port ''{0}'' (<sldiag objui="outport" objparam="{1,number,integer}" objname="{2}">link</sldiag>) of ''{2}'' and client port ''{3}'' (<sldiag objui="inport" objparam="{4,number,integer}" objname="{5}">link</sldiag>) of ''{5}'' must either specify the same service interface or, if not using service interfaces, have the same port name. To fix, change the data type or port name of the associated function element ports in the referenced models.]]>
    </entry>
    <entry key="ClientServerDelegationPortsMustHaveSameInterfaceForCG">
      <![CDATA[For code generation, the connected client or server ports, ''{0}'' port (''{1}'') of ''{2}'' and port ''{3}'' (<sldiag objui="{4}" objparam="{5,number,integer}" objname="{6}">link</sldiag>) of ''{6}'' must either specify the same service interface or, if not using service interfaces, have the same port name.]]>
    </entry>
    <entry key="SimulinkStateContainsFcnCallInAcceleratorMode">Block ''{0}'' cannot be simulated in accelerator mode because it outputs a function call signal inside a Simulink based state in a Stateflow chart.</entry>
    <entry key="CoreBlockCannotCallSFcnInAcceleratorMode">S-Function block ''{0}'' cannot be simulated in accelerator mode because its function-call input port {1,number,integer} is driven by block ''{2}'' that is not a non-inlined S-Function. Examples of function-call initiators which are not inlined for accelerator are Stateflow charts and S-Functions which do not use TLC with accelerator.</entry>
    <entry key="ScopeToPortPrompt">&lt;Select or type a port name&gt;</entry> 
    <entry key="AddFunctionPortTitle">Add function port</entry>
    <entry key="AddFunctionPortDialog">A new function port ''{0}'' is specified. Do you want to create this port now?</entry> 
    <entry key="AsyncCallerOnlySupportsExpFcnMdl">
    <![CDATA[
    Executing function asynchronously from block ''{0}'' is only supported if the block is placed inside a function of an <a href="matlab:helpview([docroot ''/toolbox/simulink/helptargets.map''], ''export_function_models'')">export-function model</a>.
    <actions exclusiveFixIts="yes">
        <action type="fixit" id="SetToSync" retvalue="false">
            <cmd>set_param_action(''{0}'', ''AsynchronousCaller'', ''off'');</cmd>
            <txt>Set parameter ''Execute function call asynchronously'' of block ''{0}'' to ''off''.</txt>
        </action>
    </actions>
    ]]>
    </entry>
    <entry key="InvalidArgumentDatatypeInServiceInterface">Invalid data type ''{0}'' specified for argument ''{1}'' of function element ''{2}'' in service interface ''{3}''.</entry> 
    <entry key="MultiFunctionsSameNameInMdlRef"><![CDATA[Model block ''{0}'' contains multiple Simulink functions named ''{1}'', which is not supported when referencing a protected model from a previous release and simulating in accelerator mode. Create or update the protected model in this release using the original model file.]]></entry> 
  </message>
</rsccat>

<!-- LocalWords:  inout redisable redisabled reenable FCSS Nonreusable muxing
-->

