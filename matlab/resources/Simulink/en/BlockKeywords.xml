<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright 2019-2023 The MathWorks, Inc. -->
<rsccat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" locale="en_US"
        product="Simulink"
        version="1.0"
        xsi:noNamespaceSchemaLocation="../../schema/msgcat.xsd">
   <message>
      <entry key="Continuous_Integrator_integral"
             note="This is the keyword for the block with Block Description:- Continuous-time integration of the input signal.">integral</entry>
      <entry key="Continuous_IntegratorLimited_integral"
             note="This is the keyword for the block with Block Description:- Continuous-time integration of the input signal.">integral</entry>
      <entry key="Continuous_IntegratorSecondOrder_integral"
             note="This is the keyword for the block with Block Description:- Second-order continuous-time integration of the input signal.">integral</entry>
      <entry key="Continuous_IntegratorSecondOrderLimited_integral"
             note="This is the keyword for the block with Block Description:- Second-order continuous-time integration of the input signal.">integral</entry>
      <entry key="Continuous_PIDController_controller"
             note="This is the hint for the block keyword with Block Description:- This block implements continuous- and discrete-time PID control algorithms and includes advanced features such as anti-windup, external reset, and signal tracking. You can tune the PID gains automatically using the 'Tune...' button (requires Simulink Control Design).">controller</entry>
      <entry key="Continuous_PIDController2DOF_controller"
             note="This is the hint for the block keyword with Block Description:- This block implements continuous- and discrete-time PID control algorithms with setpoint weighting and includes advanced features such as anti-windup, external reset, and signal tracking. You can tune the PID gains automatically using the 'Tune...' button (requires Simulink Control Design).">controller</entry>
      <entry key="Continuous_StateSpace_stateequation"
             note="This is the keyword for the block with Block Description:- State-space model:   dx/dt = Ax + Bu       y = Cx + Du">state equation</entry>
      <entry key="Discontinuities_Backlash_hysteresis"
             note="This is the keyword for the block with Block Description:- Model backlash where the deadband width specifies the amount of play in the system.">hysteresis</entry>
      <entry key="Discontinuities_Backlash_backlash"
             note="This is the keyword for the block with Block Description:- Model backlash where the deadband width specifies the amount of play in the system."> backlash</entry>
      <entry key="Discontinuities_CoulombViscousFriction_friction"
             note="This is the hint for the block keyword with Block Description:- A discontinuity offset at zero models coulomb friction. Linear gain models viscous friction.y = sign(x) * (Gain * abs(x) + Offset)">friction</entry>
      <entry key="Discontinuities_CoulombViscousFriction_damping"
             note="This is the hint for the block keyword with Block Description:- A discontinuity offset at zero models coulomb friction. Linear gain models viscous friction.y = sign(x) * (Gain * abs(x) + Offset)"> damping</entry>
      <entry key="Discontinuities_DeadZone_deadband"
             note="This is the keyword for the block with Block Description:- Output zero for inputs within the dead zone.  Offset input signals by either the Start or End value when outside of the dead zone.">deadband</entry>
      <entry key="Discontinuities_DeadZone_discontinuity"
             note="This is the keyword for the block with Block Description:- Output zero for inputs within the dead zone.  Offset input signals by either the Start or End value when outside of the dead zone."> discontinuity</entry>
      <entry key="Discontinuities_DeadZoneDynamic_deadband"
             note="This is the hint for the block keyword with Block Description:- Output zero for inputs within a dead zone. Offset input signals by either the Start or End value when outside of the dead zone.">deadband</entry>
      <entry key="Discontinuities_DeadZoneDynamic_deadzone"
             note="This is the hint for the block keyword with Block Description:- Output zero for inputs within a dead zone. Offset input signals by either the Start or End value when outside of the dead zone.">deadzone</entry>
      <entry key="Discontinuities_HitCrossing_zerocrossing"
             note="This is the keyword for the block with Block Description:- Detects when the input signal reaches the Hit crossing offset parameter value in the direction specified by the Hit crossing direction parameter. You can configure the block to output a signal, a message, or a function-call event. If the input signal crosses the offset value in the specified direction, the block outputs 1 for the Signal Output type, a message for the Message Output type, or a single function call for the Function-Call Output type. The message contains the crossing type, index, time and offset of the hit crossing event.">zero crossing</entry>
      <entry key="Discontinuities_Quantizer_digitize"
             note="This is the keyword for the block with Block Description:- Discretize input at given interval.">digitize</entry>
      <entry key="Discontinuities_Quantizer_digitise"
             note="This is the keyword for the block with Block Description:- Discretize input at given interval."> digitise</entry>
      <entry key="Discontinuities_Quantizer_rounding"
             note="This is the keyword for the block with Block Description:- Discretize input at given interval."> rounding</entry>
      <entry key="Discontinuities_RateLimiter_frequency"
             note="This is the keyword for the block with Block Description:- Limit rising and falling rates of signal.">frequency</entry>
      <entry key="Discontinuities_RateLimiter_slewrate"
             note="This is the keyword for the block with Block Description:- Limit rising and falling rates of signal."> slew rate</entry>
      <entry key="Discontinuities_RateLimiterDynamic_dynamic"
             note="This is the hint for the block keyword with Block Description:- Limit rising and falling rates of the signals at the second input by using the first input (upper limit) and the third input (lower limit).">dynamic</entry>
      <entry key="Discontinuities_RateLimiterDynamic_slewrate"
             note="This is the hint for the block keyword with Block Description:- Limit rising and falling rates of the signals at the second input by using the first input (upper limit) and the third input (lower limit)."> slew rate</entry>
      <entry key="Discontinuities_Relay_relay"
             note="This is the keyword for the block with Block Description:- Output the specified 'on' or 'off' value by comparing the input to the specified thresholds.  The on/off state of the relay is not affected by input between the upper and lower limits.">relay</entry>
      <entry key="Discontinuities_Relay_hysteresis"
             note="This is the hint for the block with Block Description:- Output the specified 'on' or 'off' value by comparing the input to the specified thresholds.  The on/off state of the relay is not affected by input between the upper and lower limits."> hysteresis</entry>     
      <entry key="Discontinuities_Saturation_limit"
             note="This is the keyword for the block with Block Description:- Limit input signal to the upper and lower saturation values.">limit</entry>
      <entry key="Discontinuities_Saturation_saturate"
             note="This is the keyword for the block with Block Description:- Limit input signal to the upper and lower saturation values."> saturate</entry>
      <entry key="Discontinuities_Saturation_limiter"
             note="This is the keyword for the block with Block Description:- Limit input signal to the upper and lower saturation values."> limiter</entry>
      <entry key="Discontinuities_Saturation_overflow"
             note="This is the keyword for the block with Block Description:- Limit input signal to the upper and lower saturation values."> overflow</entry>
      <entry key="Discontinuities_SaturationDynamic_limit"
             note="This is the hint for the block keyword with Block Description:- Bound the range of the second input by using the first input (upper limit) and the third input (lower limit).">limit</entry>
      <entry key="Discontinuities_SaturationDynamic_saturate"
             note="This is the hint for the block keyword with Block Description:- Bound the range of the second input by using the first input (upper limit) and the third input (lower limit)."> saturate</entry>
      <entry key="Discontinuities_SaturationDynamic_limiter"
             note="This is the hint for the block keyword with Block Description:- Bound the range of the second input by using the first input (upper limit) and the third input (lower limit)."> limiter</entry>
      <entry key="Discontinuities_SaturationDynamic_overflow"
             note="This is the hint for the block keyword with Block Description:- Bound the range of the second input by using the first input (upper limit) and the third input (lower limit)."> overflow</entry>
      <entry key="Discontinuities_WrapToZero_resettozero"
             note="This is the hint for the block keyword with Block Description:- If the input is above the threshold, the output is zero, otherwise the output equals the input.">reset to zero</entry>
      <entry key="Discontinuities_WrapToZero_wrapper"
             note="This is the hint for the block keyword with Block Description:- If the input is above the threshold, the output is zero, otherwise the output equals the input."> wrapper</entry>
      <entry key="Discontinuities_WrapToZero_overflow"
             note="This is the hint for the block keyword with Block Description:- If the input is above the threshold, the output is zero, otherwise the output equals the input."> overflow</entry>
      <entry key="Discrete_Delay_Delay"
             note="This is the keyword for the block with Block Description:- Delay input signal by a specified number of samples.">Delay</entry>
      <entry key="Discrete_Delay_integerdelay"
             note="This is the keyword for the block with Block Description:- Delay input signal by a specified number of samples.">  integer delay</entry>
      <entry key="Discrete_Delay_variabledelay"
             note="This is the keyword for the block with Block Description:- Delay input signal by a specified number of samples."> variable delay</entry>
      <entry key="Discrete_Delay_enabledelay"
             note="This is the keyword for the block with Block Description:- Delay input signal by a specified number of samples."> enable delay</entry>
      <entry key="Discrete_Delay_resetdelay"
             note="This is the keyword for the block with Block Description:- Delay input signal by a specified number of samples."> reset delay</entry>
      <entry key="Discrete_Difference_diff"
             note="This is the hint for the block keyword with Block Description:- Output the current input value minus the previous input value.">diff</entry>
      <entry key="Discrete_Difference_delta"
             note="This is the hint for the block keyword with Block Description:- Output the current input value minus the previous input value."> delta</entry>
      <entry key="Discrete_DiscreteTransferFcn_transferfunction"
             note="This is the keyword for the block with Block Description:- Implement a z-transform transfer function. Specify the numerator and denominator coefficients in descending powers of z. The order of the denominator must be greater than or equal to the order of the numerator.">transfer function</entry>
      <entry key="Discrete_DiscreteTransferFcn_ztransform"
             note="This is the keyword for the block with Block Description:- Implement a z-transform transfer function. Specify the numerator and denominator coefficients in descending powers of z. The order of the denominator must be greater than or equal to the order of the numerator."> z-transform</entry>
      <entry key="Discrete_DiscreteZeroPole_transferfunction"
             note="This is the keyword for the block with Block Description:- Matrix expression for zeros.  Vector expression for poles and gain. Output width equals the number of columns in zeros matrix, or one if zeros is a vector.">transfer function</entry>
      <entry key="Discrete_DiscreteZeroPole_zeropole"
             note="This is the keyword for the block with Block Description:- Matrix expression for zeros.  Vector expression for poles and gain. Output width equals the number of columns in zeros matrix, or one if zeros is a vector."> zero-pole</entry>
      <entry key="Discrete_DiscreteZeroPole_zplane"
             note="This is the keyword for the block with Block Description:- Matrix expression for zeros.  Vector expression for poles and gain. Output width equals the number of columns in zeros matrix, or one if zeros is a vector."> zplane</entry>
      <entry key="Discrete_DiscreteDerivative_derivative"
             note="This is the hint for the block keyword with Block Description:- Discrete-time derivative of the input.This block only works with fixed sample rates. Do not use this block in subsystems with a non-periodic trigger.">derivative</entry>
      <entry key="Discrete_DiscreteDerivative_differentiation"
             note="This is the hint for the block keyword with Block Description:- Discrete-time derivative of the input.This block only works with fixed sample rates. Do not use this block in subsystems with a non-periodic trigger."> differentiation</entry>
      <entry key="Discrete_DiscreteFIRFilter_fir"
             note="This is the keyword for the block with Block Description:- Independently filter each channel of the input over time using an FIR filter. You can specify filter coefficients using either tunable dialog parameters or separate input ports, which are useful for time-varying coefficients. A DSP System Toolbox license is required to use a filter structure other than Direct Form.">fir</entry>
      <entry key="Discrete_DiscreteFIRFilter_filter"
             note="This is the keyword for the block with Block Description:- Independently filter each channel of the input over time using an FIR filter. You can specify filter coefficients using either tunable dialog parameters or separate input ports, which are useful for time-varying coefficients. A DSP System Toolbox license is required to use a filter structure other than Direct Form."> filter</entry>
      <entry key="Discrete_DiscreteStateSpace_statespace"
             note="This is the keyword for the block with Block Description:- Discrete state-space model:   x(n+1) = Ax(n) + Bu(n)   y(n)   = Cx(n) + Du(n)"> state space</entry>
      <entry key="Discrete_DiscreteStateSpace_stateequation"
             note="This is the keyword for the block with Block Description:- Discrete state-space model:   x(n+1) = Ax(n) + Bu(n)   y(n)   = Cx(n) + Du(n)"> state equation</entry>
      <entry key="Discrete_DiscreteTimeIntegrator_integral"
             note="This is the keyword for the block with Block Description:- Discrete-time integration or accumulation of the input signal.">integral</entry>
      <entry key="Discrete_DiscreteTimeIntegrator_accumulation"
             note="This is the keyword for the block with Block Description:- Discrete-time integration or accumulation of the input signal."> accumulation</entry>
      <entry key="Discrete_DiscreteTimeIntegrator_accumulator"
             note="This is the keyword for the block with Block Description:- Discrete-time integration or accumulation of the input signal."> accumulator</entry>
      <entry key="Discrete_DiscreteTimeIntegrator_trapeziodal"
             note="This is the keyword for the block with Block Description:- Discrete-time integration or accumulation of the input signal."> trapezoidal</entry>
      <entry key="Discrete_DiscreteTimeIntegrator_forwardeuler"
             note="This is the keyword for the block with Block Description:- Discrete-time integration or accumulation of the input signal."> forward euler</entry>
      <entry key="Discrete_DiscreteTimeIntegrator_backwardeuler"
             note="This is the keyword for the block with Block Description:- Discrete-time integration or accumulation of the input signal."> backward euler </entry>
      <entry key="Discrete_Memory_memory"
             note="This is the keyword for the block with Block Description:- Apply a one integration step delay. The output is the previous input value.">memory</entry>
      <entry key="Discrete_Memory_cache"
             note="This is the keyword for the block with Block Description:- Apply a one integration step delay. The output is the previous input value."> cache</entry>
      <entry key="Discrete_Memory_solverstepdelay"
             note="This is the keyword for the block with Block Description:- Apply a one integration step delay. The output is the previous input value."> solver step delay</entry>
      <entry key="Discrete_ResettableDelay_delay"
             note="This is the keyword for the block with Block Description:- Delay input signal by a specified number of samples.">delay</entry>
      <entry key="Discrete_ResettableDelay_reset"
             note="This is the keyword for the block with Block Description:- Delay input signal by a specified number of samples."> reset</entry>
      <entry key="Discrete_TappedDelay_delay"
             note="This is the hint for the block keyword with Block Description:- Delay a signal N sample periods and output all the delay versions.">delay</entry>
      <entry key="Discrete_TappedDelay_tap"
             note="This is the hint for the block keyword with Block Description:- Delay a signal N sample periods and output all the delay versions."> tap</entry>
      <entry key="Discrete_TransferFcnFirstOrder_firstorder"
             note="This is the hint for the block keyword with Block Description:- Discrete-time first order transfer function. The transfer function has a unity DC gain.">first order</entry>
      <entry key="Discrete_TransferFcnFirstOrder_transferfunction"
             note="This is the hint for the block keyword with Block Description:- Discrete-time first order transfer function. The transfer function has a unity DC gain."> transfer function</entry>
      <entry key="Discrete_TransferFcnLeadorLag_leadcompensator"
             note="This is the hint for the block keyword with Block Description:- Discrete-time lead or lag compensator. The compensator has a unity instantaneous gain, the DC gain equals (1-Zero)/(1-Pole).Lead compensation is obtained when 0 &lt; Pole &lt; Zero &lt; 1.Lag compensation is obtained when 0 &lt; Zero &lt; Pole &lt; 1.">lead compensator</entry>
      <entry key="Discrete_TransferFcnLeadorLag_lagcompensator"
             note="This is the hint for the block keyword with Block Description:- Discrete-time lead or lag compensator. The compensator has a unity instantaneous gain, the DC gain equals (1-Zero)/(1-Pole).Lead compensation is obtained when 0 &lt; Pole &lt; Zero &lt; 1.Lag compensation is obtained when 0 &lt; Zero &lt; Pole &lt; 1."> lag compensator</entry>
      <entry key="Discrete_TransferFcnLeadorLag_transferfunction"
             note="This is the hint for the block keyword with Block Description:- Discrete-time lead or lag compensator. The compensator has a unity instantaneous gain, the DC gain equals (1-Zero)/(1-Pole).Lead compensation is obtained when 0 &lt; Pole &lt; Zero &lt; 1.Lag compensation is obtained when 0 &lt; Zero &lt; Pole &lt; 1."> transfer function</entry>
      <entry key="Discrete_TransferFcnLeadorLag_lead"
             note="This is the hint for the block keyword with Block Description:- Discrete-time lead or lag compensator. The compensator has a unity instantaneous gain, the DC gain equals (1-Zero)/(1-Pole).Lead compensation is obtained when 0 &lt; Pole &lt; Zero &lt; 1.Lag compensation is obtained when 0 &lt; Zero &lt; Pole &lt; 1."> lead</entry>
      <entry key="Discrete_TransferFcnLeadorLag_lag"
             note="This is the hint for the block keyword with Block Description:- Discrete-time lead or lag compensator. The compensator has a unity instantaneous gain, the DC gain equals (1-Zero)/(1-Pole).Lead compensation is obtained when 0 &lt; Pole &lt; Zero &lt; 1.Lag compensation is obtained when 0 &lt; Zero &lt; Pole &lt; 1."> lag</entry>
      <entry key="Discrete_TransferFcnRealZero_realzero"
             note="This is the hint for the block keyword with Block Description:- Discrete-time transfer function that has a real zero and (effectively) has no pole.">real zero</entry>
      <entry key="Discrete_TransferFcnRealZero_nopole"
             note="This is the hint for the block keyword with Block Description:- Discrete-time transfer function that has a real zero and (effectively) has no pole."> no pole</entry>
      <entry key="Discrete_TransferFcnRealZero_transferfunction"
             note="This is the hint for the block keyword with Block Description:- Discrete-time transfer function that has a real zero and (effectively) has no pole."> transfer function</entry>
      <entry key="Discrete_UnitDelay_delay"
             note="This is the keyword for the block with Block Description:- Sample and hold with one sample period delay.">delay</entry>
      <entry key="Discrete_UnitDelay_unitdelay"
             note="This is the keyword for the block with Block Description:- Sample and hold with one sample period delay."> unit delay</entry>
      <entry key="Discrete_VariableIntegerDelay_integerdelay"
             note="This is the keyword for the block with Block Description:- Delay input signal by a specified number of samples.">integer delay</entry>
      <entry key="Discrete_ZeroOrderHold_ZOH"
             note="This is the keyword for the block with Block Description:- Zero-order hold.">ZOH</entry>
      <entry key="Discrete_ZeroOrderHold_sampling"
             note="This is the keyword for the block with Block Description:- Zero-order hold."> sampling</entry>
      <entry key="Logic_and_Bit_Operations_BitClear_clearbit"
             note="This is the hint for the block keyword with Block Description:- Clear ith bit of the stored integer to 0. Scaling is ignored.">clear bit</entry>
      <entry key="Logic_and_Bit_Operations_BitClear_bitop"
             note="This is the hint for the block keyword with Block Description:- Clear ith bit of the stored integer to 0. Scaling is ignored."> bit op</entry>
      <entry key="Logic_and_Bit_Operations_BitClear_bit"
             note="This is the hint for the block keyword with Block Description:- Clear ith bit of the stored integer to 0. Scaling is ignored."> bit </entry>
      <entry key="Logic_and_Bit_Operations_BitSet_setbit"
             note="This is the hint for the block keyword with Block Description:- Set ith bit of the stored integer to 1. Scaling is ignored.">set bit</entry>
      <entry key="Logic_and_Bit_Operations_BitSet_bitop"
             note="This is the hint for the block keyword with Block Description:- Set ith bit of the stored integer to 1. Scaling is ignored."> bit op</entry>
      <entry key="Logic_and_Bit_Operations_BitSet_bit"
             note="This is the hint for the block keyword with Block Description:- Set ith bit of the stored integer to 1. Scaling is ignored."> bit </entry>
      <entry key="Logic_and_Bit_Operations_BitwiseOperator_bit"
             note="This is the hint for the block keyword with Block Description:- Perform the specified bitwise operation on the inputs. The output data type should represent zero exactly.">bit</entry>
      <entry key="Logic_and_Bit_Operations_BitwiseOperator_and"
             note="This is the hint for the block keyword with Block Description:- Perform the specified bitwise operation on the inputs. The output data type should represent zero exactly."> and</entry>
      <entry key="Logic_and_Bit_Operations_BitwiseOperator_or"
             note="This is the hint for the block keyword with Block Description:- Perform the specified bitwise operation on the inputs. The output data type should represent zero exactly."> or</entry>
      <entry key="Logic_and_Bit_Operations_BitwiseOperator_nand"
             note="This is the hint for the block keyword with Block Description:- Perform the specified bitwise operation on the inputs. The output data type should represent zero exactly."> nand</entry>
      <entry key="Logic_and_Bit_Operations_BitwiseOperator_nor"
             note="This is the hint for the block keyword with Block Description:- Perform the specified bitwise operation on the inputs. The output data type should represent zero exactly."> nor</entry>
      <entry key="Logic_and_Bit_Operations_BitwiseOperator_xor"
             note="This is the hint for the block keyword with Block Description:- Perform the specified bitwise operation on the inputs. The output data type should represent zero exactly."> xor</entry>
      <entry key="Logic_and_Bit_Operations_BitwiseOperator_not"
             note="This is the hint for the block keyword with Block Description:- Perform the specified bitwise operation on the inputs. The output data type should represent zero exactly."> not</entry>
      <entry key="Logic_and_Bit_Operations_BitwiseOperator_bitop"
             note="This is the hint for the block keyword with Block Description:- Perform the specified bitwise operation on the inputs. The output data type should represent zero exactly."> bit op</entry>
      <entry key="Logic_and_Bit_Operations_BitwiseOperator_bitmask"
             note="This is the hint for the block keyword with Block Description:- Perform the specified bitwise operation on the inputs. The output data type should represent zero exactly.">  bit mask</entry>
      <entry key="Logic_and_Bit_Operations_BitwiseOperator_bitwise"
             note="This is the hint for the block keyword with Block Description:- Perform the specified bitwise operation on the inputs. The output data type should represent zero exactly."> bitwise </entry>
      <entry key="Logic_and_Bit_Operations_CombinatorialLogic_logicarrays"
             note="This is the keyword for the block with Block Description:- Look up the elements of the input vector (treated as boolean values) in the truth table and output the corresponding row of the 'Truth table' parameter.  The input side of the truth table is implicit.">logic arrays</entry>
      <entry key="Logic_and_Bit_Operations_CombinatorialLogic_pla"
             note="This is the keyword for the block with Block Description:- Look up the elements of the input vector (treated as boolean values) in the truth table and output the corresponding row of the 'Truth table' parameter.  The input side of the truth table is implicit."> pla</entry>
      <entry key="Logic_and_Bit_Operations_CombinatorialLogic_booleanlogic"
             note="This is the keyword for the block with Block Description:- Look up the elements of the input vector (treated as boolean values) in the truth table and output the corresponding row of the 'Truth table' parameter.  The input side of the truth table is implicit."> boolean logic</entry>
      <entry key="Logic_and_Bit_Operations_CompareToConstant_comparetoconstant"
             note="This is the hint for the block keyword with Block Description:- Determine how a signal compares to a constant.">compare to constant</entry>
      <entry key="Logic_and_Bit_Operations_CompareToConstant_compare"
             note="This is the hint for the block keyword with Block Description:- Determine how a signal compares to a constant."> compare</entry>
      <entry key="Logic_and_Bit_Operations_CompareToZero_compare"
             note="This is the hint for the block keyword with Block Description:- Determine how a signal compares to zero.">compare</entry>
      <entry key="Logic_and_Bit_Operations_CompareToZero_comparetozero"
             note="This is the hint for the block keyword with Block Description:- Determine how a signal compares to zero.">  compare to zero</entry>
      <entry key="Logic_and_Bit_Operations_DetectChange_detectchange"
             note="This is the hint for the block keyword with Block Description:- If the input does not equal its previous value, then output TRUE, otherwise output FALSE. The initial condition determines the initial value of the previous input U/z.">detect change</entry>
      <entry key="Logic_and_Bit_Operations_DetectDecrease_detectdecrease"
             note="This is the hint for the block keyword with Block Description:- If the input is strictly less than its previous value, then output TRUE, otherwise output FALSE. The initial condition determines the initial value of the previous input U/z.">detect decrease</entry>
      <entry key="Logic_and_Bit_Operations_DetectIncrease_detectincrease"
             note="This is the hint for the block keyword with Block Description:- If the input is strictly greater than its previous value, then output TRUE, otherwise output FALSE. The initial condition determines the initial value of the previous input U/z.">detect increase</entry>
      <entry key="Logic_and_Bit_Operations_DetectFallNegative_detectfallnegative"
             note="This is the hint for the block keyword with Block Description:- If the input is strictly negative and its previous value was nonnegative, then output TRUE, otherwise output FALSE. The initial condition determines the initial value of the boolean expression (U/z &lt; 0).">detect fall negative</entry>
      <entry key="Logic_and_Bit_Operations_DetectFallNegative_fall"
             note="This is the hint for the block keyword with Block Description:- If the input is strictly negative and its previous value was nonnegative, then output TRUE, otherwise output FALSE. The initial condition determines the initial value of the boolean expression (U/z &lt; 0)."> fall </entry>
      <entry key="Logic_and_Bit_Operations_DetectFallNonpositive_detectfall"
             note="This is the hint for the block keyword with Block Description:- If the input is nonpositive and its previous value was strictly positive, then output TRUE, otherwise output FALSE. The initial condition determines the initial value of the boolean expression (U/z &lt;= 0).">detect fall</entry>
      <entry key="Logic_and_Bit_Operations_DetectRiseNonnegative_detectrise"
             note="This is the hint for the block keyword with Block Description:- If the input is nonnegative and its previous value was strictly negative, then output TRUE, otherwise output FALSE. The initial condition determines the initial value of the boolean expression (U/z &gt;= 0).">detect rise</entry>
      <entry key="Logic_and_Bit_Operations_DetectRisePositive_detectrise"
             note="This is the hint for the block keyword with Block Description:- If the input is strictly positive and its previous value was nonpositive, then output TRUE, otherwise output FALSE. The initial condition determines the initial value of the boolean expression (U/z &gt; 0).">detect rise</entry>
      <entry key="Logic_and_Bit_Operations_ExtractBits_bitwise"
             note="This is the hint for the block keyword with Block Description:- Output selected bits from each of the fixed-point input samples. Selecting &#34;Upper half&#34; or &#34;Lower half&#34; results in a positive number of bits in the output word length, according to the equation numOutputBits = ceil(numInputBits / 2).">bitwise</entry>
      <entry key="Logic_and_Bit_Operations_ExtractBits_bitmask"
             note="This is the hint for the block keyword with Block Description:- Output selected bits from each of the fixed-point input samples. Selecting &#34;Upper half&#34; or &#34;Lower half&#34; results in a positive number of bits in the output word length, according to the equation numOutputBits = ceil(numInputBits / 2)."> bit mask</entry>
      <entry key="Logic_and_Bit_Operations_ExtractBits_extractbits"
             note="This is the hint for the block keyword with Block Description:- Output selected bits from each of the fixed-point input samples. Selecting &#34;Upper half&#34; or &#34;Lower half&#34; results in a positive number of bits in the output word length, according to the equation numOutputBits = ceil(numInputBits / 2)."> extract bits</entry>
      <entry key="Logic_and_Bit_Operations_ExtractBits_bitop"
             note="This is the hint for the block keyword with Block Description:- Output selected bits from each of the fixed-point input samples. Selecting &#34;Upper half&#34; or &#34;Lower half&#34; results in a positive number of bits in the output word length, according to the equation numOutputBits = ceil(numInputBits / 2)."> bit op</entry>
      <entry key="Logic_and_Bit_Operations_ExtractBits_bit"
             note="This is the hint for the block keyword with Block Description:- Output selected bits from each of the fixed-point input samples. Selecting &#34;Upper half&#34; or &#34;Lower half&#34; results in a positive number of bits in the output word length, according to the equation numOutputBits = ceil(numInputBits / 2)."> bit</entry>
      <entry key="Logic_and_Bit_Operations_IntervalTest_interval"
             note="This is the hint for the block keyword with Block Description:- If the input is in the interval between the lower limit and the upper limit, then the output is TRUE, otherwise it is FALSE.">interval</entry>
      <entry key="Logic_and_Bit_Operations_IntervalTest_range"
             note="This is the hint for the block keyword with Block Description:- If the input is in the interval between the lower limit and the upper limit, then the output is TRUE, otherwise it is FALSE."> range</entry>
      <entry key="Logic_and_Bit_Operations_IntervalTestDynamic_range"
             note="This is the hint for the block keyword with Block Description:- If the input is in the interval between the lower limit and the upper limit, then the output is TRUE, otherwise it is FALSE.">range</entry>
      <entry key="Logic_and_Bit_Operations_IntervalTestDynamic_interval"
             note="This is the hint for the block keyword with Block Description:- If the input is in the interval between the lower limit and the upper limit, then the output is TRUE, otherwise it is FALSE."> interval</entry>
      <entry key="Logic_and_Bit_Operations_LogicalOperator_nand"
             note="This is the keyword for the block with Block Description:- Logical operators.  For a single input, operators are applied across the input vector.  For multiple inputs, operators are applied across the inputs.">nand</entry>
      <entry key="Logic_and_Bit_Operations_LogicalOperator_and"
             note="This is the keyword for the block with Block Description:- Logical operators.  For a single input, operators are applied across the input vector.  For multiple inputs, operators are applied across the inputs."> and</entry>
      <entry key="Logic_and_Bit_Operations_LogicalOperator_or"
             note="This is the keyword for the block with Block Description:- Logical operators.  For a single input, operators are applied across the input vector.  For multiple inputs, operators are applied across the inputs."> or</entry>
      <entry key="Logic_and_Bit_Operations_LogicalOperator_xor"
             note="This is the keyword for the block with Block Description:- Logical operators.  For a single input, operators are applied across the input vector.  For multiple inputs, operators are applied across the inputs."> xor</entry>
      <entry key="Logic_and_Bit_Operations_LogicalOperator_xnor"
             note="This is the keyword for the block with Block Description:- Logical operators.  For a single input, operators are applied across the input vector.  For multiple inputs, operators are applied across the inputs."> xnor</entry>
      <entry key="Logic_and_Bit_Operations_LogicalOperator_not"
             note="This is the keyword for the block with Block Description:- Logical operators.  For a single input, operators are applied across the input vector.  For multiple inputs, operators are applied across the inputs."> not</entry>
      <entry key="Logic_and_Bit_Operations_LogicalOperator_nor"
             note="This is the keyword for the block with Block Description:- Logical operators.  For a single input, operators are applied across the input vector.  For multiple inputs, operators are applied across the inputs."> nor</entry>
      <entry key="Logic_and_Bit_Operations_LogicalOperator_gate"
             note="This is the keyword for the block with Block Description:- Logical operators.  For a single input, operators are applied across the input vector.  For multiple inputs, operators are applied across the inputs."> gate</entry>
      <entry key="Logic_and_Bit_Operations_LogicalOperator_logic"
             note="This is the keyword for the block with Block Description:- Logical operators.  For a single input, operators are applied across the input vector.  For multiple inputs, operators are applied across the inputs."> logic</entry>
      <entry key="Logic_and_Bit_Operations_RelationalOperator_relop"
             note="This is the keyword for the block with Block Description:- Applies the selected relational operator to the inputs and outputs the result. The top (or left) input corresponds to the first operand.">relop</entry>
      <entry key="Logic_and_Bit_Operations_RelationalOperator_less"
             note="This is the keyword for the block with Block Description:- Applies the selected relational operator to the inputs and outputs the result. The top (or left) input corresponds to the first operand."> less</entry>
      <entry key="Logic_and_Bit_Operations_RelationalOperator_greater"
             note="This is the keyword for the block with Block Description:- Applies the selected relational operator to the inputs and outputs the result. The top (or left) input corresponds to the first operand."> greater</entry>
      <entry key="Logic_and_Bit_Operations_RelationalOperator_compare"
             note="This is the keyword for the block with Block Description:- Applies the selected relational operator to the inputs and outputs the result. The top (or left) input corresponds to the first operand."> compare</entry>
      <entry key="Logic_and_Bit_Operations_RelationalOperator_comparison"
             note="This is the keyword for the block with Block Description:- Applies the selected relational operator to the inputs and outputs the result. The top (or left) input corresponds to the first operand."> comparison</entry>
      <entry key="Logic_and_Bit_Operations_RelationalOperator_equal"
             note="This is the keyword for the block with Block Description:- Applies the selected relational operator to the inputs and outputs the result. The top (or left) input corresponds to the first operand."> equal</entry>
      <entry key="Logic_and_Bit_Operations_RelationalOperator_larger"
             note="This is the keyword for the block with Block Description:- Applies the selected relational operator to the inputs and outputs the result. The top (or left) input corresponds to the first operand."> larger</entry>
      <entry key="Logic_and_Bit_Operations_RelationalOperator_smaller"
             note="This is the keyword for the block with Block Description:- Applies the selected relational operator to the inputs and outputs the result. The top (or left) input corresponds to the first operand."> smaller</entry>
      <entry key="Logic_and_Bit_Operations_ShiftArithmetic_bitshift"
             note="This is the keyword for the block with Block Description:- This block can arithmetically shift the bits and/or the binary point of a signal.The effect of these actions can be interpreted as a combination of a multiplication by a power of two and a change in scaling.  For instance, when the bit shift direction is 'Right', the power of two multiplication term is   2^( BinPtShiftNumber - BitShiftNumber )When the direction of bit shift is 'Bidirectional', negative values indicate left shifts. For 'Left' or 'Right' directions, always use positive values for bit shift.If the input is a floating point type, the power of two multiplication is carried out, but no change in scaling is applied.">bit shift</entry>
      <entry key="Logic_and_Bit_Operations_ShiftArithmetic_arithmeticshift"
             note="This is the keyword for the block with Block Description:- This block can arithmetically shift the bits and/or the binary point of a signal.The effect of these actions can be interpreted as a combination of a multiplication by a power of two and a change in scaling.  For instance, when the bit shift direction is 'Right', the power of two multiplication term is   2^( BinPtShiftNumber - BitShiftNumber )When the direction of bit shift is 'Bidirectional', negative values indicate left shifts. For 'Left' or 'Right' directions, always use positive values for bit shift.If the input is a floating point type, the power of two multiplication is carried out, but no change in scaling is applied."> arithmetic shift</entry>
      <entry key="Logic_and_Bit_Operations_ShiftArithmetic_binaryshift"
             note="This is the keyword for the block with Block Description:- This block can arithmetically shift the bits and/or the binary point of a signal.The effect of these actions can be interpreted as a combination of a multiplication by a power of two and a change in scaling.  For instance, when the bit shift direction is 'Right', the power of two multiplication term is   2^( BinPtShiftNumber - BitShiftNumber )When the direction of bit shift is 'Bidirectional', negative values indicate left shifts. For 'Left' or 'Right' directions, always use positive values for bit shift.If the input is a floating point type, the power of two multiplication is carried out, but no change in scaling is applied."> binary shift</entry>
      <entry key="Logic_and_Bit_Operations_ShiftArithmetic_shift"
             note="This is the keyword for the block with Block Description:- This block can arithmetically shift the bits and/or the binary point of a signal.The effect of these actions can be interpreted as a combination of a multiplication by a power of two and a change in scaling.  For instance, when the bit shift direction is 'Right', the power of two multiplication term is   2^( BinPtShiftNumber - BitShiftNumber )When the direction of bit shift is 'Bidirectional', negative values indicate left shifts. For 'Left' or 'Right' directions, always use positive values for bit shift.If the input is a floating point type, the power of two multiplication is carried out, but no change in scaling is applied."> shift </entry>
      <entry key="Lookup_Tables_1DLookupTable_lookup"
             note="This is the keyword for the block with Block Description:- Perform n-dimensional interpolated table lookup including index searches. The table is a sampled representation of a function in N variables. Breakpoint sets relate the input values to positions in the table. The first dimension corresponds to the top (or left) input port.">lookup</entry>
      <entry key="Lookup_Tables_1DLookupTable_lookup_1"
             note="This is the keyword for the block with Block Description:- Perform n-dimensional interpolated table lookup including index searches. The table is a sampled representation of a function in N variables. Breakpoint sets relate the input values to positions in the table. The first dimension corresponds to the top (or left) input port."> look-up</entry>
      <entry key="Lookup_Tables_1DLookupTable_look_up"
             note="This is the keyword for the block with Block Description:- Perform n-dimensional interpolated table lookup including index searches. The table is a sampled representation of a function in N variables. Breakpoint sets relate the input values to positions in the table. The first dimension corresponds to the top (or left) input port."> look up</entry>
      <entry key="Lookup_Tables_1DLookupTable_interpolation"
             note="This is the keyword for the block with Block Description:- Perform n-dimensional interpolated table lookup including index searches. The table is a sampled representation of a function in N variables. Breakpoint sets relate the input values to positions in the table. The first dimension corresponds to the top (or left) input port."> interpolation</entry>
      <entry key="Lookup_Tables_1DLookupTable_extrapolation"
             note="This is the keyword for the block with Block Description:- Perform n-dimensional interpolated table lookup including index searches. The table is a sampled representation of a function in N variables. Breakpoint sets relate the input values to positions in the table. The first dimension corresponds to the top (or left) input port."> extrapolation</entry>
      <entry key="Lookup_Tables_1DLookupTable_table"
             note="This is the keyword for the block with Block Description:- Perform n-dimensional interpolated table lookup including index searches. The table is a sampled representation of a function in N variables. Breakpoint sets relate the input values to positions in the table. The first dimension corresponds to the top (or left) input port."> table</entry>
      <entry key="Lookup_Tables_1DLookupTable_curve"
             note="This is the keyword for the block with Block Description:- Perform n-dimensional interpolated table lookup including index searches. The table is a sampled representation of a function in N variables. Breakpoint sets relate the input values to positions in the table. The first dimension corresponds to the top (or left) input port."> curve</entry>
      <entry key="Lookup_Tables_1DLookupTable_map"
             note="This is the keyword for the block with Block Description:- Perform n-dimensional interpolated table lookup including index searches. The table is a sampled representation of a function in N variables. Breakpoint sets relate the input values to positions in the table. The first dimension corresponds to the top (or left) input port."> map</entry>
      <entry key="Lookup_Tables_2DLookupTable_lookup"
             note="This is the keyword for the block with Block Description:- Perform n-dimensional interpolated table lookup including index searches. The table is a sampled representation of a function in N variables. Breakpoint sets relate the input values to positions in the table. The first dimension corresponds to the top (or left) input port.">lookup</entry>
      <entry key="Lookup_Tables_2DLookupTable_lookup_1"
             note="This is the keyword for the block with Block Description:- Perform n-dimensional interpolated table lookup including index searches. The table is a sampled representation of a function in N variables. Breakpoint sets relate the input values to positions in the table. The first dimension corresponds to the top (or left) input port."> look-up</entry>
      <entry key="Lookup_Tables_2DLookupTable_look_up"
             note="This is the keyword for the block with Block Description:- Perform n-dimensional interpolated table lookup including index searches. The table is a sampled representation of a function in N variables. Breakpoint sets relate the input values to positions in the table. The first dimension corresponds to the top (or left) input port."> look up</entry>
      <entry key="Lookup_Tables_2DLookupTable_interpolation"
             note="This is the keyword for the block with Block Description:- Perform n-dimensional interpolated table lookup including index searches. The table is a sampled representation of a function in N variables. Breakpoint sets relate the input values to positions in the table. The first dimension corresponds to the top (or left) input port."> interpolation</entry>
      <entry key="Lookup_Tables_2DLookupTable_extrapolation"
             note="This is the keyword for the block with Block Description:- Perform n-dimensional interpolated table lookup including index searches. The table is a sampled representation of a function in N variables. Breakpoint sets relate the input values to positions in the table. The first dimension corresponds to the top (or left) input port."> extrapolation</entry>
      <entry key="Lookup_Tables_2DLookupTable_table"
             note="This is the keyword for the block with Block Description:- Perform n-dimensional interpolated table lookup including index searches. The table is a sampled representation of a function in N variables. Breakpoint sets relate the input values to positions in the table. The first dimension corresponds to the top (or left) input port."> table</entry>
      <entry key="Lookup_Tables_2DLookupTable_curve"
             note="This is the keyword for the block with Block Description:- Perform n-dimensional interpolated table lookup including index searches. The table is a sampled representation of a function in N variables. Breakpoint sets relate the input values to positions in the table. The first dimension corresponds to the top (or left) input port."> curve</entry>
      <entry key="Lookup_Tables_2DLookupTable_map"
             note="This is the keyword for the block with Block Description:- Perform n-dimensional interpolated table lookup including index searches. The table is a sampled representation of a function in N variables. Breakpoint sets relate the input values to positions in the table. The first dimension corresponds to the top (or left) input port."> map </entry>
      <entry key="Lookup_Tables_Cosine_cos"
             note="This is the hint for the block keyword with Block Description:- Implement sine and cosine functions in fixed point using a lookup table approach that exploits quarter wave symmetry. The output fraction length equals the output word length minus 2.The most efficient implementation is obtained when the number of data points is (2^n)+1 where n is an integer."> cos</entry>
      <entry key="Lookup_Tables_Cosine_cosine"
             note="This is the hint for the block keyword with Block Description:- Implement sine and cosine functions in fixed point using a lookup table approach that exploits quarter wave symmetry. The output fraction length equals the output word length minus 2.The most efficient implementation is obtained when the number of data points is (2^n)+1 where n is an integer."> cosine</entry>
      <entry key="Lookup_Tables_DirectLookupTablenD_lookup"
             note="This is the keyword for the block with Block Description:- Select an element, vector, or 2-D matrix from Table data. If a vector is selected from a 2-D table, the output vector can be a column or a row depending on the model configuration setting.The block inputs are zero-based indices, e.g., an input of 3 returns the fourth element in that dimension. The first selection index corresponds to the top (or left) input port.">lookup</entry>
      <entry key="Lookup_Tables_DirectLookupTablenD_lookup_1"
             note="This is the keyword for the block with Block Description:- Select an element, vector, or 2-D matrix from Table data. If a vector is selected from a 2-D table, the output vector can be a column or a row depending on the model configuration setting.The block inputs are zero-based indices, e.g., an input of 3 returns the fourth element in that dimension. The first selection index corresponds to the top (or left) input port."> look-up</entry>
      <entry key="Lookup_Tables_DirectLookupTablenD_look_up"
             note="This is the keyword for the block with Block Description:- Select an element, vector, or 2-D matrix from Table data. If a vector is selected from a 2-D table, the output vector can be a column or a row depending on the model configuration setting.The block inputs are zero-based indices, e.g., an input of 3 returns the fourth element in that dimension. The first selection index corresponds to the top (or left) input port."> look up</entry>
      <entry key="Lookup_Tables_DirectLookupTablenD_table"
             note="This is the keyword for the block with Block Description:- Select an element, vector, or 2-D matrix from Table data. If a vector is selected from a 2-D table, the output vector can be a column or a row depending on the model configuration setting.The block inputs are zero-based indices, e.g., an input of 3 returns the fourth element in that dimension. The first selection index corresponds to the top (or left) input port."> table</entry>
      <entry key="Lookup_Tables_DirectLookupTablenD_map"
             note="This is the keyword for the block with Block Description:- Select an element, vector, or 2-D matrix from Table data. If a vector is selected from a 2-D table, the output vector can be a column or a row depending on the model configuration setting.The block inputs are zero-based indices, e.g., an input of 3 returns the fourth element in that dimension. The first selection index corresponds to the top (or left) input port."> map</entry>
      <entry key="Lookup_Tables_DirectLookupTablenD_directlookup"
             note="This is the keyword for the block with Block Description:- Select an element, vector, or 2-D matrix from Table data. If a vector is selected from a 2-D table, the output vector can be a column or a row depending on the model configuration setting.The block inputs are zero-based indices, e.g., an input of 3 returns the fourth element in that dimension. The first selection index corresponds to the top (or left) input port."> direct lookup</entry>
      <entry key="Lookup_Tables_InterpolationUsingPrelookup_extrapolation"
             note="This is the keyword for the block with Block Description:- Perform interpolation (or extrapolation) on an n-dimensional table using pre-calculated indices and fraction values.Use 'Number of table dimensions' and 'Table data' to specify an n-dimensional table that represents a function of 'n' variables.'Number of subtable selection dimensions' lets you specify that the block interpolates only a subset of table data. If you specify 'k' as its value, the block displays 'n-k' pairs of index and fraction inputs and 'k' subtable selection inputs. Its default value is 0, i.e., interpolate the entire table. Use the selection inputs to specify the indices of the subtable to be interpolated.You may use Prelookup blocks to compute the index, fraction, and selection inputs.">extrapolation</entry>
      <entry key="Lookup_Tables_InterpolationUsingPrelookup_interp"
             note="This is the keyword for the block with Block Description:- Perform interpolation (or extrapolation) on an n-dimensional table using pre-calculated indices and fraction values.Use 'Number of table dimensions' and 'Table data' to specify an n-dimensional table that represents a function of 'n' variables.'Number of subtable selection dimensions' lets you specify that the block interpolates only a subset of table data. If you specify 'k' as its value, the block displays 'n-k' pairs of index and fraction inputs and 'k' subtable selection inputs. Its default value is 0, i.e., interpolate the entire table. Use the selection inputs to specify the indices of the subtable to be interpolated.You may use Prelookup blocks to compute the index, fraction, and selection inputs."> interp</entry>
      <entry key="Lookup_Tables_InterpolationUsingPrelookup_interpolation"
             note="This is the keyword for the block with Block Description:- Perform interpolation (or extrapolation) on an n-dimensional table using pre-calculated indices and fraction values.Use 'Number of table dimensions' and 'Table data' to specify an n-dimensional table that represents a function of 'n' variables.'Number of subtable selection dimensions' lets you specify that the block interpolates only a subset of table data. If you specify 'k' as its value, the block displays 'n-k' pairs of index and fraction inputs and 'k' subtable selection inputs. Its default value is 0, i.e., interpolate the entire table. Use the selection inputs to specify the indices of the subtable to be interpolated.You may use Prelookup blocks to compute the index, fraction, and selection inputs."> interpolation</entry>
      <entry key="Lookup_Tables_LookupTableDynamic_dynamiclut"
             note="This is the hint for the block keyword with Block Description:- Approximate a one-dimensional function using a selected lookup method.">dynamic lut</entry>
      <entry key="Lookup_Tables_LookupTableDynamic_dynamiclookuptable"
             note="This is the hint for the block keyword with Block Description:- Approximate a one-dimensional function using a selected lookup method."> dynamic lookup table</entry>
      <entry key="Lookup_Tables_Prelookup_prelookup"
             note="This is the keyword for the block with Block Description:- Locate the position of input u on the set of intervals defined by &#34;Breakpoint data&#34;. Outputs an index k and a fraction f where k specifies the interval containing the input and f is the input's normalized position on the interval.">prelookup</entry>
      <entry key="Lookup_Tables_Prelookup_index"
             note="This is the keyword for the block with Block Description:- Locate the position of input u on the set of intervals defined by &#34;Breakpoint data&#34;. Outputs an index k and a fraction f where k specifies the interval containing the input and f is the input's normalized position on the interval."> index</entry>
      <entry key="Lookup_Tables_Prelookup_fraction"
             note="This is the keyword for the block with Block Description:- Locate the position of input u on the set of intervals defined by &#34;Breakpoint data&#34;. Outputs an index k and a fraction f where k specifies the interval containing the input and f is the input's normalized position on the interval."> fraction</entry>
      <entry key="Lookup_Tables_Prelookup_dpsearch"
             note="This is the keyword for the block with Block Description:- Locate the position of input u on the set of intervals defined by &#34;Breakpoint data&#34;. Outputs an index k and a fraction f where k specifies the interval containing the input and f is the input's normalized position on the interval."> dpsearch</entry>
      <entry key="Lookup_Tables_Sine_sin"
             note="This is the hint for the block keyword with Block Description:- Implement sine and cosine functions in fixed point using a lookup table approach that exploits quarter wave symmetry. The output fraction length equals the output word length minus 2.The most efficient implementation is obtained when the number of data points is (2^n)+1 where n is an integer.">sin</entry>
      <entry key="Lookup_Tables_Sine_sine"
             note="This is the hint for the block keyword with Block Description:- Implement sine and cosine functions in fixed point using a lookup table approach that exploits quarter wave symmetry. The output fraction length equals the output word length minus 2.The most efficient implementation is obtained when the number of data points is (2^n)+1 where n is an integer.">   sine  </entry>
      <entry key="Lookup_Tables_nDLookupTable_lut"
             note="This is the keyword for the block with Block Description:- Perform n-dimensional interpolated table lookup including index searches. The table is a sampled representation of a function in N variables. Breakpoint sets relate the input values to positions in the table. The first dimension corresponds to the top (or left) input port.">lut</entry>
      <entry key="Lookup_Tables_nDLookupTable_lookup"
             note="This is the keyword for the block with Block Description:- Perform n-dimensional interpolated table lookup including index searches. The table is a sampled representation of a function in N variables. Breakpoint sets relate the input values to positions in the table. The first dimension corresponds to the top (or left) input port."> lookup</entry>
      <entry key="Lookup_Tables_nDLookupTable_lookup_1"
             note="This is the keyword for the block with Block Description:- Perform n-dimensional interpolated table lookup including index searches. The table is a sampled representation of a function in N variables. Breakpoint sets relate the input values to positions in the table. The first dimension corresponds to the top (or left) input port."> look-up</entry>
      <entry key="Lookup_Tables_nDLookupTable_look_up"
             note="This is the keyword for the block with Block Description:- Perform n-dimensional interpolated table lookup including index searches. The table is a sampled representation of a function in N variables. Breakpoint sets relate the input values to positions in the table. The first dimension corresponds to the top (or left) input port."> look up</entry>
      <entry key="Lookup_Tables_nDLookupTable_interpolation"
             note="This is the keyword for the block with Block Description:- Perform n-dimensional interpolated table lookup including index searches. The table is a sampled representation of a function in N variables. Breakpoint sets relate the input values to positions in the table. The first dimension corresponds to the top (or left) input port."> interpolation</entry>
      <entry key="Lookup_Tables_nDLookupTable_extrapolation"
             note="This is the keyword for the block with Block Description:- Perform n-dimensional interpolated table lookup including index searches. The table is a sampled representation of a function in N variables. Breakpoint sets relate the input values to positions in the table. The first dimension corresponds to the top (or left) input port."> extrapolation</entry>
      <entry key="Lookup_Tables_nDLookupTable_table"
             note="This is the keyword for the block with Block Description:- Perform n-dimensional interpolated table lookup including index searches. The table is a sampled representation of a function in N variables. Breakpoint sets relate the input values to positions in the table. The first dimension corresponds to the top (or left) input port."> table</entry>
      <entry key="Lookup_Tables_nDLookupTable_curve"
             note="This is the keyword for the block with Block Description:- Perform n-dimensional interpolated table lookup including index searches. The table is a sampled representation of a function in N variables. Breakpoint sets relate the input values to positions in the table. The first dimension corresponds to the top (or left) input port."> curve</entry>
      <entry key="Lookup_Tables_nDLookupTable_map"
             note="This is the keyword for the block with Block Description:- Perform n-dimensional interpolated table lookup including index searches. The table is a sampled representation of a function in N variables. Breakpoint sets relate the input values to positions in the table. The first dimension corresponds to the top (or left) input port."> map </entry>
      <entry key="Math_Operations_Abs_absolute"
             note="This is the keyword for the block with Block Description:- y = |u|">absolute</entry>
      <entry key="Math_Operations_Add_plus"
             note="This is the keyword for the block with Block Description:- Add or subtract inputs.  Specify one of the following:a) character vector containing + or - for each input port, | for spacer between ports (e.g. ++|-|++)b) scalar, &gt;= 1, specifies the number of input ports to be summed. When there is only one input port, add or subtract elements over all dimensions or one specified dimension ">plus</entry>
      <entry key="Math_Operations_Add_addition"
             note="This is the keyword for the block with Block Description:- Add or subtract inputs.  Specify one of the following:a) character vector containing + or - for each input port, | for spacer between ports (e.g. ++|-|++)b) scalar, &gt;= 1, specifies the number of input ports to be summed. When there is only one input port, add or subtract elements over all dimensions or one specified dimension "> addition</entry>
      <entry key="Math_Operations_Add_accumulate"
             note="This is the keyword for the block with Block Description:- Add or subtract inputs.  Specify one of the following:a) character vector containing + or - for each input port, | for spacer between ports (e.g. ++|-|++)b) scalar, &gt;= 1, specifies the number of input ports to be summed. When there is only one input port, add or subtract elements over all dimensions or one specified dimension "> accumulate</entry>
      <entry key="Math_Operations_Add_accumulator"
             note="This is the keyword for the block with Block Description:- Add or subtract inputs.  Specify one of the following:a) character vector containing + or - for each input port, | for spacer between ports (e.g. ++|-|++)b) scalar, &gt;= 1, specifies the number of input ports to be summed. When there is only one input port, add or subtract elements over all dimensions or one specified dimension "> accumulator</entry>
      <entry key="Math_Operations_Add_adder"
             note="This is the keyword for the block with Block Description:- Add or subtract inputs.  Specify one of the following:a) character vector containing + or - for each input port, | for spacer between ports (e.g. ++|-|++)b) scalar, &gt;= 1, specifies the number of input ports to be summed. When there is only one input port, add or subtract elements over all dimensions or one specified dimension "> adder</entry>
      <entry key="Math_Operations_AlgebraicConstraint_constraint"
             note="This is the keyword for the block with Block Description:- Constrain input signal f(z) and output an algebraic state z.This block outputs the value z which satisfies the selected constraint. The output must affect the input through some feedback path.Select a solver, change a tolerance and provide an 'Initial guess' of the output to improve algebraic loop solver efficiency.">constraint</entry>
      <entry key="Math_Operations_AlgebraicConstraint_solve"
             note="This is the keyword for the block with Block Description:- Constrain input signal f(z) and output an algebraic state z.This block outputs the value z which satisfies the selected constraint. The output must affect the input through some feedback path.Select a solver, change a tolerance and provide an 'Initial guess' of the output to improve algebraic loop solver efficiency."> solve</entry>
      <entry key="Math_Operations_AlgebraicConstraint_solver"
             note="This is the keyword for the block with Block Description:- Constrain input signal f(z) and output an algebraic state z.This block outputs the value z which satisfies the selected constraint. The output must affect the input through some feedback path.Select a solver, change a tolerance and provide an 'Initial guess' of the output to improve algebraic loop solver efficiency."> solver</entry>
      <entry key="Math_Operations_Assignment_assign"
             note="This is the keyword for the block with Block Description:- Assign values to specified elements of a multidimensional output signal. The index to each element is identified from an input port or this dialog. You can choose the indexing method for each dimension by using the &#34;Index Option&#34; parameter.">assign</entry>
      <entry key="Math_Operations_Bias_offset"
             note="This is the keyword for the block with Block Description:- Add bias to input,  Y = U + Bias.">offset</entry>
      <entry key="Math_Operations_ComplextoMagnitudeAngle_cart2pol"
             note="This is the keyword for the block with Block Description:- Compute magnitude and/or radian phase angle of the input.">cart2pol</entry>
      <entry key="Math_Operations_ComplextoMagnitudeAngle_polar"
             note="This is the keyword for the block with Block Description:- Compute magnitude and/or radian phase angle of the input."> polar</entry>
      <entry key="Math_Operations_ComplextoMagnitudeAngle_cartesian"
             note="This is the keyword for the block with Block Description:- Compute magnitude and/or radian phase angle of the input."> cartesian</entry>
      <entry key="Math_Operations_ComplextoRealImag_real"
             note="This is the keyword for the block with Block Description:- Output the real and/or imaginary components of the input.">real</entry>
      <entry key="Math_Operations_ComplextoRealImag_imaginary"
             note="This is the keyword for the block with Block Description:- Output the real and/or imaginary components of the input."> imaginary</entry>
      <entry key="Math_Operations_Divide_divide"
             note="This is the keyword for the block with Block Description:- Multiply or divide inputs.  Choose element-wise or matrix product and specify one of the following: a) * or / for each input port. For example, **/* performs the operation 'u1*u2/u3*u4'. b) A scalar value specifies the number of input ports to be multiplied. For example, 2 performs the operation 'u1*u2'.If there is only one input port and the Multiplication parameter is set to Element-wise(.*), a single * or / collapses the input signal using the specified operation. However, if the Multiplication parameter is set to Matrix(*), a single * causes the block to output the matrix unchanged, and a single / causes the block to output the matrix inverse.">divide</entry>
      <entry key="Math_Operations_Divide_division"
             note="This is the keyword for the block with Block Description:- Multiply or divide inputs.  Choose element-wise or matrix product and specify one of the following: a) * or / for each input port. For example, **/* performs the operation 'u1*u2/u3*u4'. b) A scalar value specifies the number of input ports to be multiplied. For example, 2 performs the operation 'u1*u2'.If there is only one input port and the Multiplication parameter is set to Element-wise(.*), a single * or / collapses the input signal using the specified operation. However, if the Multiplication parameter is set to Matrix(*), a single * causes the block to output the matrix unchanged, and a single / causes the block to output the matrix inverse.">  division</entry>
      <entry key="Math_Operations_DotProduct_innerproduct"
             note="This is the keyword for the block with Block Description:- Dot (inner) product of inputs.y = sum(conj(u1).*u2)">inner product</entry>
      <entry key="Math_Operations_DotProduct_scalarprodcut"
             note="This is the keyword for the block with Block Description:- Dot (inner) product of inputs.y = sum(conj(u1).*u2)"> scalar product</entry>
      <entry key="Math_Operations_FindNonzeroElements_nonzero"
             note="This is the keyword for the block with Block Description:- Find the linear indices or the subscripts of the nonzero values of the input. (Conversion of linear indices is done along the first dimension.) Select 'Show output port for nonzero input values' to show the nonzero input  values on an additional output port.">nonzero</entry>
      <entry key="Math_Operations_FindNonzeroElements_find"
             note="This is the keyword for the block with Block Description:- Find the linear indices or the subscripts of the nonzero values of the input. (Conversion of linear indices is done along the first dimension.) Select 'Show output port for nonzero input values' to show the nonzero input  values on an additional output port."> find</entry>
      <entry key="Math_Operations_Gain_amplify"
             note="This is the keyword for the block with Block Description:- Element-wise gain (y = K.*u) or matrix gain (y = K*u or y = u*K).">amplify</entry>
      <entry key="Math_Operations_Gain_factor"
             note="This is the keyword for the block with Block Description:- Element-wise gain (y = K.*u) or matrix gain (y = K*u or y = u*K)."> factor</entry>
      <entry key="Math_Operations_Gain_amplifier"
             note="This is the keyword for the block with Block Description:- Element-wise gain (y = K.*u) or matrix gain (y = K*u or y = u*K)."> amplifier</entry>
      <entry key="Math_Operations_Gain_multiply"
             note="This is the keyword for the block with Block Description:- Element-wise gain (y = K.*u) or matrix gain (y = K*u or y = u*K)."> multiply</entry>
      <entry key="Math_Operations_Gain_multiplier"
             note="This is the keyword for the block with Block Description:- Element-wise gain (y = K.*u) or matrix gain (y = K*u or y = u*K)."> multiplier</entry>
      <entry key="Math_Operations_Gain_proportional"
             note="This is the keyword for the block with Block Description:- Element-wise gain (y = K.*u) or matrix gain (y = K*u or y = u*K)."> proportional</entry>
      <entry key="Math_Operations_Gain_attenuator"
             note="This is the keyword for the block with Block Description:- Element-wise gain (y = K.*u) or matrix gain (y = K*u or y = u*K)."> attenuator</entry>
      <entry key="Math_Operations_MagnitudeAngletoComplex_angle"
             note="This is the keyword for the block with Block Description:- Construct a complex output from magnitude and/or radian phase angle input. CORDIC approximation can also be used to compute the output.">angle</entry>
      <entry key="Math_Operations_MagnitudeAngletoComplex_cartesian"
             note="This is the keyword for the block with Block Description:- Construct a complex output from magnitude and/or radian phase angle input. CORDIC approximation can also be used to compute the output."> cartesian</entry>
      <entry key="Math_Operations_MagnitudeAngletoComplex_polar"
             note="This is the keyword for the block with Block Description:- Construct a complex output from magnitude and/or radian phase angle input. CORDIC approximation can also be used to compute the output."> polar</entry>
      <entry key="Math_Operations_MagnitudeAngletoComplex_pol2cart"
             note="This is the keyword for the block with Block Description:- Construct a complex output from magnitude and/or radian phase angle input. CORDIC approximation can also be used to compute the output."> pol2cart</entry>
      <entry key="Math_Operations_MagnitudeAngletoComplex_CORDIC"
             note="This is the keyword for the block with Block Description:- Construct a complex output from magnitude and/or radian phase angle input. CORDIC approximation can also be used to compute the output."> CORDIC</entry>
      <entry key="Math_Operations_MathFunction_exp"
             note="This is the keyword for the block with Block Description:- Mathematical functions including logarithmic, exponential, power, and modulus functions.  When the function has more than one argument, the first argument corresponds to the top (or left) input port.">exp</entry>
      <entry key="Math_Operations_MathFunction_log"
             note="This is the keyword for the block with Block Description:- Mathematical functions including logarithmic, exponential, power, and modulus functions.  When the function has more than one argument, the first argument corresponds to the top (or left) input port."> log</entry>
      <entry key="Math_Operations_MathFunction_ln"
             note="This is the keyword for the block with Block Description:- Mathematical functions including logarithmic, exponential, power, and modulus functions.  When the function has more than one argument, the first argument corresponds to the top (or left) input port."> ln</entry>
      <entry key="Math_Operations_MathFunction_logarithm"
             note="This is the keyword for the block with Block Description:- Mathematical functions including logarithmic, exponential, power, and modulus functions.  When the function has more than one argument, the first argument corresponds to the top (or left) input port."> logarithm</entry>
      <entry key="Math_Operations_MathFunction_naturallogarithm"
             note="This is the keyword for the block with Block Description:- Mathematical functions including logarithmic, exponential, power, and modulus functions.  When the function has more than one argument, the first argument corresponds to the top (or left) input port."> natural logarithm</entry>
      <entry key="Math_Operations_MathFunction_pow2"
             note="This is the keyword for the block with Block Description:- Mathematical functions including logarithmic, exponential, power, and modulus functions.  When the function has more than one argument, the first argument corresponds to the top (or left) input port."> pow2</entry>
      <entry key="Math_Operations_MathFunction_2u"
             note="This is the keyword for the block with Block Description:- Mathematical functions including logarithmic, exponential, power, and modulus functions.  When the function has more than one argument, the first argument corresponds to the top (or left) input port."> 2^u</entry>
      <entry key="Math_Operations_MathFunction_powerof2"
             note="This is the keyword for the block with Block Description:- Mathematical functions including logarithmic, exponential, power, and modulus functions.  When the function has more than one argument, the first argument corresponds to the top (or left) input port."> power of 2</entry>
      <entry key="Math_Operations_MathFunction_pow10"
             note="This is the keyword for the block with Block Description:- Mathematical functions including logarithmic, exponential, power, and modulus functions.  When the function has more than one argument, the first argument corresponds to the top (or left) input port."> pow10</entry>
      <entry key="Math_Operations_MathFunction_10u"
             note="This is the keyword for the block with Block Description:- Mathematical functions including logarithmic, exponential, power, and modulus functions.  When the function has more than one argument, the first argument corresponds to the top (or left) input port."> 10^u</entry>
      <entry key="Math_Operations_MathFunction_powerof10"
             note="This is the keyword for the block with Block Description:- Mathematical functions including logarithmic, exponential, power, and modulus functions.  When the function has more than one argument, the first argument corresponds to the top (or left) input port."> power of 10</entry>
      <entry key="Math_Operations_MathFunction_log10"
             note="This is the keyword for the block with Block Description:- Mathematical functions including logarithmic, exponential, power, and modulus functions.  When the function has more than one argument, the first argument corresponds to the top (or left) input port."> log10</entry>
      <entry key="Math_Operations_MathFunction_magsquare"
             note="This is the keyword for the block with Block Description:- Mathematical functions including logarithmic, exponential, power, and modulus functions.  When the function has more than one argument, the first argument corresponds to the top (or left) input port."> magsquare</entry>
      <entry key="Math_Operations_MathFunction_magnitudesquare"
             note="This is the keyword for the block with Block Description:- Mathematical functions including logarithmic, exponential, power, and modulus functions.  When the function has more than one argument, the first argument corresponds to the top (or left) input port."> magnitude square</entry>
      <entry key="Math_Operations_MathFunction_square"
             note="This is the keyword for the block with Block Description:- Mathematical functions including logarithmic, exponential, power, and modulus functions.  When the function has more than one argument, the first argument corresponds to the top (or left) input port."> square</entry>
      <entry key="Math_Operations_MathFunction_pow"
             note="This is the keyword for the block with Block Description:- Mathematical functions including logarithmic, exponential, power, and modulus functions.  When the function has more than one argument, the first argument corresponds to the top (or left) input port."> pow</entry>
      <entry key="Math_Operations_MathFunction_power"
             note="This is the keyword for the block with Block Description:- Mathematical functions including logarithmic, exponential, power, and modulus functions.  When the function has more than one argument, the first argument corresponds to the top (or left) input port."> power</entry>
      <entry key="Math_Operations_MathFunction_conj"
             note="This is the keyword for the block with Block Description:- Mathematical functions including logarithmic, exponential, power, and modulus functions.  When the function has more than one argument, the first argument corresponds to the top (or left) input port."> conj</entry>
      <entry key="Math_Operations_MathFunction_conjugate"
             note="This is the keyword for the block with Block Description:- Mathematical functions including logarithmic, exponential, power, and modulus functions.  When the function has more than one argument, the first argument corresponds to the top (or left) input port."> conjugate</entry>
      <entry key="Math_Operations_MathFunction_reciprocal"
             note="This is the keyword for the block with Block Description:- Mathematical functions including logarithmic, exponential, power, and modulus functions.  When the function has more than one argument, the first argument corresponds to the top (or left) input port."> reciprocal</entry>
      <entry key="Math_Operations_MathFunction_hypot"
             note="This is the keyword for the block with Block Description:- Mathematical functions including logarithmic, exponential, power, and modulus functions.  When the function has more than one argument, the first argument corresponds to the top (or left) input port."> hypot</entry>
      <entry key="Math_Operations_MathFunction_hypotenuse"
             note="This is the keyword for the block with Block Description:- Mathematical functions including logarithmic, exponential, power, and modulus functions.  When the function has more than one argument, the first argument corresponds to the top (or left) input port."> hypotenuse</entry>
      <entry key="Math_Operations_MathFunction_rem"
             note="This is the keyword for the block with Block Description:- Mathematical functions including logarithmic, exponential, power, and modulus functions.  When the function has more than one argument, the first argument corresponds to the top (or left) input port."> rem</entry>
      <entry key="Math_Operations_MathFunction_remainder"
             note="This is the keyword for the block with Block Description:- Mathematical functions including logarithmic, exponential, power, and modulus functions.  When the function has more than one argument, the first argument corresponds to the top (or left) input port."> remainder</entry>
      <entry key="Math_Operations_MathFunction_mod"
             note="This is the keyword for the block with Block Description:- Mathematical functions including logarithmic, exponential, power, and modulus functions.  When the function has more than one argument, the first argument corresponds to the top (or left) input port."> mod</entry>
      <entry key="Math_Operations_MathFunction_modulus"
             note="This is the keyword for the block with Block Description:- Mathematical functions including logarithmic, exponential, power, and modulus functions.  When the function has more than one argument, the first argument corresponds to the top (or left) input port."> modulus</entry>
      <entry key="Math_Operations_MathFunction_transpose"
             note="This is the keyword for the block with Block Description:- Mathematical functions including logarithmic, exponential, power, and modulus functions.  When the function has more than one argument, the first argument corresponds to the top (or left) input port."> transpose</entry>
      <entry key="Math_Operations_MathFunction_hermitian"
             note="This is the keyword for the block with Block Description:- Mathematical functions including logarithmic, exponential, power, and modulus functions.  When the function has more than one argument, the first argument corresponds to the top (or left) input port."> hermitian</entry>
      <entry key="Math_Operations_MatrixConcatenate_append"
             note="This is the keyword for the block with Block Description:- Concatenate input signals of the same data type to create a contiguous output signal. Select vector or multidimensional array mode.In vector mode, all input signals must be either vectors or one-row [1xM] matrices or one-column [Mx1] matrices or a combination of vectors and either one-row matrices or one-column matrices. The output is a vector if all inputs are vectors. The output is a one-row or one-column matrix if any of the inputs are one-row or one-column matrices, respectively.In multidimensional mode, use 'Concatenate dimension' to specify the output dimension along which to concatenate the input arrays. For example, to concatenate the input arrays vertically or horizontally, specify 1 or 2, respectively, as the concatenate dimensions.">append</entry>
      <entry key="Math_Operations_MatrixConcatenate_join"
             note="This is the keyword for the block with Block Description:- Concatenate input signals of the same data type to create a contiguous output signal. Select vector or multidimensional array mode.In vector mode, all input signals must be either vectors or one-row [1xM] matrices or one-column [Mx1] matrices or a combination of vectors and either one-row matrices or one-column matrices. The output is a vector if all inputs are vectors. The output is a one-row or one-column matrix if any of the inputs are one-row or one-column matrices, respectively.In multidimensional mode, use 'Concatenate dimension' to specify the output dimension along which to concatenate the input arrays. For example, to concatenate the input arrays vertically or horizontally, specify 1 or 2, respectively, as the concatenate dimensions."> join</entry>
      <entry key="Math_Operations_MinMax_min"
             note="This is the keyword for the block with Block Description:- Output min or max of input.  For a single input, operators are applied across the input vector.  For multiple inputs, operators are applied across the inputs.">min</entry>
      <entry key="Math_Operations_MinMax_max"
             note="This is the keyword for the block with Block Description:- Output min or max of input.  For a single input, operators are applied across the input vector.  For multiple inputs, operators are applied across the inputs."> max</entry>
      <entry key="Math_Operations_MinMax_limit"
             note="This is the keyword for the block with Block Description:- Output min or max of input.  For a single input, operators are applied across the input vector.  For multiple inputs, operators are applied across the inputs."> limit</entry>
      <entry key="Math_Operations_MinMax_range"
             note="This is the keyword for the block with Block Description:- Output min or max of input.  For a single input, operators are applied across the input vector.  For multiple inputs, operators are applied across the inputs."> range</entry>
      <entry key="Math_Operations_MinMaxRunningResettable_min"
             note="This is the hint for the block keyword with Block Description:- Output the max or min of all past inputs u. The output is reset to the initial condition when the Reset input signal R is TRUE. This reset action is vectorized and supports scalar expansion.">min</entry>
      <entry key="Math_Operations_MinMaxRunningResettable_max"
             note="This is the hint for the block keyword with Block Description:- Output the max or min of all past inputs u. The output is reset to the initial condition when the Reset input signal R is TRUE. This reset action is vectorized and supports scalar expansion."> max</entry>
      <entry key="Math_Operations_MinMaxRunningResettable_limit"
             note="This is the hint for the block keyword with Block Description:- Output the max or min of all past inputs u. The output is reset to the initial condition when the Reset input signal R is TRUE. This reset action is vectorized and supports scalar expansion."> limit</entry>
      <entry key="Math_Operations_MinMaxRunningResettable_range"
             note="This is the hint for the block keyword with Block Description:- Output the max or min of all past inputs u. The output is reset to the initial condition when the Reset input signal R is TRUE. This reset action is vectorized and supports scalar expansion."> range</entry>
      <entry key="Math_Operations_PermuteDimensions_transpose"
             note="This is the keyword for the block with Block Description:- Rearrange the elements of the input signal by permuting its dimensions, for example, by exchanging its first and third dimensions. Use the 'Order' parameter to specify the permutation to be applied to the dimensions of the input signal. The value of this parameter must be an N-element vector where N is the number of dimensions of the input signal. The elements of the permutation vector must be a rearrangement of the values 1 to N. For example, the permutation vector [2 1] applied to a 5x3 input signal results in a 3 x 5 output signal, i.e., the transpose of the input signal.">transpose</entry>
      <entry key="Math_Operations_PermuteDimensions_reshape"
             note="This is the keyword for the block with Block Description:- Rearrange the elements of the input signal by permuting its dimensions, for example, by exchanging its first and third dimensions. Use the 'Order' parameter to specify the permutation to be applied to the dimensions of the input signal. The value of this parameter must be an N-element vector where N is the number of dimensions of the input signal. The elements of the permutation vector must be a rearrangement of the values 1 to N. For example, the permutation vector [2 1] applied to a 5x3 input signal results in a 3 x 5 output signal, i.e., the transpose of the input signal."> reshape</entry>
      <entry key="Math_Operations_Polynomial_polynomial"
             note="This is the keyword for the block with Block Description:- Polynomial evaluation.  Calculates P(u) given by the polynomial coefficient array P. P is sorted highest order to lowest order, the form accepted by MATLAB's polyval function.">polynomial</entry>
      <entry key="Math_Operations_Polynomial_polyval"
             note="This is the keyword for the block with Block Description:- Polynomial evaluation.  Calculates P(u) given by the polynomial coefficient array P. P is sorted highest order to lowest order, the form accepted by MATLAB's polyval function."> polyval</entry>
      <entry key="Math_Operations_Product_multiply"
             note="This is the keyword for the block with Block Description:- Multiply or divide inputs.  Choose element-wise or matrix product and specify one of the following: a) * or / for each input port. For example, **/* performs the operation 'u1*u2/u3*u4'. b) A scalar value specifies the number of input ports to be multiplied. For example, 2 performs the operation 'u1*u2'.If there is only one input port and the Multiplication parameter is set to Element-wise(.*), a single * or / collapses the input signal using the specified operation. However, if the Multiplication parameter is set to Matrix(*), a single * causes the block to output the matrix unchanged, and a single / causes the block to output the matrix inverse.">multiply</entry>
      <entry key="Math_Operations_Product_divide"
             note="This is the keyword for the block with Block Description:- Multiply or divide inputs.  Choose element-wise or matrix product and specify one of the following: a) * or / for each input port. For example, **/* performs the operation 'u1*u2/u3*u4'. b) A scalar value specifies the number of input ports to be multiplied. For example, 2 performs the operation 'u1*u2'.If there is only one input port and the Multiplication parameter is set to Element-wise(.*), a single * or / collapses the input signal using the specified operation. However, if the Multiplication parameter is set to Matrix(*), a single * causes the block to output the matrix unchanged, and a single / causes the block to output the matrix inverse."> divide</entry>
      <entry key="Math_Operations_Product_product"
             note="This is the keyword for the block with Block Description:- Multiply or divide inputs.  Choose element-wise or matrix product and specify one of the following: a) * or / for each input port. For example, **/* performs the operation 'u1*u2/u3*u4'. b) A scalar value specifies the number of input ports to be multiplied. For example, 2 performs the operation 'u1*u2'.If there is only one input port and the Multiplication parameter is set to Element-wise(.*), a single * or / collapses the input signal using the specified operation. However, if the Multiplication parameter is set to Matrix(*), a single * causes the block to output the matrix unchanged, and a single / causes the block to output the matrix inverse."> product</entry>
      <entry key="Math_Operations_Product_division"
             note="This is the keyword for the block with Block Description:- Multiply or divide inputs.  Choose element-wise or matrix product and specify one of the following: a) * or / for each input port. For example, **/* performs the operation 'u1*u2/u3*u4'. b) A scalar value specifies the number of input ports to be multiplied. For example, 2 performs the operation 'u1*u2'.If there is only one input port and the Multiplication parameter is set to Element-wise(.*), a single * or / collapses the input signal using the specified operation. However, if the Multiplication parameter is set to Matrix(*), a single * causes the block to output the matrix unchanged, and a single / causes the block to output the matrix inverse."> division</entry>
      <entry key="Math_Operations_Product_multiplication"
             note="This is the keyword for the block with Block Description:- Multiply or divide inputs.  Choose element-wise or matrix product and specify one of the following: a) * or / for each input port. For example, **/* performs the operation 'u1*u2/u3*u4'. b) A scalar value specifies the number of input ports to be multiplied. For example, 2 performs the operation 'u1*u2'.If there is only one input port and the Multiplication parameter is set to Element-wise(.*), a single * or / collapses the input signal using the specified operation. However, if the Multiplication parameter is set to Matrix(*), a single * causes the block to output the matrix unchanged, and a single / causes the block to output the matrix inverse."> multiplication</entry>
      <entry key="Math_Operations_ProductofElements_multiply"
             note="This is the keyword for the block with Block Description:- Multiply or divide inputs.  Choose element-wise or matrix product and specify one of the following: a) * or / for each input port. For example, **/* performs the operation 'u1*u2/u3*u4'. b) A scalar value specifies the number of input ports to be multiplied. For example, 2 performs the operation 'u1*u2'.If there is only one input port and the Multiplication parameter is set to Element-wise(.*), a single * or / collapses the input signal using the specified operation. However, if the Multiplication parameter is set to Matrix(*), a single * causes the block to output the matrix unchanged, and a single / causes the block to output the matrix inverse.">multiply</entry>
      <entry key="Math_Operations_ProductofElements_product"
             note="This is the keyword for the block with Block Description:- Multiply or divide inputs.  Choose element-wise or matrix product and specify one of the following: a) * or / for each input port. For example, **/* performs the operation 'u1*u2/u3*u4'. b) A scalar value specifies the number of input ports to be multiplied. For example, 2 performs the operation 'u1*u2'.If there is only one input port and the Multiplication parameter is set to Element-wise(.*), a single * or / collapses the input signal using the specified operation. However, if the Multiplication parameter is set to Matrix(*), a single * causes the block to output the matrix unchanged, and a single / causes the block to output the matrix inverse."> product</entry>
      <entry key="Math_Operations_ProductofElements_multiplication"
             note="This is the keyword for the block with Block Description:- Multiply or divide inputs.  Choose element-wise or matrix product and specify one of the following: a) * or / for each input port. For example, **/* performs the operation 'u1*u2/u3*u4'. b) A scalar value specifies the number of input ports to be multiplied. For example, 2 performs the operation 'u1*u2'.If there is only one input port and the Multiplication parameter is set to Element-wise(.*), a single * or / collapses the input signal using the specified operation. However, if the Multiplication parameter is set to Matrix(*), a single * causes the block to output the matrix unchanged, and a single / causes the block to output the matrix inverse."> multiplication</entry>
      <entry key="Math_Operations_RealImagtoComplex_complex"
             note="This is the keyword for the block with Block Description:- Construct a complex output from real and/or imaginary input.">complex</entry>
      <entry key="Math_Operations_ReciprocalSqrt_sqrt"
             note="This is the keyword for the block with Block Description:- Square root functions including square root, signed square root, and reciprocal square root functions.">sqrt</entry>
      <entry key="Math_Operations_ReciprocalSqrt_reciprocal"
             note="This is the keyword for the block with Block Description:- Square root functions including square root, signed square root, and reciprocal square root functions."> reciprocal</entry>
      <entry key="Math_Operations_ReciprocalSqrt_NewtonRaphson"
             note="This is the keyword for the block with Block Description:- Square root functions including square root, signed square root, and reciprocal square root functions."> Newton Raphson</entry>
      <entry key="Math_Operations_ReciprocalSqrt_newton"
             note="This is the keyword for the block with Block Description:- Square root functions including square root, signed square root, and reciprocal square root functions."> newton</entry>
      <entry key="Math_Operations_ReciprocalSqrt_root"
             note="This is the keyword for the block with Block Description:- Square root functions including square root, signed square root, and reciprocal square root functions."> root</entry>
      <entry key="Math_Operations_Reshape_reshape"
             note="This is the keyword for the block with Block Description:- Change the dimensions of a vector or matrix input signal. Output - a one-dimensional array (vector),  - a column vector (Mx1 matrix),  - a row vector (1xN matrix),  - a matrix or vector with specified dimensions, e.g., [M, N] or [W], or  - with dimensions derived from dimensions of reference port.">reshape</entry>
      <entry key="Math_Operations_Reshape_convert"
             note="This is the keyword for the block with Block Description:- Change the dimensions of a vector or matrix input signal. Output - a one-dimensional array (vector),  - a column vector (Mx1 matrix),  - a row vector (1xN matrix),  - a matrix or vector with specified dimensions, e.g., [M, N] or [W], or  - with dimensions derived from dimensions of reference port."> convert</entry>
      <entry key="Math_Operations_RoundingFunction_round"
             note="This is the keyword for the block with Block Description:- Rounding operations.">round</entry>
      <entry key="Math_Operations_Sign_sign"
             note="This is the keyword for the block with Block Description:- For real inputs, output 1 for positive input, -1 for negative input, and 0 for 0 input.  For complex floating point inputs, the outputs follow sign(u) = u ./ abs(u)">sign</entry>
      <entry key="Math_Operations_Sign_signess"
             note="This is the keyword for the block with Block Description:- For real inputs, output 1 for positive input, -1 for negative input, and 0 for 0 input.  For complex floating point inputs, the outputs follow sign(u) = u ./ abs(u)"> signess</entry>
      <entry key="Math_Operations_SignedSqrt_sqrt"
             note="This is the keyword for the block with Block Description:- Square root functions including square root, signed square root, and reciprocal square root functions.">sqrt</entry>
      <entry key="Math_Operations_SignedSqrt_squareroot"
             note="This is the keyword for the block with Block Description:- Square root functions including square root, signed square root, and reciprocal square root functions."> square root</entry>
      <entry key="Math_Operations_SignedSqrt_root"
             note="This is the keyword for the block with Block Description:- Square root functions including square root, signed square root, and reciprocal square root functions."> root</entry>
      <entry key="Math_Operations_SineWaveFunction_sine"
             note="This is the keyword for the block with Block Description:- Output a sine wave:   O(t) = Amp*Sin(Freq*t+Phase) + BiasSine type determines the computational technique used. The parameters in the two types are related through:Samples per period = 2*pi / (Frequency * Sample time)Number of offset samples = Phase * Samples per period / (2*pi)Use the sample-based sine type if numerical problems due to running for large times (e.g. overflow in absolute time) occur.">sine</entry>
      <entry key="Math_Operations_SineWaveFunction_sinwave"
             note="This is the keyword for the block with Block Description:- Output a sine wave:   O(t) = Amp*Sin(Freq*t+Phase) + BiasSine type determines the computational technique used. The parameters in the two types are related through:Samples per period = 2*pi / (Frequency * Sample time)Number of offset samples = Phase * Samples per period / (2*pi)Use the sample-based sine type if numerical problems due to running for large times (e.g. overflow in absolute time) occur."> sin wave</entry>
      <entry key="Math_Operations_SineWaveFunction_sin"
             note="This is the keyword for the block with Block Description:- Output a sine wave:   O(t) = Amp*Sin(Freq*t+Phase) + BiasSine type determines the computational technique used. The parameters in the two types are related through:Samples per period = 2*pi / (Frequency * Sample time)Number of offset samples = Phase * Samples per period / (2*pi)Use the sample-based sine type if numerical problems due to running for large times (e.g. overflow in absolute time) occur."> sin</entry>
      <entry key="Math_Operations_SliderGain_gain"
             note="This is the hint for the block keyword with Block Description:- Move the slider to modify the scalar gain.">gain</entry>
      <entry key="Math_Operations_SliderGain_slider"
             note="This is the hint for the block keyword with Block Description:- Move the slider to modify the scalar gain."> slider</entry>
      <entry key="Math_Operations_Sqrt_sqrt"
             note="This is the keyword for the block with Block Description:- Square root functions including square root, signed square root, and reciprocal square root functions.">sqrt</entry>
      <entry key="Math_Operations_Sqrt_squareroot"
             note="This is the keyword for the block with Block Description:- Square root functions including square root, signed square root, and reciprocal square root functions."> square root</entry>
      <entry key="Math_Operations_Sqrt_root"
             note="This is the keyword for the block with Block Description:- Square root functions including square root, signed square root, and reciprocal square root functions."> root</entry>
      <entry key="Math_Operations_Squeeze_squeeze"
             note="This is the keyword for the block with Block Description:- Remove singleton dimensions of multi-dimensional input signal. A singleton dimension is a dimension whose size is 1. For example, a 2x1x3 signal becomes a 2x3 signal. 1-D and 2-D signals pass through unchanged.">squeeze</entry>
      <entry key="Math_Operations_Squeeze_reducedimension"
             note="This is the keyword for the block with Block Description:- Remove singleton dimensions of multi-dimensional input signal. A singleton dimension is a dimension whose size is 1. For example, a 2x1x3 signal becomes a 2x3 signal. 1-D and 2-D signals pass through unchanged."> reduce dimension</entry>
      <entry key="Math_Operations_Subtract_subtraction"
             note="This is the keyword for the block with Block Description:- Add or subtract inputs.  Specify one of the following:a) character vector containing + or - for each input port, | for spacer between ports (e.g. ++|-|++)b) scalar, &gt;= 1, specifies the number of input ports to be summed. When there is only one input port, add or subtract elements over all dimensions or one specified dimension ">subtraction</entry>
      <entry key="Math_Operations_Subtract_minus"
             note="This is the keyword for the block with Block Description:- Add or subtract inputs.  Specify one of the following:a) character vector containing + or - for each input port, | for spacer between ports (e.g. ++|-|++)b) scalar, &gt;= 1, specifies the number of input ports to be summed. When there is only one input port, add or subtract elements over all dimensions or one specified dimension "> minus</entry>
      <entry key="Math_Operations_Subtract_"
             note="This is the keyword for the block with Block Description:- Add or subtract inputs.  Specify one of the following:a) character vector containing + or - for each input port, | for spacer between ports (e.g. ++|-|++)b) scalar, &gt;= 1, specifies the number of input ports to be summed. When there is only one input port, add or subtract elements over all dimensions or one specified dimension ;translate=false set due no translatable content" translate="false"> -</entry>
      <entry key="Math_Operations_Sum_add"
             note="This is the keyword for the block with Block Description:- Add or subtract inputs.  Specify one of the following:a) character vector containing + or - for each input port, | for spacer between ports (e.g. ++|-|++)b) scalar, &gt;= 1, specifies the number of input ports to be summed. When there is only one input port, add or subtract elements over all dimensions or one specified dimension ">add</entry>
      <entry key="Math_Operations_Sum_plus"
             note="This is the keyword for the block with Block Description:- Add or subtract inputs.  Specify one of the following:a) character vector containing + or - for each input port, | for spacer between ports (e.g. ++|-|++)b) scalar, &gt;= 1, specifies the number of input ports to be summed. When there is only one input port, add or subtract elements over all dimensions or one specified dimension "> plus</entry>
      <entry key="Math_Operations_Sum_sum"
             note="This is the keyword for the block with Block Description:- Add or subtract inputs.  Specify one of the following:a) character vector containing + or - for each input port, | for spacer between ports (e.g. ++|-|++)b) scalar, &gt;= 1, specifies the number of input ports to be summed. When there is only one input port, add or subtract elements over all dimensions or one specified dimension "> sum</entry>
      <entry key="Math_Operations_Sum_addition"
             note="This is the keyword for the block with Block Description:- Add or subtract inputs.  Specify one of the following:a) character vector containing + or - for each input port, | for spacer between ports (e.g. ++|-|++)b) scalar, &gt;= 1, specifies the number of input ports to be summed. When there is only one input port, add or subtract elements over all dimensions or one specified dimension "> addition</entry>
      <entry key="Math_Operations_Sum_subtraction"
             note="This is the keyword for the block with Block Description:- Add or subtract inputs.  Specify one of the following:a) character vector containing + or - for each input port, | for spacer between ports (e.g. ++|-|++)b) scalar, &gt;= 1, specifies the number of input ports to be summed. When there is only one input port, add or subtract elements over all dimensions or one specified dimension "> subtraction</entry>
      <entry key="Math_Operations_Sum_minus"
             note="This is the keyword for the block with Block Description:- Add or subtract inputs.  Specify one of the following:a) character vector containing + or - for each input port, | for spacer between ports (e.g. ++|-|++)b) scalar, &gt;= 1, specifies the number of input ports to be summed. When there is only one input port, add or subtract elements over all dimensions or one specified dimension "> minus</entry>
      <entry key="Math_Operations_Sum_subtract"
             note="This is the keyword for the block with Block Description:- Add or subtract inputs.  Specify one of the following:a) character vector containing + or - for each input port, | for spacer between ports (e.g. ++|-|++)b) scalar, &gt;= 1, specifies the number of input ports to be summed. When there is only one input port, add or subtract elements over all dimensions or one specified dimension "> subtract</entry>
      <entry key="Math_Operations_Sum_accumulate"
             note="This is the keyword for the block with Block Description:- Add or subtract inputs.  Specify one of the following:a) character vector containing + or - for each input port, | for spacer between ports (e.g. ++|-|++)b) scalar, &gt;= 1, specifies the number of input ports to be summed. When there is only one input port, add or subtract elements over all dimensions or one specified dimension ">  accumulate</entry>
      <entry key="Math_Operations_Sum_accumulator"
             note="This is the keyword for the block with Block Description:- Add or subtract inputs.  Specify one of the following:a) character vector containing + or - for each input port, | for spacer between ports (e.g. ++|-|++)b) scalar, &gt;= 1, specifies the number of input ports to be summed. When there is only one input port, add or subtract elements over all dimensions or one specified dimension "> accumulator</entry>
      <entry key="Math_Operations_SumofElements_add"
             note="This is the keyword for the block with Block Description:- Add or subtract inputs.  Specify one of the following:a) character vector containing + or - for each input port, | for spacer between ports (e.g. ++|-|++)b) scalar, &gt;= 1, specifies the number of input ports to be summed. When there is only one input port, add or subtract elements over all dimensions or one specified dimension ">add</entry>
      <entry key="Math_Operations_SumofElements_plus"
             note="This is the keyword for the block with Block Description:- Add or subtract inputs.  Specify one of the following:a) character vector containing + or - for each input port, | for spacer between ports (e.g. ++|-|++)b) scalar, &gt;= 1, specifies the number of input ports to be summed. When there is only one input port, add or subtract elements over all dimensions or one specified dimension "> plus</entry>
      <entry key="Math_Operations_SumofElements_sum"
             note="This is the keyword for the block with Block Description:- Add or subtract inputs.  Specify one of the following:a) character vector containing + or - for each input port, | for spacer between ports (e.g. ++|-|++)b) scalar, &gt;= 1, specifies the number of input ports to be summed. When there is only one input port, add or subtract elements over all dimensions or one specified dimension "> sum</entry>
      <entry key="Math_Operations_TrigonometricFunction_sin"
             note="This is the keyword for the block with Block Description:- Trigonometric and hyperbolic functions. When the function has more than one argument, the first argument corresponds to the top (or left) input port. For sin, cos, sincos, cos +j sin, atan2 functions, CORDIC approximation can also be used to compute the output.">sin</entry>
      <entry key="Math_Operations_TrigonometricFunction_cos"
             note="This is the keyword for the block with Block Description:- Trigonometric and hyperbolic functions. When the function has more than one argument, the first argument corresponds to the top (or left) input port. For sin, cos, sincos, cos +j sin, atan2 functions, CORDIC approximation can also be used to compute the output."> cos</entry>
      <entry key="Math_Operations_TrigonometricFunction_tan"
             note="This is the keyword for the block with Block Description:- Trigonometric and hyperbolic functions. When the function has more than one argument, the first argument corresponds to the top (or left) input port. For sin, cos, sincos, cos +j sin, atan2 functions, CORDIC approximation can also be used to compute the output."> tan</entry>
      <entry key="Math_Operations_TrigonometricFunction_asin"
             note="This is the keyword for the block with Block Description:- Trigonometric and hyperbolic functions. When the function has more than one argument, the first argument corresponds to the top (or left) input port. For sin, cos, sincos, cos +j sin, atan2 functions, CORDIC approximation can also be used to compute the output."> asin</entry>
      <entry key="Math_Operations_TrigonometricFunction_acos"
             note="This is the keyword for the block with Block Description:- Trigonometric and hyperbolic functions. When the function has more than one argument, the first argument corresponds to the top (or left) input port. For sin, cos, sincos, cos +j sin, atan2 functions, CORDIC approximation can also be used to compute the output."> acos</entry>
      <entry key="Math_Operations_TrigonometricFunction_atan"
             note="This is the keyword for the block with Block Description:- Trigonometric and hyperbolic functions. When the function has more than one argument, the first argument corresponds to the top (or left) input port. For sin, cos, sincos, cos +j sin, atan2 functions, CORDIC approximation can also be used to compute the output."> atan</entry>
      <entry key="Math_Operations_TrigonometricFunction_atan2"
             note="This is the keyword for the block with Block Description:- Trigonometric and hyperbolic functions. When the function has more than one argument, the first argument corresponds to the top (or left) input port. For sin, cos, sincos, cos +j sin, atan2 functions, CORDIC approximation can also be used to compute the output."> atan2</entry>
      <entry key="Math_Operations_TrigonometricFunction_sec"
             note="This is the keyword for the block with Block Description:- Trigonometric and hyperbolic functions. When the function has more than one argument, the first argument corresponds to the top (or left) input port. For sin, cos, sincos, cos +j sin, atan2 functions, CORDIC approximation can also be used to compute the output."> sec</entry>
      <entry key="Math_Operations_TrigonometricFunction_cosec"
             note="This is the keyword for the block with Block Description:- Trigonometric and hyperbolic functions. When the function has more than one argument, the first argument corresponds to the top (or left) input port. For sin, cos, sincos, cos +j sin, atan2 functions, CORDIC approximation can also be used to compute the output."> cosec</entry>
      <entry key="Math_Operations_TrigonometricFunction_sine"
             note="This is the keyword for the block with Block Description:- Trigonometric and hyperbolic functions. When the function has more than one argument, the first argument corresponds to the top (or left) input port. For sin, cos, sincos, cos +j sin, atan2 functions, CORDIC approximation can also be used to compute the output."> sine</entry>
      <entry key="Math_Operations_TrigonometricFunction_cosine"
             note="This is the keyword for the block with Block Description:- Trigonometric and hyperbolic functions. When the function has more than one argument, the first argument corresponds to the top (or left) input port. For sin, cos, sincos, cos +j sin, atan2 functions, CORDIC approximation can also be used to compute the output."> cosine</entry>
      <entry key="Math_Operations_TrigonometricFunction_tangent"
             note="This is the keyword for the block with Block Description:- Trigonometric and hyperbolic functions. When the function has more than one argument, the first argument corresponds to the top (or left) input port. For sin, cos, sincos, cos +j sin, atan2 functions, CORDIC approximation can also be used to compute the output."> tangent</entry>
      <entry key="Math_Operations_TrigonometricFunction_secant"
             note="This is the keyword for the block with Block Description:- Trigonometric and hyperbolic functions. When the function has more than one argument, the first argument corresponds to the top (or left) input port. For sin, cos, sincos, cos +j sin, atan2 functions, CORDIC approximation can also be used to compute the output."> secant</entry>
      <entry key="Math_Operations_TrigonometricFunction_cosecant"
             note="This is the keyword for the block with Block Description:- Trigonometric and hyperbolic functions. When the function has more than one argument, the first argument corresponds to the top (or left) input port. For sin, cos, sincos, cos +j sin, atan2 functions, CORDIC approximation can also be used to compute the output."> cosecant</entry>
      <entry key="Math_Operations_TrigonometricFunction_asinh"
             note="This is the keyword for the block with Block Description:- Trigonometric and hyperbolic functions. When the function has more than one argument, the first argument corresponds to the top (or left) input port. For sin, cos, sincos, cos +j sin, atan2 functions, CORDIC approximation can also be used to compute the output."> asinh</entry>
      <entry key="Math_Operations_TrigonometricFunction_acosh"
             note="This is the keyword for the block with Block Description:- Trigonometric and hyperbolic functions. When the function has more than one argument, the first argument corresponds to the top (or left) input port. For sin, cos, sincos, cos +j sin, atan2 functions, CORDIC approximation can also be used to compute the output."> acosh</entry>
      <entry key="Math_Operations_TrigonometricFunction_hyperbolic"
             note="This is the keyword for the block with Block Description:- Trigonometric and hyperbolic functions. When the function has more than one argument, the first argument corresponds to the top (or left) input port. For sin, cos, sincos, cos +j sin, atan2 functions, CORDIC approximation can also be used to compute the output."> hyperbolic</entry>
      <entry key="Math_Operations_TrigonometricFunction_cexp"
             note="This is the keyword for the block with Block Description:- Trigonometric and hyperbolic functions. When the function has more than one argument, the first argument corresponds to the top (or left) input port. For sin, cos, sincos, cos +j sin, atan2 functions, CORDIC approximation can also be used to compute the output."> cexp</entry>
      <entry key="Math_Operations_TrigonometricFunction_CORDIC"
             note="This is the keyword for the block with Block Description:- Trigonometric and hyperbolic functions. When the function has more than one argument, the first argument corresponds to the top (or left) input port. For sin, cos, sincos, cos +j sin, atan2 functions, CORDIC approximation can also be used to compute the output."> CORDIC</entry>
      <entry key="Math_Operations_UnaryMinus_minus"
             note="This is the keyword for the block with Block Description:- Unary Minus of a Signal.">minus</entry>
      <entry key="Math_Operations_VectorConcatenate_concat"
             note="This is the keyword for the block with Block Description:- Concatenate input signals of the same data type to create a contiguous output signal. Select vector or multidimensional array mode.In vector mode, all input signals must be either vectors or one-row [1xM] matrices or one-column [Mx1] matrices or a combination of vectors and either one-row matrices or one-column matrices. The output is a vector if all inputs are vectors. The output is a one-row or one-column matrix if any of the inputs are one-row or one-column matrices, respectively.In multidimensional mode, use 'Concatenate dimension' to specify the output dimension along which to concatenate the input arrays. For example, to concatenate the input arrays vertically or horizontally, specify 1 or 2, respectively, as the concatenate dimensions.">concat</entry>
      <entry key="Math_Operations_VectorConcatenate_concatenate"
             note="This is the keyword for the block with Block Description:- Concatenate input signals of the same data type to create a contiguous output signal. Select vector or multidimensional array mode.In vector mode, all input signals must be either vectors or one-row [1xM] matrices or one-column [Mx1] matrices or a combination of vectors and either one-row matrices or one-column matrices. The output is a vector if all inputs are vectors. The output is a one-row or one-column matrix if any of the inputs are one-row or one-column matrices, respectively.In multidimensional mode, use 'Concatenate dimension' to specify the output dimension along which to concatenate the input arrays. For example, to concatenate the input arrays vertically or horizontally, specify 1 or 2, respectively, as the concatenate dimensions."> concatenate</entry>
      <entry key="Math_Operations_WeightedSampleTimeMath_sample"
             note="This is the keyword for the block with Block Description:- Add, subtract, multiply or divide the input signal by weighted sample time or just output weighted sample time or weighted sample rate.">sample</entry>
      <entry key="Math_Operations_WeightedSampleTimeMath_sampletimemath"
             note="This is the keyword for the block with Block Description:- Add, subtract, multiply or divide the input signal by weighted sample time or just output weighted sample time or weighted sample rate."> sampletimemath</entry>
      <entry key="Math_Operations_WeightedSampleTimeMath_weighted"
             note="This is the keyword for the block with Block Description:- Add, subtract, multiply or divide the input signal by weighted sample time or just output weighted sample time or weighted sample rate."> weighted</entry>
      <entry key="Model_Verification_Assertion_assert"
             note="This is the keyword for the block with Block Description:- Assert that the input signal is non-zero.  The default behavior in the absence of a callback is to output an error message when the assertion fails.">assert</entry>
      <entry key="Model_Verification_Assertion_assertion"
             note="This is the keyword for the block with Block Description:- Assert that the input signal is non-zero.  The default behavior in the absence of a callback is to output an error message when the assertion fails."> assertion</entry>
      <entry key="Model_Verification_CheckDiscreteGradient_gradient"
             note="This is the hint for the block keyword with Block Description:- Assert that the absolute value of the difference between successive samples of a discrete signal is less than an upper bound.">gradient</entry>
      <entry key="Model_Verification_CheckDiscreteGradient_discretegradient"
             note="This is the hint for the block keyword with Block Description:- Assert that the absolute value of the difference between successive samples of a discrete signal is less than an upper bound."> discrete gradient</entry>
      <entry key="Model_Verification_CheckDiscreteGradient_checkdiscretegradient"
             note="This is the hint for the block keyword with Block Description:- Assert that the absolute value of the difference between successive samples of a discrete signal is less than an upper bound."> check discrete gradient</entry>
      <entry key="Model_Verification_CheckDynamicGap_gap"
             note="This is the hint for the block keyword with Block Description:- Assert that the input signal 'sig' is always less than the lower bound 'min' or greater than the upper bound 'max'. The first input is the upper-bound of the gap; the second input, the lower-bound; the third input, the test signal.">gap</entry>
      <entry key="Model_Verification_CheckDynamicGap_dynamicgap"
             note="This is the hint for the block keyword with Block Description:- Assert that the input signal 'sig' is always less than the lower bound 'min' or greater than the upper bound 'max'. The first input is the upper-bound of the gap; the second input, the lower-bound; the third input, the test signal."> dynamic gap</entry>
      <entry key="Model_Verification_CheckDynamicGap_checkdynamicgap"
             note="This is the hint for the block keyword with Block Description:- Assert that the input signal 'sig' is always less than the lower bound 'min' or greater than the upper bound 'max'. The first input is the upper-bound of the gap; the second input, the lower-bound; the third input, the test signal."> check dynamic gap</entry>
      <entry key="Model_Verification_CheckDynamicRange_range"
             note="This is the hint for the block keyword with Block Description:- Assert that one signal always lies between two other signals. The first input is the upper-bound signal; the second input, the lower-bound; the third input, the test signal.">range</entry>
      <entry key="Model_Verification_CheckDynamicRange_dynamicrange"
             note="This is the hint for the block keyword with Block Description:- Assert that one signal always lies between two other signals. The first input is the upper-bound signal; the second input, the lower-bound; the third input, the test signal."> dynamic range</entry>
      <entry key="Model_Verification_CheckDynamicRange_checkdynamicrange"
             note="This is the hint for the block keyword with Block Description:- Assert that one signal always lies between two other signals. The first input is the upper-bound signal; the second input, the lower-bound; the third input, the test signal."> check dynamic range</entry>
      <entry key="Model_Verification_CheckStaticGap_gap"
             note="This is the hint for the block keyword with Block Description:- Assert that the input signal is less than (or optionally equal to) a static lower bound or greater than (or optionally equal to) a static upper bound.">gap</entry>
      <entry key="Model_Verification_CheckStaticGap_staticgap"
             note="This is the hint for the block keyword with Block Description:- Assert that the input signal is less than (or optionally equal to) a static lower bound or greater than (or optionally equal to) a static upper bound."> static gap</entry>
      <entry key="Model_Verification_CheckStaticGap_checkstaticgap"
             note="This is the hint for the block keyword with Block Description:- Assert that the input signal is less than (or optionally equal to) a static lower bound or greater than (or optionally equal to) a static upper bound."> check static gap</entry>
      <entry key="Model_Verification_CheckStaticRange_range"
             note="This is the hint for the block keyword with Block Description:- Assert that the input signal lies between a static lower and upper bound or optionally equals either bound.">range</entry>
      <entry key="Model_Verification_CheckStaticRange_staticrange"
             note="This is the hint for the block keyword with Block Description:- Assert that the input signal lies between a static lower and upper bound or optionally equals either bound."> static range</entry>
      <entry key="Model_Verification_CheckStaticRange_checkstaticrange"
             note="This is the hint for the block keyword with Block Description:- Assert that the input signal lies between a static lower and upper bound or optionally equals either bound."> check static range</entry>
      <entry key="Model_Verification_CheckDynamicLowerBound_lowerbound"
             note="This is the hint for the block keyword with Block Description:- Assert that one signal is always less than another signal. The first input is the lower-bound signal. The second input is the test signal.">lower bound</entry>
      <entry key="Model_Verification_CheckDynamicLowerBound_checklowerbound"
             note="This is the hint for the block keyword with Block Description:- Assert that one signal is always less than another signal. The first input is the lower-bound signal. The second input is the test signal.">  check lower bound</entry>
      <entry key="Model_Verification_CheckDynamicLowerBound_checkdynamiclowerbound"
             note="This is the hint for the block keyword with Block Description:- Assert that one signal is always less than another signal. The first input is the lower-bound signal. The second input is the test signal.">  check dynamic  lower bound</entry>
      <entry key="Model_Verification_CheckDynamicUpperBound_upperbound"
             note="This is the hint for the block keyword with Block Description:- Assert that one signal is always greater than another signal. The first input is the upper-bound signal. The second input is the test signal.">upper bound</entry>
      <entry key="Model_Verification_CheckDynamicUpperBound_checkupperbound"
             note="This is the hint for the block keyword with Block Description:- Assert that one signal is always greater than another signal. The first input is the upper-bound signal. The second input is the test signal.">  check upper bound</entry>
      <entry key="Model_Verification_CheckDynamicUpperBound_checkdynamicupperbound"
             note="This is the hint for the block keyword with Block Description:- Assert that one signal is always greater than another signal. The first input is the upper-bound signal. The second input is the test signal.">  check dynamic  upper bound</entry>
      <entry key="Model_Verification_CheckInputResolution_inputresolution"
             note="This is the hint for the block keyword with Block Description:- Assert that the input signal has a specified resolution. If the resolution is a scalar, the input signal must be a multiple of the resolution within a 10e-3 tolerance. If the resolution is a vector, the input signal must equal an element of the resolution vector.">input  resolution</entry>
      <entry key="Model_Verification_CheckInputResolution_checkinputresolution"
             note="This is the hint for the block keyword with Block Description:- Assert that the input signal has a specified resolution. If the resolution is a scalar, the input signal must be a multiple of the resolution within a 10e-3 tolerance. If the resolution is a vector, the input signal must equal an element of the resolution vector."> check input  resolution</entry>
      <entry key="Model_Verification_CheckStaticLowerBound_lowerbound"
             note="This is the hint for the block keyword with Block Description:- Assert that the input signal is greater than (or optionally equal to) a static lower bound.">lower bound</entry>
      <entry key="Model_Verification_CheckStaticLowerBound_checklowerbound"
             note="This is the hint for the block keyword with Block Description:- Assert that the input signal is greater than (or optionally equal to) a static lower bound.">  check lower bound</entry>
      <entry key="Model_Verification_CheckStaticLowerBound_checkstaticlowerbound"
             note="This is the hint for the block keyword with Block Description:- Assert that the input signal is greater than (or optionally equal to) a static lower bound.">  check static  lower bound</entry>
      <entry key="Model_Verification_CheckStaticUpperBound_lowerbound"
             note="This is the hint for the block keyword with Block Description:- Assert that the input signal is less than (or optionally equal to) a static upper bound.">lower bound</entry>
      <entry key="Model_Verification_CheckStaticUpperBound_checkupperbound"
             note="This is the hint for the block keyword with Block Description:- Assert that the input signal is less than (or optionally equal to) a static upper bound.">  check upper bound</entry>
      <entry key="Model_Verification_CheckStaticUpperBound_checkstaticupperbound"
             note="This is the hint for the block keyword with Block Description:- Assert that the input signal is less than (or optionally equal to) a static upper bound.">  check static upper bound</entry>
      <entry key="Model_Wide_Utilities_BlockSupportTable_supporttable"
             note="This is the hint for the block keyword with Block Description:- Double-clicking the block will launch the Simulink Block Data Type Support Table."> support table</entry>
      <entry key="Model_Wide_Utilities_BlockSupportTable_blocksupporttable"
             note="This is the hint for the block keyword with Block Description:- Double-clicking the block will launch the Simulink Block Data Type Support Table.">  block support table</entry>
      <entry key="Model_Wide_Utilities_TimedBasedLinearization_linearization"
             note="This is the hint for the block keyword with Block Description:- Generate linear models in the base workspace at specific times.">linearization</entry>
      <entry key="Model_Wide_Utilities_TimedBasedLinearization_timedbasedlinearization"
             note="This is the hint for the block keyword with Block Description:- Generate linear models in the base workspace at specific times."> timed-based linearization</entry>
      <entry key="Model_Wide_Utilities_TriggerBasedLinearization_linearization"
             note="This is the hint for the block keyword with Block Description:- Generates linear models in the base workspace when triggered.">linearization</entry>
      <entry key="Model_Wide_Utilities_TriggerBasedLinearization_triggerbasedlinearization"
             note="This is the hint for the block keyword with Block Description:- Generates linear models in the base workspace when triggered."> trigger-based linearization</entry>
      <entry key="Ports___Subsystems_In1_in1"
             note="This is the keyword for the block with Block Description:- Provide an input port for a subsystem or model.For Triggered Subsystems, 'Latch input by delaying outside signal' produces the value of the subsystem input at the previous time step.For Function-Call Subsystems, turning 'On' the 'Latch input for feedback signals of function-call subsystem outputs' prevents the input value to this subsystem from changing during its execution.The other parameters can be used to explicitly specify the input signal attributes.">in1</entry>
      <entry key="Ports___Subsystems_In1_inport"
             note="This is the keyword for the block with Block Description:- Provide an input port for a subsystem or model.For Triggered Subsystems, 'Latch input by delaying outside signal' produces the value of the subsystem input at the previous time step.For Function-Call Subsystems, turning 'On' the 'Latch input for feedback signals of function-call subsystem outputs' prevents the input value to this subsystem from changing during its execution.The other parameters can be used to explicitly specify the input signal attributes."> inport</entry>
      <entry key="Ports___Subsystems_In1_input"
             note="This is the keyword for the block with Block Description:- Provide an input port for a subsystem or model.For Triggered Subsystems, 'Latch input by delaying outside signal' produces the value of the subsystem input at the previous time step.For Function-Call Subsystems, turning 'On' the 'Latch input for feedback signals of function-call subsystem outputs' prevents the input value to this subsystem from changing during its execution.The other parameters can be used to explicitly specify the input signal attributes."> input</entry>
      <entry key="Ports___Subsystems_Enable_enable"
             note="This is the keyword for the block with Block Description:- Place this block in a subsystem or at the root level of a model to create an enabled system. Placing this block at the root level of a model enables a Signal Attributes tab.">enable</entry>
      <entry key="Ports___Subsystems_Trigger_trigger"
             note="This is the keyword for the block with Block Description:- Place this block in a subsystem or at the root level of a model to create a triggered or function-call system.  If the trigger type is &#34;rising,&#34; &#34;falling,&#34; or &#34;either,&#34; placing this block at the root level of a model enables a Signal Attributes tab.">trigger</entry>
      <entry key="Ports___Subsystems_AtomicSubsystem_atomic"
             note="This is the hint for the block keyword with Block Description:- A subsystem block template containing an inport and outport block.">atomic</entry>
      <entry key="Ports___Subsystems_AtomicSubsystem_atomicsubsystem"
             note="This is the hint for the block keyword with Block Description:- A subsystem block template containing an inport and outport block."> atomic subsystem</entry>
      <entry key="Ports___Subsystems_CodeReuseSubsystem_codereuse"
             note="This is the hint for the block keyword with Block Description:- A subsystem block template containing an inport and outport block.">code reuse</entry>
      <entry key="Ports___Subsystems_CodeReuseSubsystem_codereusesubsystem"
             note="This is the hint for the block keyword with Block Description:- A subsystem block template containing an inport and outport block."> code reuse subsystem</entry>
      <entry key="Ports___Subsystems_ConfigurableSubsystem_configurable"
             note="This is the keyword for the block with Block Description:- Select the settings for the subsystem block. To enable parameters for code generation, select 'Treat as atomic unit'.">configurable</entry>
      <entry key="Ports___Subsystems_ConfigurableSubsystem_configurablesubsystem"
             note="This is the keyword for the block with Block Description:- Select the settings for the subsystem block. To enable parameters for code generation, select 'Treat as atomic unit'.">  configurable subsystem</entry>
      <entry key="Ports___Subsystems_EnabledSubsystem_eenacle"
             note="This is the hint for the block keyword with Block Description:- A subsystem block template containing an enable port, inport and outport block.">enable</entry>
      <entry key="Ports___Subsystems_EnabledSubsystem_enabledsubsystem"
             note="This is the hint for the block keyword with Block Description:- A subsystem block template containing an enable port, inport and outport block."> enabled subsystem</entry>
      <entry key="Ports___Subsystems_EnabledandTriggeredSubsystem_enable"
             note="This is the hint for the block keyword with Block Description:- A subsystem block template containing an enable port, trigger port, inport and outport block.">enable</entry>
      <entry key="Ports___Subsystems_EnabledandTriggeredSubsystem_trigger"
             note="This is the hint for the block keyword with Block Description:- A subsystem block template containing an enable port, trigger port, inport and outport block."> trigger</entry>
      <entry key="Ports___Subsystems_EnabledandTriggeredSubsystem_enableandtrigger"
             note="This is the hint for the block keyword with Block Description:- A subsystem block template containing an enable port, trigger port, inport and outport block."> enable and trigger</entry>
      <entry key="Ports___Subsystems_EnabledandTriggeredSubsystem_enabledandtriggeredsubsystem"
             note="This is the hint for the block keyword with Block Description:- A subsystem block template containing an enable port, trigger port, inport and outport block."> enabled and triggered subsystem</entry>
      <entry key="Ports___Subsystems_ForEachSubsystem_foreach"
             note="This is the hint for the block keyword with Block Description:- A subsystem block template containing a for each, inport and outport block.">for each</entry>
      <entry key="Ports___Subsystems_ForEachSubsystem_foreachsubsystem"
             note="This is the hint for the block keyword with Block Description:- A subsystem block template containing a for each, inport and outport block.">  for each subsystem</entry>
      <entry key="Ports___Subsystems_ForIteratorSubsystem_iterator"
             note="This is the hint for the block keyword with Block Description:- A subsystem block template containing a for iterator, inport and outport block."> iterator</entry>
      <entry key="Ports___Subsystems_ForIteratorSubsystem_foriteratorsubsystem"
             note="This is the hint for the block keyword with Block Description:- A subsystem block template containing a for iterator, inport and outport block."> for iterator subsystem</entry>
      <entry key="Ports___Subsystems_FunctionCallFeedbackLatch_functioncall"
             note="This is the keyword for the block with Block Description:- Break a feedback loop involving data signals between function-call blocks.For loops involving parent and child function-call blocks (i.e., where the initiator of the child function-call block is inside the parent function-call block), place this block on the feedback signal from the child to the parent in order to ensure that the signal's value does not change during the execution of the child.For loops involving function-call blocks connected to branches of the same function-call signal, this block latches the signal at the input of the destination function-call block, and thereby allows it to execute prior to the source function-call block. Such latching results in the destination block reading a delayed signal from the previous execution of the source function-call block."> function-call</entry>
      <entry key="Ports___Subsystems_FunctionCallFeedbackLatch_feedback"
             note="This is the keyword for the block with Block Description:- Break a feedback loop involving data signals between function-call blocks.For loops involving parent and child function-call blocks (i.e., where the initiator of the child function-call block is inside the parent function-call block), place this block on the feedback signal from the child to the parent in order to ensure that the signal's value does not change during the execution of the child.For loops involving function-call blocks connected to branches of the same function-call signal, this block latches the signal at the input of the destination function-call block, and thereby allows it to execute prior to the source function-call block. Such latching results in the destination block reading a delayed signal from the previous execution of the source function-call block."> feedback</entry>
      <entry key="Ports___Subsystems_FunctionCallFeedbackLatch_functioncallfeedbacklatch"
             note="This is the keyword for the block with Block Description:- Break a feedback loop involving data signals between function-call blocks.For loops involving parent and child function-call blocks (i.e., where the initiator of the child function-call block is inside the parent function-call block), place this block on the feedback signal from the child to the parent in order to ensure that the signal's value does not change during the execution of the child.For loops involving function-call blocks connected to branches of the same function-call signal, this block latches the signal at the input of the destination function-call block, and thereby allows it to execute prior to the source function-call block. Such latching results in the destination block reading a delayed signal from the previous execution of the source function-call block."> function-call feedback latch</entry>
      <entry key="Ports___Subsystems_FunctionCallGenerator_functioncall"
             note="This is the hint for the block keyword with Block Description:- Execute function-call subsystems, models, or Stateflow charts that are connected to this block at a specified rate. To execute multiple function-call blocks in prescribed order, use this block in conjunction with a Function-Call Split block. The 'Sample time' parameter specifies the rate at which this block executes each function-call block connected to it. To iteratively execute each function-call block connected to this block multiple times at each time step,  use the 'Number of iterations' parameter."> function-call</entry>
      <entry key="Ports___Subsystems_FunctionCallGenerator_generator"
             note="This is the hint for the block keyword with Block Description:- Execute function-call subsystems, models, or Stateflow charts that are connected to this block at a specified rate. To execute multiple function-call blocks in prescribed order, use this block in conjunction with a Function-Call Split block. The 'Sample time' parameter specifies the rate at which this block executes each function-call block connected to it. To iteratively execute each function-call block connected to this block multiple times at each time step,  use the 'Number of iterations' parameter."> generator</entry>
      <entry key="Ports___Subsystems_FunctionCallGenerator_functioncallgenerator"
             note="This is the hint for the block keyword with Block Description:- Execute function-call subsystems, models, or Stateflow charts that are connected to this block at a specified rate. To execute multiple function-call blocks in prescribed order, use this block in conjunction with a Function-Call Split block. The 'Sample time' parameter specifies the rate at which this block executes each function-call block connected to it. To iteratively execute each function-call block connected to this block multiple times at each time step,  use the 'Number of iterations' parameter.">  function-call generator</entry>
      <entry key="Ports___Subsystems_FunctionCallSplit_functioncall"
             note="This is the keyword for the block with Block Description:- Provides a junction from which a function-call signal can be branched."> function-call</entry>
      <entry key="Ports___Subsystems_FunctionCallSplit_split"
             note="This is the keyword for the block with Block Description:- Provides a junction from which a function-call signal can be branched."> split</entry>
      <entry key="Ports___Subsystems_FunctionCallSplit_functioncallsplit"
             note="This is the keyword for the block with Block Description:- Provides a junction from which a function-call signal can be branched.">  function-call split</entry>
      <entry key="Ports___Subsystems_FunctionCallSubsystem_functioncall"
             note="This is the hint for the block keyword with Block Description:- A subsystem block template containing a function-call trigger port, inport and outport block."> function-call</entry>
      <entry key="Ports___Subsystems_FunctionCallSubsystem_subsystem"
             note="This is the hint for the block keyword with Block Description:- A subsystem block template containing a function-call trigger port, inport and outport block."> subsystem</entry>
      <entry key="Ports___Subsystems_FunctionCallSubsystem_functioncallsubsystem"
             note="This is the hint for the block keyword with Block Description:- A subsystem block template containing a function-call trigger port, inport and outport block.">  function-call subsystem</entry>
      <entry key="Ports___Subsystems_If_if"
             note="This is the keyword for the block with Block Description:- IF expression    Run the Action Subsystem connected to 1st output portELSEIF expression    Run the Action Subsystem connected to 2nd output portELSE    Run the Action Subsystem connected to last output portENDThe number of Elseif output ports in the block is equal to thenumber of comma-separated Elseif expressions entered in the dialog.The If and Elseif expressions can use these MATLAB operators:    &lt;, &lt;=, ==, ~=, &gt;, &gt;=, &amp;, |, ~, (  ), unary-minuson the input port signals named u1, u2, u3, etc.">if</entry>
      <entry key="Ports___Subsystems_IfActionSubsystem_if"
             note="This is the hint for the block keyword with Block Description:- A subsystem block template containing an action port, inport and outport block.">if</entry>
      <entry key="Ports___Subsystems_IfActionSubsystem_ifaction"
             note="This is the hint for the block keyword with Block Description:- A subsystem block template containing an action port, inport and outport block."> if action</entry>
      <entry key="Ports___Subsystems_IfActionSubsystem_IfActionSubsystem"
             note="This is the hint for the block keyword with Block Description:- A subsystem block template containing an action port, inport and outport block."> If Action Subsystem</entry>
      <entry key="Ports___Subsystems_Model_model"
             note="This is the keyword for the block with Block Description:- Reference the specified model.">model</entry>
      <entry key="Ports___Subsystems_Model_reference"
             note="This is the keyword for the block with Block Description:- Reference the specified model.">reference</entry>
      <entry key="Ports___Subsystems_Model_model_reference"
             note="This is the keyword for the block with Block Description:- Reference the specified model.">model reference</entry>
      <entry key="Ports___Subsystems_Model_referenced_model"
             note="This is the keyword for the block with Block Description:- Reference the specified model.">referenced model</entry>
      <entry key="Ports___Subsystems_Model_submodel"
             note="This is the keyword for the block with Block Description:- Reference the specified model.">submodel</entry>
      <entry key="Ports___Subsystems_Model_child_model"
             note="This is the keyword for the block with Block Description:- Reference the specified model.">child model</entry>
      <entry key="Ports___Subsystems_Model_mdlref"
             note="This is the keyword for the block with Block Description:- Reference the specified model.">mdlref</entry>
      <entry key="Ports___Subsystems_Model_modelref"
             note="This is the keyword for the block with Block Description:- Reference the specified model.">modelref</entry>
      <entry key="Ports___Subsystems_ResettableSubsystem_reset"
             note="This is the hint for the block keyword with Block Description:- A subsystem block template containing a reset port, inport and outport block.">reset</entry>
      <entry key="Ports___Subsystems_ResettableSubsystem_resetsubsystem"
             note="This is the hint for the block keyword with Block Description:- A subsystem block template containing a reset port, inport and outport block."> reset subsystem</entry>
      <entry key="Ports___Subsystems_ResettableSubsystem_resettablesubsystem"
             note="This is the hint for the block keyword with Block Description:- A subsystem block template containing a reset port, inport and outport block."> resettable subsystem</entry>
      <entry key="Ports___Subsystems_Subsystem_subsystem"
             note="This is the hint for the block keyword with Block Description:- A subsystem block template containing an inport and outport block.">subsystem</entry>
      <entry key="Ports___Subsystems_SubsystemExamples_subsystem"
             note="This is the hint for the block keyword with Block Description:- These are examples of how to use the different types of subsystems.">subsystem</entry>
      <entry key="Ports___Subsystems_TriggeredSubsystem_trigger"
             note="This is the hint for the block keyword with Block Description:- A subsystem block template containing a trigger port, inport and outport block.">trigger</entry>
      <entry key="Ports___Subsystems_MessageTriggeredSubsystem_trigger"
             note="This is the hint for the block keyword with Block Description:- A subsystem block template containing a trigger port and outport block.">trigger</entry>
      <entry key="Ports___Subsystems_WhileIteratorSubsystem_while"
             note="This is the hint for the block keyword with Block Description:- A subsystem block template containing a while iterator, inport and outport block.">while</entry>
      <entry key="Ports___Subsystems_Out1_outport"
             note="This is the keyword for the block with Block Description:- Provide an output port for a subsystem or model.  The 'Output when disabled' and 'Initial output' parameters only apply to conditionally executed subsystems. When a conditionally executed subsystem is disabled, the output is either held at its last value or set to the 'Initial output'.">outport</entry>
      <entry key="Ports___Subsystems_Out1_output"
             note="This is the keyword for the block with Block Description:- Provide an output port for a subsystem or model.  The 'Output when disabled' and 'Initial output' parameters only apply to conditionally executed subsystems. When a conditionally executed subsystem is disabled, the output is either held at its last value or set to the 'Initial output'."> output</entry>
      <entry key="Signal_Attributes_DataTypeConversionInherited_Datatype"
             note="This is the hint for the block keyword with Block Description:- Convert the second input to the data type and scaling of the first input. The conversion has two possible goals. One goal is to have the Real World Values of the input and the output be equal. The other goal is to have the Stored Integer Values of the input and the output be equal. Overflows and quantization errors can prevent the goal from being fully achieved.">Datatype</entry>
      <entry key="Signal_Attributes_DataTypeConversionInherited_DTC"
             note="This is the hint for the block keyword with Block Description:- Convert the second input to the data type and scaling of the first input. The conversion has two possible goals. One goal is to have the Real World Values of the input and the output be equal. The other goal is to have the Stored Integer Values of the input and the output be equal. Overflows and quantization errors can prevent the goal from being fully achieved."> DTC</entry>
      <entry key="Signal_Attributes_DataTypeConversionInherited_Conversion"
             note="This is the hint for the block keyword with Block Description:- Convert the second input to the data type and scaling of the first input. The conversion has two possible goals. One goal is to have the Real World Values of the input and the output be equal. The other goal is to have the Stored Integer Values of the input and the output be equal. Overflows and quantization errors can prevent the goal from being fully achieved."> Conversion</entry>
      <entry key="Signal_Attributes_DataTypeConversionInherited_Convert"
             note="This is the hint for the block keyword with Block Description:- Convert the second input to the data type and scaling of the first input. The conversion has two possible goals. One goal is to have the Real World Values of the input and the output be equal. The other goal is to have the Stored Integer Values of the input and the output be equal. Overflows and quantization errors can prevent the goal from being fully achieved."> Convert</entry>
      <entry key="Signal_Attributes_DataTypeConversionInherited_Inherited"
             note="This is the hint for the block keyword with Block Description:- Convert the second input to the data type and scaling of the first input. The conversion has two possible goals. One goal is to have the Real World Values of the input and the output be equal. The other goal is to have the Stored Integer Values of the input and the output be equal. Overflows and quantization errors can prevent the goal from being fully achieved.">  Inherited</entry>
      <entry key="Signal_Attributes_DataTypeDuplicate_Datatype"
             note="This is the keyword for the block with Block Description:- Force all inputs to have the exact same data type.">Datatype</entry>
      <entry key="Signal_Attributes_DataTypeDuplicate_DTD"
             note="This is the keyword for the block with Block Description:- Force all inputs to have the exact same data type."> DTD</entry>
      <entry key="Signal_Attributes_DataTypeDuplicate_Duplicate"
             note="This is the keyword for the block with Block Description:- Force all inputs to have the exact same data type."> Duplicate</entry>
      <entry key="Signal_Attributes_DataTypeDuplicate_Same"
             note="This is the keyword for the block with Block Description:- Force all inputs to have the exact same data type."> Same</entry>
      <entry key="Signal_Attributes_DataTypePropagation_Datatype"
             note="This is the hint for the block keyword with Block Description:- Set the Data Type and Scaling of the propagated signal based on information from the reference signals.Notes:1) Items closer to the top of the dialog have higher priority/precedence.a) Reference inputs of type double have priority over all others.b) Singles have priority over integer and fixed point data types.c) Multiplicative adjustments are carried out before additive adjustments.d) Number-of-Bits is determined before the precision or positive-range is inherited from the reference signals.2) PosRange is one bit higher than the exact maximum positive range of the signal.3) The computed Number-of-Bits is promoted to the smallest allowable value that is greater than or equal. If none exists, then error.">Datatype</entry>
      <entry key="Signal_Attributes_DataTypePropagation_Propagation"
             note="This is the hint for the block keyword with Block Description:- Set the Data Type and Scaling of the propagated signal based on information from the reference signals.Notes:1) Items closer to the top of the dialog have higher priority/precedence.a) Reference inputs of type double have priority over all others.b) Singles have priority over integer and fixed point data types.c) Multiplicative adjustments are carried out before additive adjustments.d) Number-of-Bits is determined before the precision or positive-range is inherited from the reference signals.2) PosRange is one bit higher than the exact maximum positive range of the signal.3) The computed Number-of-Bits is promoted to the smallest allowable value that is greater than or equal. If none exists, then error."> Propagation</entry>
      <entry key="Signal_Attributes_DataTypePropagation_Propagate"
             note="This is the hint for the block keyword with Block Description:- Set the Data Type and Scaling of the propagated signal based on information from the reference signals.Notes:1) Items closer to the top of the dialog have higher priority/precedence.a) Reference inputs of type double have priority over all others.b) Singles have priority over integer and fixed point data types.c) Multiplicative adjustments are carried out before additive adjustments.d) Number-of-Bits is determined before the precision or positive-range is inherited from the reference signals.2) PosRange is one bit higher than the exact maximum positive range of the signal.3) The computed Number-of-Bits is promoted to the smallest allowable value that is greater than or equal. If none exists, then error."> Propagate</entry>
      <entry key="Signal_Attributes_DataTypePropagationExamples_Datatype"
             note="This is the hint for the block keyword with Block Description:- Opens a model containing data type propagation examples.">Datatype</entry>
      <entry key="Signal_Attributes_DataTypePropagationExamples_Propagation"
             note="This is the hint for the block keyword with Block Description:- Opens a model containing data type propagation examples."> Propagation</entry>
      <entry key="Signal_Attributes_DataTypePropagationExamples_Propagate"
             note="This is the hint for the block keyword with Block Description:- Opens a model containing data type propagation examples."> Propagate</entry>
      <entry key="Signal_Attributes_DataTypeScalingStrip_Datatype"
             note="This is the hint for the block keyword with Block Description:- This block strips the scaling off a fixed point signal. It maps the input data type to the smallest built-in data type that has sufficient bits to hold the input. The stored Integer Value of the input will be the value of the output. The output always has nominal scaling (slope = 1.0 and bias = 0.0), so the output does not have a distinction between Real World Value and Stored Integer Value.">Datatype</entry>
      <entry key="Signal_Attributes_DataTypeScalingStrip_Scaling"
             note="This is the hint for the block keyword with Block Description:- This block strips the scaling off a fixed point signal. It maps the input data type to the smallest built-in data type that has sufficient bits to hold the input. The stored Integer Value of the input will be the value of the output. The output always has nominal scaling (slope = 1.0 and bias = 0.0), so the output does not have a distinction between Real World Value and Stored Integer Value."> Scaling</entry>
      <entry key="Signal_Attributes_DataTypeScalingStrip_Strip"
             note="This is the hint for the block keyword with Block Description:- This block strips the scaling off a fixed point signal. It maps the input data type to the smallest built-in data type that has sufficient bits to hold the input. The stored Integer Value of the input will be the value of the output. The output always has nominal scaling (slope = 1.0 and bias = 0.0), so the output does not have a distinction between Real World Value and Stored Integer Value."> Strip</entry>
      <entry key="Signal_Attributes_DataTypeConversion_Datatype"
             note="This is the keyword for the block with Block Description:- Convert the input to the data type and scaling of the output. The conversion has two possible goals. One goal is to have the Real World Values of the input and the output be equal.  The other goal is to have the Stored Integer Values of the input and the output be equal.  Overflows and quantization errors can prevent the goal from being fully achieved.">Datatype</entry>
      <entry key="Signal_Attributes_DataTypeConversion_Conversion"
             note="This is the keyword for the block with Block Description:- Convert the input to the data type and scaling of the output. The conversion has two possible goals. One goal is to have the Real World Values of the input and the output be equal.  The other goal is to have the Stored Integer Values of the input and the output be equal.  Overflows and quantization errors can prevent the goal from being fully achieved."> Conversion</entry>
      <entry key="Signal_Attributes_DataTypeConversion_Convert"
             note="This is the keyword for the block with Block Description:- Convert the input to the data type and scaling of the output. The conversion has two possible goals. One goal is to have the Real World Values of the input and the output be equal.  The other goal is to have the Stored Integer Values of the input and the output be equal.  Overflows and quantization errors can prevent the goal from being fully achieved."> Convert</entry>
      <entry key="Signal_Attributes_DataTypeConversion_Casting"
             note="This is the keyword for the block with Block Description:- Convert the input to the data type and scaling of the output. The conversion has two possible goals. One goal is to have the Real World Values of the input and the output be equal.  The other goal is to have the Stored Integer Values of the input and the output be equal.  Overflows and quantization errors can prevent the goal from being fully achieved."> Casting</entry>
      <entry key="Signal_Attributes_DataTypeConversion_Cast"
             note="This is the keyword for the block with Block Description:- Convert the input to the data type and scaling of the output. The conversion has two possible goals. One goal is to have the Real World Values of the input and the output be equal.  The other goal is to have the Stored Integer Values of the input and the output be equal.  Overflows and quantization errors can prevent the goal from being fully achieved."> Cast</entry>
      <entry key="Signal_Attributes_IC_initial"
             note="This is the keyword for the block with Block Description:- Initial condition for signal.">initial</entry>
      <entry key="Signal_Attributes_IC_init"
             note="This is the keyword for the block with Block Description:- Initial condition for signal."> init</entry>
      <entry key="Signal_Attributes_IC_conditon"
             note="This is the keyword for the block with Block Description:- Initial condition for signal."> condition</entry>
      <entry key="Signal_Attributes_Probe_Probe"
             note="This is the keyword for the block with Block Description:- Probe a line for its width, sample time, and dimensions. Detect if it is a complex signal.">Probe</entry>
      <entry key="Signal_Attributes_SignalConversion_signal"
             note="This is the keyword for the block with Block Description:- Convert a signal to a new type without altering signal values.a) If the incoming signal is not a bus, the 'Signal copy' option creates a contiguous segment of memory to store a copy of an input signal. If the incoming signal is a bus, the 'Signal copy' option outputs a copy of the incoming bus. b) The 'Virtual bus' option converts the input bus to a virtual bus.c) The 'Nonvirtual bus' option converts the input bus to a nonvirtual bus.">signal</entry>
      <entry key="Signal_Attributes_SignalConversion_converstion"
             note="This is the keyword for the block with Block Description:- Convert a signal to a new type without altering signal values.a) If the incoming signal is not a bus, the 'Signal copy' option creates a contiguous segment of memory to store a copy of an input signal. If the incoming signal is a bus, the 'Signal copy' option outputs a copy of the incoming bus. b) The 'Virtual bus' option converts the input bus to a virtual bus.c) The 'Nonvirtual bus' option converts the input bus to a nonvirtual bus."> conversion</entry>
      <entry key="Signal_Attributes_SignalConversion_cast"
             note="This is the keyword for the block with Block Description:- Convert a signal to a new type without altering signal values.a) If the incoming signal is not a bus, the 'Signal copy' option creates a contiguous segment of memory to store a copy of an input signal. If the incoming signal is a bus, the 'Signal copy' option outputs a copy of the incoming bus. b) The 'Virtual bus' option converts the input bus to a virtual bus.c) The 'Nonvirtual bus' option converts the input bus to a nonvirtual bus."> cast</entry>
      <entry key="Signal_Attributes_SignalConversion_datatype"
             note="This is the keyword for the block with Block Description:- Convert a signal to a new type without altering signal values.a) If the incoming signal is not a bus, the 'Signal copy' option creates a contiguous segment of memory to store a copy of an input signal. If the incoming signal is a bus, the 'Signal copy' option outputs a copy of the incoming bus. b) The 'Virtual bus' option converts the input bus to a virtual bus.c) The 'Nonvirtual bus' option converts the input bus to a nonvirtual bus."> datatype</entry>
      <entry key="Signal_Attributes_SignalSpecification_attributes"
             note="This is the keyword for the block with Block Description:- Specify attributes of a signal line.">attributes</entry>
      <entry key="Signal_Attributes_SignalSpecification_signal"
             note="This is the keyword for the block with Block Description:- Specify attributes of a signal line."> signal</entry>
      <entry key="Signal_Attributes_SignalSpecification_specify"
             note="This is the keyword for the block with Block Description:- Specify attributes of a signal line."> specify</entry>
      <entry key="Signal_Attributes_SignalSpecification_specification"
             note="This is the keyword for the block with Block Description:- Specify attributes of a signal line."> specification</entry>
      <entry key="Signal_Attributes_SignalSpecification_spec"
             note="This is the keyword for the block with Block Description:- Specify attributes of a signal line."> spec</entry>
      <entry key="Signal_Attributes_SignalSpecification_datatype"
             note="This is the keyword for the block with Block Description:- Specify attributes of a signal line."> datatype</entry>
      <entry key="Signal_Attributes_WeightedSampleTime_sample"
             note="This is the keyword for the block with Block Description:- Add, subtract, multiply or divide the input signal by weighted sample time or just output weighted sample time or weighted sample rate.">sample</entry>
      <entry key="Signal_Attributes_WeightedSampleTime_sampletime"
             note="This is the keyword for the block with Block Description:- Add, subtract, multiply or divide the input signal by weighted sample time or just output weighted sample time or weighted sample rate."> sample time</entry>
      <entry key="Signal_Attributes_WeightedSampleTime_weighted"
             note="This is the keyword for the block with Block Description:- Add, subtract, multiply or divide the input signal by weighted sample time or just output weighted sample time or weighted sample rate."> weighted</entry>
      <entry key="Signal_Attributes_WeightedSampleTime_math"
             note="This is the keyword for the block with Block Description:- Add, subtract, multiply or divide the input signal by weighted sample time or just output weighted sample time or weighted sample rate."> math </entry>
      <entry key="Signal_Attributes_Width_width"
             note="This is the keyword for the block with Block Description:- Output the width of the input signal, using the specified output data type.">width</entry>
      <entry key="Signal_Routing_Demux_Demux"
             note="This is the keyword for the block with Block Description:- Split vector signals into scalars or smaller vectors. Check 'Bus Selection Mode' to split bus signals.">Demux</entry>
      <entry key="Signal_Routing_Demux_Demultiplexer"
             note="This is the keyword for the block with Block Description:- Split vector signals into scalars or smaller vectors. Check 'Bus Selection Mode' to split bus signals.">Demultiplexer</entry>
      <entry key="Signal_Routing_From_From"
             note="This is the keyword for the block with Block Description:- Receive signals from the Goto block with the specified tag.  If the tag is defined as 'scoped' in the Goto block, then a Goto Tag Visibility block must be used to define the visibility of the tag.  After 'Update Diagram', the block icon displays the selected tag name  (local tags are enclosed in brackets, [], and scoped tag names are enclosed in braces, {}).">From</entry>
      <entry key="Signal_Routing_Goto_Goto"
             note="This is the keyword for the block with Block Description:- Send signals to From blocks that have the specified tag.  If tag visibility is 'scoped', then a Goto Tag Visibility block must be used to define the visibility of the tag.  The block icon displays the selected tag name (local tags are enclosed in brackets, [], and scoped tag names are enclosed in braces, {}).">Goto</entry>
      <entry key="Signal_Routing_IndexVector_switch"
             note="This is the keyword for the block with Block Description:- Pass through the input signals corresponding to the truncated value of the first input. The inputs are numbered top to bottom (or left to right). The first input port is the control port. The other input ports are data ports.">switch</entry>
      <entry key="Signal_Routing_IndexVector_mpswitch"
             note="This is the keyword for the block with Block Description:- Pass through the input signals corresponding to the truncated value of the first input. The inputs are numbered top to bottom (or left to right). The first input port is the control port. The other input ports are data ports."> mpswitch</entry>
      <entry key="Signal_Routing_ManualSwitch_ManualSwitch"
             note="This is the keyword for the block with Block Description:- Output toggles between two inputs by double-clicking on the block.">Manual Switch</entry>
      <entry key="Signal_Routing_ManualSwitch_Switch"
             note="This is the keyword for the block with Block Description:- Output toggles between two inputs by double-clicking on the block."> Switch</entry>
      <entry key="Signal_Routing_Merge_Merge"
             note="This is the keyword for the block with Block Description:- Merge the input signals into a single output signal whose initial value is specified by the 'Initial output' parameter. If 'Initial output' is empty, the Merge block outputs the initial output of one of its driving blocks.">Merge</entry>
      <entry key="Signal_Routing_MultiportSwitch_MultiPortSwitch"
             note="This is the keyword for the block with Block Description:- Pass through the input signals corresponding to the truncated value of the first input. The inputs are numbered top to bottom (or left to right). The first input port is the control port. The other input ports are data ports.">MultiPortSwitch</entry>
      <entry key="Signal_Routing_MultiportSwitch_Switch"
             note="This is the keyword for the block with Block Description:- Pass through the input signals corresponding to the truncated value of the first input. The inputs are numbered top to bottom (or left to right). The first input port is the control port. The other input ports are data ports."> Switch</entry>
      <entry key="Signal_Routing_Mux_Multiplexer"
             note="This is the keyword for the block with Block Description:- Multiplex scalar or vector signals.">Multiplexer</entry>
      <entry key="Signal_Routing_Mux_dataselector"
             note="This is the keyword for the block with Block Description:- Multiplex scalar or vector signals."> data selector</entry>
      <entry key="Signal_Routing_Selector_Selector"
             note="This is the keyword for the block with Block Description:- Select or reorder specified elements of a multidimensional input signal. The index to each element is identified from an input port or this dialog. You can choose the indexing method for each dimension by using the &#34;Index Option&#34; parameter.">Selector</entry>
      <entry key="Signal_Routing_Selector_signalselector"
             note="This is the keyword for the block with Block Description:- Select or reorder specified elements of a multidimensional input signal. The index to each element is identified from an input port or this dialog. You can choose the indexing method for each dimension by using the &#34;Index Option&#34; parameter."> signal selector</entry>
      <entry key="Signal_Routing_Switch_switch"
             note="This is the keyword for the block with Block Description:- Pass through input 1 when input 2 satisfies the selected criterion; otherwise, pass through input 3. The inputs are numbered top to bottom (or left to right). The first and third input ports are data ports, and the second input port is the control port. The criteria for control port 2 are u2 &gt;= Threshold, u2 &gt; Threshold or u2 ~= 0.">switch</entry>
      <entry key="Signal_Routing_VectorConcatenate_Concatenate"
             note="This is the keyword for the block with Block Description:- Concatenate input signals of the same data type to create a contiguous output signal. Select vector or multidimensional array mode.In vector mode, all input signals must be either vectors or one-row [1xM] matrices or one-column [Mx1] matrices or a combination of vectors and either one-row matrices or one-column matrices. The output is a vector if all inputs are vectors. The output is a one-row or one-column matrix if any of the inputs are one-row or one-column matrices, respectively.In multidimensional mode, use 'Concatenate dimension' to specify the output dimension along which to concatenate the input arrays. For example, to concatenate the input arrays vertically or horizontally, specify 1 or 2, respectively, as the concatenate dimensions.">Concatenate</entry>
      <entry key="Signal_Routing_VectorConcatenate_Concat"
             note="This is the keyword for the block with Block Description:- Concatenate input signals of the same data type to create a contiguous output signal. Select vector or multidimensional array mode.In vector mode, all input signals must be either vectors or one-row [1xM] matrices or one-column [Mx1] matrices or a combination of vectors and either one-row matrices or one-column matrices. The output is a vector if all inputs are vectors. The output is a one-row or one-column matrix if any of the inputs are one-row or one-column matrices, respectively.In multidimensional mode, use 'Concatenate dimension' to specify the output dimension along which to concatenate the input arrays. For example, to concatenate the input arrays vertically or horizontally, specify 1 or 2, respectively, as the concatenate dimensions."> Concat</entry>
      <entry key="Signal_Routing_VectorConcatenate_vectorConcatenate"
             note="This is the keyword for the block with Block Description:- Concatenate input signals of the same data type to create a contiguous output signal. Select vector or multidimensional array mode.In vector mode, all input signals must be either vectors or one-row [1xM] matrices or one-column [Mx1] matrices or a combination of vectors and either one-row matrices or one-column matrices. The output is a vector if all inputs are vectors. The output is a one-row or one-column matrix if any of the inputs are one-row or one-column matrices, respectively.In multidimensional mode, use 'Concatenate dimension' to specify the output dimension along which to concatenate the input arrays. For example, to concatenate the input arrays vertically or horizontally, specify 1 or 2, respectively, as the concatenate dimensions."> vector Concatenate</entry>
      <entry key="Sinks_Display_Delay"
             note="This is the keyword for the block with Block Description:- Display input values. If the incoming signal is of type string, the 'Numeric display format' parameter selection does not affect the display of the string.">Delay</entry>
      <entry key="Sinks_FloatingScope_Floatingscope"
             note="This is the keyword for the block with Block Description:- Displays input signals with respect to simulation time">Floating scope</entry>
      <entry key="Sinks_Scope_Scope"
             note="This is the keyword for the block with Block Description:- Displays input signals with respect to simulation time">Scope</entry>
      <entry key="Sinks_Scope_oscilloscope"
             note="This is the keyword for the block with Block Description:- Displays input signals with respect to simulation time"> oscilloscope</entry>
      <entry key="Sinks_StopSimulation_Stop"
             note="This is the keyword for the block with Block Description:- Stop simulation when input is nonzero.">Stop</entry>
      <entry key="Sinks_Terminator_Terminator"
             note="This is the keyword for the block with Block Description:- Used to &#34;terminate&#34; output signals.  (Prevents warnings about unconnected output ports.)">Terminator</entry>
      <entry key="Sinks_Terminator_End"
             note="This is the keyword for the block with Block Description:- Used to &#34;terminate&#34; output signals.  (Prevents warnings about unconnected output ports.)"> End</entry>
      <entry key="Sinks_ToFile_ToFile"
             note="This is the keyword for the block with Block Description:- Incrementally write data into a variable in the specified MAT-file.The variable may be created as a MATLAB timeseries, an array, or a MATLAB structure.MATLAB timeseries may be used for any data type, complexity, or dimensions. Logging a bus signal produces a MATLAB structure that matches the bus hierarchy. Each leaf of the structure is a MATLAB timeseries object.Use Array format only for vector, double, noncomplex inputs. Each column of the array has a time stamp in the first row and a vector containing the corresponding data sample in the subsequent rows.">ToFile</entry>
      <entry key="Sinks_ToFile_File"
             note="This is the keyword for the block with Block Description:- Incrementally write data into a variable in the specified MAT-file.The variable may be created as a MATLAB timeseries, an array, or a MATLAB structure.MATLAB timeseries may be used for any data type, complexity, or dimensions. Logging a bus signal produces a MATLAB structure that matches the bus hierarchy. Each leaf of the structure is a MATLAB timeseries object.Use Array format only for vector, double, noncomplex inputs. Each column of the array has a time stamp in the first row and a vector containing the corresponding data sample in the subsequent rows."> File</entry>
      <entry key="Sinks_ToFile_SaveToFile"
             note="This is the keyword for the block with Block Description:- Incrementally write data into a variable in the specified MAT-file.The variable may be created as a MATLAB timeseries, an array, or a MATLAB structure.MATLAB timeseries may be used for any data type, complexity, or dimensions. Logging a bus signal produces a MATLAB structure that matches the bus hierarchy. Each leaf of the structure is a MATLAB timeseries object.Use Array format only for vector, double, noncomplex inputs. Each column of the array has a time stamp in the first row and a vector containing the corresponding data sample in the subsequent rows."> SaveToFile</entry>
      <entry key="Sinks_ToWorkspace_ToWorkspace"
             note="This is the keyword for the block with Block Description:- Write input to specified timeseries, array, or structure in a workspace. For menu-based simulation, data is written in the MATLAB base workspace. Data is not available until the simulation is stopped or paused.To log a bus signal, use &#34;Timeseries&#34; save format.">ToWorkspace</entry>
      <entry key="Sinks_ToWorkspace_ToWS"
             note="This is the keyword for the block with Block Description:- Write input to specified timeseries, array, or structure in a workspace. For menu-based simulation, data is written in the MATLAB base workspace. Data is not available until the simulation is stopped or paused.To log a bus signal, use &#34;Timeseries&#34; save format."> ToWS</entry>
      <entry key="Sinks_ToWorkspace_SaveToWorkspace"
             note="This is the keyword for the block with Block Description:- Write input to specified timeseries, array, or structure in a workspace. For menu-based simulation, data is written in the MATLAB base workspace. Data is not available until the simulation is stopped or paused.To log a bus signal, use &#34;Timeseries&#34; save format.">SaveToWorkspace</entry>
      <entry key="Sinks_Out1_Outport"
             note="This is the keyword for the block with Block Description:- Provide an output port for a subsystem or model.  The 'Output when disabled' and 'Initial output' parameters only apply to conditionally executed subsystems. When a conditionally executed subsystem is disabled, the output is either held at its last value or set to the 'Initial output'.">Outport</entry>
      <entry key="Sinks_Out1_output"
             note="This is the keyword for the block with Block Description:- Provide an output port for a subsystem or model.  The 'Output when disabled' and 'Initial output' parameters only apply to conditionally executed subsystems. When a conditionally executed subsystem is disabled, the output is either held at its last value or set to the 'Initial output'."> output</entry>
      <entry key="Sinks_Record_RecordData"
             note="This is the keyword for the block with Block Description:- Streams and records the source data for the connected signals">Record Data</entry>
      <entry key="Sinks_Record_LogData"
             note="This is the keyword for the block with Block Description:- Streams and records the source data for the connected signals">LogData</entry>
      <entry key="Sinks_Record_ExportData"
             note="This is the keyword for the block with Block Description:- Streams and records the source data for the connected signals">Export Data</entry>
      <entry key="Sinks_Record_RecordToWorkspace"
             note="This is the keyword for the block with Block Description:- Streams and records the source data for the connected signals">RecordToWorkspace</entry>      
      <entry key="Sinks_Record_LogToWorkspace"
             note="This is the keyword for the block with Block Description:- Streams and records the source data for the connected signals">LogToWorkspace</entry>
      <entry key="Sinks_Record_SaveToWorkspace"
             note="This is the keyword for the block with Block Description:- Streams and records the source data for the connected signals">SaveToWorkspace</entry>
      <entry key="Sinks_Record_ToWS"
             note="This is the keyword for the block with Block Description:- Streams and records the source data for the connected signals">ToWS</entry>
      <entry key="Sinks_Record_ToWorkspace"
             note="This is the keyword for the block with Block Description:- Streams and records the source data for the connected signals">To Workspace</entry>
      <entry key="Sinks_Record_RecordToFile"
             note="This is the keyword for the block with Block Description:- Streams and records the source data for the connected signals">RecordToFile</entry>
      <entry key="Sinks_Record_LogToFile"
             note="This is the keyword for the block with Block Description:- Streams and records the source data for the connected signals">LogToFile</entry>
      <entry key="Sinks_Record_ToFile"
             note="This is the keyword for the block with Block Description:- Streams and records the source data for the connected signals">To File</entry>      
      <entry key="Sinks_Record_SaveToFile"
             note="This is the keyword for the block with Block Description:- Streams and records the source data for the connected signals">SaveToFile</entry>
      <entry key="Sinks_Record_SignalViewer"
             note="This is the keyword for the block with Block Description:- Streams and records the source data for the connected signals">Signal Viewer</entry>
      <entry key="Sinks_Record_PlotSignals"
             note="This is the keyword for the block with Block Description:- Streams and records the source data for the connected signals">PlotSignals</entry>      
      <entry key="Sinks_Record_Excel"
             note="This is the keyword for the block with Block Description:- Streams and records the source data for the connected signals">To Excel</entry>
      <entry key="Sinks_Record_Spreadsheet"
             note="This is the keyword for the block with Block Description:- Streams and records the source data for the connected signals">To Spreadsheet</entry>
      <entry key="Sinks_Record_mldatx"
             note="This is the keyword for the block with Block Description:- Streams and records the source data for the connected signals">To mldatx</entry>
      <entry key="Sinks_Record_mat"
             note="This is the keyword for the block with Block Description:- Streams and records the source data for the connected signals">To mat</entry>
      <entry key="Sinks_Record_parquet"
             note="This is the keyword for the block with Block Description:- Streams and records the source data for the connected signals">To parquet</entry>
      <entry key="Sinks_Record_Logging"
             note="This is the keyword for the block with Block Description:- Streams and records the source data for the connected signals">Logging</entry>
      <entry key="Sinks_Record_SDI"
             note="This is the keyword for the block with Block Description:- Streams and records the source data for the connected signals">To SDI</entry>
      <entry key="Sinks_Record_Stackedplot"
             note="This is the keyword for the block with Block Description:- Streams and records the source data for the connected signals">Stackedplot</entry>

      <entry key="Sources_In1_Inport"
             note="This is the keyword for the block with Block Description:- Provide an input port for a subsystem or model.For Triggered Subsystems, 'Latch input by delaying outside signal' produces the value of the subsystem input at the previous time step.For Function-Call Subsystems, turning 'On' the 'Latch input for feedback signals of function-call subsystem outputs' prevents the input value to this subsystem from changing during its execution.The other parameters can be used to explicitly specify the input signal attributes.">Inport</entry>
      <entry key="Sources_In1_Input"
             note="This is the keyword for the block with Block Description:- Provide an input port for a subsystem or model.For Triggered Subsystems, 'Latch input by delaying outside signal' produces the value of the subsystem input at the previous time step.For Function-Call Subsystems, turning 'On' the 'Latch input for feedback signals of function-call subsystem outputs' prevents the input value to this subsystem from changing during its execution.The other parameters can be used to explicitly specify the input signal attributes."> Input</entry>
      <entry key="Sources_BandLimitedWhiteNoise_Gaussiannoise"
             note="This is the hint for the block keyword with Block Description:- The Band-Limited White Noise block generates normally distributed random numbers that are suitable for use in continuous or hybrid systems.">Gaussian noise</entry>
      <entry key="Sources_BandLimitedWhiteNoise_Whitenoise"
             note="This is the hint for the block keyword with Block Description:- The Band-Limited White Noise block generates normally distributed random numbers that are suitable for use in continuous or hybrid systems."> White noise</entry>
      <entry key="Sources_ChirpSignal_chirp"
             note="This is the hint for the block keyword with Block Description:- Output a linear chirp signal (sine wave  whose frequency varies linearly with time).">chirp</entry>
      <entry key="Sources_ChirpSignal_sweepsignal"
             note="This is the hint for the block keyword with Block Description:- Output a linear chirp signal (sine wave  whose frequency varies linearly with time)."> sweep signal</entry>
      <entry key="Sources_ChirpSignal_quadraticphasesignal"
             note="This is the hint for the block keyword with Block Description:- Output a linear chirp signal (sine wave  whose frequency varies linearly with time)."> quadratic-phase signal</entry>
      <entry key="Sources_Clock_clock"
             note="This is the keyword for the block with Block Description:- Output the current simulation time.">clock</entry>
      <entry key="Sources_Clock_clk"
             note="This is the keyword for the block with Block Description:- Output the current simulation time."> clk</entry>
      <entry key="Sources_Constant_Constant"
             note="This is the keyword for the block with Block Description:- Output the constant specified by the 'Constant value' parameter. If 'Constant value' is a vector and 'Interpret vector parameters as 1-D' is on, treat the constant value as a 1-D array. Otherwise, output a matrix with the same dimensions as the constant value.">Constant</entry>
      <entry key="Sources_Constant_Value"
             note="This is the keyword for the block with Block Description:- Output the constant specified by the 'Constant value' parameter. If 'Constant value' is a vector and 'Interpret vector parameters as 1-D' is on, treat the constant value as a 1-D array. Otherwise, output a matrix with the same dimensions as the constant value."> Value</entry>
      <entry key="Sources_CounterFreeRunning_Counter"
             note="This is the hint for the block keyword with Block Description:- This block is a free-running counter that overflows back to zero after it has reached the maximum value possible for the specified number of bits. The counter is always initialized to zero. The output is normally an unsigned integer with the specified number of bits.">Counter</entry>
      <entry key="Sources_CounterFreeRunning_FreeRunningCounter"
             note="This is the hint for the block keyword with Block Description:- This block is a free-running counter that overflows back to zero after it has reached the maximum value possible for the specified number of bits. The counter is always initialized to zero. The output is normally an unsigned integer with the specified number of bits."> Free Running Counter</entry>
      <entry key="Sources_CounterLimited_CounterLimited"
             note="This is the hint for the block keyword with Block Description:- This block is a counter that wraps back to zero after it has output the specified upper limit. The counter is always initialized to zero. The output is normally an unsigned integer of 8, 16, or 32 bits. The smallest number of bits needed to represent the upper limit is used.">Counter Limited</entry>
      <entry key="Sources_CounterLimited_LimitedCounter"
             note="This is the hint for the block keyword with Block Description:- This block is a counter that wraps back to zero after it has output the specified upper limit. The counter is always initialized to zero. The output is normally an unsigned integer of 8, 16, or 32 bits. The smallest number of bits needed to represent the upper limit is used."> Limited Counter</entry>
      <entry key="Sources_DigitalClock_Clock"
             note="This is the keyword for the block with Block Description:- Output current simulation time at the specified rate.">Clock</entry>
      <entry key="Sources_DigitalClock_DigitalClock"
             note="This is the keyword for the block with Block Description:- Output current simulation time at the specified rate."> Digital Clock</entry>
      <entry key="Sources_EnumeratedConstant_Enum"
             note="This is the keyword for the block with Block Description:- Select the settings for the subsystem block. To enable parameters for code generation, select 'Treat as atomic unit'.">Enum</entry>
      <entry key="Sources_EnumeratedConstant_Constant"
             note="This is the keyword for the block with Block Description:- Select the settings for the subsystem block. To enable parameters for code generation, select 'Treat as atomic unit'."> Constant</entry>
      <entry key="Sources_EnumeratedConstant_EnumeratedConstant"
             note="This is the keyword for the block with Block Description:- Select the settings for the subsystem block. To enable parameters for code generation, select 'Treat as atomic unit'."> Enumerated Constant</entry>
      <entry key="Sources_EnumeratedConstant_Enumerate"
             note="This is the keyword for the block with Block Description:- Select the settings for the subsystem block. To enable parameters for code generation, select 'Treat as atomic unit'."> Enumerate</entry>
      <entry key="Sources_EnumeratedConstant_Enumeration"
             note="This is the keyword for the block with Block Description:- Select the settings for the subsystem block. To enable parameters for code generation, select 'Treat as atomic unit'."> Enumeration</entry>
      <entry key="Sources_FromWorkspace_Workspace"
             note="This is the keyword for the block with Block Description:- Read data values specified in timeseries, matrix, or structure format from the MATLAB workspace, model workspace, or mask workspace.MATLAB timeseries format may be used for any data type, complexity, or fixed dimensions. To load data for a bus signal, use a MATLAB structure that matches the bus hierarchy and specify timeseries for each leaf signal.For matrix formats, each row of the matrix has a time stamp in the first column and a vector containing the corresponding data sample in the subsequent column(s).For structure format, use the following kind of structure: var.time=[TimeValues] var.signals.values=[DataValues] var.signals.dimensions=[DimValues]">Workspace</entry>
      <entry key="Sources_FromWorkspace_FromWorkspace"
             note="This is the keyword for the block with Block Description:- Read data values specified in timeseries, matrix, or structure format from the MATLAB workspace, model workspace, or mask workspace.MATLAB timeseries format may be used for any data type, complexity, or fixed dimensions. To load data for a bus signal, use a MATLAB structure that matches the bus hierarchy and specify timeseries for each leaf signal.For matrix formats, each row of the matrix has a time stamp in the first column and a vector containing the corresponding data sample in the subsequent column(s).For structure format, use the following kind of structure: var.time=[TimeValues] var.signals.values=[DataValues] var.signals.dimensions=[DimValues]"> From Workspace</entry>
      <entry key="Sources_FromFile_File"
             note="This is the keyword for the block with Block Description:- Read data values from a variable in the specified MAT-file.The data values may be specified in MATLAB timeseries or matrix format.MATLAB timeseries may be used for any data type, complexity, or dimensions. To load the bus signal, use a MATLAB structure that matches the bus hierarchy. Each leaf of the structure must be a MATLAB timeseries object.Matrix format can be used only for vector, double, noncomplex  signals. Each column of the matrix must have a time stamp in the first row and a vector containing the corresponding data sample in the subsequent rows.Simulink incrementally reads data from MAT-files of version 7.3.The MATLAB timeseries and structures of timeseries must be saved in MAT-files of version 7.3.">File</entry>
      <entry key="Sources_FromFile_FromFile"
             note="This is the keyword for the block with Block Description:- Read data values from a variable in the specified MAT-file.The data values may be specified in MATLAB timeseries or matrix format.MATLAB timeseries may be used for any data type, complexity, or dimensions. To load the bus signal, use a MATLAB structure that matches the bus hierarchy. Each leaf of the structure must be a MATLAB timeseries object.Matrix format can be used only for vector, double, noncomplex  signals. Each column of the matrix must have a time stamp in the first row and a vector containing the corresponding data sample in the subsequent rows.Simulink incrementally reads data from MAT-files of version 7.3.The MATLAB timeseries and structures of timeseries must be saved in MAT-files of version 7.3."> From File</entry>
      <entry key="Sources_FromSpreadsheet_Spreadsheet"
             note="This is the keyword for the block with Block Description:- Read data values from spreadsheet.The block interprets the first column as time and the first row and remaining columns as signals.If there are empty signals, the block returns an error at import.Fill in all the headings in the columns. If all headings are blank, the block assigns default signal headings using the format Signal#.">Spreadsheet</entry>
      <entry key="Sources_FromSpreadsheet_Excel"
             note="This is the keyword for the block with Block Description:- Read data values from spreadsheet.The block interprets the first column as time and the first row and remaining columns as signals.If there are empty signals, the block returns an error at import.Fill in all the headings in the columns. If all headings are blank, the block assigns default signal headings using the format Signal#."> Excel</entry>
      <entry key="Sources_FromSpreadsheet_CSV"
             note="This is the keyword for the block with Block Description:- Read data values from spreadsheet.The block interprets the first column as time and the first row and remaining columns as signals.If there are empty signals, the block returns an error at import.Fill in all the headings in the columns. If all headings are blank, the block assigns default signal headings using the format Signal#."> CSV</entry>
      <entry key="Sources_FromSpreadsheet_FromSpreadsheet"
             note="This is the keyword for the block with Block Description:- Read data values from spreadsheet.The block interprets the first column as time and the first row and remaining columns as signals.If there are empty signals, the block returns an error at import.Fill in all the headings in the columns. If all headings are blank, the block assigns default signal headings using the format Signal#.">From Spreadsheet</entry>
      <entry key="Sources_Ground_Ground"
             note="This is the keyword for the block with Block Description:- Used to &#34;ground&#34; input signals.  (Prevents warnings about unconnected input ports.)  Outputs zero.">Ground</entry>
      <entry key="Sources_Ground_Zero"
             note="This is the keyword for the block with Block Description:- Used to &#34;ground&#34; input signals.  (Prevents warnings about unconnected input ports.)  Outputs zero."> Zero</entry>
      <entry key="Sources_PulseGenerator_Pulse"
             note="This is the keyword for the block with Block Description:- Output pulses: if (t &gt;= PhaseDelay) &amp;&amp; Pulse is on   Y(t) = Amplitude else   Y(t) = 0 endPulse type determines the computational technique used. Time-based is recommended for use with a variable step solver, while Sample-based is recommended for use with a fixed step solver or within a discrete portion of a model using a variable step solver.">Pulse</entry>
      <entry key="Sources_PulseGenerator_PulseGenerator"
             note="This is the keyword for the block with Block Description:- Output pulses: if (t &gt;= PhaseDelay) &amp;&amp; Pulse is on   Y(t) = Amplitude else   Y(t) = 0 endPulse type determines the computational technique used. Time-based is recommended for use with a variable step solver, while Sample-based is recommended for use with a fixed step solver or within a discrete portion of a model using a variable step solver."> Pulse Generator</entry>
      <entry key="Sources_PulseGenerator_PulseGen"
             note="This is the keyword for the block with Block Description:- Output pulses: if (t &gt;= PhaseDelay) &amp;&amp; Pulse is on   Y(t) = Amplitude else   Y(t) = 0 endPulse type determines the computational technique used. Time-based is recommended for use with a variable step solver, while Sample-based is recommended for use with a fixed step solver or within a discrete portion of a model using a variable step solver."> PulseGen</entry>
      <entry key="Sources_PulseGenerator_SquareWave"
             note="This is the keyword for the block with Block Description:- Output pulses: if (t &gt;= PhaseDelay) &amp;&amp; Pulse is on   Y(t) = Amplitude else   Y(t) = 0 endPulse type determines the computational technique used. Time-based is recommended for use with a variable step solver, while Sample-based is recommended for use with a fixed step solver or within a discrete portion of a model using a variable step solver."> Square Wave</entry>
      <entry key="Sources_Ramp_Source"
             note="This is the hint for the block keyword with Block Description:- Output a ramp signal starting at the specified time.">Source</entry>
      <entry key="Sources_Ramp_Ramp"
             note="This is the hint for the block keyword with Block Description:- Output a ramp signal starting at the specified time."> Ramp</entry>
      <entry key="Sources_RandomNumber_Random"
             note="This is the keyword for the block with Block Description:- Output a normally (Gaussian) distributed random signal.  Output is repeatable for a given seed.">Random</entry>
      <entry key="Sources_RandomNumber_RandomNumber"
             note="This is the keyword for the block with Block Description:- Output a normally (Gaussian) distributed random signal.  Output is repeatable for a given seed."> Random Number</entry>
      <entry key="Sources_RandomNumber_NormalRandom"
             note="This is the keyword for the block with Block Description:- Output a normally (Gaussian) distributed random signal.  Output is repeatable for a given seed."> Normal Random</entry>
      <entry key="Sources_RandomNumber_NormallyDistributedRandom"
             note="This is the keyword for the block with Block Description:- Output a normally (Gaussian) distributed random signal.  Output is repeatable for a given seed."> Normally Distributed Random</entry>
      <entry key="Sources_RepeatingSequence_Sequence"
             note="This is the hint for the block keyword with Block Description:- Output a repeating sequence of numbers specified in a table of time-value pairs. Values of time should be monotonically increasing.">Sequence</entry>
      <entry key="Sources_RepeatingSequence_RepeatingSequence"
             note="This is the hint for the block keyword with Block Description:- Output a repeating sequence of numbers specified in a table of time-value pairs. Values of time should be monotonically increasing."> Repeating Sequence</entry>
      <entry key="Sources_RepeatingSequenceInterpolated_Sequence"
             note="This is the hint for the block keyword with Block Description:- Discrete time sequence is output, then repeated. Between data points, the specified lookup method is used to determine the output.">Sequence</entry>
      <entry key="Sources_RepeatingSequenceInterpolated_Interpolated"
             note="This is the hint for the block keyword with Block Description:- Discrete time sequence is output, then repeated. Between data points, the specified lookup method is used to determine the output."> Interpolated</entry>
      <entry key="Sources_RepeatingSequenceInterpolated_Repeating"
             note="This is the hint for the block keyword with Block Description:- Discrete time sequence is output, then repeated. Between data points, the specified lookup method is used to determine the output."> Repeating</entry>
      <entry key="Sources_RepeatingSequenceStair_Sequence"
             note="This is the hint for the block keyword with Block Description:- Discrete time sequence is output, then repeated.">Sequence</entry>
      <entry key="Sources_RepeatingSequenceStair_Stair"
             note="This is the hint for the block keyword with Block Description:- Discrete time sequence is output, then repeated."> Stair</entry>
      <entry key="Sources_RepeatingSequenceStair_RepeatingStair"
             note="This is the hint for the block keyword with Block Description:- Discrete time sequence is output, then repeated."> Repeating Stair</entry>
      <entry key="Sources_SignalGenerator_Generator"
             note="This is the keyword for the block with Block Description:- Output various wave forms:   Y(t) = Amp*Waveform(Freq, t)">Generator</entry>
      <entry key="Sources_SignalGenerator_Sine"
             note="This is the keyword for the block with Block Description:- Output various wave forms:   Y(t) = Amp*Waveform(Freq, t)"> Sine</entry>
      <entry key="Sources_SignalGenerator_SineWave"
             note="This is the keyword for the block with Block Description:- Output various wave forms:   Y(t) = Amp*Waveform(Freq, t)"> SineWave</entry>
      <entry key="Sources_SignalGenerator_Square"
             note="This is the keyword for the block with Block Description:- Output various wave forms:   Y(t) = Amp*Waveform(Freq, t)"> Square</entry>
      <entry key="Sources_SignalGenerator_SquareWave"
             note="This is the keyword for the block with Block Description:- Output various wave forms:   Y(t) = Amp*Waveform(Freq, t)"> Square Wave</entry>
      <entry key="Sources_SignalGenerator_Sawtooth"
             note="This is the keyword for the block with Block Description:- Output various wave forms:   Y(t) = Amp*Waveform(Freq, t)"> Sawtooth</entry>
      <entry key="Sources_SignalGenerator_SawtoothWave"
             note="This is the keyword for the block with Block Description:- Output various wave forms:   Y(t) = Amp*Waveform(Freq, t)"> Sawtooth Wave</entry>
      <entry key="Sources_SineWave_Sine"
             note="This is the keyword for the block with Block Description:- Output a sine wave:   O(t) = Amp*Sin(Freq*t+Phase) + BiasSine type determines the computational technique used. The parameters in the two types are related through:Samples per period = 2*pi / (Frequency * Sample time)Number of offset samples = Phase * Samples per period / (2*pi)Use the sample-based sine type if numerical problems due to running for large times (e.g. overflow in absolute time) occur.">Sine</entry>
      <entry key="Sources_SineWave_SineWave"
             note="This is the keyword for the block with Block Description:- Output a sine wave:   O(t) = Amp*Sin(Freq*t+Phase) + BiasSine type determines the computational technique used. The parameters in the two types are related through:Samples per period = 2*pi / (Frequency * Sample time)Number of offset samples = Phase * Samples per period / (2*pi)Use the sample-based sine type if numerical problems due to running for large times (e.g. overflow in absolute time) occur."> SineWave</entry>
      <entry key="Sources_Step_Step"
             note="This is the keyword for the block with Block Description:- Output a step.">Step</entry>
      <entry key="Sources_UniformRandomNumber_Random"
             note="This is the keyword for the block with Block Description:- Output a uniformly distributed random signal.  Output is repeatable for a given seed.">Random</entry>
      <entry key="Sources_UniformRandomNumber_RandomNumber"
             note="This is the keyword for the block with Block Description:- Output a uniformly distributed random signal.  Output is repeatable for a given seed."> Random Number</entry>
      <entry key="Sources_UniformRandomNumber_UniformRandom"
             note="This is the keyword for the block with Block Description:- Output a uniformly distributed random signal.  Output is repeatable for a given seed."> Uniform Random</entry>
      <entry key="Sources_WaveformGenerator_Waveform"
             note="This is the keyword for the block with Block Description:- Select the settings for the subsystem block. To enable parameters for code generation, select 'Treat as atomic unit'.">Waveform</entry>
      <entry key="Sources_WaveformGenerator_Constant"
             note="This is the keyword for the block with Block Description:- Select the settings for the subsystem block. To enable parameters for code generation, select 'Treat as atomic unit'."> Constant</entry>
      <entry key="Sources_WaveformGenerator_GaussianNoise"
             note="This is the keyword for the block with Block Description:- Select the settings for the subsystem block. To enable parameters for code generation, select 'Treat as atomic unit'."> Gaussian Noise</entry>
      <entry key="Sources_WaveformGenerator_Pulse"
             note="This is the keyword for the block with Block Description:- Select the settings for the subsystem block. To enable parameters for code generation, select 'Treat as atomic unit'."> Pulse</entry>
      <entry key="Sources_WaveformGenerator_PulseGenerator"
             note="This is the keyword for the block with Block Description:- Select the settings for the subsystem block. To enable parameters for code generation, select 'Treat as atomic unit'."> Pulse Generator</entry>
      <entry key="Sources_WaveformGenerator_Sawtooth"
             note="This is the keyword for the block with Block Description:- Select the settings for the subsystem block. To enable parameters for code generation, select 'Treat as atomic unit'."> Sawtooth</entry>
      <entry key="Sources_WaveformGenerator_SawtoothWave"
             note="This is the keyword for the block with Block Description:- Select the settings for the subsystem block. To enable parameters for code generation, select 'Treat as atomic unit'."> Sawtooth Wave</entry>
      <entry key="Sources_WaveformGenerator_Sine"
             note="This is the keyword for the block with Block Description:- Select the settings for the subsystem block. To enable parameters for code generation, select 'Treat as atomic unit'."> Sine</entry>
      <entry key="Sources_WaveformGenerator_SineWave"
             note="This is the keyword for the block with Block Description:- Select the settings for the subsystem block. To enable parameters for code generation, select 'Treat as atomic unit'."> Sine Wave</entry>
      <entry key="Sources_WaveformGenerator_Square"
             note="This is the keyword for the block with Block Description:- Select the settings for the subsystem block. To enable parameters for code generation, select 'Treat as atomic unit'."> Square</entry>
      <entry key="Sources_WaveformGenerator_SquareWave"
             note="This is the keyword for the block with Block Description:- Select the settings for the subsystem block. To enable parameters for code generation, select 'Treat as atomic unit'."> Square Wave</entry>
      <entry key="Sources_WaveformGenerator_Step"
             note="This is the keyword for the block with Block Description:- Select the settings for the subsystem block. To enable parameters for code generation, select 'Treat as atomic unit'."> Step</entry>
      <entry key="Sources_WaveformGenerator_Generator"
             note="This is the keyword for the block with Block Description:- Select the settings for the subsystem block. To enable parameters for code generation, select 'Treat as atomic unit'."> Generator</entry>
      <entry key="Sources_WaveformGenerator_Function"
             note="This is the keyword for the block with Block Description:- Select the settings for the subsystem block. To enable parameters for code generation, select 'Treat as atomic unit'."> Function</entry>
      <entry key="Sources_WaveformGenerator_Expression"
             note="This is the keyword for the block with Block Description:- Select the settings for the subsystem block. To enable parameters for code generation, select 'Treat as atomic unit'."> Expression</entry>
      <entry key="Sources_WaveformGenerator_WaveformGenerator"
             note="This is the keyword for the block with Block Description:- Select the settings for the subsystem block. To enable parameters for code generation, select 'Treat as atomic unit'."> Waveform Generator</entry>
      <entry key="Sources_Playback_Playback" note="Streams recorded data from File, Workspace or Data Inspector."> Playback</entry>
      <entry key="Sources_Playback_AddData" note="Streams recorded data from File, Workspace or Data Inspector."> Add data</entry>
      <entry key="Sources_Playback_LoadData" note="Streams recorded data from File, Workspace or Data Inspector."> Load data</entry>
      <entry key="Sources_Playback_Input" note="Streams recorded data from File, Workspace or Data Inspector."> Input</entry>      
      <entry key="Sources_Playback_TimeTable" note="Streams recorded data from File, Workspace or Data Inspector."> From TimeTable</entry>
      <entry key="Sources_Playback_Timeseries" note="Streams recorded data from File, Workspace or Data Inspector."> From Timeseries</entry>
      <entry key="Sources_Playback_FromFile" note="Streams recorded data from File, Workspace or Data Inspector."> From File</entry>
      <entry key="Sources_Playback_FromWorkspace" note="Streams recorded data from File, Workspace or Data Inspector."> From Workspace</entry>
      <entry key="Sources_Playback_Spreadsheet" note="Streams recorded data from File, Workspace or Data Inspector."> From Spreadsheet</entry>
      <entry key="Sources_Playback_SDI" note="Streams recorded data from File, Workspace or Data Inspector."> From SDI</entry>      
      <entry key="Sources_Playback_Signal" note="Streams recorded data from File, Workspace or Data Inspector."> Signal Playback</entry>
      <entry key="Sources_Playback_Excel" note="Streams recorded data from File, Workspace or Data Inspector."> From Excel</entry>
      <entry key="Sources_Playback_MLDATX" note="Streams recorded data from File, Workspace or Data Inspector."> From MLDATX</entry>
      <entry key="Sources_Playback_MAT" note="Streams recorded data from File, Workspace or Data Inspector."> From mat</entry>
      <entry key="Sources_Playback_CSV" note="Streams recorded data from File, Workspace or Data Inspector."> From csv</entry>
      <entry key="Sources_Playback_MDF" note="Streams recorded data from File, Workspace or Data Inspector."> From mdf</entry>
      <entry key="Sources_Playback_Table" note="Streams recorded data from File, Workspace or Data Inspector."> Table visualization</entry>
      <entry key="Sources_Playback_Stackedplot" note="Streams recorded data from File, Workspace or Data Inspector."> Stackedplot</entry>
      <entry key="Sources_Playback_PlotSignals" note="Streams recorded data from File, Workspace or Data Inspector."> Plot signals</entry>      

      <entry key="User_Defined_Functions_FunctionCaller_Function"
             note="This is the keyword for the block with Block Description:- Call the function described in 'Function prototype' to compute output signals from input signals. These signals correspond to the arguments of the function called, and you can optionally provide examples in 'Input/Output argument specifications' if the function is placed outside of the current model hierarchy."> Function</entry>
      <entry key="User_Defined_Functions_FunctionCaller_FunctionCall"
             note="This is the keyword for the block with Block Description:- Call the function described in 'Function prototype' to compute output signals from input signals. These signals correspond to the arguments of the function called, and you can optionally provide examples in 'Input/Output argument specifications' if the function is placed outside of the current model hierarchy."> FunctionCall</entry>
      <entry key="User_Defined_Functions_FunctionCaller_Caller"
             note="This is the keyword for the block with Block Description:- Call the function described in 'Function prototype' to compute output signals from input signals. These signals correspond to the arguments of the function called, and you can optionally provide examples in 'Input/Output argument specifications' if the function is placed outside of the current model hierarchy."> Caller</entry>
      <entry key="User_Defined_Functions_FunctionCaller_SimulinkFunction"
             note="This is the keyword for the block with Block Description:- Call the function described in 'Function prototype' to compute output signals from input signals. These signals correspond to the arguments of the function called, and you can optionally provide examples in 'Input/Output argument specifications' if the function is placed outside of the current model hierarchy."> Simulink Function</entry>
      <entry key="User_Defined_Functions_InterpretedMATLABFunction_Function"
             note="This is the keyword for the block with Block Description:- Pass the input values to a MATLAB function for evaluation.  The function must return a single value having the dimensions specified by 'Output dimensions' and 'Collapse 2-D results to 1-D'.Examples: sin, sin(u), foo(u(1), u(2))">Function</entry>
      <entry key="User_Defined_Functions_InterpretedMATLABFunction_MATLABFunction"
             note="This is the keyword for the block with Block Description:- Pass the input values to a MATLAB function for evaluation.  The function must return a single value having the dimensions specified by 'Output dimensions' and 'Collapse 2-D results to 1-D'.Examples: sin, sin(u), foo(u(1), u(2))"> MATLAB Function</entry>
      <entry key="User_Defined_Functions_Level2MATLABSFunction_Function"
             note="This is the keyword for the block with Block Description:- User-definable block written using the MATLAB S-Function API. Specify the name of a MATLAB S-Function below. Use the Parameters field to specify a comma-separated list of parameters for this block.">Function</entry>
      <entry key="User_Defined_Functions_Level2MATLABSFunction_SFunction"
             note="This is the keyword for the block with Block Description:- User-definable block written using the MATLAB S-Function API. Specify the name of a MATLAB S-Function below. Use the Parameters field to specify a comma-separated list of parameters for this block."> S-Function</entry>
      <entry key="User_Defined_Functions_SimulinkFunction_Function"
             note="This is the hint for the block keyword with Block Description:- A subsystem block template configured as a Simulink Function containing a function-call trigger port, input and output argument blocks.">Function</entry>
      <entry key="User_Defined_Functions_SimulinkFunction_Simulink"
             note="This is the hint for the block keyword with Block Description:- A subsystem block template configured as a Simulink Function containing a function-call trigger port, input and output argument blocks."> Simulink</entry>
      <entry key="User_Defined_Functions_SimulinkFunction_SimulinkFunction"
             note="This is the hint for the block keyword with Block Description:- A subsystem block template configured as a Simulink Function containing a function-call trigger port, input and output argument blocks."> Simulink Function</entry>
      <entry key="User_Defined_Functions_SimulinkFunction_Caller"
             note="This is the hint for the block keyword with Block Description:- A subsystem block template configured as a Simulink Function containing a function-call trigger port, input and output argument blocks."> Caller</entry>
      <entry key="User_Defined_Functions_SimulinkFunction_FunctionCall"
             note="This is the hint for the block keyword with Block Description:- A subsystem block template configured as a Simulink Function containing a function-call trigger port, input and output argument blocks."> Function Call</entry>
   </message>
</rsccat>
