<?xml version="1.0" encoding="UTF-8" ?>
<!-- Copyright 2018-2025 The MathWorks, Inc. -->
<rsccat version="1.0" locale="en_US" product="Simulink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../schema/msgcat.xsd">
  <message>
    <!--- Labels on the dialogs and tooltips related to subsystem reference -->
    <entry key="SRTabText">Subsystem Reference</entry>
    <entry key="SRParameterPrompt">Subsystem file name:</entry>
    <entry key="SRConvert">Convert</entry>
    <entry key="SRCancel">Cancel</entry>
    <entry key="SRIconNotFound">Not found</entry>
    <entry key="SRIconNotLoaded">Not loaded</entry>
    <entry key="SRIconInvalidBdType">Not a valid file type</entry>
    <entry key="SRIconCircularLoop">Causes circular loop</entry>
    <entry key="SRTabHelpText">Reference subsystem content from a file.</entry>
    <entry key="OpenSubsysButtonText">Open</entry>
    <entry key="OpenReferencedSubsysMenuText">Open referenced subsystem</entry>
    <entry key="ConvertToSRMenuText">Referenced Subsystem...</entry>
    <entry key="ConvertToSRButtonText">Convert...</entry>
    <entry key="ConvertToSRDlgTitleText">Convert to Subsystem Reference</entry>
    <entry key="ErrorDuringTransferOfTH">Error during transfer of test harness</entry>
    <entry key="ConvertToSRHelpText">Convert a subsystem to referenced subsystem with content saved in a separate file.</entry>
    <entry key="ConvertingText">Converting...</entry>
    <entry key="ConvertToSRInputGroupPrompt">Input parameters</entry>
    <entry key="OpenMasterGraphMenuText">Open edited instance</entry>
    <entry key="OpenSimulatingGraphMenuText">Open simulating instance</entry>
    <entry key="GoToInstancesMenuText">Go to instance</entry>
    <entry key="BrowseSubsystemFile">Select a subsystem file</entry>
    <entry key="SaveSubsystemFile">Save a subsystem file</entry>
    <entry key="SelectedSubsystemNotOnPath">Referenced subsystem block diagram ''{0}'' must be on the MATLAB path.</entry>
    <entry key="SelectedSubsystemPathIssueTitle">Resolve path issue with selected subsystem</entry>
    <entry key="MoveTestHarnessPrompt">Transfer test harnesses</entry>
    <entry key="MovingTestHarnessMessage">Transferring test harnesses to subsystem block diagram</entry>
    <entry key="InstallTestHarness">Install Test Harness to enable the option</entry>
    <entry key="NoAssociatedTestHarness">Subsystem block doesn't have any test harness</entry>

    <!--- Diagnostic messages related to subsystem reference -->
    <entry key="CannotUpdateReadOnlyBlock">Failed to update block ''{0}'' because it is a write-protected subsystem</entry>
    <entry key="CannotChangeParamReadOnlyBlock">Failed to change 'ReferencedSubsystem' parameter value of block ''{0}'' because it is a write-protected subsystem</entry>
    <entry key="CannotChangeParamFromMaskCallback">Failed to change 'ReferencedSubsystem' parameter value of block ''{0}'' because the mask callback is executing</entry>
    <entry key="SRBadSetParamValue">Parameter 'ReferencedSubsystem' is not supported for block ''{0}''.</entry>
    <entry key="InvalidConversionInArchitecture">Subsystem conversion with parameter 'ReferencedSubsystem' is not supported for architecture models.</entry>
    <entry key="SRNameMustBeValid">Invalid name ''{0}''. Subsystem file name must be a valid Simulink model name.</entry>
    <entry key="UnsupportedBlockAtRootLevel">Subsystem contains unsupported block type ''{0}'' at the top level.</entry>
    <entry key="UnsupportedOutportBlockAsStateOwnerAtTopLevel">Subsystem block ''{0}'' has an Outport Block ''{1}'' in the top level whose state is being accessed by a State Read or Write block.</entry>
    <entry key="UnableToDeleteHarnessDuringConversion">Unable to convert subsystem to a Subsystem model as some blocks within the subsystem have test harnesses associated with them. Test harnesses cannot be created for blocks within a Subsystem model. Either delete or export these harnesses to independent models prior to conversion. Use the command ''sltest.harness.find'' with the path to the subsystem to find relevant harnesses. </entry>
    <entry key="SRLockViolation">Unable to modify ''{0}'' because it is locked by ''{1}''.</entry>
    <entry key="SSRefLockedBecauseOfSimulation">Failed to modify ''{0}''. ''{0}'' is locked because of simulation'.</entry>
    <entry key="OnlySubsystemCanBeConverted">Incorrect conversion. Only a subsystem block can be converted to Subsystem Reference.</entry>
    <entry key="OnlySubsystemReferenceCanBeConverted">Incorrect conversion. Only a Subsystem Reference block can be converted to subsystem.</entry>
    <entry key="VSSBlockCannotBeConverted">Unable to convert block ''{0}'' to Subsystem Reference block as it is a Variant Subsystem block.</entry>
    <entry key="StateflowBlockCannotBeConverted">Unable to convert block ''{0}'' to Subsystem Reference block as it is a Stateflow block.</entry>
    <entry key="ConfigurableSubsystemBlockCannotBeConverted">Unable to convert block ''{0}'' to Subsystem Reference block as it is a Configurable Subsystem block.</entry>
    <entry key="NoReadOrWriteSubsystemCannotBeConverted">Unable to convert block ''{0}'' to Subsystem Reference block as it has ''{1}'' permissions.</entry>
    <entry key="SimFunctionBlockCannotBeConverted">Unable to convert block ''{0}'' to Subsystem Reference block as it is a Simulink Function block.</entry>
    <entry key="InitTermOrResetCannotBeConverted">Unable to convert block ''{0}'' to Subsystem Reference block as initialize, terminate or reset function subsystems cannot be converted.</entry>
    <entry key="StateOwnerAndAccessorNotInsideSameSubsystemCannotBeConverted">Unable to convert block ''{0}'' to Subsystem Reference block as State Read or Write block and its owner block are not inside the same subsystem.</entry>
    <entry key="SSWithReinitPortCannotBeConverted">Unable to convert block ''{0}'' to Subsystem Reference block as it has reinitialize port.</entry>
    <entry key="SSWithMaskHideContentsCannotBeConverted">Unable to convert block ''{0}'' to Subsystem Reference block as its parameter 'MaskHideContents' is set to 'on'.</entry>
    <entry key="HarnessCUTCannotBeConverted">Unable to convert block ''{0}'' to Subsystem Reference block as it points to component under test in a test harness.</entry>
    <entry key="SSRefBlockCannotBeConverted">Unable to convert block ''{0}'' to Subsystem Reference block as it is already a Subsystem Reference block.</entry>
    <entry key="LinkedBlockCannotBeConverted">Unable to convert block ''{0}'' to Subsystem Reference block as it is a linked block.</entry>
    <entry key="FaultSSBlockCannotBeConverted">Unable to convert block ''{0}'' to Subsystem Reference block as it is a Fault Subsystem block.</entry>
    <entry key="ConvertNotSupportForHarnessCUT">The component under test ''{0}'' in a test harness cannot be converted to Subsystem Reference.</entry>
    <entry key="CycleNotAllowed">Subsystem Reference loop is not supported. Model ''{0}'' has a Subsystem Reference loop: ''{1}''</entry>
    <entry key="SSRefLoopDetected">Subsystem Reference loop detected: ''{0}''</entry>
    <entry key="FoundMissingSubModel">Subsystem Reference block ''{0}'' is missing sub model ''{1}''.</entry>
    <entry key="IncorrectChildModelType">Invalid block diagram type ''{0}''. Subsystem Reference block ''{1}'' must reference a subsystem file.</entry>
    <entry key="CannotMaskSubsystemReferenceBlock">Masking the Subsystem Reference block ''{0}'' is not supported. Use a system mask instead.</entry>
    <entry key="SaveBlockAlertTitle">Saving Referenced Subsystems</entry>
    <entry key="SaveBlockAlertMessage"><![CDATA[Subsystem Reference block ''{0}'' is referencing model
      ''{1}''. Model ''{2}'' has unsaved changes.  Select:
      <ul>
        <li> <b>Save</b> to save ''{3}''.
        <li> <b>Save All</b> to recursively repeat the above action for referenced models that
        have unsaved changes.
        <li> <b>Cancel</b> to cancel the Save operation for this model and its parents.
      </ul> ]]></entry>
    <entry key="SaveButton">to save ''{0}''.</entry>
    <entry key="SaveAllButton">to recursively repeat the above action for referenced subsystems that have unsaved changes.</entry>
    <entry key="CancelButton">to cancel Save operation for this model and its parents.</entry>
    <entry key="BDAlreadyLoaded">Failed to create ''{0}''. A block diagram with the same name exists at ''{1}'' and is loaded.</entry>
    <entry key="FileExists">File ''{0}'' already exists. Do you want to replace it?</entry>
    <entry key="CannotCreateFile">Failed to create ''{0}''. File ''{0}'' already exists.</entry>
    <entry key="CannotPointToParentBD">Conversion failed. ''{0}'' must not point to its parent block diagram ''{1}''.</entry>
    <entry key="UnsupportedGapPortOnSSRef">Unable to convert block ''{0}'' to a Subsystem Reference block as it contains out of order port blocks. Ports must be numbered consecutively starting with 1.</entry>
    <entry key="UnableToModifyByModelCallback">Failed to modify the contents of Subsystem Reference block ''{0}'' from the callback of model ''{1}''. To modify the contents, use the self modifying system mask on the Subsystem Reference block.</entry>
	<entry key="UnableToModifyByOutsideAncestorBlockCallback">Failed to modify the contents of Subsystem Reference block ''{0}'' from the callback of block ''{1}''. Use callback from a block which is inside the Subsystem Reference block "{0}" instead.</entry>
	<entry key="ContentMustModifiedByNearestParentMaskedBlock">Failed to modify contents of Subsystem Reference block ''{0}'' from the callback of block ''{1}''. Use the mask callback of the immediate masked parent block "{2}".</entry>
    <entry key="UnableToModifyWithoutSelfModifyingMask">Unable to modify contents of Subsystem Reference block ''{0}''. To modify the contents, create a self modifying system mask on the Subsystem Reference block.</entry>
    <entry key="SaveSystemWithDirtyReferencedSubsystems">File ''{0}'' was not saved because it contains dirty referenced subsystem files. To save the file and its dirty referenced files, use the save_system function with the 'SaveDirtyReferencedModels' name-value argument set to 'on'.
    </entry>
    <entry key="InvalidFileSelected">Invalid file ''{0}'' specified. Specify a subsystem file.</entry>
    <entry key="SSRefBlockUnknownParameter">Encountered problem while updating the block ''{0}'' : {1}</entry>
    <entry key="InvalidStateBlockOnSSRef">Unable to convert block ''{0}'' to a Subsystem Reference block. The subsystem has a state reader/writer block accessing a state which crosses the subsystem boundary.</entry>
    <entry key="SkippingParametersWhileSSRefConversion">Skipped mask parameter(s) ''{0}'' while converting subsystem mask to system mask as these parameters are not supported on system mask.</entry>
    <entry key="ChecksumViolation">Invalid use of Subsystem Reference block ''{0}''. ''{0}'' must match at least one unit test signature.
           <![CDATA[
               <actions exclusiveFixIts="yes">
                   <action type="suggestion">
                       <cmd>Simulink.SubsystemReference.showSignatureDiffDialogForUnitTests(''{1}'');</cmd>
                       <txt>Open the Signature Difference Viewer to understand the difference</txt>
                   </action>
                   <action type="suggestion">
                       <cmd>configset.highlightParameter(bdroot(''{0}''),''SubsystemReferenceDiagnosticForUnitTest'');</cmd>
                       <txt>Signature check can be disabled through diagnostic setting in configuration parameters</txt>
                   </action>
               </actions>
           ]]>
    </entry>
    <entry key="ChecksumViolationInsideTH">Invalid use of Subsystem Reference block ''{0}'' in the test harness ''{1}''. Open and compile ''{1}'' for more detailed error.</entry>
    <entry key="ChecksumViolationInsideModelRef">Invalid use of Subsystem Reference block ''{0}''. ''{0}'' must match at least one unit test signature. Block ''{0}'' is compiled through a model reference block.
           <![CDATA[
               <actions exclusiveFixIts="yes">
                   <action type="suggestion">
                       <cmd>Simulink.SubsystemReference.showSignatureDiffDialogForUnitTests(''{1}'', ''forModelRef'', true);</cmd>
                       <txt>Open the Signature Difference Viewer to understand the difference</txt>
                   </action>
                   <action type="suggestion">
                       <cmd>configset.highlightParameter(bdroot(''{0}''),''SubsystemReferenceDiagnosticForUnitTest'');</cmd>
                       <txt>Signature check can be disabled through diagnostic setting in configuration parameters</txt>
                   </action>
               </actions>
           ]]>
    </entry>
    <entry key="NoSignaturesGenerated">Invalid use of Subsystem Reference block ''{0}''. ''{0}'' must match at least one unit test signature. ''{1}'' has unit tests for which signatures have not been generated.</entry>
    <entry key="SSRefMustBeAtomicInTH">Test harness ''{0}'' uses a Subsystem Reference block which is not atomic. Only atomic Subsystem Reference blocks can be used to validate signatures.</entry>
    <entry key="SSRefMustBeAtomic">Failed to reference ''{0}''. ''{1}'' must be atomic to reference ''{0}'', as ''{0}'' is unit tested.</entry>
    <entry key="THCUTShouldBeSSRef">Test harness ''{0}'' doesn't use a Subsystem Reference block. Test harnesses using Subsystem Reference blocks can be used to validate signatures.</entry>
    <entry key="RemovedCUTfromCompGraph">In test harness ''{0}'', ''{1}'' got removed from the compiled graph.</entry>
    <entry key="MarkSSRefAtomic">''{0}'' must be atomic to reference ''{1}'', as ''{1}'' is unit tested.</entry>
    <entry key="MarkSSRefReusable">Function packaging for ''{0}'' must be reusable to reference ''{1}'', as ''{1}'' is unit tested.</entry>
    <entry key="InvalidUnitTestInput">Invalid input format. Input must be a string or cell array of strings.</entry>
    <entry key="InvalidTHName">Invalid test harness name ''{0}''. ''{1}'' doesn't have any test harness with name ''{0}''.</entry>
    <entry key="InvalidUnitTestName">Invalid unit test name ''{0}''. ''{1}'' doesn't have any unit test with name ''{0}''.</entry>
    <entry key="GenerateSignature">Following unit tests need to generate signature: ''{0}''.</entry>
    <entry key="InvalidBDType">Invalid set_param. Block diagram must be of type 'subsystem'</entry>
    <entry key="SaveUpdatedChecksum">Updated signature for unit test ''{0}''. Save ''{1}'' to save the updated signature.</entry>
    <entry key="ErrorDuringSave">Failed to update ''{0}''</entry>
    <entry key="InvalidBlockOrBDType">Invalid Input. Block or Block diagram must be of type 'subsystem'</entry>
    <entry key="InputMustBeBD">Input must be a block diagram.</entry>
    <entry key="InputMustBeBlock">Input must be a block.</entry>
    <entry key="InputMustBeSSBD">Invalid input. Input must be a block diagram of type 'subsystem'.</entry>
    <entry key="InputTypeMustBeSSBD">Invalid input. ''{0}'' must be a block diagram of type 'subsystem'.</entry>
    <entry key="InputMustBeCellArrayOfUTNames">Invalid input. 2nd argument must be a cellarray of unit test names.</entry>
    <entry key="GenSignatureStage">Generate signature</entry>
    <entry key="SelectUnitTestStage">Select unit test</entry>
    <entry key="NoSignatureForSSBD">''{0}'' must have signatures generated to compare.</entry>
    <entry key="NoSignatureForCodeGen">''{0}'' must have code generation signatures generated to compare.</entry>
    <entry key="NoSignatureForSim">''{0}'' must have simulation signatures generated to compare.</entry>
    <entry key="NoSigForUnitTests">Unit tests ''{0}'' must have signatures generated to compare.</entry>
    <entry key="NoSimSigForUnitTests">Unit tests ''{0}'' must have simulation signatures generated to compare.</entry>
    <entry key="NoCodeGenSigForUnitTests">Unit tests ''{0}'' must have code generation signatures generated to compare.</entry>
    <entry key="ContextSTFNonERT">Unit test ''{0}'' does not specify an ERT or ERT-derived system target file. Specify an ERT or ERT-derived system target file to build this function interface in the unit test.</entry>
    <entry key="AUTOSARFunctionInterface">The "SystemTargetFile" property of unit test ''{0}'' is set to "autosar.tlc". Unit test code generation does not support AUTOSAR code generation.</entry>
    <entry key="ContextSharedCodePlacementAuto">Unit test ''{0}'' has configuration parameter 'Shared Code Placement' set to 'Auto'. Hence, this unit test will not generate any subsystem code. Set the value of the parameter to 'Shared location' to allow this unit test to generate subsystem code.</entry>
    <entry key="CodeGenContextBuildFailed">Code generator failed to build unit test ''{0}'' for subsystem ''{1}''.\n To enable code generation for the unit test, fix the error. You can try exporting the unit test as an independent model, fix the error and import the unit test back into the subsystem file. \n</entry>
    <entry key="ReuseBlocker">The generated code for subsystem ''{0}'' is not reusable across models, so subsystem ''{0}'' is unable to generate unit test code. \n \nThe generated code for subsystem ''{0}'' is not reusable across models because of the following block and reason : \n Block  : ''{1}'' \n Reason : ''{2}'' \n</entry>
    <entry key="ChecksumDiffDialogTitle">Signature Difference Viewer</entry>
    <entry key="SignatureDiffDialogDescUnitTest">The tables list differences between the signatures of the Subsystem Reference block in the model and the unit tests. Resolving the differences in the port properties and compiled block properties will usually match the signatures.</entry>
    <entry key="SignatureDiffDialogDescSubsystems">The tables list differences between the signature of two subsystems. Resolving the difference in port properties and difference in compiled properties will usually match the signatures.</entry>
    <entry key="MismatchInPortProps">Mismatch in port properties</entry>
    <entry key="MismatchInCompiledProps">Mismatch in compiled block properties</entry>
    <entry key="MismatchInCompilationFlags">Mismatch in compilation attributes</entry>
    <entry key="MismatchInInternalDetails">Internal details of mismatch in properties</entry>
    <entry key="InternalCompiledProps">Internal compiled properties</entry>
    <entry key="InternalCompiledContentProps">Internal compiled properties of child blocks</entry>
    <entry key="DiffInConfigSet">Mismatch in model configuration parameter</entry>
    <entry key="DiffInSharedFcn">Mismatch in shared function</entry>
    <entry key="CannotChangePermitHRParam">Unable to set 'Permit Hierarchical Resolution' (PermitHierarchicalResolution) parameter of Subsystem Reference ''{0}'' because the referenced subsystem ''{1}'' has linked external data sources.</entry>
    <entry key="DisplaySSRefDDVarResolutionInfo">Variable ''{0}'' resolved in Subsystem Reference workspace.</entry>
    <entry key="NoMatchingContext">No unit tests in subsystem file ''{0}'' match subsystem ''{1}''.</entry>
    <entry key="SharedUtilsCSMismatch">The Subsystem Reference block ''{0}'' cannot reuse unit test code because the shared utility checksum of the model and the unit test do not match.</entry>
    <entry key="NoCachedFolder">The Subsystem Reference block''{0}'' cannot reuse unit test code because the unit test code folder ''{1}'' or its shared code database does not exist. Verify that the subsystem file and unit test code are in the same folder the client model is generating code in.</entry>
    <entry key="ModelLibraryCodeFolderMismatch">The Subsystem Reference block ''{0}'' cannot reuse unit test code because its parent model is generating code in ''{1}'' while the unit test code is in ''{2}''. Generate code for the model and unit test in the same directory to enable reuse. </entry>
    <entry key="ModelUsingModelSpecificFolderStructure">The Subsystem Reference block ''{0}'' cannot reuse unit test code because it is using 'ModelSpecific' code generation folder structure. Choose 'TargetEnvironmentSubfolder' code generation folder structure to enable the Subsystem Reference to reuse unit test code.
     <![CDATA[
        <actions exclusiveFixIts="yes">
            <action type="fixit">
                <cmd>Simulink.SubsystemReference.internal.SSRefFixits.fixTargetEnvironmentSubfolder;</cmd>
                <txt>Set file generation control parameter 'CodeGenFolderStructure' to 'TargetEnvironmentSubfolder'</txt>
            </action>
        </actions>
        ]]>
    </entry>
    <entry key="FolderStructureActionPerformed">'CodeGenFolderStructure' set to 'TargetEnvironmentSubfolder'.</entry>
    <entry key="CodeOutofDate">The Subsystem Reference block ''{0}'' cannot reuse unit test code because the unit test and its code are out of date.</entry>
    <entry key="ModelSSNotRLS">Subsystem Reference block ''{0}'' cannot generate code that can be reused across models. As a result, it cannot reuse unit test code. </entry>
    <entry key="ErrorDuringUnitTestSetup">Errors encountered during setting up of unit tests</entry>
    <entry key="SSMustBeAtomicForChecksumGeneration">Subsystem blocks ''{0}'' and ''{1}'' must be atomic to compute signature. </entry>
    <entry key="SSMustBeActiveForChecksumGeneration">Subsystem block ''{0}'' must be active to compute signature. </entry>
    <entry key="InputMustBeSubsystemBlock">Input must be a Subsystem block.</entry>
    <entry key="InputMustBeAtomicSS">Input must be an atomic Subsystem block.</entry>
    <entry key="InputMustBeSSRefBlock">Input must be a Subsystem Reference block.</entry>
    <entry key="NoSubsystemCodeGenerated">No new code was generated for subsystem ''{0}''.</entry>
    <entry key="InputMustBeNonVirtualSS">Subsystem block ''{0}'' must be nonvirtual to compute signature.
        <![CDATA[
            <actions>
                <action id="help" type="suggestion">
                    <cmd>helpview('Simulink', 'VirtualBlocks');</cmd>
                    <msg id="MATLAB:MException:MoreInformation"></msg>
                </action>
            </actions>
        ]]>
    </entry>
    <entry key="MismatchedSubDomainType">Subsystem Reference block ''{0}'' expects a subsystem in ''{1}'' sub-domain, but ''{2}'' is in ''{3}'' sub-domain.</entry>
    <entry key="MSVCBuild">Unit test ''{0}'' specifies the template makefile to be 'RTW.MSVCBuild'. This is currently not supported for unit test code generation.</entry>
    <entry key="SaveFileForSignatureGen">Unable to generate signature for ''{0}'' because parent Subsystem Reference block ''{1}'' refers to a modified subsystem file ''{2}''. Save ''{2}'' and generate signature.</entry>
  
  <!--- Diagnostic messages related to subsystem reference -->
      <entry key="CannotCrossSSRefBoundaryByParamRWBlock">Cannot access block parameter of ''{0}'' across the boundary of Subsystem Reference block ''{1}'' in accelerator mode.</entry>
      <entry key="CannotCrossSSRefBoundaryByStateRWBlock">Cannot access block state of ''{0}'' across the boundary of Subsystem Reference block ''{1}'' in accelerator mode.</entry>
      <entry key="UnsupportedExecutionDomainInAccelMode">'SetExecutionDomain' block parameter must be set to 'off' for simulating Subsystem Reference block ''{0}'' in accelerator mode.</entry>
      <entry key="NoUnitTestSelectedForSSRef">Subsystem ''{0}'' must have at least one unit test for simulating Subsystem Reference block ''{1}'' in accelerator mode.</entry>
      <entry key="UnsupportedSSRefWithGlobalDSM">Failed to generate accelerator mode artifacts for test harness ''{0}''. Global data store memory is not supported for simulating subsystem reference blocks in accelerator mode.</entry>
      <entry key="UnsupportedSSRefInAccelModeWithGlobalDSMBLock">Subsystem Reference block ''{0}'' contains global data store memory. This configuration in not supported for simulating Subsystem Reference block ''{0}'' in accelerator mode.
       <![CDATA[
        <actions exclusiveFixIts="yes">
            <action type="fixit">
                <cmd>Simulink.SubsystemReference.internal.SSRefFixits.fixSimulationModeSetToNormal(''{0}'');</cmd>
                <txt>Set 'SimulationMode' parameter to 'Normal'</txt>
            </action>
        </actions>
        ]]>
      </entry>
      <entry key="SimulationModeSetToNormalActionPerformed">'SimulationMode' set to 'Normal'.</entry>
      <entry key="UnsupportedSSRefCUTInAccelMode">The component under test ''{0}'' in a test harness cannot be simulated in accelerator mode.
      <![CDATA[
        <actions exclusiveFixIts="yes">
            <action type="fixit">
                <cmd>Simulink.SubsystemReference.internal.SSRefFixits.fixSimulationModeSetToNormal(''{0}'');</cmd>
                <txt>Set 'SimulationMode' parameter to 'Normal'</txt>
            </action>
        </actions>
        ]]>
      </entry>
      <entry key="MEXFileNotFound">Unable to simulate Subsystem Reference block ''{0}'' in accelerator mode because MEX-file ''{1}'' in not present in the path.</entry>
      <entry key="FailedToGeneratedAccelModeArtifactsNoReusableCode">Failed to generate accelerator mode artifacts for test harness ''{0}'' because reusable code is not generated.</entry>
      <entry key="FailedToGeneratedAccelModeArtifactsForNoUnitTest">Subsystem file ''{0}'' must have at least one unit test to generate accelerator mode artifacts.</entry>
      <entry key="UnsupportedBusElementPorts">Failed to generate accelerator mode artifacts for subsystem file ''{0}'' because it contains 'In Bus Element' or 'Out Bus Element' blocks at its interface.</entry>
      <entry key="UnsupportedMaskParameters">Failed to generate accelerator mode artifacts for subsystem file ''{0}'' because its system mask contains mask initialization code.</entry>
      <entry key="UnsupportedFcnCallSSRef">Function-call subsystem references are not supported for accelerator mode simulations.</entry>
      <entry key="UnsupportedTriggeredSSRef">Triggered subsystem references are not supported for accelerator mode simulations.</entry>
      <entry key="NumIOPortMismatch">Number of {0} ({1,number,integer}) at root level of subsystem file "{2}" does not match number of {0} ({3,number,integer}) listed in generated code interface. An optimization procedure might be the cause of the mismatch. In accelerator mode simulation of a subsystem, graphical interface and generated code interface must match.</entry>
      <entry key="CodeInfoInportUnsupportedImplementation">The following inports have implementations that are not supported for accelerator mode simulations:\n\n{0}\n</entry>
      <entry key="CodeInfoOutportUnsupportedImplementation">The following outports have implementations that are not supported for accelerator mode simulations:\n\n{0}\n</entry>
      <entry key="UnsupportedZeroCrossing">Failed to generate accelerator mode artifacts for subsystem file ''{0}'' because its reusable code contains zero-crossing logic.</entry>
      <entry key="ReadOnlyDataInterface">Failed to generate accelerator mode artifacts for subsystem file ''{0}'' because it contains read-only data element for root port ''{1}'' in generated code.</entry>
      <entry key="UnsupportedVariantBlocks">Failed to generate accelerator mode artifacts for subsystem file ''{0}'' because it contains variant block ''{1}'' with variant activation time set to ''{2}''. Variant blocks must have 'VariantActivationTime' set to 'update diagram' or 'update diagram analyze all choices' for generating simulation mode artifacts.</entry>
      <entry key="UnsupportedLoadInitialStateInTopModel">Model ''{0}'' is configured to load initial states from workspace, which is not supported when simulating Subsystem Reference block ''{1}'' in acceleration mode. Set configuration parameter 'LoadInitialState' to 'off' or choose normal mode simulation.</entry>
      <entry key="UnsupportedCodeInfoParametersWithExportedClass">Failed to generate accelerator mode artifacts for subsystem file ''{0}'' because it uses parameters ''{1}'' with exported storage class.</entry>
      <entry key="NoMatchingSignatureFoundForAccelSSRef">Unable to simulate Subsystem Reference block ''{0}'' in accelerator mode. Block ''{0}'' must match at least one unit test signature.</entry> 
  </message>
</rsccat>

<!-- LocalWords:  SSRefFixits
-->
