<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright 2025 The MathWorks, Inc.-->

<rsccat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" locale="ja_JP" product="Simulink" xsi:noNamespaceSchemaLocation="../../resources/schema/msgcat.xsd">
  <message>
    <entry key="CustomCodeParsingFailed">カスタム コードの解析が失敗し、次のメッセージが表示されました: {0}</entry>
    <entry key="Title">コード インポーター</entry>
    <entry key="SaveDialogTitle">コード インポーターの設定をファイルに保存</entry>
    <entry key="ConfirmationDialogTitle">Simulink コード インポーター</entry>
    <entry key="ConfirmationDialogMsg">閉じる前にインポート設定を保存しますか?</entry>
    <entry key="ConfirmationDialogButtonYesLabel">はい</entry>
    <entry key="ConfirmationDialogButtonNoLabel">いいえ</entry>
    <entry key="ProjectDialogTitle">既存のプロジェクト ファイルを指定</entry>
    <entry key="AddToProjectSuccessDlg">プロジェクトに追加</entry>
    <entry key="AddToProjectSuccessMsg">プロジェクトに正常に追加されました</entry>
    <entry key="InferHdrConfirmationDlgTitle">インターフェイス ヘッダーのオートフィル</entry>
    <entry key="InferHdrConfirmationDlgMsg">次に進むと、''{0}'' 内の前の値がオートフィルされたヘッダーに置き換えられます。続行しますか?</entry>
    <entry key="InferHdrConfirmationDlgYesLabel">はい</entry>
    <entry key="InferHdrConfirmationDlgNoLabel">いいえ</entry>
    <entry key="Topic_Welcome">ようこそ</entry>
    <entry key="Topic_SimulinkLib">設定</entry>
    <entry key="Topic_ConfigCode">カスタム コードの指定</entry>
    <entry key="Topic_Analyze">解析</entry>
    <entry key="Topic_WhatToImport">構成</entry>
    <entry key="Topic_Options">オプション</entry>
    <entry key="Topic_Finish">インポート</entry>
    <entry key="status">ステータス</entry>
    <entry key="QuestionHelpTitle">検討事項</entry>
    <entry key="OptionHelpTitle">選択したオプションについて</entry>
    <entry key="back">戻る</entry>
    <entry key="next">次へ</entry>
    <entry key="save">保存</entry>
    <entry key="startNew">開始</entry>
    <entry key="loadButton">読み込み</entry>
    <entry key="finish">終了</entry>
    <entry key="empty_selection">回答が選択されていません。</entry>
    <entry key="error">エラー</entry>
    <entry key="needNumericValue">数値を入力してください。</entry>
    <entry key="categoryTitle">カテゴリ</entry>
    <entry key="parameterTitle">パラメーター</entry>
    <entry key="newValueTitle">新しい値</entry>
    <entry key="oldValueTitle">古い値</entry>
    <entry key="sbxupdate">サンドボックスの更新</entry>
    <entry key="addtoprjBtn">追加</entry>
    <entry key="addtoprjLabel">Simulink ライブラリ ファイルまたはモデル ファイルをプロジェクトに追加しますか? </entry>
    <entry key="inferBtnToolTip">指定したソース ファイルからのインターフェイス ヘッダーのオートフィル</entry>
    <entry key="slInterfaceTableNameColumnLabel">名前</entry>
    <entry key="slInterfaceTableButtonColumnLabel">Simulink インターフェイス</entry>
    <entry key="slInterfaceTableButtonDefInterface">定義</entry>
    <entry key="slInterfaceTableButtonModiInterface">変更</entry>
    <entry key="slInterfaceTableButtonValInterface">検証</entry>
    <entry key="existingBlocksTableNameColumnLabel">名前</entry>
    <entry key="existingBlocksTableBlockColumnLabel">既存のインポート済みブロック</entry>
    <entry key="slInterfaceQuestionDlgTitle">"{0}" の Simulink インターフェイスの構成</entry>
    <entry key="slInterfaceQuestionConstructorLabel">クラスのインスタンス化用コンストラクター:</entry>
    <entry key="slInterfaceQuestionInitLabel">初期化メソッド:</entry>
    <entry key="slInterfaceQuestionTermLabel">クリーンアップ メソッド:</entry>
    <entry key="slInterfaceQuestionStepLabel">出力コード用のメソッド:</entry>
    <entry key="Question_Start">
                        &lt;center&gt;&lt;b&gt;&lt;u&gt;コード インポーター&lt;/u&gt;&lt;/b&gt;&lt;/center&gt;&lt;br/&gt;&lt;br/&gt; &lt;p&gt;コード インポーターを使用すると、モデル化、検証、妥当性確認のためにカスタム コードをインポートできます。&lt;/p&gt; &lt;br/&gt;&lt;br/&gt; &lt;p&gt;コード インポーターは次を行います。&lt;ul&gt; &lt;li&gt;カスタム コードの関数、クラス、型、グローバル変数、およびそれらの依存関係を解析する。&lt;/li&gt; &lt;li&gt;カスタム コードを、呼び出し可能な関数、クラス、型が含まれる Simulink ライブラリまたはモデルにインポートする。&lt;/li&gt; &lt;li&gt;Simulink Test ファイルを作成する (Simulink Test のライセンスが必要)。&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;</entry>
    <entry key="Question_Start_SLTest">
                        &lt;center&gt;&lt;b&gt;&lt;u&gt;コード インポーター&lt;/u&gt;&lt;/b&gt;&lt;/center&gt;&lt;br/&gt;&lt;br/&gt; &lt;p&gt;コード インポーターを使用すると、モデル化、検証、妥当性確認のためにカスタム コードをインポートできます。&lt;/p&gt; &lt;br/&gt;&lt;br/&gt; &lt;p&gt;コード インポーターは次を行います。&lt;ul&gt; &lt;li&gt;カスタム コードの関数、型、グローバル変数、およびそれらの依存関係を解析する。&lt;/li&gt; &lt;li&gt;カスタム コードを、呼び出し可能な関数と型が含まれる Simulink ライブラリまたはモデルにインポートする。&lt;/li&gt; &lt;li&gt;Simulink Test ファイルを作成する。&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;</entry>
    <entry key="Option_Start_New">新規インポートの開始</entry>
    <entry key="Option_Start_Existing">以前のインポートで保存したファイルの読み込み</entry>
    <entry key="Option_Start_SelectFile">ファイルの選択:</entry>
    <entry key="OptionHint_Start_SelectFile">以前のインポートで保存したファイルを選択します。</entry>
    <entry key="Option_ConfigCodeImporter_Language">インポートする言語の選択:</entry>
    <entry key="Option_ConfigCodeLibrary_ProjectName">ライブラリ名またはモデル名: </entry>
    <entry key="OptionHint_ConfigCodeLibrary_ProjectName">出力 Simulink ライブラリまたはモデル、およびアーティファクトのファイル名を指定します。 </entry>
    <entry key="Option_ConfigCodeLibrary_ProjectFolder">出力フォルダー: </entry>
    <entry key="OptionHint_ConfigCodeLibrary_ProjectFolder">出力 Simulink ライブラリまたはモデル、およびアーティファクトのファイルを保存するフォルダーを指定します。 </entry>
    <entry key="Option_ConfigCodeLibrary_LibraryBrowserName">Simulink ライブラリ ブラウザー名: </entry>
    <entry key="OptionHint_ConfigCodeLibrary_LibraryBrowserName">Simulink ライブラリ ブラウザーに表示される名前を指定します。 </entry>
    <entry key="Option_OptionsCreateSLBlocks_Checkbox">生成されたライブラリを Simulink ライブラリ ブラウザーに追加する。</entry>
    <entry key="OptionHint_OptionsCreateSLBlocks_Checkbox">これを選択すると、生成されたライブラリが Simulink ライブラリ ブラウザーに追加されます。</entry>
    <entry key="Question_ConfigCodeImporter"> &lt;b&gt; 出力 Simulink ライブラリまたはモデルの名前と出力フォルダーの指定:&lt;/b&gt;
    </entry>
    <entry key="QuestionHint_ConfigCodeImporter"> ライブラリ名またはモデル名: 関数またはクラスをインポートする Simulink ライブラリまたはモデルの名前です。この名前は、生成される Simulink アーティファクト ファイルにも使用されます。 &lt;br/&gt;&lt;br/&gt; 出力フォルダー: 出力 Simulink ライブラリまたはモデル、およびアーティファクトのファイルを保存するフォルダーです。指定したライブラリまたはモデルが出力フォルダーに存在しない場合、新しい Simulink ライブラリが出力フォルダーに生成されます。 &lt;br/&gt;&lt;br/&gt;
    </entry>
    <entry key="QuestionHint_ConfigCodeImporter_SLTest"> ライブラリ名またはモデル名: 関数またはクラスをインポートする Simulink ライブラリまたはモデルの名前です。この名前は、生成される Simulink アーティファクト ファイルにも使用されます。 &lt;br/&gt;&lt;br/&gt; 出力フォルダー: 出力 Simulink ライブラリまたはモデル、およびアーティファクトのファイルを保存するフォルダーです。指定したライブラリまたはモデルが出力フォルダーに存在しない場合、新しい Simulink ライブラリが出力フォルダーに生成されます。 &lt;br/&gt;&lt;br/&gt; カスタム コードのサブセットを分離してテストする場合は &lt;b&gt;[C コード ユニット テスト]&lt;/b&gt; を選択します。 &lt;br/&gt;&lt;br/&gt; カスタム コード全体をテストする場合は &lt;b&gt;[統合テスト]&lt;/b&gt; を選択します。
    </entry>
    <entry key="OutputFolderUnspecified">出力フォルダーを指定しなければなりません。 </entry>
    <entry key="Question_ConfigCodeLibrary">&lt;b&gt;カスタム コード情報の指定:&lt;/b&gt;</entry>
    <entry key="QuestionHint_ConfigCodeLibrary">&lt;p&gt;カスタム コード オプションでは、パスは絶対パスか、出力フォルダーに対する相対パスでなければなりません。&lt;/p&gt; &lt;p&gt;定義を指定する場合に複数の定義またはフラグを区切るには、';' を使用します。"-D" はオプションです。&lt;/p&gt; </entry>
    <entry key="QuestionHint_ConfigCodeLibrary_InferHeaders">指定したソース ファイルからインターフェイス ヘッダーを計算するには、{0} をクリックします </entry>
    <entry key="Option_ConfigCodeCompiler_Language">言語:</entry>
    <entry key="OptionHint_ConfigCodeCompiler_Language">カスタム コードのコンパイルと解析に使用する言語を指定します。</entry>
    <entry key="Option_ConfigCodeCompiler_Defines">定義:</entry>
    <entry key="OptionHint_ConfigCodeCompiler_Defines">コンパイラのコマンド ラインに追加するプリプロセッサ マクロの定義を指定します。</entry>
    <entry key="Option_ConfigCodeLibrary_SourceFiles">ソース ファイル:</entry>
    <entry key="OptionHint_ConfigCodeLibrary_SourceFiles">インポートするソース ファイルを指定します。</entry>
    <entry key="Option_ConfigCodeLibrary_IncludeFiles">インターフェイス ヘッダー:</entry>
    <entry key="OptionHint_ConfigCodeLibrary_IncludeFiles">インポートされるインターフェイス ヘッダーを指定します。</entry>
    <entry key="Option_ConfigCodeLibrary_IncludePaths">インクルード ディレクトリ:</entry>
    <entry key="OptionHint_ConfigCodeLibrary_IncludePaths">コンパイルされたターゲットに含めるファイルが格納されているフォルダー パスのリストを指定します。</entry>
    <entry key="Option_ConfigCodeLibrary_Libraries">ライブラリ:</entry>
    <entry key="OptionHint_ConfigCodeLibrary_Libraries">リンクするカスタム オブジェクト コードが格納されているライブラリのリストを指定します。</entry>
    <entry key="Option_ConfigCodeLibrary_MetadataFile">メタデータ ファイル:</entry>
    <entry key="OptionHint_ConfigCodeLibrary_MetadataFile">メタデータ ファイルのパスを指定します。</entry>
    <entry key="Option_ConfigCodeCompiler_CompilerFlags">コンパイラ フラグ:</entry>
    <entry key="OptionHint_ConfigCodeCompiler_CompilerFlags">追加のコンパイラ フラグを指定します。</entry>
    <entry key="Option_ConfigCodeCompiler_LinkerFlags">リンカー フラグ:</entry>
    <entry key="OptionHint_ConfigCodeCompiler_LinkerFlags">追加のリンカー フラグを指定します。</entry>
    <entry key="Question_ConfigUpdateMode">&lt;b&gt;指定された出力 Simulink ライブラリまたはモデル内のブロックは、次の表に記載された {0} を既にインポートしています。既存のブロックを置き換えるか、{0} を新しいブロックとしてインポートすることができます。&lt;/b&gt;</entry>
    <entry key="Option_UpdateExisting">既存のブロックを置き換える</entry>
    <entry key="Option_Overwrite">新しいブロックとしてインポートする</entry>
    <entry key="Question_WhatToImportAnalyze">&lt;p&gt;&lt;b&gt;[次へ]&lt;/b&gt; をクリックして以下を行います。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;カスタム コードの関数、クラス、型、グローバル変数、およびそれらの依存関係を解析する。&lt;/li&gt;&lt;/ul&gt;</entry>
    <entry key="Question_WhatToImportFunction">&lt;b&gt;インポートする関数の選択:&lt;/b&gt;</entry>
    <entry key="QuestionHint_WhatToImportFunction">&lt;p&gt;選択した各関数に C Caller ブロックが生成されます。&lt;/p&gt; &lt;p&gt;インポートする関数を少なくとも 1 つ選択してください。&lt;/p&gt;</entry>
    <entry key="Option_WhatToImportFunction_EntryFunctions">エントリポイント関数のみを表示</entry>
    <entry key="OptionHint_WhatToImportFunction_FunctionNameFilter">名前により関数を検索します</entry>
    <entry key="Question_PortSpecificationsMapping">&lt;b&gt;以前に選択した関数について、ブロックの端子仕様を編集します。&lt;/b&gt;</entry>
    <entry key="QuestionHint_PortSpecificationsMapping">&lt;p&gt;C Caller ブロックは、別途指定しない限り、既定の端子仕様で生成されます。&lt;/p&gt;&lt;p&gt; 端子仕様は、出力 Simulink ライブラリまたはモデル内にインポートされた C Caller ブロックでも更新できます。&lt;/p&gt;</entry>
    <entry key="Question_WhatToImportClass">&lt;b&gt;インポートするクラスの選択:&lt;/b&gt;</entry>
    <entry key="QuestionHint_WhatToImportClass">&lt;p&gt;選択した各クラスについて、C Function ブロックが生成されます。&lt;/p&gt; &lt;p&gt;インポートするクラスを少なくとも 1 つ選択します。&lt;/p&gt;</entry>
    <entry key="OptionHint_WhatToImportClass_ClassNameFilter">名前によりクラスを検索します</entry>
    <entry key="Question_ClassSimulinkInterface">&lt;b&gt;以前に選択したクラスについて、Simulink インターフェイスを定義します。&lt;/b&gt;</entry>
    <entry key="QuestionHint_ClassSimulinkInterface"> &lt;p&gt; [インターフェイスの定義] をクリックして、コンストラクターとメソッドの選択、[端子とパラメーター] の編集、およびクラスのアルゴリズム スクリプトの編集のためのプロセスを開始します。&lt;/p&gt; &lt;p&gt;定義した Simulink インターフェイスを使用して C Function ブロックが生成されます。&lt;/p&gt; &lt;p&gt;Simulink インターフェイス設定は出力 Simulink ライブラリまたはモデル内にインポートされた C Function ブロックでも更新できます。&lt;/p&gt;</entry>
    <entry key="OptionHint_ClassSimulinkInterface_ClassNameFilter">名前によりクラスを検索します</entry>
    <entry key="Question_WhatToImportType">&lt;b&gt;インポートする型の選択:&lt;/b&gt;</entry>
    <entry key="QuestionHint_WhatToImportType"> &lt;p&gt; 以前に選択した関数またはクラスに必須の型は自動的に選択されます。&lt;/p&gt; &lt;p&gt;選択されたすべての型は、出力 Simulink ライブラリまたはモデルにリンクされる Simulink データ ディクショナリにインポートされます。データ ディクショナリがリンクされていない場合、新しいデータ ディクショナリが生成されます。&lt;/p&gt;</entry>
    <entry key="Option_WhatToImportType_ImportToFile">型をファイルにインポート</entry>
    <entry key="OptionHint_WhatToImportType_ImportToFile">このオプションは、struct 型を ''project_name_types.mat'' ファイルにインポートし、enum 型を MATLAB クラス ファイルにインポートする場合に選択します。</entry>
    <entry key="OptionHint_WhatToImportType_TypeNameFilter">名前により型を検索します</entry>
    <entry key="Question_OptionsGlobalIO">&lt;b&gt;関数インターフェイスとしてのグローバル変数:&lt;/b&gt;</entry>
    <entry key="QuestionHint_OptionsGlobalIO">このパラメーターが選択されている場合、関数によってアクセスされるグローバル変数は、カスタム コード解析を使用する関数インターフェイスとして自動的に推定されます。詳細については、&lt;a href="matlab:helpview('simulink', 'Tag_ConfigSet_Sim_CustomCodeGlobalsAsFunctionIO')"&gt;{0}&lt;/a&gt; を参照してください。</entry>
    <entry key="Option_OptionsGlobalIO_Checkbox">グローバル変数を関数インターフェイスとして自動的に推定する</entry>
    <entry key="OptionHint_OptionsGlobalIO_Checkbox">関数がそれらのインターフェイスとしてグローバル変数を使用しない場合、またはグローバル変数を関数インターフェイスとして手動で設定する場合は、このパラメーターを選択解除します。</entry>
    <entry key="Question_Finish">インポート設定の概要:</entry>
    <entry key="Question_NextStep">&lt;center&gt;&lt;b&gt;&lt;u&gt;コードが正常にインポートされました&lt;/u&gt;&lt;/b&gt;&lt;/center&gt;&lt;br/&gt;&lt;br/&gt; &lt;p&gt;&lt;b&gt;次の手順:&lt;/b&gt;&lt;/p&gt;{0}</entry>
    <entry key="OutputFolderCDHyperlink">MATLAB の現在のフォルダーを出力フォルダーに変更します。</entry>
    <entry key="OpenLibraryHyperlink">Simulink ライブラリまたはモデルを開く</entry>
    <entry key="Option_ConfigProject_AddToProject"/>
    <entry key="OptionHint_ConfigProject_AddToProject">既存のプロジェクト ファイルを指定</entry>
    <entry key="Question_ConfigTestType">&lt;b&gt;テスト方法を指定:&lt;/b&gt;</entry>
    <entry key="Option_ConfigTestType_UnitTest">C コード ユニット テスト</entry>
    <entry key="OptionHint_ConfigTestType_UnitTest">&lt;p&gt;選択したオプションでは、指定したソース ファイルからサンドボックスが作成されます。サンドボックスは以下で構成されます: &lt;ul&gt; &lt;li&gt;インターフェイス ヘッダー ファイル。&lt;/li&gt; &lt;li&gt;未定義のシンボルに対応する自動スタブ ファイル。&lt;/li&gt; &lt;li&gt;未定義のシンボルを手動で編集できる手動スタブ ファイル。&lt;/li&gt; &lt;/ul&gt;&lt;/p&gt;</entry>
    <entry key="Option_ConfigTestType_PackageTest">統合テスト</entry>
    <entry key="OptionHint_ConfigTestType_PackageTest">選択したオプションでは、不足しているシンボルのスタブを生成せずに、指定したカスタム コードがインポートされます。</entry>
    <entry key="Question_ConfigSandbox">&lt;b&gt;出力テストのサンドボックス モードを指定:&lt;/b&gt;</entry>
    <entry key="QuestionHint_ConfigSandbox">&lt;p&gt;最小限の集約されたヘッダー ファイルと、未定義のシンボル用のスタブをもつ、指定された C コード ソース ファイル用のサンドボックスを生成するには、&lt;strong&gt;[集約されたヘッダーの生成]&lt;/strong&gt; を選択します。このサンドボックス モードでは、単一のソース ファイルのみがサポートされます。&lt;/p&gt; &lt;p&gt;C コードの前処理済みバージョンと未定義のシンボルのスタブが含まれるサンドボックスを生成するには、&lt;strong&gt;[前処理されたソースの生成]&lt;/strong&gt; を選択します。&lt;/p&gt; &lt;p&gt;変更のない元の C コードを使用してサンドボックスを生成するには、&lt;strong&gt;[元のソースを使用]&lt;/strong&gt; を選択します。&lt;/p&gt;</entry>
    <entry key="Option_ConfigSandbox_AggregatedHeader">集約されたヘッダーの生成</entry>
    <entry key="OptionHint_ConfigSandbox_AggregatedHeader">&lt;p&gt;指定した、&lt;b&gt;集約されたヘッダー サンドボックス&lt;/b&gt;が、次の設定で生成されます&lt;/p&gt;</entry>
    <entry key="Option_ConfigSandbox_PreprocessedSource">前処理されたソースの生成</entry>
    <entry key="OptionHint_ConfigSandbox_PreprocessedSource">&lt;p&gt;指定した、&lt;b&gt;前処理されたソース サンドボックス&lt;/b&gt;が、次の設定で生成されます&lt;/p&gt;</entry>
    <entry key="Option_ConfigSandbox_UseOriginalCode">元のソースを使用</entry>
    <entry key="OptionHint_ConfigSandbox_UseOriginalCode">&lt;p&gt;指定した、&lt;b&gt;元のソース サンドボックスの使用&lt;/b&gt;が、次の設定で生成されます&lt;/p&gt;</entry>
    <entry key="Question_ConfigSandboxSettings">&lt;b&gt;出力テスト サンドボックスの設定を指定:&lt;/b&gt;</entry>
    <entry key="Option_ConfigSandbox_CopySources">ソース ファイルのコピー</entry>
    <entry key="OptionHint_ConfigSandbox_CopySources">&lt;ul&gt;&lt;li&gt;指定したソース ファイルが、出力テスト サンドボックスの ''src'' ディレクトリにコピーされます。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</entry>
    <entry key="Option_ConfigSandbox_CopyHeadersSources">ヘッダー ファイルとソース ファイルをコピー</entry>
    <entry key="OptionHint_ConfigSandbox_CopyHeadersSources">&lt;ul&gt;&lt;li&gt;&lt;p&gt;指定したヘッダー ファイルとソース ファイルが、出力テスト サンドボックスの ''include'' ディレクトリと ''src'' ディレクトリにそれぞれコピーされます。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</entry>
    <entry key="Option_ConfigSandbox_RemovePragmas">集約されたヘッダーからプラグマを削除</entry>
    <entry key="OptionHint_ConfigSandbox_RemovePragmas">&lt;ul&gt;&lt;li&gt;&lt;p&gt;集約されたヘッダーから ''#pragmas'' がすべて削除されます。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</entry>
    <entry key="Option_ConfigSandbox_RemovePragmasSource">前処理済みソースからプラグマを削除</entry>
    <entry key="OptionHint_ConfigSandbox_RemovePragmasSource">&lt;ul&gt;&lt;li&gt;&lt;p&gt;前処理済みソースから ''#pragmas'' がすべて削除されます。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</entry>
    <entry key="Option_ConfigSandbox_RemoveVarDefinition">集約されたヘッダーからグローバル変数の定義を削除</entry>
    <entry key="OptionHint_ConfigSandbox_RemoveVarDefinition">&lt;ul&gt;&lt;li&gt;&lt;p&gt;グローバル変数の定義がすべて削除され、集約されたヘッダーの extern 宣言に置き換えられます。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</entry>
    <entry key="Question_WhatToImportAnalyzeSandbox">&lt;p&gt;&lt;b&gt;[次へ]&lt;/b&gt; をクリックして以下を行います:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;カスタム コードを関数、型、グローバル変数、およびそれらの依存関係について解析する。&lt;/li&gt; &lt;li&gt;指定された設定に基づいてテスト サンドボックスを生成する。&lt;/li&gt; &lt;li&gt;未定義のシンボルのために自動スタブ ファイルを生成し、未定義のシンボルを手動で編集するために手動スタブ ファイルを生成する。&lt;/li&gt;&lt;/ul&gt;</entry>
    <entry key="Question_WhatToImportFinishSandbox">テスト サンドボックスが出力フォルダーに作成されています。{0} &lt;p&gt;&lt;b&gt;生成されたアーティファクト:&lt;/b&gt;&lt;/p&gt;{1} {2}&lt;br/&gt;&lt;p&gt;手動スタブ ファイルを変更した場合は &lt;b&gt;[サンドボックスの更新]&lt;/b&gt; をクリックしてください。&lt;br/&gt; メモ: サンドボックスを更新すると、自動スタブ ファイルが再生成されます。&lt;/p&gt;</entry>
    <entry key="SandboxFolderCDHyperlink">MATLAB の現在のフォルダーをサンドボックス フォルダーに変更します。</entry>
    <entry key="QuestionHint_WhatToImportFinishSandbox">  &lt;p&gt;自動スタブ ファイル: 自動的にスタブが作成された未定義のシンボルを格納したファイル。&lt;/p&gt;&lt;br/&gt; &lt;p&gt;手動スタブ ファイル: 未定義のシンボルのスタブを手動で編集できるファイル。&lt;/p&gt;&lt;br/&gt; &lt;p&gt;以下は常に再生成されるので変更しないでください。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;自動スタブ ファイル&lt;/li&gt; &lt;li&gt;指定されたソース ファイル&lt;/li&gt; &lt;li&gt;サンドボックスの ''include'' ディレクトリにあるヘッダー ファイル。&lt;/li&gt;&lt;/ul&gt;
</entry>
    <entry key="SandboxUpdateErrorUI">サンドボックス ファイルが変更されました。[サンドボックスの更新] をクリックしてサンドボックスを更新してください。</entry>
    <entry key="CustomCodeChangedSandboxUpdateErrorUI">''CustomCode'' セクションで指定されているカスタム コード ファイルが変更されました。[サンドボックスの更新] をクリックしてサンドボックスを更新してください。</entry>
    <entry key="AutostubSourceHyperlink">自動スタブのソース</entry>
    <entry key="AutostubHeaderHyperlink">自動スタブのヘッダー</entry>
    <entry key="ManualstubSourceHyperlink">手動スタブのソース</entry>
    <entry key="ManualstubHeaderHyperlink">手動スタブのヘッダー</entry>
    <entry key="Question_WhatToImportOverwriteSandbox">&lt;b&gt;指定した出力サンドボックスは既に存在します。既存のサンドボックスを更新するか上書きすることができます。&lt;/b&gt;</entry>
    <entry key="Option_WhatToImportOverwriteSandbox_Update">更新 - 手動スタブ ファイルに加えられた変更を保持</entry>
    <entry key="Option_WhatToImportOverwriteSandbox_Overwrite">上書き - 既存のサンドボックスを削除し、新しいサンドボックスを作成</entry>
    <entry key="Question_CreateTestHarness"> &lt;b&gt;テスト ハーネスの作成:&lt;/b&gt;</entry>
    <entry key="Option_CreateTestHarness_Auto">インポートされたすべての関数またはクラスにテスト ハーネスを自動的に作成</entry>
    <entry key="Option_CreateTestHarness_Skip">スキップ</entry>
  </message>
</rsccat>
