<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright 2025 The MathWorks, Inc.-->

<rsccat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" locale="ja_JP" product="Simulink" xsi:noNamespaceSchemaLocation="../../resources/schema/msgcat.xsd">
  <message>
    <entry key="StringInvalidInputTypeSetting">ブロック ''{1}'' の&lt;sldiag objui="inport" objparam="{0,number,integer}" objname="{1}"&gt;入力端子 {0,number,integer}&lt;/sldiag&gt; はデータ型 ''{2}'' の信号をサポートしません。信号はデータ型 string でなければなりません。</entry>
    <entry key="StringInvalidOutputTypeSetting">ブロック ''{1}'' の&lt;sldiag objui="outport" objparam="{0,number,integer}" objname="{1}"&gt;出力端子 {0,number,integer}&lt;/sldiag&gt; はデータ型 ''{2}'' の信号をサポートしません。信号はデータ型 string でなければなりません。</entry>
    <entry key="InvalidNumberofInputs">ブロック ''{0}'' には {1, number, integer} ～ {2, number, integer} 個の入力端子が必要ですが、現在の入力端子は {3, number, integer} 個です。</entry>
    <entry key="InvalidNumberofOutputs">ブロック ''{0}'' には {1, number, integer} ～ {2, number, integer} 個の出力端子が必要ですが、現在の出力端子は {3, number, integer} 個です。</entry>
    <entry key="InvalidFormatString">ブロック ''{1}'' の書式文字列 ''{0}'' は有効ではありません。</entry>
    <entry key="SL_DSCPT_STRLEN">入力 string の文字数を出力します。</entry>
    <entry key="SL_DSCPT_UINT8TOSTRING">uint8 ベクトルを string 信号に変換します。変換時に、入力ベクトルの各要素は ASCII 値として処理されます。\n\nたとえば、入力ベクトル [72 101 108 108 111] は string の "Hello" に変換されます。</entry>
    <entry key="SL_DSCPT_STRINGTOUINT8">string 信号を uint8 ベクトルに変換します。string の各文字は対応する ASCII 値に変換されます。\n\nたとえば、入力 string の “Hello” は [72 101 108 108 111] に変換されます。</entry>
    <entry key="SL_DSCPT_STR2NUM">入力 string を double 信号に変換します。</entry>
    <entry key="SL_DSCPT_STR2ENUM">入力 string を列挙型信号に変換します。</entry>
    <entry key="NoEnumValueFound">ブロック ''{2}'' の入力 string ''{0}'' は、列挙データ型 ''{1}'' のいずれの列挙値とも一致しません。</entry>
    <entry key="SL_DSCPT_STRCMP">2 つの入力 string を比較します。</entry>
    <entry key="SL_DSCPT_SUBSTR">string 信号から部分文字列を抽出します。部分文字列には、インデックス ''idx'' の文字から始まる ''len'' 個の文字が含まれます。\n\n''len'' により、部分文字列が string の末尾を超える場合、出力信号に含まれる文字数は ''len'' より少なくなります。\n\n[''idx'' から末尾までの string を出力] チェック ボックスがオンの場合、部分文字列には、''idx'' の文字から string 末尾までの文字が含まれます。\n\nたとえば、入力 string が “hello 123”、入力 ''idx'' が 1、入力 ''len'' が 5 の場合、出力は "hello" になります。ブロックは、1 から開始して次の 4 文字までの合計 5 文字の部分文字列 (hello) を抽出します。</entry>
    <entry key="SubstringIndexOutOfRange">ブロック ''{0}'' で、開始インデックスの値が範囲外です。開始インデックス ('idx') は、1 と入力 string の長さ ({1, number, integer}) の間でなければなりません。</entry>
    <entry key="SL_DSCPT_STRFIND">テキスト文字列 ''str'' 中で最初に出現するパターン文字列 ''sub'' のインデックスを返します。\n\nパターン文字列がテキスト文字列の一部でない場合は -1 を返します。</entry>
    <entry key="SL_DSCPT_TOSTRING">入力信号を string 信号に変換します。</entry>
    <entry key="StringCompareCaseSensitive">大文字と小文字を区別する</entry>
    <entry key="StringCompareNumOfChars">文字数:</entry>
    <entry key="StringValue">文字列:</entry>
    <entry key="MaximumLength">出力ベクトル サイズ:</entry>
    <entry key="SL_DSCPT_STRINGCONSTANT">''String'' パラメーターで指定された string を出力します。</entry>
    <entry key="StringBufferOverflow">ブロック ''{1}'' の&lt;sldiag objui="outport" objparam="{0, number, integer}" objname="{1}"&gt;出力端子 {0, number, integer}&lt;/sldiag&gt; での string の長さは {2, number, integer} 文字ですが、これはブロックによって指定されている最大長 {3, number, integer} より大きくなっています。</entry>
    <entry key="SubStringMismatchedStringDataTypes">ブロック ''{0}'' で、出力データ型は既に {1} に設定されていましたが、データ型 {2} が伝播されました。</entry>
    <entry key="SubstringIndexInvalidDataType">ブロック ''{0}'' で、&lt;sldiag objui="inport" objparam="2" objname="{0}"&gt;入力端子 2&lt;/sldiag&gt; は整数データ型をもたなければなりません。</entry>
    <entry key="SubstringLengthInvalidDataType">ブロック ''{0}'' で、&lt;sldiag objui="inport" objparam="3" objname="{0}"&gt;入力端子 3&lt;/sldiag&gt; は符号なし整数データ型をもたなければなりません。</entry>
    <entry key="NonExtendedASCIIString">ブロック ''{0}'' は拡張 ASCII 文字 (ISO-8859-1) のみをサポートしています。パラメーター ''{1}'' にサポートされていない文字が含まれています。</entry>
    <entry key="ParamValueExceedMaxStringLength">ブロック ''{1}'' のパラメーター ''{0}'' の値が {2} です。string の最大文字数は {3} 以下です。</entry>
    <entry key="VectorSizeExceedMaxStringLength">ブロック ''{1}'' の入力ベクトルのサイズ {0} が、string の最大文字数を超えています。string の最大文字数は {2} 以下です。</entry>
    <entry key="StringLengthOverFlow">''{0}'' のエラー: ''{1}'' の文字数が {2, number, integer} を超えています。</entry>
    <entry key="SL_PARAM_COMPLEXITY">実数/複素数: </entry>
    <entry key="InvalidComplexOutput">期待される出力は実数です。</entry>
    <entry key="SL_DSCPT_FORMATSTRING">''書式設定'' パラメーターと入力信号に基づいて出力 string 信号を構成します。''書式設定'' パラメーターにより入力信号の数が決まります。\n\nたとえば、''書式設定'' パラメーターを "%s is %f." に設定した場合、ブロックには string 信号と、single または double の信号という 2 つの入力が必要です。最初の入力が string の "Pi" で、2 番目の入力が double 値 3.14 の場合、出力は "Pi is 3.14" となります。</entry>
    <entry key="SL_DSCPT_SCANSTRING">入力 string をスキャンし、''Format'' パラメーターで指定された形式によって信号に変換します。結果を数値信号または string 信号として出力します。\n\nたとえば、''Format'' パラメーターを "%s is %f." に設定した場合、ブロックは string 信号と single 信号という 2 つの部分を出力します。入力が string の "Pi is 3.14" の場合、出力は "Pi" と "3.14" の 2 つになります。</entry>
    <entry key="SL_DSCPT_STRCAT">複数の入力 string を連結して 1 つの出力 string を形成します。</entry>
    <entry key="SL_PARAM_INPUTFORMAT">書式設定:</entry>
    <entry key="InvalidInputDataType">ブロック ''{1}'' の&lt;sldiag objui="inport" objparam="{0, number, integer}" objname="{1}"&gt;入力端子 {0, number, integer}&lt;/sldiag&gt; はデータ型 ''{2}'' の信号をサポートしません。入力端子にはデータ型 ''{3}'' の信号が必要です。</entry>
    <entry key="InvalidInputDataTypeFloat">ブロック ''{1}'' の&lt;sldiag objui="inport" objparam="{0, number, integer}" objname="{1}"&gt;入力端子 {0, number, integer}&lt;/sldiag&gt; はデータ型 ''{2}'' の信号をサポートしません。入力端子にはデータ型 ''single'' または ''double'' の信号が必要です。</entry>
    <entry key="InvalidInputDataTypeInteger">ブロック ''{1}'' の&lt;sldiag objui="inport" objparam="{0, number, integer}" objname="{1}"&gt;入力端子 {0, number, integer}&lt;/sldiag&gt; はデータ型 ''{2}'' の信号をサポートしません。この入力端子にはデータ型 ''{3}'' の使用を検討してください。</entry>
    <entry key="InvalidInputDataTypeUnsupportedInteger">ブロック ''{1}'' の&lt;sldiag objui="inport" objparam="{0, number, integer}" objname="{1}"&gt;入力端子 {0, number, integer}&lt;/sldiag&gt; は書式指定子 ''{2}'' をサポートしません。整数の書式指定子は、[ハードウェア実行] のデバイスの詳細設定の整数型を 8、16、32 または 64 のビット数と一致させなければなりません。</entry>
    <entry key="InvParameterDatatypeNotSupportString">パラメーター ''{0}'' で指定されている string データ型は、ブロック ''{1}'' でサポートされていません。</entry>
    <entry key="InvalidInputDataTypeString">ブロック ''{1}'' の&lt;sldiag objui="inport" objparam="{0, number, integer}" objname="{1}"&gt;入力端子 {0, number, integer}&lt;/sldiag&gt; はデータ型 ''{2}'' の信号をサポートしません。入力端子にはデータ型 ''string'' の信号が必要です。</entry>
    <entry key="OnlyScalarString">ブロック ''{1}'' のパラメーター ''{0}'' はスカラー string 値のみを受け入れます。Simulink はまだ string の配列をサポートしていません。</entry>
    <entry key="ParameterValueIsNotString">ブロック ''{1}'' のパラメーター ''{0}'' は string 値のみを受け入れます。式 ''{2}'' の評価値は string ではありません。</entry>
    <entry key="CompareAll">string 全体</entry>
    <entry key="CompareFirstN">最初の N 文字</entry>
    <entry key="Compare_Option">オプションの比較:</entry>
    <entry key="InheritMaximumLength">入力から最大長を継承</entry>
    <entry key="StringFromIdxToEnd">''idx'' から末尾までの string を出力</entry>
    <entry key="ScanNotAllOutputsWritten">ブロック ''{0}'' で、入力 string 信号が [形式] パラメーターと一致しません。{2,number,integer} 個中 {1,number,integer} 個の出力端子が正常に割り当てられました。</entry>
    <entry key="ScanStringInvalidIntegerType">ブロック ''{1}'' の&lt;sldiag objui="outport" objparam="{0,number,integer}" objname="{1}"&gt;出力端子 {0,number,integer}&lt;/sldiag&gt; で、''{2}'' 指定子が、ターゲットの整数幅 {3,number,integer} ビットでサポートされていません。16、32、64 ビットの整数幅のみがサポートされています。別の長さ指定子の使用を検討してください。</entry>
    <entry key="NoC89SupportForBlock">Failed to generate C code for block {0}. A common solution is to set ''Language standard'' to ''C99 (ISO)''.
      &lt;actions exclusiveFixIts="yes"&gt;
         &lt;action type="fixit"&gt;
           &lt;cmd&gt;configset.internal.fixIt(''{0}'',''TargetLangStandard'',''C99 (ISO)'')&lt;/cmd&gt;
           &lt;txt&gt;Select the ''C99 (ISO)'' &lt;sldiag objui="configset" objparam="TargetLangStandard"&gt;Language standard&lt;/sldiag&gt;.&lt;/txt&gt;
         &lt;/action&gt;
      &lt;/actions&gt;
    </entry>
    <entry key="InvStringSignalAsBusElement"> ''{1}'' の要素 ''{0}'' は無効な string データ型です: </entry>
    <entry key="InvPrmSettingWithStringType">出力データ型が string の場合、ブロック ''{0}'' のパラメーター ''{1}'' に無効な設定があります。</entry>
    <entry key="RapidAccelNotSupported"> モデルに Simulink の string データ型が含まれる場合、ラピッド アクセラレータ シミュレーションはサポートされません。 </entry>
    <entry key="RapidAccelCmdSimNotSupported">モデルに Simulink の string データ型が含まれる場合、MATLAB コマンド ライン (関数 ''sim'') からのラピッド アクセラレータ シミュレーションはサポートされません。代わりに、Simulink エディターからモデルのシミュレーションを実行してください。</entry>
    <entry key="ExtModeSimNotSupported"> モデルに Simulink の string データ型が含まれる場合、エクスターナル モード シミュレーションはサポートされません。 </entry>
    <entry key="AsciiToStringOverflowTruncation"> ''{0}'' の入力ベクトルには、すべての文字を格納するための ''{1, number, integer}'' バイトのバッファー サイズと、末尾に null 終端が必要です。この必要なバッファー サイズが、コンフィギュレーション パラメーター [動的サイズ文字列のバッファー サイズ] によって指定される動的な文字列バッファーのサイズ (''{2,number, integer}'' バイト) を超過しています。生成されるコードに対して、ASCII To String ブロックは ''{3,number, integer}'' バイトのバッファーに収まるように文字列出力を打ち切ります。打ち切りを避けるには、文字列バッファーのサイズを増やすことを検討してください。 </entry>
    <entry key="Contains">含む:</entry>
    <entry key="StartsWith">開始:</entry>
    <entry key="EndsWith">終了:</entry>
    <entry key="ContainsDescription">string (str) はパターン (sub) を含むか、あるいはパターン (sub) で開始または終了するかを判断します。</entry>
    <entry key="CountDescription">string (str) 内でのパターン (sub) の出現回数をカウントします。オーバーラップはカウントされません。オーバーラップするパターンが 2 回出現した場合、オーバーラップは 1 回のみカウントされます。</entry>
    <entry key="Count">カウント</entry>
    <entry key="ContainsFunction">関数: </entry>
    <entry key="OutputOverflowError">ブロック ''{0}'' の端子 {1,number,integer} の出力は {2,number,integer} であり、現在のデータ型 ''{3}'' をオーバーフローしています。出力値に適合する別の出力データ型の使用を検討してください。 </entry>
    <entry key="TargetDataTypeNotInSupportedList">ブロック ''{0}'' の出力信号は、データ型 ''{1}'' の信号を駆動しています。このブロックの出力データ型は ''{2}'' でなければなりません。</entry>
    <entry key="UnsupportedCPPStringInBus">[イネーブル端子を表示する] が選択されていて、string が C++ std::string として生成される場合、Delay ブロック ''{0}'' は string 要素をもつバスをサポートしません。</entry>
    <entry key="StringStripCharNotEqualOne">''{0}'' の [文字] 設定が無効です: ''{1}'' に複数の文字が含まれています。複数の文字の削除はサポートされていません。</entry>
    <entry key="StripLeft">左側から削除</entry>
    <entry key="StripRight">右側から削除</entry>
    <entry key="StripBoth">左側と右側から削除</entry>
    <entry key="StripChar_Options">取り除く文字</entry>
    <entry key="StripCharValue">文字</entry>
    <entry key="StripWhiteSpace">空白、タブ、改行</entry>
    <entry key="ReplaceDescription">出現するすべての古い部分文字列を新しい部分文字列で置き換えます</entry>
    <entry key="Replace">置換</entry>
    <entry key="Erase">消去</entry>
    <entry key="ReplaceBetweenDescription">str 内の部分文字列を newStr 内のテキストで置き換えます。置き換えられる部分文字列は、部分文字列 startStr と endStr の間に出現します。すなわち、str 内の startPos と endPos の位置の間に出現する部分文字列が置き換えられます</entry>
    <entry key="ReplaceBetween">範囲を置換</entry>
    <entry key="EraseBetween">範囲を消去</entry>
    <entry key="RangeTypeSubstring">開始と終了の部分文字列のすべてのペア</entry>
    <entry key="RangeTypeIndex">開始と終了のインデックス</entry>
    <entry key="RangeType">次の範囲:</entry>
    <entry key="Boundary">等値を含む</entry>
    <entry key="ReplaceBetweenStartIndexOOR">ブロック ''{0}'' の開始インデックス ({1,number,integer}) の入力値は、等値を含まない設定では 0 以上、等値を含む設定では 1 以上でなければなりません。</entry>
    <entry key="ReplaceBetweenEndIndexOOR">ブロック ''{0}'' の入力 string の長さは {1,number,integer} です。終了インデックス ({2,number,integer}) の入力値は、等値を含む設定では {1,number,integer} 以下、等値を含まない設定では {3,number,integer} 以下でなければなりません。</entry>
    <entry key="ReplaceBetweenInconsistentStartEndIndex">ブロック ''{0}'' の開始インデックス ({1,number,integer}) と終了インデックス ({2,number,integer}) の組み合わせが無効です。</entry>
    <entry key="ReplaceBetweenUnsupportedIndexTypeIndex">ブロック ''{0}'' の入力端子 {1,number,integer} は、8、16、または 32 ビットの整数型でなければなりません。</entry>
    <entry key="MaxNumCharacters">最大文字数:</entry>
  </message>
</rsccat>
