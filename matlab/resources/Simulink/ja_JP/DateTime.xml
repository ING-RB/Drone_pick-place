<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright 2025 The MathWorks, Inc.-->

<rsccat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" locale="ja_JP" product="Simulink" xsi:noNamespaceSchemaLocation="../../resources/schema/msgcat.xsd">
  <message>
    <entry key="SL_DSCPT_DATETIMECLOCKREADER">選択した DateTime Clock ブロックのシミュレーション カレンダーの日時を出力します。</entry>
    <entry key="SL_DSCPT_DATETIMECLOCK">現在のカレンダーの日付と時刻を DateTime データ型として計算します。時間点やストレージ データ型などの特性を指定します。</entry>
    <entry key="SL_DSCPT_DATETIMETYPECONVERTER">DateTime 信号の時間点やストレージ データ型を変換します。\n\n時間標準間で変換するには、DateTime Time Standard Converter ブロックを使用します。</entry>
    <entry key="SL_DSCPT_DATETIMEFORMATTER"> カレンダー時間または DateTime 信号を、[形式] パラメーターでの指定に従って書式設定した string に変換します。</entry>
    <entry key="SL_DSCPT_DATETIMETOEPOCHTIME">信号線の値を抽出し、DateTime 信号のストレージ データ型で出力します。</entry>
    <entry key="SL_DSCPT_DATETIMETOCALENDAR">DateTime 信号の年 (y)、月 (M)、日 (d)、時 (H)、分 (m)、および秒 (s) を出力します。</entry>
    <entry key="SL_DSCPT_EPOCHTIMETODATETIME">信号線の値を抽出し、それを [出力データ型] パラメーターで指定された DateTime データ型で出力します。</entry>
    <entry key="SL_DSCPT_TIMESTANDARDCONVERTER"> DateTime 信号の時間標準を変換します。\n\n時間点やストレージ データ型間で変換するには、DateTime Data Type Converter ブロックを使用します。</entry>
    <entry key="InvalidTimeEpoch">''{0}'' のサポートされる範囲は ''{1}'' ～ ''{2}'' ですが、指定されたエポックは ''{3}'' であり、これは無効です。</entry>
    <entry key="InvalidTimeRange">時間システム ''{0}'' のサポートされる範囲は ''{1}'' ～ ''{2}'' ですが、指定された範囲は ''{3}'' ～ ''{4}'' であり、これは無効です。</entry>
    <entry key="InvalidRange">時間範囲の最小値は最大値より小さくなければなりません。</entry>
    <entry key="OutOfRangeTimeConversion">日付 ''{0}'' の時間システム ''{1}'' から ''{2}'' への変換はサポートされていません。これは、変換先の時間システムの有効な範囲が ''{3}'' ～ ''{4}'' であるためです。</entry>
    <entry key="InvalidTimeValue">時間の値は 6 要素 (年、月、日、時、分、秒) の double ベクトルでなければなりません。年、月、日、時、分の値は整数でなければなりません。秒は小数でなければなりません。</entry>
    <entry key="InvalidStartDateTimeValue">ブロック {0} での開始日時の値は double の 6 要素ベクトル、つまり [年, 年, 日, 時, 分, 秒] でなければなりません。年、月、日、時、分の値は整数でなければなりません。秒は小数でなければなりません。</entry>
    <entry key="BlockDoesNotSupportBusInputContainingDateTime">DateTime 型を含むバス信号は、ブロック ''{1}'' の&lt;sldiag objui="inport" objparam="{0,number,integer}" objname="{1}"&gt;入力端子{0,number,integer}&lt;/sldiag&gt; でサポートされていません。サポートされるデータ型のリストは、ブロックのドキュメンテーション ページを参照してください。</entry>
    <entry key="BlockDoesNotSupportDateTimeInput">データ型 DataTime の信号は、ブロック ''{1}'' の&lt;sldiag objui="inport" objparam="{0,number,integer}" objname="{1}"&gt;入力端子{0,number,integer}&lt;/sldiag&gt; でサポートされていません。サポートされるデータ型のリストは、ブロックのドキュメンテーション ページを参照してください。</entry>
    <entry key="BlockDoesNotSupportDateTimeOutput">データ型 DateTime の信号は、ブロック ''{1}'' の&lt;sldiag objui="outport" objparam="{0,number,integer}" objname="{1}"&gt;出力端子{0,number,integer}&lt;/sldiag&gt; でサポートされていません。サポートされるデータ型のリストは、ブロックのドキュメンテーション ページを参照してください。</entry>
    <entry key="DateTimeClockInternalErrorReferencedBlockNotFound">''{0}'' ブロックにおいて、指定したブロック ''{1}'' が見つかりませんでした。''{1}'' はブロック ''{0}'' への有効な相対ブロック パスでなければなりません。階層内を下方向に移動するには ''/'' を使用します。</entry>
    <entry key="ModelConfigIncorrectFormat">Invalid date and time specified for model configuration parameter ''DateTime at simulation time zero''. Enter a real double array of size six: [YYYY MM DD HH MM SS].</entry>
    <entry key="DateTimeClockModelConfigIncorrectFormat">DateTimeClock ブロック ''{0}'' を使用する場合、モデル コンフィギュレーション パラメーター [シミュレーション時間 0 の DateTime] に指定された日付と時刻が無効です。サイズが 6 の double の実数配列を入力してください: [YYYY MM DD HH MM SS]。</entry>
    <entry key="ModelConfigIncorrectValue">Invalid date and time specified for model configuration parameter ''DateTime at simulation time zero''.</entry>
    <entry key="BadTAIModelConfig">TAI タイムスタンプが無効です。許可されている最も古いタイムスタンプは 1972-01-01T00:00:10 です。</entry>
    <entry key="BadYearModelConfig">年が無効です。値は 1972 ～ 9999 の整数でなければなりません。</entry>
    <entry key="BadYear">年が無効です。値は 1400 ～ 9999 の整数でなければなりません。</entry>
    <entry key="BadMonth">月が無効です。値は 1 ～ 12 の整数でなければなりません。</entry>
    <entry key="BadDayOfMonth">月間通算日が無効です。値は、月と年に応じて 1 ～ (28、29、30、31) の整数でなければなりません。</entry>
    <entry key="BadHour">時が無効です。値は 0 ～ 23 の整数でなければなりません。</entry>
    <entry key="BadMinute">分が無効です。値は 0 ～ 59 の整数でなければなりません。</entry>
    <entry key="BadSecond">Invalid second. Value must be a real number that is at least 0 and less than 60.</entry>
    <entry key="BadSecondUTC">秒が無効です。値は 0 以上 61 未満の実数でなければなりません。</entry>
    <entry key="BadLeapSecond">うるう秒のタイムスタンプが無効です。秒が [60, 61) の範囲にある場合、時刻は 6 月 30 日または 12 月 31 日の 23:59 でなければなりません。</entry>
    <entry key="BadLeapSecondBoolTimeStandard">うるう秒フラグが無効です。DateTime 信号は、時間標準が ''UTC'' の場合にのみ、うるう秒 boolean と共にパッケージ化できます。</entry>
    <entry key="BadLeapSecondBoolTimestamp">うるう秒フラグが無効です。DateTime 信号がうるう秒としてマークされている場合、時間は 6 月 30 日または 12 月 31 日の [23:59:60, 23:59:61) の範囲になければなりません。</entry>
    <entry key="BlockSignalInvalidDateTime">無効な DateTime 信号がブロック ''{1}'' の入力端子 {0,number,integer} にあります。</entry>
    <entry key="DateTimeClockStorageDataTypeTooSmall">ブロック ''{0}'' で選択されているストレージ データ型が小さすぎるため、モデル コンフィギュレーション パラメーター [シミュレーション時間 0 の DateTime] に指定された DateTime を表すことができません。</entry>
    <entry key="DateTimeClockRollOver">DateTime 値がブロック ''{0}'' のストレージ データ型を超えたため、クロックのロールオーバーが発生しました。</entry>
    <entry key="DateTimeStorageRollOver"> ブロック ''{0}'' で、格納されている DateTime 値が飽和し、ロールオーバーが発生しました。</entry>
    <entry key="MultipleFractionalSecondTokens">形式 ''{0}'' には、秒の小数の指定子 (''S'') が複数含まれています。DateTime 形式には、秒の小数の指定子を 1 つのみ含めることができます。</entry>
    <entry key="InvalidDayOfWeekToken">形式 ''{0}'' に無効な曜日指定子 (''e'') が含まれます。曜日指定子は、''e''、''ee''、''eee''、''eeee''、または ''eeeee'' でなければなりません。</entry>
    <entry key="InvalidFormatChar">形式 ''{0}'' にはサポートされていないシンボルが含まれています: ''{1}''。A-Z または a-z の文字を形式で出力するには、一重引用符で囲んでください。</entry>
    <entry key="BlockInvalidFormat">Invalid custom format ''{1}'' in block ''{0}''.</entry>
    <entry key="DateTimeObjectInvalidFormat">形式 ''{0}'' が無効です。</entry>
    <entry key="NoTimeStandardAvailable">ブロック ''{0}'' の形式 ''{1}'' には時間標準が必要です。入力モードを ''DateTime'' に変更するか、''t'' 形式指定子のない形式を選択してください。</entry>
    <entry key="InputMustBeDateTime">Signal at &lt;sldiag objui="inport" objparam="{0,number,integer}" objname="{1}"&gt;input port {0,number,integer}&lt;/sldiag&gt; of block ''{1}'' must be of data type DateTime.</entry>
    <entry key="OutputMustBeDateTime">ブロック ''{1}'' の&lt;sldiag objui="outport" objparam="{0,number,integer}" objname="{1}"&gt;出力端子 {0,number,integer}&lt;/sldiag&gt; にある信号は DateTime データ型でなければなりません。</entry>
    <entry key="PortValidityDateTimeFieldDataTypeErrorMessage">端子のデータ型は、double、single、int8、uint8、int16、uint16、int32、uint32、int64 または uint64 でなければなりません。しかし、端子のデータ型が {0} になっています。</entry>
    <entry key="DoesNotSupportTimeStandardConversion"> ブロック ''{0}'' での異なる時間標準間の変換はサポートされていません。このブロックは、ある時間点から別の時間点への変換、またはあるストレージ データ型から別のストレージ データ型への変換のみをサポートします。</entry>
    <entry key="IncorrectInputTimeStandard">ブロック ''{0}'' には、時間標準 ''{1}'' をもつ入力 DateTime 信号と時間標準 ''{2}'' をもつ出力 DateTime 信号が必要です。代わりに、&lt;sldiag objui="inport" objparam="{3,number,integer}" objname="{0}"&gt;入力端子 {3,number,integer}&lt;/sldiag&gt; の信号は時間標準 ''{4}'' をもっています。</entry>
    <entry key="IncorrectOutputTimeStandard">ブロック ''{0}'' には、時間標準 ''{1}'' をもつ入力 DateTime 信号と時間標準 ''{2}'' をもつ出力 DateTime 信号が必要です。代わりに、&lt;sldiag objui="outport" objparam="{3,number,integer}" objname="{0}"&gt;出力端子 {3,number,integer}&lt;/sldiag&gt; の信号は時間標準 ''{4}'' をもっています。</entry>
    <entry key="TimestampIsNegativeLeapSecond">負のうるう秒を表しているため、タイムスタンプは無効です。</entry>
    <entry key="BlockInvalidTimeStandardConversion">ブロック ''{0}'' にある時間標準の変換が無効です。</entry>
    <entry key="BlockInputNonUTCWithBusSignal">ブロック ''{0}'' では、時間標準が ''UTC'' でない場合、入力は非バス信号でなければなりません。</entry>
    <entry key="BlockInputUTCWithNonBusSignal">ブロック ''{0}'' では、時間標準が ''UTC'' の場合、入力は 2 つの要素をもつバーチャル バスでなければなりません。</entry>
    <entry key="BlockOutputNonUTCWithBusSignal">ブロック ''{0}'' では、時間標準が ''UTC'' でない場合、出力は非バス信号でなければなりません。</entry>
    <entry key="BlockOutputUTCWithNonBusSignal">ブロック ''{0}'' では、時間標準が ''UTC'' の場合、出力は 2 つの要素をもつバーチャル バスでなければなりません。</entry>
    <entry key="DateTimeInputPort2Boolean"> ブロック ''{0}'' の入力端子 2 のデータ型は boolean でなければなりません。</entry>
    <entry key="DateTimeOutputPort2Boolean"> ブロック ''{0}'' の出力端子 2 のデータ型は boolean でなければなりません。</entry>
    <entry key="EpochTimeToDateTimeStorageDtMismatch">入力信号のデータ型は、ブロック ''{0}'' の [出力データ型] で指定された ''StorageDataType'' と一致しなければなりません。</entry>
    <entry key="EpochTimeToDateTimeNonUTCWithBusSignal">In block ''{0}'', the input must be a nonbus signal if the time standard of the output is not ''UTC''.</entry>
    <entry key="EpochTimeToDateTimeUTCWithNonBusSignal">ブロック ''{0}'' では、出力の時間標準が ''UTC'' の場合、入力は 2 つの要素をもつバーチャル バスでなければなりません。</entry>
    <entry key="TimePointMode">時間点:</entry>
    <entry key="TimePointModeUNIX">Unix エポックからの秒数</entry>
    <entry key="TimePointModeNTP">NTP エポックからの秒数</entry>
    <entry key="TimePointModeTAI">TAI エポックからの秒数</entry>
    <entry key="TimePointModeJulian">ユリウス日</entry>
    <entry key="TimePointModeMJD">修正ユリウス日</entry>
    <entry key="TimePointModeJ2000">J2000.0 日付</entry>
    <entry key="Epoch">エポック:</entry>
    <entry key="TimeStandard">時間標準:</entry>
    <entry key="TimeStandardConversion">時間標準の変換:</entry>
    <entry key="StorageDataType">ストレージ データ型:</entry>
    <entry key="DiagnosticForClockRollOver">クロックのロールオーバーの診断:</entry>
    <entry key="ClockName">DateTime クロック名:</entry>
    <entry key="StartDateTimeSource">開始日時のソース:</entry>
    <entry key="StartTimeFromConfigParam">モデルから継承</entry>
    <entry key="StartTimeFromEditBox">開始値を指定</entry>
    <entry key="DTCBlockStartDateTime">開始値:</entry>
    <entry key="DateTimeClockReference">DateTime クロック参照</entry>
    <entry key="DateTimeClockBlockName">DateTime クロック名:</entry>
    <entry key="ShowLeapSecondPort">うるう秒の端子を表示する</entry>
    <entry key="ShowLeapSecondPorts">うるう秒の端子を表示する</entry>
    <entry key="UseLeapSecondTable">うるう秒テーブルを使用する</entry>
    <entry key="LeapSecondTable">うるう秒テーブル</entry>
    <entry key="AccumulatedLeapSeconds">累積うるう秒:</entry>
    <entry key="DateTimeClockSpecificationTab">仕様</entry>
    <entry key="DateTimeClockTimeStandardTab">時間標準</entry>
    <entry key="DateTimeFormatterFormat">形式:</entry>
    <entry key="DateTimeFormatterInputMode">入力モード:</entry>
    <entry key="FormatCustom">カスタム</entry>
    <entry key="InputModeDateTime">DateTime</entry>
    <entry key="InputModeCalendar">カレンダー時間</entry>
    <entry key="OutputDayOfWeek">曜日を出力</entry>
    <entry key="OutputYearTypePrompt">年のデータ型:</entry>
    <entry key="OutputMonthTypePrompt">月のデータ型:</entry>
    <entry key="OutputDayTypePrompt">日のデータ型:</entry>
    <entry key="OutputHourTypePrompt">時のデータ型:</entry>
    <entry key="OutputMinuteTypePrompt">分のデータ型:</entry>
    <entry key="OutputSecondTypePrompt">秒のデータ型:</entry>
    <entry key="OutputDayOfWeekTypePrompt">曜日のデータ型:</entry>
    <entry key="DTClockBlockNotFound">''{0}'' という名前の DateTime Clock ブロックが見つかりません。</entry>
    <entry key="DTClockBlockNameInvalidName">''{0}'' に指定された DateTime Clock 名が無効です。有効な識別子は、文字から始まり、空白や特殊文字を含まず、最大で {1,number,integer} の文字長です。</entry>
    <entry key="ScopedDTAttribMismatch1">DateTime Clock ブロック ''{0}'' と ''{1}'' が同じクロック名 ''{2}'' を指定しており、''{1}'' で [DateTime Clock 参照] パラメーターが選択されているため、それらのブロックは同じ信号属性を指定しなければなりません。</entry>
    <entry key="ScopedDTRTW">DateTime Clock 参照のコード生成はサポートされていません。</entry>
    <entry key="ScopedDTAttribMismatch2">DateTime Clock ブロック ''{0}'' と ''{1}'' が同じクロック名 ''{2}'' を指定しており、両方のブロックで [DateTime Clock 参照] パラメーターが選択されているため、それらのブロックは同じ信号属性を指定しなければなりません。</entry>
    <entry key="ScopedDTDataTypeMismatch">''{0}'' と ''{1}'' は、それぞれデータ型を ''{2}'' と ''{3}'' に設定しています。</entry>
    <entry key="BlockInputVirtBusNotTwoElements">ブロック ''{1}'' の&lt;sldiag objui="inport" objparam="{0,number,integer}" objname="{1}"&gt;入力端子 {0,number,integer}&lt;/sldiag&gt; に接続するバスには、2 つの信号が必要です。</entry>
    <entry key="BlockInputVirtBusHasBusElements">ブロック ''{1}'' の&lt;sldiag objui="inport" objparam="{0,number,integer}" objname="{1}"&gt;入力端子 {0,number,integer}&lt;/sldiag&gt; には、2 つの非バス信号で構成されるバスが必要です。</entry>
    <entry key="TimeUnitEpochMismatch">''{0}'' and ''{1}'' is an invalid time unit-epoch pair. The time unit ''s'' (Seconds since epoch) requires an epoch of ''u'' (Unix), ''n'' (NTP), or ''t'' (TAI), and the time unit ''j'' (Julian days since epoch) requires an epoch of ''j'' (Julian), ''m'' (Modified Julian), or ''2'' (J2000.0).</entry>
    <entry key="JulianDayTUOnlySupportDoubleSDT">ストレージ データ型が無効です: ''{1}''。時間点が ''{0}'' の場合、ストレージ データ型を ''double'' に設定してください。</entry>
    <entry key="TDBTSOnlySupportJulianDayTU">Invalid time point: ''{0}''. When time standard is ''TDB'', set time point to ''Julian date'', ''Modified Julian date'', or ''J2000.0 date''.</entry>
    <entry key="TDBTSOnlySupportDoubleSDT">ストレージ データ型が無効です: ''{0}''。時間標準が ''TDB'' の場合、ストレージ データ型を ''double'' に設定してください。</entry>
    <entry key="TTTSOnlySupportNonIntegerSDT">ストレージ データ型が無効です: ''{0}''。時間標準が ''TT'' の場合、ストレージ データ型を ''double'' または固定小数点型に設定してください。</entry>
    <entry key="InvalidDateTimeTypeNumConstructorArgs">DateTimeType コンストラクターの引数の数 {0,number,integer} は無効です。サポートされているコンストラクターは Simulink.DateTimeType() と、任意の順序の名前と値のペアをもつ Simulink.DateTimeType(''TimePoint'', ModeOption, ''StorageDataType'', ModeOption, ''TimeStandard'', ModeOption) です。</entry>
    <entry key="InconsistentObjectTimePointMode">配列のインデックス ''{0}'' の ''TimePoint'' プロパティで不一致が発生しました。連結されるすべてのオブジェクトは、同じ ''TimePoint''、''StorageDataType''、''TimeStandard''、''Format'' プロパティをもつ必要があります。</entry>
    <entry key="InconsistentObjectStorageDataType">A mismatch occurs for ''StorageDataType'' property at array index ''{0}''. All objects to be concatenated must have the same ''TimePoint'', ''StorageDataType'', ''TimeStandard'', and ''Format'' properties.</entry>
    <entry key="InconsistentObjectTimeStandard">配列のインデックス ''{0}'' の ''TimeStandard'' プロパティで不一致が発生しました。連結されるすべてのオブジェクトは、同じ ''TimePoint''、''StorageDataType''、''TimeStandard''、''Format'' プロパティをもつ必要があります。</entry>
    <entry key="InconsistentObjectFormat">配列のインデックス ''{0}'' の ''Format'' プロパティで不一致が発生しました。連結されるすべてのオブジェクトは、同じ ''TimePoint''、''StorageDataType''、''TimeStandard''、''Format'' プロパティをもつ必要があります。</entry>
    <entry key="InvalidDateTimeTypeName">Invalid DateTime data type name. Names must be of the form ''datetime_[TIMEUNIT][EPOCH][TIMESTANDARD]_[STORAGEDATATYPE]'', where TIMEUNIT must be one of ''s'', or ''j''; EPOCH must be one of ''u'', ''n'', ''t'', ''j'', ''m'', or ''2''; TIMESTANDARD must be one of ''t'', ''u'', ''d'', or ''b''; and STORAGEDATATYPE must be one of ''double'', ''int32'', ''uint32'', ''sfix64_En32'', ''ufix64_En32'', ''sfix128_En64'', or ''ufix128_En64''.</entry>
    <entry key="InvalidDateTimeNumConstructorArgs">Simulink.DateTime コンストラクターの引数の数 {0,number,integer} は無効です。サポートされているコンストラクターは Simulink.DateTime()、Simulink.DateTime(Value) と、任意の順序で名前と値のペアをもつ Simulink.DateTime(Value, ''TimePoint'', ModeOption, ''StorageDataType'', ModeOption, ''TimeStandard'', ModeOption) です。</entry>
    <entry key="InvalidDateTimeNumArgsFromStoredInteger">Simulink.DateTime.fromStoredInteger メソッドの引数の数 {0,number,integer} は無効です。サポートされている形式は Simulink.DateTime.fromStoredInteger(value) と、任意の順序の名前と値のペアをもつ Simulink.DateTime.fromStoredInteger(Value, ''TimePoint'', ModeOption, ''StorageDataType'', ModeOption, ''TimeStandard'', ModeOption) です。</entry>
    <entry key="InvalidDateTimeValue">Invalid DateTime value. Value must be a real [1x6] double.</entry>
    <entry key="InvalidDateTimeFormatAttributes">形式が無効です。値は実数スカラー string でなければなりません。</entry>
    <entry key="InvalidTimeSinceEpochAttributes">TimeSinceEpochValue 属性が無効です。値は、実数スカラー、もしくは double、int32、uint32、int64、または uint64 の実数の [2 行 1 列] ベクトルでなければなりません。</entry>
    <entry key="InvalidTimeSinceEpochDataType"> ''TimeSinceEpochValue'' のデータ型は、''StorageDataType'' のコンテナー タイプと一致する必要があります。</entry>
    <entry key="InvalidTimeSinceEpochDimension">''StorageDataType'' の TimeSinceEpochValue 値の次元が無効です。fixdt(x,128,64) の ''StorageDataType'' では、TimeSinceEpochValue は 2 行 1 列の 64 ビット ベクトルでなければならず、他のすべてのデータ型の ''StorageDataType'' では、TimeSinceEpochValue はスカラーでなければなりません。</entry>
    <entry key="LeapSecondTableIncorrectCols"> ブロック ''{0}'' の [うるう秒テーブル] パラメーターの列数が {1,number,integer} です。[うるう秒テーブル] パラメーターの列数は 3 でなければなりません。</entry>
    <entry key="LeapSecondTableIncorrectRows">ブロック ''{0}'' の [うるう秒テーブル] の行数が {1,number,integer} です。既知のうるう秒を考慮する場合、[うるう秒テーブル] パラメーターの行数は 26 以上でなければなりません。</entry>
    <entry key="LeapSecondTableIncorrectData">ブロック ''{0}'' の [うるう秒テーブル] パラメーターの値が正しくありません。値は、2016 年までの既知のうるう秒テーブルと一致しなければなりません。</entry>
    <entry key="LeapSecondTableYearOutOfRange"> うるう秒テーブルの行 {2,number,integer} の値 ({1,number,integer}) が無効です。ブロック ''{0}'' の [うるう秒テーブル] パラメーターの [年] の値は、2017 ～ 9999 の範囲になければなりません。</entry>
    <entry key="LeapSecondTableSecondInvalid"> うるう秒テーブルの行 {2,number,integer} の値 ({1,number,integer}) が無効です。ブロック ''{0}'' の [うるう秒テーブル] パラメーターの [秒] の値は、-1、0、または 1 のいずれかでなければなりません。</entry>
    <entry key="LeapSecondTableYearRepeated">ブロック ''{0}'' では、[うるう秒テーブル] パラメーターの重複する [年] の値はサポートされません。繰り返し指定された最初の年は {1,number,integer} です。</entry>
    <entry key="AccumulatedLeapSecondLimit">ブロック ''{0}'' のパラメーターの値 {1,number,integer} は無効です。[累積うるう秒] パラメーターの値は 0 ～ 16,056 の範囲になければなりません。</entry>
    <entry key="LeapSecondTableYearNotSorted">ブロック ''{0}'' の [うるう秒テーブル] の列 [年] の値を昇順に並べ替えなければなりません。</entry>
    <entry key="LeapSecondTableVarIncorrectCols">ブロック ''{0}'' の [うるう秒テーブル] パラメーターで使用されている ''{1}'' の列数は 3 でなければなりません。</entry>
    <entry key="LeapSecondTableVarIncorrectRows">ブロック ''{0}'' では、2016 年までの既知のうるう秒値を考慮する場合、[うるう秒テーブル] パラメーターで使用されている ''{1}'' の行数は 26 以上でなければなりません。</entry>
    <entry key="LeapSecondTableVarIncorrectData">ブロック ''{0}'' の [うるう秒テーブル] パラメーターで使用されている ''{1}'' の値が正しくありません。値は、2016 年までのうるう秒テーブルと一致しなければなりません。詳細については、ドキュメンテーションを参照してください。</entry>
    <entry key="LeapSecondTableVarYearOutOfRange">ブロック ''{0}'' の ''{1}'' の行 {3,number,integer} の値 ({2,number,integer}) が無効です。[うるう秒テーブル] パラメーターの [年] の値は、2017 ～ 9999 の範囲になければなりません。</entry>
    <entry key="LeapSecondTableVarSecondInvalid">ブロック ''{0}'' の [うるう秒テーブル] パラメーター ''{1}'' の行 {3,number,integer} の列 [秒] の値 ({2,number,integer}) は、-1、0、または 1 でなければなりません。</entry>
    <entry key="LeapSecondTableVarYearRepeated">ブロック ''{0}'' では、[うるう秒テーブル] パラメーター ''{1}'' の列 [年] の値の重複はサポートされていません。繰り返しの最初の年は {2,number,integer} です。</entry>
    <entry key="LeapSecondTableVarYearNotSorted">ブロック ''{0}'' では、[うるう秒テーブル] パラメーター ''{1}'' の列 [年] の値を昇順に並べ替えなければなりません。</entry>
    <entry key="DateTimeClockOrClockReaderInExpFcnMdl">Using DateTime Clock or DateTime Clock Reader ''{0}'' block inside an export function model is not supported.</entry>
    <entry key="DateTimeClockInsideNonVirtualSS">Using DateTime Clock ''{0}'' block inside subsystem ''{1}'' is not supported. Do not use DateTime Clock blocks inside Enabled, Triggered, Function call, Action, Iterator, Reusable, Resettable, Variant, or Function subsystems.</entry>
    <entry key="DateTimeClockInsideSFChart">Stateflow チャート ''{1}'' 内での DateTime Clock ''{0}'' ブロックの使用はサポートされません。</entry>
    <entry key="DateTimeClockReaderInsideReusableSubsys">Using DateTime Clock Reader ''{0}'' block inside reusable subsystem ''{1}'' is not supported. Instead, change the 'Code generation function packaging' option of the subsystem ''{1}'' to ''Inlined'', ''Auto'' or ''Nonreusable function''.</entry>
    <entry key="DateTimeClockOrClockReaderInCondExecMdl">条件付きで実行される Model ブロック内での DateTime Clock または DateTime Clock Reader ''{0}'' ブロックの使用はサポートされません。</entry>
    <entry key="DateTimeClockOrClockReaderInRunFirstLastSS">Using DateTime Clock or DateTime Clock Reader ''{0}'' blocks inside subsystem ''{1}'' with block property ''Execution Order'' value of 'First' or 'Last' is not supported. Instead, change the ''Execution Order'' property of subsystem ''{1}'' to ''Based on priority''.</entry>
    <entry key="DateTimeFeatureTurnOn_Internal">Turn on ''DateTime in Simulink'' feature to use ''{0}''.</entry>
    <entry key="TimeStandardTAI">TAI</entry>
    <entry key="TimeStandardUTC">UTC</entry>
    <entry key="TimeStandardTT">TT</entry>
    <entry key="TimeStandardConversionTAI2UTC">TAI to UTC</entry>
    <entry key="TimeStandardConversionTAI2TT">TAI to TT</entry>
    <entry key="TimeStandardConversionTAI2TDB">TAI to TDB</entry>
    <entry key="TimeStandardConversionUTC2TDB">UTC to TDB</entry>
    <entry key="TimeStandardConversionUTC2TAI">UTC to TAI</entry>
    <entry key="TimeStandardConversionUTC2TT">UTC to TT</entry>
    <entry key="TimeStandardConversionTT2TAI">TT to TAI</entry>
    <entry key="TimeStandardConversionTT2UTC">TT to UTC</entry>
    <entry key="TimeStandardConversionTT2TDB">TT to TDB</entry>
    <entry key="DateTimeClockDouble">double</entry>
    <entry key="DateTimeClockSint32">int32</entry>
    <entry key="DateTimeClockUint32">uint32</entry>
    <entry key="DateTimeClockSfix128En64">fixdt(1,128,64)</entry>
    <entry key="DateTimeClockUfix128En64">fixdt(0,128,64)</entry>
    <entry key="DateTimeClockSfix64En32">fixdt(1,64,32)</entry>
    <entry key="DateTimeClockUfix64En32">fixdt(0,64,32)</entry>
    <entry key="FormatMATLABDefault">dd-MMM-uuuu HH:mm:ss</entry>
    <entry key="FormatISO8601WholeSec">yyyy-MM-dd''T''HH:mm:ss</entry>
    <entry key="FormatISO8601TimeStandard">yyyy-MM-dd''T''HH:mm:ss t</entry>
    <entry key="FormatISO8601FracSec">yyyy-MM-dd''T''HH:mm:ss.SSS</entry>
    <entry key="FormatAsctime">eee MMM dd HH:mm:ss yyyy\n</entry>
    <entry key="FormatClockTime">h:mm:ss a</entry>
    <entry key="FormatCalDate">MMMM d, yyyy</entry>
    <entry key="InvalidTimePointMode_Internal">''{0}'' must be a valid time point such as ''Seconds since Unix epoch'', ''Seconds since NTP epoch'', ''Seconds since TAI epoch'', ''Julian date'', ''Modified Julian date'' or ''J2000.0 date''.</entry>
    <entry key="InvalidEpoch_Internal">''{0}'' must be a valid epoch such as ''Unix'', ''NTP'', ''TAI'', ''Julian'', ''Modified Julian'' or ''J2000.0 date''.</entry>
    <entry key="InvalidTimeStandard_Internal">''{0}'' must be a valid time standard such as ''TAI'', ''UTC'', ''TT'', or ''TDB''.</entry>
  </message>
</rsccat>
