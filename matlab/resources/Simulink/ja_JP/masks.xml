<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright 2025 The MathWorks, Inc.-->

<rsccat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" locale="ja_JP" product="Simulink" xsi:noNamespaceSchemaLocation="../../resources/schema/msgcat.xsd">
  <message>
    <entry key="StateMatrixA_MP">状態行列 A:</entry>
    <entry key="InputMatrixB_MP">入力行列 B:</entry>
    <entry key="OutputMatrixC_MP">出力行列 C:</entry>
    <entry key="DirectFeedthroughMatrixD_MP">直達行列 D:</entry>
    <entry key="InitialConditionForState_MP">状態の初期条件:</entry>
    <entry key="DataTypeForInternalCalculations_MP">内部計算で使用するデータ型 (例: fixdt(1, 16), fixdt(''single'')):</entry>
    <entry key="ScalingForStateEquationAXBU_MP">状態方程式 AX+BU に対するスケーリング (傾き。例: 2^-9):</entry>
    <entry key="ScalingForOutputEquationCXDU_MP">出力方程式 CX+DU に対するスケーリング (傾き。例: 2^-9):</entry>
    <entry key="LockOutputDataTypeAgainstFxpTools_MP">固定小数点ツールによる変更に対して出力データ型の設定をロックする</entry>
    <entry key="IntegerRoundingMode_MP">整数丸めモード:</entry>
    <entry key="SaturateToMaxOrMinWhenOverflowsOccur_MP">オーバーフローの場合、最大値または最小値に飽和</entry>
    <entry key="FixedPointStateSpace_MD">離散時間状態空間実現</entry>
    <entry key="NumeratorCoefficients_MP">分子係数:</entry>
    <entry key="DenominatorCoefficientsExcludingLead_MP">先頭を除く分母係数 (1.0 でなければなりません)</entry>
    <entry key="InitialCondition_MP">初期条件:</entry>
    <entry key="TransferFcnDirectFormII_MD">指定した伝達関数の直接型 II の実現が使われます。単入力多出力の伝達関数のみサポートされます。\n\nデータ型と出力のスケーリング、係数、任意の一時変数は、自動的に選択されます。自動選択は、さまざまな状況で受け入れ可能です。自動選択が不適当な結果を生ずる状況では、手動でフィルターのレイアウトを行う必要があります。手動でレイアウトを行う場合、このマスク内のブロックを開始点として使用することを推奨します。\n\nメモ 1:\nすべての分母は先頭の係数を +1.0 にする必要がありますが、この先頭の係数は、パラメーターの入力時に除外する必要があります。たとえば、分母が\n  den = \n            1         -1.7         0.72\nである場合、入力は以下のようになります。\n  den(2:end)  =\n         -1.7         0.72\n\nメモ 2: \n分子は、分母全体と同じサイズでなければなりません。</entry>
    <entry key="TransferFcnDirectFormIITimeVarying_MD">指定した伝達関数の直接型 II の実現が使われます。単入力単出力の伝達関数のみサポートされます。\n\nデータ型と出力のスケーリング、係数、任意の一時変数は、自動的に選択されます。自動選択は、さまざまな状況で受け入れ可能です。自動選択が不適当な結果を生ずる状況では、手動でフィルターのレイアウトを行う必要があります。手動のレイアウトは、このマスク内のブロックを開始点として使用することを推奨します。\n\nメモ 1:\n分母全体は、先頭に係数 +1.0 をもたなければなりませんが、この最初の係数は、パラメーターの入力時に除外する必要があります。たとえば、分母が\n  den = \n            1         -1.7         0.72\nである場合、入力は以下のようになります。\n  den(2:end)  =\n         -1.7         0.72\n\n注意 2: \n分子は、分母全体と同じサイズでなければなりません。</entry>
    <entry key="SampleTime_MP">サンプル時間:</entry>
    <entry key="UnitDelayEnabled_MD">通常、出力は 1 サンプル周期で遅れる信号 u です。\nイネーブル信号が false の場合ブロックは無効になり、状態と出力値は変化しません。イネーブルのアクションはベクトル化され、スカラー拡張をサポートします。</entry>
    <entry key="UnitDelayEnabledExternalInitialCondition_MD">通常、出力は 1 サンプル周期で遅れる信号 u です。\n初期条件は、信号 IC で与えられます。\nイネーブル信号が false の場合ブロックは無効になり、状態と出力値はリセットしない限り変化しません。イネーブルのアクションはベクトル化され、スカラー拡張をサポートします。</entry>
    <entry key="UnitDelayEnabledResettable_MD">通常、出力は 1 サンプル周期で遅れる信号 u です。\nリセット信号 R が true の場合、状態と出力は常に初期条件パラメーターに等しく設定されます。リセット アクションはベクトル化され、スカラー拡張をサポートします。\nイネーブル信号が false の場合、ブロックは無効になり、状態と出力値はリセット以外では変更しません。イネーブルのアクションはベクトル化され、スカラー拡張をサポートします。</entry>
    <entry key="UnitDelayEnabledResettableExternalInitialCondition_MD">通常、出力は 1 サンプル周期で遅れる信号 u です。\nリセット信号 R が true の場合、状態と出力は常に初期条件信号 IC に等しく設定されます。リセット アクションはベクトル化され、スカラー拡張をサポートします。\nイネーブル信号が false の場合、ブロックは無効になり、状態と出力値はリセット以外では変更しません。イネーブルのアクションはベクトル化され、スカラー拡張をサポートします。</entry>
    <entry key="UnitDelayExternalInitialCondition_MD">通常、出力は 1 サンプル周期で遅れる信号 u です。\n初期条件は、信号 IC で与えられます。</entry>
    <entry key="UnitDelayResettable_MD">通常、出力は 1 サンプル周期で遅れる信号 u です。\nリセット信号 R が true の場合、状態と出力は常に初期条件パラメーターに等しく設定されます。リセット アクションはベクトル化され、スカラー拡張をサポートします。</entry>
    <entry key="UnitDelayResettableExternalInitialCondition_MD">通常、出力は 1 サンプル周期で遅れる信号 u です。\nリセット信号 R が true の場合、状態と出力は常に初期条件信号 IC に等しく設定されます。リセット アクションはベクトル化され、スカラー拡張をサポートします。</entry>
    <entry key="UnitDelayWithPreviewEnabled_MD">Unit Delay With Preview Enabled は、通常、信号 u と等しい出力と、その出力が 1 単位遅延した 2 番目の出力をもちます。\n\nイネーブル信号が false の場合ブロックは無効になり、状態と出力値はリセットしない限り変化しません。</entry>
    <entry key="UnitDelayWithPreviewEnabledResettable_MD">Unit Delay With Preview Enabled Resettable は、通常、信号 u と等しい出力と、その出力が 1 単位遅延した 2 番目の出力をもちます。\n\n外部のリセット信号 R が true の場合、1 番目の出力信号は初期条件と等しくなります。2 番目の出力信号は 1 ステップ後まで影響しません。内部の初期条件は、モデル開始時、または親の Enabled Subsystem がリセットされる時に状態を初期化する場合にも使用されます。\n\nイネーブル信号が false の場合ブロックは無効になり、状態と出力値はリセットしない限り変化しません。</entry>
    <entry key="UnitDelayWithPreviewEnabledResettableExternalRV_MD">Unit Delay With Preview Enabled Resettable External RV は、外部のリセット値 RV と内部の初期条件の両方をもちます。このブロックは通常、信号 u と等しい出力と、その出力が 1 単位遅延した 2 番目の出力をもちます。\n\nリセット信号 R が true の場合、1 番目の出力信号は RV と等しくなります。2 番目の出力信号は 1 ステップ後まで影響しません。内部の初期条件は、モデル開始時、または親の Enabled Subsystem がリセットされる時のみ 2 番目の出力に直接影響します。\n\nイネーブル信号が false の場合ブロックは無効になり、状態と出力値はリセットしない限り変化しません。</entry>
    <entry key="UnitDelayWithPreviewResettable_MD">Unit Delay With Preview Resettable は、通常、信号 u と等しい出力と、その出力が 1 単位遅延した 2 番目の出力をもちます。\n\nリセット信号 R が true の場合、1 番目の出力信号は初期条件と等しくなります。2 番目の出力信号は 1 ステップ後まで影響しません。内部の初期条件は、モデル開始時、または親の Enabled Subsystem がリセットされる時に状態を初期化する場合にも使用されます。</entry>
    <entry key="UnitDelayWithPreviewResettableExternalRV_MD">Unit Delay With Preview Resettable External RV は、外部のリセット値 RV と内部の初期条件の両方をもちます。このブロックは通常、信号 u と等しい出力と、その出力が 1 単位遅延した 2 番目の出力をもちます。\n\nリセット信号 R が true の場合、1 番目の出力信号は RV と等しくなります。2 番目の出力信号は 1 ステップ後まで影響しません。内部の初期条件は、モデル開始時、または親の Enabled Subsystem がリセットされる時のみ 2 番目の出力に直接影響します。</entry>
    <entry key="RealWorldValueDecrement_MD">信号の実際値から 1.0 を減算します。\nオーバーフローは常にラップします。</entry>
    <entry key="StoredIntegerValueDecrement_MD">信号の格納された値を 1 減算します。\n固定小数点の信号は 1.0 減算します。\nオーバーフローは常にラップします。</entry>
    <entry key="DecrementToZero_MD">信号の実際値から 1.0 を減算しますが、\n0 未満になることはありません。</entry>
    <entry key="DecrementTimeToZero_MD">信号の実際値からサンプル時間 Ts を減算しますが、\n0 未満になることはありません。\n\nこのブロックは固定のサンプル レートでのみ動作するため、Triggered Subsystem の内部では動作しません。</entry>
    <entry key="RealWorldValueIncrement_MD">信号の実際値を 1.0 まで増加させます。\nオーバーフローは常にラップします。</entry>
    <entry key="StoredIntegerValueIncrement_MD">信号の格納された値を 1 増やします。\n固定小数点の信号は 1.0 増やします。\nオーバーフローは常にラップします。</entry>
    <entry key="Controller_MP">コントローラー:</entry>
    <entry key="TimeDomain_MP">時間領域:</entry>
    <entry key="ContinuousTime_MP">連続時間</entry>
    <entry key="DiscreteTime_MP">離散時間</entry>
    <entry key="SampleTime1ForInherited_MP">サンプル時間 (継承は -1):</entry>
    <entry key="DiscreteTimeSettings_GT">離散時間設定</entry>
    <entry key="IntegratorMethod_MP">積分手法:</entry>
    <entry key="FilterMethod_MP">フィルター手法:</entry>
    <entry key="PIDBlockInTriggeredSubsystem_MP">PID コントローラーが条件付き実行サブシステム内にある</entry>
    <entry key="Form_MP">形式:</entry>
    <entry key="ControllerParameters_GT">コントローラーのパラメーター</entry>
    <entry key="ProportionalP_MP">比例項 (P):</entry>
    <entry key="IntegralI_MP">積分項 (I):</entry>
    <entry key="DerivativeD_MP">微分項 (D):</entry>
    <entry key="UseFilter_MP">不完全微分の使用</entry>
    <entry key="FilterCoefficientN_MP">フィルター係数 (N):</entry>
    <entry key="PIDTune">調整...</entry>
    <entry key="InitialConditions_GT">初期条件</entry>
    <entry key="Source_MP">ソース:</entry>
    <entry key="Integrator_MP">積分器:</entry>
    <entry key="Filter_MP">フィルター:</entry>
    <entry key="ExternalReset_GT">外部リセット</entry>
    <entry key="ExternalReset_MP">外部リセット:</entry>
    <entry key="IgnoreResetWhenLinearizing_MP">線形化時のリセットの設定を無視</entry>
    <entry key="EnableZerocrossingDetection_MP">ゼロクロッシング検出を有効にする</entry>
    <entry key="PIDAdvanced_TAB">高度な PID</entry>
    <entry key="OutputSaturation_GT">出力の飽和</entry>
    <entry key="OutputSaturation_TAB">飽和</entry>
    <entry key="AntiwindupMethod_GT">アンチワインドアップ</entry>
    <entry key="LimitOutput_MP">出力を制限する</entry>
    <entry key="UpperSaturationLimit_MP">上限: </entry>
    <entry key="LowerSaturationLimit_MP">下限: </entry>
    <entry key="IgnoreSaturationWhenLinearizing_MP">線形化時の飽和の設定を無視</entry>
    <entry key="AntiwindupMethod_MP">アンチワインドアップ手法:</entry>
    <entry key="BackcalculationCoefficientKb_MP">逆算係数 (Kb):</entry>
    <entry key="TrackingMode_GT">トラッキング モード</entry>
    <entry key="EnableTrackingMode_MP">トラッキングモードを有効にする</entry>
    <entry key="TrackingCoefficientKt_MP">トラッキング係数 (Kt):</entry>
    <entry key="SaturateOnIntegerOverflow_MP">整数オーバーフローで飽和</entry>
    <entry key="LockDataTypeAgainstFxpTools_MP">固定小数点ツールによる変更に対してデータ型の設定をロックする</entry>
    <entry key="PParameterMinimum_MP">P パラメーターの最小値:</entry>
    <entry key="PParameterMaximum_MP">P パラメーターの最大値:</entry>
    <entry key="PParameter_MP">P パラメーター:</entry>
    <entry key="IParameterMinimum_MP">I パラメーターの最小値:</entry>
    <entry key="IParameterMaximum_MP">I パラメーターの最大値:</entry>
    <entry key="IParameter_MP">I パラメーター:</entry>
    <entry key="DParameterMinimum_MP">D パラメーターの最小値:</entry>
    <entry key="DParameterMaximum_MP">D パラメーターの最大値:</entry>
    <entry key="DParameter_MP">D パラメーター:</entry>
    <entry key="NParameterMinimum_MP">N パラメーターの最小値:</entry>
    <entry key="NParameterMaximum_MP">N パラメーターの最大値:</entry>
    <entry key="NParameter_MP">N パラメーター:</entry>
    <entry key="KbParameterMinimum_MP">Kb パラメーターの最小値:</entry>
    <entry key="KbParameterMaximum_MP">Kb パラメーターの最大値:</entry>
    <entry key="KbParameter_MP">Kb パラメーター:</entry>
    <entry key="KtParameterMinimum_MP">Kt パラメーターの最小値:</entry>
    <entry key="KtParameterMaximum_MP">Kt パラメーターの最大値:</entry>
    <entry key="KtParameter_MP">Kt パラメーター:</entry>
    <entry key="PProductOutputMinimum_MP">P の乗算出力の最小値:</entry>
    <entry key="PProductOutputMaximum_MP">P の乗算出力の最大値:</entry>
    <entry key="PProductOutput_MP">P の乗算出力:</entry>
    <entry key="IProductOutputMinimum_MP">I の乗算出力の最小値:</entry>
    <entry key="IProductOutputMaximum_MP">I の乗算出力の最大値:</entry>
    <entry key="IProductOutput_MP">I の乗算出力:</entry>
    <entry key="DProductOutputMinimum_MP">D の乗算出力の最小値:</entry>
    <entry key="DProductOutputMaximum_MP">D の乗算出力の最大値:</entry>
    <entry key="DProductOutput_MP">D の乗算出力:</entry>
    <entry key="NProductOutputMinimum_MP">N の乗算出力の最小値:</entry>
    <entry key="NProductOutputMaximum_MP">N の乗算出力の最大値:</entry>
    <entry key="NProductOutput_MP">N の乗算出力:</entry>
    <entry key="KbProductOutputMinimum_MP">Kb の乗算出力の最小値:</entry>
    <entry key="KbProductOutputMaximum_MP">Kb の乗算出力の最大値:</entry>
    <entry key="KbProductOutput_MP">Kb の乗算出力:</entry>
    <entry key="KtProductOutputMinimum_MP">Kt の乗算出力の最小値:</entry>
    <entry key="KtProductOutputMaximum_MP">Kt の乗算出力の最大値:</entry>
    <entry key="KtProductOutput_MP">Kt の乗算出力:</entry>
    <entry key="IntegratorOutputMinimum_MP">Integrator の出力の最小値:</entry>
    <entry key="IntegratorOutputMaximum_MP">Integrator の出力の最大値:</entry>
    <entry key="IntegratorOutput_MP">Integrator の出力:</entry>
    <entry key="FilterOutputMinimum_MP">Filter の出力の最小値:</entry>
    <entry key="FilterOutputMaximum_MP">Filter の出力の最大値:</entry>
    <entry key="FilterOutput_MP">Filter の出力:</entry>
    <entry key="DifferentiatorOutputMinimum_MP">微分器出力の最小値:</entry>
    <entry key="DifferentiatorOutputMaximum_MP">微分器出力の最大値:</entry>
    <entry key="DifferentiatorOutput_MP">微分器出力:</entry>
    <entry key="SumOutputMinimum_MP">Sum の出力の最小値:</entry>
    <entry key="SumOutputMaximum_MP">Sum の出力の最大値:</entry>
    <entry key="SumOutput_MP">Sum の出力:</entry>
    <entry key="SumI1OutputMinimum_MP">SumI1 の出力の最小値:</entry>
    <entry key="SumI1OutputMaximum_MP">SumI1 の出力の最大値:</entry>
    <entry key="SumI1Output_MP">SumI1 の出力:</entry>
    <entry key="SumI2OutputMinimum_MP">SumI2 の出力の最小値:</entry>
    <entry key="SumI2OutputMaximum_MP">SumI2 の出力の最大値:</entry>
    <entry key="SumI2Output_MP">SumI2 の出力:</entry>
    <entry key="SumI3OutputMinimum_MP">SumI3 の出力の最小値:</entry>
    <entry key="SumI3OutputMaximum_MP">SumI3 の出力の最大値:</entry>
    <entry key="SumI3Output_MP">SumI3 の出力:</entry>
    <entry key="SumI4Output_MP">SumI4 出力:</entry>
    <entry key="SumDOutputMinimum_MP">SumD の出力の最小値:</entry>
    <entry key="SumDOutputMaximum_MP">SumD の出力の最大値:</entry>
    <entry key="SumDOutput_MP">SumD の出力:</entry>
    <entry key="AccumulatorOfSum_MP">Sum のアキュムレータ:</entry>
    <entry key="AccumulatorOfSumI1_MP">SumI1 のアキュムレータ:</entry>
    <entry key="AccumulatorOfSumI2_MP">SumI2 のアキュムレータ:</entry>
    <entry key="AccumulatorOfSumI3_MP">SumI3 のアキュムレータ:</entry>
    <entry key="AccumulatorOfSumI4_MP">SumI4 のアキュムレータ:</entry>
    <entry key="AccumulatorOfSumD_MP">SumD のアキュムレータ:</entry>
    <entry key="SaturationOutputMinimum_MP">飽和の出力の最小値:</entry>
    <entry key="SaturationOutputMaximum_MP">飽和の出力の最大値:</entry>
    <entry key="SaturationOutput_MP">飽和の出力:</entry>
    <entry key="IntegratorState_GT">Integrator の状態</entry>
    <entry key="FilterState_GT">Filter の状態</entry>
    <entry key="StateNameegposition_MP">状態名:(例: ''position'')</entry>
    <entry key="StateName_MP">状態名:</entry>
    <entry key="StateNameMustResolveToSimulinkSignalObject_MP">状態名を Simulink の信号オブジェクトに関連付ける</entry>
    <entry key="CodeGenerationStorageClass_MP">コード生成ストレージ クラス:</entry>
    <entry key="CodeGenerationStorageTypeQualifier_MP">コード生成ストレージ型修飾子:</entry>
    <entry key="PID1dof_MD">このブロックは、連続時間と離散時間の PID 制御アルゴリズムを実装し、アンチワインドアップや外部リセット、信号のトラッキングなどの高度な機能を含みます。[調整...] ボタンを使用して自動的に PID ゲインを調整できます (Simulink Control Design が必要です)。</entry>
    <entry key="SetpointWeightb_MP">設定点の重み (b):</entry>
    <entry key="SetpointWeightc_MP">設定点の重み (c):</entry>
    <entry key="bParameterMinimum_MP">b パラメーターの最小値:</entry>
    <entry key="bParameterMaximum_MP">b パラメーターの最大値:</entry>
    <entry key="bParameter_MP">b パラメーター:</entry>
    <entry key="cParameterMinimum_MP">c パラメーターの最小値:</entry>
    <entry key="cParameterMaximum_MP">c パラメーターの最大値:</entry>
    <entry key="cParameter_MP">c パラメーター:</entry>
    <entry key="bProductOutputMinimum_MP">b の乗算出力の最小値:</entry>
    <entry key="bProductOutputMaximum_MP">b の乗算出力の最大値:</entry>
    <entry key="bProductOutput_MP">b の乗算出力:</entry>
    <entry key="cProductOutputMinimum_MP">c の乗算出力の最小値:</entry>
    <entry key="cProductOutputMaximum_MP">c の乗算出力の最大値:</entry>
    <entry key="cProductOutput_MP">c の乗算出力:</entry>
    <entry key="Sum1OutputMinimum_MP">Sum1 の出力の最小値:</entry>
    <entry key="Sum1OutputMaximum_MP">Sum1 の出力の最大値:</entry>
    <entry key="Sum1Output_MP">Sum1 の出力:</entry>
    <entry key="Sum2OutputMinimum_MP">Sum2 の出力の最小値:</entry>
    <entry key="Sum2OutputMaximum_MP">Sum2 の出力の最大値:</entry>
    <entry key="Sum2Output_MP">Sum2 の出力:</entry>
    <entry key="Sum3OutputMinimum_MP">Sum3 の出力の最小値:</entry>
    <entry key="Sum3OutputMaximum_MP">Sum3 の出力の最大値:</entry>
    <entry key="Sum3Output_MP">Sum3 の出力:</entry>
    <entry key="AccumulatorOfSum1_MP">Sum1 のアキュムレータ:</entry>
    <entry key="AccumulatorOfSum2_MP">Sum2 のアキュムレータ:</entry>
    <entry key="AccumulatorOfSum3_MP">Sum3 のアキュムレータ:</entry>
    <entry key="PID2dof_MD">このブロックは、設定点の重みをもつ連続時間と離散時間の PID 制御アルゴリズムを実装し、アンチワインドアップや外部リセット、信号のトラッキングなどの高度な機能を含みます。[調整...] ボタンを使用して自動的に PID ゲインを調整できます (Simulink Control Design が必要です)。</entry>
    <entry key="discretePIDToolTip">''前進オイラー法'' 以外の離散化メソッドは現在コード生成と固定小数点シミュレーションをサポートしていません。</entry>
    <entry key="PIDCompensatorFormula">補償器の式</entry>
    <entry key="UnknownMaskType">不明なマスク タイプ: {0}</entry>
    <entry key="UnknownMaskTypeMfile">PIDMasks {0} 内の不明なマスク タイプ</entry>
    <entry key="CreateDialogError">ダイアログ作成時にエラーが発生しました:</entry>
    <entry key="Differentiator_MP">微分器:</entry>
    <entry key="FilterDiffNumProductOutput_MP">分子の乗算出力のフィルター:</entry>
    <entry key="FilterDiffNumAccumulator_MP">分子のアキュムレータのフィルター:</entry>
    <entry key="FilterDiffDenProductOutput_MP">分母の乗算出力のフィルター:</entry>
    <entry key="FilterDiffDenAccumulator_MP">分母のアキュムレータのフィルター:</entry>
    <entry key="FilterDiffCoefficientOutput_MP">係数の乗算出力のフィルター:</entry>
    <entry key="FilterDiffCoefficientOutputMinimum_MP">係数の乗算出力の最小値のフィルター:</entry>
    <entry key="FilterDiffCoefficientOutputMaximum_MP">係数の乗算出力の最大値のフィルター:</entry>
    <entry key="FilterDiffSumDenAccumulator_MP">SumDen のアキュムレータ:</entry>
    <entry key="FilterDiffSumDenOutput_MP">SumDen の出力:</entry>
    <entry key="FilterDiffSumDenOutputMinimum_MP">SumDen の出力の最小値:</entry>
    <entry key="FilterDiffSumDenOutputMaximum_MP">SumDen の出力の最大値:</entry>
    <entry key="FilterDiffSumNumAccumulator_MP">SumNum のアキュムレータ:</entry>
    <entry key="FilterDiffSumNumOutput_MP">SumNum の出力:</entry>
    <entry key="FilterDiffSumNumOutputMinimum_MP">SumNum の出力の最小値:</entry>
    <entry key="FilterDiffSumNumOutputMaximum_MP">SumNum の出力の最大値:</entry>
    <entry key="FilterDiffReciprocalOutput_MP">逆数の出力:</entry>
    <entry key="FilterDiffReciprocalOutputMinimum_MP">逆数の出力の最小値:</entry>
    <entry key="FilterDiffReciprocalOutputMaximum_MP">逆数の出力の最大値:</entry>
    <entry key="FilterDiffDivideOutput_MP">除算出力:</entry>
    <entry key="FilterDiffDivideOutputMinimum_MP">除算出力の最小値:</entry>
    <entry key="ClampingAlgorithmConstantZero_MP">固定アルゴリズム定数 0 (Clamping_zero) の出力:</entry>
    <entry key="FilterCoeffDenConstant_MP">フィルター係数の分母定数 (Filter Den Constant) の出力:</entry>
    <entry key="PCopyConstant_MP">P パラメーターの定数 (Pcopy) の出力:</entry>
    <entry key="NCopyConstant_MP">N パラメーターの定数 (Ncopy) の出力:</entry>
    <entry key="PIDAutoTuningMethodSelect_MP">調整法の選択:</entry>
    <entry key="IntFiltMethods_GT">積分器とフィルターの手法:</entry>
    <entry key="Initialization_TAB">初期化</entry>
    <entry key="IntegratorFilterInitialConditions_GT">積分器とフィルターの初期条件</entry>
    <entry key="AutomatedTuning_GT">自動調整</entry>
    <entry key="FixedPointToolBtn">固定小数点ツールを開く...</entry>
    <entry key="AdditionalDataTypes_GT">追加のデータ型</entry>
    <entry key="FixedPointOperationalParameters_GT">固定小数点が使用可能なパラメーター</entry>
    <entry key="StateAttributesEmptyTab_GT">現在の構成では PID コントローラーに状態は存在しません。</entry>
    <entry key="InitializationEmptyTab_GT">現在の構成では、初期化する状態は PID コントローラーに存在しません。</entry>
    <entry key="UdiffTsProdOut_MP">U_differentiator * Ts の乗算出力:</entry>
    <entry key="NTsProdOut_MP">N * Ts の乗算出力:</entry>
    <entry key="UintegralTsProdOut_MP">U_integral * Ts の乗算出力:</entry>
    <entry key="UngainTsProdOut_MP">U_Ngain * Ts の乗算出力:</entry>
    <entry key="UseITs_MP">I*Ts を使用 (codegen に最適)</entry>
    <entry key="IntegralITs_MP">積分項 (I*Ts):</entry>
    <entry key="IntegratorSaturation_GT">積分器の飽和</entry>
    <entry key="ICSaturationCheck_ErrMsg">積分器とフィルターの初期状態は飽和制限内でなければなりません。</entry>
    <entry key="UseExternalDerivative_MP">外部ソースの導関数を使用</entry>
    <entry key="CoulombFrictionValueOffset_MP">クーロン摩擦値 (Offset):</entry>
    <entry key="CoefficientOfViscousFrictionGain_MP">粘性摩擦係数 (Gain):</entry>
    <entry key="CoulombicAndViscousFriction_MD">クーロン摩擦モデルの 0 における不連続オフセットです。線形ゲインはさまざまな粘性摩擦をモデル化します。\ny = sign(x) * (Gain * abs(x) + Offset)</entry>
    <entry key="DeadZoneDynamic_MD">不感帯内の入力に対して 0 を出力します。不感帯の外側の場合、上限または下限値のいずれかでオフセットされた入力信号になります。</entry>
    <entry key="RateLimiterDynamic_MD">1 番目の入力 (上限) と 3 番目の入力 (下限) を使うことで、2 番目の入力で信号の立ち上がりと立ち下がりの範囲を制限します。</entry>
    <entry key="OutputMinimum_MP">出力の最小値:</entry>
    <entry key="OutputMaximum_MP">出力の最大値:</entry>
    <entry key="OutputDataType_MP">出力データ型:</entry>
    <entry key="OutputDataTypeMode_MP">出力データ型モード:</entry>
    <entry key="OutputDataTypeegFixdt116Fixdtsingle_MP">出力データ型 (例: fixdt(1, 16), fixdt(''single'')):</entry>
    <entry key="OutputScalingSlopeEg29OrSlopeBias_MP">出力のスケーリング (傾き、例: 2^-9。または [傾き バイアス]、例: [1.25 3]):</entry>
    <entry key="InputDatatype_MP">入力データ型:</entry>
    <entry key="SaturationDynamic_MD">1 番目の入力 (上限) と 3 番目の入力 (下限) を使うことで、2 番目の入力の範囲とします。</entry>
    <entry key="Threshold_MP">しきい値:</entry>
    <entry key="WrapToZero_MD">入力がしきい値よりも大きい場合は出力は 0 になり、そうでない場合は出力は入力と等しくなります。</entry>
    <entry key="InitialConditionForPreviousInput_MP">前の入力の初期条件:</entry>
    <entry key="Difference_MD">現在の入力値から前の入力値を引いて出力します。</entry>
    <entry key="GainValue_MP">ゲイン値:</entry>
    <entry key="InitialConditionForPreviousWeightedInputKuTs_MP">前の重み付き入力 K*u/Ts の初期条件:</entry>
    <entry key="DiscreteDerivative_MD">入力の離散時間微分です。\n\nこのブロックは固定のサンプル レートでのみ動作します。非周期的なトリガーを含むサブシステムでこのブロックを使用しないでください。</entry>
    <entry key="FirstOrderHold_MD">1 次ホールド。</entry>
    <entry key="NumberOfDelays_MP">遅延数:</entry>
    <entry key="InputProcessing_MP">入力処理:</entry>
    <entry key="IntegerDelay_MD">信号を N サンプル周期遅延させます。</entry>
    <entry key="OrderOutputVectorStartingWith_MP">次で始まる出力ベクトルを並べる:</entry>
    <entry key="IncludeCurrentInputInOutputVector_MP">出力ベクトル内の現在の入力を含む</entry>
    <entry key="TappedDelayLine_MD">信号を N サンプル周期遅延させ、すべての遅延バージョンを出力します。</entry>
    <entry key="PoleinZPlane_MP">極 (Z 平面における):</entry>
    <entry key="InitialConditionForPreviousOutput_MP">前の出力の初期条件:</entry>
    <entry key="FirstOrderTransferFcn_MD">離散時間の 1 次伝達関数です。伝達関数は 1 の DC ゲインをもちます。</entry>
    <entry key="PoleOfCompensatorinZPlane_MP">補償器の極 (Z 平面における):</entry>
    <entry key="ZeroOfCompensatorinZPlane_MP">補償器の零点 (Z 平面における):</entry>
    <entry key="LeadOrLagCompensator_MD">離散時間のリードまたはラグ補償器です。補償器は 1 の瞬間ゲインをもち、DC ゲインは (1-Zero)/(1-Pole) と等しくなります。\n\nリード補償器は、0 &lt; 極 &lt; 零点 &lt; 1 の場合に得られます。\nラグ補償器は、0 &lt; 零点 &lt; 極 &lt; 1 の場合に得られます。</entry>
    <entry key="ZeroinZPlane_MP">零点 (Z 平面における):</entry>
    <entry key="TransferFcnRealZero_MD">離散時間の伝達関数は、実数零点をもち、(事実上) 極をもちません。</entry>
    <entry key="IndexOfBit0IsLeastSignificant_MP">ビットのインデックス (0 は最下位):</entry>
    <entry key="BitClear_MD">格納された整数の i 番目のビットを 0 にクリアします。スケーリングは無視されます。</entry>
    <entry key="BitSet_MD">格納された整数の i 番目のビットを 1 に設定します。スケーリングは無視されます。</entry>
    <entry key="Operator_MP">演算子:</entry>
    <entry key="UseBitMask_MP">ビット マスクの使用...</entry>
    <entry key="NumberOfInputPorts_MP">入力端子の数:</entry>
    <entry key="BitMask_MP">ビット マスク</entry>
    <entry key="TreatMaskAs_MP">マスクの取り扱い:</entry>
    <entry key="BitwiseOperator_MD">入力で指定したビット演算を行います。出力データ型は正確に 0 を表す必要があります。</entry>
    <entry key="ConstantValue_MP">定数値:</entry>
    <entry key="CompareToConstant_MD">信号を定数と比較する方法を定義します。</entry>
    <entry key="CompareToZero_MD">信号を 0 と比較する方法を定義します。</entry>
    <entry key="DetectChange_MD">入力が前回の値と等しくない場合は TRUE を出力し、そうでない場合は FALSE を出力します。初期条件は前回の入力 U/z の初期値を定義します。</entry>
    <entry key="DetectDecrease_MD">入力が前回の値より厳密に小さい場合は TRUE を出力し、そうでない場合は FALSE を出力します。初期条件は前回の入力 U/z の初期値を定義します。</entry>
    <entry key="DetectIncrease_MD">入力が前回の値より厳密に大きい場合は TRUE を出力し、そうでない場合は FALSE を出力します。初期条件は前回の入力 U/z の初期値を定義します。</entry>
    <entry key="DetectFallNegative_MD">入力が厳密に負で前回の値が正の場合、出力は TRUE になり、そうでない場合は FALSE を出力します。初期条件は論理式 (U/z &lt; 0) の初期値を定義します。</entry>
    <entry key="DetectFallNonpositive_MD">入力が非正で前回の値が厳密に正の場合、出力は TRUE になり、そうでない場合は FALSE を出力します。初期条件は論理式 (U/z &lt;= 0) の初期値を定義します。</entry>
    <entry key="DetectRiseNonnegative_MD">入力が正で前回の値が厳密に負の場合、出力は TRUE になり、そうでない場合は FALSE を出力します。初期条件は論理式 (U/z &gt;= 0) の初期値を定義します。</entry>
    <entry key="DetectRisePositive_MD">入力が厳密に正で前回の値が非正の場合、出力は TRUE になり、そうでない場合は FALSE を出力します。初期条件は論理式 (U/z &gt; 0) の初期値を定義します。</entry>
    <entry key="BitsToExtract_MP">ビット展開:</entry>
    <entry key="NumberOfBits_MP">ビット数:</entry>
    <entry key="BitIndicesstartEnd0basedRelativeToLSB_MP">ビットのインデックス ([開始 終了], LSB に対して 0 ベース):</entry>
    <entry key="OutputScalingMode_MP">出力スケーリング モード:</entry>
    <entry key="ExtractBits_MD">入力信号から選択された連続ビットを出力します。[ビット展開] パラメーターを使用して、出力するビットを選択します。</entry>
    <entry key="IntervalClosedOnRight_MP">右閉区間</entry>
    <entry key="UpperLimit_MP">上限:</entry>
    <entry key="IntervalClosedOnLeft_MP">左閉区間</entry>
    <entry key="LowerLimit_MP">下限:</entry>
    <entry key="IntervalTest_MD">入力が下限と上限の間の区間にある場合、出力は TRUE になり、そうでない場合は FALSE になります。</entry>
    <entry key="IntervalTestDynamic_MD">入力が下限と上限の間の区間にある場合、出力は TRUE になり、そうでない場合は FALSE になります。</entry>
    <entry key="OutputFormula_MP">出力式</entry>
    <entry key="NumberOfDataPointsForLookupTable_MP">ルックアップ テーブルのデータ点の数:</entry>
    <entry key="OutputWordLength_MP">出力語長:</entry>
    <entry key="InternalRulePriorityForLookupTable_MP">ルックアップ テーブルの内部ルール優先順位:</entry>
    <entry key="SineAndCosine_MD">4 分の 1 波長の対称を使ったルックアップ テーブル法を使って固定小数点で正弦関数と余弦関数を実行します。出力の小数部の長さは出力語長 -2 に等しくなります。\n\n最も効率的な実行は、データ点数が (2^n)+1 の場合に得られます。ここで n は整数を表します。</entry>
    <entry key="LookupMethod_MP">ルックアップ手法:</entry>
    <entry key="LookupTableDynamic_MD">選択したルックアップ手法を使って 1 次元関数を近似します。</entry>
    <entry key="MatLibTranspose_MD">M 行 N 列の行列の転置を計算します。</entry>
    <entry key="MatLibHermitian_MD">M 行 N 列の行列のエルミート転置を計算します。</entry>
    <entry key="MatLibMatrixSquare_MD">行列の平方 A' * A を計算します。複素数入力に対してはエルミート転置が実行されます。[M 行 1 列] および [1 行 N 列] の入力行列を使用すると、効率的に外積と内積をそれぞれ計算できます。</entry>
    <entry key="MatLibCrossProduct_MD">2 つの 3 行 1 列のベクトル \na=[a1 a2 a3]、b=[b1 b2 b3] のクロス積。\ny = a x b = (a2b3 - a3b2)i + (a3b1 - a1b3)j + (a1b2 - a2b1)k</entry>
    <entry key="InitialGuess_MP">初期推定:</entry>
    <entry key="AlgebraicConstraint_MD">入力信号 f(z) を 0 に制約し、代数状態 z を出力します。このブロックは、入力で 0 を生成するために必要な値を出力します。出力はいくつかのフィードバック パスを通じて入力に作用しなければなりません。代数ループのソルバーの影響を改善するために出力の初期推定を与えます。</entry>
    <entry key="Function_MP">関数:</entry>
    <entry key="MinMaxRunningResettable_MD">過去の入力 u のすべての最大値と最小値を出力します。リセットの入力信号 R が TRUE の場合、出力は初期条件にリセットされます。リセット アクションはベクトル化され、スカラー拡張をサポートします。</entry>
    <entry key="Low_MP">低</entry>
    <entry key="Gain_MP">ゲイン</entry>
    <entry key="High_MP">高</entry>
    <entry key="MaximumGradient_MP">最大の勾配:</entry>
    <entry key="EnableAssertion_MP">アサーションを有効にする</entry>
    <entry key="SimulationCallbackWhenAssertionFails_MP">アサーションが失敗したときのシミュレーションコールバック (オプション):</entry>
    <entry key="StopSimulationWhenAssertionFails_MP">アサーションが失敗したときにシミュレーションを中止</entry>
    <entry key="OutputAssertionSignal_MP">アサーション信号の出力</entry>
    <entry key="SelectIconType_MP">アイコン タイプの選択:</entry>
    <entry key="Checks_Gradient_MD">離散信号の連続したサンプル間の差の絶対値が、指定した上限値より低い値であることをアサートします。</entry>
    <entry key="Checks_DGap_MD">入力信号 ''u'' が常に下限 ''min'' より小さい、または、上限 ''max'' より大きいことをアサートします。1 番目の入力はギャップの上限、2 番目の入力は下限、3 番目の入力はテスト信号です。</entry>
    <entry key="Checks_DRange_MD">1 つの信号が常に別の 2 つの信号間にあることをアサートします。1 番目の入力は信号の上限、2 番目の入力は下限、3 番目の入力はテスト信号です。</entry>
    <entry key="UpperBound_MP">上限:</entry>
    <entry key="InclusiveUpperBound_MP">上限を含む</entry>
    <entry key="LowerBound_MP">下限:</entry>
    <entry key="InclusiveLowerBound_MP">下限を含む</entry>
    <entry key="Checks_SGap_MD">入力信号が静的な下限より小さい (オプションで等値も含む)、または、静的な上限値より大きい (オプションで等値も含む) ことをアサートします。</entry>
    <entry key="Checks_SRange_MD">入力信号が静的な下限と上限の (または、オプションでどちらかの境界の等値を含む) 間にあることをアサートします。 </entry>
    <entry key="Checks_DMin_MD">信号が別の信号よりも常に小さいことをアサートします。1 番目の入力は下限信号です。2 番目の入力はテスト信号です。</entry>
    <entry key="Checks_DMax_MD">信号が別の信号よりも常に大きいことをアサートします。1 番目の入力は上限信号です。2 番目の入力はテスト信号です。</entry>
    <entry key="Resolution_MP">分解能:</entry>
    <entry key="Checks_Resolution_MD">入力信号の分解能を規定します。分解能がスカラーの場合、入力信号は 10e-3 の許容誤差以内の分解能の倍数でなければなりません。分解能がベクトルの場合、入力信号は分解能ベクトルの 1 つの要素と等しくなければなりません。</entry>
    <entry key="InclusiveBoundary_MP">境界を含む</entry>
    <entry key="Checks_SMin_MD">入力信号が静的な下限値より大きい (または、オプションで等値を含む) ことをアサートします。</entry>
    <entry key="Checks_SMax_MD">入力信号が静的な上限値より小さい (または、オプションで等値を含む) ことを主張 (アサート) します。\n</entry>
    <entry key="BlockSupportTable_MD">ブロックをダブルクリックすると、Simulink ブロックのデータ型のサポート テーブルが起動します。</entry>
    <entry key="DocBlockEmbeddedCoderFlagLabel_MP">コード生成テンプレートの記号</entry>
    <entry key="DocBlockDocTypeLabel_MP">ドキュメント タイプ</entry>
    <entry key="DocBlock_MD">長い説明テキストをモデルと共に保存するためにこのブロックを使用します。エディターを開くには、ブロックをダブルクリックしてください。</entry>
    <entry key="Frame_MP">フレーム</entry>
    <entry key="CMBlock_MD">このブロックは、改訂管理情報をモデル内に表示することを許可します。</entry>
    <entry key="LinearizationTime_MP">線形化の時間:</entry>
    <entry key="SampleTimeofLinearizedModel_MP">(線形化したモデルの) サンプル時間:</entry>
    <entry key="TimedLinearization_MD">特定の時間でベース ワークスペースに線形モデルを生成します。\n</entry>
    <entry key="TriggerType_MP">トリガー タイプ:</entry>
    <entry key="TriggeredLinearization_MD">トリガーがかかるときベース ワークスペースに線形モデルを生成します。</entry>
    <entry key="IOPortSubsystem_MD">Subsystem ブロックのテンプレートは、Inport ブロックと Outport ブロックを含みます。</entry>
    <entry key="EnabledSubsystem_MD">Subsystem ブロックのテンプレートは、イネーブル端子、Inport ブロックと Outport ブロックを含みます。</entry>
    <entry key="ResettableSubsystem_MD">Subsystem ブロックのテンプレートは、リセット端子、Inport ブロックと Outport ブロックを含みます。</entry>
    <entry key="EnabledAndTriggeredSubsystem_MD">Subsystem ブロックのテンプレートは、イネーブル端子、トリガー端子、Inport ブロックと Outport ブロックを含みます。</entry>
    <entry key="ForEachSubsystem_MD">Subsystem ブロックのテンプレートは、それぞれ Inport ブロックと Outport ブロックを含みます。</entry>
    <entry key="NeighborhoodProcessingSubsystem_MD">Subsystem ブロックのテンプレートは、Neighborhood、Inport および Outport ブロックを含みます。</entry>
    <entry key="ArrayProcessing_MD">配列処理ブロック、Inport ブロック、および Outport ブロックを含む Subsystem ブロックのテンプレート。</entry>
    <entry key="PixelProcessing_MD">ピクセル処理ブロック、Inport ブロック、および Outport ブロックを含む Subsystem ブロックのテンプレート。</entry>
    <entry key="InjectorSubsystem_MD">Injector Inport と Injector Outport ブロックを含む、Subsystem ブロックのテンプレート。</entry>
    <entry key="ForIteratorSubsystem_MD">Subsystem ブロックのテンプレートは、For Iterator、Inport、Outport ブロックを含みます。</entry>
    <entry key="SynchronousSubsystem_MP">Subsystem ブロックのテンプレートには、State Control、Inport および Outport ブロックを含みます。</entry>
    <entry key="EnabledSynchronousSubsystem_MP">Subsystem ブロックのテンプレートには、Enable Port、State Control、Inport および Outport ブロックを含みます。</entry>
    <entry key="ResettableSynchronousSubsystem_MP">Subsystem ブロックのテンプレートには、リセット端子、State Control、Inport および Outport ブロックが含まれています。</entry>
    <entry key="NumberOfIterations_MP">反復回数:</entry>
    <entry key="Scalar_MP">広範囲の出力を許可しない</entry>
    <entry key="ShowEnablePort_MP">イネーブル端子を表示する</entry>
    <entry key="FunctionCallGenerator_MD">このブロックを接続先としている関数呼び出しサブシステム、モデル、または Stateflow チャートを指定レートで実行します。複数の関数呼び出しブロックを所定の順序で実行するには、このブロックを Function-Call Split ブロックと併用します。 \n\n[サンプル時間] パラメーターは、このブロックに接続している各関数呼び出しブロックを実行するレートを指定します。このブロックに接続されている各関数呼び出しブロックを各タイム ステップで複数回反復して実行するには、[反復回数] パラメーターを使用します。 \n\n[イネーブル端子を表示する] チェックボックスをオンにすると、イネーブル端子への入力信号が正のスカラー値をもつ場合にのみブロックは関数呼び出し信号を出力します。</entry>
    <entry key="FunctionCallSubsystem_MD">Subsystem ブロックのテンプレートは、Function-Call Trigger 端子、Inport ブロックと Outport ブロックを含みます。</entry>
    <entry key="SimulinkFunction_MD">サブシステム ブロックのテンプレートが、関数呼び出しトリガー端子、入力引数ブロック、および出力引数ブロックを含む Simulink 関数として構成されました。</entry>
    <entry key="InitializeFunction_MD">'初期化' イベントに設定されているイベント リスナー ブロック、Constant ブロック、および State Writer ブロックを含む、Subsystem ブロックのテンプレートです。</entry>
    <entry key="ReinitializeFunction_MD">[イベント名] パラメーターが 'reinit' に設定された [再初期化] イベントに設定されている Event Listener ブロック、Constant ブロック、および State Writer ブロックを含む Subsystem ブロックのテンプレートです。</entry>
    <entry key="ResetFunction_MD">[イベント名] パラメーターが [リセット] に設定された 'リセット' イベントに設定されているイベント リスナー ブロック、Constant ブロック、および State Writer ブロックを含む Subsystem ブロックのテンプレートです。</entry>
    <entry key="TerminateFunction_MD">'Terminate' イベント、State Reader ブロックおよび Terminator ブロックに設定されているイベント リスナー ブロックを含む Subsystem ブロックのテンプレートです。</entry>
    <entry key="RunFirstSubsystem_MD">Subsystem ブロックのテンプレートは、[First] モードに設定された Run Order Specifier ブロック、Inport ブロック、および Outport ブロックを含みます。</entry>
    <entry key="RunLastSubsystem_MD">Subsystem ブロックのテンプレートは、[Last] モードに設定された Run Order Specifier ブロック、Inport ブロック、および Outport ブロックを含みます。</entry>
    <entry key="ActionSubsystem_MD">Subsystem ブロックのテンプレートは、Action 端子、Inport ブロックと Outport ブロックを含みます。</entry>
    <entry key="SubsystemExamples_MD">Subsystem の異なるタイプの使用法の例です。</entry>
    <entry key="TriggeredSubsystem_MD">Subsystem ブロックのテンプレートは、Trigger 端子、Inport ブロックと Outport ブロックを含みます。</entry>
    <entry key="MessageTriggeredSubsystem_MD">Subsystem ブロックのテンプレートに、トリガー端子と Outport ブロックが含まれています。</entry>
    <entry key="VariantSubsystem_MD">バリアントの選択肢として Subsystem ブロックを含む Variant Subsystem のテンプレート。</entry>
    <entry key="VariantModel_MD">バリアントの選択肢として Model ブロックを含む Variant Subsystem のテンプレート。</entry>
    <entry key="VariantAssemblySubsystem_MD">バリアント アセンブリ モードの Variant Subsystem のテンプレート。</entry>
    <entry key="WhileIteratorSubsystem_MD">Subsystem ブロックのテンプレートは、While Iterator、Inport、Outport ブロックを含みます。</entry>
    <entry key="InputAndOutputToHaveEqual_MP">等価な値をもつ入力と出力:</entry>
    <entry key="ConversionInherited_MD">2 番目の入力を 1 番目の入力のデータ型やスケーリングに変換します。\n\nこの変換には、2 つの目的があります。1 つは、入力と出力の実際値を等しくすることです。もう 1 つは、入力と出力の整数格納値を等しくすることです。オーバーフローと量子化誤差があると、この目的を完全に達成することができません。</entry>
    <entry key="x1PropagatedDataType_MP">1. 伝播データ型:</entry>
    <entry key="x11PropagatedDataTypeegFixdt116Fixdtsingle_MP">1.1. 伝播のデータ型 (例: fixdt(1, 16), fixdt(''single'')):</entry>
    <entry key="x11IfAnyReferenceInputIsDoubleOutputIs_MP">1.1. 基準入力が double の場合の出力:</entry>
    <entry key="x12IfAnyReferenceInputIsSingleOutputIs_MP">1.2. 基準入力が single の場合の出力:</entry>
    <entry key="x13IsSigned_MP">1.3. 符号付き:</entry>
    <entry key="x141NumberofBitsBase_MP">1.4.1. ビット数:ベース</entry>
    <entry key="x142NumberofBitsMultiplicativeAdjustment_MP">1.4.2. ビット数:乗法調整</entry>
    <entry key="x143NumberofBitsAdditiveAdjustment_MP">1.4.3. ビット数:加法調整</entry>
    <entry key="x144NumberofBitsAllowableFinalValues_MP">1.4.4. ビット数:許容可能な最終値</entry>
    <entry key="x2PropagatedScaling_MP">2. 伝播スケーリング:</entry>
    <entry key="x21PropagatedScalingSlopeEg29OrSlopeBiasEg1253_MP">2.1. 伝播のスケーリング (傾き、例: 2^-9。または [傾き バイアス]、例: [1.25 3]):</entry>
    <entry key="x21ValuesUsedToDetermineBestPrecisionScaling_MP">2.1. 最高精度のスケーリングを決めるのに使用する値。</entry>
    <entry key="x211SlopeBase_MP">2.1.1. 傾き:ベース</entry>
    <entry key="x212SlopeMultiplicativeAdjustment_MP">2.1.2. 傾き:乗法調整</entry>
    <entry key="x213SlopeAdditiveAdjustment_MP">2.1.3. 傾き:加法調整</entry>
    <entry key="x221BiasBase_MP">2.2.1. バイアス:ベース</entry>
    <entry key="x222BiasMultiplicativeAdjustment_MP">2.2.2. バイアス:乗法調整:</entry>
    <entry key="x223BiasAdditiveAdjustment_MP">2.2.3. バイアス:加法調整:</entry>
    <entry key="DataTypePropagation_MD">基準信号からの情報に基づき伝播信号のデータ型とスケーリングを設定します。\nメモ:\n1) ダイアログの最上部に近い項目ほど、優先されます。\na) double の基準入力は、他のすべてのデータ型に優先します。\nb) single は、整数および固定小数点データ型に優先します。\nc) 乗算の調整は加法調整の前に行われます。\nd) ビット数は、精度または正の範囲が基準信号から継承される前に決められます。\n2) PosRange は、信号の正の最大範囲より 1 ビット高くなります。\n3) 計算されたビット数は、計算値以上の最小の許容値にプロモートされます。何も存在しない場合は、ブロックからエラーが返されます。</entry>
    <entry key="DataTypePropagationExamples_MD">データ型の伝播の例を含むモデルを開きます。</entry>
    <entry key="ScalingStrip_MD">このブロックはスケーリングオフした信号を取り除きます。入力のデータ型を入力を保持するのに十分なビットをもつ最小の組み込みデータ型にマッピングします。入力の格納された整数値は出力値になります。出力は常に公称スケーリング (傾き = 1.0 とバイアス = 0.0) のため、出力は実際値と整数格納値の区別を行いません。</entry>
    <entry key="EnvironmentController_MD">現在の環境に応じてシミュレーション (Sim) またはコード生成 (Coder) の端子を出力します。最適化を有効にすることで、未使用の端子につながる不要なブロックは実行されません。両方の入力信号は同じ幅でなければなりません。</entry>
    <entry key="xmin_MP">X 最小値:</entry>
    <entry key="xmax_MP">X 最大値:</entry>
    <entry key="ymin_MP">Y 最小値:</entry>
    <entry key="ymax_MP">Y 最大値:</entry>
    <entry key="XYScope_MD">各タイム ステップで、1 番目の入力 (X) に対して 2 番目の入力 (Y) をプロットし、X-Y プロットを作成します。最小 (X)、最大 (X)、最小 (Y)、最大 (Y) で指定された範囲外のデータは無視されます。</entry>
    <entry key="NoisePower_MP">ノイズ パワー:</entry>
    <entry key="Seed_MP">シード:</entry>
    <entry key="InterpretVectorParametersAs1D_MP">ベクトル パラメーターを 1 次元として解釈</entry>
    <entry key="BandLimitedWhiteNoise_MD">Band-Limited White Noise ブロックは、連続またはハイブリッド システムでの使用に適した正規分布の乱数を生成します。</entry>
    <entry key="InitialFrequencyHz_MP">初期周波数 (Hz):</entry>
    <entry key="TargetTimesecs_MP">ターゲット時間 (秒):</entry>
    <entry key="FrequencyAtTargetTimeHz_MP">ターゲット時間の周波数 (Hz):</entry>
    <entry key="chirp_MD">線形チャープ信号 (時間と共に周波数が線形に変化する正弦波) を出力します。</entry>
    <entry key="CounterFreeRunning_MD">このブロックは、指定したビット数に対して可能な最大値に達した後に、オーバーフローを 0 に戻すフリーラン カウンターです。カウンターは常に 0 に初期化されます。出力は、通常指定したビット数の符号なし整数です。</entry>
    <entry key="CounterLimited_MD">このブロックは、指定した上限の出力の後にラップを 0 に戻すカウンターです。カウンターは常に 0 に初期化されます。出力は、通常 8, 16 または 32 ビットの符号なし整数です。上限を表すのに必要な最小のビット数が使われます。</entry>
    <entry key="Value_MP">値:</entry>
    <entry key="Slope_MP">傾き:</entry>
    <entry key="StartTime_MP">開始時間:</entry>
    <entry key="InitialOutput_MP">初期出力:</entry>
    <entry key="Ramp_MD">指定した時間で開始するランプ信号を出力します。</entry>
    <entry key="SliderGain_MD">スライダーを動かしてスカラー ゲインを変更します。</entry>
    <entry key="TimeValues_MP">時間値:</entry>
    <entry key="OutputValues_MP">出力値:</entry>
    <entry key="RepeatingTable_MD">時間-値の組み合わせのテーブルに指定された数の繰り返した列を出力します。時間の値は単調増加でなければなりません。</entry>
    <entry key="VectorOfOutputValues_MP">出力値のベクトル:</entry>
    <entry key="VectorOfTimeValues_MP">時間の値のベクトル:</entry>
    <entry key="RepeatingSequenceInterpolated_MD">離散時間列の出力を繰り返します。データ点間では、出力を決めるために指定したルックアップ手法が使われます。</entry>
    <entry key="RepeatingSequenceStair_MD">離散時間列の出力を繰り返します。</entry>
    <entry key="SigbuilderBlock_MD">波形が区分的線形である信号の相互交換可能なグループを作成して生成します。\n\nSignal Builder ブロックは推奨されません。代わりに Signal Editor ブロックを使用してください。</entry>
    <entry key="Stateflow_MD">Embedded MATLAB ブロック</entry>
    <entry key="SFunctionBuilder_MD">S-Function Builder ブロックは複数の入力端子、出力端子、および可変数のスカラー、ベクトル、または行列パラメーターで与えられた C コードからラッパー C-MEX S-function を作成します。入力端子と出力端子は、Simulink の組み込みデータ型、固定小数点データ型、複素数、1-D、および 2-D の信号の伝播が可能です。さらに、このブロックは実数型の離散状態と連続状態もサポートします。オプションとして、コード生成用に TLC ファイルを生成するブロックをもつことも可能です。</entry>
    <entry key="SFunctionExamples_MD">S-Function の異なるタイプの使用法の例です。</entry>
    <entry key="LookupTableBreakpoints_MP">ルックアップ テーブルのブレークポイント</entry>
    <entry key="AllowedSpacingpow2evenOrunrestricteddefault_MP">可能な間隔 'pow2'、'even'、または 'unrestricted' (既定の設定) </entry>
    <entry key="MaximumNumberOfBreakpoints_MP">ブレークポイントの最大数</entry>
    <entry key="MaximumWorstCaseApproximationError_MP">最悪ケースの最大近似誤差</entry>
    <entry key="RoundingMethodfloordefaultceilnearOrzero_MP">丸め方法 'floor' (既定の設定)、'ceil'、'near'、または 'zero'</entry>
    <entry key="OutputScaling_MP">出力スケーリング</entry>
    <entry key="InputScaling_MP">入力スケーリング</entry>
    <entry key="MaximumInputValueOfInterest_MP">対象の最大入力値</entry>
    <entry key="MinimumInputValueOfInterest_MP">対象の最小入力値</entry>
    <entry key="MEGMAFixedPointCosine_MD">MEGMA 余弦</entry>
    <entry key="MEGMAFixedPointExponent_MD">MEGMA 指数</entry>
    <entry key="MEGMAFixedPointSine_MD">MEGMA 正弦</entry>
    <entry key="MEGMAFixedPointSqrt_MD">MEGMA 平方根</entry>
    <entry key="MEGMAFixedPointTangent_MD">MEGMA 正接</entry>
    <entry key="ComputeAlways">常に計算</entry>
    <entry key="CacheForASpecificMATLABSession">特定の MATLAB セッションのキャッシュ</entry>
    <entry key="CacheAcrossDifferentMATLABSessions">異なる MATLAB セッションにわたるキャッシュ</entry>
    <entry key="Main">メイン</entry>
    <entry key="SignalAttributes">信号属性</entry>
    <entry key="Propagatedtype">伝播タイプ</entry>
    <entry key="Propagatedscaling">伝播スケーリング</entry>
    <entry key="MultiplyAdd_MD">最初の 2 つの入力を乗算し、3 番目の入力に結果を加算するか、3 番目の入力から結果を減算します。関数オプションは演算モードを定義します。このブロックは FPGA 上の DSP スライスに効率的にマッピングするために設計されています。</entry>
    <entry key="BitConcat_MD">入力語を連結します。スカラー入力の場合は、2 つ以上の入力信号をブロックに接続する必要があります。ベクトル入力の場合は、少なくとも 1 つの入力をブロックに接続する必要があります。出力における左から右の語順は、入力信号の順序に従います。L 入力が最低次数の語であり、H 入力が最高次数の語です。</entry>
    <entry key="BitSlice_MD">連続するビット フィールドを入力信号から返します。フィールドは [LSB 位置] および [MSB 位置] によってインデックス付け (LSB に対して 0 ベース) されます。</entry>
    <entry key="BitReduce_MD">[削減モード] パラメーターの指定に従って、入力信号のビット単位 AND、OR、または XOR リダクションを実行します。</entry>
    <entry key="BitRotate_MD">[回転モード] パラメーターの指定に従って、入力信号を左右いずれかに回転します。[回転長] は、回転するビット数を指定します。</entry>
    <entry key="BitShift_MD">[シフト モード] パラメーターの指定に従って、入力信号に対して論理シフトまたは算術シフトを実行します。[シフト長] はシフトされるビット数を指定します。</entry>
    <entry key="WordToBits_MD">入力を、N 個の 1 ビット値のベクトルに変換します。N は [最大語長] マスク パラメーターによって与えられます。</entry>
    <entry key="BitsToWord_MD">N 個の 1 ビット値の入力ベクトルを N ビットの整数に変換します。</entry>
    <entry key="HDLCounter_MD">HDL コード生成のカウンター。</entry>
    <entry key="TappedDelayEnabledSynchronous_MD">通常は、スカラー信号の複数のサンプル周期を遅延させ、すべての遅延バージョンを出力します。 \nイネーブル信号が false の場合ブロックは無効になり、状態と出力値は変更しません。</entry>
    <entry key="UnitDelayEnabledSynchronous_MD">通常、出力は 1 サンプル周期で遅れる信号 u です。\nイネーブル信号が false の場合ブロックは無効になり、状態と出力値は変化しません。イネーブル アクションはスカラー入力のみをサポートします。信号 u がベクトルである場合は、スカラー拡張がイネーブル アクションに使用されます。</entry>
    <entry key="UnitDelayResettableSynchronous_MD">通常、出力は 1 サンプル周期で遅れる信号 u です。\nリセット信号 R が true の場合、状態と出力は常に初期条件パラメーターに等しく設定されます。このブロックは、ハードウェアと親和性のあるリセット動作を示します。このリセット アクションはスカラー入力のみをサポートします。信号 u がベクトルである場合は、スカラー拡張がこのリセット アクションに使用されます。</entry>
    <entry key="UnitDelayEnabledResettableSynchronous_MD">通常、出力は 1 サンプル周期で遅れる信号 u です。\nイネーブル信号が false の場合ブロックは無効になり、状態と出力値は変化しません。イネーブル アクションはスカラー入力のみをサポートします。信号 u がベクトルである場合は、スカラー拡張がイネーブル アクションに使用されます。\nリセット信号 R が true の場合、状態と出力は常に初期条件パラメーターに等しく設定されます。このブロックは、ハードウェアと親和性のあるリセット動作を示します。このリセット アクションはスカラー入力のみをサポートします。信号 u がベクトルである場合は、スカラー拡張がこのリセット アクションに使用されます。</entry>
    <entry key="TappedDelayResettableSynchronous_MD"> 通常は、スカラー信号の複数のサンプル周期を遅延させ、すべての遅延バージョンを出力します。\nリセット信号 R が true の場合、状態と出力は常に初期条件パラメーターに等しく設定されます。このブロックは、ハードウェアと親和性のあるリセット動作を示します。</entry>
    <entry key="TappedDelayEnabledResettableSynchronous_MD">通常は、スカラー信号の複数のサンプル周期を遅延させ、すべての遅延バージョンを出力します。\nイネーブル信号が false の場合、ブロックは無効になり、状態と出力値は変化しません。\nリセット信号 R が true の場合、状態と出力は常に初期条件パラメーターに等しく設定されます。このブロックは、ハードウェアと親和性のあるリセット動作を示します。</entry>
    <entry key="DualPortRAM_MD">このブロックは、2 つのデータ出力端子をもつデュアルポート RAM をシミュレートします。</entry>
    <entry key="SimpleDualPortRAM_MD">このブロックは、1 つのデータ出力端子をもつシンプル デュアルポート RAM をシミュレートします。</entry>
    <entry key="SinglePortRAM_MD">このブロックは、シングルポート RAM をシミュレートします。</entry>
    <entry key="DualRateDualPortRAM_MD">このブロックは、2 つのデータ出力端子をもつデュアルクロックのデュアルポート RAM をシミュレートします。</entry>
    <entry key="HDLFIFO_MD">同期 "先入れ先出し法" (FIFO) レジスタを実装します。</entry>
    <entry key="MultiplyAccumulate_MD">演算モード: ベクトル\n dataOut= sum(a.*b) + c \n\n演算モード: ストリーミング- Start 端子と End 端子を使用 \ndataOut(t+1)= dataOut(t) + sum(a(t)*b(t)) + c \nここで start and valid=high のときは c=バイアス、\nそれ以外は c=0 \n\n演算モード: ストリーミング- サンプルの数を使用 \ndataOut(t+1)= dataOut(t) + sum(a(t)*b(t)) + c \nここで t=0 のとき c=バイアス \nそれ以外は c=0 \n\nこのブロックは FPGA 上の DSP スライスに効率的にマッピングするために設計されています。</entry>
    <entry key="Serializer1D_MD">ベクトルからスカラーに、またはより小さいサイズのベクトルに変換します。出力レートは V * (比率 + アイドル サイクル) です。ここで V は入力レートです。</entry>
    <entry key="Deserializer1D_MD">スカラーからベクトルに、またはより小さいサイズのベクトルから大きいサイズのベクトルに変換します。出力レートは S / (比率 + アイドル サイクル) です。ここで S は入力レートです。</entry>
    <entry key="RotateMode_MP">回転モード</entry>
    <entry key="BitRotateLength_MP">回転長 (ゼロ以上であること)</entry>
    <entry key="ShiftMode_MP">シフト モード</entry>
    <entry key="BitShiftLength_MP">シフト長 (ゼロ以上であること)</entry>
    <entry key="CounterType_MP">カウンター タイプ:</entry>
    <entry key="InitialValue_MP">初期値:</entry>
    <entry key="StepValue_MP">ステップ値:</entry>
    <entry key="CountToValue_MP">カウント終了値:</entry>
    <entry key="CountFrom_MP">カウント開始:</entry>
    <entry key="CountFromValue_MP">カウント開始値:</entry>
    <entry key="LocalReset_MP">ローカル リセット端子</entry>
    <entry key="LoadPorts_MP">読み込み端子</entry>
    <entry key="CountEnable_MP">カウント イネーブル端子</entry>
    <entry key="CountDirection_MP">カウント方向端子</entry>
    <entry key="CountHit_MP">カウント ヒット出力端子</entry>
    <entry key="CountOutputData_MP">カウンター出力データ:</entry>
    <entry key="WordLength_MP">語長:</entry>
    <entry key="FractionLength_MP">小数部の長さ:</entry>
    <entry key="AddressPortWidth_MP">アドレス端子の幅 (2 ～ 29 ビット)</entry>
    <entry key="OutPutDataWrite_MP">書き込み中の出力データ:</entry>
    <entry key="AddressPort_MP">アドレス端子の幅 (2 ～ 28 ビット)</entry>
    <entry key="RAMType_MP">RAM のタイプの指定:</entry>
    <entry key="EnableAsyncRead_MP">非同期読み取りを有効化します</entry>
    <entry key="SpecifyOutputDataWrite_MP">書き込み操作を行う出力データの指定:</entry>
    <entry key="RAMInitialVal_MP">RAM の初期値の指定:</entry>
    <entry key="RegisterSize_MP">レジスタ サイズ:</entry>
    <entry key="Mode_MP">モード:</entry>
    <entry key="OutputInputSampleRatio_MP">入力サンプル時間に対する出力サンプル時間の比:</entry>
    <entry key="PushReg_MP">フル レジスタにプッシュ:</entry>
    <entry key="PopReg_MP">空のレジスタをポップ:</entry>
    <entry key="EmptyRegisterIndicator_MP">空のレジスタのインジケーター端子 (Empty) を表示</entry>
    <entry key="FullRegisterIndicator_MP">フル レジスタのインジケーター端子 (Full) を表示</entry>
    <entry key="RegisterEntries_MP">レジスタ エントリ数の端子 (Num) を表示</entry>
    <entry key="NumberInputs_MP">入力数</entry>
    <entry key="MSBPos_MP">MSB 位置</entry>
    <entry key="LSBPos_MP">LSB 位置</entry>
    <entry key="ReductionMode_MP">削減モード</entry>
    <entry key="MaxWordLength_MP">最大語長</entry>
    <entry key="OutputBitOrder_MP">出力ビット順</entry>
    <entry key="OutputSignedness_MP">ビット圧縮後、結果の整数を次のように扱う</entry>
    <entry key="InputBitOrder_MP">入力ビット順</entry>
    <entry key="FMA_MP">浮動小数点融合積和 (FMA)</entry>
    <entry key="OperationMode_MP">演算モード:</entry>
    <entry key="InputOutputVectorRatio_MP">比 (入力ベクトル サイズ/出力ベクトル サイズ)</entry>
    <entry key="IdleCycles_MP">アイドル サイクル</entry>
    <entry key="ControlPorts_MP">制御信号端子</entry>
    <entry key="ValidIn_MP">入力有効</entry>
    <entry key="ValidOut_MP">出力有効</entry>
    <entry key="StartOut_MP">出力開始</entry>
    <entry key="InputDataPortDim_MP">入力データ端子の次元 (継承は -1): </entry>
    <entry key="InputSampleTime_MP">入力サンプル時間 (継承は -1)</entry>
    <entry key="InputSignal_MP">入力信号タイプ</entry>
    <entry key="StartIn_MP">入力開始</entry>
    <entry key="OutputInputVectorRatio_MP">比 (出力ベクトル サイズ/入力ベクトル サイズ)</entry>
    <entry key="Ceiling">正方向</entry>
    <entry key="Convergent">最も近い偶数方向</entry>
    <entry key="Floor">負方向</entry>
    <entry key="Nearest">最も近い正の整数方向</entry>
    <entry key="Round">最も近い整数方向</entry>
    <entry key="Simplest">最も簡潔</entry>
    <entry key="Zero">ゼロ方向</entry>
    <entry key="ContinuousTime">連続時間</entry>
    <entry key="DiscreteTime">離散時間</entry>
    <entry key="ForwardEuler">前進オイラー法</entry>
    <entry key="BackwardEuler">後退オイラー法</entry>
    <entry key="Trapezoidal">台形則</entry>
    <entry key="Ideal">理想</entry>
    <entry key="Parallel">並列</entry>
    <entry key="internal">内部</entry>
    <entry key="external">外部</entry>
    <entry key="none">なし</entry>
    <entry key="rising">立ち上がり</entry>
    <entry key="falling">立ち下がり</entry>
    <entry key="either">両方</entry>
    <entry key="level">レベル</entry>
    <entry key="backCalculation">逆解析</entry>
    <entry key="clamping">固定</entry>
    <entry key="Auto">自動</entry>
    <entry key="SpecifyViaDialog">ダイアログにより指定</entry>
    <entry key="SameAsSecondInput">2 番目の入力と同じ</entry>
    <entry key="ColumnsAsChannelsFrameBased">チャネルとしての列 (フレーム ベース)</entry>
    <entry key="InheritViaInternalRule">内部ルールによる継承</entry>
    <entry key="InheritViaBackPropagation">逆伝播による継承</entry>
    <entry key="Oldest">最も古い</entry>
    <entry key="Newest">最も新しい</entry>
    <entry key="RealWorldValue">実際値</entry>
    <entry key="StoredInteger">整数格納</entry>
    <entry key="UpperHalf">上半分</entry>
    <entry key="LowerHalf">下半分</entry>
    <entry key="RangeStartingWithMostSignificantBit">最上位ビットで始まる範囲</entry>
    <entry key="RangeEndingWithLeastSignificantBit">最下位ビットで終わる範囲</entry>
    <entry key="RangeOfBits">ビット範囲</entry>
    <entry key="PreserveFixedPointScaling">固定小数点のスケーリングを保持</entry>
    <entry key="TreatBitFieldAsAnInteger">整数としてビットフィールドを扱う</entry>
    <entry key="InterpolationExtrapolation">内挿 - 外挿</entry>
    <entry key="InterpolationUseEndValues">内挿 - 最後の値を使用</entry>
    <entry key="InternalRulePrioritySpeed">速度</entry>
    <entry key="InternalRulePriorityPrecision">精度</entry>
    <entry key="UseInputNearest">入力の最近傍を使用</entry>
    <entry key="UseInputBelow">入力の下の値を使用</entry>
    <entry key="UseInputAbove">入力の上の値を使用</entry>
    <entry key="min">最小値</entry>
    <entry key="max">最大値</entry>
    <entry key="graphic">グラフィックス</entry>
    <entry key="text">テキスト</entry>
    <entry key="Text">テキスト</entry>
    <entry key="functionCall">関数呼び出し</entry>
    <entry key="InheritViaPropagationRule">伝播ルールにより継承</entry>
    <entry key="IsSigned1OrIsSigned2">IsSigned1 または IsSigned2</entry>
    <entry key="ObtainViaBestPrecision">最高精度により取得</entry>
    <entry key="UseSpecifiedScaling">指定したスケーリングを使用</entry>
    <entry key="BestPrecisionVectorWise">最高精度: ベクトル単位</entry>
    <entry key="ElementsAsChannelsSampleBased">チャネルとしての要素 (サンプル ベース)</entry>
    <entry key="Inherited">継承</entry>
    <entry key="UsePIDTunerApp">伝達関数ベース (PID 調整器アプリ)</entry>
    <entry key="UseOLSimulation">周波数応答ベース</entry>
    <entry key="GenSFuncName_MP">生成された S-Function 名 (model_sf):</entry>
    <entry key="GenSFuncShowModuleList_MP">モジュール リストを明示</entry>
    <entry key="GenSFuncListOfModules_IC">\nモジュールのリスト:\n{0}</entry>
    <entry key="GenSFuncNotLicensed_IC">ライセンスが供与されていません\n</entry>
    <entry key="GenSFuncNone_IC">なし</entry>
    <entry key="GenSFuncDesc_MD">Simulink Coder により生成された S-Function。</entry>
    <entry key="CustCodeQuickHelp_ID">クイック ヘルプ</entry>
    <entry key="CustCodeMaskParam1_MP">マスク パラメーター 1:</entry>
    <entry key="SL_DSCPT_PWMGenerator">
        各周期の最初の入力信号値をデューティ比 (D) とする理想的なパルス幅変調 (PWM) 信号を出力します。\n\n出力パルスは次で与えられます:\n\ny(t) = 1 (t(k) &lt;= t &lt; t(k) + pw(k) の場合)\n y(t) = 0 (t(k) + pw(k) &lt;= t &lt; t(k) + 周期の場合)\n\nここで、t(k) は 'k-1' 個のパルス出力後の時間、pw(k) はパルス幅、すなわち t(k) における入力 D(k) と周期の積 (pw(k) = 周期 * D(k)) です\n\nデューティ比の入力値は 0 ～ 1 とする必要があります。\n\n[ゼロのデューティ比を許可しない] チェック ボックスを選択すると、ブロックが直達なしで機能するようになるため、代数ループの解除に使用できます。ただし、デューティ比の入力値がゼロの場合、ブロックはシミュレーション中にエラー終了します。\n\n固定のサンプル時間間隔で出力信号値を生成するには、[固定の時間間隔で実行] チェックボックスをオンにします。
      </entry>
    <entry key="SL_DSCPT_AsyncInterrupt">下流のサブシステムまたはタスク ブロックを実行する、VME ベースの割り込みサービス ルーチンを作成します。</entry>
    <entry key="VME_InterruptNum_MP">VME 割り込み番号:</entry>
    <entry key="VME_InterruptVecOffset_MP">VME 割り込みベクトル オフセット:</entry>
    <entry key="TaskPriorities_MP">Simulink タスクの優先順位:</entry>
    <entry key="PreemptionFlag_MP">プリエンプション フラグ: preemptable-1、non-preemptable-0</entry>
    <entry key="ManageOwnTimer_MP">独自のタイマーを管理</entry>
    <entry key="TimerResolution_MP">タイマー分解能 (秒):</entry>
    <entry key="TimerSize_MP">タイマー サイズ:</entry>
    <entry key="EnableSimInput_MP">シミュレーション入力を有効にする</entry>
    <entry key="SL_DSCPT_TaskSync">別の VxWorks タスクとして発生するタスク関数を作成します。このタスク関数は、下流の Function-Call Subsystem のコードを実行します。このブロックを実行すると、セマフォが使用されてタスクの実行が有効になります。</entry>
    <entry key="TaskName_MP">タスク名 (10 文字以下):</entry>
    <entry key="TaskPriority_MP">Simulink タスクの優先順位 (0-255):</entry>
    <entry key="StackSize_MP">スタック サイズ (バイト):</entry>
    <entry key="SyncDataTrans_MP">このタスクのデータ転送を呼び出し側タスクと同期</entry>
    <entry key="NumBitsPerInteger">整数あたりのビット数(M):</entry>
    <entry key="InputBitOrder">入力ビット順:</entry>
    <entry key="TreatIntegerValuesAs">ビット圧縮後、結果の整数値を次のように扱う:</entry>
    <entry key="OutputDatatype">出力データ型:</entry>
    <entry key="TreatInputValuesAs">入力値を次のように扱う:</entry>
    <entry key="OutputBitOrder">出力ビット順:</entry>
    <entry key="Unsigned">符号なし</entry>
    <entry key="Signed">符号付き</entry>
    <entry key="SameAsInput">入力と同じ</entry>
    <entry key="SmallestInteger">最小の整数</entry>
    <entry key="SmallestUnsignedInteger">最小の符号なし整数</entry>
    <entry key="MSBFirst">MSB first</entry>
    <entry key="LSBFirst">LSB first</entry>
    <entry key="PermuteMatrix_MD">整数値の置換インデックスのベクトル P に基づいて、行列またはベクトル A の行または列を並べ替えます。インデックスは固有である必要はありません。[エラー] チェック ボックスをオンにする場合、ベクトル P の長さは、入力行または入力列の数 (並べ替える対象) と同じである必要があります。</entry>
    <entry key="Submatrix_MD">入力行列の選択された部分を返します。1-D 入力信号は 2-D 列ベクトルとして扱われます。出力は常に 2-D です。このブロックは、1 ベースのインデックスを実行します。</entry>
    <entry key="CreateDiagonalMatrix_MD">対角要素のベクトルを完全な行列に変換します。</entry>
    <entry key="ExtractDiagonal_MD">完全な行列の主対角を抽出します。</entry>
    <entry key="Permute_MP">並べ替え:</entry>
    <entry key="IndexMode_MP">インデックス モード:</entry>
    <entry key="InvalidPermutationIndex_MP">無効な置換インデックスです。</entry>
    <entry key="ErrorWhenLengthOfPIsNotEqualToPermuteDimensionSize_MP">P の長さが次元の並べ替えのサイズと等しくない場合にエラーが発生します</entry>
    <entry key="Rows_TO">行</entry>
    <entry key="Columns_TO">列</entry>
    <entry key="ZeroBased_TO">0 ベース</entry>
    <entry key="OneBased_TO">1 ベース</entry>
    <entry key="ClipIndex_TO">インデックスのクリップ</entry>
    <entry key="ClipAndWarn_TO">クリップおよび警告</entry>
    <entry key="GenerateError_TO">エラーの生成</entry>
    <entry key="RowSpan_MP">行の範囲: </entry>
    <entry key="StartingRow_MP">開始行:</entry>
    <entry key="StartingRowIndex_MP">開始行のインデックス:</entry>
    <entry key="EndingRow_MP">終了行:</entry>
    <entry key="EndingRowIndex_MP">終了行のインデックス:</entry>
    <entry key="ColumnSpan_MP">列の範囲: </entry>
    <entry key="StartingColumn_MP">開始列:</entry>
    <entry key="StartingColumnIndex_MP">開始列のインデックス:</entry>
    <entry key="EndingColumn_MP">終了列:</entry>
    <entry key="EndingColumnIndex_MP">終了列のインデックス:</entry>
    <entry key="AllRows_TO">すべての行</entry>
    <entry key="OneRow_TO">1 行</entry>
    <entry key="RangeOfRows_TO">行の範囲</entry>
    <entry key="First_TO">最初</entry>
    <entry key="Index_TO">インデックス</entry>
    <entry key="OffsetFromLast_TO">最後からのオフセット</entry>
    <entry key="Last_TO">最後</entry>
    <entry key="OffsetFromMiddle_TO">中央からのオフセット</entry>
    <entry key="Middle_TO">中央</entry>
    <entry key="AllColumns_TO">すべての列</entry>
    <entry key="OneColumn_TO">1 列</entry>
    <entry key="RangeOfColumns_TO">列の範囲</entry>
    <entry key="InitialSaveTempField_MP">InitialSaveTempField</entry>
    <entry key="InitialBlockCM_MP">InitialBlockCM</entry>
    <entry key="BlockCM_MP">BlockCM</entry>
    <entry key="SaveTempField_MP">SaveTempField</entry>
    <entry key="DisplayStringWithTags_MP">DisplayStringWithTags</entry>
    <entry key="MaskDisplayString_MP">MaskDisplayString</entry>
    <entry key="HorizontalTextAlignment_MP">HorizontalTextAlignment</entry>
    <entry key="LeftAlignmentValue_MP">LeftAlignmentValue</entry>
    <entry key="SourceBlockDiagram_MP">SourceBlockDiagram</entry>
    <entry key="TagMaxNumber_MP">TagMaxNumber</entry>
    <entry key="CMTag1_MP">CMTag1</entry>
    <entry key="CMTag2_MP">CMTag2</entry>
    <entry key="CMTag3_MP">CMTag3</entry>
    <entry key="CMTag4_MP">CMTag4</entry>
    <entry key="CMTag5_MP">CMTag5</entry>
    <entry key="CMTag6_MP">CMTag6</entry>
    <entry key="CMTag7_MP">CMTag7</entry>
    <entry key="CMTag8_MP">CMTag8</entry>
    <entry key="CMTag9_MP">CMTag9</entry>
    <entry key="CMTag10_MP">CMTag10</entry>
    <entry key="CMTag11_MP">CMTag11</entry>
    <entry key="CMTag12_MP">CMTag12</entry>
    <entry key="CMTag13_MP">CMTag13</entry>
    <entry key="CMTag14_MP">CMTag14</entry>
    <entry key="CMTag15_MP">CMTag15</entry>
    <entry key="CMTag16_MP">CMTag16</entry>
    <entry key="CMTag17_MP">CMTag17</entry>
    <entry key="CMTag18_MP">CMTag18</entry>
    <entry key="CMTag19_MP">CMTag19</entry>
    <entry key="CMTag20_MP">CMTag20</entry>
    <entry key="AllowBusInputs_MP">Allow Bus Inputs</entry>
    <entry key="WritesHaveOutput_MP">WritesHaveOutput</entry>
    <entry key="NumReads_MP">NumReads:</entry>
    <entry key="NumWrites_MP">NumWrites:</entry>
    <entry key="PID">PID</entry>
    <entry key="PI">PI</entry>
    <entry key="PD">PD</entry>
    <entry key="P">P</entry>
    <entry key="I">I</entry>
    <entry key="ExportedGlobal">ExportedGlobal</entry>
    <entry key="ImportedExtern">ImportedExtern</entry>
    <entry key="ImportedExternPointer">ImportedExternPointer</entry>
    <entry key="double">double</entry>
    <entry key="single">single</entry>
    <entry key="int8">int8</entry>
    <entry key="uint8">uint8</entry>
    <entry key="int16">int16</entry>
    <entry key="uint16">uint16</entry>
    <entry key="int32">int32</entry>
    <entry key="uint32">uint32</entry>
    <entry key="AND">AND</entry>
    <entry key="OR">OR</entry>
    <entry key="NAND">NAND</entry>
    <entry key="NOR">NOR</entry>
    <entry key="XOR">XOR</entry>
    <entry key="NOT">NOT</entry>
    <entry key="boolean">boolean</entry>
    <entry key="sin2PiU">sin(2*pi*u)</entry>
    <entry key="cos2PiU">cos(2*pi*u)</entry>
    <entry key="expj2PiU">exp(j*2*pi*u)</entry>
    <entry key="sincos2PiU">sin(2*pi*u) and cos(2*pi*u)</entry>
    <entry key="RTF">RTF</entry>
    <entry key="HTML">HTML</entry>
    <entry key="IsSigned1">IsSigned1</entry>
    <entry key="IsSigned2">IsSigned2</entry>
    <entry key="TRUE">TRUE</entry>
    <entry key="FALSE">FALSE</entry>
    <entry key="NumBits1">NumBits1</entry>
    <entry key="NumBits2">NumBits2</entry>
    <entry key="maxNumBits1NumBits2">max([NumBits1 NumBits2])</entry>
    <entry key="Slope1">Slope1</entry>
    <entry key="Slope2">Slope2</entry>
    <entry key="maxSlope1Slope2">max([Slope1 Slope2])</entry>
    <entry key="Bias1">Bias1</entry>
    <entry key="Bias2">Bias2</entry>
    <entry key="maxBias1Bias2">max([Bias1 Bias2])</entry>
  </message>
</rsccat>
