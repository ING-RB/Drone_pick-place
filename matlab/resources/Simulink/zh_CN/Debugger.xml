<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright 2025 The MathWorks, Inc.-->

<rsccat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" locale="zh_CN" product="Simulink" xsi:noNamespaceSchemaLocation="../../resources/schema/msgcat.xsd">
  <message>
    <entry key="BreakpointList">断点列表</entry>
    <entry key="BreakpointListEmpty">没有要显示的断点。</entry>
    <entry key="FilterSpreadsheet">过滤</entry>
    <entry key="DeleteButtonToolTip">删除断点</entry>
    <entry key="ClearButtonToolTip">删除所选断点</entry>
    <entry key="OpenSFButtonToolTip">打开 Stateflow 断点和监视列表</entry>
    <entry key="SFSimEnableDebugCheckboxOffToolTip">为 Stateflow 图和 MATLAB Function 模块启用仿真步进和设置断点功能</entry>
    <entry key="SFSimEnableDebugCheckboxOnToolTip">为 Stateflow 图和 MATLAB Function 模块禁用仿真步进和设置断点功能</entry>
    <entry key="SFSimEnableDebugCheckboxName">调试 Stateflow 图和 MATLAB Function 模块</entry>
    <entry key="OpenExecOrderButtonToolTip">打开执行顺序查看器</entry>
    <entry key="HelpButtonToolTip">帮助</entry>
    <entry key="ClearAllInList">删除所有断点</entry>
    <entry key="EnableDisableAll">启用或禁用所有断点</entry>
    <entry key="ChangeCondition">更改条件</entry>
    <entry key="PauseCheckboxTooltip">在时间步内或时间步结束时的 Simulink 断点处暂停</entry>
    <entry key="PauseCheckboxName">在时间步内暂停</entry>
    <entry key="SSColumn_ID">ID</entry>
    <entry key="SSColumn_Enabled">已启用</entry>
    <entry key="SSColumn_Source">源</entry>
    <entry key="SSColumn_Type">源类型</entry>
    <entry key="SSColumn_Condition">条件</entry>
    <entry key="SSColumn_Hits">命中数</entry>
    <entry key="SSRow_NotApplicable">不适用</entry>
    <entry key="SSRow_Signal">信号</entry>
    <entry key="SSRow_Block">模块</entry>
    <entry key="SSRow_Model">模型</entry>
    <entry key="SSRow_ZeroCrossings">过零</entry>
    <entry key="SSRow_StepSize">步长受状态限制</entry>
    <entry key="SSRow_SolverError">求解器错误</entry>
    <entry key="SSRow_NaNValues">NaN 或 Inf 值</entry>
    <entry key="MultipleModels">一次仅调试一个模型时，支持在时间步内暂停。</entry>
    <entry key="MultipleModelsCmdLine">一次只能调试一个模型。</entry>
    <entry key="CannotStepIntoSf">仅当启用 "允许在仿真期间设置断点" 参数时，才支持步入 Stateflow 图和 MATLAB Function 模块。</entry>
    <entry key="cmdNotSupportedInEditor">调试函数 {0} 仅支持使用 sldebug 函数或使用 sim 函数以及 'debug' 名称-值参数启动的仿真。\n</entry>
    <entry key="InvSolverProfileInfoSaveName">
      指定的用于保存求解器探查工具信息的
      变量名称无效。请指定有效的 MATLAB 变量名称\n
    </entry>
    <entry key="ProfilerDataInvalidCallToGetField">
      对 Simulink.ProfilerData.getField() 的调用无效。有效调用接受一个
      对象和一个字段名称，并有一个返回值。
    </entry>
    <entry key="ProfilerDataInvalidConstructCall">
      对 Simulink.ProfilerData 的构造函数的调用无效
    </entry>
    <entry key="AlgLoopDebugTraceMsg1">
      [{0}] 正在使用 {2} 算法求解涉及模块 ''{1}'' 的代数环\n
    </entry>
    <entry key="AlgLoopDebugTraceMsg1a">
      ...正在运行输出方法来初始化模式\n
    </entry>
    <entry key="AlgLoopDebugTraceMsg2">
      ...模式将在非线性求解器迭代期间冻结\n
    </entry>
    <entry key="AlgLoopDebugTraceMsg2a">
      ...正在运行输出方法以更新收敛解处的输出\n
    </entry>
    <entry key="AlgLoopDebugTraceMsg3">
      ...正在运行输出方法以更新收敛解处的模式\n
    </entry>
    <entry key="AlgLoopDebugTraceMsg4">
      ...模式未更改\n
    </entry>
    <entry key="AlgLoopDebugTraceMsg5">
      ...模式已更改，需要重新求解\n
    </entry>
    <entry key="AlgLoopDebugTraceMsg6">
      ...正在重新求解代数环\n
    </entry>
    <entry key="Action">
      操作
    </entry>
    <entry key="Message">
      消息
    </entry>
    <entry key="ActiveTask">
      活动任务: {0} ({1}{2})\n
    </entry>
    <entry key="AddCallback">
      已添加回调 ''{0}''。\n
    </entry>
    <entry key="AlgLoopDoesNotExist">
      系统 {1,number,integer} 中不存在代数环 {0,number,integer}。\n
    </entry>
    <entry key="AlgLoopDoesNotExistTBS">
      任务 {2,number,integer} 的系统 {1,number,integer} 中不存在代数环 {0,number,integer}。\n
    </entry>
    <entry key="AlgLoopTraceLevel">
      代数环跟踪级别: {0,number,integer}\n
    </entry>
    <entry key="AnimationCannotUpdateJavaGUI">
      Simulink 无法更新仿真循环显示。\n
    </entry>
    <entry key="AsyncNotAllowedTid">
      指定的 tid:{0,number,integer} 用于异步采样时间。具有异步采样时间的模块和系统的方法在被另一个方法调用时执行，而不是在特定任务中执行。\n
    </entry>
    <entry key="AtBlkBreakPoint">
      断点位置: {0,number,integer} {1} {2,number,integer}:{3,number,integer} {4} ''{5}'' {6}\n
    </entry>
    <entry key="AtBlkBreakPointTBS">
      断点位置: {0,number,integer} {1} {2} ''{3}'' {4}\n
    </entry>
    <entry key="AtMdlBreakPoint">
      断点位置: {0,number,integer} {1} {2} {3}\n
    </entry>
    <entry key="AtNodeBreakPoint">
      断点位置: {0,number,integer} {1} m:{2,number,integer}\n
    </entry>
    <entry key="AtSysBreakPoint">
      断点位置: {0,number,integer} {1} {2} ''{3}'' {4}\n
    </entry>
    <entry key="BlkBreakAlreadyInstalled">
      断点:{0,number,integer} 已安装 {1} {2,number,integer}:{3,number,integer} {4} ''{5}'' {6}\n
    </entry>
    <entry key="BlkBreakAlreadyInstalledTBS">
      断点:{0,number,integer} 已安装 {1} {2} ''{3}'' {4}\n
    </entry>
    <entry key="BlkBreakInstalled">
      已安装断点:{0,number,integer} {1} {2,number,integer}:{3,number,integer} {4} ''{5}'' {6}\n
    </entry>
    <entry key="BlkBreakInstalledTBS">
      已安装断点:{0,number,integer} {1} {2} ''{3}'' {4}\n
    </entry>
    <entry key="BlkIsNotInAlgLoop">
      模块 {0} 不在代数环中。\n
    </entry>
    <entry key="BlkProbeMode">
      正在进入模块探测模式。请点击任意模块以查看其数据。\n 键入任意命令可退出探测模式。\n
    </entry>
    <entry key="BlockDoesNotExist">
      正在调试的模型中不存在指定的模块。\n
    </entry>
    <entry key="BlockInAlgLoopWithAlgVar">
      - {0} (代数变量)\n
    </entry>
    <entry key="BreakAtZcDisabled">
      发生过零事件时中断: 已禁用\n
    </entry>
    <entry key="BreakAtZcEnabled">
      发生过零事件时中断: 已启用\n
    </entry>
    <entry key="BreakNoPoints">
      当前没有安装断点。\n
    </entry>
    <entry key="BreakPointDoesNotExist">
      指定的断点不存在。\n
    </entry>
    <entry key="BreakPoints">
      断点:
    </entry>
    <entry key="BreakTempDisabled">
      断点 {0,number,integer}: 暂时禁用。在加速执行模式下，仅启用模型级断点。\n
    </entry>
    <entry key="BreakWhenStepLimitedByStateDisabled">
      在积分步失败时中断: 已禁用\n
    </entry>
    <entry key="BreakWhenStepLimitedByStateEnabled">
      在积分步失败时中断: 已启用\n
    </entry>
    <entry key="CallBackError">
      执行回调 ''{0}'' 时出错。仿真已中止。\n
    </entry>
    <entry key="CannotDispSignalWithDType">
      无法显示数据类型为 {0} 的信号。\n 数据类型必须有类型转换函数，\n或它必须为 MATLAB 数据类型。\n
    </entry>
    <entry key="CannotTBreakInPast">
      错误: 无法在过去的某个时间点设置中断。\n
    </entry>
    <entry key="CannotUseMatlabDispCommand">
      无法使用 Matlab DISP 命令显示数据。\n
    </entry>
    <entry key="CurrSimTime">
      当前仿真时间: {0} ({1}{2})\n
    </entry>
    <entry key="CmdStatesCore_DispContStates">
      ''{0}'' 的连续状态:\n 索引值(system:block:element Name 'BlockName')
    </entry>
    <entry key="CmdStatesCore_DispDiscStates">
      ''{0}'' 的离散状态:\n 索引值(system:block:element Name 'BlockName')
    </entry>
    <entry key="CmdSTimes1">
      --- ''{0}'' 的采样时间 [采样时间数 = {1, number, integer}]
    </entry>
    <entry key="CmdSTimes2">
      连续
    </entry>
    <entry key="CmdSTimes3">
      具有定步长
    </entry>
    <entry key="CmdSTimes4">
      (连续但子步中不变)
    </entry>
    <entry key="CmdSTimes5">
      (模块 {0, number, integer} 的异步采样时间: {1, number, integer})
    </entry>
    <entry key="CmdSTimes6">
      (模块 {0, number, integer} 的可变采样时间: {1, number, integer})
    </entry>
    <entry key="CmdSTimes7">
      (周期性离散，[周期, 偏移量] =
    </entry>
    <entry key="CmdSTimes8">
      (值 = {0})
    </entry>
    <entry key="DefaultCmdOnRet">
      返回/输入时执行的默认命令: \"{0}\"\n
    </entry>
    <entry key="DispBusSignalAsFlatVect">
      {0} 总线信号。正在将信号显示为扁平化向量...\n{1}
    </entry>
    <entry key="DispOfBlkAlreadyInstalled">
      已安装 {0,number,integer}:{1,number,integer} {2} 模块 ''{3}'' 的数据显示。\n
    </entry>
    <entry key="DispOfBlkAlreadyInstalledTBS">
      已安装 ({4,number,integer}){0,number,integer}:{1,number,integer} {2} 模块 ''{3}'' 的数据显示。\n
    </entry>
    <entry key="DispOfBlkAlreadyInstalledTBS2">
      已安装 {0} 模块 ''{1}'' 的数据显示。\n
    </entry>
    <entry key="DispOfBlkInstalled">
      已安装 {0,number,integer}:{1,number,integer} {2} 模块 ''{3}'' 的数据显示。\n
    </entry>
    <entry key="DispOfBlkInstalledTBS">
      已安装 ({4,number,integer}){0,number,integer}:{1,number,integer} {2} 模块 ''{3}'' 的数据显示。\n
    </entry>
    <entry key="DispOfBlkInstalledTBS2">
      已安装 {0} 模块 ''{1}'' 的数据显示。\n
    </entry>
    <entry key="DispOfVirtBlkAlreadyInstalled">
      已安装 {0} 模块(虚拟) ''{1}'' 的数据显示。\n
    </entry>
    <entry key="DispOfVirtBlkInstalled">
      已安装 {0} 模块(虚拟) ''{1}'' 的数据显示。\n
    </entry>
    <entry key="DispPointDoesNotExist">
      指定的显示点不存在。\n
    </entry>
    <entry key="DispPointRemoved">
      已删除模块 ''{0}'' 的显示点。\n
    </entry>
    <entry key="SolverResetDueToChangeInDiscreteDerivative">
      [Tr = {0}] 由于具有连续状态的模块的离散信号馈送输入发生变化，已请求求解器重置\n
    </entry>
    <entry key="DiscreteSignalDrivingDerivative">
      [Tr = {0}] 来自模块 {2,number,integer}:{3,number,integer} ''{4}'' 的&lt;sldiag objui="outport" objparam="{1,number,integer}" objname="{2,number,integer}"&gt;输出端口 {1,number,integer}&lt;/sldiag&gt; 的信号\n
    </entry>
    <entry key="EBreakDisabled">
      求解器发生错误时中断: 已禁用\n
    </entry>
    <entry key="EBreakEnabled">
      求解器发生错误时中断: 已启用\n
    </entry>
    <entry key="ETraceLevel">
      etrace 的显示级别: {0,number,integer}{1}\n
    </entry>
    <entry key="ElistNotFoundForSystem">
      \n{0}.{1} ''{2}'' 为空\n
    </entry>
    <entry key="ElistNotFoundForSystemWithTid">
      \n{0}.{1} ''{2}'' [{3}] 为空\n
    </entry>
    <entry key="ElistTooManyArguments">
      为 elist 命令指定的参数太多\n
    </entry>
    <entry key="ExecutionModeAcc">
      执行模式: 加速\n
    </entry>
    <entry key="ExecutionModeNormal">
      执行模式: 普通\n
    </entry>
    <entry key="HelpAnimate">
      animate 启用动画模式，将延迟提前一秒。\n animate # 使用指定的延迟提前时间启用动画模式(# 表示秒数)\n animate stop 禁用动画模式并重置显示。\n
    </entry>
    <entry key="HelpAshow">
      ashow 显示代数环列表。\n ashow &lt;gcb | sysIdx:blkIdx&gt; \n 显示涉及模块的代数环。\n ashow sysIdx#n 显示系统 sysIdx 中的代数环 n。\n ashow clear 去除任何代数环着色。\n
    </entry>
    <entry key="HelpAshowTBS">
      ashow 显示代数环列表。\n ashow &lt;gcb | (taskIdx)sysIdx:blkIdx&gt; \n 显示涉及模块的代数环。\n ashow sysIdx#n 显示系统 sysIdx 中的代数环 n。\n ashow clear 去除任何代数环着色。\n
    </entry>
    <entry key="HelpAtrace">
      atrace level 设置代数环跟踪级别(0=无，4=所有)。\n
    </entry>
    <entry key="HelpBafter">
      bafter 在当前方法调用之后中断。\n bafter m:mid 在(mid)标识的方法之后中断。\n bafter &lt;sysIdx:blkIdx | gcb&gt; \n 在模块(sysIdx:blkIdx)的每个方法执行之后中断。\n bafter &lt;sysIdx:blkIdx | gcb&gt; [mth] [tid:TID] \n 在模块(sysIdx:blkIdx)的 tid (TID)处的方法 [mth] 执行之后中断。\n bafter &lt;s:sysIdx | gcs&gt; 在系统(sysIdx)每个方法执行的之后中断。\n bafter &lt;s:sysIdx | gcs&gt; [mth] [tid:TID] \n 在系统(sysIdx)的 tid (TID)处的方法 [mth] 执行之后中断。\n bafter mdl 在模型(mdl)的每个方法执行之后中断。\n bafter mdl [mth] [tid:TID] \n 在模型(mdl)的 tid (TID)处的方法 [mth] 执行之后中断。\n
    </entry>
    <entry key="HelpBafterTBS">
      bafter 在当前方法调用之后中断。\n bafter m:mid 在(mid)标识的方法之后中断。\n bafter &lt;(taskIdx)sysIdx:blkIdx | gcb&gt; \n 在模块((taskIdx)sysIdx:blkIdx)的每个方法执行之后中断。\n bafter &lt;(taskIdx)sysIdx:blkIdx | gcb&gt; [mth] [tid:TID] \n 在模块((taskIdx)sysIdx:blkIdx)的 tid (TID)处的方法 [mth] 执行之后中断。\n bafter &lt;s:sysIdx | gcs&gt; 在系统(sysIdx)的每个方法执行之后中断。\n bafter &lt;s:sysIdx | gcs&gt; [mth] [tid:TID] \n 在系统(sysIdx)的 tid (TID)处的方法 [mth] 执行之后中断。\n bafter mdl 在模型(mdl)的每个方法执行之后中断。\n bafter mdl [mth] [tid:TID] \n 在模型(mdl)的 tid (TID)处的方法 [mth] 执行之后中断。\n
    </entry>
    <entry key="HelpBreak">
      break 在当前方法调用处中断。\n break m:mid 在(mid)标识的方法处中断。\n break &lt;sysIdx:blkIdx | gcb&gt; \n 在模块(sysIdx:blkIdx)的每个方法处中断。\n break &lt;sysIdx:blkIdx | gcb&gt; [mth] [tid:TID] \n 在模块(sysIdx:blkIdx)的 tid (TID)调用的方法 [mth] 处中断。\n break &lt;s:sysIdx | gcs&gt; 在系统(sysIdx)的每个方法处中断。\n break &lt;s:sysIdx | gcs&gt; [mth] [tid:TID] \n 在系统(sysIdx)的 tid (TID)调用的方法 [mth] 处中断。\n break mdl [mth] [tid:TID] \n 在模型(mdl)的 tid (TID)调用的方法 [mth] 处中断。\nbreak modelName &lt;sysIdx:blkIdx&gt; [mth] [tid:TID]\n 在模型(modelName)中模块(sysIdx:blkIdx)的 tid (TID)调用的方法 [mth] 处中断。\n
    </entry>
    <entry key="HelpBreakTBS">
      break 在当前方法调用处中断。\n break m:mid 在(mid)标识的方法处中断。\n break &lt;(taskIdx)sysIdx:blkIdx | gcb&gt; \n 在模块((taskIdx)sysIdx:blkIdx)的每个方法处中断。\n break &lt;(taskIdx)sysIdx:blkIdx | gcb&gt; [mth] [tid:TID] \n 在模块((taskIdx)sysIdx:blkIdx)的 tid (TID)调用的方法 [mth] 处中断。\n break &lt;s:sysIdx | gcs&gt; 在系统(sysIdx)的每个方法处中断。\n break &lt;s:sysIdx | gcs&gt; [mth] [tid:TID] \n 在系统(sysIdx)的 tid (TID)调用的方法 [mth] 处中断。\n break mdl [mth] [tid:TID] \n 在模型(mdl)的 tid (TID)调用的方法 [mth] 处中断。\nbreak modelName &lt;(taskIdx)sysIdx:blkIdx&gt; [mth] [tid:TID]\n 在模型(modelName)中模块((taskIdx)sysIdx:blkIdx)的 tid (TID)调用的方法 [mth] 处中断。\n
    </entry>
    <entry key="HelpBshow">
      bshow [modelName] sysIdx:blkIdx 显示系统 sysIdx 中排序列表索引为 blkIdx 的模块。除非通过 modelName 指定引用模型，否则将从顶层模型中选取系统和模块\n      
    </entry>
    <entry key="HelpBshowTBS">
      bshow [modelName] (taskIdx)sysIdx:blkIdx 显示给定任务 taskIdx 的系统 sysIdx 中排序列表索引为 blkIdx 的模块。除非通过 modelName 指定引用模型，否则将从顶层模型中选取系统和模块\n      
    </entry>
    <entry key="HelpClear">
      clear 清除所有断点。\n clear m:mid 清除方法调用 id:(mid)处设置的断点。\n clear id 清除具有标识符(id)的断点。\n clear &lt;sysIdx:blkIdx | gcb&gt; \n 清除模块(sysIdx:blkIdx)处的所有断点。\n
    </entry>
    <entry key="HelpClearTBS">
      clear 清除所有断点。\n clear m:mid 清除方法调用 id:(mid)处设置的断点。\n clear id 清除具有标识符(id)的断点。\n clear &lt;(taskIdx)sysIdx:blkIdx | gcb&gt; \n 清除模块((taskIdx)sysIdx:blkIdx)处的所有断点。\n
    </entry>
    <entry key="HelpCommand">
      命令:\n
    </entry>
    <entry key="HelpContinue">
      continue 继续到下一个断点。\n
    </entry>
    <entry key="HelpDisp">
      disp [sysIdx:blkIdx | gcb] \n 在每个停止点显示模块的数据。\n disp [modelName] sysIdx:blkIdx \n 在每个停止点显示模型 'modelName' 中模块的数据。\n
    </entry>
    <entry key="HelpDispTBS">
      disp [(taskIdx)sysIdx:blkIdx | gcb] \n 在每个停止点显示模块的数据。\n disp [modelName] (taskIdx)sysIdx:blkIdx \n 在每个停止点显示模型 'modelName' 中模块的数据。\n
    </entry>
    <entry key="HelpEBreak">
      ebreak 切换是否在出现求解器错误时中断。\n
    </entry>
    <entry key="HelpElist">
      elist m:mid [tid:TID] 显示由系统方法(mid)和 tid (TID)标识的系统执行列表。\n elist &lt;gcs | s:sysIdx&gt; [mth] [tid:TID] \n 显示由系统(sysIdx)、方法(mth)和 tid (TID)标识的系统执行列表。\n elist &lt;gcb | sysIdx:blkIdx&gt; [mth] [tid:TID] \n 显示由子系统模块(sysIdx:blkIdx)、方法(mth)和 tid (TID)标识的系统执行列表。\n elist [modelName] &lt;sysIdx:blkIdx&gt; [mth] [tid:TID] \n 显示由 modelName 标识的引用模型中的子系统模块(sysIdx:blkIdx)、方法(mth)和 tid (TID)标识的系统执行列表。\n 
    </entry>
    <entry key="HelpElistTBS">
      elist m:mid [tid:TID] 显示由系统方法(mid)和 tid (TID)标识的系统执行列表。\n elist &lt;gcs | s:sysIdx&gt; [mth] [tid:TID] \n 显示由系统(sysIdx)、方法(mth)和 tid (TID)标识的系统执行列表。\n elist &lt;gcb | (taskIdx)sysIdx:blkIdx&gt; [mth] [tid:TID] \n 显示由子系统模块((taskIdx)sysIdx:blkIdx)、方法(mth)和 tid (TID)标识的系统执行列表。\n elist [modelName] &lt;(taskIdx)sysIdx:blkIdx&gt; [mth] [tid:TID] \n 显示由 modelName 标识的引用模型中的子系统模块((taskIdx)sysIdx:blkIdx)、方法(mth)和 tid (TID)标识的系统执行列表。\n 
    </entry>
    <entry key="HelpEmode">
      emode 在普通模式和加速模式之间切换执行。\n
    </entry>
    <entry key="HelpEtrace">
      etrace level 设置执行跟踪级别(0=无，3=全部)。\n
    </entry>
    <entry key="HelpHelp">
      help 显示所有 sldebug 命令的帮助。\n help cmd 显示 cmd 的帮助。\n help time 显示关于仿真时间格式的信息。\n
    </entry>
    <entry key="HelpIShow">
      ishow 将 strace 级别设置为 4 (已弃用，请使用 strace)。\n
    </entry>
    <entry key="HelpNanBreak">
      nanbreak 在非有限(NaN、Inf)值处切换中断。\n
    </entry>
    <entry key="HelpNext">
      next 越过当前仿真点。\n
    </entry>
    <entry key="HelpProbe">
      probe 进入探测模式以显示当前模块的数据。\n probe [gcb | sysIdx:blkIdx] \n 探测模块(sysIdx:blkIdx)的数据。\n probe [modelName] sysIdx:blkIdx \n 探测模型 'modelName' 中模块(sysIdx:blkIdx)的数据。\n probe level # 设置 probe、trace、disp 命令的详细级别。\n
    </entry>
    <entry key="HelpProbeTBS">
      probe 进入探测模式以显示当前模块的数据。\n probe [gcb | (taskIdx)sysIdx:blkIdx] \n 探测模块((taskIdx)sysIdx:blkIdx)的数据。\n probe [modelName] (taskIdx)sysIdx:blkIdx \n 探测模型 'modelName' 中模块((taskIdx)sysIdx:blkIdx)的数据。\n probe level # 设置 probe、trace、disp 命令的详细级别。\n
    </entry>
    <entry key="HelpQuest">
      ?显示所有 sldebug 命令的帮助。\n
    </entry>
    <entry key="HelpQuit">
      quit 中止仿真。\n
    </entry>
    <entry key="HelpRBreak">
      rbreak 在出现求解器重置请求时切换中断。\n
    </entry>
    <entry key="HelpRun">
      run 停止调试并完成仿真。\n
    </entry>
    <entry key="HelpSTrace">
      strace level 设置求解器跟踪级别(0=无，4=全部)。\n
    </entry>
    <entry key="HelpSlist">
      slist 显示排序列表。\n
    </entry>
    <entry key="HelpStates">
      states 显示当前状态值。\n
    </entry>
    <entry key="HelpStatus">
      status [all] 显示有效的调试操作。\n
    </entry>
    <entry key="HelpStep">
      step [in | into] 转至下一个仿真点。\n step over 越过当前仿真点。\n step out 转至当前仿真点层次结构的结尾。\n step top 转至下一个时间步的开始。\n step blockmth 转至下一个模块方法。\n
    </entry>
    <entry key="HelpStimes">
      stimes 显示模型的采样时间表。\n
    </entry>
    <entry key="HelpStop">
      stop 停止执行。\n
    </entry>
    <entry key="HelpSystems">
      systems 显示模型系统的列表。\n
    </entry>
    <entry key="HelpTbreak">
      tbreak 清除时间断点。\n tbreak t 当仿真时间超过 t 时中断。\n
    </entry>
    <entry key="HelpTime">
      时间显示为: \n TM = &lt;主时间步时间&gt; \n Tm = &lt;子时间步时间&gt; \n Tr = &lt;求解器重置时间&gt; \n Tz = &lt;恰好过零或刚刚过零的时间&gt; \n TzL= &lt;主时间步中过零前(左端)的时间&gt; \n TzR= &lt;主时间步中恰好过零或刚刚过零(右端)的时间&gt; \n Ts = &lt;成功积分步的时间&gt; \n Tf = &lt;失败积分步的时间&gt; \n Tn = &lt;牛顿迭代时间&gt; (使用隐式求解器时) \n Tj = &lt;雅可比矩阵计算时间&gt; (使用隐式求解器时) \n步长显示为: \n Hm = &lt;求解器阶段开始时的步长&gt; \n Hs = &lt;成功积分步步长&gt; \n Hf = &lt;失败积分步步长&gt; \n Hn = &lt;牛顿迭代期间的步长&gt; (使用隐式求解器时) \n Hz = &lt;过零搜索期间 'TM - TzL' 的值&gt; \n Iz = &lt;过零搜索期间 'Tz - TzL' 的值&gt;\n
    </entry>
    <entry key="HelpTrace">
      trace &lt;gcb | sysIdx:blkIdx&gt; \n 添加跟踪点，以便在模块执行时显示模块的数据。\n
    </entry>
    <entry key="HelpTraceTBS">
      trace &lt;gcb | (taskIdx)sysIdx:blkIdx&gt; \n 添加跟踪点，以便在模块执行时显示模块的数据。\n
    </entry>
    <entry key="HelpUndisp">
      undisp &lt;gcb | sysIdx:blkIdx&gt; \n 删除显示点。\n
    </entry>
    <entry key="HelpUndispTBS">
      undisp &lt;gcb | (taskIdx)sysIdx:blkIdx&gt; \n 删除显示点。\n
    </entry>
    <entry key="HelpUntrace">
      untrace &lt;gcb | sysIdx:blkIdx&gt; \n 删除跟踪点。\n
    </entry>
    <entry key="HelpUntraceTBS">
      untrace &lt;gcb | (taskIdx)sysIdx:blkIdx&gt; \n 删除跟踪点。\n
    </entry>
    <entry key="HelpWhere">
      where [detail] 显示仿真循环中的当前位置(detail=0 =&gt; 最少详细信息)。\n
    </entry>
    <entry key="HelpXbreak">
      xbreak 在积分步失败时切换中断。\n
    </entry>
    <entry key="HelpZcbreak">
      zcbreak 检测到过零事件时切换中断。\n
    </entry>
    <entry key="HelpZclist">
      zclist 显示过零信号的列表。\n
    </entry>
    <entry key="InvalidBlockName">
      模块名称无效。\n
    </entry>
    <entry key="InvalidBlockTid">
      为模块 ''{1}'' 的方法 {2} 指定的 ''tid:{0}'' 无效。\n
    </entry>
    <entry key="InvalidNodeNumber">
      指定的方法调用 ID ''m:{0,number,integer}'' 无效。它必须为非负值并且小于 {1,number,integer}\n
    </entry>
    <entry key="InvalidPhaseName">
      指定的方法 ''{0}'' 无效。\n
    </entry>
    <entry key="InvalidSimulinkObject">
      ''{0}'' 未指定有效的 Simulink 模块、系统或模型。\n
    </entry>
    <entry key="InvalidSubsystemTid">
      为系统 ''{1}'' 的方法 {2} 的指定的 ''tid:{0}'' 无效。\n
    </entry>
    <entry key="InvalidSysNum">
      指定的系统编号无效。\n
    </entry>
    <entry key="InvalidSystemId">
      命令参数 ''{0}'' 未引用系统。\n
    </entry>
    <entry key="InvalidSystemIndex">
      找不到系统 s:{0,number,integer}。请使用 systems 命令列出有效的系统 ID \n
    </entry>
    <entry key="InvalidTidString">
      指定的 tid 标识符 ''{0}'' 无效。\n
    </entry>
    <entry key="Invalidtid">
      指定的 ''tid:{0,number,integer}'' 无效。\n对于此模型，tid 必须为小于 {1,number,integer} 的非负数、CONSTANT 或 TRIGGERED\n
    </entry>
    <entry key="Invalidtideq01">
      指定的 ''tid:{0,number,integer}'' 无效。\n对于此模型，tid 必须为小于 {1,number,integer} 的正数、CONSTANT 或 TRIGGERED\n
    </entry>
    <entry key="MdlBreakAlreadyInstalled">
      断点:{0,number,integer} 已安装 {1} {2} {3}\n
    </entry>
    <entry key="MdlBreakInstalled">
      已安装断点:{0,number,integer} {1} {2} {3}\n
    </entry>
    <entry key="MemLayoutBreakPoints">
      其他断点安装在与 {1} 模块 ''{2}'' 的 {0} 端口相连的模块上\n
    </entry>
    <entry key="CannotDisplayFullState">
      仅对模型 ''{0}'' 中 For Each 子系统外部的模块显示连续状态。
    </entry>
    <entry key="ModelHasNoStates">
      模型 ''{0}'' 没有状态。\n
    </entry>
    <entry key="MultiBlkSelected">
      选择了多个模块，将使用当前模块。\n
    </entry>
    <entry key="NanBreakDisabled">
      在非有限(NaN、Inf)值处中断: 已禁用\n
    </entry>
    <entry key="NanBreakEnabled">
      在非有限(NaN、Inf)值处中断: 已启用\n
    </entry>
    <entry key="NanBreakTempDisabled">
      在非有限(NaN、Inf)值处中断: 已暂时禁用\n
    </entry>
    <entry key="NoContStates">
      没有连续状态。\n
    </entry>
    <entry key="NoCurrentBlockInModel">
      在正在调试的模型 ''{0}'' 中找不到与 gcb 对应的模块。这可能是因为与 gcb 对应的模块不在此模型中。\n
    </entry>
    <entry key="NoDebugOpForSynthesizedBlk">
      指定的模块是隐藏(合成)模块。不允许对此类型的模块执行调试器操作。\n
    </entry>
    <entry key="NoDispPoints">
      显示点: 未安装\n
    </entry>
    <entry key="NoDispPointsRegistered">
      当前没有注册的显示点。\n
    </entry>
    <entry key="NoNonSampledZC"> 模型 ''{0}'' 不包含任何过零信号。\n </entry>
    <entry key="NoTracePoints">
      跟踪点: 未安装\n
    </entry>
    <entry key="NodeBreakAlreadyInstalled">
      断点:{0,number,integer} 已安装 {1} m:{2,number,integer}\n
    </entry>
    <entry key="NodeBreakInstalled">
      已安装断点:{0,number,integer} {1} m:{2,number,integer}\n
    </entry>
    <entry key="NonMdlBreakDisabled">
      加速执行模式。仅启用模型级断点。\n
    </entry>
    <entry key="NonMdlBreakEnabled">
      普通执行模式。启用所有断点。\n
    </entry>
    <entry key="NonVirtualBlockData">
      {0}{1,number,integer}:{2,number,integer} {3} 模块 ''{4}'' 的数据:\n
    </entry>
    <entry key="NonVirtualBlockDataTBS">
      {0}({5,number,integer}){1,number,integer}:{2,number,integer} {3} 模块 ''{4}'' 的数据:\n
    </entry>
    <entry key="NonVirtualBlockDataTBS2">
      {0}{1} 模块 ''{2}'' 的数据:\n
    </entry>
    <entry key="PausedOnBpAsMdlRef">作为引用模型</entry>
    <entry key="PausedOnBpHyperlinkToolTip">打开断点列表</entry>
    <entry key="PausedOnBpStatusString">在断点处暂停</entry>
    <entry key="PausedOnBpHiddenBlock">隐藏模块</entry>
    <entry key="PausedOnRootInports">在模型 ''{0}'' 的一个或多个输入端口上暂停</entry>
    <entry key="ProbeLevel">
      disp、trace、probe 的显示级别: {0,number,integer}{1}\n
    </entry>
    <entry key="RBreakDisabled">
      发生求解器重置请求时中断: 已禁用\n
    </entry>
    <entry key="RBreakEnabled">
      发生求解器重置请求时中断: 已启用\n
    </entry>
    <entry key="ReducedBlockSelected">
      所选模块 ''{0}'' 未执行，因为它已优化。因此，Simulink 调试器无法显示该模块的数据。要防止此模块优化，请在 "配置参数" 对话框中搜索 ''模块简化'' 并清除复选框。\n
    </entry>
    <entry key="RemoveBreakPoint">
      断点 ''{0,number,integer}'' 已删除。\n
    </entry>
    <entry key="RemoveCallback">
      已删除回调 ''{0}''。\n
    </entry>
    <entry key="ScopeCannotBeOpened">
      调试期间，只能在仿真循环中打开示波器。您可以在调试前或仿真循环开始后打开示波器。\n
    </entry>
    <entry key="ShowAlgLoopInfo">
      - {0,number,integer}#{1,number,integer}，循环中有 {2,number,integer} 个模块\n
    </entry>
    <entry key="ShowAlgLoopInfoTBS">
      - ({3,number,integer}){0,number,integer}#{1,number,integer}，循环中有{2,number,integer} 个模块\n
    </entry>
    <entry key="ShowAlgLoopInfoTitle">
      \n 找到 {0,number,integer} 个代数环: \n系统编号#代数环 ID，循环中的模块数\n
    </entry>
    <entry key="ShowNoAlgLoopInfoTitle">
      \n找不到代数环\n
    </entry>
    <entry key="IntegrationStepFailure">积分步失败</entry>
    <entry key="NewtonIterationFailure">牛顿迭代失败</entry>
    <entry key="StepFunctionEvaluationFailure">检测到 {0}。正在中断模型执行</entry>
    <entry key="SolverErrorBreakpoint">检测到求解器错误。正在中断模型执行</entry>
    <entry key="SolverTraceLevel">
      求解器跟踪级别: {0,number,integer}\n
    </entry>
    <entry key="StatusDXCacheReset">
      求解器导数缓存需要重置: {0}\n
    </entry>
    <entry key="StatusSolverReset">
      求解器需要重置: {0}\n
    </entry>
    <entry key="StatusZCCacheReset">
      过零信号缓存需要重置: {0}\n
    </entry>
    <entry key="SyntaxError">
      命令语法错误。用法:\n
    </entry>
    <entry key="SysBreakAlreadyInstalled">
      断点:{0,number,integer} 已安装 {1} {2} ''{3}'' {4}\n
    </entry>
    <entry key="SysBreakInstalled">
      已安装断点:{0,number,integer} {1} {2} ''{3}'' {4}\n
    </entry>
    <entry key="TaskTime">
      任务时间: {0}\n
    </entry>
    <entry key="TidForOutandUpdate">
      tid 选项只能用 Outputs 或 Update 方法指定。\n
    </entry>
    <entry key="TimeBreakEnabled">
      时间断点: 已启用(t&gt;={0})\n
    </entry>
    <entry key="TimebreakDisabled">
      时间断点: 已禁用\n
    </entry>
    <entry key="ToggleExecMode">
      要切换执行模式，请在选择加速的情况下重新启动 sldebug。\n
    </entry>
    <entry key="TooManyArgumentsForBreak">
      指定的参数太多，无法设置断点。\n
    </entry>
    <entry key="TraceOfBlockAlreadyInstalled">
      已安装 {0,number,integer}:{1,number,integer} {2} 模块 ''{3}'' 的数据的跟踪点。\n
    </entry>
    <entry key="TraceOfBlockAlreadyInstalledTBS">
      已安装 ({4,number,integer}){0,number,integer}:{1,number,integer} {2} 模块 ''{3}'' 的数据的跟踪点。\n
    </entry>
    <entry key="TraceOfBlockDisabledInAccelMode">
      在加速模式下，跟踪点不可用。当切换到普通模式时，跟踪点将启用。请参阅 sldebug emode 命令。\n
    </entry>
    <entry key="TraceOfBlockInstalled">
      已安装 {0,number,integer}:{1,number,integer} {2} 模块 ''{3}'' 的数据的跟踪点。\n
    </entry>
    <entry key="TraceOfBlockInstalledTBS">
      已安装 ({4,number,integer}){0,number,integer}:{1,number,integer} {2} 模块 ''{3}'' 的数据的跟踪点。\n
    </entry>
    <entry key="TracePointDoesNotExist">
      指定的跟踪点不存在。\n
    </entry>
    <entry key="TracePointRemoved">
      已删除模块 ''{0}'' 的跟踪点。\n
    </entry>
    <entry key="UnsuccessFullConvert">
      信号未成功从数据类型 {0} 转换为双精度。\n
    </entry>
    <entry key="VirtualBlockData">
      {0}{1} 模块(虚拟) ''{2}'' 的数据:\n
    </entry>
    <entry key="VirtualBlockSelected">
      所选模块是虚拟模块，仅用于提供图形界面。您必须选择生成信号的模块。\n
    </entry>
    <entry key="VirtualSystemSelected">
      所选系统是虚拟系统，仅用于提供图形界面。您必须选择非虚拟系统。\n
    </entry>
    <entry key="ZcInterrupting">
      在以下位置检测到的过零事件的{0}侧(过零事件{2}的{1}时间步处)，在运行模型输出之前暂停模型执行:
    </entry>
    <entry key="ZcInterrupting_left">
        左
    </entry>
    <entry key="ZcInterrupting_right">
        右
    </entry>
    <entry key="ZcInterrupting_major">
        主
    </entry>
    <entry key="ZcInterrupting_minor">
        子
    </entry>
    <entry key="ZcInterrupting_before">
        之前
    </entry>
    <entry key="ZcInterrupting_after">
        之后
    </entry>
    <entry key="Aborted">
      调试器仿真已中止\n
    </entry>
    <entry key="InvSimWhileDebugging">
      在调试器中运行模型 ''{2}'' 时，SET_PARAM(''{0}'',''SimulationCommand'',''{1}'') 将不起作用\n
    </entry>
    <entry key="InvModelCloseWhileDebugging">
      正在调试模型 ''{0}'' 时，无法关闭该模型。请停止
      调试器，然后重试
    </entry>
    <entry key="ProfilerDisabled">由于 Simulink 调试器处于活动状态，仿真探查器被禁用。
    </entry>
    <entry key="SimulinkProfilerWithBreakpoints">无法在包含启用断点的模型上运行 Simulink 探查器。要对此模型运行 Simulink 探查器，请删除或禁用所有断点。</entry>
    <entry key="SolverProfilerWithBreakpoints">无法在包含启用断点的模型上运行求解器探查工具。要对此模型运行求解器探查工具，请删除或禁用所有断点。</entry>
    <entry key="WarnBlockReduction">
      对此模型启用 ''模块简化''。由于优化，一些非虚拟模块可能无法执行。\n要能够执行所有非虚拟模块，请在 "配置参数" 对话框中搜索 ''模块简化'' 并清除复选框\n
    </entry>
    <entry key="WarnOptimizedBlockIO">
      对此模型启用 ''信号存储重用''。调试器中显示的模块 I/O 值可能不正确。\n为了保留模块输出信号值，请在 "配置参数" 对话框中搜索 ''信号存储重用'' 并清除复选框\n
    </entry>
    <entry key="CannotDebugInRapidAccelMode">
      无法启动模型 "{0}" 的仿真调试会话，因为不支持调试快速加速仿真。
    </entry>
    <entry key="AlgebraicLoopSubsystem">AlgebraicLoopSubsystem</entry>
    <entry key="NVSystemsInModel">模型 ''{0}'' 中的非虚拟子系统:\n</entry>
    <entry key="StatusBarPrefix">暂停时间:\t</entry>
    <entry key="StatusBarNoReadMaskedPrefix">已在内部暂停:\t</entry>
    <entry key="StatusBarNoReadMaskedPostfix">(已封装)</entry>
    <entry key="SimulationStopped">仿真停止</entry>
    <entry key="BlkBreakStatus">
          {0,number,* #0}. {1}{2} {3,number,integer}:{4,number,integer} {5} ''{6}'' {7}\n
    </entry>
    <entry key="BlkBreakStatusTBS">
          {0,number,* #0}. {1}{2} {3} ''{4}'' {5}\n
    </entry>
    <entry key="BlockInAlgLoop">
      - {0}\n
    </entry>
    <entry key="DW">
      DWORK{0,number,#0* }
    </entry>
    <entry key="DX">
      Deriv
    </entry>
    <entry key="ElistForSystem">
      \n{0}.{1} ''{2}'':\n
    </entry>
    <entry key="ElistForSystemWithTid">
      \n{0}.{1} ''{2}'' [{3}] :\n
    </entry>
    <entry key="FcnCall">
      {0}fcn-call
    </entry>
    <entry key="IdxName">
      {0}{1,number,##0* } ''{2}''\n
    </entry>
    <entry key="MdlBreakStatus">
          {0,number,* #0}. {1}{2} {3} {4}\n
    </entry>
    <entry key="NewLine">
      \n
    </entry>
    <entry key="NodeBreakStatus">
          {0,number,* #0}. {1}{2} m:{3,number,integer} ({4} {5}{6}{7})\n
    </entry>
    <entry key="SolverResetDueToStateChangeInOutput">
      Solver reset request detected due to an internal state change in ''{0}'' output.
    </entry>
    <entry key="BreakOnSolverReset">
      Interrupting model execution
    </entry>
    <entry key="SolverResetDueToStateChangeInUpdate">
      Solver reset request detected due to an internal state change in ''{0}'' update.
    </entry>
    <entry key="SolverResetDueToOneOrMoreCauses">
      Solver reset request detected due to {0}.
    </entry>
    <entry key="String">
      {0}
    </entry>
    <entry key="StringNewLine">
      {0}\n
    </entry>
    <entry key="SysBreakStatus">
          {0,number,* #0}. {1}{2} {3} ''{4}'' {5}\n
    </entry>
    <entry key="TwoStrings">
      {0}{1}
    </entry>
    <entry key="Ui">
      U{0,number,####0* }
    </entry>
    <entry key="XC">
      CSTATE
    </entry>
    <entry key="XCDIS">
      CS_DIS
    </entry>
    <entry key="Yi">
      Y{0,number,####0* }
    </entry>
    <entry key="ZcEvent">
      ZcEvnt
    </entry>
    <entry key="ZcSignal">
      ZcSgnl
    </entry>
    <entry key="BlockPathAndSignalNameScalarEl">
      ({0}).({1})
    </entry>
    <entry key="BlockPathAndSignalNameVectorEl">
      ({0}).({1})[{2,number,integer}]
    </entry>
    <entry key="CatBlockPathsAcrossMdlRef">
      {0}|{1}
    </entry>
    <entry key="RootLocationFormat">
      {0}({1})
    </entry>
    <entry key="ModelLocationFormat">
      {0}.{1}
    </entry>
    <entry key="ModelLocationWithAttrFormat">
      {0}.{1}({2,number,integer})
    </entry>
    <entry key="BlockLocationFormat">
      {0}.{1}
    </entry>
    <entry key="SortedListSubsystem">Sorted list for ''{0}'' [{1} nonvirtual block(s), directFeed={2}]</entry>
    <entry key="SortedListSubsystemNumBlks">Sorted list for ''{0}'' [{1} block(s), {2} nonvirtual block(s), directFeed={3}]</entry>
    <entry key="mth_Start">Start</entry>
    <entry key="mth_ConstInit">Initialize.InvariantConstants</entry>
    <entry key="mth_SetupRuntimeResources">SetupRuntimeResources</entry>
    <entry key="mth_Init">Initialize</entry>
    <entry key="mth_SystemInit">SystemInitialize</entry>
    <entry key="mth_ConstEnable">Enable.InvariantConstants</entry>
    <entry key="mth_Enable">Enable</entry>
    <entry key="mth_Disable">Disable</entry>
    <entry key="mth_SystemReset">SystemReset</entry>
    <entry key="mth_ConstOutput">Output.InvariantConstants</entry>
    <entry key="mth_Outputs">Outputs</entry>
    <entry key="mth_Update">Update</entry>
    <entry key="mth_MassMatrix">MassMatrix</entry>
    <entry key="mth_ForcingFunction">ForcingFunction</entry>
    <entry key="mth_Derivatives">Derivatives</entry>
    <entry key="mth_Projection">Projection</entry>
    <entry key="mth_ZeroCrossings">ZeroCrossings</entry>
    <entry key="mth_Terminate">Terminate</entry>
    <entry key="mth_CleanupRuntimeResources">CleanupRuntimeResources</entry>
  </message>
</rsccat>
