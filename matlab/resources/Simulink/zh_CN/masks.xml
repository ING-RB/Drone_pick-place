<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright 2025 The MathWorks, Inc.-->

<rsccat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" locale="zh_CN" product="Simulink" xsi:noNamespaceSchemaLocation="../../resources/schema/msgcat.xsd">
  <message>
    <entry key="StateMatrixA_MP">状态矩阵 A:</entry>
    <entry key="InputMatrixB_MP">输入矩阵 B:</entry>
    <entry key="OutputMatrixC_MP">输出矩阵 C:</entry>
    <entry key="DirectFeedthroughMatrixD_MP">直接馈通矩阵 D:</entry>
    <entry key="InitialConditionForState_MP">状态的初始条件:</entry>
    <entry key="DataTypeForInternalCalculations_MP">内部计算的数据类型(例如 fixdt(1, 16)、fixdt(''single'')):</entry>
    <entry key="ScalingForStateEquationAXBU_MP">状态方程 AX+BU 的定标(斜率，例如 2^-9):</entry>
    <entry key="ScalingForOutputEquationCXDU_MP">输出方程 CX+DU 的定标(斜率，例如 2^-9):</entry>
    <entry key="LockOutputDataTypeAgainstFxpTools_MP">锁定输出数据类型设置以防止被定点工具更改</entry>
    <entry key="IntegerRoundingMode_MP">整数舍入模式:</entry>
    <entry key="SaturateToMaxOrMinWhenOverflowsOccur_MP">发生溢出时饱和处理为最大值或最小值</entry>
    <entry key="FixedPointStateSpace_MD">离散时间状态空间实现</entry>
    <entry key="NumeratorCoefficients_MP">分子系数:</entry>
    <entry key="DenominatorCoefficientsExcludingLead_MP">不含首项(必须为 1.0)的分母系数:</entry>
    <entry key="InitialCondition_MP">初始条件:</entry>
    <entry key="TransferFcnDirectFormII_MD">使用指定的传递函数的直接 II 型实现。仅支持单输入多输出传递函数。\n\n输出的数据类型和定标、系数和任何临时变量会自动选择。在许多情况下可直接接受自动选择项。如果自动选择项给出的结果不可接受，需要手动配置滤波器的布局。若要手动进行布局，建议以此封装内部的模块作为起点。\n\n备注 1:\n完整分母的首项系数应为 +1.0，但在输入参数时应排除此首项系数。例如，如果分母是\n den = \n 1 -1.7 0.72\n只需输入\n den(2:end) =\n -1.7 0.72\n\n备注 2:\n分子必须与完整分母大小相同。</entry>
    <entry key="TransferFcnDirectFormIITimeVarying_MD">使用指定的传递函数的直接 II 型实现。仅支持单输入单输出传递函数。\n\n输出的数据类型和定标、系数和任何临时变量会自动选择。在许多情况下可直接接受自动选择项。如果自动选择项给出的结果不可接受，需要手动配置滤波器的布局。若要手动进行布局，建议以此封装内部的模块作为起点。\n\n备注 1:\n完整分母的首项系数应为 +1.0，但在输入参数时应排除此首项系数。例如，如果分母是\n den = \n 1 -1.7 0.72\n只需输入\n den(2:end) =\n -1.7 0.72\n\n备注 2:\n分子必须与完整分母大小相同。</entry>
    <entry key="SampleTime_MP">采样时间:</entry>
    <entry key="UnitDelayEnabled_MD">通常，输出是延迟了一个采样周期的信号 u。\n当使能信号为 false 时，模块被禁用，状态和输出值不变。使能动作是向量化的，支持标量扩展。</entry>
    <entry key="UnitDelayEnabledExternalInitialCondition_MD">通常，输出是延迟了一个采样周期的信号 u。\n初始条件由信号 IC 给出。\n当使能信号为 false 时，模块被禁用，并且状态和输出值不变，除非重置。使能动作是向量化的，支持标量扩展。</entry>
    <entry key="UnitDelayEnabledResettable_MD">通常，输出是延迟了一个采样周期的信号 u。\n当重置信号 R 为 true 时，状态和输出始终设置为等于初始条件参数。此重置动作是向量化的，支持标量扩展。\n当使能信号为 false 时，模块被禁用，并且状态和输出值不变，除非重置。使能动作是向量化的，支持标量扩展。</entry>
    <entry key="UnitDelayEnabledResettableExternalInitialCondition_MD">通常，输出是延迟了一个采样周期的信号 u。\n当重置信号 R 为 true 时，状态和输出始终设置为等于初始条件信号 IC。此重置动作是向量化的，支持标量扩展。\n当使能信号为 false 时，模块被禁用，并且状态和输出值不变，除非重置。使能动作是向量化的，支持标量扩展。</entry>
    <entry key="UnitDelayExternalInitialCondition_MD">通常，输出是延迟了一个采样周期的信号 u。\n初始条件由信号 IC 给出。</entry>
    <entry key="UnitDelayResettable_MD">通常，输出是延迟了一个采样周期的信号 u。\n当重置信号 R 为 true 时，状态和输出始终设置为等于初始条件参数。此重置动作是向量化的，支持标量扩展。</entry>
    <entry key="UnitDelayResettableExternalInitialCondition_MD">通常，输出是延迟了一个采样周期的信号 u。\n当重置信号 R 为 true 时，状态和输出始终设置为等于初始条件信号 IC。此重置动作是向量化的，支持标量扩展。</entry>
    <entry key="UnitDelayWithPreviewEnabled_MD">Unit Delay With Preview Enabled 通常有一个输出等于信号 u，另一个输出是第一个输出的单位延迟版本。\n\n当使能信号为 false 时，模块被禁用，并且状态和输出值不变，除非重置。</entry>
    <entry key="UnitDelayWithPreviewEnabledResettable_MD">Unit Delay With Preview Enabled Resettable 通常有一个输出等于信号 u，另一个输出是第一个输出的单位延迟版本。\n\n当外部重置信号 R 为 true 时，第一个输出信号强制等于初始条件。在一个时间步后才会影响第二个输出信号。内部初始条件也用于在模型启动或父使能子系统重置时初始化状态。\n\n当使能信号为 false 时，模块被禁用，并且状态和输出值不变，除非重置。</entry>
    <entry key="UnitDelayWithPreviewEnabledResettableExternalRV_MD">Unit Delay With Preview Enabled Resettable External RV 同时具有外部重置值 RV 和内部初始条件。通常，此模块有一个输出等于信号 u，另一个输出是第一个输出的单位延迟版本。\n\n当重置信号 R 为 true 时，第一个输出信号强制等于 RV。在一个时间步后才会影响第二个输出信号。仅当模型启动或父使能子系统重置时，内部初始条件才会对第二个输出产生直接影响。\n\n当使能信号为 false 时，模块被禁用，并且状态和输出值不变，除非重置。</entry>
    <entry key="UnitDelayWithPreviewResettable_MD">Unit Delay With Preview Resettable 通常有一个输出等于信号 u，另一个输出是第一个输出的单位延迟版本。\n\n当重置信号 R 为 true 时，第一个输出信号强制等于初始条件。在一个时间步后才会影响第二个输出信号。内部初始条件也用于在模型启动或父使能子系统重置时初始化状态。</entry>
    <entry key="UnitDelayWithPreviewResettableExternalRV_MD">Unit Delay With Preview Resettable External RV 同时具有外部重置值 RV 和内部初始条件。通常，此模块有一个输出等于信号 u，另一个输出是第一个输出的单位延迟版本。\n\n当重置信号 R 为 true 时，第一个输出信号强制等于 RV。在一个时间步后才会影响第二个输出信号。仅当模型启动或父使能子系统重置时，内部初始条件才会对第二个输出产生直接影响。</entry>
    <entry key="RealWorldValueDecrement_MD">将信号的真实值减少 1.0\n溢出始终会绕回。</entry>
    <entry key="StoredIntegerValueDecrement_MD">将信号的存储值减少 1\n浮点信号减少 1.0\n溢出将始终绕回。</entry>
    <entry key="DecrementToZero_MD">将信号的真实值减少 1.0，\n但不要低于零。</entry>
    <entry key="DecrementTimeToZero_MD">将信号的真实值减少采样时间 Ts，\n但不要低于零。\n\n此模块仅在固定采样率下工作，因此它在触发子系统中不起作用。</entry>
    <entry key="RealWorldValueIncrement_MD">将信号的真实值增加 1.0\n溢出始终会绕回。</entry>
    <entry key="StoredIntegerValueIncrement_MD">将信号的存储值增加 1\n浮点信号增加 1.0\n溢出将始终绕回。</entry>
    <entry key="Controller_MP">控制器:</entry>
    <entry key="TimeDomain_MP">时域:</entry>
    <entry key="ContinuousTime_MP">连续时间</entry>
    <entry key="DiscreteTime_MP">离散时间</entry>
    <entry key="SampleTime1ForInherited_MP">采样时间(-1 表示继承):</entry>
    <entry key="DiscreteTimeSettings_GT">离散时间设置</entry>
    <entry key="IntegratorMethod_MP">积分器方法:</entry>
    <entry key="FilterMethod_MP">滤波器方法:</entry>
    <entry key="PIDBlockInTriggeredSubsystem_MP">PID 控制器位于条件执行子系统内</entry>
    <entry key="Form_MP">形式:</entry>
    <entry key="ControllerParameters_GT">控制器参数</entry>
    <entry key="ProportionalP_MP">比例(P):</entry>
    <entry key="IntegralI_MP">积分(I):</entry>
    <entry key="DerivativeD_MP">微分(D):</entry>
    <entry key="UseFilter_MP">使用滤波导数</entry>
    <entry key="FilterCoefficientN_MP">滤波器系数(N):</entry>
    <entry key="PIDTune">调节...</entry>
    <entry key="InitialConditions_GT">初始条件</entry>
    <entry key="Source_MP">源:</entry>
    <entry key="Integrator_MP">积分器:</entry>
    <entry key="Filter_MP">滤波器:</entry>
    <entry key="ExternalReset_GT">外部重置</entry>
    <entry key="ExternalReset_MP">外部重置:</entry>
    <entry key="IgnoreResetWhenLinearizing_MP">线性化时忽略重置</entry>
    <entry key="EnableZerocrossingDetection_MP">启用过零检测</entry>
    <entry key="PIDAdvanced_TAB">PID 高级</entry>
    <entry key="OutputSaturation_GT">输出饱和</entry>
    <entry key="OutputSaturation_TAB">饱和</entry>
    <entry key="AntiwindupMethod_GT">抗饱和</entry>
    <entry key="LimitOutput_MP">限制输出</entry>
    <entry key="UpperSaturationLimit_MP">上限:</entry>
    <entry key="LowerSaturationLimit_MP">下限:</entry>
    <entry key="IgnoreSaturationWhenLinearizing_MP">线性化时忽略饱和限值</entry>
    <entry key="AntiwindupMethod_MP">抗饱和方法:</entry>
    <entry key="BackcalculationCoefficientKb_MP">反算系数(Kb):</entry>
    <entry key="TrackingMode_GT">跟踪模式</entry>
    <entry key="EnableTrackingMode_MP">启用跟踪模式</entry>
    <entry key="TrackingCoefficientKt_MP">跟踪系数(Kt):</entry>
    <entry key="SaturateOnIntegerOverflow_MP">对整数溢出进行饱和处理</entry>
    <entry key="LockDataTypeAgainstFxpTools_MP">锁定数据类型设置以防止被定点工具更改</entry>
    <entry key="PParameterMinimum_MP">P 参数最小值:</entry>
    <entry key="PParameterMaximum_MP">P 参数最大值:</entry>
    <entry key="PParameter_MP">P 参数:</entry>
    <entry key="IParameterMinimum_MP">I 参数最小值:</entry>
    <entry key="IParameterMaximum_MP">I 参数最大值:</entry>
    <entry key="IParameter_MP">I 参数:</entry>
    <entry key="DParameterMinimum_MP">D 参数最小值:</entry>
    <entry key="DParameterMaximum_MP">D 参数最大值:</entry>
    <entry key="DParameter_MP">D 参数:</entry>
    <entry key="NParameterMinimum_MP">N 参数最小值:</entry>
    <entry key="NParameterMaximum_MP">N 参数最大值:</entry>
    <entry key="NParameter_MP">N 参数:</entry>
    <entry key="KbParameterMinimum_MP">Kb 参数最小值:</entry>
    <entry key="KbParameterMaximum_MP">Kb 参数最大值:</entry>
    <entry key="KbParameter_MP">Kb 参数:</entry>
    <entry key="KtParameterMinimum_MP">Kt 参数最小值:</entry>
    <entry key="KtParameterMaximum_MP">Kt 参数最大值:</entry>
    <entry key="KtParameter_MP">Kt 参数:</entry>
    <entry key="PProductOutputMinimum_MP">P 乘积输出最小值:</entry>
    <entry key="PProductOutputMaximum_MP">P 乘积输出最大值:</entry>
    <entry key="PProductOutput_MP">P 乘积输出:</entry>
    <entry key="IProductOutputMinimum_MP">I 乘积输出最小值:</entry>
    <entry key="IProductOutputMaximum_MP">I 乘积输出最大值:</entry>
    <entry key="IProductOutput_MP">I 乘积输出:</entry>
    <entry key="DProductOutputMinimum_MP">D 乘积输出最小值:</entry>
    <entry key="DProductOutputMaximum_MP">D 乘积输出最大值:</entry>
    <entry key="DProductOutput_MP">D 乘积输出:</entry>
    <entry key="NProductOutputMinimum_MP">N 乘积输出最小值:</entry>
    <entry key="NProductOutputMaximum_MP">N 乘积输出最大值:</entry>
    <entry key="NProductOutput_MP">N 乘积输出:</entry>
    <entry key="KbProductOutputMinimum_MP">Kb 乘积输出最小值:</entry>
    <entry key="KbProductOutputMaximum_MP">Kb 乘积输出最大值:</entry>
    <entry key="KbProductOutput_MP">Kb 乘积输出:</entry>
    <entry key="KtProductOutputMinimum_MP">Kt 乘积输出最小值:</entry>
    <entry key="KtProductOutputMaximum_MP">Kt 乘积输出最大值:</entry>
    <entry key="KtProductOutput_MP">Kt 乘积输出:</entry>
    <entry key="IntegratorOutputMinimum_MP">积分器输出最小值:</entry>
    <entry key="IntegratorOutputMaximum_MP">积分器输出最大值:</entry>
    <entry key="IntegratorOutput_MP">积分器输出:</entry>
    <entry key="FilterOutputMinimum_MP">滤波器输出最小值:</entry>
    <entry key="FilterOutputMaximum_MP">滤波器输出最大值:</entry>
    <entry key="FilterOutput_MP">滤波器输出:</entry>
    <entry key="DifferentiatorOutputMinimum_MP">微分器输出最小值:</entry>
    <entry key="DifferentiatorOutputMaximum_MP">微分器输出最大值:</entry>
    <entry key="DifferentiatorOutput_MP">微分器输出:</entry>
    <entry key="SumOutputMinimum_MP">总和输出最小值:</entry>
    <entry key="SumOutputMaximum_MP">总和输出最大值:</entry>
    <entry key="SumOutput_MP">总和输出:</entry>
    <entry key="SumI1OutputMinimum_MP">SumI1 输出最小值:</entry>
    <entry key="SumI1OutputMaximum_MP">SumI1 输出最大值:</entry>
    <entry key="SumI1Output_MP">SumI1 输出:</entry>
    <entry key="SumI2OutputMinimum_MP">SumI2 输出最小值:</entry>
    <entry key="SumI2OutputMaximum_MP">SumI2 输出最大值:</entry>
    <entry key="SumI2Output_MP">SumI2 输出:</entry>
    <entry key="SumI3OutputMinimum_MP">SumI3 输出最小值:</entry>
    <entry key="SumI3OutputMaximum_MP">SumI3 输出最大值:</entry>
    <entry key="SumI3Output_MP">SumI3 输出:</entry>
    <entry key="SumI4Output_MP">SumI4 输出:</entry>
    <entry key="SumDOutputMinimum_MP">SumD 输出最小值:</entry>
    <entry key="SumDOutputMaximum_MP">SumD 输出最大值:</entry>
    <entry key="SumDOutput_MP">SumD 输出:</entry>
    <entry key="AccumulatorOfSum_MP">总和累加器:</entry>
    <entry key="AccumulatorOfSumI1_MP">SumI1 的累加器:</entry>
    <entry key="AccumulatorOfSumI2_MP">SumI2 的累加器:</entry>
    <entry key="AccumulatorOfSumI3_MP">SumI3 的累加器:</entry>
    <entry key="AccumulatorOfSumI4_MP">SumI4 的累加器:</entry>
    <entry key="AccumulatorOfSumD_MP">SumD 的累加器:</entry>
    <entry key="SaturationOutputMinimum_MP">饱和输出最小值:</entry>
    <entry key="SaturationOutputMaximum_MP">饱和输出最大值:</entry>
    <entry key="SaturationOutput_MP">饱和输出:</entry>
    <entry key="IntegratorState_GT">积分器状态</entry>
    <entry key="FilterState_GT">滤波器状态</entry>
    <entry key="StateNameegposition_MP">状态名称: (例如，''position'')</entry>
    <entry key="StateName_MP">状态名称:</entry>
    <entry key="StateNameMustResolveToSimulinkSignalObject_MP">状态名称必须解析为 Simulink 信号对象</entry>
    <entry key="CodeGenerationStorageClass_MP">代码生成存储类:</entry>
    <entry key="CodeGenerationStorageTypeQualifier_MP">代码生成存储类型限定符:</entry>
    <entry key="PID1dof_MD">此模块实现连续和离散时间 PID 控制算法，并包括高级功能，如抗饱和、外部重置和信号跟踪。您可以使用 ''调节...'' 按钮自动调节 PID 增益(需要 Simulink Control Design)。</entry>
    <entry key="SetpointWeightb_MP">设定点权重(b):</entry>
    <entry key="SetpointWeightc_MP">设定点权重(c):</entry>
    <entry key="bParameterMinimum_MP">b 参数最小值:</entry>
    <entry key="bParameterMaximum_MP">b 参数最大值:</entry>
    <entry key="bParameter_MP">b 参数:</entry>
    <entry key="cParameterMinimum_MP">c 参数最小值:</entry>
    <entry key="cParameterMaximum_MP">c 参数最大值:</entry>
    <entry key="cParameter_MP">c 参数:</entry>
    <entry key="bProductOutputMinimum_MP">b 乘积输出最小值:</entry>
    <entry key="bProductOutputMaximum_MP">b 乘积输出最大值:</entry>
    <entry key="bProductOutput_MP">b 乘积输出:</entry>
    <entry key="cProductOutputMinimum_MP">c 乘积输出最小值:</entry>
    <entry key="cProductOutputMaximum_MP">c 乘积输出最大值:</entry>
    <entry key="cProductOutput_MP">c 乘积输出:</entry>
    <entry key="Sum1OutputMinimum_MP">Sum1 输出最小值:</entry>
    <entry key="Sum1OutputMaximum_MP">Sum1 输出最大值:</entry>
    <entry key="Sum1Output_MP">Sum1 输出:</entry>
    <entry key="Sum2OutputMinimum_MP">Sum2 输出最小值:</entry>
    <entry key="Sum2OutputMaximum_MP">Sum2 输出最大值:</entry>
    <entry key="Sum2Output_MP">Sum2 输出:</entry>
    <entry key="Sum3OutputMinimum_MP">Sum3 输出最小值:</entry>
    <entry key="Sum3OutputMaximum_MP">Sum3 输出最大值:</entry>
    <entry key="Sum3Output_MP">Sum3 输出:</entry>
    <entry key="AccumulatorOfSum1_MP">Sum1 的累加器:</entry>
    <entry key="AccumulatorOfSum2_MP">Sum2 的累加器:</entry>
    <entry key="AccumulatorOfSum3_MP">Sum3 的累加器:</entry>
    <entry key="PID2dof_MD">此模块实现可对设定点加权的连续和离散时间 PID 控制算法，并包括高级功能，如抗饱和、外部重置和信号跟踪。您可以使用 ''调节...'' 按钮自动调节 PID 增益(需要 Simulink Control Design)。</entry>
    <entry key="discretePIDToolTip">''前向欧拉'' 以外的离散化方法当前不支持代码生成和定点仿真。</entry>
    <entry key="PIDCompensatorFormula">补偿器公式</entry>
    <entry key="UnknownMaskType">未知封装类型: {0}</entry>
    <entry key="UnknownMaskTypeMfile">PIDMasks {0} 中具有未知封装类型</entry>
    <entry key="CreateDialogError">尝试创建对话框时出错:</entry>
    <entry key="Differentiator_MP">微分器:</entry>
    <entry key="FilterDiffNumProductOutput_MP">滤波器分子乘积输出:</entry>
    <entry key="FilterDiffNumAccumulator_MP">滤波器分子累加器:</entry>
    <entry key="FilterDiffDenProductOutput_MP">滤波器分母乘积输出:</entry>
    <entry key="FilterDiffDenAccumulator_MP">滤波器分母累加器:</entry>
    <entry key="FilterDiffCoefficientOutput_MP">滤波器系数乘积输出:</entry>
    <entry key="FilterDiffCoefficientOutputMinimum_MP">滤波器系数乘积输出最小值:</entry>
    <entry key="FilterDiffCoefficientOutputMaximum_MP">滤波器系数乘积输出最大值:</entry>
    <entry key="FilterDiffSumDenAccumulator_MP">SumDen 的累加器:</entry>
    <entry key="FilterDiffSumDenOutput_MP">SumDen 输出:</entry>
    <entry key="FilterDiffSumDenOutputMinimum_MP">SumDen 输出最小值:</entry>
    <entry key="FilterDiffSumDenOutputMaximum_MP">SumDen 输出最大值:</entry>
    <entry key="FilterDiffSumNumAccumulator_MP">SumNum 的累加器:</entry>
    <entry key="FilterDiffSumNumOutput_MP">SumNum 输出:</entry>
    <entry key="FilterDiffSumNumOutputMinimum_MP">SumNum 输出最小值:</entry>
    <entry key="FilterDiffSumNumOutputMaximum_MP">SumNum 输出最大值:</entry>
    <entry key="FilterDiffReciprocalOutput_MP">Reciprocal 输出:</entry>
    <entry key="FilterDiffReciprocalOutputMinimum_MP">Reciprocal 输出最小值:</entry>
    <entry key="FilterDiffReciprocalOutputMaximum_MP">Reciprocal 输出最大值:</entry>
    <entry key="FilterDiffDivideOutput_MP">Divide 输出:</entry>
    <entry key="FilterDiffDivideOutputMinimum_MP">Divide 输出最小值:</entry>
    <entry key="ClampingAlgorithmConstantZero_MP">钳位算法常量零(Clamping_zero)输出:</entry>
    <entry key="FilterCoeffDenConstant_MP">滤波器系数分母常量(Filter Den Constant)输出:</entry>
    <entry key="PCopyConstant_MP">P 参数常量(Pcopy)输出:</entry>
    <entry key="NCopyConstant_MP">N 参数常量(Ncopy)输出:</entry>
    <entry key="PIDAutoTuningMethodSelect_MP">选择调节方法:</entry>
    <entry key="IntFiltMethods_GT">积分器和滤波器方法:</entry>
    <entry key="Initialization_TAB">初始化</entry>
    <entry key="IntegratorFilterInitialConditions_GT">积分器和滤波器初始条件</entry>
    <entry key="AutomatedTuning_GT">自动调节</entry>
    <entry key="FixedPointToolBtn">打开定点工具...</entry>
    <entry key="AdditionalDataTypes_GT">其他数据类型</entry>
    <entry key="FixedPointOperationalParameters_GT">定点运算参数</entry>
    <entry key="StateAttributesEmptyTab_GT">当前配置下的 PID 控制器中不存在状态。</entry>
    <entry key="InitializationEmptyTab_GT">当前配置下的 PID 控制器中不存在可初始化的状态。</entry>
    <entry key="UdiffTsProdOut_MP">U_differentiator * Ts 乘积输出:</entry>
    <entry key="NTsProdOut_MP">N * Ts 乘积输出:</entry>
    <entry key="UintegralTsProdOut_MP">U_integral * Ts 乘积输出:</entry>
    <entry key="UngainTsProdOut_MP">U_Ngain * Ts 乘积输出:</entry>
    <entry key="UseITs_MP">使用 I*Ts (最适合 codegen)</entry>
    <entry key="IntegralITs_MP">积分(I*Ts):</entry>
    <entry key="IntegratorSaturation_GT">积分器饱和</entry>
    <entry key="ICSaturationCheck_ErrMsg">积分器和滤波器的初始条件必须在饱和界限内。</entry>
    <entry key="UseExternalDerivative_MP">使用来自外部的导数</entry>
    <entry key="CoulombFrictionValueOffset_MP">库仑摩擦值(偏移):</entry>
    <entry key="CoefficientOfViscousFrictionGain_MP">粘性摩擦系数(增益):</entry>
    <entry key="CoulombicAndViscousFriction_MD">零值处的不连续点偏移用于模拟库仑摩擦。线性增益用于模拟粘性摩擦。\ny = sign(x) * (Gain * abs(x) + Offset)</entry>
    <entry key="DeadZoneDynamic_MD">输入位于死区内时输出零。超出死区时，按起始值或结束值对输入信号进行偏移。</entry>
    <entry key="RateLimiterDynamic_MD">通过使用第一个输入(上限)和第三个输入项(下限)，限制第二个输入处信号的上升沿和下降沿速率。</entry>
    <entry key="OutputMinimum_MP">输出最小值:</entry>
    <entry key="OutputMaximum_MP">输出最大值:</entry>
    <entry key="OutputDataType_MP">输出数据类型:</entry>
    <entry key="OutputDataTypeMode_MP">输出数据类型模式:</entry>
    <entry key="OutputDataTypeegFixdt116Fixdtsingle_MP">输出数据类型(例如 fixdt(1, 16)、fixdt(''single'')):</entry>
    <entry key="OutputScalingSlopeEg29OrSlopeBias_MP">输出定标(斜率，如 2^-9 ；或 [斜率 偏置]，如 [1.25 3]):</entry>
    <entry key="InputDatatype_MP">输入数据类型:</entry>
    <entry key="SaturationDynamic_MD">使用第一个输入(上限)和第三个输入(下限)来界定第二个输入的范围。</entry>
    <entry key="Threshold_MP">阈值:</entry>
    <entry key="WrapToZero_MD">如果输入高于阈值，则输出为零，否则输出等于输入。</entry>
    <entry key="InitialConditionForPreviousInput_MP">上一输入的初始条件:</entry>
    <entry key="Difference_MD">输出当前输入值减去上一输入值的差值。</entry>
    <entry key="GainValue_MP">增益值:</entry>
    <entry key="InitialConditionForPreviousWeightedInputKuTs_MP">上一加权输入 K*u/Ts 的初始条件:</entry>
    <entry key="DiscreteDerivative_MD">输入的离散时间导数。\n\n此模块仅在固定采样率下工作。不要在具有非周期性触发器的子系统中使用此模块。</entry>
    <entry key="FirstOrderHold_MD">一阶保持。</entry>
    <entry key="NumberOfDelays_MP">延迟数:</entry>
    <entry key="InputProcessing_MP">输入处理:</entry>
    <entry key="IntegerDelay_MD">将信号延迟 N 个采样周期。</entry>
    <entry key="OrderOutputVectorStartingWith_MP">输出向量排序:</entry>
    <entry key="IncludeCurrentInputInOutputVector_MP">将当前输入包含在输出向量中</entry>
    <entry key="TappedDelayLine_MD">将信号延迟 N 个采样周期并输出所有延迟版本。</entry>
    <entry key="PoleinZPlane_MP">极点(在 Z 平面内):</entry>
    <entry key="InitialConditionForPreviousOutput_MP">上一输出的初始条件:</entry>
    <entry key="FirstOrderTransferFcn_MD">离散时间一阶传递函数。传递函数具有一个单位 DC 增益。</entry>
    <entry key="PoleOfCompensatorinZPlane_MP">补偿器的极点(在 Z 平面内):</entry>
    <entry key="ZeroOfCompensatorinZPlane_MP">补偿器的零点(在 Z 平面内):</entry>
    <entry key="LeadOrLagCompensator_MD">离散时间超前或滞后补偿器。补偿器具有一个单位即时增益，DC 增益等于(1-零点)/(1-极点)。\n\n当 0 &lt; 极点 &lt; 零点 &lt; 1 时，获得超前补偿。\n在 0 &lt; 零点 &lt; 极点 &lt; 1 时，获得滞后补偿。</entry>
    <entry key="ZeroinZPlane_MP">零点(在 Z 平面内):</entry>
    <entry key="TransferFcnRealZero_MD">离散时间传递函数有一个实零点并且(实际上)没有极点。</entry>
    <entry key="IndexOfBit0IsLeastSignificant_MP">位的索引(0 是最低有效位):</entry>
    <entry key="BitClear_MD">将存储整数的第 i 位清 0。忽略定标。</entry>
    <entry key="BitSet_MD">将存储整数的第 i 位设为 1。忽略定标。</entry>
    <entry key="Operator_MP">运算符:</entry>
    <entry key="UseBitMask_MP">使用位掩码...</entry>
    <entry key="NumberOfInputPorts_MP">输入端口数目:</entry>
    <entry key="BitMask_MP">位掩码</entry>
    <entry key="TreatMaskAs_MP">将掩码视为:</entry>
    <entry key="BitwiseOperator_MD">对输入执行指定的按位运算。输出数据类型应该准确表示零。</entry>
    <entry key="ConstantValue_MP">常量值:</entry>
    <entry key="CompareToConstant_MD">确定信号如何与常量比较。</entry>
    <entry key="CompareToZero_MD">确定信号如何与零值比较。</entry>
    <entry key="DetectChange_MD">如果输入不等于其上一个值，则输出 TRUE，否则输出 FALSE。初始条件确定上一个输入 U/z 的初始值。</entry>
    <entry key="DetectDecrease_MD">如果输入严格小于其上一个值，则输出 TRUE，否则输出 FALSE。初始条件确定上一个输入 U/z 的初始值。</entry>
    <entry key="DetectIncrease_MD">如果输入严格大于其上一个值，则输出 TRUE，否则输出 FALSE。初始条件确定上一个输入 U/z 的初始值。</entry>
    <entry key="DetectFallNegative_MD">如果输入严格为负值，并且其上一个值为非负值，则输出 TRUE，否则输出 FALSE。初始条件确定布尔表达式的初始值(U/z &lt; 0)。</entry>
    <entry key="DetectFallNonpositive_MD">如果输入为非正值，并且其上一个值严格为正值，则输出 TRUE，否则输出 FALSE。初始条件确定布尔表达式的初始值(U/z &lt;= 0)。</entry>
    <entry key="DetectRiseNonnegative_MD">如果输入是非负值，并且其上一个值严格为负值，则输出 TRUE，否则输出 FALSE。初始条件确定布尔表达式的初始值(U/z &gt;= 0)。</entry>
    <entry key="DetectRisePositive_MD">如果输入严格为正值，并且其上一个值为非正值，则输出 TRUE，否则输出 FALSE。初始条件确定布尔表达式的初始值(U/z &gt; 0)。</entry>
    <entry key="BitsToExtract_MP">提取位:</entry>
    <entry key="NumberOfBits_MP">位数:</entry>
    <entry key="BitIndicesstartEnd0basedRelativeToLSB_MP">位索引([start end]，相对于 LSB 的从 0 开始的索引):</entry>
    <entry key="OutputScalingMode_MP">输出定标模式:</entry>
    <entry key="ExtractBits_MD">输出从输入信号选择的连续位。请使用 "提取位" 参数选择要输出的位。</entry>
    <entry key="IntervalClosedOnRight_MP">右半闭区间</entry>
    <entry key="UpperLimit_MP">上限:</entry>
    <entry key="IntervalClosedOnLeft_MP">左半闭区间</entry>
    <entry key="LowerLimit_MP">下限:</entry>
    <entry key="IntervalTest_MD">如果输入在下限和上限之间的区间内，则输出为 TRUE，否则为 FALSE。</entry>
    <entry key="IntervalTestDynamic_MD">如果输入在下限和上限之间的区间内，则输出为 TRUE，否则为 FALSE。</entry>
    <entry key="OutputFormula_MP">输出公式</entry>
    <entry key="NumberOfDataPointsForLookupTable_MP">查找表的数据点数:</entry>
    <entry key="OutputWordLength_MP">输出字长:</entry>
    <entry key="InternalRulePriorityForLookupTable_MP">查找表的内部规则优先级:</entry>
    <entry key="SineAndCosine_MD">通过利用象限波对称性的查找表方法来实现定点正弦和余弦函数。输出小数长度等于输出字长减 2。\n\n当数据点数为 (2^n)+1 (其中 n 是整数)时的实现最高效。</entry>
    <entry key="LookupMethod_MP">查找方法:</entry>
    <entry key="LookupTableDynamic_MD">使用所选查找方法逼近一维函数。</entry>
    <entry key="MatLibTranspose_MD">计算 M×N 矩阵的转置。</entry>
    <entry key="MatLibHermitian_MD">计算 M×N 矩阵的埃尔米特转置。</entry>
    <entry key="MatLibMatrixSquare_MD">计算矩阵平方 A' * A。对复数输入执行埃尔米特转置。[M×1] 和 [1×N] 输入矩阵可分别用于计算高效的外积和内积。</entry>
    <entry key="MatLibCrossProduct_MD">两个 3×1 向量的叉积 \na=[a1 a2 a3]，b=[b1 b2 b3]。\ny = a x b = (a2b3 - a3b2)i + (a3b1 - a1b3)j + (a1b2 - a2b1)k</entry>
    <entry key="InitialGuess_MP">初始估计值:</entry>
    <entry key="AlgebraicConstraint_MD">将输入信号 f(z) 约束为零，并输出代数状态 z。此模块输出使得输入端为零的必需值。输出必须通过某种反馈路径影响输入。通过提供输出的初始估计值可提高代数环求解器的效率。</entry>
    <entry key="Function_MP">函数:</entry>
    <entry key="MinMaxRunningResettable_MD">输出过去的所有输入 u 的最大值或最小值。当重置输入信号 R 为 TRUE 时，输出重置为初始状态。此重置动作是向量化的，支持标量扩展。</entry>
    <entry key="Low_MP">低</entry>
    <entry key="Gain_MP">增益</entry>
    <entry key="High_MP">高</entry>
    <entry key="MaximumGradient_MP">最大梯度:</entry>
    <entry key="EnableAssertion_MP">启用断言</entry>
    <entry key="SimulationCallbackWhenAssertionFails_MP">断言失败时的仿真回调(可选):</entry>
    <entry key="StopSimulationWhenAssertionFails_MP">断言失败时停止仿真</entry>
    <entry key="OutputAssertionSignal_MP">输出断言信号</entry>
    <entry key="SelectIconType_MP">选择图标类型:</entry>
    <entry key="Checks_Gradient_MD">断言离散信号的连续采样之间的差值的绝对值小于上界。</entry>
    <entry key="Checks_DGap_MD">断言输入信号 ''u'' 始终小于下界 ''min'' 或大于上界 ''max''。第一个输入是间隔的上界；第二个输入是下界；第三个输入是测试信号。</entry>
    <entry key="Checks_DRange_MD">断言一个信号始终位于另外两个信号之间。第一个输入是上界信号；第二个输入是下界；第三个输入是测试信号。</entry>
    <entry key="UpperBound_MP">上界:</entry>
    <entry key="InclusiveUpperBound_MP">包含上界</entry>
    <entry key="LowerBound_MP">下界:</entry>
    <entry key="InclusiveLowerBound_MP">包含下界</entry>
    <entry key="Checks_SGap_MD">断言输入信号小于(也可以等于)静态下界或大于(也可以等于)静态上界。</entry>
    <entry key="Checks_SRange_MD">断言输入信号位于静态下界和上界之间，也可以等于任一界限。 </entry>
    <entry key="Checks_DMin_MD">断言一个信号始终小于另一个信号。第一个输入是下界信号。第二个输入是测试信号。</entry>
    <entry key="Checks_DMax_MD">断言一个信号始终大于另一个信号。第一个输入是上界信号。第二个输入是测试信号。</entry>
    <entry key="Resolution_MP">分辨率:</entry>
    <entry key="Checks_Resolution_MD">断言输入信号具有指定的分辨率。如果分辨率是标量，输入信号必须是分辨率的倍数（差异在容差 10e-3 范围内）。如果分辨率是向量，输入信号必须等于分辨率向量的一个元素。</entry>
    <entry key="InclusiveBoundary_MP">包含边界</entry>
    <entry key="Checks_SMin_MD">断言输入信号大于(也可以等于)静态下界。</entry>
    <entry key="Checks_SMax_MD">断言输入信号小于(也可以等于)静态上界。\n</entry>
    <entry key="BlockSupportTable_MD">双击模块将启动 Simulink 模块数据类型支持表。</entry>
    <entry key="DocBlockEmbeddedCoderFlagLabel_MP">代码生成模板符号</entry>
    <entry key="DocBlockDocTypeLabel_MP">文档类型</entry>
    <entry key="DocBlock_MD">使用此模块将长描述性文本与模型一起保存。双击模块将打开编辑器。</entry>
    <entry key="Frame_MP">框架</entry>
    <entry key="CMBlock_MD">此模块允许在模型中显示版本控制信息。</entry>
    <entry key="LinearizationTime_MP">线性化时间:</entry>
    <entry key="SampleTimeofLinearizedModel_MP">采样时间(线性化模型):</entry>
    <entry key="TimedLinearization_MD">在特定时间在基础工作区中生成线性模型。\n</entry>
    <entry key="TriggerType_MP">触发器类型:</entry>
    <entry key="TriggeredLinearization_MD">触发时在基础工作区中生成线性模型。</entry>
    <entry key="IOPortSubsystem_MD">包含 Inport 和 Outport 模块的子系统模块模板。</entry>
    <entry key="EnabledSubsystem_MD">包含 Enable Port、Inport 和 Outport 模块的子系统模块模板。</entry>
    <entry key="ResettableSubsystem_MD">包含 Reset Port、Inport 和 Outport 模块的子系统模块模板。</entry>
    <entry key="EnabledAndTriggeredSubsystem_MD">包含 Enable Port、Trigger Port、Inport 和 Outport 模块的子系统模块模板。</entry>
    <entry key="ForEachSubsystem_MD">包含 For Each、Inport 和 Outport 模块的子系统模块模板。</entry>
    <entry key="NeighborhoodProcessingSubsystem_MD">包含邻域、输入端口和输出端口模块的子系统模块模板。</entry>
    <entry key="ArrayProcessing_MD">包含数组处理、Inport 和 Outport 模块的子系统模块模板。</entry>
    <entry key="PixelProcessing_MD">包含像素处理、Inport 和 Outport 模块的子系统模块模板。</entry>
    <entry key="InjectorSubsystem_MD">包含 Injector Inport 和 Injector Outport 模块的子系统模块模板。</entry>
    <entry key="ForIteratorSubsystem_MD">包含 For Iterator、Inport 和 Outport 模块的子系统模块模板。</entry>
    <entry key="SynchronousSubsystem_MP">包含 State Control、Inport 和 Outport 模块的子系统模块模板。</entry>
    <entry key="EnabledSynchronousSubsystem_MP">包含 Enable Port、Inport 和 Outport 模块的子系统模块模板。</entry>
    <entry key="ResettableSynchronousSubsystem_MP">包含 Reset Port、State Control、Inport 和 Outport 模块的子系统模块模板。</entry>
    <entry key="NumberOfIterations_MP">迭代次数:</entry>
    <entry key="Scalar_MP">不允许宽输出</entry>
    <entry key="ShowEnablePort_MP">显示使能端口</entry>
    <entry key="FunctionCallGenerator_MD">以指定的速率执行连接到此模块的函数调用子系统、模型或 Stateflow 图。要按规定的顺序执行多个函数调用模块，请将此模块与 Function-Call Split 模块结合使用。\n\n''采样时间'' 参数指定此模块执行与其连接的每个函数调用模块的速率。要在每个时间步多次迭代执行连接到此模块的每个函数调用模块，请使用 ''迭代次数'' 参数。\n\n如果选中 ''显示使能端口'' 复选框，则仅当使能端口的输入信号具有正标量值时，模块才会输出函数调用信号。</entry>
    <entry key="FunctionCallSubsystem_MD">包含函数调用 Trigger Port、Inport 和 Outport 模块的子系统模块模板。</entry>
    <entry key="SimulinkFunction_MD">配置为 Simulink 函数的子系统模块模板，包含函数调用触发端口、输入和输出参数模块。</entry>
    <entry key="InitializeFunction_MD">子系统模块模板，包含一个设置为 '初始化' 事件的 Event Listener 模块、一个常量模块和一个 State Writer 模块。</entry>
    <entry key="ReinitializeFunction_MD">子系统模块模板，包含一个设置为 '重新初始化' 事件且 '事件名称' 参数设置为 'reinit' 的 Event Listener 模块、一个常量模块和一个 State Writer 模块。</entry>
    <entry key="ResetFunction_MD">子系统模块模板，包含一个设置为 '重置' 事件且 'Event name' 参数设置为 'reset' 的 Event Listener 模块、一个常量模块和一个 State Writer 模块。</entry>
    <entry key="TerminateFunction_MD">子系统模块模板，包含一个设置为 '终止' 事件的 Event Listener 模块、一个 State Reader 模块和一个 Terminator 模块。</entry>
    <entry key="RunFirstSubsystem_MD">子系统模块模板，包含设置为 '首先' 模式的 Run Order Specifier 模块、Inport 和 Outport 模块。</entry>
    <entry key="RunLastSubsystem_MD">子系统模块模板，包含设置为 '最后' 模式的 Run Order Specifier 模块、Inport 和 Outport 模块。</entry>
    <entry key="ActionSubsystem_MD">包含 Action Port、Inport 和 Outport 模块的子系统模块模板。</entry>
    <entry key="SubsystemExamples_MD">这些是如何使用不同类型的子系统的示例。</entry>
    <entry key="TriggeredSubsystem_MD">包含 Trigger Port、Inport 和 Outport 模块的子系统模块模板。</entry>
    <entry key="MessageTriggeredSubsystem_MD">包含 Trigger Port 和 Outport 模块的子系统模块模板。</entry>
    <entry key="VariantSubsystem_MD">包含 Subsystem 模块作为变体选择项的可变子系统模板。</entry>
    <entry key="VariantModel_MD">包含 Model 模块作为变体选择项的可变子系统模板。</entry>
    <entry key="VariantAssemblySubsystem_MD">处于 Variant Assembly 模式的可变子系统模板。</entry>
    <entry key="WhileIteratorSubsystem_MD">包含 While Iterator、Inport 和 Outport 模块的子系统模块模板。</entry>
    <entry key="InputAndOutputToHaveEqual_MP">输入和输出具有相等的:</entry>
    <entry key="ConversionInherited_MD">将第二个输入转换为第一个输入的数据类型和定标。\n\n转换有两个可能的目标。一个目标是使输入和输出的真实值相等。另一个目标是使输入和输出的存储的整数值相等。溢出和量化误差会妨碍目标的完全实现。</entry>
    <entry key="x1PropagatedDataType_MP">1.传播的数据类型:</entry>
    <entry key="x11PropagatedDataTypeegFixdt116Fixdtsingle_MP">1.1.传播的数据类型(例如 fixdt(1, 16)、fixdt(''single'')):</entry>
    <entry key="x11IfAnyReferenceInputIsDoubleOutputIs_MP">1.1.如果任一参考输入为双精度，则输出为:</entry>
    <entry key="x12IfAnyReferenceInputIsSingleOutputIs_MP">1.2.如果任一参考输入为单精度，则输出为:</entry>
    <entry key="x13IsSigned_MP">1.3.有符号:</entry>
    <entry key="x141NumberofBitsBase_MP">1.4.1.位数: 基值</entry>
    <entry key="x142NumberofBitsMultiplicativeAdjustment_MP">1.4.2.位数: 乘性调整</entry>
    <entry key="x143NumberofBitsAdditiveAdjustment_MP">1.4.3.位数: 加性调整</entry>
    <entry key="x144NumberofBitsAllowableFinalValues_MP">1.4.4.位数: 允许的最终值</entry>
    <entry key="x2PropagatedScaling_MP">2.传播的定标:</entry>
    <entry key="x21PropagatedScalingSlopeEg29OrSlopeBiasEg1253_MP">2.1.传播的定标(斜率，如 2^-9 ；或 [斜率 偏置]，如 [1.25 3]):</entry>
    <entry key="x21ValuesUsedToDetermineBestPrecisionScaling_MP">2.1.用于确定最佳精度定标的值。</entry>
    <entry key="x211SlopeBase_MP">2.1.1.斜率: 基值</entry>
    <entry key="x212SlopeMultiplicativeAdjustment_MP">2.1.2.斜率: 乘性调整</entry>
    <entry key="x213SlopeAdditiveAdjustment_MP">2.1.3.斜率: 加性调整</entry>
    <entry key="x221BiasBase_MP">2.2.1.偏置: 基值</entry>
    <entry key="x222BiasMultiplicativeAdjustment_MP">2.2.2.偏置: 乘性调整:</entry>
    <entry key="x223BiasAdditiveAdjustment_MP">2.2.3.偏置: 加性调整:</entry>
    <entry key="DataTypePropagation_MD">基于参考信号的信息设置传播信号的数据类型和定标。\n注意:\n1) 靠近对话框顶部的项具有更高的优先级。\na) 双精度类型的参考输入优先于所有其他输入。\nb) 单精度数据类型优先于整数和定点数据类型。\nc) 乘性调整的执行先于加性调整。\nd) 位数在从参考信号继承精度或正范围之前确定。\n2) PosRange 比信号的精确最大正范围高一位。\n3) 计算的位数会提升为大于或等于计算值的最小允许值。如果不存在任何信息，则该模块返回错误。</entry>
    <entry key="DataTypePropagationExamples_MD">打开一个包含数据类型传播示例的模型。</entry>
    <entry key="ScalingStrip_MD">此模块去除了定点信号的定标。它将输入数据类型映射到有足够位数来存储输入的最小内置数据类型。输入的存储整数值将是输出的值。输出始终具有名义定标(斜率 = 1.0，偏置 = 0.0)，因此输出的真实值和存储整数值之间没有区别。</entry>
    <entry key="EnvironmentController_MD">根据当前环境，输出仿真(Sim)或代码生成(Coder)端口。启用优化后，不会执行导致未使用端口的不必要模块。两个输入信号的宽度必须相同。</entry>
    <entry key="xmin_MP">X 最小值:</entry>
    <entry key="xmax_MP">X 最大值:</entry>
    <entry key="ymin_MP">Y 最小值:</entry>
    <entry key="ymax_MP">Y 最大值:</entry>
    <entry key="XYScope_MD">在每个时间步绘制第二个输入(Y)对第一个输入(X)的图以创建 X-Y 绘图。忽略由 X 最小值、X 最大值、Y 最小值、Y 最大值指定的范围之外的数据。</entry>
    <entry key="NoisePower_MP">噪声功率:</entry>
    <entry key="Seed_MP">种子:</entry>
    <entry key="InterpretVectorParametersAs1D_MP">将向量参数解释为一维向量</entry>
    <entry key="BandLimitedWhiteNoise_MD">Band-Limited White Noise 模块生成适合在连续系统或混合系统中使用的正态分布随机数。</entry>
    <entry key="InitialFrequencyHz_MP">初始频率(Hz):</entry>
    <entry key="TargetTimesecs_MP">目标时间(秒):</entry>
    <entry key="FrequencyAtTargetTimeHz_MP">目标时间的频率(Hz):</entry>
    <entry key="chirp_MD">输出线性啁啾信号(频率随时间线性变化的正弦波)。</entry>
    <entry key="CounterFreeRunning_MD">此模块是自由运行的计数器，在达到指定位数的最大可能值后，它会溢出回零。计数器始终初始化为零。输出通常是具有指定位数的无符号整数。</entry>
    <entry key="CounterLimited_MD">此模块是计数器，它在输出指定的上限后绕回到零。计数器始终初始化为零。输出通常是 8、16 或 32 位的无符号整数。模块会使用表示上限所需的最小位数。</entry>
    <entry key="Value_MP">值:</entry>
    <entry key="Slope_MP">斜率:</entry>
    <entry key="StartTime_MP">开始时间:</entry>
    <entry key="InitialOutput_MP">初始输出:</entry>
    <entry key="Ramp_MD">输出从指定时间开始的斜坡信号。</entry>
    <entry key="SliderGain_MD">移动滑块以修改标量增益。</entry>
    <entry key="TimeValues_MP">时间值:</entry>
    <entry key="OutputValues_MP">输出值:</entry>
    <entry key="RepeatingTable_MD">输出在时间-值对组表中指定的数字的重复序列。时间的值应单调递增。</entry>
    <entry key="VectorOfOutputValues_MP">输出值的向量:</entry>
    <entry key="VectorOfTimeValues_MP">时间值的向量:</entry>
    <entry key="RepeatingSequenceInterpolated_MD">输出并重复离散时间序列。使用指定的查找方法确定数据点之间的输出。</entry>
    <entry key="RepeatingSequenceStair_MD">输出并重复离散时间序列。</entry>
    <entry key="SigbuilderBlock_MD">创建并生成可交换的分段线性波形信号组。\n\n不推荐使用 Signal Builder 模块。请改用 Signal Editor 模块。</entry>
    <entry key="Stateflow_MD">嵌入式 MATLAB 模块</entry>
    <entry key="SFunctionBuilder_MD">S-Function Builder 模块基于您提供的 C 代码(具有多个输入端口、输出端口和不定数量的标量、向量或矩阵参数)创建一个包装器 C-MEX S-Function。输入和输出端口可以传播 Simulink 内置数据类型、定点数据类型、复数、一维和二维信号。此模块还支持实数类型的离散和连续状态。您可以选择让模块生成 TLC 文件以用于代码生成。</entry>
    <entry key="SFunctionExamples_MD">这些是如何使用不同类型的 S-Function 的示例。</entry>
    <entry key="LookupTableBreakpoints_MP">查找表断点</entry>
    <entry key="AllowedSpacingpow2evenOrunrestricteddefault_MP">允许的间距 'pow2'、'even' 或 'unrestricted' (默认值) </entry>
    <entry key="MaximumNumberOfBreakpoints_MP">最大断点数量</entry>
    <entry key="MaximumWorstCaseApproximationError_MP">最差情形逼近误差最大值</entry>
    <entry key="RoundingMethodfloordefaultceilnearOrzero_MP">舍入方法 'floor' (默认值)、'ceil'、'near' 或 'zero'</entry>
    <entry key="OutputScaling_MP">输出定标</entry>
    <entry key="InputScaling_MP">输入定标</entry>
    <entry key="MaximumInputValueOfInterest_MP">最大感兴趣输入值</entry>
    <entry key="MinimumInputValueOfInterest_MP">最小感兴趣输入值</entry>
    <entry key="MEGMAFixedPointCosine_MD">MEGMA 余弦</entry>
    <entry key="MEGMAFixedPointExponent_MD">MEGMA 指数</entry>
    <entry key="MEGMAFixedPointSine_MD">MEGMA 正弦</entry>
    <entry key="MEGMAFixedPointSqrt_MD">MEGMA 平方根</entry>
    <entry key="MEGMAFixedPointTangent_MD">MEGMA 正切</entry>
    <entry key="ComputeAlways">始终计算</entry>
    <entry key="CacheForASpecificMATLABSession">为特定 MATLAB 会话缓存</entry>
    <entry key="CacheAcrossDifferentMATLABSessions">跨不同 MATLAB 会话缓存</entry>
    <entry key="Main">主要</entry>
    <entry key="SignalAttributes">信号属性</entry>
    <entry key="Propagatedtype">传播的类型</entry>
    <entry key="Propagatedscaling">传播的定标</entry>
    <entry key="MultiplyAdd_MD">将前两个输入相乘，并将结果与第三个输入相加，或从第三个输入中减去结果。函数选项可定义运算模式。此模块旨在高效映射到 FPGA 上的 DSP 片。</entry>
    <entry key="BitConcat_MD">串联输入字。对于标量输入，两个或更多输入信号应连接到该模块。对于向量输入，有至少一个输入应连接到该模块。输出中字的左右顺序遵循输入信号的顺序。L 输入是最低位字，H 输入是最高位字。</entry>
    <entry key="BitSlice_MD">从输入信号返回连续的位字段。该域按 LSB 位置和 MSB 位置进行索引(相对于 LSB 的从 0 开始的索引)。</entry>
    <entry key="BitReduce_MD">按照 "归约模式" 参数的指定，对输入信号执行按位 AND、OR 或 XOR 归约。</entry>
    <entry key="BitRotate_MD">按照 "旋转模式" 参数的指定，向左或向右旋转输入信号。"旋转长度" 指定要旋转的位数。</entry>
    <entry key="BitShift_MD">按照 "移位模式" 参数的指定，对输入信号执行逻辑或算术移位。"移位长度" 指定移位的位数。</entry>
    <entry key="WordToBits_MD">将输入转换为由 N 个 1 位值组成的向量，N 由 "最大字长" 封装参数给出。</entry>
    <entry key="BitsToWord_MD">将由 N 个 1 位值组成的输入向量转换为 N 位整数。</entry>
    <entry key="HDLCounter_MD">HDL 代码生成的计数器。</entry>
    <entry key="TappedDelayEnabledSynchronous_MD">通常，标量信号延迟多个采样周期，并输出所有延迟信号版本。\n当使能信号为 false 时，模块被禁用，状态和输出值不变。</entry>
    <entry key="UnitDelayEnabledSynchronous_MD">通常，输出是延迟了一个采样周期的信号 u。\n当使能信号为 false 时，模块被禁用，状态和输出值不变。使能动作仅支持标量输入。当信号 u 为向量时，会为使能动作使用标量扩展。</entry>
    <entry key="UnitDelayResettableSynchronous_MD">通常，输出是延迟了一个采样周期的信号 u。\n当重置信号 R 为 true 时，状态和输出始终设置为等于初始条件参数。此模块具有对硬件友好的重置行为。此重置动作仅支持标量输入。当信号 u 为向量时，会为此重置动作使用标量扩展。</entry>
    <entry key="UnitDelayEnabledResettableSynchronous_MD">通常，输出是延迟了一个采样周期的信号 u。\n当使能信号为 false 时，模块被禁用，状态和输出值不变。使能动作仅支持标量输入。当信号 u 是向量时，会为使能动作使用标量扩展。\n当重置信号 R 为 true 时，状态和输出始终设置为等于初始条件参数。此模块具有对硬件友好的重置行为。此重置动作仅支持标量输入。当信号 u 为向量时，会为此重置动作使用标量扩展。</entry>
    <entry key="TappedDelayResettableSynchronous_MD"> 通常，标量信号延迟多个采样周期，并输出所有延迟信号版本。\n当重置信号 R 为 true 时，状态和输出始终设置为等于初始条件参数。此模块具有对硬件友好的重置行为。</entry>
    <entry key="TappedDelayEnabledResettableSynchronous_MD">通常，标量信号延迟多个采样周期，并输出所有延迟信号版本。\n当使能信号为 false 时，模块被禁用，状态和输出值不变。\n当重置信号 R 为 true 时，状态和输出始终设置为等于初始条件参数。此模块具有对硬件友好的重置行为。</entry>
    <entry key="DualPortRAM_MD">此模块仿真具有两个数据输出端口的双端口 RAM。</entry>
    <entry key="SimpleDualPortRAM_MD">此模块仿真具有一个数据输出端口的简单双端口 RAM。</entry>
    <entry key="SinglePortRAM_MD">此模块仿真单端口 RAM。</entry>
    <entry key="DualRateDualPortRAM_MD">此模块仿真具有两个数据输出端口的双时钟双端口 RAM。</entry>
    <entry key="HDLFIFO_MD">实现一个同步 "先进先出" (FIFO)寄存器。</entry>
    <entry key="MultiplyAccumulate_MD">工作模式: 向量\n dataOut= sum(a.*b) + c \n\n工作模式: 流式 - 使用开始和结束端口 \ndataOut(t+1)= dataOut(t) + sum(a(t)*b(t)) + c \n其中当 start 和 valid=high 时 c=bias，\n否则 c=0 \n\n工作模式: 流式 - 使用采样数 \ndataOut(t+1)= dataOut(t) + sum(a(t)*b(t)) + c \n其中当 t=0 时 c=bias，\n否则 c=0 \n\n此模块旨在高效映射到 FPGA 上的 DSP 片。</entry>
    <entry key="Serializer1D_MD">从向量转换为标量，或转换为大小更小的向量。输出速率为 V * (速率 + 空闲周期)，其中 V 为输入速率。</entry>
    <entry key="Deserializer1D_MD">从标量转换为向量，或从大小较小的向量转换为大小较大的向量。输出速率为 S / (速率 + 空闲周期)，其中 S 为输入速率。</entry>
    <entry key="RotateMode_MP">旋转模式</entry>
    <entry key="BitRotateLength_MP">旋转长度(必须大于或等于零)</entry>
    <entry key="ShiftMode_MP">移位模式</entry>
    <entry key="BitShiftLength_MP">移位长度(必须大于或等于零)</entry>
    <entry key="CounterType_MP">计数器类型:</entry>
    <entry key="InitialValue_MP">初始值:</entry>
    <entry key="StepValue_MP">步长值:</entry>
    <entry key="CountToValue_MP">计数结束值:</entry>
    <entry key="CountFrom_MP">计数开始值:</entry>
    <entry key="CountFromValue_MP">从以下值开始计数:</entry>
    <entry key="LocalReset_MP">本地重置端口</entry>
    <entry key="LoadPorts_MP">加载端口</entry>
    <entry key="CountEnable_MP">计数使能端口</entry>
    <entry key="CountDirection_MP">计数方向端口</entry>
    <entry key="CountHit_MP">计数命中输出端口</entry>
    <entry key="CountOutputData_MP">计数器输出数据是:</entry>
    <entry key="WordLength_MP">字长:</entry>
    <entry key="FractionLength_MP">小数长度:</entry>
    <entry key="AddressPortWidth_MP">地址端口宽度(2 至 29 位)</entry>
    <entry key="OutPutDataWrite_MP">写期间输出数据:</entry>
    <entry key="AddressPort_MP">地址端口宽度(2 至 28 位)</entry>
    <entry key="RAMType_MP">指定 RAM 的类型:</entry>
    <entry key="EnableAsyncRead_MP">启用异步读取</entry>
    <entry key="SpecifyOutputDataWrite_MP">指定写操作的输出数据:</entry>
    <entry key="RAMInitialVal_MP">指定 RAM 初始值:</entry>
    <entry key="RegisterSize_MP">寄存器大小:</entry>
    <entry key="Mode_MP">模式:</entry>
    <entry key="OutputInputSampleRatio_MP">输出采样时间与输入采样时间之比:</entry>
    <entry key="PushReg_MP">压入满寄存器:</entry>
    <entry key="PopReg_MP">从空寄存器弹出:</entry>
    <entry key="EmptyRegisterIndicator_MP">显示空寄存器指示端口(空)</entry>
    <entry key="FullRegisterIndicator_MP">显示满寄存器指示端口(满)</entry>
    <entry key="RegisterEntries_MP">显示寄存器条目数端口(数字)</entry>
    <entry key="NumberInputs_MP">输入数目</entry>
    <entry key="MSBPos_MP">MSB 位置</entry>
    <entry key="LSBPos_MP">LSB 位置</entry>
    <entry key="ReductionMode_MP">归约模式</entry>
    <entry key="MaxWordLength_MP">最大字长</entry>
    <entry key="OutputBitOrder_MP">输出位顺序</entry>
    <entry key="OutputSignedness_MP">在位压缩后，将得到的整数视为</entry>
    <entry key="InputBitOrder_MP">输入位顺序</entry>
    <entry key="FMA_MP">浮点融合乘加(FMA)</entry>
    <entry key="OperationMode_MP">运算模式:</entry>
    <entry key="InputOutputVectorRatio_MP">比率(输入向量大小/输出向量大小)</entry>
    <entry key="IdleCycles_MP">闲置周期</entry>
    <entry key="ControlPorts_MP">控制信号端口</entry>
    <entry key="ValidIn_MP">ValidIn</entry>
    <entry key="ValidOut_MP">ValidOut</entry>
    <entry key="StartOut_MP">StartOut</entry>
    <entry key="InputDataPortDim_MP">输入数据端口维度(-1 表示继承) </entry>
    <entry key="InputSampleTime_MP">输入采样时间(-1 表示继承)</entry>
    <entry key="InputSignal_MP">输入信号类型</entry>
    <entry key="StartIn_MP">StartIn</entry>
    <entry key="OutputInputVectorRatio_MP">比率(输出向量大小/输入向量大小)</entry>
    <entry key="Ceiling">向上</entry>
    <entry key="Convergent">收敛</entry>
    <entry key="Floor">向下</entry>
    <entry key="Nearest">最接近值</entry>
    <entry key="Round">舍入</entry>
    <entry key="Simplest">最简</entry>
    <entry key="Zero">向零</entry>
    <entry key="ContinuousTime">连续时间</entry>
    <entry key="DiscreteTime">离散时间</entry>
    <entry key="ForwardEuler">前向欧拉</entry>
    <entry key="BackwardEuler">后向欧拉</entry>
    <entry key="Trapezoidal">梯形</entry>
    <entry key="Ideal">理想</entry>
    <entry key="Parallel">并行</entry>
    <entry key="internal">内部</entry>
    <entry key="external">外部</entry>
    <entry key="none">无</entry>
    <entry key="rising">上升沿</entry>
    <entry key="falling">下降沿</entry>
    <entry key="either">任一沿</entry>
    <entry key="level">电平</entry>
    <entry key="backCalculation">反算</entry>
    <entry key="clamping">钳位</entry>
    <entry key="Auto">自动</entry>
    <entry key="SpecifyViaDialog">通过对话框指定</entry>
    <entry key="SameAsSecondInput">与第二个输入相同</entry>
    <entry key="ColumnsAsChannelsFrameBased">列作为通道(基于帧)</entry>
    <entry key="InheritViaInternalRule">通过内部规则继承</entry>
    <entry key="InheritViaBackPropagation">通过反向传播继承</entry>
    <entry key="Oldest">最早</entry>
    <entry key="Newest">最近</entry>
    <entry key="RealWorldValue">真实值</entry>
    <entry key="StoredInteger">存储整数</entry>
    <entry key="UpperHalf">上半部</entry>
    <entry key="LowerHalf">下半部</entry>
    <entry key="RangeStartingWithMostSignificantBit">以最高有效位开始的范围</entry>
    <entry key="RangeEndingWithLeastSignificantBit">以最低有效位结束的范围</entry>
    <entry key="RangeOfBits">位范围</entry>
    <entry key="PreserveFixedPointScaling">保留定点定标</entry>
    <entry key="TreatBitFieldAsAnInteger">将位字段视为整数</entry>
    <entry key="InterpolationExtrapolation">内插-外插</entry>
    <entry key="InterpolationUseEndValues">插值 - 使用最终值</entry>
    <entry key="InternalRulePrioritySpeed">速度</entry>
    <entry key="InternalRulePriorityPrecision">精度</entry>
    <entry key="UseInputNearest">取最接近的输入值</entry>
    <entry key="UseInputBelow">向下取输入值</entry>
    <entry key="UseInputAbove">向上取输入值</entry>
    <entry key="min">最小值</entry>
    <entry key="max">最大值</entry>
    <entry key="graphic">图形</entry>
    <entry key="text">文本</entry>
    <entry key="Text">文本</entry>
    <entry key="functionCall">函数调用</entry>
    <entry key="InheritViaPropagationRule">通过传播规则继承</entry>
    <entry key="IsSigned1OrIsSigned2">IsSigned1 或 IsSigned2</entry>
    <entry key="ObtainViaBestPrecision">通过最佳精度获得</entry>
    <entry key="UseSpecifiedScaling">使用指定的定标</entry>
    <entry key="BestPrecisionVectorWise">最佳精度: 基于向量</entry>
    <entry key="ElementsAsChannelsSampleBased">元素作为通道(基于采样)</entry>
    <entry key="Inherited">继承</entry>
    <entry key="UsePIDTunerApp">基于传递函数(PID 调节器)</entry>
    <entry key="UseOLSimulation">基于频率响应</entry>
    <entry key="GenSFuncName_MP">生成的 S-Function 名称(model_sf):</entry>
    <entry key="GenSFuncShowModuleList_MP">显示模块列表</entry>
    <entry key="GenSFuncListOfModules_IC">\n模块列表:\n{0}</entry>
    <entry key="GenSFuncNotLicensed_IC">未获许可\n</entry>
    <entry key="GenSFuncNone_IC">无</entry>
    <entry key="GenSFuncDesc_MD">Simulink Coder 生成的 S-Function。</entry>
    <entry key="CustCodeQuickHelp_ID">快速帮助</entry>
    <entry key="CustCodeMaskParam1_MP">封装参数 1:</entry>
    <entry key="SL_DSCPT_PWMGenerator">采用每个时间周期开头的输入信号值作为占空比(D)，输出理想的脉冲宽度调制(PWM)信号。\n\n输出脉冲由下式给出:\n\n如果 t(k) &lt;= t &lt; t(k) + pw(k)，则 y(t) = 1\n如果 t(k) + pw(k) &lt;= t &lt; t(k) + Period，则 y(t) = 0\n\n其中，t(k) 是 'k-1' 脉冲后的时间，pw(k) 是脉冲宽度，它是在 t(k) 处输入 D(k) 和 Period 的乘积: pw(k) = Period * D(k)\n\n占空比输入值应在 0 和 1 之间。\n\n选中 '不允许零占空比' 复选框可使模块在没有直接馈通的情况下工作，因此可用于中断代数环。然而，如果占空比输入值为零，模块将在仿真期间出错。\n\n 请选中 '以固定时间间隔运行' 复选框，以固定采样时间间隔产生输出信号值。
      </entry>
    <entry key="SL_DSCPT_AsyncInterrupt">创建基于 VME 的中断服务例程，该例程将执行下游子系统或 Task 模块。</entry>
    <entry key="VME_InterruptNum_MP">VME 中断编号:</entry>
    <entry key="VME_InterruptVecOffset_MP">VME 中断向量偏移:</entry>
    <entry key="TaskPriorities_MP">Simulink 任务优先级:</entry>
    <entry key="PreemptionFlag_MP">抢占标志: 可抢占 -1，不可抢占 -0</entry>
    <entry key="ManageOwnTimer_MP">管理自己的计时器</entry>
    <entry key="TimerResolution_MP">计时器分辨率(秒):</entry>
    <entry key="TimerSize_MP">计时器大小:</entry>
    <entry key="EnableSimInput_MP">启用仿真输入</entry>
    <entry key="SL_DSCPT_TaskSync">创建一个 Task 函数，该函数生成为单独的 VxWorks 任务。Task 函数运行下游函数调用子系统的代码。当此模块运行时，会使用信号量来启用任务执行。</entry>
    <entry key="TaskName_MP">任务名称(不超过 10 个字符):</entry>
    <entry key="TaskPriority_MP">Simulink 任务优先级(0-255):</entry>
    <entry key="StackSize_MP">堆栈大小(字节):</entry>
    <entry key="SyncDataTrans_MP">将此任务的数据传输与调用方任务同步</entry>
    <entry key="NumBitsPerInteger">每个整数的位数(M):</entry>
    <entry key="InputBitOrder">输入位顺序:</entry>
    <entry key="TreatIntegerValuesAs">在位压缩后，将得到的整数值视为:</entry>
    <entry key="OutputDatatype">输出数据类型:</entry>
    <entry key="TreatInputValuesAs">将输入值视为:</entry>
    <entry key="OutputBitOrder">输出位顺序:</entry>
    <entry key="Unsigned">无符号</entry>
    <entry key="Signed">有符号</entry>
    <entry key="SameAsInput">与输入相同</entry>
    <entry key="SmallestInteger">最小整数</entry>
    <entry key="SmallestUnsignedInteger">最小无符号整数</entry>
    <entry key="MSBFirst">MSB 优先</entry>
    <entry key="LSBFirst">LSB 优先</entry>
    <entry key="PermuteMatrix_MD">基于整数值置换索引的向量 P，置换矩阵或向量 A 的行或列。索引不必是唯一的。当您选中 "错误" 复选框时，向量 P 的长度必须与输入行或列的数量相同(无论您要置换哪个)。</entry>
    <entry key="Submatrix_MD">返回输入矩阵的所选部分。一维输入信号被视为二维列向量。输出始终为二维。此模块执行从 1 开始的索引。</entry>
    <entry key="CreateDiagonalMatrix_MD">将对角线元素的向量转换为满矩阵。</entry>
    <entry key="ExtractDiagonal_MD">提取满矩阵的主对角线。</entry>
    <entry key="Permute_MP">置换:</entry>
    <entry key="IndexMode_MP">索引模式:</entry>
    <entry key="InvalidPermutationIndex_MP">无效的置换索引:</entry>
    <entry key="ErrorWhenLengthOfPIsNotEqualToPermuteDimensionSize_MP">当 P 的长度不等于置换维度大小时出错</entry>
    <entry key="Rows_TO">行</entry>
    <entry key="Columns_TO">列</entry>
    <entry key="ZeroBased_TO">从 0 开始</entry>
    <entry key="OneBased_TO">从 1 开始</entry>
    <entry key="ClipIndex_TO">裁剪索引</entry>
    <entry key="ClipAndWarn_TO">裁剪并警告</entry>
    <entry key="GenerateError_TO">报错</entry>
    <entry key="RowSpan_MP">行跨度:</entry>
    <entry key="StartingRow_MP">起始行:</entry>
    <entry key="StartingRowIndex_MP">起始行索引:</entry>
    <entry key="EndingRow_MP">结束行:</entry>
    <entry key="EndingRowIndex_MP">结束行索引:</entry>
    <entry key="ColumnSpan_MP">列跨度:</entry>
    <entry key="StartingColumn_MP">起始列:</entry>
    <entry key="StartingColumnIndex_MP">起始列索引:</entry>
    <entry key="EndingColumn_MP">结束列:</entry>
    <entry key="EndingColumnIndex_MP">结束列索引:</entry>
    <entry key="AllRows_TO">所有行</entry>
    <entry key="OneRow_TO">一行</entry>
    <entry key="RangeOfRows_TO">行的范围</entry>
    <entry key="First_TO">首</entry>
    <entry key="Index_TO">索引</entry>
    <entry key="OffsetFromLast_TO">离末行偏移量</entry>
    <entry key="Last_TO">末</entry>
    <entry key="OffsetFromMiddle_TO">离中间行偏移量</entry>
    <entry key="Middle_TO">中间</entry>
    <entry key="AllColumns_TO">所有列</entry>
    <entry key="OneColumn_TO">一列</entry>
    <entry key="RangeOfColumns_TO">列的范围</entry>
    <entry key="InitialSaveTempField_MP">InitialSaveTempField</entry>
    <entry key="InitialBlockCM_MP">InitialBlockCM</entry>
    <entry key="BlockCM_MP">BlockCM</entry>
    <entry key="SaveTempField_MP">SaveTempField</entry>
    <entry key="DisplayStringWithTags_MP">DisplayStringWithTags</entry>
    <entry key="MaskDisplayString_MP">MaskDisplayString</entry>
    <entry key="HorizontalTextAlignment_MP">HorizontalTextAlignment</entry>
    <entry key="LeftAlignmentValue_MP">LeftAlignmentValue</entry>
    <entry key="SourceBlockDiagram_MP">SourceBlockDiagram</entry>
    <entry key="TagMaxNumber_MP">TagMaxNumber</entry>
    <entry key="CMTag1_MP">CMTag1</entry>
    <entry key="CMTag2_MP">CMTag2</entry>
    <entry key="CMTag3_MP">CMTag3</entry>
    <entry key="CMTag4_MP">CMTag4</entry>
    <entry key="CMTag5_MP">CMTag5</entry>
    <entry key="CMTag6_MP">CMTag6</entry>
    <entry key="CMTag7_MP">CMTag7</entry>
    <entry key="CMTag8_MP">CMTag8</entry>
    <entry key="CMTag9_MP">CMTag9</entry>
    <entry key="CMTag10_MP">CMTag10</entry>
    <entry key="CMTag11_MP">CMTag11</entry>
    <entry key="CMTag12_MP">CMTag12</entry>
    <entry key="CMTag13_MP">CMTag13</entry>
    <entry key="CMTag14_MP">CMTag14</entry>
    <entry key="CMTag15_MP">CMTag15</entry>
    <entry key="CMTag16_MP">CMTag16</entry>
    <entry key="CMTag17_MP">CMTag17</entry>
    <entry key="CMTag18_MP">CMTag18</entry>
    <entry key="CMTag19_MP">CMTag19</entry>
    <entry key="CMTag20_MP">CMTag20</entry>
    <entry key="AllowBusInputs_MP">Allow Bus Inputs</entry>
    <entry key="WritesHaveOutput_MP">WritesHaveOutput</entry>
    <entry key="NumReads_MP">NumReads:</entry>
    <entry key="NumWrites_MP">NumWrites:</entry>
    <entry key="PID">PID</entry>
    <entry key="PI">PI</entry>
    <entry key="PD">PD</entry>
    <entry key="P">P</entry>
    <entry key="I">I</entry>
    <entry key="ExportedGlobal">ExportedGlobal</entry>
    <entry key="ImportedExtern">ImportedExtern</entry>
    <entry key="ImportedExternPointer">ImportedExternPointer</entry>
    <entry key="double">double</entry>
    <entry key="single">single</entry>
    <entry key="int8">int8</entry>
    <entry key="uint8">uint8</entry>
    <entry key="int16">int16</entry>
    <entry key="uint16">uint16</entry>
    <entry key="int32">int32</entry>
    <entry key="uint32">uint32</entry>
    <entry key="AND">AND</entry>
    <entry key="OR">OR</entry>
    <entry key="NAND">NAND</entry>
    <entry key="NOR">NOR</entry>
    <entry key="XOR">XOR</entry>
    <entry key="NOT">NOT</entry>
    <entry key="boolean">boolean</entry>
    <entry key="sin2PiU">sin(2*pi*u)</entry>
    <entry key="cos2PiU">cos(2*pi*u)</entry>
    <entry key="expj2PiU">exp(j*2*pi*u)</entry>
    <entry key="sincos2PiU">sin(2*pi*u) and cos(2*pi*u)</entry>
    <entry key="RTF">RTF</entry>
    <entry key="HTML">HTML</entry>
    <entry key="IsSigned1">IsSigned1</entry>
    <entry key="IsSigned2">IsSigned2</entry>
    <entry key="TRUE">TRUE</entry>
    <entry key="FALSE">FALSE</entry>
    <entry key="NumBits1">NumBits1</entry>
    <entry key="NumBits2">NumBits2</entry>
    <entry key="maxNumBits1NumBits2">max([NumBits1 NumBits2])</entry>
    <entry key="Slope1">Slope1</entry>
    <entry key="Slope2">Slope2</entry>
    <entry key="maxSlope1Slope2">max([Slope1 Slope2])</entry>
    <entry key="Bias1">Bias1</entry>
    <entry key="Bias2">Bias2</entry>
    <entry key="maxBias1Bias2">max([Bias1 Bias2])</entry>
  </message>
</rsccat>
