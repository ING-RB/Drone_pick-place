<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright 2025 The MathWorks, Inc.-->

<rsccat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" locale="zh_CN" product="Simulink" xsi:noNamespaceSchemaLocation="../../resources/schema/msgcat.xsd">
  <message>
    <entry key="CustomCodeParsingFailed">自定义代码解析失败并显示消息: {0}</entry>
    <entry key="Title">代码导入器</entry>
    <entry key="SaveDialogTitle">将代码导入器设置保存到文件</entry>
    <entry key="ConfirmationDialogTitle">Simulink 代码导入器</entry>
    <entry key="ConfirmationDialogMsg">关闭前是否保存导入设置?</entry>
    <entry key="ConfirmationDialogButtonYesLabel">是</entry>
    <entry key="ConfirmationDialogButtonNoLabel">否</entry>
    <entry key="ProjectDialogTitle">指定现有工程文件</entry>
    <entry key="AddToProjectSuccessDlg">添加到工程</entry>
    <entry key="AddToProjectSuccessMsg">已成功添加到工程</entry>
    <entry key="InferHdrConfirmationDlgTitle">自动填充接口头文件</entry>
    <entry key="InferHdrConfirmationDlgMsg">如果继续，将使用自动填充的头替换 ''{0}'' 中先前的值。是否继续?</entry>
    <entry key="InferHdrConfirmationDlgYesLabel">是</entry>
    <entry key="InferHdrConfirmationDlgNoLabel">否</entry>
    <entry key="Topic_Welcome">欢迎使用</entry>
    <entry key="Topic_SimulinkLib">设置</entry>
    <entry key="Topic_ConfigCode">指定自定义代码</entry>
    <entry key="Topic_Analyze">分析</entry>
    <entry key="Topic_WhatToImport">配置</entry>
    <entry key="Topic_Options">选项</entry>
    <entry key="Topic_Finish">导入</entry>
    <entry key="status">状态</entry>
    <entry key="QuestionHelpTitle">要考虑的因素</entry>
    <entry key="OptionHelpTitle">关于所选选项</entry>
    <entry key="back">后退</entry>
    <entry key="next">下一步</entry>
    <entry key="save">保存</entry>
    <entry key="startNew">开始</entry>
    <entry key="loadButton">加载</entry>
    <entry key="finish">完成</entry>
    <entry key="empty_selection">您尚未选择任何内容!</entry>
    <entry key="error">错误</entry>
    <entry key="needNumericValue">请输入一个数值。</entry>
    <entry key="categoryTitle">类别</entry>
    <entry key="parameterTitle">参数</entry>
    <entry key="newValueTitle">新值</entry>
    <entry key="oldValueTitle">旧值</entry>
    <entry key="sbxupdate">更新沙盒</entry>
    <entry key="addtoprjBtn">添加</entry>
    <entry key="addtoprjLabel">将 Simulink 库或模型文件添加到工程? </entry>
    <entry key="inferBtnToolTip">基于指定的源文件自动填充接口头文件</entry>
    <entry key="slInterfaceTableNameColumnLabel">名称</entry>
    <entry key="slInterfaceTableButtonColumnLabel">Simulink 接口</entry>
    <entry key="slInterfaceTableButtonDefInterface">定义</entry>
    <entry key="slInterfaceTableButtonModiInterface">修改</entry>
    <entry key="slInterfaceTableButtonValInterface">验证</entry>
    <entry key="existingBlocksTableNameColumnLabel">名称</entry>
    <entry key="existingBlocksTableBlockColumnLabel">现有导入模块</entry>
    <entry key="slInterfaceQuestionDlgTitle">为 "{0}" 配置 Simulink 接口</entry>
    <entry key="slInterfaceQuestionConstructorLabel">类实例化的构造函数:</entry>
    <entry key="slInterfaceQuestionInitLabel">初始化方法:</entry>
    <entry key="slInterfaceQuestionTermLabel">清理方法:</entry>
    <entry key="slInterfaceQuestionStepLabel">输出代码的方法:</entry>
    <entry key="Question_Start">
                        &lt;center&gt;&lt;b&gt;&lt;u&gt;代码导入器&lt;/u&gt;&lt;/b&gt;&lt;/center&gt;&lt;br/&gt;&lt;br/&gt; &lt;p&gt;您可以使用代码导入器导入自定义代码进行建模、验证和确认。&lt;/p&gt; &lt;br/&gt;&lt;br/&gt; &lt;p&gt;代码导入器: &lt;ul&gt; &lt;li&gt;分析自定义代码中的函数、类、类型、全局变量及其依赖关系。&lt;/li&gt; &lt;li&gt;将自定义代码导入包含可调用函数、类和类型的 Simulink 库或模型中。&lt;/li&gt; &lt;li&gt;创建一个 Simulink Test 文件(需要 Simulink Test 许可证)。&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;</entry>
    <entry key="Question_Start_SLTest">
                        &lt;center&gt;&lt;b&gt;&lt;u&gt;代码导入器&lt;/u&gt;&lt;/b&gt;&lt;/center&gt;&lt;br/&gt;&lt;br/&gt; &lt;p&gt;您可以使用代码导入器导入自定义代码进行建模、验证和确认。&lt;/p&gt; &lt;br/&gt;&lt;br/&gt; &lt;p&gt;代码导入器: &lt;ul&gt; &lt;li&gt;分析自定义代码中的函数、类型、全局变量及其依赖关系。&lt;/li&gt; &lt;li&gt;将自定义代码导入包含可调用函数和类型的 Simulink 库或模型中。&lt;/li&gt; &lt;li&gt;创建一个 Simulink Test 文件。&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;</entry>
    <entry key="Option_Start_New">新建导入</entry>
    <entry key="Option_Start_Existing">加载从以前的导入保存的文件</entry>
    <entry key="Option_Start_SelectFile">选择文件:</entry>
    <entry key="OptionHint_Start_SelectFile">选择从上次的导入保存的文件。</entry>
    <entry key="Option_ConfigCodeImporter_Language">选择要导入的语言:</entry>
    <entry key="Option_ConfigCodeLibrary_ProjectName">库或模型名称: </entry>
    <entry key="OptionHint_ConfigCodeLibrary_ProjectName">指定输出 Simulink 库或模型和工件文件的名称。 </entry>
    <entry key="Option_ConfigCodeLibrary_ProjectFolder">输出文件夹: </entry>
    <entry key="OptionHint_ConfigCodeLibrary_ProjectFolder">指定存储输出 Simulink 库或模型和工件文件的文件夹。 </entry>
    <entry key="Option_ConfigCodeLibrary_LibraryBrowserName">Simulink 库浏览器名称: </entry>
    <entry key="OptionHint_ConfigCodeLibrary_LibraryBrowserName">指定显示在 Simulink 库浏览器中的名称。 </entry>
    <entry key="Option_OptionsCreateSLBlocks_Checkbox">将生成的库添加到 Simulink 库浏览器。</entry>
    <entry key="OptionHint_OptionsCreateSLBlocks_Checkbox">选择此项可将生成的库添加到 Simulink 库浏览器中。</entry>
    <entry key="Question_ConfigCodeImporter"> &lt;b&gt;指定输出 Simulink 库或模型名称和输出文件夹:&lt;/b&gt;
    </entry>
    <entry key="QuestionHint_ConfigCodeImporter"> 库或模型名称: 导入函数或类的 Simulink 库或模型的名称。该名称还用于生成的 Simulink 工件文件。&lt;br/&gt;&lt;br/&gt;输出文件夹: 存储输出 Simulink 库或模型和工件文件的文件夹。如果输出文件夹中不存在指定的库或模型，则系统将在该文件夹中生成新的 Simulink 库。&lt;br/&gt;&lt;br/&gt;
    </entry>
    <entry key="QuestionHint_ConfigCodeImporter_SLTest"> 库或模型名称: 导入函数或类的 Simulink 库或模型的名称。该名称还用于生成的 Simulink 工件文件。&lt;br/&gt;&lt;br/&gt;输出文件夹: 存储输出 Simulink 库或模型和工件文件的文件夹。如果输出文件夹中不存在指定的库或模型，则系统将在该文件夹中生成新 Simulink 库。&lt;br/&gt;&lt;br/&gt;如果您要隔离和测试部分自定义代码，请选择 &lt;b&gt;C 代码单元测试&lt;/b&gt;。&lt;br/&gt;&lt;br/&gt;如果您要测试整个自定义代码，请选择&lt;b&gt;集成测试&lt;/b&gt;。
    </entry>
    <entry key="OutputFolderUnspecified">必须指定输出文件夹。 </entry>
    <entry key="Question_ConfigCodeLibrary">&lt;b&gt;指定自定义代码信息:&lt;/b&gt;</entry>
    <entry key="QuestionHint_ConfigCodeLibrary">&lt;p&gt;对于自定义代码选项，路径必须为完整路径或相对于输出文件夹的路径。&lt;/p&gt; &lt;p&gt;当指定定义时，使用 ';' 分隔多个定义或标志。"-D" 为可选项。&lt;/p&gt; </entry>
    <entry key="QuestionHint_ConfigCodeLibrary_InferHeaders">要基于指定的源文件计算接口头文件，您可以点击 {0} </entry>
    <entry key="Option_ConfigCodeCompiler_Language">语言:</entry>
    <entry key="OptionHint_ConfigCodeCompiler_Language">指定编译和解析自定义代码的语言。</entry>
    <entry key="Option_ConfigCodeCompiler_Defines">定义:</entry>
    <entry key="OptionHint_ConfigCodeCompiler_Defines">指定要添加到编译器命令行的预处理器宏定义。</entry>
    <entry key="Option_ConfigCodeLibrary_SourceFiles">源文件:</entry>
    <entry key="OptionHint_ConfigCodeLibrary_SourceFiles">指定要导入的源文件。</entry>
    <entry key="Option_ConfigCodeLibrary_IncludeFiles">接口头文件:</entry>
    <entry key="OptionHint_ConfigCodeLibrary_IncludeFiles">指定要导入的接口头文件。</entry>
    <entry key="Option_ConfigCodeLibrary_IncludePaths">包含目录:</entry>
    <entry key="OptionHint_ConfigCodeLibrary_IncludePaths">指定包含在编译的目标中包括的文件的文件夹路径列表。</entry>
    <entry key="Option_ConfigCodeLibrary_Libraries">库:</entry>
    <entry key="OptionHint_ConfigCodeLibrary_Libraries">指定包含要链接的自定义目标代码的库列表。</entry>
    <entry key="Option_ConfigCodeLibrary_MetadataFile">元数据文件:</entry>
    <entry key="OptionHint_ConfigCodeLibrary_MetadataFile">指定元数据文件路径。</entry>
    <entry key="Option_ConfigCodeCompiler_CompilerFlags">编译器标志:</entry>
    <entry key="OptionHint_ConfigCodeCompiler_CompilerFlags">指定其他编译器标志。</entry>
    <entry key="Option_ConfigCodeCompiler_LinkerFlags">链接器标志:</entry>
    <entry key="OptionHint_ConfigCodeCompiler_LinkerFlags">指定其他链接器标志。</entry>
    <entry key="Question_ConfigUpdateMode">&lt;b&gt;指定的输出 Simulink 库或模型中的模块已导入下表中列出的 {0}。您可以替换现有模块或导入 {0} 作为新模块:&lt;/b&gt;</entry>
    <entry key="Option_UpdateExisting">替换现有模块</entry>
    <entry key="Option_Overwrite">导入为新模块</entry>
    <entry key="Question_WhatToImportAnalyze">&lt;p&gt;点击&lt;b&gt;下一步&lt;/b&gt;以:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;分析函数、类、类型、全局变量及其依赖关系的自定义代码。&lt;/li&gt;&lt;/ul&gt;</entry>
    <entry key="Question_WhatToImportFunction">&lt;b&gt;选择要导入的函数:&lt;/b&gt;</entry>
    <entry key="QuestionHint_WhatToImportFunction">&lt;p&gt;将为每个所选函数生成 C Caller 模块。&lt;/p&gt; &lt;p&gt;请选择至少一个要导入的函数。&lt;/p&gt;</entry>
    <entry key="Option_WhatToImportFunction_EntryFunctions">仅显示入口函数</entry>
    <entry key="OptionHint_WhatToImportFunction_FunctionNameFilter">按名称查找函数</entry>
    <entry key="Question_PortSpecificationsMapping">&lt;b&gt;编辑之前所选函数的模块端口设定。&lt;/b&gt;</entry>
    <entry key="QuestionHint_PortSpecificationsMapping">&lt;p&gt;除非您另外指定，否则将使用默认端口设定生成 C Caller 模块。&lt;/p&gt;&lt;p&gt;端口设定也可以在输出 Simulink 库或模型的导入 C Caller 模块中进行更新。&lt;/p&gt;</entry>
    <entry key="Question_WhatToImportClass">&lt;b&gt;选择要导入的类:&lt;/b&gt;</entry>
    <entry key="QuestionHint_WhatToImportClass">&lt;p&gt;将为每个所选类生成 C Function 模块。&lt;/p&gt; &lt;p&gt;选择至少一个要导入的类。&lt;/p&gt;</entry>
    <entry key="OptionHint_WhatToImportClass_ClassNameFilter">按名称查找类</entry>
    <entry key="Question_ClassSimulinkInterface">&lt;b&gt;为之前选择的类定义 Simulink 接口。&lt;/b&gt;</entry>
    <entry key="QuestionHint_ClassSimulinkInterface"> &lt;p&gt;点击 '定义接口' 即可启动为该类选择构造函数、方法、编辑端口和参数以及算法脚本的过程。&lt;/p&gt; &lt;p&gt;C Function 模块将通过定义的 Simulink 接口来生成。&lt;/p&gt; &lt;p&gt;Simulink 接口设置也可以在输出 Simulink 库或模型的导入 C Function 模块中进行更新。&lt;/p&gt;</entry>
    <entry key="OptionHint_ClassSimulinkInterface_ClassNameFilter">按名称查找类</entry>
    <entry key="Question_WhatToImportType">&lt;b&gt;选择要导入的类型:&lt;/b&gt;</entry>
    <entry key="QuestionHint_WhatToImportType"> &lt;p&gt;系统会自动选择之前选择的函数或类所需的类型。&lt;/p&gt; &lt;p&gt;所有选定类型都将导入链接到输出 Simulink 库或模型的 Simulink 数据字典。如果没有链接数据字典，则系统将生成新数据字典。&lt;/p&gt;</entry>
    <entry key="Option_WhatToImportType_ImportToFile">将类型导入文件</entry>
    <entry key="OptionHint_WhatToImportType_ImportToFile">选择此选项可将结构体类型导入 ''project_name_types.mat'' 文件中，并将枚举类型导入 MATLAB 类文件中。</entry>
    <entry key="OptionHint_WhatToImportType_TypeNameFilter">按名称查找类型</entry>
    <entry key="Question_OptionsGlobalIO">&lt;b&gt;全局变量作为函数接口:&lt;/b&gt;</entry>
    <entry key="QuestionHint_OptionsGlobalIO">当选择此参数时，函数访问的全局变量将使用自定义代码分析自动推断为函数接口。有关详细信息，请参阅 &lt;a href="matlab:helpview('simulink', 'Tag_ConfigSet_Sim_CustomCodeGlobalsAsFunctionIO')"&gt;{0}&lt;/a&gt;。</entry>
    <entry key="Option_OptionsGlobalIO_Checkbox">自动将全局变量推断为函数接口</entry>
    <entry key="OptionHint_OptionsGlobalIO_Checkbox">如果函数不使用全局变量作为其接口，或希望手动将全局变量设置为函数接口，请取消选择此参数。</entry>
    <entry key="Question_Finish">导入设置的摘要:</entry>
    <entry key="Question_NextStep">&lt;center&gt;&lt;b&gt;&lt;u&gt;代码导入成功&lt;/u&gt;&lt;/b&gt;&lt;/center&gt;&lt;br/&gt;&lt;br/&gt; &lt;p&gt;&lt;b&gt;后续步骤:&lt;/b&gt;&lt;/p&gt;{0}</entry>
    <entry key="OutputFolderCDHyperlink">将 MATLAB 当前文件夹改为输出文件夹。</entry>
    <entry key="OpenLibraryHyperlink">打开 Simulink 库或模型</entry>
    <entry key="Option_ConfigProject_AddToProject"/>
    <entry key="OptionHint_ConfigProject_AddToProject">指定现有工程文件</entry>
    <entry key="Question_ConfigTestType">&lt;b&gt;指定测试方法:&lt;/b&gt;</entry>
    <entry key="Option_ConfigTestType_UnitTest">C 代码单元测试</entry>
    <entry key="OptionHint_ConfigTestType_UnitTest">&lt;p&gt;您选择的选项会从指定的源文件创建一个沙盒。沙盒将由以下文件组成: &lt;ul&gt; &lt;li&gt;接口头文件。&lt;/li&gt; &lt;li&gt;未定义符号的自动桩文件。&lt;/li&gt; &lt;li&gt;手动桩文件，允许手动编辑未定义的符号。&lt;/li&gt; &lt;/ul&gt;&lt;/p&gt;</entry>
    <entry key="Option_ConfigTestType_PackageTest">集成测试</entry>
    <entry key="OptionHint_ConfigTestType_PackageTest">所选选项会导入指定的自定义代码，不会为缺失的符号生成桩件。</entry>
    <entry key="Question_ConfigSandbox">&lt;b&gt;指定输出测试沙盒模式:&lt;/b&gt;</entry>
    <entry key="QuestionHint_ConfigSandbox">&lt;p&gt;选择 &lt;strong&gt;"生成聚合的头文件"&lt;/strong&gt;，为指定的 C 代码源文件生成沙盒，其中包含最小的聚合头文件和未定义符号的桩。此沙盒模式仅支持单个源文件。&lt;/p&gt; &lt;p&gt;选择 &lt;strong&gt;"生成预处理的源文件"&lt;/strong&gt; 以生成沙盒，其中包含预处理的 C 代码和未定义符号的桩件。&lt;/p&gt; &lt;p&gt;选择 &lt;strong&gt;''使用原始源文件''&lt;/strong&gt; 以使用未经修改的原始 C 代码生成沙盒。&lt;/p&gt;</entry>
    <entry key="Option_ConfigSandbox_AggregatedHeader">生成聚合的头文件</entry>
    <entry key="OptionHint_ConfigSandbox_AggregatedHeader">&lt;p&gt;将使用以下设置生成指定的&lt;b&gt;聚合头文件沙盒&lt;/b&gt;&lt;/p&gt;</entry>
    <entry key="Option_ConfigSandbox_PreprocessedSource">生成预处理的源文件</entry>
    <entry key="OptionHint_ConfigSandbox_PreprocessedSource">&lt;p&gt;将使用以下设置生成指定的&lt;b&gt;预处理源文件沙盒&lt;/b&gt;&lt;/p&gt;</entry>
    <entry key="Option_ConfigSandbox_UseOriginalCode">使用原始源文件</entry>
    <entry key="OptionHint_ConfigSandbox_UseOriginalCode">&lt;p&gt;将使用以下设置生成指定的&lt;b&gt;使用原始源文件沙盒&lt;/b&gt;&lt;/p&gt;</entry>
    <entry key="Question_ConfigSandboxSettings">&lt;b&gt;指定输出测试沙盒设置:&lt;/b&gt;</entry>
    <entry key="Option_ConfigSandbox_CopySources">复制源文件</entry>
    <entry key="OptionHint_ConfigSandbox_CopySources">&lt;ul&gt;&lt;li&gt;指定的源文件将复制到输出测试沙盒的 ''src'' 目录中。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</entry>
    <entry key="Option_ConfigSandbox_CopyHeadersSources">复制头文件和源文件</entry>
    <entry key="OptionHint_ConfigSandbox_CopyHeadersSources">&lt;ul&gt;&lt;li&gt;&lt;p&gt;指定的头文件和源文件将分别复制到输出测试沙盒中的 ''include'' 目录和 ''src'' 目录中。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</entry>
    <entry key="Option_ConfigSandbox_RemovePragmas">从聚合的头文件中删除 pragma 指令</entry>
    <entry key="OptionHint_ConfigSandbox_RemovePragmas">&lt;ul&gt;&lt;li&gt;&lt;p&gt;将从聚合的头文件中删除所有 ''#pragmas''。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</entry>
    <entry key="Option_ConfigSandbox_RemovePragmasSource">从预处理的源文件中删除 pragma 指令</entry>
    <entry key="OptionHint_ConfigSandbox_RemovePragmasSource">&lt;ul&gt;&lt;li&gt;&lt;p&gt;将从预处理的源文件中删除所有 ''#pragmas''。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</entry>
    <entry key="Option_ConfigSandbox_RemoveVarDefinition">从聚合的头文件中删除全局变量定义</entry>
    <entry key="OptionHint_ConfigSandbox_RemoveVarDefinition">&lt;ul&gt;&lt;li&gt;&lt;p&gt;所有全局变量定义都将被删除，并替换为聚合的头文件中的外部声明。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</entry>
    <entry key="Question_WhatToImportAnalyzeSandbox">&lt;p&gt;点击&lt;b&gt;下一步&lt;/b&gt;以:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;分析函数、类型、全局变量及其依赖关系的自定义代码。&lt;/li&gt; &lt;li&gt;根据指定的设置生成测试沙盒。&lt;/li&gt; &lt;li&gt;为未定义的符号生成自动桩文件，为手动编辑未定义的符号生成手动桩文件。&lt;/li&gt;&lt;/ul&gt;</entry>
    <entry key="Question_WhatToImportFinishSandbox">测试沙盒已在输出文件夹中创建。{0} &lt;p&gt;&lt;b&gt;生成的工件:&lt;/b&gt;&lt;/p&gt;{1} {2}&lt;br/&gt;&lt;p&gt;如果对手动桩文件进行了更改，请点击&lt;b&gt;更新沙盒&lt;/b&gt;。&lt;br/&gt;注意: 更新沙盒将重新生成自动桩文件。&lt;/p&gt;</entry>
    <entry key="SandboxFolderCDHyperlink">将 MATLAB 当前文件夹更改为沙盒文件夹。</entry>
    <entry key="QuestionHint_WhatToImportFinishSandbox">  &lt;p&gt;自动桩文件: 包含自动插桩的未定义符号的文件。&lt;/p&gt;&lt;br/&gt; &lt;p&gt;手动桩文件: 允许您手动编辑未定义符号的桩文件&lt;/p&gt;&lt;br/&gt; &lt;p&gt;请不要修改以下内容，因为这些文件将始终重新生成:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;自动桩文件&lt;/li&gt; &lt;li&gt;指定的源文件&lt;/li&gt; &lt;li&gt;位于沙盒中的 ''include'' 目录中的头文件。&lt;/li&gt;&lt;/ul&gt;
</entry>
    <entry key="SandboxUpdateErrorUI">沙盒文件已更改。点击 ''更新沙盒'' 以刷新沙盒。</entry>
    <entry key="CustomCodeChangedSandboxUpdateErrorUI">''自定义代码'' 节中指定的自定义代码文件已更改。点击 ''更新沙盒'' 以刷新沙盒。</entry>
    <entry key="AutostubSourceHyperlink">自动桩源文件</entry>
    <entry key="AutostubHeaderHyperlink">自动桩头文件</entry>
    <entry key="ManualstubSourceHyperlink">手动桩源文件</entry>
    <entry key="ManualstubHeaderHyperlink">手动桩头文件</entry>
    <entry key="Question_WhatToImportOverwriteSandbox">&lt;b&gt;指定的输出沙盒已存在。您可以更新现有沙盒或覆盖它。&lt;/b&gt;</entry>
    <entry key="Option_WhatToImportOverwriteSandbox_Update">更新 - 保留对手动桩文件所做的更改</entry>
    <entry key="Option_WhatToImportOverwriteSandbox_Overwrite">覆盖 - 删除现有沙盒并创建一个新沙盒</entry>
    <entry key="Question_CreateTestHarness"> &lt;b&gt;创建测试框架:&lt;/b&gt;</entry>
    <entry key="Option_CreateTestHarness_Auto">为所有导入的函数或类自动创建测试框架</entry>
    <entry key="Option_CreateTestHarness_Skip">跳过</entry>
  </message>
</rsccat>
