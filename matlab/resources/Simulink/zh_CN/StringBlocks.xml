<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright 2025 The MathWorks, Inc.-->

<rsccat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" locale="zh_CN" product="Simulink" xsi:noNamespaceSchemaLocation="../../resources/schema/msgcat.xsd">
  <message>
    <entry key="StringInvalidInputTypeSetting">模块 ''{1}'' 的&lt;sldiag objui="inport" objparam="{0,number,integer}" objname="{1}"&gt;输入端口 {0,number,integer}&lt;/sldiag&gt; 不支持数据类型为 ''{2}'' 的信号。信号的数据类型必须为字符串。</entry>
    <entry key="StringInvalidOutputTypeSetting">&lt;sldiag objui="outport" objparam="{0,number,integer}" objname="{1}"&gt;Output port {0,number,integer}&lt;/sldiag&gt; of block ''{1}'' does not support signals of data type ''{2}''. The signal must be of data type string.</entry>
    <entry key="InvalidNumberofInputs">Block ''{0}'' expects between {1, number, integer} and {2, number, integer} input ports, but currently has {3, number, integer} input ports.</entry>
    <entry key="InvalidNumberofOutputs">Block ''{0}'' expects between {1, number, integer} and {2, number, integer} output ports, but currently has {3, number, integer} output ports.</entry>
    <entry key="InvalidFormatString">The format string ''{0}'' in block ''{1}'' is not valid.</entry>
    <entry key="SL_DSCPT_STRLEN">输出输入字符串中的字符数。</entry>
    <entry key="SL_DSCPT_UINT8TOSTRING">将 uint8 向量转换为字符串信号。在转换过程中，输入向量中的每个元素都被视为 ASCII 值。\n\n例如，输入向量 [72 101 108 108 111] 将转换为字符串 "Hello"。</entry>
    <entry key="SL_DSCPT_STRINGTOUINT8">将字符串信号转换为 uint8 向量。字符串中的每个字符都转换为对应的 ASCII 值。\n\n例如，输入字符串 ''Hello'' 将转换为 [72 101 108 108 111]。</entry>
    <entry key="SL_DSCPT_STR2NUM">将输入字符串转换为双精度信号。</entry>
    <entry key="SL_DSCPT_STR2ENUM">将输入字符串转换为枚举信号。</entry>
    <entry key="NoEnumValueFound">Input string ''{0}'' of block ''{2}'' does not match any enumerated value in enumerated data type ''{1}''.</entry>
    <entry key="SL_DSCPT_STRCMP">比较两个输入字符串。</entry>
    <entry key="SL_DSCPT_SUBSTR">从字符串信号中提取子字符串。子字符串包括从索引 ''idx'' 处的字符开始的 ''len'' 个字符。\n\n如果 ''len'' 导致子字符串超出字符串结尾，则输出信号包含的字符将少于 ''len''。\n\n如果选中 ''输出从 ''idx'' 到结尾的字符串'' 复选框，则子字符串包括从 ''idx'' 处的字符开始到字符串结尾的字符。\n\n例如，如果输入字符串为 "hello 123"，输入 ''idx'' 为 1，输入 ''len'' 为 5，则输出为 "hello"。该模块提取一个子字符串，其中包含在 1 处开始的字符和接下来的 4 个字符，总共 5 个字符(hello)。</entry>
    <entry key="SubstringIndexOutOfRange">In block ''{0}'' the starting index value is out of range. The starting index ('idx') must be between 1 and the length of the input string ({1, number, integer}).</entry>
    <entry key="SL_DSCPT_STRFIND">返回文本字符串 ''str'' 中模式字符串 ''sub'' 的第一个匹配项的索引。\n\n如果模式字符串不是文本字符串的一部分，则返回 -1。</entry>
    <entry key="SL_DSCPT_TOSTRING">将输入信号转换为字符串信号。</entry>
    <entry key="StringCompareCaseSensitive">区分大小写</entry>
    <entry key="StringCompareNumOfChars">字符数:</entry>
    <entry key="StringValue">字符串:</entry>
    <entry key="MaximumLength">输出向量大小:</entry>
    <entry key="SL_DSCPT_STRINGCONSTANT">输出由 ''字符串'' 参数指定的字符串。</entry>
    <entry key="StringBufferOverflow">The string at &lt;sldiag objui="outport" objparam="{0, number, integer}" objname="{1}"&gt;output port {0, number, integer}&lt;/sldiag&gt; of block ''{1}'' has a length of {2, number, integer} characters, which is larger than the maximum length of {3, number, integer} characters specified by the block.</entry>
    <entry key="SubStringMismatchedStringDataTypes">In block ''{0}'', the output data type was already set to {1}, but a data type {2} was propagated.</entry>
    <entry key="SubstringIndexInvalidDataType">In block ''{0}'', &lt;sldiag objui="inport" objparam="2" objname="{0}"&gt;input port 2&lt;/sldiag&gt; must have an integer data type.</entry>
    <entry key="SubstringLengthInvalidDataType">In block ''{0}'', &lt;sldiag objui="inport" objparam="3" objname="{0}"&gt;input port 3&lt;/sldiag&gt; must have an unsigned integer data type.</entry>
    <entry key="NonExtendedASCIIString">模块 ''{0}'' 仅支持扩展 ASCII 字符(ISO-8859-1)。参数 ''{1}'' 包含不支持的字符。</entry>
    <entry key="ParamValueExceedMaxStringLength">模块 ''{1}'' 的参数 ''{0}'' 的值为 {2}。字符串中的最大字符数必须为 {3} 或更少。</entry>
    <entry key="VectorSizeExceedMaxStringLength">模块 ''{1}'' 的输入向量大小 {0} 超出字符串中的最大字符数。字符串中的最大字符数必须为 {2} 或更少。</entry>
    <entry key="StringLengthOverFlow">Error in ''{0}'': Number of characters in ''{1}'' exceeds {2, number, integer}.</entry>
    <entry key="SL_PARAM_COMPLEXITY">复/实性: </entry>
    <entry key="InvalidComplexOutput">输出应为实数。</entry>
    <entry key="SL_DSCPT_FORMATSTRING">根据 "格式" 参数和输入信号组成输出字符串信号。''格式'' 参数决定输入信号的数量。\n\n例如，如果 ''格式'' 参数设置为 "%s 为 %f。"，则模块需要两个输入，即一个字符串信号和一个单精度或双精度信号。如果第一个输入是字符串 "Pi"，第二个输入是双精度值 3.14，则输出将是 "Pi 是 3.14。"</entry>
    <entry key="SL_DSCPT_SCANSTRING">扫描输入字符串，并根据 ''格式'' 参数指定的格式将其转换为信号。将结果输出为数值或字符串信号。\n\n例如，如果 ''格式'' 参数设置为 "%s 是 %f。"，则模块输出两个部分，即一个字符串信号和一个单精度信号。如果输入是字符串 "Pi 是 3.14"，则两个输出将是 "Pi" 和 "3.14"。</entry>
    <entry key="SL_DSCPT_STRCAT">串联各个输入字符串以形成一个输出字符串。</entry>
    <entry key="SL_PARAM_INPUTFORMAT">格式:</entry>
    <entry key="InvalidInputDataType">模块 ''{1}'' 的&lt;sldiag objui="inport" objparam="{0, number, integer}" objname="{1}"&gt;输入端口 {0, number, integer}&lt;/sldiag&gt; 不支持数据类型为 ''{2}'' 的信号。输入端口需要数据类型为 ''{3}'' 的信号。</entry>
    <entry key="InvalidInputDataTypeFloat">&lt;sldiag objui="inport" objparam="{0, number, integer}" objname="{1}"&gt;Input port {0, number, integer}&lt;/sldiag&gt; of block ''{1}'' does not support a signal of data type ''{2}''. The input port expects a signal of data type ''single'' or ''double''.</entry>
    <entry key="InvalidInputDataTypeInteger">模块 ''{1}'' 的&lt;sldiag objui="inport" objparam="{0, number, integer}" objname="{1}"&gt;输入端口 {0, number, integer}&lt;/sldiag&gt; 不支持数据类型为 ''{2}'' 的信号。请考虑对此输入端口使用数据类型 ''{3}''。</entry>
    <entry key="InvalidInputDataTypeUnsupportedInteger">&lt;sldiag objui="inport" objparam="{0, number, integer}" objname="{1}"&gt;Input port {0, number, integer}&lt;/sldiag&gt; of block ''{1}'' does not support format specifier ''{2}''. An integer format specifier must match an integer type in the Hardware Implementation device detail settings with 8, 16, 32, or 64 number of bits.</entry>
    <entry key="InvParameterDatatypeNotSupportString">String data type, specified in parameter ''{0}'', is not supported for block ''{1}''.</entry>
    <entry key="InvalidInputDataTypeString">&lt;sldiag objui="inport" objparam="{0, number, integer}" objname="{1}"&gt;Input port {0, number, integer}&lt;/sldiag&gt; of block ''{1}'' does not support a signal of data type ''{2}''. The input port expects a signal of data type ''string''.</entry>
    <entry key="OnlyScalarString">Parameter ''{0}'' of block ''{1}'' only accepts scalar string value. Simulink has no support for array of strings yet.</entry>
    <entry key="ParameterValueIsNotString">模块 ''{1}'' 的参数 ''{0}'' 只接受字符串值。表达式 ''{2}'' 的计算值不是字符串。</entry>
    <entry key="CompareAll">整个字符串</entry>
    <entry key="CompareFirstN">前 N 个字符</entry>
    <entry key="Compare_Option">比较选项:</entry>
    <entry key="InheritMaximumLength">从输入中继承最大长度</entry>
    <entry key="StringFromIdxToEnd">输出从 ''idx'' 到结尾的字符串</entry>
    <entry key="ScanNotAllOutputsWritten">In block ''{0}'' the input string signal does not match the ''Format'' parameter. {1,number,integer} of the {2,number,integer} output ports were successfully assigned.</entry>
    <entry key="ScanStringInvalidIntegerType">At &lt;sldiag objui="outport" objparam="{0,number,integer}" objname="{1}"&gt;output port {0,number,integer}&lt;/sldiag&gt; of block ''{1}'', the ''{2}'' specifier is not supported with a target integer width of {3,number,integer} bits. Only integer widths of 16, 32, and 64 bits are supported. Consider using a different length specifier.</entry>
    <entry key="NoC89SupportForBlock">Failed to generate C code for block {0}. A common solution is to set ''Language standard'' to ''C99 (ISO)''.
      &lt;actions exclusiveFixIts="yes"&gt;
         &lt;action type="fixit"&gt;
           &lt;cmd&gt;configset.internal.fixIt(''{0}'',''TargetLangStandard'',''C99 (ISO)'')&lt;/cmd&gt;
           &lt;txt&gt;Select the ''C99 (ISO)'' &lt;sldiag objui="configset" objparam="TargetLangStandard"&gt;Language standard&lt;/sldiag&gt;.&lt;/txt&gt;
         &lt;/action&gt;
      &lt;/actions&gt;
    </entry>
    <entry key="InvStringSignalAsBusElement"> Element ''{0}'', of ''{1}'', is a string data type that is invalid: </entry>
    <entry key="InvPrmSettingWithStringType">Invalid setting in block ''{0}'' for parameter ''{1}'' when output data type is string.</entry>
    <entry key="RapidAccelNotSupported"> Rapid accelerator simulation is not supported when the model contains Simulink string data type. </entry>
    <entry key="RapidAccelCmdSimNotSupported">Rapid accelerator simulation from the MATLAB command line (''sim'' function) is not supported when the model contains Simulink string data type. Instead, simulate the model from Simulink Editor.</entry>
    <entry key="ExtModeSimNotSupported"> External mode simulation is not supported when the model contains Simulink string data type. </entry>
    <entry key="AsciiToStringOverflowTruncation"> The input vector of ''{0}'' requires a buffer size of  ''{1, number, integer}'' bytes to store all characters, and a null terminator at the end. This required buffer size exceeds the buffer size (''{2,number, integer}'' bytes) of the dynamic string specified by the configuration parameter “Buffer size of dynamically-sized string”. For generated code, the ASCII To String block truncates the string output to fit the buffer of ''{3,number, integer}'' bytes. To avoid truncation, consider increasing the string buffer size. </entry>
    <entry key="Contains">包含</entry>
    <entry key="StartsWith">开头为</entry>
    <entry key="EndsWith">结尾为</entry>
    <entry key="ContainsDescription">确定一个字符串(str)是否包含、开始于或结束于某个模式(sub)。</entry>
    <entry key="CountDescription">计算字符串(str)中模式(sub)的出现次数。计数时只计算非重叠的实例。如果模式的两个实例重叠，则该重叠仅计算一次。</entry>
    <entry key="Count">计数</entry>
    <entry key="ContainsFunction">函数: </entry>
    <entry key="OutputOverflowError">The output of block ''{0}'' at port {1,number,integer} is {2,number,integer} and overflows its current data type ''{3}''. Consider another output data type that can fit the value of the output. </entry>
    <entry key="TargetDataTypeNotInSupportedList">Output signal of block ''{0}'' drives signal of data type ''{1}''. Output data type of this block must be ''{2}''.</entry>
    <entry key="UnsupportedCPPStringInBus">Delay block ''{0}'' does not support bus with string elements when 'Show enable port' is selected and string is generated as C++ std::string.</entry>
    <entry key="StringStripCharNotEqualOne">Invalid ''Character'' setting in ''{0}'': ''{1}'' contains multiple characters. The removal of more than one character is not supported.</entry>
    <entry key="StripLeft">从左侧删除</entry>
    <entry key="StripRight">从右侧删除</entry>
    <entry key="StripBoth">从左侧和右侧删除</entry>
    <entry key="StripChar_Options">要去除的字符</entry>
    <entry key="StripCharValue">字符</entry>
    <entry key="StripWhiteSpace">空白、制表符、换行符</entry>
    <entry key="ReplaceDescription">用新子字符串替换所有出现的旧子字符串</entry>
    <entry key="Replace">替换</entry>
    <entry key="Erase">擦除</entry>
    <entry key="ReplaceBetweenDescription">用 newStr 中的文本替换 str 中的子字符串。被替换的子字符串出现在子字符串 startStr 和 endStr 之间。或者，替换 str 中出现在位置 startPos 和 endPos 之间的子字符串</entry>
    <entry key="ReplaceBetween">按范围替换</entry>
    <entry key="EraseBetween">按范围擦除</entry>
    <entry key="RangeTypeSubstring">所有开始和结束子字符串对组</entry>
    <entry key="RangeTypeIndex">开始和结束索引</entry>
    <entry key="RangeType">范围:</entry>
    <entry key="Boundary">包含</entry>
    <entry key="ReplaceBetweenStartIndexOOR">Input value of start index ({1,number,integer}) of block ''{0}'' must be no smaller than 0 for exclusive setting and no smaller than 1 for inclusive setting.</entry>
    <entry key="ReplaceBetweenEndIndexOOR">Length of input string is {1,number,integer} in block ''{0}''. Input value of end index ({2,number,integer}) must be no greater than {1,number,integer} for inclusive setting and no greater than {3,number,integer} for exclusive setting.</entry>
    <entry key="ReplaceBetweenInconsistentStartEndIndex">Invalid combination of start index ({1,number,integer}) and end index ({2,number,integer}) for block ''{0}''.</entry>
    <entry key="ReplaceBetweenUnsupportedIndexTypeIndex">Input port {1,number,integer} of block ''{0}'' must have 8-, 16- or 32-bit integer type.</entry>
    <entry key="MaxNumCharacters">最大字符数:</entry>
  </message>
</rsccat>
