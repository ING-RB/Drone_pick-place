<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright 2025 The MathWorks, Inc.-->

<rsccat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" locale="zh_CN" product="Simulink" xsi:noNamespaceSchemaLocation="../../resources/schema/msgcat.xsd">
  <message>
    <entry key="SL_DSCPT_DATETIMECLOCKREADER">输出所选 DateTime Clock 模块的仿真日历日期和时间。</entry>
    <entry key="SL_DSCPT_DATETIMECLOCK">将当前日历日期和时间作为日期时间数据类型进行计算。指定时间点和存储数据类型等特性。</entry>
    <entry key="SL_DSCPT_DATETIMETYPECONVERTER">转换日期时间信号的时间点和/或存储数据类型。\n\n要在时间标准之间进行转换，请使用 DateTime Time Standard Converter 模块。</entry>
    <entry key="SL_DSCPT_DATETIMEFORMATTER"> 将日历时间或日期时间信号转换为字符串，其格式由 ''格式'' 参数指定。</entry>
    <entry key="SL_DSCPT_DATETIMETOEPOCHTIME">提取信号线的值并以日期时间信号的存储数据类型输出。</entry>
    <entry key="SL_DSCPT_DATETIMETOCALENDAR">输出 DateTime 信号的年(y)、月(M)、日(d)、小时(H)、分钟(m)和秒(s)。</entry>
    <entry key="SL_DSCPT_EPOCHTIMETODATETIME">提取信号线的值并以 ''输出数据类型'' 参数中指定的日期时间数据类型输出。</entry>
    <entry key="SL_DSCPT_TIMESTANDARDCONVERTER"> 转换日期时间信号的时间标准。\n\n要在时间点和/或存储数据类型之间进行转换，请使用 DateTime Data Type Converter 模块。</entry>
    <entry key="InvalidTimeEpoch">The supported range for ''{0}'' is between ''{1}'' and ''{2}'', but the specified epoch is ''{3}'', which is invalid.</entry>
    <entry key="InvalidTimeRange">The supported range for time system ''{0}'' is between ''{1}'' and ''{2}'', but the specified range is between ''{3}'' and ''{4}'', which is invalid.</entry>
    <entry key="InvalidRange">时间范围的最小值必须小于最大值。</entry>
    <entry key="OutOfRangeTimeConversion">不支持将日期 ''{0}'' 从时间系统 ''{1}'' 转换为 ''{2}''，因为目标时间系统的有效范围在 ''{3}'' 和 ''{4}'' 之间。</entry>
    <entry key="InvalidTimeValue">时间值必须为具有六个元素的双精度向量 [year, month, day, hour, minute, second]。year、month、day、hour、minute 必须为整数。second 必须为十进制数。</entry>
    <entry key="InvalidStartDateTimeValue">模块 {0} 中的开始日期时间值必须为包含六个元素的双精度向量，即 [year, month, day, hour, minute, second]。year、month、day、hour、minute 必须为整数。second 必须为十进制数。</entry>
    <entry key="BlockDoesNotSupportBusInputContainingDateTime">模块 ''{1}'' 的&lt;sldiag objui="inport" objparam="{0,number,integer}" objname="{1}"&gt;输入端口 {0,number,integer}&lt;/sldiag&gt; 不支持包含日期时间类型的总线信号。有关支持的数据类型列表，请参阅模块文档页。</entry>
    <entry key="BlockDoesNotSupportDateTimeInput">模块 ''{1}'' 的&lt;sldiag objui="inport" objparam="{0,number,integer}" objname="{1}"&gt;输入端口 {0,number,integer}&lt;/sldiag&gt; 不支持日期时间数据类型的信号。有关支持的数据类型列表，请参阅模块文档页。</entry>
    <entry key="BlockDoesNotSupportDateTimeOutput">模块 ''{1}'' 的&lt;sldiag objui="outport" objparam="{0,number,integer}" objname="{1}"&gt;输出端口 {0,number,integer}&lt;/sldiag&gt; 不支持日期时间数据类型的信号。有关支持的数据类型列表，请参阅模块文档页。</entry>
    <entry key="DateTimeClockInternalErrorReferencedBlockNotFound">在 ''{0}'' 模块中，找不到指定的模块 ''{1}''。''{1}'' 必须为相对于模块 ''{0}'' 的有效模块路径。请使用 ''/'' 向下遍历层次结构。</entry>
    <entry key="ModelConfigIncorrectFormat">Invalid date and time specified for model configuration parameter ''DateTime at simulation time zero''. Enter a real double array of size six: [YYYY MM DD HH MM SS].</entry>
    <entry key="DateTimeClockModelConfigIncorrectFormat">使用 DateTimeClock 模块 ''{0}'' 时，为模型配置参数 ''在仿真时间零处的日期时间'' 指定的日期和时间无效。请输入大小为 6 的双精度实数数组: [YYYY MM DD HH MM SS]。</entry>
    <entry key="ModelConfigIncorrectValue">Invalid date and time specified for model configuration parameter ''DateTime at simulation time zero''.</entry>
    <entry key="BadTAIModelConfig">TAI 时间戳无效。允许的最早时间戳是 1972-01-01T00:00:10。</entry>
    <entry key="BadYearModelConfig">年份无效。值必须为 1972 和 9999 之间的整数。</entry>
    <entry key="BadYear">年份无效。值必须为 1400 和 9999 之间的整数。</entry>
    <entry key="BadMonth">月份无效。值必须为 1 和 12 之间的整数。</entry>
    <entry key="BadDayOfMonth">月中日期无效。值必须为介于 1 和(28,29,30,31)之间的整数，具体取决于月份和年份。</entry>
    <entry key="BadHour">小时值无效。值必须为 0 和 23 之间的整数。</entry>
    <entry key="BadMinute">分钟值无效。值必须为 0 和 59 之间的整数。</entry>
    <entry key="BadSecond">Invalid second. Value must be a real number that is at least 0 and less than 60.</entry>
    <entry key="BadSecondUTC">秒值无效。值必须为至少为 0 且小于 61 的实数。</entry>
    <entry key="BadLeapSecond">闰秒时间戳无效。如果秒值在范围 [60, 61) 内，则时间必须为 6 月 30 日或 12 月 31 日的 23:59。</entry>
    <entry key="BadLeapSecondBoolTimeStandard">闰秒标志无效。如果时间标准为 ''UTC''，则日期时间信号只能与闰秒布尔值一起打包。</entry>
    <entry key="BadLeapSecondBoolTimestamp">闰秒标志无效。如果日期时间信号标记为闰秒，则时间必须在 6 月 30 日或 12 月 31 日的 [23:59:60, 23:59:61) 范围内。</entry>
    <entry key="BlockSignalInvalidDateTime">模块 ''{1}'' 的输入端口 {0,number,integer} 处的日期时间信号无效。</entry>
    <entry key="DateTimeClockStorageDataTypeTooSmall">在模块 ''{0}'' 中选择的存储数据类型太小，无法表示为模型配置参数 ''仿真时间为零时的日期时间'' 指定的日期时间值。</entry>
    <entry key="DateTimeClockRollOver">由于 DateTime 值超出模块 ''{0}'' 中存储数据类型表示的范围，因此发生了时钟转进。</entry>
    <entry key="DateTimeStorageRollOver"> 日期时间存储值已饱和，模块 ''{0}'' 中发生翻转。</entry>
    <entry key="MultipleFractionalSecondTokens">格式 ''{0}'' 包含多个小数秒设定符(''S'')。一个日期时间格式只能有一个小数秒设定符。</entry>
    <entry key="InvalidDayOfWeekToken">格式 ''{0}'' 包含无效的星期几设定符(''e'')。星期几设定符必须为 ''e''、''ee''、''eee''、''eeee'' 或 ''eeeee''。</entry>
    <entry key="InvalidFormatChar">格式 ''{0}'' 包含不受支持的符号: ''{1}''。要以某种格式打印字母 A-Z 或 a-z，请用单引号将它们引起来。</entry>
    <entry key="BlockInvalidFormat">Invalid custom format ''{1}'' in block ''{0}''.</entry>
    <entry key="DateTimeObjectInvalidFormat">格式 ''{0}'' 无效。</entry>
    <entry key="NoTimeStandardAvailable">模块 ''{0}'' 中的格式 ''{1}'' 需要时间标准。请将输入模式更改为 ''日期时间''，或选择没有 ''t'' 格式设定符的格式。</entry>
    <entry key="InputMustBeDateTime">Signal at &lt;sldiag objui="inport" objparam="{0,number,integer}" objname="{1}"&gt;input port {0,number,integer}&lt;/sldiag&gt; of block ''{1}'' must be of data type DateTime.</entry>
    <entry key="OutputMustBeDateTime">模块 ''{1}'' 的&lt;sldiag objui="outport" objparam="{0,number,integer}" objname="{1}"&gt;输出端口 {0,number,integer}&lt;/sldiag&gt; 处的信号必须为日期时间数据类型。</entry>
    <entry key="PortValidityDateTimeFieldDataTypeErrorMessage">端口的数据类型必须为 double、single、int8、uint8、int16、uint16、int32、uint32、int64 或 uint64。但是，端口数据类型为 {0}。</entry>
    <entry key="DoesNotSupportTimeStandardConversion"> 在模块 ''{0}'' 中，不支持不同时间标准之间的转换。该模块仅支持从一个时间点转换为另一个时间点或从一种存储数据类型转换为另一种存储数据类型。</entry>
    <entry key="IncorrectInputTimeStandard">模块 ''{0}'' 需要时间标准为 ''{1}'' 的输入 DateTime 信号和时间标准为 ''{2}'' 的输出 DateTime 信号。但是，&lt;sldiag objui="inport" objparam="{3,number,integer}" objname="{0}"&gt;输入端口 {3,number,integer}&lt;/sldiag&gt; 处的信号的时间标准为 ''{4}''。</entry>
    <entry key="IncorrectOutputTimeStandard">模块 ''{0}'' 需要时间标准为 ''{1}'' 的输入 DateTime 信号和时间标准为 ''{2}'' 的输出 DateTime 信号。但是，&lt;sldiag objui="outport" objparam="{3,number,integer}" objname="{0}"&gt;输出端口 {3,number,integer}&lt;/sldiag&gt; 处的信号的时间标准为 ''{4}''。</entry>
    <entry key="TimestampIsNegativeLeapSecond">时间戳无效，因为它表示的是负闰秒。</entry>
    <entry key="BlockInvalidTimeStandardConversion">模块 ''{0}'' 中的时间标准转换无效。</entry>
    <entry key="BlockInputNonUTCWithBusSignal">在模块 ''{0}'' 中，如果输入的时间标准不是 ''UTC''，则输入必须为非总线信号。</entry>
    <entry key="BlockInputUTCWithNonBusSignal">在模块 ''{0}'' 中，如果输入的时间标准是 ''UTC''，则输入必须为具有两个元素的虚拟总线。</entry>
    <entry key="BlockOutputNonUTCWithBusSignal">在模块 ''{0}'' 中，如果输出的时间标准不是 ''UTC''，则输出必须为非总线信号。</entry>
    <entry key="BlockOutputUTCWithNonBusSignal">在模块 ''{0}'' 中，如果输出的时间标准是 ''UTC''，则输出必须为具有两个元素的虚拟总线。</entry>
    <entry key="DateTimeInputPort2Boolean"> 模块 ''{0}'' 的输入端口 2 上的数据类型必须为布尔型。</entry>
    <entry key="DateTimeOutputPort2Boolean"> 模块 ''{0}'' 的输出端口 2 上的数据类型必须为布尔型。</entry>
    <entry key="EpochTimeToDateTimeStorageDtMismatch">输入信号数据类型必须与模块 ''{0}'' 中的 ''输出数据类型'' 中指定的 ''StorageDataType'' 匹配。</entry>
    <entry key="EpochTimeToDateTimeNonUTCWithBusSignal">In block ''{0}'', the input must be a nonbus signal if the time standard of the output is not ''UTC''.</entry>
    <entry key="EpochTimeToDateTimeUTCWithNonBusSignal">在模块 ''{0}'' 中，如果输出的时间标准是 ''UTC''，则输入必须为具有两个元素的虚拟总线。</entry>
    <entry key="TimePointMode">时间点:</entry>
    <entry key="TimePointModeUNIX">自 Unix 纪元以来的秒数</entry>
    <entry key="TimePointModeNTP">自 NTP 纪元以来的秒数</entry>
    <entry key="TimePointModeTAI">自 TAI 纪元以来的秒数</entry>
    <entry key="TimePointModeJulian">儒略日期</entry>
    <entry key="TimePointModeMJD">修正儒略日期</entry>
    <entry key="TimePointModeJ2000">J2000.0 日期</entry>
    <entry key="Epoch">纪元:</entry>
    <entry key="TimeStandard">时间标准:</entry>
    <entry key="TimeStandardConversion">时间标准转换:</entry>
    <entry key="StorageDataType">存储数据类型:</entry>
    <entry key="DiagnosticForClockRollOver">时钟翻转的诊断:</entry>
    <entry key="ClockName">日期时间时钟名称:</entry>
    <entry key="StartDateTimeSource">开始日期和时间源:</entry>
    <entry key="StartTimeFromConfigParam">从模型继承</entry>
    <entry key="StartTimeFromEditBox">指定起始值</entry>
    <entry key="DTCBlockStartDateTime">起始值:</entry>
    <entry key="DateTimeClockReference">日期时间时钟参考</entry>
    <entry key="DateTimeClockBlockName">日期时间时钟名称:</entry>
    <entry key="ShowLeapSecondPort">显示闰秒端口</entry>
    <entry key="ShowLeapSecondPorts">显示闰秒端口</entry>
    <entry key="UseLeapSecondTable">使用闰秒表</entry>
    <entry key="LeapSecondTable">闰秒表</entry>
    <entry key="AccumulatedLeapSeconds">累积闰秒:</entry>
    <entry key="DateTimeClockSpecificationTab">设定</entry>
    <entry key="DateTimeClockTimeStandardTab">时间标准</entry>
    <entry key="DateTimeFormatterFormat">格式:</entry>
    <entry key="DateTimeFormatterInputMode">输入模式:</entry>
    <entry key="FormatCustom">自定义</entry>
    <entry key="InputModeDateTime">日期时间</entry>
    <entry key="InputModeCalendar">日历时间</entry>
    <entry key="OutputDayOfWeek">输出星期几</entry>
    <entry key="OutputYearTypePrompt">年份数据类型:</entry>
    <entry key="OutputMonthTypePrompt">月数据类型:</entry>
    <entry key="OutputDayTypePrompt">日数据类型:</entry>
    <entry key="OutputHourTypePrompt">小时数据类型:</entry>
    <entry key="OutputMinuteTypePrompt">分钟数据类型:</entry>
    <entry key="OutputSecondTypePrompt">秒数据类型:</entry>
    <entry key="OutputDayOfWeekTypePrompt">星期几数据类型:</entry>
    <entry key="DTClockBlockNotFound">找不到名为 ''{0}'' 的 DateTimeClock 模块。</entry>
    <entry key="DTClockBlockNameInvalidName">在 ''{0}'' 中指定的 DateTimeClock 模块名称无效。有效的标识符以字母开头，不包含空格或特殊字符，最长为 {1,number,integer} 个字符。</entry>
    <entry key="ScopedDTAttribMismatch1">DateTime Clock 模块 ''{0}'' 和 ''{1}'' 必须指定相同的信号属性，因为它们指定相同的时钟名称 ''{2}''，并且 ''{1}'' 的 DateTime Clock 参考参数处于选中状态。</entry>
    <entry key="ScopedDTRTW">DateTime Clock 参考不支持代码生成。</entry>
    <entry key="ScopedDTAttribMismatch2">DateTime Clock 模块 ''{0}'' 和 ''{1}'' 必须指定相同的信号属性，因为这两个模块指定相同的时钟名称 ''{2}''，并且它们的 DateTime Clock 参考参数都处于选中状态。</entry>
    <entry key="ScopedDTDataTypeMismatch">''{0}'' 和 ''{1}'' 分别将数据类型设置为 ''{2}'' 和 ''{3}''。</entry>
    <entry key="BlockInputVirtBusNotTwoElements">连接到模块 ''{1}'' 的&lt;sldiag objui="inport" objparam="{0,number,integer}" objname="{1}"&gt;输入端口 {0,number,integer}&lt;/sldiag&gt; 的总线必须包含两个信号。</entry>
    <entry key="BlockInputVirtBusHasBusElements">模块 ''{1}'' 的&lt;sldiag objui="inport" objparam="{0,number,integer}" objname="{1}"&gt;输入端口 {0,number,integer}&lt;/sldiag&gt; 必须包含由两个非总线信号组成的总线。</entry>
    <entry key="TimeUnitEpochMismatch">''{0}'' and ''{1}'' is an invalid time unit-epoch pair. The time unit ''s'' (Seconds since epoch) requires an epoch of ''u'' (Unix), ''n'' (NTP), or ''t'' (TAI), and the time unit ''j'' (Julian days since epoch) requires an epoch of ''j'' (Julian), ''m'' (Modified Julian), or ''2'' (J2000.0).</entry>
    <entry key="JulianDayTUOnlySupportDoubleSDT">存储数据类型 ''{1}'' 无效。当时间点为 ''{0}'' 时，请将存储数据类型设置为 ''double''。</entry>
    <entry key="TDBTSOnlySupportJulianDayTU">Invalid time point: ''{0}''. When time standard is ''TDB'', set time point to ''Julian date'', ''Modified Julian date'', or ''J2000.0 date''.</entry>
    <entry key="TDBTSOnlySupportDoubleSDT">存储数据类型 ''{0}'' 无效。当时间标准为 ''TDB'' 时，请将存储数据类型设置为 ''double''。</entry>
    <entry key="TTTSOnlySupportNonIntegerSDT">存储数据类型 ''{0}'' 无效。当时间标准为 ''TT'' 时，请将存储数据类型设置为 ''double'' 或定点类型。</entry>
    <entry key="InvalidDateTimeTypeNumConstructorArgs">DateTimeType 构造函数的参量数目 {0,number,integer} 无效。支持的构造函数有 Simulink.DateTimeType() 和 Simulink.DateTimeType(''TimePoint'', ModeOption, ''StorageDataType'', ModeOption, ''TimeStandard'', ModeOption)，其名称-值对组可采用任何顺序。</entry>
    <entry key="InconsistentObjectTimePointMode">数组索引 ''{0}'' 处的 ''TimePoint'' 属性不匹配。所有要串联的对象必须具有相同的 ''TimePoint''、''StorageDataType''、''TimeStandard'' 和 ''Format'' 属性。</entry>
    <entry key="InconsistentObjectStorageDataType">A mismatch occurs for ''StorageDataType'' property at array index ''{0}''. All objects to be concatenated must have the same ''TimePoint'', ''StorageDataType'', ''TimeStandard'', and ''Format'' properties.</entry>
    <entry key="InconsistentObjectTimeStandard">数组索引 ''{0}'' 处的 ''TimeStandard'' 属性不匹配。所有要串联的对象必须具有相同的 ''TimePoint''、''StorageDataType''、''TimeStandard'' 和 ''Format'' 属性。</entry>
    <entry key="InconsistentObjectFormat">数组索引 ''{0}'' 处的 ''Format'' 属性不匹配。所有要串联的对象必须具有相同的 ''TimePoint''、''StorageDataType''、''TimeStandard'' 和 ''Format'' 属性。</entry>
    <entry key="InvalidDateTimeTypeName">Invalid DateTime data type name. Names must be of the form ''datetime_[TIMEUNIT][EPOCH][TIMESTANDARD]_[STORAGEDATATYPE]'', where TIMEUNIT must be one of ''s'', or ''j''; EPOCH must be one of ''u'', ''n'', ''t'', ''j'', ''m'', or ''2''; TIMESTANDARD must be one of ''t'', ''u'', ''d'', or ''b''; and STORAGEDATATYPE must be one of ''double'', ''int32'', ''uint32'', ''sfix64_En32'', ''ufix64_En32'', ''sfix128_En64'', or ''ufix128_En64''.</entry>
    <entry key="InvalidDateTimeNumConstructorArgs">Simulink.DateTime 构造函数的参量数目 {0,number,integer} 无效。支持的构造函数有 Simulink.DateTime()、Simulink.DateTime(Value) 和 Simulink.DateTime(Value, ''TimePoint'', ModeOption, ''StorageDataType'', ModeOption, ''TimeStandard'', ModeOption)，其名称-值对组可采用任何顺序。</entry>
    <entry key="InvalidDateTimeNumArgsFromStoredInteger">Simulink.DateTime.fromStoredInteger 方法的参量数目 {0,number,integer} 无效。支持的格式有 Simulink.DateTime.fromStoredInteger(value) 和 Simulink.DateTime.fromStoredInteger(Value, ''TimePoint'', ModeOption, ''StorageDataType'', ModeOption, ''TimeStandard'', ModeOption)，其名称-值对组可采用任何顺序。</entry>
    <entry key="InvalidDateTimeValue">Invalid DateTime value. Value must be a real [1x6] double.</entry>
    <entry key="InvalidDateTimeFormatAttributes">格式无效。值必须为实数标量字符串。</entry>
    <entry key="InvalidTimeSinceEpochAttributes">TimeSinceEpochValue 属性无效。值必须为实数标量或由 double、int32、uint32、int64 或 uint64 值组成的实数 [2×1] 向量。</entry>
    <entry key="InvalidTimeSinceEpochDataType"> ''TimeSinceEpochValue'' 的数据类型必须与 ''StorageDataType'' 的容器类型匹配。</entry>
    <entry key="InvalidTimeSinceEpochDimension">''StorageDataType'' 的 TimeSinceEpochValue 值维度无效。fixdt(x,128,64) 的 ''StorageDataType'' 必须为由 64 位数值组成的 2×1 向量 TimeSinceEpochValue，而所有其他 ''StorageDataType'' 数据类型必须为标量 TimeSinceEpochValue。</entry>
    <entry key="LeapSecondTableIncorrectCols"> 在模块 ''{0}'' 中，''闰秒表'' 参数列的数目为 {1,number,integer}。''闰秒表'' 参数的列数必须为 3。</entry>
    <entry key="LeapSecondTableIncorrectRows">在模块 ''{0}'' 中，闰秒表中的行数为 {1,number,integer}。为了考虑已知的闰秒，''闰秒表'' 参数的行数必须等于或大于 26。</entry>
    <entry key="LeapSecondTableIncorrectData">模块 ''{0}'' 具有不正确的 ''闰秒表'' 参数值。在 2016 年之前，这些值必须与已知的闰秒表匹配。</entry>
    <entry key="LeapSecondTableYearOutOfRange"> 闰秒表中第 {2,number,integer} 行上的值({1,number,integer})无效。在模块 ''{0}'' 中，''闰秒表'' 参数的 ''年'' 值必须介于 2017 和 9999 之间。</entry>
    <entry key="LeapSecondTableSecondInvalid"> 闰秒表中第 {2,number,integer} 行上的值({1,number,integer})无效。在模块 ''{0}'' 中，''闰秒表'' 参数的 ''秒'' 值必须为 -1、0 或 1。</entry>
    <entry key="LeapSecondTableYearRepeated">在模块 ''{0}'' 中，不支持重复的 ''闰秒表'' 参数 ''年'' 值。指定的第一个重复年份是 {1,number,integer}。</entry>
    <entry key="AccumulatedLeapSecondLimit">在模块 ''{0}'' 中，参数值 {1,number,integer} 无效。''累积的闰秒'' 参数值必须介于 0 和 16,056 之间。</entry>
    <entry key="LeapSecondTableYearNotSorted">在模块 ''{0}'' 中，''闰秒表'' 列 ''年'' 中的值必须按升序排序。</entry>
    <entry key="LeapSecondTableVarIncorrectCols">在模块 ''{0}'' 中，''闰秒表'' 参数中使用的 ''{1}'' 的列数必须为 3。</entry>
    <entry key="LeapSecondTableVarIncorrectRows">在模块 ''{0}'' 中，''闰秒表'' 参数中使用的 ''{1}'' 的行数必须等于或大于 26，以考虑到 2016 年之前的已知闰秒值。</entry>
    <entry key="LeapSecondTableVarIncorrectData">在模块 ''{0}'' 中，''闰秒表'' 参数中使用的 ''{1}'' 的值不正确。在 2016 年之前，该值必须与闰秒表匹配。有关详细信息，请参阅文档。</entry>
    <entry key="LeapSecondTableVarYearOutOfRange">在模块 ''{0}'' 中，''{1}'' 的第 {3,number,integer} 行上的值({2,number,integer})无效。''闰秒表'' 参数 ''年'' 的值必须介于 2017 和 9999 之间。</entry>
    <entry key="LeapSecondTableVarSecondInvalid">在模块 ''{0}'' 中，''闰秒表'' 参数 ''{1}'' 列 ''秒'' 值的行 {3,number,integer} 上的值({2,number,integer})必须为 -1、0 或 1。</entry>
    <entry key="LeapSecondTableVarYearRepeated">在模块 ''{0}'' 中，不支持重复的 ''闰秒表'' 参数 ''{1}'' 列 ''年'' 值。第一个重复的年份是 {2,number,integer}。</entry>
    <entry key="LeapSecondTableVarYearNotSorted">在模块 ''{0}'' 中，''闰秒表'' 参数 ''{1}'' 列 ''年'' 中的值必须按升序排序。</entry>
    <entry key="DateTimeClockOrClockReaderInExpFcnMdl">Using DateTime Clock or DateTime Clock Reader ''{0}'' block inside an export function model is not supported.</entry>
    <entry key="DateTimeClockInsideNonVirtualSS">Using DateTime Clock ''{0}'' block inside subsystem ''{1}'' is not supported. Do not use DateTime Clock blocks inside Enabled, Triggered, Function call, Action, Iterator, Reusable, Resettable, Variant, or Function subsystems.</entry>
    <entry key="DateTimeClockInsideSFChart">不支持在 Stateflow 图 ''{1}'' 中使用 DateTime Clock ''{0}'' 模块。</entry>
    <entry key="DateTimeClockReaderInsideReusableSubsys">Using DateTime Clock Reader ''{0}'' block inside reusable subsystem ''{1}'' is not supported. Instead, change the 'Code generation function packaging' option of the subsystem ''{1}'' to ''Inlined'', ''Auto'' or ''Nonreusable function''.</entry>
    <entry key="DateTimeClockOrClockReaderInCondExecMdl">不支持在条件执行模型模块中使用 DateTime Clock 或 DateTime Clock Reader ''{0}'' 模块。</entry>
    <entry key="DateTimeClockOrClockReaderInRunFirstLastSS">Using DateTime Clock or DateTime Clock Reader ''{0}'' blocks inside subsystem ''{1}'' with block property ''Execution Order'' value of 'First' or 'Last' is not supported. Instead, change the ''Execution Order'' property of subsystem ''{1}'' to ''Based on priority''.</entry>
    <entry key="DateTimeFeatureTurnOn_Internal">Turn on ''DateTime in Simulink'' feature to use ''{0}''.</entry>
    <entry key="TimeStandardTAI">TAI</entry>
    <entry key="TimeStandardUTC">UTC</entry>
    <entry key="TimeStandardTT">TT</entry>
    <entry key="TimeStandardConversionTAI2UTC">TAI to UTC</entry>
    <entry key="TimeStandardConversionTAI2TT">TAI to TT</entry>
    <entry key="TimeStandardConversionTAI2TDB">TAI to TDB</entry>
    <entry key="TimeStandardConversionUTC2TDB">UTC to TDB</entry>
    <entry key="TimeStandardConversionUTC2TAI">UTC to TAI</entry>
    <entry key="TimeStandardConversionUTC2TT">UTC to TT</entry>
    <entry key="TimeStandardConversionTT2TAI">TT to TAI</entry>
    <entry key="TimeStandardConversionTT2UTC">TT to UTC</entry>
    <entry key="TimeStandardConversionTT2TDB">TT to TDB</entry>
    <entry key="DateTimeClockDouble">double</entry>
    <entry key="DateTimeClockSint32">int32</entry>
    <entry key="DateTimeClockUint32">uint32</entry>
    <entry key="DateTimeClockSfix128En64">fixdt(1,128,64)</entry>
    <entry key="DateTimeClockUfix128En64">fixdt(0,128,64)</entry>
    <entry key="DateTimeClockSfix64En32">fixdt(1,64,32)</entry>
    <entry key="DateTimeClockUfix64En32">fixdt(0,64,32)</entry>
    <entry key="FormatMATLABDefault">dd-MMM-uuuu HH:mm:ss</entry>
    <entry key="FormatISO8601WholeSec">yyyy-MM-dd''T''HH:mm:ss</entry>
    <entry key="FormatISO8601TimeStandard">yyyy-MM-dd''T''HH:mm:ss t</entry>
    <entry key="FormatISO8601FracSec">yyyy-MM-dd''T''HH:mm:ss.SSS</entry>
    <entry key="FormatAsctime">eee MMM dd HH:mm:ss yyyy\n</entry>
    <entry key="FormatClockTime">h:mm:ss a</entry>
    <entry key="FormatCalDate">MMMM d, yyyy</entry>
    <entry key="InvalidTimePointMode_Internal">''{0}'' must be a valid time point such as ''Seconds since Unix epoch'', ''Seconds since NTP epoch'', ''Seconds since TAI epoch'', ''Julian date'', ''Modified Julian date'' or ''J2000.0 date''.</entry>
    <entry key="InvalidEpoch_Internal">''{0}'' must be a valid epoch such as ''Unix'', ''NTP'', ''TAI'', ''Julian'', ''Modified Julian'' or ''J2000.0 date''.</entry>
    <entry key="InvalidTimeStandard_Internal">''{0}'' must be a valid time standard such as ''TAI'', ''UTC'', ''TT'', or ''TDB''.</entry>
  </message>
</rsccat>
