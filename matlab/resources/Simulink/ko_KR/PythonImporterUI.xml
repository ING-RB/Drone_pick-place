<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright 2025 The MathWorks, Inc.-->

<rsccat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" locale="ko_KR" product="Simulink" xsi:noNamespaceSchemaLocation="../../resources/schema/msgcat.xsd">
  <message>
    <entry key="CustomCodeParsingFailed">사용자 지정 코드 구문 분석에 실패했습니다(메시지: {0}).</entry>
    <entry key="Title">Python 가져오기</entry>
    <entry key="SaveDialogTitle">파일에 코드 가져오기 설정 저장</entry>
    <entry key="ConfirmationDialogTitle">Simulink 코드 가져오기</entry>
    <entry key="ConfirmationDialogMsg">닫기 전에 가져오기 설정을 저장하시겠습니까?</entry>
    <entry key="ConfirmationDialogButtonYesLabel">예</entry>
    <entry key="ConfirmationDialogButtonNoLabel">아니요</entry>
    <entry key="ProjectDialogTitle">기존 프로젝트 파일 지정</entry>
    <entry key="AddToProjectSuccessDlg">프로젝트에 추가</entry>
    <entry key="AddToProjectSuccessMsg">프로젝트에 성공적으로 추가됨</entry>
    <entry key="IncludesConfirmationDlgTitle">include 파일 및 패키지 자동 채우기</entry>
    <entry key="IncludesConfirmationDlgMsg">계속 진행하면 ''{0}''의 이전 값이 자동으로 채워진 include 파일과 패키지로 바뀝니다. 계속하시겠습니까?</entry>
    <entry key="ConfirmationDlgYesLabel">예</entry>
    <entry key="ConfirmationDlgNoLabel">아니요</entry>
    <entry key="ExternalsConfirmationDlgTitle">요구 사항 자동 채우기</entry>
    <entry key="ExternalsConfirmationDlgMsg">계속 진행하면 ''{0}''의 이전 값이 자동으로 채워진 요구 사항으로 바뀝니다. 계속하시겠습니까?</entry>
    <entry key="Topic_Welcome">시작하기</entry>
    <entry key="Topic_SimulinkLib">설정</entry>
    <entry key="Topic_ConfigCode">사용자 지정 코드 지정</entry>
    <entry key="Topic_Analyze">분석</entry>
    <entry key="Topic_WhatToImport">가져오기</entry>
    <entry key="Topic_Options">옵션</entry>
    <entry key="Topic_Finish">Simulink 라이브러리 만들기</entry>
    <entry key="status">상태</entry>
    <entry key="QuestionHelpTitle">고려할 사항</entry>
    <entry key="OptionHelpTitle">선택한 옵션에 대한 정보</entry>
    <entry key="back">뒤로</entry>
    <entry key="next">다음</entry>
    <entry key="save">저장</entry>
    <entry key="startNew">시작</entry>
    <entry key="loadButton">불러오기</entry>
    <entry key="finish">마침</entry>
    <entry key="empty_selection">답변을 선택하지 않았습니다!</entry>
    <entry key="error">오류</entry>
    <entry key="needNumericValue">숫자형 값을 입력하십시오.</entry>
    <entry key="categoryTitle">범주</entry>
    <entry key="parameterTitle">파라미터</entry>
    <entry key="newValueTitle">새 값</entry>
    <entry key="oldValueTitle">이전 값</entry>
    <entry key="sbxupdate">샌드박스 업데이트</entry>
    <entry key="addtoprjBtn">추가</entry>
    <entry key="addtoprjLabel">생성된 Simulink 라이브러리 파일을 프로젝트에 추가하시겠습니까? </entry>
    <entry key="inferBtnToolTip">지정된 파일과 패키지로부터 include를 자동으로 채웁니다</entry>
    <entry key="externalsBtnToolTip">요구 사항 파일 또는 외부 라이브러리를 자동으로 채웁니다</entry>
    <entry key="Question_Start">
                        &lt;center&gt;&lt;b&gt;&lt;u&gt;Python 가져오기&lt;/u&gt;&lt;/b&gt;&lt;/center&gt;&lt;br/&gt;&lt;br/&gt; &lt;p&gt;Python 가져오기를 사용하면 모델링, 검증 및 확인에 사용할 사용자 지정 코드를 가져올 수 있습니다.&lt;/p&gt; &lt;br/&gt;&lt;br/&gt; &lt;p&gt;Python 가져오기: &lt;ul&gt; &lt;li&gt;사용자 지정 코드의 함수, 유형 및 이들의 종속성을 분석합니다.&lt;/li&gt; &lt;li&gt;호출 가능한 함수 및 유형을 포함한 Simulink 라이브러리로 사용자 지정 코드를 가져옵니다.&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;</entry>
    <entry key="Option_Start_New">새 가져오기 시작</entry>
    <entry key="Option_Start_Existing">이전 가져오기에서 저장된 파일 불러오기</entry>
    <entry key="Option_Start_SelectFile">파일 선택:</entry>
    <entry key="OptionHint_Start_SelectFile">이전 가져오기에서 저장된 파일을 선택합니다.</entry>
    <entry key="Option_ConfigCodeLibrary_ProjectName">Simulink 라이브러리 파일 이름: </entry>
    <entry key="OptionHint_ConfigCodeLibrary_ProjectName">Simulink 라이브러리 파일 이름을 지정합니다. </entry>
    <entry key="Option_ConfigCodeLibrary_ProjectFolder">출력 폴더: </entry>
    <entry key="OptionHint_ConfigCodeLibrary_ProjectFolder">생성된 라이브러리와 기타 아티팩트를 저장할 출력 폴더를 지정합니다. </entry>
    <entry key="Option_ConfigCodeLibrary_LibraryBrowserName">Simulink 라이브러리 브라우저 이름: </entry>
    <entry key="OptionHint_ConfigCodeLibrary_LibraryBrowserName">Simulink 라이브러리 브라우저에 표시될 이름을 지정합니다. </entry>
    <entry key="Option_OptionsCreateSLBlocks_Checkbox">생성된 라이브러리를 Simulink 라이브러리 브라우저에 추가합니다.</entry>
    <entry key="OptionHint_OptionsCreateSLBlocks_Checkbox">생성된 라이브러리를 Simulink 라이브러리 브라우저에 추가하려면 이 옵션을 선택하십시오.</entry>
    <entry key="Question_ConfigCodeImporter"> &lt;b&gt; 출력 Simulink 라이브러리 파일 이름과 출력 폴더 지정:&lt;/b&gt;
    </entry>
    <entry key="QuestionHint_ConfigCodeImporter"> Simulink 라이브러리 파일 이름: 이 이름은 Simulink 라이브러리 파일 및 생성된 아티팩트의 이름을 지정하는 데 사용됩니다. &lt;br/&gt;&lt;br/&gt; 출력 폴더: Simulink 라이브러리 및 아티팩트는 이 폴더에 생성됩니다. &lt;br/&gt;&lt;br/&gt;
    </entry>
    <entry key="OutputFolderUnspecified">출력 폴더를 지정해야 합니다. </entry>
    <entry key="Question_ConfigCodeLibrary">&lt;b&gt;사용자 지정 코드 정보 지정:&lt;/b&gt;</entry>
    <entry key="QuestionHint_ConfigCodeLibrary">&lt;p&gt;사용자 지정 코드 옵션에서 경로는 전체 경로이거나 출력 폴더를 기준으로 한 상대 경로여야 합니다.&lt;/p&gt; </entry>
    <entry key="Option_ConfigCodeLibrary_SourceFiles">가져올 파일:</entry>
    <entry key="OptionHint_ConfigCodeLibrary_SourceFiles">가져올 소스 파일을 지정합니다.</entry>
    <entry key="Option_ConfigCodeLibrary_SourcePackages">가져올 패키지:</entry>
    <entry key="OptionHint_ConfigCodeLibrary_SourcePackages">가져올 패키지를 지정합니다. __init__.py 파일을 사용하여 패키지를 식별합니다.</entry>
    <entry key="Option_ConfigCodeLibrary_PythonFolder">Python 프로젝트:</entry>
    <entry key="OptionHint_ConfigCodeLibrary_PythonFolder">블록셋 디자이너에서 가져올 Python 프로젝트를 지정합니다. </entry>
    <entry key="Option_ConfigCodeLibrary_Includes">Include 파일 또는 패키지:</entry>
    <entry key="OptionHint_ConfigCodeLibrary_Includes">소스 파일 또는 패키지에 포함해야 하는 종속 디렉터리 또는 파일을 지정합니다.</entry>
    <entry key="Option_ConfigCodeLibrary_Externals">요구 사항:</entry>
    <entry key="OptionHint_ConfigCodeLibrary_Externals">Python 패키지의 requirement.txt 파일을 지정합니다.</entry>
    <entry key="Question_ConfigUpdateMode">&lt;b&gt;지정한 출력 Simulink 라이브러리가 이미 존재합니다. 기존 라이브러리를 업데이트하거나 덮어쓸 수 있습니다.&lt;/b&gt;</entry>
    <entry key="Option_UpdateExisting">업데이트</entry>
    <entry key="Option_Overwrite">덮어쓰기</entry>
    <entry key="Question_WhatToImportAnalyze">&lt;p&gt;&lt;b&gt;다음&lt;/b&gt;을 클릭하여 다음을 수행합니다:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;사용자 지정 코드의 함수, 입력 및 출력 유형, 주석을 분석합니다.&lt;/li&gt;&lt;/ul&gt;</entry>
    <entry key="Question_WhatToImportFunction">&lt;b&gt;Simulink 라이브러리로 가져올 함수 선택:&lt;/b&gt;</entry>
    <entry key="QuestionHint_WhatToImportFunction">&lt;p&gt;선택한 각 함수에 대해 System Object 및 System 블록이 생성됩니다.&lt;/p&gt; &lt;p&gt;가져올 함수를 하나 이상 선택하십시오.&lt;/p&gt;</entry>
    <entry key="Option_WhatToImportFunction_EntryFunctions">진입점 함수만 표시</entry>
    <entry key="OptionHint_WhatToImportFunction_FunctionNameFilter">이름을 기준으로 함수를 찾습니다.</entry>
    <entry key="Question_PortSpecificationsMapping">&lt;b&gt;이전에 선택한 함수에 대한 블록 포트 사양을 편집합니다.&lt;/b&gt;</entry>
    <entry key="QuestionHint_PortSpecificationsMapping">&lt;p&gt;System 블록은 별도로 지정하지 않는 한 디폴트 포트 사양을 사용하여 생성됩니다.&lt;/p&gt;&lt;p&gt; 생성된 System Object에서 블록 포트 사양을 편집할 수도 있습니다.&lt;/p&gt;</entry>
    <entry key="Question_WhatToImportType">&lt;b&gt;출력 Simulink 라이브러리로 가져올 유형 지정:&lt;/b&gt;</entry>
    <entry key="QuestionHint_WhatToImportType"> &lt;p&gt; 앞서 선택한 함수에 필요한 유형이 자동으로 선택됩니다.&lt;/p&gt; &lt;p&gt;선택된 모든 유형을 출력 Simulink 라이브러리에 연결될 Simulink 데이터 사전으로 가져옵니다.&lt;/p&gt;</entry>
    <entry key="Option_WhatToImportType_ImportToFile">유형을 파일로 가져오기</entry>
    <entry key="OptionHint_WhatToImportType_ImportToFile">구조체형을 ''project_name_types.mat'' 파일로 가져오고 열거형을 MATLAB 클래스 파일로 가져오려면 이 옵션을 선택합니다.</entry>
    <entry key="OptionHint_WhatToImportType_TypeNameFilter">이름을 기준으로 유형을 찾습니다.</entry>
    <entry key="Question_OptionsGlobalIO">&lt;b&gt;사용자 지정 코드에서 전역 변수가 감지됨:&lt;/b&gt;</entry>
    <entry key="QuestionHint_OptionsGlobalIO">함수는 전역 변수를 읽고 쓸 수 있습니다. 이 옵션을 활성화하면, 함수에서 액세스하는 전역 변수가 출력 Simulink 라이브러리에서 함수의 인터페이스로 취급됩니다. 자세한 내용은 &lt;a href="matlab:helpview('simulink', 'Tag_ConfigSet_Sim_CustomCodeGlobalsAsFunctionIO')"&gt;{0}&lt;/a&gt; 항목을 참조하십시오.</entry>
    <entry key="Option_OptionsGlobalIO_Checkbox">전역 변수를 함수 인터페이스로 사용</entry>
    <entry key="OptionHint_OptionsGlobalIO_Checkbox">함수가 전역 변수에 함수 인터페이스로 액세스하지 않는 것이 확실하다면 이 옵션을 선택하지 마십시오.</entry>
    <entry key="Question_CreateTestHarness"> &lt;b&gt; 테스트 하네스 만들기:&lt;/b&gt;</entry>
    <entry key="Option_CreateTestHarness_Auto">가져온 모든 함수에 대해 자동으로 테스트 하네스를 만듭니다.</entry>
    <entry key="Option_CreateTestHarness_Skip">건너뛰기</entry>
    <entry key="Question_Finish">생성된 라이브러리의 사양:</entry>
    <entry key="Question_NextStep">&lt;center&gt;&lt;b&gt;&lt;u&gt;코드 가져오기 성공&lt;/u&gt;&lt;/b&gt;&lt;/center&gt;&lt;br/&gt;&lt;br/&gt; &lt;p&gt;출력 폴더에 Simulink 라이브러리가 생성되었습니다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;다음 단계:&lt;/b&gt;&lt;/p&gt;{0}</entry>
    <entry key="OutputFolderCDHyperlink">MATLAB 현재 폴더를 출력 폴더로 변경합니다.</entry>
    <entry key="OpenLibraryHyperlink">생성된 Simulink 라이브러리 열기</entry>
    <entry key="Option_ConfigProject_AddToProject"/>
    <entry key="OptionHint_ConfigProject_AddToProject">기존 프로젝트 파일 지정</entry>
  </message>
</rsccat>
