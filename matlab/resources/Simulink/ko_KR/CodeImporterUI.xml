<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright 2025 The MathWorks, Inc.-->

<rsccat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" locale="ko_KR" product="Simulink" xsi:noNamespaceSchemaLocation="../../resources/schema/msgcat.xsd">
  <message>
    <entry key="CustomCodeParsingFailed">사용자 지정 코드 구문 분석에 실패했습니다(메시지: {0}).</entry>
    <entry key="Title">코드 가져오기</entry>
    <entry key="SaveDialogTitle">파일에 코드 가져오기 설정 저장</entry>
    <entry key="ConfirmationDialogTitle">Simulink 코드 가져오기</entry>
    <entry key="ConfirmationDialogMsg">닫기 전에 가져오기 설정을 저장하시겠습니까?</entry>
    <entry key="ConfirmationDialogButtonYesLabel">예</entry>
    <entry key="ConfirmationDialogButtonNoLabel">아니요</entry>
    <entry key="ProjectDialogTitle">기존 프로젝트 파일 지정</entry>
    <entry key="AddToProjectSuccessDlg">프로젝트에 추가</entry>
    <entry key="AddToProjectSuccessMsg">프로젝트에 성공적으로 추가됨</entry>
    <entry key="InferHdrConfirmationDlgTitle">인터페이스 헤더 자동 채우기</entry>
    <entry key="InferHdrConfirmationDlgMsg">계속 진행하면 ''{0}''의 이전 값이 자동으로 채워진 헤더로 바뀝니다. 계속하시겠습니까?</entry>
    <entry key="InferHdrConfirmationDlgYesLabel">예</entry>
    <entry key="InferHdrConfirmationDlgNoLabel">아니요</entry>
    <entry key="Topic_Welcome">시작하기</entry>
    <entry key="Topic_SimulinkLib">설정</entry>
    <entry key="Topic_ConfigCode">사용자 지정 코드 지정</entry>
    <entry key="Topic_Analyze">분석</entry>
    <entry key="Topic_WhatToImport">구성</entry>
    <entry key="Topic_Options">옵션</entry>
    <entry key="Topic_Finish">가져오기</entry>
    <entry key="status">상태</entry>
    <entry key="QuestionHelpTitle">고려할 사항</entry>
    <entry key="OptionHelpTitle">선택한 옵션에 대한 정보</entry>
    <entry key="back">뒤로</entry>
    <entry key="next">다음</entry>
    <entry key="save">저장</entry>
    <entry key="startNew">시작</entry>
    <entry key="loadButton">불러오기</entry>
    <entry key="finish">마침</entry>
    <entry key="empty_selection">답변을 선택하지 않았습니다!</entry>
    <entry key="error">오류</entry>
    <entry key="needNumericValue">숫자형 값을 입력하십시오.</entry>
    <entry key="categoryTitle">범주</entry>
    <entry key="parameterTitle">파라미터</entry>
    <entry key="newValueTitle">새 값</entry>
    <entry key="oldValueTitle">이전 값</entry>
    <entry key="sbxupdate">샌드박스 업데이트</entry>
    <entry key="addtoprjBtn">추가</entry>
    <entry key="addtoprjLabel">Simulink 라이브러리 또는 모델 파일을 프로젝트에 추가하시겠습니까? </entry>
    <entry key="inferBtnToolTip">지정된 소스 파일에서 인터페이스 헤더를 자동으로 채웁니다</entry>
    <entry key="slInterfaceTableNameColumnLabel">이름</entry>
    <entry key="slInterfaceTableButtonColumnLabel">Simulink 인터페이스</entry>
    <entry key="slInterfaceTableButtonDefInterface">정의</entry>
    <entry key="slInterfaceTableButtonModiInterface">수정</entry>
    <entry key="slInterfaceTableButtonValInterface">검증</entry>
    <entry key="existingBlocksTableNameColumnLabel">이름</entry>
    <entry key="existingBlocksTableBlockColumnLabel">기존의 가져온 블록</entry>
    <entry key="slInterfaceQuestionDlgTitle">"{0}"에 대한 Simulink 인터페이스 구성</entry>
    <entry key="slInterfaceQuestionConstructorLabel">클래스 인스턴스화를 위한 생성자:</entry>
    <entry key="slInterfaceQuestionInitLabel">초기화 방법:</entry>
    <entry key="slInterfaceQuestionTermLabel">정리 방법:</entry>
    <entry key="slInterfaceQuestionStepLabel">출력 코드용 메서드:</entry>
    <entry key="Question_Start">
                        &lt;center&gt;&lt;b&gt;&lt;u&gt;코드 가져오기&lt;/u&gt;&lt;/b&gt;&lt;/center&gt;&lt;br/&gt;&lt;br/&gt; &lt;p&gt;코드 가져오기를 사용하면 모델링, 검증 및 확인에 사용할 사용자 지정 코드를 가져올 수 있습니다.&lt;/p&gt; &lt;br/&gt;&lt;br/&gt; &lt;p&gt;코드 가져오기: &lt;ul&gt; &lt;li&gt;사용자 지정 코드의 함수, 클래스, 유형, 전역 변수 및 이들의 종속성을 분석합니다.&lt;/li&gt; &lt;li&gt;호출 가능한 함수, 클래스 및 유형을 포함하는 Simulink 라이브러리 또는 모델로 사용자 지정 코드를 가져옵니다.&lt;/li&gt; &lt;li&gt;Simulink Test 파일을 만듭니다(Simulink Test 라이선스 필요).&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;</entry>
    <entry key="Question_Start_SLTest">
                        &lt;center&gt;&lt;b&gt;&lt;u&gt;코드 가져오기&lt;/u&gt;&lt;/b&gt;&lt;/center&gt;&lt;br/&gt;&lt;br/&gt; &lt;p&gt;코드 가져오기를 사용하면 모델링, 검증 및 확인에 사용할 사용자 지정 코드를 가져올 수 있습니다.&lt;/p&gt; &lt;br/&gt;&lt;br/&gt; &lt;p&gt;코드 가져오기: &lt;ul&gt; &lt;li&gt;사용자 지정 코드의 함수, 유형, 전역 변수 및 이들의 종속성을 분석합니다.&lt;/li&gt; &lt;li&gt;호출 가능한 함수 및 유형을 포함한 Simulink 라이브러리 또는 모델로 사용자 지정 코드를 가져옵니다.&lt;/li&gt; &lt;li&gt;Simulink Test 파일을 만듭니다.&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;</entry>
    <entry key="Option_Start_New">새 가져오기 시작</entry>
    <entry key="Option_Start_Existing">이전 가져오기에서 저장된 파일 불러오기</entry>
    <entry key="Option_Start_SelectFile">파일 선택:</entry>
    <entry key="OptionHint_Start_SelectFile">이전 가져오기에서 저장된 파일을 선택합니다.</entry>
    <entry key="Option_ConfigCodeImporter_Language">가져올 언어 선택:</entry>
    <entry key="Option_ConfigCodeLibrary_ProjectName">라이브러리 또는 모델 이름: </entry>
    <entry key="OptionHint_ConfigCodeLibrary_ProjectName">출력 Simulink 라이브러리 또는 모델의 이름과 아티팩트 파일을 지정하십시오. </entry>
    <entry key="Option_ConfigCodeLibrary_ProjectFolder">출력 폴더: </entry>
    <entry key="OptionHint_ConfigCodeLibrary_ProjectFolder">출력 Simulink 라이브러리 또는 모델과 아티팩트 파일을 저장하는 폴더를 지정하십시오. </entry>
    <entry key="Option_ConfigCodeLibrary_LibraryBrowserName">Simulink 라이브러리 브라우저 이름: </entry>
    <entry key="OptionHint_ConfigCodeLibrary_LibraryBrowserName">Simulink 라이브러리 브라우저에 표시될 이름을 지정합니다. </entry>
    <entry key="Option_OptionsCreateSLBlocks_Checkbox">생성된 라이브러리를 Simulink 라이브러리 브라우저에 추가합니다.</entry>
    <entry key="OptionHint_OptionsCreateSLBlocks_Checkbox">생성된 라이브러리를 Simulink 라이브러리 브라우저에 추가하려면 이 옵션을 선택하십시오.</entry>
    <entry key="Question_ConfigCodeImporter"> &lt;b&gt; 출력 Simulink 라이브러리 또는 모델 이름과 출력 폴더 지정:&lt;/b&gt;
    </entry>
    <entry key="QuestionHint_ConfigCodeImporter"> 라이브러리 또는 모델 이름: 함수 또는 클래스를 가져오는 Simulink 라이브러리 또는 모델의 이름입니다. 이 이름은 생성된 Simulink 아티팩트 파일에도 사용됩니다. &lt;br/&gt;&lt;br/&gt; 출력 폴더: 출력 Simulink 라이브러리 또는 모델과 아티팩트 파일을 저장하는 폴더입니다. 지정된 라이브러리 또는 모델이 출력 폴더에 존재하지 않는 경우 출력 폴더에 새 Simulink 라이브러리가 생성됩니다. &lt;br/&gt;&lt;br/&gt;
    </entry>
    <entry key="QuestionHint_ConfigCodeImporter_SLTest"> 라이브러리 또는 모델 이름: 함수 또는 클래스를 가져오는 Simulink 라이브러리 또는 모델의 이름입니다. 이 이름은 생성된 Simulink 아티팩트 파일에도 사용됩니다. &lt;br/&gt;&lt;br/&gt; 출력 폴더: 출력 Simulink 라이브러리 또는 모델과 아티팩트 파일을 저장하는 폴더입니다. 지정된 라이브러리 또는 모델이 출력 폴더에 존재하지 않는 경우 출력 폴더에 새 Simulink 라이브러리가 생성됩니다. &lt;br/&gt;&lt;br/&gt; 사용자 지정 코드의 일부를 분리하여 테스트하려면 &lt;b&gt;C 코드 단위 테스트&lt;/b&gt;를 선택하십시오. &lt;br/&gt;&lt;br/&gt; 사용자 지정 코드 전체를 테스트하려면 &lt;b&gt;통합 테스트&lt;/b&gt;를 선택하십시오.
    </entry>
    <entry key="OutputFolderUnspecified">출력 폴더를 지정해야 합니다. </entry>
    <entry key="Question_ConfigCodeLibrary">&lt;b&gt;사용자 지정 코드 정보 지정:&lt;/b&gt;</entry>
    <entry key="QuestionHint_ConfigCodeLibrary">&lt;p&gt;사용자 지정 코드 옵션에서 경로는 전체 경로이거나 출력 폴더를 기준으로 한 상대 경로여야 합니다.&lt;/p&gt; &lt;p&gt;정의를 지정할 때는 ';'을 사용하여 여러 개의 정의 또는 플래그를 구분하십시오. "-D"는 선택 사항입니다.&lt;/p&gt; </entry>
    <entry key="QuestionHint_ConfigCodeLibrary_InferHeaders">지정된 소스 파일에서 인터페이스 헤더를 계산하려면 {0}을(를) 클릭하십시오 </entry>
    <entry key="Option_ConfigCodeCompiler_Language">언어:</entry>
    <entry key="OptionHint_ConfigCodeCompiler_Language">사용자 지정 코드를 컴파일하고 구문 분석할 언어를 지정하십시오.</entry>
    <entry key="Option_ConfigCodeCompiler_Defines">정의:</entry>
    <entry key="OptionHint_ConfigCodeCompiler_Defines">컴파일러 명령줄에 추가할 전처리기 매크로 정의를 지정하십시오.</entry>
    <entry key="Option_ConfigCodeLibrary_SourceFiles">소스 파일:</entry>
    <entry key="OptionHint_ConfigCodeLibrary_SourceFiles">가져올 소스 파일을 지정합니다.</entry>
    <entry key="Option_ConfigCodeLibrary_IncludeFiles">인터페이스 헤더:</entry>
    <entry key="OptionHint_ConfigCodeLibrary_IncludeFiles">가져올 인터페이스 헤더를 지정합니다.</entry>
    <entry key="Option_ConfigCodeLibrary_IncludePaths">include 디렉터리:</entry>
    <entry key="OptionHint_ConfigCodeLibrary_IncludePaths">컴파일된 타깃에 포함할 파일이 있는 폴더 경로의 목록을 지정하십시오.</entry>
    <entry key="Option_ConfigCodeLibrary_Libraries">라이브러리:</entry>
    <entry key="OptionHint_ConfigCodeLibrary_Libraries">링크할 사용자 지정 오브젝트 코드가 포함된 라이브러리 목록을 지정하십시오.</entry>
    <entry key="Option_ConfigCodeLibrary_MetadataFile">메타데이터 파일:</entry>
    <entry key="OptionHint_ConfigCodeLibrary_MetadataFile">메타데이터 파일 경로를 지정합니다.</entry>
    <entry key="Option_ConfigCodeCompiler_CompilerFlags">컴파일러 플래그:</entry>
    <entry key="OptionHint_ConfigCodeCompiler_CompilerFlags">추가 컴파일러 플래그를 지정하십시오.</entry>
    <entry key="Option_ConfigCodeCompiler_LinkerFlags">링커 플래그:</entry>
    <entry key="OptionHint_ConfigCodeCompiler_LinkerFlags">추가 링커 플래그를 지정하십시오.</entry>
    <entry key="Question_ConfigUpdateMode">&lt;b&gt;지정된 출력 Simulink 라이브러리 또는 모델의 블록이 이미 아래 테이블에 나열되어 있는 {0}을(를) 가져옵니다. 기존 블록을 바꾸거나 {0}을(를) 새 블록으로 가져올 수 있습니다:&lt;/b&gt;</entry>
    <entry key="Option_UpdateExisting">기존 블록 교체</entry>
    <entry key="Option_Overwrite">새 블록으로 가져오기</entry>
    <entry key="Question_WhatToImportAnalyze">&lt;p&gt;&lt;b&gt;다음&lt;/b&gt;을 클릭하면 아래와 같은 작업을 할 수 있습니다.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;사용자 지정 코드의 함수, 클래스, 유형, 전역 변수 및 이들의 종속성을 분석합니다.&lt;/li&gt;&lt;/ul&gt;</entry>
    <entry key="Question_WhatToImportFunction">&lt;b&gt;가져올 함수 선택:&lt;/b&gt;</entry>
    <entry key="QuestionHint_WhatToImportFunction">&lt;p&gt;선택한 각 함수에 대해 C Caller 블록이 생성됩니다.&lt;/p&gt; &lt;p&gt;가져올 함수를 하나 이상 선택하십시오.&lt;/p&gt;</entry>
    <entry key="Option_WhatToImportFunction_EntryFunctions">진입점 함수만 표시</entry>
    <entry key="OptionHint_WhatToImportFunction_FunctionNameFilter">이름을 기준으로 함수를 찾습니다.</entry>
    <entry key="Question_PortSpecificationsMapping">&lt;b&gt;이전에 선택한 함수에 대한 블록 포트 사양을 편집합니다.&lt;/b&gt;</entry>
    <entry key="QuestionHint_PortSpecificationsMapping">&lt;p&gt;C Caller 블록은 별도로 지정하지 않는 한 디폴트 포트 사양을 사용하여 생성됩니다.&lt;/p&gt;&lt;p&gt; 포트 사양은 출력 Simulink 라이브러리 또는 모델의 가져온 C Caller 블록에서 업데이트될 수도 있습니다.&lt;/p&gt;</entry>
    <entry key="Question_WhatToImportClass">&lt;b&gt;가져올 클래스 선택:&lt;/b&gt;</entry>
    <entry key="QuestionHint_WhatToImportClass">&lt;p&gt;선택한 각 클래스에 대해 C Function 블록이 생성됩니다.&lt;/p&gt; &lt;p&gt;가져올 클래스를 하나 이상 선택하십시오.&lt;/p&gt;</entry>
    <entry key="OptionHint_WhatToImportClass_ClassNameFilter">이름을 기준으로 클래스를 찾습니다</entry>
    <entry key="Question_ClassSimulinkInterface">&lt;b&gt;이전에 선택한 클래스에 대해 Simulink 인터페이스를 정의하십시오.&lt;/b&gt;</entry>
    <entry key="QuestionHint_ClassSimulinkInterface"> &lt;p&gt; 클래스에 대해 생성자와 메서드를 선택하고 [포트 및 파라미터]와 알고리즘 스크립트를 편집하는 프로세스를 시작하려면 '인터페이스 정의'를 클릭하십시오.&lt;/p&gt; &lt;p&gt;정의된 Simulink 인터페이스를 사용하여 C Function 블록이 생성됩니다.&lt;/p&gt; &lt;p&gt;Simulink 인터페이스 설정은 출력 Simulink 라이브러리 또는 모델의 가져온 C Function 블록에서 업데이트될 수도 있습니다.&lt;/p&gt;</entry>
    <entry key="OptionHint_ClassSimulinkInterface_ClassNameFilter">이름을 기준으로 클래스를 찾습니다</entry>
    <entry key="Question_WhatToImportType">&lt;b&gt;가져올 유형 선택:&lt;/b&gt;</entry>
    <entry key="QuestionHint_WhatToImportType"> &lt;p&gt; 앞서 선택한 함수 또는 클래스에 필요한 유형이 자동으로 선택됩니다.&lt;/p&gt; &lt;p&gt;선택된 모든 유형을 출력 Simulink 라이브러리 또는 모델에 연결된 Simulink 데이터 사전으로 가져옵니다. 연결된 데이터 사전이 없는 경우 새 데이터 사전이 생성됩니다.&lt;/p&gt;</entry>
    <entry key="Option_WhatToImportType_ImportToFile">유형을 파일로 가져오기</entry>
    <entry key="OptionHint_WhatToImportType_ImportToFile">구조체형을 ''project_name_types.mat'' 파일로 가져오고 열거형을 MATLAB 클래스 파일로 가져오려면 이 옵션을 선택합니다.</entry>
    <entry key="OptionHint_WhatToImportType_TypeNameFilter">이름을 기준으로 유형을 찾습니다.</entry>
    <entry key="Question_OptionsGlobalIO">&lt;b&gt;전역 변수를 함수 인터페이스로 유추:&lt;/b&gt;</entry>
    <entry key="QuestionHint_OptionsGlobalIO">이 파라미터가 선택되면 함수가 액세스하는 전역 변수가 사용자 지정 코드 분석을 통해 자동으로 함수 인터페이스로 유추됩니다. 자세한 내용은 &lt;a href="matlab:helpview('simulink', 'Tag_ConfigSet_Sim_CustomCodeGlobalsAsFunctionIO')"&gt;{0}&lt;/a&gt; 항목을 참조하십시오.</entry>
    <entry key="Option_OptionsGlobalIO_Checkbox">자동으로 전역 변수를 함수 인터페이스로 유추</entry>
    <entry key="OptionHint_OptionsGlobalIO_Checkbox">함수가 전역 변수를 인터페이스로 사용하지 않거나 수동으로 전역 변수를 함수 인터페이스로 설정하려는 경우 이 파라미터를 선택 취소하십시오.</entry>
    <entry key="Question_Finish">가져오기 설정 요약:</entry>
    <entry key="Question_NextStep">&lt;center&gt;&lt;b&gt;&lt;u&gt;코드 가져오기 성공&lt;/u&gt;&lt;/b&gt;&lt;/center&gt;&lt;br/&gt;&lt;br/&gt; &lt;p&gt;&lt;b&gt;다음 단계:&lt;/b&gt;&lt;/p&gt;{0}</entry>
    <entry key="OutputFolderCDHyperlink">MATLAB 현재 폴더를 출력 폴더로 변경합니다.</entry>
    <entry key="OpenLibraryHyperlink">Simulink 라이브러리 또는 모델 열기</entry>
    <entry key="Option_ConfigProject_AddToProject"/>
    <entry key="OptionHint_ConfigProject_AddToProject">기존 프로젝트 파일 지정</entry>
    <entry key="Question_ConfigTestType">&lt;b&gt;테스트 방법 지정:&lt;/b&gt;</entry>
    <entry key="Option_ConfigTestType_UnitTest">C 코드 단위 테스트</entry>
    <entry key="OptionHint_ConfigTestType_UnitTest">&lt;p&gt;선택한 옵션은 지정한 소스 파일에서 샌드박스를 만듭니다. 샌드박스는 다음 항목으로 구성됩니다. &lt;ul&gt; &lt;li&gt;인터페이스 헤더 파일.&lt;/li&gt; &lt;li&gt;정의되지 않은 기호에 대한 자동 스텁 파일.&lt;/li&gt; &lt;li&gt;정의되지 않은 기호를 직접 편집할 수 있게 해 주는 수동 스텁 파일.&lt;/li&gt; &lt;/ul&gt;&lt;/p&gt;</entry>
    <entry key="Option_ConfigTestType_PackageTest">통합 테스트</entry>
    <entry key="OptionHint_ConfigTestType_PackageTest">선택한 옵션은 누락된 기호에 대한 스텁을 생성하지 않고 지정된 사용자 지정 코드를 가져옵니다.</entry>
    <entry key="Question_ConfigSandbox">&lt;b&gt;출력 테스트 샌드박스 모드 지정:&lt;/b&gt;</entry>
    <entry key="QuestionHint_ConfigSandbox">&lt;p&gt;최소한의 통합 헤더 파일과 정의되지 않은 기호에 대한 스텁을 사용하여 지정된 C 코드 소스 파일에 대한 샌드박스를 생성하려면 &lt;strong&gt;"통합 헤더 생성"&lt;/strong&gt;을 선택하십시오. 이 샌드박스 모드는 단일 소스 파일만 지원합니다.&lt;/p&gt; &lt;p&gt;전처리된 버전의 C 코드와 정의되지 않은 기호에 대한 스텁을 포함하는 샌드박스를 생성하려면 &lt;strong&gt;"전처리된 소스 생성"&lt;/strong&gt;을 선택하십시오.&lt;/p&gt; &lt;p&gt;원래 C 코드를 수정하지 않고 사용하여 샌드박스를 생성하려면 &lt;strong&gt;"원래 소스 사용"&lt;/strong&gt;을 선택하십시오.&lt;/p&gt;</entry>
    <entry key="Option_ConfigSandbox_AggregatedHeader">통합 헤더 생성</entry>
    <entry key="OptionHint_ConfigSandbox_AggregatedHeader">&lt;p&gt;지정한 &lt;b&gt;통합 헤더 샌드박스&lt;/b&gt;를 다음 설정을 사용하여 생성합니다.&lt;/p&gt;</entry>
    <entry key="Option_ConfigSandbox_PreprocessedSource">전처리된 소스 생성</entry>
    <entry key="OptionHint_ConfigSandbox_PreprocessedSource">&lt;p&gt;지정한 &lt;b&gt;전처리된 소스 샌드박스&lt;/b&gt;를 다음 설정을 사용하여 생성합니다.&lt;/p&gt;</entry>
    <entry key="Option_ConfigSandbox_UseOriginalCode">원래 소스 사용</entry>
    <entry key="OptionHint_ConfigSandbox_UseOriginalCode">&lt;p&gt;지정한 &lt;b&gt;원래 소스 사용 샌드박스&lt;/b&gt;가 다음 설정을 사용하여 생성됩니다.&lt;/p&gt;</entry>
    <entry key="Question_ConfigSandboxSettings">&lt;b&gt;출력 테스트 샌드박스 설정 지정:&lt;/b&gt;</entry>
    <entry key="Option_ConfigSandbox_CopySources">소스 파일 복사</entry>
    <entry key="OptionHint_ConfigSandbox_CopySources">&lt;ul&gt;&lt;li&gt;지정한 소스 파일이 출력 테스트 샌드박스의 ''src'' 디렉터리로 복사됩니다.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</entry>
    <entry key="Option_ConfigSandbox_CopyHeadersSources">헤더 파일과 소스 파일 복사</entry>
    <entry key="OptionHint_ConfigSandbox_CopyHeadersSources">&lt;ul&gt;&lt;li&gt;&lt;p&gt;지정한 헤더 파일과 소스 파일이 출력 테스트 샌드박스의 ''include'' 디렉터리와 ''src'' 디렉터리로 각각 복사됩니다.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</entry>
    <entry key="Option_ConfigSandbox_RemovePragmas">통합 헤더에서 프라그마 제거</entry>
    <entry key="OptionHint_ConfigSandbox_RemovePragmas">&lt;ul&gt;&lt;li&gt;&lt;p&gt;통합 헤더에서 모든 ''#pragmas''가 제거됩니다.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</entry>
    <entry key="Option_ConfigSandbox_RemovePragmasSource">전처리된 소스에서 프라그마 제거</entry>
    <entry key="OptionHint_ConfigSandbox_RemovePragmasSource">&lt;ul&gt;&lt;li&gt;&lt;p&gt;전처리된 소스에서 모든 ''#pragmas''가 제거됩니다.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</entry>
    <entry key="Option_ConfigSandbox_RemoveVarDefinition">통합 헤더에서 전역 변수 정의 제거</entry>
    <entry key="OptionHint_ConfigSandbox_RemoveVarDefinition">&lt;ul&gt;&lt;li&gt;&lt;p&gt;통합 헤더에서 모든 전역 변수 정의가 제거되고 extern 선언으로 바뀝니다.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</entry>
    <entry key="Question_WhatToImportAnalyzeSandbox">&lt;p&gt;&lt;b&gt;다음&lt;/b&gt;을 클릭하면 아래와 같은 작업을 할 수 있습니다.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;사용자 지정 코드의 함수, 유형, 전역 변수 및 이들의 종속성을 분석합니다.&lt;/li&gt; &lt;li&gt;지정한 설정에 따라 테스트 샌드박스를 생성합니다.&lt;/li&gt; &lt;li&gt;정의되지 않은 기호에 대한 자동 스텁 파일과 정의되지 않은 기호를 직접 편집할 수 있는 수동 스텁 파일을 생성합니다.&lt;/li&gt;&lt;/ul&gt;</entry>
    <entry key="Question_WhatToImportFinishSandbox">출력 폴더에 테스트 샌드박스가 생성되었습니다. {0} &lt;p&gt;&lt;b&gt;생성된 아티팩트:&lt;/b&gt;&lt;/p&gt;{1} {2}&lt;br/&gt;&lt;p&gt;수동 스텁 파일을 변경했다면 &lt;b&gt;샌드박스 업데이트&lt;/b&gt;를 클릭하십시오.&lt;br/&gt; 참고: 샌드박스를 업데이트하면 자동 스텁 파일이 다시 생성됩니다.&lt;/p&gt;</entry>
    <entry key="SandboxFolderCDHyperlink">MATLAB 현재 폴더를 샌드박스 폴더로 변경합니다.</entry>
    <entry key="QuestionHint_WhatToImportFinishSandbox">  &lt;p&gt;자동 스텁 파일: 자동으로 스터빙된 정의되지 않은 기호가 포함되는 파일입니다. &lt;/p&gt;&lt;br/&gt; &lt;p&gt; 수동 스텁 파일: 정의되지 않은 기호의 스텁을 직접 편집할 수 있게 해 주는 파일입니다.&lt;/p&gt;&lt;br/&gt; &lt;p&gt;다음 파일들은 항상 다시 생성되므로 수정하지 마십시오.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;자동 스텁 파일&lt;/li&gt; &lt;li&gt;지정된 소스 파일&lt;/li&gt; &lt;li&gt;샌드박스 ''include'' 디렉터리에 있는 헤더 파일&lt;/li&gt;&lt;/ul&gt;
</entry>
    <entry key="SandboxUpdateErrorUI">샌드박스 파일이 변경되었습니다. 샌드박스를 새로 고치려면 ''샌드박스 업데이트''를 클릭하십시오.</entry>
    <entry key="CustomCodeChangedSandboxUpdateErrorUI">''CustomCode'' 섹션에 지정된 사용자 지정 코드가 변경되었습니다. 샌드박스를 새로 고치려면 ''샌드박스 업데이트''를 클릭하십시오.</entry>
    <entry key="AutostubSourceHyperlink">자동 스텁 소스</entry>
    <entry key="AutostubHeaderHyperlink">자동 스텁 헤더</entry>
    <entry key="ManualstubSourceHyperlink">수동 스텁 소스</entry>
    <entry key="ManualstubHeaderHyperlink">수동 스텁 헤더</entry>
    <entry key="Question_WhatToImportOverwriteSandbox">&lt;b&gt;지정한 출력 샌드박스가 이미 존재합니다. 기존 샌드박스를 업데이트하거나 덮어쓸 수 있습니다.&lt;/b&gt;</entry>
    <entry key="Option_WhatToImportOverwriteSandbox_Update">업데이트 - 수동 스텁 파일의 변경 사항을 유지합니다</entry>
    <entry key="Option_WhatToImportOverwriteSandbox_Overwrite">덮어쓰기 - 기존 샌드박스를 삭제하고 새로운 샌드박스를 만듭니다</entry>
    <entry key="Question_CreateTestHarness"> &lt;b&gt; 테스트 하네스 만들기:&lt;/b&gt;</entry>
    <entry key="Option_CreateTestHarness_Auto">가져온 모든 함수 또는 클래스에 대해 자동으로 테스트 하네스 생성</entry>
    <entry key="Option_CreateTestHarness_Skip">건너뛰기</entry>
  </message>
</rsccat>
