classdef Templates

    properties (Constant)
        zeroth = '0번째';
        first = '1번째';
        second = '2번째';
        third = '3번째';
        fourth = '4번째';
        fifth = '5번째';
        sixth = '6번째';
        seventh = '7번째';
        eighth = '8번째';
        ninth = '9번째';
        tenth = '10번째';
        MINUS = '빼기 연산자';
        MUL = '행렬 곱하기 연산자';
        DIV = '나누기 연산자';
        LDIV = '백슬래시 연산자';
        EXP = '지수 연산자';
        DOTMUL = '점(dot) 곱하기 연산자';
        DOTDIV = '점(dot) 나누기 연산자';
        DOTLDIV = '점(dot) 백슬래시 연산자';
        DOTEXP = '점(dot) 지수 연산자';
        ANDAND = 'AND 논리 연산자';
        OROR = 'OR 논리 연산자';
        LT = '보다 작음 관계 연산자';
        GT = '보다 큼 관계 연산자';
        LE = '보다 작거나 같음 관계 연산자';
        GE = '보다 크거나 같음 관계 연산자';
        PLUS = '더하기 연산자';
        AND = 'AND 논리 연산자';
        OR = 'OR 논리 연산자';
        EQ = '같음 관계 연산자';
        NE = '같지 않음 관계 연산자';
        NOT = 'NOT 논리 연산자';
        UMINUS = '단항 마이너스 연산자';
        UPLUS = '단항 플러스 연산자';
        DOTTRANS = '전치 연산자';
        TRANS = '전치 연산자';
        AT = '함수 핸들 연산자';
        BANG = '느낌표 연산자';
        syntaxError = '구문 오류가 있습니다. ';
        correct = '정답입니다! ';
        incorrect = '올바른 정답이 아닙니다! ';
        example = '예: ';
        missingSingleQuotes = 'MATLAB 문자형 배열로 처리하기 위해 문자열 <code>${1}</code> 은(는) 작은따옴표 ('''')로 묶어야 합니다. ';
        squareBracketForArrayAccess = '배열 내 요소에 액세스하기 위해 []를 사용했다면 MATLAB은 ()를 사용한다는 것을 기억하기 바랍니다. ';
        shouldCallAFunction = '<code>${1}</code> 함수를 사용해야 합니다. ';
        shouldNotCallAFunction = '<code>${1}</code> 함수를 사용할 필요가 없습니다. ';
        shouldIndexIntoVariable = '<code>${1}</code> 변수를 인덱싱해야 합니다. ';
        shouldNotIndexIntoVariable = '<code>${1}</code> 변수를 인덱싱할 필요가 없습니다. ';
        shouldUseVariable = '<code>${1}</code> 변수를 사용해야 합니다. ';
        shouldNotUseVariable = '<code>${1}</code> 변수를 사용할 필요가 없습니다. ';
        shouldModifyVariable = '<code>${1}</code> 변수를 수정해야 합니다. ';
        shouldNotModifyVariable = '<code>${1}</code> 변수를 수정할 필요가 없습니다. ';
        shouldExtractContentFrom = '<code>${1}</code> 배열로부터 요소들을 추출하기 위해 중괄호를 사용해야 합니다. ';
        shouldNotExtractContentFrom = '<code>${1}</code> 배열로부터 요소들을 추출할 필요가 없습니다. ';
        shouldModifyContentWithin = '<code>${1}</code> 배열 내 요소들을 수정하기 위해 중괄호를 사용해야 합니다. ';
        shouldNotModifyContentWithin = '<code>${1}</code> 배열 내 요소들을 수정할 필요가 없습니다. ';
        functionCallShouldUseParentheses = '<code>${1}</code> 함수에 입력 인수를 전달하기 위해 소괄호 <code>()</code>를 사용해야 합니다. ';
        indexShouldUseParentheses = '<code>${1}</code> 변수를 인덱싱하기 위해 소괄호 <code>()</code>를 사용해야 합니다. ';
        indexShouldUseCurlyBraces = '<code>${1}</code> 변수를 인덱싱하기 위해 중괄호 <code>{}</code>를 사용해야 합니다. ';
        callShouldHaveDifferentNumberOfInputs = '<code>${1}</code> 함수를 호출하기 위해서는 ${2} 개의 입력 인수를 전달해야 합니다. ';
        indexShouldHaveDifferentNumberOfInputs = '<code>${1}</code> 변수에 인덱싱하기 위해서는 ${2} 개의 입력 인수가 고려되어야 합니다. ';
        inputsAreIncorrect = '<code>${1}</code> 의 입력 인수들이 정확하지 않습니다. ';
        inputWasExpectedToBeDifferent = '${1} 입력 인수는 <code>${2}</code> 값으로 예상됩니다. ';
        inputArgumentIsNotInCorrectSpot = '<code>${1}</code> 의 입력 인수는 ${3} 이(가) 아닌 ${2} (으)로 예상됩니다. ';
        noNeedToObtainMultipleOutputArguments = '다중 출력을 얻을 필요가 없습니다. ';
        shouldObtainMultipleOutputArguments = '다중 출력을 얻기 위해 대괄호 (<code>[]</code>)를 사용해 보십시오. ';
        noNeedToManuallyCreateArray = '대괄호 (<code>[]</code>)를 사용하여 수동으로 배열을 생성할 필요가 없습니다. ';
        shouldManuallyCreateArray = '수동으로 배열을 생성하기 위해 대괄호를 사용해 보십시오 (<code>[3 5 8]</code>). ';
        noNeedToRemoveArrayElements = '배열 내 요소들을 제거할 필요가 없습니다 (<code>... = []</code>). ';
        shouldRemoveArrayElements = '빈 배열을 할당하는 방법을 이용하여 배열 내 요소들을 제거해 보십시오 (<code>... = []</code>). ';
        noNeedToCreateAnEmptyArray = '빈 배열을 생성할 필요가 없습니다 (<code>[]</code>). ';
        shouldCreateAnEmptyArray = '빈 배열을 생성해 보십시오 (<code>[]</code>). ';
        noNeedToManuallyCreateCellArray = '중괄호 (<code>{}</code>)를 사용하여 수동으로 셀 배열을 생성할 필요가 없습니다. ';
        shouldManuallyCreateCellArray = '수동으로 셀 배열을 생성하기 위해 중괄호를 사용해 보십시오 (<code>{3 ''foo'' 8}</code>). ';
        noNeedToCreateEmptyCellArray = '빈 셀 배열 (<code>{}</code>)을 생성할 필요가 없습니다. ';
        shouldCreateEmptyCellArray = '빈 셀 배열 (<code>{}</code>)을 생성해 보십시오. ';
        incorrectUseOfMultipleOutputArgs = '출력 인수 표현이 잘못되었습니다. ';
        incorrectUseOfManuallyCreatingArrays = '대괄호 (<code>[]</code>)를 사용하여 생성되는 배열이 잘못되었습니다. ';
        incorrectUseOfRemovingArrayElements = '배열 내 요소들이 제거되는 방식이 잘못되었습니다. ';
        incorrectUseOfCreatingEmptyArray = '배열 내 요소들이 생성되는 방식이 잘못되었습니다. ';
        incorrectUseOfManuallyCreatingCellArrays = '중괄호 (<code>{}</code>)를 사용하여 생성되는 셀 배열이 잘못되었습니다. ';
        incorrectUseOfCreatingEmptyCellArray = '빈 셀 배열이 잘못 생성되었습니다. ';
        expectedMRows = '${1} 개의 행(들)이 예상됩니다. ';
        rowSeparationTip = '행들을 구분하기 위해 세미콜론 (<code>;</code>)을 사용할 수 있음을 기억하십시오. ';
        expectedNColumns = '${1} 행은 ${2} 개의 열(들)이 예상됩니다. ';
        columnSeparationTip = '열들을 구분하기 위해 콤마 (<code>,</code>)를 사용할 수 있음을 기억하십시오. ';
        expectedDifferentRowArgument = '${2} 행의 ${1}은(는) <code>${3}</code> (으)로 예상됩니다. ';
        switchedArgumentOrderInRow = '${1} 행에서 <code>${2}</code>은(는) ${3} 이(가) 되어야 합니다. ';
        shouldNotUseColon = '콜론 (<code>:</code>) 연산자를 사용할 필요가 없습니다. ';
        useColonToAccessAllElements = '배열 내 모든 요소들에 액세스하기 위해 콜론 연산자 (<code>${1}</code>) (을)를 사용해 보십시오. ';
        useColonToAccessAllRows = '모든 행에 액세스하기 위해 콜론 연산자 (<code>${1}</code>) (을)를 사용해 보십시오. ';
        useColonToAccessAllColumns = '모든 열에 액세스하기 위해 콜론 연산자 (<code>${1}</code>) (을)를 사용해 보십시오. ';
        useColonToAccessAllElementsOfADimension = '특정 차원의 모든 요소들에 액세스하기 위해 콜론 연산자 (<code>${1}</code>) (을)를 사용해 보십시오. ';
        useColonToCreateVector = '벡터를 생성하기 위해 콜론 연산자 (<code>${1}</code>) (을)를 사용해 보십시오. ';
        needToUseALoneColon = '모든 행 또는 모든 열을 선택하기 위해 단일 콜론 (<code>${1}</code>) 을(를) 사용합니다. ';
        needToSpecifyInitialAndFinalValue = '벡터의 첫 번째 및 마지막 인덱스에 할당된 값은 콜론 (<code>${1}</code>) 연산자로 구분되어야 합니다. ';
        badStartValueInColonExpression = '벡터의 첫 번째 인덱스에 할당된 값은 <code>${1}</code> 이어야 합니다. ';
        badSpacingValueInColonExpression = '벡터 내 각 요소들의 간격은 <code>${1}</code> 이어야 합니다. ';
        badEndValueInColonExpression = '벡터의 마지막 인덱스에 할당된 값은 <code>${1}</code> 이어야 합니다. ';
        unnecessaryStatement = '<code>${1}</code> 명령문을 사용할 필요가 없습니다. ';
        missingStatement = '<code>${1}</code> 명령문을 사용합니다. ';
        noNeedToUseDotOperator = '점(dot) 연산자를 사용할 필요가 없습니다 (<code>a.b</code>). ';
        shouldUseDotOperator = '점(dot) 연산자를 사용해 보십시오 (<code>a.b</code>). ';
        useDotOperatorOnVariable = '<code>${1}</code> 변수의 필드를 참조해야 합니다 (점 연산자를 사용해 보십시오).';
        checkVariableNameCapitalization = '변수 이름의 대소문자를 확인합니다. ';
        useDotOperatorForField = '속성 <code>${1}</code> 을(를) 참조하기 위해 점(dot) 연산자 (<code>.</code>)를 사용합니다. ';
        noAssignmentNecessary = '출력 변수에 값을 할당할 필요가 없습니다. ';
        shouldUseAssignment = '<code>${1}</code>에 값을 할당해야 합니다. ';
        valueAssignedIncorrect = '할당된 값이 정확하지 않습니다. ';
        wrongVariableInAssignment = '<code>${1}</code> 에 값을 할당해야 합니다. ';
        switchedAssignmentOrder = '할당된 입력 인수들을 치환합니다. 그것들은 <code>${1}</code> 이어야 합니다. ';
        valueBeingAssignedShouldBeOutput = '할당된 값 ( <code>${1}</code> ) 은(는) 출력 인수이어야 합니다. ';
        outputShouldBeValueBeingAssigned = '출력 인수 ( <code>${1}</code> ) 에는 값이 할당되어야 합니다. ';
        anonymousFunction = '익명 함수';
        anonymousFunctionUnnecessary = '${1} 익명 함수를 사용할 필요가 없습니다. ';
        tryUsingAnonymousFunction = '${1} 익명 함수를 사용해 보십시오. ';
        anonFunctionHasWrongNumInputs = '익명 함수에는 ${1} 개의 입력이 포함되어야 합니다. ';
        noNeedToUseOperator = '${1} (<a target="_blank" href="${2}">${3}</a>) 을(를) 사용할 필요가 없습니다. ';
        shouldUseOperator = '${1} (<a target="_blank" href="${2}">${3}</a>) 을(를) 사용해야 합니다. ';
        left = '왼쪽';
        right = '오른쪽';
        badOperatorArgument = '${2} 에 대한 입력 ${1} 은(는) <code>${3}</code> 이어야 합니다. ';
        switchedBothOperatorArguments = '${1} 에 대한 입력들이 바뀌었습니다. 입력들은 <code>${2}</code> 이어야 합니다. ';        
        switchedOneOperatorArgument = '${2} 에 대한 입력 ${1} 은(는) ( <code>${3}</code> ) ${4} 이(가) 되어야 합니다. ';
        shouldUseInt = '<code>${1}</code> 에는 정수 값을 포함해야 합니다. ';
        noNeedToUseInt = '<code>${1}</code> 에는 정수 값을 포함할 필요가 없습니다. ';
        shouldUseDouble = '<code>${1}</code> 에는 숫자 값을 포함해야 합니다. ';
        noNeedToUseDouble = '<code>${1}</code> 에는 숫자 값을 포함할 필요가 없습니다. ';
        shouldUseString = '<code>${1}</code> 에는 문자형 배열을 포함해야 합니다. ';
        noNeedToUseString = '<code>${1}</code> 에는 문자형 배열을 포함할 필요가 없습니다. ';
        shouldUseId = '<code>${1}</code> 식별자를 사용해야 합니다. ';
        noNeedToUseId = '<code>${1}</code> 식별자를 사용할 필요가 없습니다. ';

        variableHasIncorrectDimensions = '<code>${1}</code> 변수가 잘못된 차원을 가지고 있습니다. <br/>예상 크기: [${2}] <br/>실제 크기: [${3}]';
        variableHasIncorrectDataType = '<code>${1}</code> 변수가 잘못된 데이터형을 가지고 있습니다. <br/>예상 유형: [${2}] <br/>실제 유형: [${3}]'; 
        variableIsIncorrect = '<code>${1}</code> 변수가 잘못되었습니다. ';
        checkCapitalizationOfCharacters = '<code>${1}</code> 문자열에서 각 문자의 대소문자를 확인하시기 바랍니다. ';
        stateDesiredValue = '<code>${1}</code> 에 대해 원하는 값: ${2} <br/>실제 값: ${3}';
        variableWasNotCreated = '<code>${1}</code> 변수가 생성되지 않았습니다. ';
        checkMisspelledVariableName = '<code>${1}</code> 변수 이름에서 철자가 잘못되었는지 확인하시기 바랍니다. ';
        scalarValueDifference = '이 값은 원하는 값과 <code>${1}</code> 정도가 다릅니다. ';
        nonscalarValueDifference = '하나 이상의 요소는 원하는 값과 <code>${1}</code> 정도가 다릅니다. ';
        missingStructField = '구조체에서 <code>${1}</code> 필드가 누락되었습니다. ';
        missingSeveralStructFields = '구조체에서 다음 필드들이 누락됨: <code>${1}</code>. ';
        checkMisspelledFieldName = '${1} 필드 이름의 철자가 잘못되었는지 확인하시기 바랍니다. ';
        checkMisspelledFieldNameGeneric = '필드 이름들의 철자가 잘못되었는지 확인하시기 바랍니다. ';
        checkFieldValue = '다음 필드의 값을 확인함: ${1}';
        incorrectTableVariableOrder = '테이블 내 변수들의 순서가 올바르지 않습니다. ';
        tableVariableCapitalizationIssue = '테이블 내 변수 이름들은 대/소문자를 구분합니다. 적절한 이름이 지정되었는지 확인하시기 바랍니다. ';
        checkTableVariableValues = '테이블 내 다음 변수들의 값들을 확인함: ${1}';
    end

end

