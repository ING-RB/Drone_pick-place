<!--Copyright 2013-2023 The MathWorks, Inc. -->
<compiler_configuration>
  <compiler_names>
    <name>c(c|x)(int|lnx|tx|vel|vx)?tri</name>
    <name>c(c|x)(int|lnx|tx|vel|vx)?(v|rh)850(e)?</name>
    <name>c(c|x)(int|lnx|tx|vel|vx)?ppc</name>
    <name>c(c|x)(int|lnx|tx|vel|vx)?86</name>
    <name>c(c|x)(int|lnx|tx|vel|vx)?arm64</name>
    <name>c(c|x)(int|lnx|tx|vel|vx)?(arm|thumb)</name>
  </compiler_names>
  <include_options>
    <opt>-I</opt>
  </include_options>
  <system_include_options>
    <opt numArgs="1">-c_include_directory</opt>
    <opt numArgs="1">-sys_include_directory</opt>
    <opt numArgs="1">--sys_include_directory</opt>
    <opt numArgs="1">-std_cxx_include_directory</opt>
    <opt numArgs="1">-rtos_include_directory directory</opt>
  </system_include_options>
  <preinclude_options>
    <opt>-include</opt>
  </preinclude_options>
  <define_options>
    <opt>-D</opt>
  </define_options>
  <undefine_options>
    <opt>-U</opt>
  </undefine_options>
  <options_file_options>
    <opt>@</opt>
  </options_file_options>
  <output_options>
    <opt>-o</opt>
    <opt>--output</opt>
  </output_options>
  <standard_options>
    <std version="c90" c_default="1"></std>
    <std version="c99">-c99</std>
    <std version="c11">-c11</std>
    <std version="c17">-c17</std>
    <std version="c++03" cpp_default="1">-std=c++03</std>
    <std version="c++11">--c++11</std>
    <std version="c++14">--c++14</std>
    <std version="c++17">--c++17</std>
    <std version="c++20">--c++20</std>
  </standard_options>
  <source_options>
    <opt>-filetype.c</opt> <!-- c files -->
    <opt>-filetype.ci</opt>
    <opt>-filetype.C</opt> <!-- c++ files -->
    <opt>-filetype.cc</opt>
    <opt>-filetype.cpp</opt>
    <opt>-filetype.cxx</opt>
  </source_options>
  <semantic_options>
    <opt numArgs="1">-act_like</opt>
    <opt>-align4</opt>
    <opt>-align8</opt>
    <opt>--alternative_tokens</opt>
    <opt>-AltiVec</opt>
    <opt>--anachronisms</opt>
    <opt>-ANSI</opt>
    <opt>-ansi</opt>
    <opt>-ansi_alias</opt>
    <opt numArgs="1">-act_like</opt>
    <opt>--arm</opt>
    <opt>-arm_uk_asm</opt>
    <opt>--array_assignment</opt>
    <opt>--auto_instantiation</opt>
    <opt>--auto_type</opt>
    <opt>--be8</opt>
    <opt>--be32</opt>
    <opt>-bigendian</opt>
    <opt>--bool</opt>
    <opt>-bigswitch</opt>
    <opt numArgs="1">-bsp</opt>
    <opt>-C</opt>
    <opt>-C99</opt>
    <opt>-c99</opt>
    <opt>-c11</opt>
    <opt>-c17</opt>
    <opt>-c18</opt>
    <opt>--c++11</opt>
    <opt>--c++14</opt>
    <opt>--c++17</opt>
    <opt>--c++20</opt>
    <opt>--c_and_cpp_functions_are_distinct</opt>
    <opt numArgs="1">--coding_standard</opt>
    <opt>--c_style_numeric_constants</opt>
    <opt numArgs="1">-check</opt>
    <opt>-codefactor</opt>
    <opt>--commons</opt>
    <opt numArgs="1">-coverage</opt>
    <opt numArgs="1">-cpu</opt>
    <opt>--defer_parse_function_templates</opt>
    <opt>--dep_name</opt>
    <opt>--disable_ctors_dtors</opt>
    <opt>--disable_noinline</opt>
    <opt>-dotciscxx</opt>
    <opt>--e</opt>
    <opt>-e500_inst_fix</opt>
    <opt>-e500_inst_fix2</opt>
    <opt>--ee</opt>
    <opt>--enable_ctors_dtors</opt>
    <opt>--enable_noinline</opt>
    <opt>--exceptions</opt>
    <opt>--export</opt>
    <opt isPrefix="1">-f</opt>
    <opt isUnsupported="1" isIgnored="1">-filetype.asm</opt>
    <opt isUnsupported="1" isIgnored="1">-filetype.s</opt>
    <opt isUnsupported="1" isIgnored="1">-filetype.800</opt>
    <opt>--force_vtbl</opt>
    <opt>--g++</opt>
    <opt>-G</opt>
    <opt>-ga</opt>
    <opt>-g</opt>
    <opt>-gcc</opt>
    <opt numArgs="1">--ghstd</opt>
    <opt>-gs</opt>
    <opt numArgs="1">-globalreg</opt>
    <opt>-gnu99</opt>
    <opt numArgs="1">--gnu_version</opt>
    <opt>--guiding_decls</opt>
    <opt>--hybrid_one_instantiation_per_object</opt>
    <opt>-host64</opt>
    <opt>--implicit_include</opt>
    <opt>--implicit_typename</opt>
    <opt>--inline_tiny_functions</opt>
    <opt>--inlining</opt>
    <opt>--inlining_unless_debug</opt>
    <opt>--instantiate_extern_inline</opt>
    <opt>-japanese_automotive_c</opt>
    <opt numArgs="1">-kanji</opt>
    <opt>--keep_static_symbols</opt>
    <opt numArgs="1">-kernel</opt>
    <opt>-k+r</opt>
    <opt numArgs="1">-language</opt>
    <opt>--large_vtbl_offsets</opt>
    <opt>--link_once_templates</opt>
    <opt>-littleendian</opt>
    <opt>--long_long</opt>
    <opt>--max_inlining</opt>
    <opt numArgs="1">--misra_2004</opt>
    <opt>--max_inlining_unless_debug</opt>
    <opt>-multiple</opt>
    <opt>--namespaces</opt>
    <opt>-misalign_pack</opt>
    <opt>--new_inside_of_constructor</opt>
    <opt>--new_outside_of_constructor</opt>
    <opt>--new_style_casts</opt>
    <opt>--no_alternative_tokens</opt>
    <opt>-noAltiVec</opt>
    <opt>-no_ansi_alias</opt>
    <opt>-no_arm_uk_asm</opt>
    <opt>--no_bool</opt>
    <opt>-no_codefactor</opt>
    <opt>--no_comments</opt>
    <opt>--no_debug</opt>
    <opt>--no_defer_parse_function_templates</opt>
    <opt>--no_dep_name</opt>
    <opt>-no_e500_inst_fix</opt>
    <opt>-no_e500_inst_fix2</opt>
    <opt>--no_exceptions</opt>
    <opt>--no_export</opt>
    <opt>-nofloatsingle</opt>
    <opt>--no_guiding_decls</opt>
    <opt>-no_host64</opt>
    <opt>--no_implicit_include</opt>
    <opt>--no_implicit_typename</opt>
    <opt>--no_inlining</opt>
    <opt>--no_instantiate_extern_inline</opt>
    <opt>-no_japanese_automotive_c</opt>
    <opt>--no_keep_static_symbols</opt>
    <opt>--no_large_vtbl_offsets</opt>
    <opt>--no_link_once_templates</opt>
    <opt>--no_long_long</opt>
    <opt>-no_misalign_pack</opt>
    <opt>-no_multiple</opt>
    <opt>--no_namespaces</opt>
    <opt>--no_new_style_casts</opt>
    <opt>--no_old_specializations</opt>
    <opt>--no_one_instantiation_per_object</opt>
    <opt>--no_parse_templates</opt>
    <opt>-no_precise_signed_zero</opt>
    <opt>--no_prelink_objects</opt>
    <opt>--no_readonly_typeinfo</opt>
    <opt>--no_readonly_virtual_tables</opt>
    <opt>--no_restrict</opt>
    <opt>--no_rtti</opt>
    <opt>--no_short_enum</opt>
    <opt>--no_slash_comment</opt>
    <opt>-noSPE</opt>
    <opt>-nostddef</opt>
    <opt>-nostdinc</opt>
    <opt>-no_thumb</opt>
    <opt>-no_timer_profile</opt>
    <opt>-no_undefined</opt>
    <opt>--no_unsafe_predefines</opt>
    <opt>--no_using_std</opt>
    <opt>--no_vla</opt>
    <opt isPrefix="true">-O</opt>
    <opt>--old_specializations</opt>
    <opt>--one_instantiation_per_object</opt>
    <opt numArgs="1">--option</opt>
    <opt isUnsupported="1" numArgs="1">-os_dir</opt>
    <opt numArgs="1">-pack</opt>
    <opt>--parse_templates</opt>
    <opt>-ppc32</opt>
    <opt>-ppc64</opt>
    <opt>-precise_signed_zero</opt>
    <opt numArgs="1">-prelink_against</opt>
    <opt>--prelink_objects</opt>
    <opt>--prototype_errors</opt>
    <opt>--prototype_silent</opt>
    <opt>--prototype_warnings</opt>
    <opt>--range_based_for</opt>
    <opt>--readonly_typeinfo</opt>
    <opt>--readonly_virtual_tables</opt>
    <opt>--restrict</opt>
    <opt>--rtti</opt>
    <opt>--short_enum</opt>
    <opt>--signed_chars</opt>
    <opt>--signed_fields</opt>
    <opt>--signed_pointer</opt>
    <opt>--slash_comment</opt>
    <opt>-SPE</opt>
    <opt>--standard_vtbl</opt>
    <opt>-stddef</opt>
    <opt>-stdinc</opt>
    <opt isPrefix="true">-std=</opt>
    <opt>--suppress_vtbl</opt>
    <opt>-syntax</opt>
    <opt>-thumb</opt>
    <opt>-time32</opt>
    <opt>-time64</opt>
    <opt>-timer_profile</opt>
    <opt>-undefined</opt>
    <opt>--unsafe_predefines</opt>
    <opt>--unsigned_chars</opt>
    <opt>--unsigned_fields</opt>
    <opt>--unsigned_pointer</opt>
    <opt>--using_std</opt>
    <opt>--vla</opt>
    <opt isPrefix="true">-W</opt>
    <opt>-wchar_s32</opt>
    <opt>-wchar_u16</opt>
    <opt isPrefix="true">-X</opt>
    <opt>-x86_64</opt>
    <opt isPrefix="true">-Y</opt>
    <opt isPrefix="true">-Z</opt>
  </semantic_options>
  <switch>
    <case>
      <condition>
        <or>
          <macro_defined name="__x86_64"/>
          <macro_defined name="__x86_64__"/>
        </or>
      </condition>
      <actions>
        <target_name>x86_64</target_name>
      </actions>
    </case>
    <case>
      <condition>
        <macro_defined name="__ARM64__"/>
      </condition>
      <actions>
        <target_name>arm64</target_name>
      </actions>
    </case>
    <case>
      <condition>
        <or>
          <macro_defined name="__ARM"/>
          <macro_defined name="__ARM__"/>
          <macro_defined name="__arm__"/>
        </or>
      </condition>
      <actions>
        <target_name>arm</target_name>
      </actions>
    </case>
    <case>
      <condition>
        <or>
          <macro_defined name="__i386"/>
          <macro_defined name="__i386__"/>
        </or>
      </condition>
      <actions>
        <target_name>i386</target_name>
      </actions>
    </case>
    <case>
      <condition>
        <macro_defined name="__PPC64__"/>
      </condition>
      <actions>
        <target_name>powerpc64</target_name>
      </actions>
    </case>
    <case>
      <condition>
        <or>
          <macro_defined name="__PowerPC"/>
          <macro_defined name="__PowerPC__"/>
          <macro_defined name="__powerpc__"/>
          <macro_defined name="__ppc"/>
          <macro_defined name="__ppc__"/>
        </or>
      </condition>
      <actions>
        <target_name>powerpc</target_name>
      </actions>
    </case>
    <case>
      <condition>
        <or>
          <macro_defined name="__Tricore"/>
          <macro_defined name="__Tricore__"/>
        </or>
      </condition>
      <actions>
        <target_name>tricore</target_name>
      </actions>
    </case>
    <case>
      <condition>
        <or>
          <macro_defined name="__V810"/>
          <macro_defined name="__V850E"/>
          <macro_defined name="__V850E__"/>
          <macro_defined name="__v800"/>
          <macro_defined name="__v800__"/>
          <macro_defined name="__v850"/>
          <macro_defined name="__v850__"/>
          <macro_defined name="__v850e__"/>
          <macro_defined name="__v851__"/>
          <macro_defined name="__RH850"/>
          <macro_defined name="__RH850__"/>
        </or>
      </condition>
      <actions>
        <target_name>rh850</target_name>
      </actions>
    </case>
  </switch>
  <preprocess_options_list>
    <opt>-E</opt>
  </preprocess_options_list>
  <preprocess_dollar_macros>yes</preprocess_dollar_macros>
  <forbidden_macros_list></forbidden_macros_list>
  <compile_options_list>
    <opt>-c</opt>
  </compile_options_list>
  <compiler>greenhills</compiler>
  <src_extensions>
    <ext>c</ext>
    <ext>C</ext>
    <ext>cc</ext>
    <ext>cp</ext>
    <ext>cxx</ext>
    <ext>cpp</ext>
    <ext>c++</ext>
  </src_extensions>
  <obj_extensions>
    <ext>o</ext>
  </obj_extensions>
  <precompiled_header_extensions>
    <ext>gch</ext>
  </precompiled_header_extensions>
  <sources_to_ignore>ind_.*\.c.*</sources_to_ignore>
  <include_strategy>sniff</include_strategy>
  <default_macro_strategy>from-compiler</default_macro_strategy>
  <from_compiler_macro_strategy>
    <input>
      <opt>-dM</opt>
      <opt>-E</opt>
      <empty_source_file>true</empty_source_file>
    </input>
    <output>
      <regex name_group="1" value_group="5">^#\s*define\s+(([^\s]*(\(.*\)))|([^\s]*))\s+(.*)?$</regex>
    </output>
  </from_compiler_macro_strategy>
  <semantic_options>
    <opt isIgnored="true" removePhases="build_config">-c</opt>
  </semantic_options>
</compiler_configuration>
