<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright 2021 The MathWorks, Inc. -->
<tags xmlns="http://www.mathworks.com/PolyspaceInternalProperties">

  <file_scope>
    <parameter name="disable_if_library" value="std_string"/>
  </file_scope>

  <tag id="std_basic_string_string" kind="function" user_name="std::basic_string::basic_string" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_basic_string_~string" kind="function" user_name="std::basic_string::~basic_string" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_basic_string_operator=" kind="function" user_name="std::basic_string::operator=" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">RETURN_THIS</property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>

  <tag id="std_basic_string_begin" kind="function" user_name="std::basic_string::begin" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="rule">RETURNS_ITERATOR</property>
    </properties>
  </tag>


  <tag id="std_basic_string_end" kind="function" user_name="std::basic_string::end" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="rule">RETURNS_ITERATOR</property>
    </properties>
  </tag>


  <tag id="std_basic_string_rbegin" kind="function" user_name="std::basic_string::rbegin" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="rule">RETURNS_ITERATOR</property>
    </properties>
  </tag>


  <tag id="std_basic_string_rend" kind="function" user_name="std::basic_string::rend" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="rule">RETURNS_ITERATOR</property>
    </properties>
  </tag>


  <tag id="std_basic_string_cbegin" kind="function" user_name="std::basic_string::cbegin" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="rule">RETURNS_ITERATOR</property>
    </properties>
  </tag>


  <tag id="std_basic_string_cend" kind="function" user_name="std::basic_string::cend" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="rule">RETURNS_ITERATOR</property>
    </properties>
  </tag>


  <tag id="std_basic_string_crbegin" kind="function" user_name="std::basic_string::crbegin" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="rule">RETURNS_ITERATOR</property>
    </properties>
  </tag>


  <tag id="std_basic_string_crend" kind="function" user_name="std::basic_string::crend" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_basic_string_size" kind="function" user_name="std::basic_string::size" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="rule">CONTAINER_SIZE</property>
    </properties>
  </tag>


  <tag id="std_basic_string_length" kind="function" user_name="std::basic_string::length" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_basic_string_max_size" kind="function" user_name="std::basic_string::max_size" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_basic_string_resize" kind="function" user_name="std::basic_string::resize" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_basic_string_capacity" kind="function" user_name="std::basic_string::capacity" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_basic_string_reserve" kind="function" user_name="std::basic_string::reserve" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_basic_string_clear" kind="function" user_name="std::basic_string::clear" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="rule">INVALIDATES_ITERATORS_REFERENCES</property>
      <property kind="rule">CONTAINER_CLEAR</property>
    </properties>
  </tag>


  <tag id="std_basic_string_empty" kind="function" user_name="std::basic_string::empty" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="rule">PS_INTERNAL_CONTAINER_OPERATION_RESULT_NOT_USED</property>
    </properties>
  </tag>


  <tag id="std_basic_string_shrink_to_fit" kind="function" user_name="std::basic_string::shrink_to_fit" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_basic_string_operator[]" kind="function" user_name="std::basic_string::operator[]" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="rule">RETURNS_REFERENCE</property>
    </properties>
  </tag>


  <tag id="std_basic_string_at" kind="function" user_name="std::basic_string::at" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="rule">RETURNS_REFERENCE</property>
    </properties>
  </tag>


  <tag id="std_basic_string_back" kind="function" user_name="std::basic_string::back" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="rule">RETURNS_REFERENCE</property>
    </properties>
  </tag>


  <tag id="std_basic_string_front" kind="function" user_name="std::basic_string::front" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="rule">RETURNS_REFERENCE</property>
    </properties>
  </tag>


  <tag id="std_basic_string_operator+=" kind="function" user_name="std::basic_string::operator+=" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">RETURN_THIS</property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
      <property kind="rule">RETURNS_REFERENCE</property>
      <property kind="rule">INVALIDATES_ITERATORS_REFERENCES</property>
    </properties>
  </tag>

  <tag id="std_basic_string_append" kind="function" user_name="std::basic_string::append" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">RETURN_THIS</property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
      <property kind="rule">RETURNS_REFERENCE</property>
    </properties>
  </tag>


  <tag id="std_basic_string_push_back" kind="function" user_name="std::basic_string::push_back" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_basic_string_assign" kind="function" user_name="std::basic_string::assign" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">RETURN_THIS</property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_basic_string_insert" kind="function" user_name="std::basic_string::insert" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">RETURN_THIS</property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
      <property kind="rule">INVALIDATES_ITERATORS_REFERENCES</property>
      <property kind="rule">RETURNS_REFERENCE</property>
      <property kind="rule">RETURNS_ITERATOR</property>
    </properties>
  </tag>


  <tag id="std_basic_string_erase" kind="function" user_name="std::basic_string::erase" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">RETURN_THIS</property>
      <property kind="rule">RETURNS_REFERENCE</property>
      <property kind="rule">RETURNS_ITERATOR</property>
      <property kind="rule">INVALIDATES_ITERATORS_REFERENCES</property>
    </properties>
  </tag>


  <tag id="std_basic_string_replace" kind="function" user_name="std::basic_string::replace" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">RETURN_THIS</property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
      <property kind="rule">RETURNS_REFERENCE</property>
      <property kind="rule">INVALIDATES_ITERATORS_REFERENCES</property>
    </properties>
  </tag>


  <tag id="std_basic_string_swap" kind="function" user_name="std::basic_string::swap" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="rule">INVALIDATES_ITERATORS_REFERENCES</property>
    </properties>
  </tag>


  <tag id="std_basic_string_pop_back" kind="function" user_name="std::basic_string::pop_back" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_basic_string_c_str" kind="function" user_name="std::basic_string::c_str" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="rule">RETURNS_REFERENCE</property>
    </properties>
  </tag>


  <tag id="std_basic_string_data" kind="function" user_name="std::basic_string::data" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="rule">RETURNS_REFERENCE</property>
    </properties>
  </tag>


  <tag id="std_basic_string_get_allocator" kind="function" user_name="std::basic_string::get_allocator" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_basic_string_copy" kind="function" user_name="std::basic_string::copy" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_basic_string_find" kind="function" user_name="std::basic_string::find" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING2</property>
    </properties>
  </tag>


  <tag id="std_basic_string_rfind" kind="function" user_name="std::basic_string::rfind" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING2</property>
    </properties>
  </tag>


  <tag id="std_basic_string_find_first_of" kind="function" user_name="std::basic_string::find_first_of" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING2</property>
    </properties>
  </tag>


  <tag id="std_basic_string_find_last_of" kind="function" user_name="std::basic_string::find_last_of" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING2</property>
    </properties>
  </tag>


  <tag id="std_basic_string_find_first_not_of" kind="function" user_name="std::basic_string::find_first_not_of" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING2</property>
    </properties>
  </tag>


  <tag id="std_basic_string_find_last_not_of" kind="function" user_name="std::basic_string::find_last_not_of" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING2</property>
    </properties>
  </tag>


  <tag id="std_basic_string_substr" kind="function" user_name="std::basic_string::substr" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_basic_string_compare" kind="function" user_name="std::basic_string::compare" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>

  <tag id="std_string_operator_lit" kind="function" user_name="std::string_literals::operator &quot;&quot;s">
    <properties>
      <property kind="skip_body"></property>
      <!-- no check : only called on string litteral -->
    </properties>
  </tag>

  <tag id="std_string_operator_string_view" kind="function" user_name="std::basic_string::operator std::basic_string_view" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>

  <!--- function instances with std::string -->

  <tag id="std_string_operator1" kind="function" user_name="std::operator+" type="std::string(const std::string&amp;, const std::string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>

  <tag id="std_string_operator2" kind="function" user_name="std::operator+" type="std::string(std::string&amp;&amp;, std::string&amp;&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>

  <tag id="std_string_operator3" kind="function" user_name="std::operator+" type="std::string(std::string&amp;&amp;, const std::string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_string_operator4" kind="function" user_name="std::operator+" type="std::string(const std::string&amp;, std::string&amp;&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>

  <tag id="std_string_operator5" kind="function" user_name="std::operator+" type="std::string(const std::string&amp;, const char*)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>

  <tag id="std_string_operator6" kind="function" user_name="std::operator+" type="std::string(std::string&amp;&amp;, const char*)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>

  <tag id="std_string_operator7" kind="function" user_name="std::operator+" type="std::string(const char*, const std::string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>

  <tag id="std_string_operator8" kind="function" user_name="std::operator+" type="std::string(const char*, std::string&amp;&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>

  <tag id="std_string_operator9" kind="function" user_name="std::operator+" type="std::string(const std::string&amp;, char)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>

  <tag id="std_string_operator10" kind="function" user_name="std::operator+" type="std::string(std::string&amp;&amp;, char)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>

  <tag id="std_string_operator11" kind="function" user_name="std::operator+" type="std::string(char, const std::string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>

  <tag id="std_string_operator12" kind="function" user_name="std::operator+" type="std::string(char, std::string&amp;&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_string_operator_rshift" kind="function" user_name="std::operator&lt;&lt;" type="std::ostream&amp;(std::ostream&amp;, const std::string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <!-- standard stubbing will make it return first argument -->
    </properties>
  </tag>


  <tag id="std_string_operator>>" kind="function" user_name="std::operator>>" type="std::istream&amp;(std::istream&amp;, std::string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="rule">INVALIDATES_ITERATORS_REFERENCES</property>
       <!-- standard stubbing will make it return first argument -->
    </properties>
  </tag>


  <tag id="std_string_swap" kind="function" user_name="std::swap" type="void(std::string&amp;, std::string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_string_operator13" kind="function" user_name="std::operator==" type="bool(const std::string&amp;, const std::string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_string_operator14" kind="function" user_name="std::operator==" type="bool(const char*, const std::string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_string_operator15" kind="function" user_name="std::operator==" type="bool(const std::string&amp;, const char*)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_string_operator16" kind="function" user_name="std::operator!=" type="bool(const std::string&amp;, const std::string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_string_operator17" kind="function" user_name="std::operator!=" type="bool(const char*, const std::string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>

  <tag id="std_string_operator18" kind="function" user_name="std::operator!=" type="bool(const std::string&amp;, const char*)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_string_operator19" kind="function" user_name="std::operator&lt;" type="bool (const std::string&amp;, const std::string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_string_operator20" kind="function" user_name="std::operator&lt;" type="bool (const char*, const std::string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_string_operator21" kind="function" user_name="std::operator&lt;" type="bool (const std::string&amp;, const char*)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_string_operator22" kind="function" user_name="std::operator&lt;=" type="bool(const std::string&amp;, const std::string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_string_operator23" kind="function" user_name="std::operator&lt;=" type="bool(const char*, const std::string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_string_operator24" kind="function" user_name="std::operator&lt;=" type="bool(const std::string&amp;, const char*)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_string_operator25" kind="function" user_name="std::operator>" type="bool (const std::string&amp;, const std::string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_string_operator26" kind="function" user_name="std::operator>" type="bool (const char*, const std::string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_string_operator27" kind="function" user_name="std::operator>" type="bool (const std::string&amp;, const char*)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_string_operator28" kind="function" user_name="std::operator>=" type="bool(const std::string&amp;, const std::string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_string_operator29" kind="function" user_name="std::operator>=" type="bool(const char*, const std::string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_string_operator30" kind="function" user_name="std::operator>=" type="bool(const std::string&amp;, const char*)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


    <!--- function instances with std::wstring -->
  <tag id="std_wstring_operator1" kind="function" user_name="std::operator+" type="std::wstring(const std::wstring&amp;, const std::wstring&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>

  <tag id="std_wstring_operator2" kind="function" user_name="std::operator+" type="std::wstring(std::wstring&amp;&amp;, std::wstring&amp;&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_wstring_operator3" kind="function" user_name="std::operator+" type="std::wstring(std::wstring&amp;&amp;, const std::wstring&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_wstring_operator4" kind="function" user_name="std::operator+" type="std::wstring(const std::wstring&amp;, std::wstring&amp;&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>

  <tag id="std_wstring_operator5" kind="function" user_name="std::operator+" type="std::wstring(const std::wstring&amp;, const wchar_t*)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>

  <tag id="std_wstring_operator6" kind="function" user_name="std::operator+" type="std::wstring(std::wstring&amp;&amp;, const wchar_t*)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>

  <tag id="std_wstring_operator7" kind="function" user_name="std::operator+" type="std::wstring(const wchar_t*, const std::wstring&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>

  <tag id="std_wstring_operator8" kind="function" user_name="std::operator+" type="std::wstring(const wchar_t*, std::wstring&amp;&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>

  <tag id="std_wstring_operator9" kind="function" user_name="std::operator+" type="std::wstring(const std::wstring&amp;, wchar_t)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>

  <tag id="std_wstring_operator10" kind="function" user_name="std::operator+" type="std::wstring(std::wstring&amp;&amp;, wchar_t)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>

  <tag id="std_wstring_operator11" kind="function" user_name="std::operator+" type="std::wstring(wchar_t, const std::wstring&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>

  <tag id="std_wstring_operator12" kind="function" user_name="std::operator+" type="std::wstring(wchar_t, std::wstring&amp;&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_wstring_operator_rshift" kind="function" user_name="std::operator&lt;&lt;" type="std::wostream&amp;(std::wostream&amp;, const std::wstring&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_wstring_operator>>" kind="function" user_name="std::operator>>" type="std::wistream&amp;(std::wistream&amp;, std::wstring&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_wstring_swap" kind="function" user_name="std::swap" type="void(std::wstring&amp;, std::wstring&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_wstring_operator13" kind="function" user_name="std::operator==" type="bool(const std::wstring&amp;, const std::wstring&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_wstring_operator14" kind="function" user_name="std::operator==" type="bool(const wchar_t*, const std::wstring&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_wstring_operator15" kind="function" user_name="std::operator==" type="bool(const std::wstring&amp;, const wchar_t*)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_wstring_operator16" kind="function" user_name="std::operator!=" type="bool(const std::wstring&amp;, const std::wstring&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_wstring_operator17" kind="function" user_name="std::operator!=" type="bool(const wchar_t*, const std::wstring&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>

  <tag id="std_wstring_operator18" kind="function" user_name="std::operator!=" type="bool(const std::wstring&amp;, const wchar_t*)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_wstring_operator19" kind="function" user_name="std::operator&lt;" type="bool (const std::wstring&amp;, const std::wstring&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_wstring_operator20" kind="function" user_name="std::operator&lt;" type="bool (const wchar_t*, const std::wstring&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_wstring_operator21" kind="function" user_name="std::operator&lt;" type="bool (const std::wstring&amp;, const wchar_t*)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_wstring_operator22" kind="function" user_name="std::operator&lt;=" type="bool(const std::wstring&amp;, const std::wstring&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_wstring_operator23" kind="function" user_name="std::operator&lt;=" type="bool(const wchar_t*, const std::wstring&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_wstring_operator24" kind="function" user_name="std::operator&lt;=" type="bool(const std::wstring&amp;, const wchar_t*)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_wstring_operator25" kind="function" user_name="std::operator>" type="bool (const std::wstring&amp;, const std::wstring&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_wstring_operator26" kind="function" user_name="std::operator>" type="bool (const wchar_t*, const std::wstring&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_wstring_operator27" kind="function" user_name="std::operator>" type="bool (const std::wstring&amp;, const wchar_t*)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_wstring_operator28" kind="function" user_name="std::operator>=" type="bool(const std::wstring&amp;, const std::wstring&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_wstring_operator29" kind="function" user_name="std::operator>=" type="bool(const wchar_t*, const std::wstring&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_wstring_operator30" kind="function" user_name="std::operator>=" type="bool(const std::wstring&amp;, const wchar_t*)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <!--- function instances with std::u16string -->

    <tag id="std_u16string_operator1" kind="function" user_name="std::operator+" type="std::u16string(const std::u16string&amp;, const std::u16string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_u16string_operator2" kind="function" user_name="std::operator+" type="std::u16string(std::u16string&amp;&amp;, std::u16string&amp;&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_u16string_operator3" kind="function" user_name="std::operator+" type="std::u16string(std::u16string&amp;&amp;, const std::u16string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_u16string_operator4" kind="function" user_name="std::operator+" type="std::u16string(const std::u16string&amp;, std::u16string&amp;&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_u16string_operator5" kind="function" user_name="std::operator+" type="std::u16string(const std::u16string&amp;, const char16_t*)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_u16string_operator6" kind="function" user_name="std::operator+" type="std::u16string(std::u16string&amp;&amp;, const char16_t*)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>

  <tag id="std_u16string_operator7" kind="function" user_name="std::operator+" type="std::u16string(const char16_t*, const std::u16string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_u16string_operator8" kind="function" user_name="std::operator+" type="std::u16string(const char16_t*, std::u16string&amp;&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>

  <tag id="std_u16string_operator9" kind="function" user_name="std::operator+" type="std::u16string(const std::u16string&amp;, char16_t)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>

  <tag id="std_u16string_operator10" kind="function" user_name="std::operator+" type="std::u16string(std::u16string&amp;&amp;, char16_t)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>

  <tag id="std_u16string_operator11" kind="function" user_name="std::operator+" type="std::u16string(char16_t, const std::u16string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>

  <tag id="std_u16string_operator12" kind="function" user_name="std::operator+" type="std::u16string(char16_t, std::u16string&amp;&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>

  <!---
      type parsing cause side effect creation of type struct std::char_traits<<error-type>>


  <tag id="std_u16string_operator_rshift" kind="function" user_name="std::operator&lt;&lt;" type="std::basic_ostream&lt;char16_t>&amp;(std::basic_ostream&lt;char16_t>&amp;, const std::u16string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_u16string_operator>>" kind="function" user_name="std::operator>>" type="std::basic_istream&lt;char16_t>&amp;(std::basic_istream&lt;char16_t>&amp;, std::u16string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>
  -->

  <tag id="std_u16string_swap" kind="function" user_name="std::swap" type="void(std::u16string&amp;, std::u16string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_u16string_operator13" kind="function" user_name="std::operator==" type="bool(const std::u16string&amp;, const std::u16string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_u16string_operator14" kind="function" user_name="std::operator==" type="bool(const char16_t*, const std::u16string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_u16string_operator15" kind="function" user_name="std::operator==" type="bool(const std::u16string&amp;, const char16_t*)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_u16string_operator16" kind="function" user_name="std::operator!=" type="bool(const std::u16string&amp;, const std::u16string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_u16string_operator17" kind="function" user_name="std::operator!=" type="bool(const char16_t*, const std::u16string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>

  <tag id="std_u16string_operator18" kind="function" user_name="std::operator!=" type="bool(const std::u16string&amp;, const char16_t*)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_u16string_operator19" kind="function" user_name="std::operator&lt;" type="bool (const std::u16string&amp;, const std::u16string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_u16string_operator20" kind="function" user_name="std::operator&lt;" type="bool (const char16_t*, const std::u16string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_u16string_operator21" kind="function" user_name="std::operator&lt;" type="bool (const std::u16string&amp;, const char16_t*)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_u16string_operator22" kind="function" user_name="std::operator&lt;=" type="bool(const std::u16string&amp;, const std::u16string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_u16string_operator23" kind="function" user_name="std::operator&lt;=" type="bool(const char16_t*, const std::u16string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_u16string_operator24" kind="function" user_name="std::operator&lt;=" type="bool(const std::u16string&amp;, const char16_t*)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_u16string_operator25" kind="function" user_name="std::operator>" type="bool (const std::u16string&amp;, const std::u16string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_u16string_operator26" kind="function" user_name="std::operator>" type="bool (const char16_t*, const std::u16string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_u16string_operator27" kind="function" user_name="std::operator>" type="bool (const std::u16string&amp;, const char16_t*)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_u16string_operator28" kind="function" user_name="std::operator>=" type="bool(const std::u16string&amp;, const std::u16string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_u16string_operator29" kind="function" user_name="std::operator>=" type="bool(const char16_t*, const std::u16string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_u16string_operator30" kind="function" user_name="std::operator>=" type="bool(const std::u16string&amp;, const char16_t*)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>

  <!--- function instances with std::u32string -->
  <tag id="std_u32string_operator1" kind="function" user_name="std::operator+" type="std::u32string(const std::u32string&amp;, const std::u32string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_u32string_operator2" kind="function" user_name="std::operator+" type="std::u32string(std::u32string&amp;&amp;, std::u32string&amp;&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_u32string_operator3" kind="function" user_name="std::operator+" type="std::u32string(std::u32string&amp;&amp;, const std::u32string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_u32string_operator4" kind="function" user_name="std::operator+" type="std::u32string(const std::u32string&amp;, std::u32string&amp;&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_u32string_operator5" kind="function" user_name="std::operator+" type="std::u32string(const std::u32string&amp;, const char32_t*)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_u32string_operator6" kind="function" user_name="std::operator+" type="std::u32string(std::u32string&amp;&amp;, const char32_t*)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>

  <tag id="std_u32string_operator7" kind="function" user_name="std::operator+" type="std::u32string(const char32_t*, const std::u32string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_u32string_operator8" kind="function" user_name="std::operator+" type="std::u32string(const char32_t*, std::u32string&amp;&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>

  <tag id="std_u32string_operator9" kind="function" user_name="std::operator+" type="std::u32string(const std::u32string&amp;, char32_t)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>

  <tag id="std_u32string_operator10" kind="function" user_name="std::operator+" type="std::u32string(std::u32string&amp;&amp;, char32_t)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>

  <tag id="std_u32string_operator11" kind="function" user_name="std::operator+" type="std::u32string(char32_t, const std::u32string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>

  <tag id="std_u32string_operator12" kind="function" user_name="std::operator+" type="std::u32string(char32_t, std::u32string&amp;&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>

  <!---

  <tag id="std_u32string_operator_rshift" kind="function" user_name="std::operator&lt;&lt;" type="std::basic_ostream&lt;char32_t>&amp;(std::basic_ostream&lt;char32_t>&amp;, const std::u32string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_u32string_operator>>" kind="function" user_name="std::operator>>" type="std::basic_istream&lt;char32_t>&amp;(std::basic_istream&lt;char32_t>&amp;, std::u32string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>
  -->

  <tag id="std_u32string_swap" kind="function" user_name="std::swap" type="void(std::u32string&amp;, std::u32string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_u32string_operator13" kind="function" user_name="std::operator==" type="bool(const std::u32string&amp;, const std::u32string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_u32string_operator14" kind="function" user_name="std::operator==" type="bool(const char32_t*, const std::u32string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_u32string_operator15" kind="function" user_name="std::operator==" type="bool(const std::u32string&amp;, const char32_t*)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_u32string_operator16" kind="function" user_name="std::operator!=" type="bool(const std::u32string&amp;, const std::u32string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_u32string_operator17" kind="function" user_name="std::operator!=" type="bool(const char32_t*, const std::u32string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>

  <tag id="std_u32string_operator18" kind="function" user_name="std::operator!=" type="bool(const std::u32string&amp;, const char32_t*)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_u32string_operator19" kind="function" user_name="std::operator&lt;" type="bool (const std::u32string&amp;, const std::u32string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_u32string_operator20" kind="function" user_name="std::operator&lt;" type="bool (const char32_t*, const std::u32string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_u32string_operator21" kind="function" user_name="std::operator&lt;" type="bool (const std::u32string&amp;, const char32_t*)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_u32string_operator22" kind="function" user_name="std::operator&lt;=" type="bool(const std::u32string&amp;, const std::u32string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_u32string_operator23" kind="function" user_name="std::operator&lt;=" type="bool(const char32_t*, const std::u32string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_u32string_operator24" kind="function" user_name="std::operator&lt;=" type="bool(const std::u32string&amp;, const char32_t*)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_u32string_operator25" kind="function" user_name="std::operator>" type="bool (const std::u32string&amp;, const std::u32string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_u32string_operator26" kind="function" user_name="std::operator>" type="bool (const char32_t*, const std::u32string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_u32string_operator27" kind="function" user_name="std::operator>" type="bool (const std::u32string&amp;, const char32_t*)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_u32string_operator28" kind="function" user_name="std::operator>=" type="bool(const std::u32string&amp;, const std::u32string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>


  <tag id="std_u32string_operator29" kind="function" user_name="std::operator>=" type="bool(const char32_t*, const std::u32string&amp;)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>


  <tag id="std_u32string_operator30" kind="function" user_name="std::operator>=" type="bool(const std::u32string&amp;, const char32_t*)" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">STRING_CHECK_IS_VALID_STRING</property>
    </properties>
  </tag>

  <!-- remaining functions -->
  <tag id="std_string_getline" kind="function" user_name="std::getline" is_template="true">
    <properties>
      <property kind="skip_body"></property>
      <property kind="check">RETURN_FIRST_ARG</property>
      <property kind="rule">INVALIDATES_ITERATORS_REFERENCES</property>
    </properties>
  </tag>

  <tag id="std_to_string" kind="function" user_name="std::to_string">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>

  <tag id="std_to_wstring" kind="function" user_name="std::to_wstring">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>

  <tag id="std_stoul" kind="function" user_name="std::stoul">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>

  <tag id="std_stoull" kind="function" user_name="std::stoull">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>

  <tag id="std_stoi" kind="function" user_name="std::stoi">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>

  <tag id="std_stol" kind="function" user_name="std::stol">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>

  <tag id="std_stoll" kind="function" user_name="std::stoll">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>

  <tag id="std_stof" kind="function" user_name="std::stof">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>

  <tag id="std_stod" kind="function" user_name="std::stod">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>

  <tag id="std_stold" kind="function" user_name="std::stold">
    <properties>
      <property kind="skip_body"></property>
    </properties>
  </tag>

</tags>
