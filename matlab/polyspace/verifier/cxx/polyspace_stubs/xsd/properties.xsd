<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright 2015-2024 The MathWorks, Inc. -->

<!-- Allows to validate annotations rules
 Can be done on linux with:
 xmllint -noout -\-schema properties.xsd file.xml
-->

<xs:schema targetNamespace="http://www.mathworks.com/PolyspaceInternalProperties"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:tns="http://www.mathworks.com/PolyspaceInternalProperties"
    elementFormDefault="qualified">

<xs:include schemaLocation="matchers.xsd"/>
<xs:include schemaLocation="impact.xsd"/>

<xs:annotation>
    <xs:documentation>Polyspace internal tags specifications.</xs:documentation>
</xs:annotation>

<xs:simpleType name="KindType">
  <xs:restriction base="xs:string">
    <xs:enumeration value="alloc"/>
    <xs:enumeration value="predef"/>
    <xs:enumeration value="predef_eclookup_table"/>
    <xs:enumeration value="predef_fe"/>
    <xs:enumeration value="rule"/>
    <xs:enumeration value="concurrency"/>
    <xs:enumeration value="behavior"/>
    <xs:enumeration value="fundamental"/>
    <xs:enumeration value="stdlib_builtin"/>
    <xs:enumeration value="predef_vvir"/>
    <xs:enumeration value="check"/>
    <xs:enumeration value="skip_body"/>
    <xs:enumeration value="security"/>
    <xs:enumeration value="stl_cont"/>
    <xs:enumeration value="not_thread_safe"/>
    <xs:enumeration value="dealloc"/>
    <xs:enumeration value="allocates_memory"/>
    <xs:enumeration value="keep_body"/>
    <xs:enumeration value="thread_entry_point_param"/>
    <xs:enumeration value="predef_concurrency"/>
    <xs:enumeration value="start_task"/>
    <xs:enumeration value="undefined_deleting_destructor_form"/>
    <xs:enumeration value="mlfilter"/>
  </xs:restriction>
</xs:simpleType>

<xs:simpleType name="TagKindType">
  <xs:restriction base="xs:string">
    <xs:enumeration value="function"/>
    <xs:enumeration value="type"/>
  </xs:restriction>
</xs:simpleType>

<xs:complexType name="UsePropertiesType">
    <xs:simpleContent>
        <xs:extension base="xs:string">
            <xs:attribute name="name" type="xs:string" use="required"/>
        </xs:extension>
    </xs:simpleContent>
</xs:complexType>

<xs:complexType name="OtherPropertyType">
    <xs:simpleContent>
        <xs:extension base="xs:string">
            <xs:attribute name="kind" type="tns:KindType" use="required"/>
        </xs:extension>
    </xs:simpleContent>
</xs:complexType>

<xs:complexType name="PredefVvirPropertyType">
    <xs:simpleContent>
        <xs:extension base="tns:PredefVvirEnumeration">
            <xs:attribute name="kind" use="required">
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="predef_vvir"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
        </xs:extension>
    </xs:simpleContent>
</xs:complexType>

<xs:simpleType name="PredefVvirEnumeration">
  <xs:restriction base="xs:string">
    <xs:enumeration value="atan2"/>
    <xs:enumeration value="first_arg_in_minus_one_one"/>
    <xs:enumeration value="first_arg_is_more_or_equal_to_one"/>
    <xs:enumeration value="first_arg_is_more_than_minus_one"/>
    <xs:enumeration value="first_arg_is_negative_or_zero"/>
    <xs:enumeration value="first_arg_is_non_zero"/>
    <xs:enumeration value="first_arg_is_positive_or_zero"/>
    <xs:enumeration value="first_arg_is_strictly_negative"/>
    <xs:enumeration value="first_arg_is_strictly_positive"/>
    <xs:enumeration value="second_arg_in_minus_one_one"/>
    <xs:enumeration value="second_arg_is_more_or_equal_to_one"/>
    <xs:enumeration value="second_arg_is_more_than_minus_one"/>
    <xs:enumeration value="second_arg_is_negative_or_zero"/>
    <xs:enumeration value="second_arg_is_non_zero"/>
    <xs:enumeration value="second_arg_is_positive_or_zero"/>
    <xs:enumeration value="second_arg_is_strictly_negative"/>
    <xs:enumeration value="second_arg_is_strictly_positive"/>

    <xs:enumeration value="read"/>
    <xs:enumeration value="write"/>
    <xs:enumeration value="setlocale"/>
    <xs:enumeration value="localeconv"/>

    <xs:enumeration value="iswhatever"/>

    <xs:enumeration value="isIdentity"/>
    <xs:enumeration value="std_numeric_limit_128_min"/>
    <xs:enumeration value="std_numeric_limit_128_max"/>
    <xs:enumeration value="std_numeric_limit_u128_max"/>

    <xs:enumeration value="lconv type"/>

    <xs:enumeration value="nothrow_t"/>

  </xs:restriction>
</xs:simpleType>

<xs:complexType name="PropertyListType">
    <xs:sequence>
        <xs:element name="property" minOccurs="0" maxOccurs="unbounded">
            <xs:alternative test="@kind = 'predef_vvir'" type="tns:PredefVvirPropertyType"/>
            <!-- fallback alternative -->
            <xs:alternative test="@kind != 'predef_vvir'" type="tns:OtherPropertyType"/>
        </xs:element>
    </xs:sequence>
</xs:complexType>

<xs:complexType name="FunctionTagType">
    <xs:annotation>
        <xs:documentation>Tag specification for a program function.</xs:documentation>
    </xs:annotation>
    <xs:choice maxOccurs="unbounded">
        <xs:element name="use_properties" type="tns:UsePropertiesType"/>
        <xs:element name="properties" type="tns:PropertyListType"/>
        <xs:element name="match" type="tns:MatchType"/>
        <xs:element name="impact-sink" type="tns:ImpactSinkType">
            <xs:annotation>
                <xs:documentation>Mark the matched function as sinks of the Impact Analysis.</xs:documentation>
            </xs:annotation>
        </xs:element>
        <xs:element name="impact-source" type="tns:ImpactSourceType">
            <xs:annotation>
                <xs:documentation>Mark the matched function as sources of the Impact Analysis.</xs:documentation>
            </xs:annotation>
        </xs:element>
        <xs:element name="impact-flow" type="tns:ImpactFlowType">
            <xs:annotation>
                <xs:documentation>Specify an impact flow of the matched function in the Impact Analysis.</xs:documentation>
            </xs:annotation>
        </xs:element>
    </xs:choice>

    <xs:attribute name="id" type="xs:string" use="required"/>

    <xs:attribute name="user_name" type="xs:string" use="required"/>

    <xs:attribute name="kind" use="required">
        <xs:simpleType>
            <xs:restriction base="xs:string">
                <xs:enumeration value="function"/>
            </xs:restriction>
        </xs:simpleType>
    </xs:attribute>

    <xs:attribute name="decl_header" type="xs:string" use="optional"/>

    <xs:attribute name="first_arg_is_autosar_rte_instance" type="xs:boolean" use="optional"/>

    <xs:attribute name="header" type="xs:string" use="optional"/>

    <xs:attribute name="is_template" type="xs:boolean" use="optional"/>

    <xs:attribute name="last_arg_is_autosar_transformer_error" type="xs:boolean" use="optional"/>

    <xs:attribute name="nb_args" type="xs:string" use="optional"/>

    <xs:attribute name="other_names" type="xs:string" use="optional"/>

    <xs:attribute name="return_type_is_void" type="xs:boolean" use="optional"/>

    <xs:attribute name="type" type="xs:string" use="optional"/>

    <xs:attribute name="follow_projection" type="xs:boolean" use="optional"/>
</xs:complexType>

<xs:complexType name="TypeTagType">
    <xs:annotation>
        <xs:documentation>Tag specification for a program type.</xs:documentation>
    </xs:annotation>
    <xs:choice maxOccurs="unbounded">
        <xs:element name="use_properties" type="tns:UsePropertiesType"/>
        <xs:element name="properties" type="tns:PropertyListType"/>
        <xs:element name="match" type="tns:MatchType"/>
        <xs:element name="tag">
            <xs:alternative test="@kind = 'type'" type="tns:TypeTagType"/>
            <xs:alternative test="@kind = 'function'" type="tns:FunctionTagType"/>
        </xs:element>
    </xs:choice>
    <xs:attribute name="id" type="xs:string" use="required"/>
    <xs:attribute name="user_name" type="xs:string" use="required"/>

    <xs:attribute name="kind" use="required">
        <xs:simpleType>
            <xs:restriction base="xs:string">
                <xs:enumeration value="type"/>
            </xs:restriction>
        </xs:simpleType>
    </xs:attribute>

    <xs:attribute name="decl_header" type="xs:string" use="optional"/>

    <xs:attribute name="header" type="xs:string" use="optional"/>

    <xs:attribute name="other_names" type="xs:string" use="optional"/>

</xs:complexType>

<xs:complexType name="ParameterType">
    <xs:simpleContent>
        <xs:extension base="xs:string">
            <!-- TODO restrict the name attribute to supported parameter names -->
            <xs:attribute name="name" use="required">
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="only_if_library"/>
                        <xs:enumeration value="disable_if_library"/>
                        <xs:enumeration value="force_polyspace_semantics_for_this_file"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="value" type="xs:string" use="required"/>
        </xs:extension>
    </xs:simpleContent>
</xs:complexType>

<xs:complexType name="FileScopeType">
    <xs:sequence maxOccurs="unbounded">
        <xs:element name="parameter" type="tns:ParameterType"/>
    </xs:sequence>
</xs:complexType>

<xs:complexType name="NamedPropertyListType">
    <xs:complexContent>
        <xs:extension base="tns:PropertyListType">
            <xs:attribute name="name" type="xs:string" use="required"/>
        </xs:extension>
    </xs:complexContent>
</xs:complexType>

<xs:complexType name="NamedPropertiesType">
    <xs:sequence maxOccurs="unbounded">
        <xs:element name="properties" type="tns:NamedPropertyListType"/>
    </xs:sequence>
</xs:complexType>

<xs:element name="tags">
    <xs:complexType>
        <xs:sequence>
            <xs:element name="file_scope" type="tns:FileScopeType" minOccurs="0"/>
            <xs:element name="named_properties" type="tns:NamedPropertiesType" minOccurs="0"/>
            <xs:sequence maxOccurs="unbounded">
                <xs:element name="tag">
                    <xs:alternative test="@kind = 'type'" type="tns:TypeTagType"/>
                    <xs:alternative test="@kind = 'function'" type="tns:FunctionTagType"/>
                </xs:element>
            </xs:sequence>
        </xs:sequence>
    </xs:complexType>
    <xs:unique name="UniqueTagId">
        <!-- Tag identifier uniqueness, verified for the document -->
        <xs:selector xpath=".//tns:tag"/>
        <xs:field xpath="@id"/>
    </xs:unique>
</xs:element>

</xs:schema>
