<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright 2020-2023 The MathWorks, Inc. -->
<!-- Mapping of ctype.h function  to a Polyspace  semantic -->
<!-- For example the definition: -->
<!-- <tag id="isalpha" kind="function" user_name="isalpha" type="int (int)" > -->
<!--   <properties> -->
<!--     <property kind="predef_vvir">iswhatever</property> -->
<!--   </properties> -->
<!-- </tag> -->
<!-- means that the function int isalpha(int c) will be flagged as a "predef_vvir" builtin and gets the -->
<!-- attribute "iswhatever" as property in the IL (in its definition). If the type is not compatible, -->
<!-- then the user function is not flagged as a polyspace builtin  -->


<tags xmlns="http://www.mathworks.com/PolyspaceInternalProperties">
<!--
standard function "isalnum" from <ctype.h>
-->
<tag id="isalnum" kind="function" user_name="isalnum" header="ctype.h">
  <properties>
     <property kind="predef_vvir">iswhatever</property>
  </properties>
</tag>

<!--
standard function "isalpha" from <ctype.h>
-->
<tag id="isalpha" kind="function" user_name="isalpha" header="ctype.h">
  <properties>
     <property kind="predef_vvir">iswhatever</property>
  </properties>
</tag>

<!--
standard function "iscntrl" from <ctype.h>
-->
<tag id="iscntrl" kind="function" user_name="iscntrl" header="ctype.h">
  <properties>
     <property kind="predef_vvir">iswhatever</property>
  </properties>
</tag>

<!--
standard function "isdigit" from <ctype.h>
-->
<tag id="isdigit" kind="function" user_name="isdigit" header="ctype.h">
  <properties>
     <property kind="predef_vvir">iswhatever</property>
  </properties>
</tag>

<!--
standard function "isgraph" from <ctype.h>
-->
<tag id="isgraph" kind="function" user_name="isgraph" header="ctype.h">
  <properties>
     <property kind="predef_vvir">iswhatever</property>
  </properties>
</tag>

<!--
standard function "islower" from <ctype.h>
-->
<tag id="islower" kind="function" user_name="islower" header="ctype.h">
  <properties>
     <property kind="predef_vvir">iswhatever</property>
  </properties>
</tag>

<!--
standard function "isprint" from <ctype.h>
-->
<tag id="isprint" kind="function" user_name="isprint" header="ctype.h">
  <properties>
     <property kind="predef_vvir">iswhatever</property>
  </properties>
</tag>

<!--
standard function "ispunct" from <ctype.h>
-->
<tag id="ispunct" kind="function" user_name="ispunct" header="ctype.h">
  <properties>
     <property kind="predef_vvir">iswhatever</property>
  </properties>
</tag>

<!--
standard function "isspace" from <ctype.h>
-->
<tag id="isspace" kind="function" user_name="isspace" header="ctype.h">
  <properties>
     <property kind="predef_vvir">iswhatever</property>
  </properties>
</tag>

<!--
standard function "isupper" from <ctype.h>
-->
<tag id="isupper" kind="function" user_name="isupper" header="ctype.h">
  <properties>
     <property kind="predef_vvir">iswhatever</property>
  </properties>
</tag>

<!--
standard function "isxdigit" from <ctype.h>
-->
<tag id="isxdigit" kind="function" user_name="isxdigit" header="ctype.h">
  <properties>
     <property kind="predef_vvir">iswhatever</property>
  </properties>
</tag>
<!--
standard function "isblank" from <ctype.h>
-->
<tag id="isblank" kind="function" user_name="isblank" header="ctype.h">
  <properties>
     <property kind="predef_vvir">iswhatever</property>
  </properties>
</tag>

<!--
standard function "tolower" from <ctype.h>
-->
<tag id="tolower" kind="function" user_name="tolower" header="ctype.h">
  <properties>
     <property kind="predef_vvir">iswhatever</property>
  </properties>
</tag>
<!--
standard function "toupper" from <ctype.h>
-->
<tag id="toupper" kind="function" user_name="toupper" header="ctype.h">
  <properties>
     <property kind="predef_vvir">iswhatever</property>
  </properties>
</tag>

<!-- std::move<> -->
<tag id="move_isIdentity" kind="function" user_name="std::move" is_template="true" nb_args="1" >
  <properties>
    <property kind="predef_vvir">isIdentity</property>
    <property kind="behavior">NO_TMP_WHEN_CALLED</property>
  </properties>
</tag>

<!-- std::forward -->
<tag id="forward_isIdentity" kind="function" user_name="std::forward" is_template="true" nb_args="1">
  <properties>
    <property kind="predef_vvir">isIdentity</property>
    <property kind="behavior">NO_TMP_WHEN_CALLED</property>
  </properties>
</tag>

</tags>
