<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright 2022-2023 The MathWorks, Inc. -->
<!-- Mapping of math builtin to a Polyspace Backend semantic -->
<!-- For example the definition: -->
<!-- <tag id="cosf" kind="function" user_name="cosf" type="double (float)" > -->
<!--   <properties> -->
<!--     <property kind="predef">cos</property> -->
<!--     <property kind="predef">f</property> -->
<!--   </properties> -->
<!-- </tag> -->
<!-- means that the user function double cosf(float) will be flagged as a "predef" builtin and gets the -->
<!-- attribute "cos" as property1 and "f" as property2 in the IL (in its definition). If the type is not compatible, -->
<!-- then the user function is not flagged as a polyspace builtin  -->


<!-- ("predef_fe", "name") property is used to force using the EDG folding constant when translating -->
<!-- into VVIR. If a backing expression is a call to a builtin with that property, the backing -->
<!-- expression is ignored by Polyspace. This because EDG constant folding will be more accurate -->
<!-- than the polyspace backend that is full range for such builtins. -->
<tags xmlns="http://www.mathworks.com/PolyspaceInternalProperties">
    <tag id="EVP_PKEY_CTX" kind="type" user_name="EVP_PKEY_CTX">
        <properties>
            <property kind="predef">EVP_PKEY_CTX</property>
        </properties>
    </tag>
    <tag id="EVP_PKEY" kind="type" user_name="EVP_PKEY">
        <properties>
            <property kind="predef">EVP_PKEY</property>
        </properties>
    </tag>
    <tag id="ENGINE" kind="type" user_name="ENGINE">
        <properties>
            <property kind="predef">EVP_PKEY</property>
        </properties>
    </tag>
    <tag id="EVP_PKEY_encrypt_init" user_name="EVP_PKEY_encrypt_init" kind="function" type="int(EVP_PKEY_CTX*)" header="evp.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="EVP_PKEY_decrypt_init" user_name="EVP_PKEY_decrypt_init" kind="function" type="int(EVP_PKEY_CTX*)" header="evp.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="EVP_PKEY_verify_init" user_name="EVP_PKEY_verify_init" kind="function" type="int(EVP_PKEY_CTX*)" header="evp.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="EVP_PKEY_verify_recover_init" user_name="EVP_PKEY_verify_recover_init" kind="function" type="int(EVP_PKEY_CTX*)" header="evp.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="EVP_PKEY_sign_init" user_name="EVP_PKEY_sign_init" kind="function" type="int(EVP_PKEY_CTX*)" header="evp.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="EVP_PKEY_keygen_init" user_name="EVP_PKEY_keygen_init" kind="function" type="int(EVP_PKEY_CTX*)" header="evp.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="EVP_PKEY_paramgen_init" user_name="EVP_PKEY_paramgen_init" kind="function" type="int(EVP_PKEY_CTX*)" header="evp.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="EVP_PKEY_derive_init" user_name="EVP_PKEY_derive_init" kind="function" type="int(EVP_PKEY_CTX*)" header="evp.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="EVP_PKEY_derive_set_peer" user_name="EVP_PKEY_derive_set_peer" kind="function" type="int(EVP_PKEY_CTX*, EVP_PKEY *peer)" header="evp.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_2</property>
        </properties>
    </tag>

    <tag id="EVP_PKEY_encrypt" user_name="EVP_PKEY_encrypt" kind="function" type="int(EVP_PKEY_CTX*, unsigned char*, size_t*, unsigned char const*, size_t)" header="evp.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="EVP_PKEY_decrypt" user_name="EVP_PKEY_decrypt" kind="function" type="int(EVP_PKEY_CTX*, unsigned char*, size_t*, unsigned char const*, size_t)" header="evp.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="EVP_PKEY_verify" user_name="EVP_PKEY_verify" kind="function" type="int(EVP_PKEY_CTX*, unsigned char*, size_t*, unsigned char const*, size_t)" header="evp.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="EVP_PKEY_verify_recover" user_name="EVP_PKEY_verify_recover" kind="function" type="int(EVP_PKEY_CTX*, unsigned char*, size_t*, unsigned char const*, size_t)" header="evp.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <!--for the EVP_PKEY_{encrypt,decrypt,sign,verify,verify_recover} functions -->
    <tag id="EVP_PKEY_sign" user_name="EVP_PKEY_sign" kind="function" type="int(EVP_PKEY_CTX*, unsigned char*, size_t*, unsigned char const*, size_t)" header="evp.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <!-- EVP_PKEY_derive-->
    <tag id="EVP_PKEY_derive" user_name="EVP_PKEY_derive" kind="function" type="int(EVP_PKEY_CTX*, unsigned char*, size_t*)" header="evp.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="EVP_PKEY_keygen" user_name="EVP_PKEY_keygen" kind="function" type="int(EVP_PKEY_CTX*, EVP_PKEY**)" header="evp.h">
        <properties>
            <property kind="predef">EVP_PKEY_gen</property>
        </properties>
    </tag>

    <tag id="EVP_PKEY_paramgen" user_name="EVP_PKEY_paramgen" kind="function" type="int(EVP_PKEY_CTX*, EVP_PKEY**)" header="evp.h">
        <properties>
            <property kind="predef">EVP_PKEY_gen</property>
        </properties>
    </tag>

    <!-- EVP_PKEY_CTX_ctrl-->
    <tag id="EVP_PKEY_CTX_ctrl" user_name="EVP_PKEY_CTX_ctrl" kind="function" type="int(EVP_PKEY_CTX*, int, int, int, int, void*)" header="evp.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="EVP_PKEY_CTX_new" user_name="EVP_PKEY_CTX_new" kind="function" type="EVP_PKEY_CTX*(EVP_PKEY*, ENGINE*)" header="evp.h">
        <properties>
            <property kind="predef">EVP_PKEY_CTX_new</property>
        </properties>
    </tag>

    <!-- EVP_Digest Functions-->
    <tag id="EVP_DigestUpdate" user_name="EVP_DigestUpdate" kind="function" type="int(EVP_MD_CTX*, void const*, size_t)" header="evp.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="EVP_SignUpdate" user_name="EVP_SignUpdate" kind="function" type="int(EVP_MD_CTX*, void const*, size_t)" header="evp.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="EVP_DigestSignUpdate" user_name="EVP_DigestSignUpdate" kind="function" type="int(EVP_MD_CTX*, void const*, size_t)" header="evp.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="EVP_VerifyUpdate" user_name="EVP_VerifyUpdate" kind="function" type="int(EVP_MD_CTX*, void const*, size_t)" header="evp.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="EVP_DigestVerifyUpdate" user_name="EVP_DigestVerifyUpdate" kind="function" type="int(EVP_MD_CTX*, void const*, size_t)" header="evp.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <!-- EVP_SignFinal and VerifyFinal-->
    <tag id="EVP_SignFinal" user_name="EVP_SignFinal" kind="function" type="int(EVP_MD_CTX*, unsigned char*, unsigned int *, EVP_PKEY*)" header="evp.h">
        <properties>
            <property kind="predef">EVP_PKEY_SignFinal</property>
        </properties>
    </tag>

    <tag id="EVP_VerifyFinal" user_name="EVP_VerifyFinal" kind="function" type="int(EVP_MD_CTX*, unsigned char*, unsigned int *, EVP_PKEY*)" header="evp.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <!-- SHA Functions -->
    <tag id="SHA1_Update" user_name="SHA1_Update" kind="function" type="int(SHA1_CTX*, void const*, size_t)" header="evp.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SHA256_Update" user_name="SHA256_Update" kind="function" type="int(SHA256_CTX*, void const*, size_t)" header="evp.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SHA384_Update" user_name="SHA384_Update" kind="function" type="int(SHA384_CTX*, void const*, size_t)" header="evp.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SHA512_Update" user_name="SHA512_Update" kind="function" type="int(SHA512_CTX*, void const*, size_t)" header="evp.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SHA224_Update" user_name="SHA224_Update" kind="function" type="int(SHA224_CTX*, void const*, size_t)" header="evp.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="MD2_Update" user_name="MD2_Update" kind="function" type="int(MD2_CTX*, void const*, size_t)" header="evp.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="MD4_Update" user_name="MD4_Update" kind="function" type="int(MD4_CTX*, void const*, size_t)" header="evp.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="MD5_Update" user_name="MD5_Update" kind="function" type="int(MD5_CTX*, void const*, size_t)" header="evp.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="RIPEMD160_Update" user_name="RIPEMD160_Update" kind="function" type="int(RIPEMD160_CTX*, void const*, size_t)" header="evp.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>
    <!-- RSA Functions -->
    <tag id="RSA_pkey_ctx_ctrl" user_name="RSA_pkey_ctx_ctrl" kind="function" type="int(EVP_PKEY_CTX *, int, int, int, void *)" header="rsa.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="RSA_check_key" user_name="RSA_check_key" kind="function" type="int(RSA*)" header="rsa.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="RSA_blinding_off" user_name="RSA_blinding_off" kind="function" type="void(RSA*)" header="rsa.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="RSA_get_method" user_name="RSA_get_method" kind="function" type="RSA_METHOD* (const RSA*)" header="rsa.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="RSA_flags" user_name="RSA_flags" kind="function" type="int(const RSA*)" header="rsa.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="RSA_blinding_on" user_name="RSA_blinding_on" kind="function" type="int(RSA*, BN_CTX*)" header="rsa.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="RSA_set_method" user_name="RSA_set_method" kind="function" type="const RSA_METHOD*(RSA*, const RSA_METHOD*)" header="rsa.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="RSA_get_ex_data" user_name="RSA_get_ex_data" kind="function" type="void* (RSA*, int)" header="rsa.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="RSA_set_ex_data" user_name="RSA_set_ex_data" kind="function" type="int(RSA*, int)" header="rsa.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="RSA_print" user_name="RSA_print" kind="function" type="int (BIO*, RSA*, int)" header="rsa.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_2</property>
        </properties>
    </tag>

    <tag id="RSA_print_fp" user_name="RSA_print_fp" kind="function" type="int (FILE*, RSA*, int)" header="rsa.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_2</property>
        </properties>
    </tag>

    <tag id="RSA_private_encrypt" user_name="RSA_private_encrypt" kind="function" type="int (int, unsigned char*, unsigned char*, RSA*, int)" header="rsa.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_4</property>
        </properties>
    </tag>

    <tag id="RSA_private_decrypt" user_name="RSA_private_decrypt" kind="function" type="int (int, unsigned char*, unsigned char*, RSA*, int)" header="rsa.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_4</property>
        </properties>
    </tag>

    <tag id="RSA_public_encrypt" user_name="RSA_public_encrypt" kind="function" type="int (int, unsigned char*, unsigned char*, RSA*, int)" header="rsa.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_4</property>
        </properties>
    </tag>

    <tag id="RSA_public_decrypt" user_name="RSA_public_decrypt" kind="function" type="int (int, unsigned char*, unsigned char*, RSA*, int)" header="rsa.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_4</property>
        </properties>
    </tag>

    <tag id="RSA_sign" user_name="RSA_sign" kind="function" type="int(int, const unsigned char *, unsigned int, unsigned char *, unsigned int *, RSA *)" header="rsa.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_6</property>
        </properties>
    </tag>

    <tag id="RSA_sign_ASN1_OCTET_STRING" user_name="RSA_sign_ASN1_OCTET_STRING" kind="function" type="int(int, const unsigned char *, unsigned int, unsigned char *, unsigned int *, RSA *)" header="rsa.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_6</property>
        </properties>
    </tag>

    <tag id="RSA_verify" user_name="RSA_verify" kind="function" type="int(int, const unsigned char *, unsigned int, unsigned char *, unsigned int, RSA *)" header="rsa.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_6</property>
        </properties>
    </tag>

    <tag id="RSA_verify_ASN1_OCTET_STRING" user_name="RSA_verify_ASN1_OCTET_STRING" kind="function" type="int(int, const unsigned char *, unsigned int, unsigned char *, unsigned int, RSA *)" header="rsa.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_6</property>
        </properties>
    </tag>

    <!-- DSA Functions -->
    <tag id="DSA_dup_DH" user_name="DSA_dup_DH" kind="function" type="DH* (const DSA*)" header="dsa.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="DSA_set_method" user_name="DSA_set_method" kind="function" type="int (DSA*, const DSA_METHOD*)" header="dsa.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="DSA_get_ex_data" user_name="DSA_get_ex_data" kind="function" type="void* (DSA*, int)" header="dsa.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="DSAparams_print" user_name="DSAparams_print" kind="function" type="int (BIO*, DSA*)" header="dsa.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_2</property>
        </properties>
    </tag>

    <tag id="DSAparams_print_fp" user_name="DSAparams_print_fp" kind="function" type="int (FILE*, DSA*)" header="dsa.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_2</property>
        </properties>
    </tag>

    <tag id="DSA_print" user_name="DSA_print" kind="function" type="int (BIO*, DSA*, int)" header="dsa.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_2</property>
        </properties>
    </tag>

    <tag id="DSA_print_fp" user_name="DSA_print_fp" kind="function" type="int (FILE*, DSA*, int)" header="dsa.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_2</property>
        </properties>
    </tag>

    <tag id="DSA_set_ex_data" user_name="DSA_set_ex_data" kind="function" type="char* (DSA*, int)" header="dsa.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="DSA_sign" user_name="DSA_sign" kind="function" type="int (int, const unsigned char *, int , unsigned char *, unsigned int *, DSA *)" header="dsa.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_6</property>
        </properties>
    </tag>

    <tag id="DSA_verify" user_name="DSA_verify" kind="function" type="int (int, const unsigned char *, int , unsigned char *, int, DSA *)" header="dsa.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_6</property>
        </properties>
    </tag>

    <tag id="DSA_generate_parameters_ex" user_name="DSA_generate_parameters_ex" kind="function" type="int (DSA *, int, const unsigned char *, int, int *, unsigned long *, BN_GENCB *)" header="dsa.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>
    <!-- Function with DH parmeter-->
    <tag id="DH_generate_parameters_ex" user_name="DH_generate_parameters_ex" kind="function" type="DH* (int, int, void (*)(int, int, void *), void *)" header="dh.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_4</property>
        </properties>
    </tag>

    <!--Function with ECK parameter -->
    <tag id="EC_KEY_get_flags" user_name="EC_KEY_get_flags" kind="function" type="int (const EC_KEY*)" header="ec.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="EC_KEY_get0_group" user_name="EC_KEY_get0_group" kind="function" type="const EC_GROUP* (const EC_KEY*)" header="ec.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="EC_KEY_get0_private_key" user_name="EC_KEY_get0_private_key" kind="function" type="const BIGNUM* (const EC_KEY*)" header="ec.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="EC_KEY_get0_public_key" user_name="EC_KEY_get0_public_key" kind="function" type="const ECPOINT* (const EC_KEY*)" header="ec.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="EC_KEY_get_enc_flags" user_name="EC_KEY_get_enc_flags" kind="function" type="unsigned int (const EC_KEY*)" header="ec.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="EC_KEY_get_conv_form" user_name="EC_KEY_get_conv_form" kind="function" type="point_conversion_form_t (const EC_KEY*)" header="ec.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="EC_KEY_check_key" user_name="EC_KEY_check_key" kind="function" type="int (const EC_KEY*)" header="ec.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="ECDSA_get_ex_data" user_name="ECDSA_get_ex_data" kind="function" type="void* (const EC_KEY*, int)" header="ecdsa.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="EC_KEY_set_flags" user_name="EC_KEY_set_flags" kind="function" type="void (EC_KEY*, int)" header="ec.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="EC_KEY_clear_flags" user_name="EC_KEY_clear_flags" kind="function" type="void (EC_KEY*, int)" header="ec.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="EC_KEY_set_group" user_name="EC_KEY_set_group" kind="function" type="int (EC_KEY*, const EC_GROUP*)" header="ec.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="EC_KEY_set_enc_flags" user_name="EC_KEY_set_enc_flags" kind="function" type="unsigned int (const EC_KEY*)" header="ec.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="EC_KEY_set_conv_form" user_name="EC_KEY_set_conv_form" kind="function" type="void (EC_KEY*, point_conversion_form_t)" header="ec.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="EC_KEY_set_asn1_flag" user_name="EC_KEY_set_asn1_flag" kind="function" type="void (EC_KEY*, asn1_flag)" header="ec.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="EC_KEY_set_private_key" user_name="EC_KEY_set_private_key" kind="function" type="int (EC_KEY*, const BIGNUM*)" header="ec.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="EC_KEY_set_public_key" user_name="EC_KEY_set_public_key" kind="function" type="int (EC_KEY*, const EC_POINT*)" header="ec.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="EC_KEY_precompute_mult" user_name="EC_KEY_precompute_mult" kind="function" type="int (EC_KEY*, BN_CTX*)" header="ec.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="i2d_ECPrivateKey" user_name="i2d_ECPrivateKey" kind="function" type="int (EC_KEY*, unsigned char **)" header="ec.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="i2d_ECParameter" user_name="i2d_ECParameter" kind="function" type="int (EC_KEY*, unsigned char **)" header="ec.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="ECParameters_print" user_name="ECParameters_print" kind="function" type="int (BIO*, const EC_KEY*)" header="ec.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_2</property>
        </properties>
    </tag>

    <tag id="ECParameters_print_fp" user_name="ECParameters_print_fp" kind="function" type="int (FILE*, const EC_KEY*)" header="ec.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_2</property>
        </properties>
    </tag>

    <tag id="EC_KEY_set_public_key_affine_coordinates" user_name="EC_KEY_set_public_key_affine_coordinates" kind="function" type="int (EC_KEY*, BIGNUM*, BIGNUM*)" header="ec.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <!-- Real type type="EC_KEY* (EC_KEY**, const unsigned char **, long)", wrong type in reference : -->
    <tag id="d2i_ECPrivateKey" user_name="d2i_ECPrivateKey" kind="function" type="int (EC_KEY**, const unsigned char **, long)" header="ec.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="d2i_ECParameter" user_name="d2i_ECParameter" kind="function" type="EC_KEY* (EC_KEY**, const unsigned char **, long)" header="ec.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="EC_KEY_print" user_name="EC_KEY_print" kind="function" type="int (BIO*, const EC_KEY*, int)" header="ec.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_2</property>
        </properties>
    </tag>

    <tag id="EC_KEY_print_fp" user_name="EC_KEY_print_fp" kind="function" type="int (FILE*, const EC_KEY*, int)" header="ec.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_2</property>
        </properties>
    </tag>

    <!-- ECDSA functions -->

    <tag id="ECDSA_sign" user_name="ECDSA_sign" kind="function" type="int (int, const unsigned char *, int, unsigned char *, unsigned int *, EC_KEY *)" header="ecdsa.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_6</property>
        </properties>
    </tag>
    <tag id="ECDSA_verify" user_name="ECDSA_verify" kind="function" type="int (int, const unsigned char *, int, const unsigned char *, int, EC_KEY *)" header="ecdsa.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_6</property>
        </properties>
    </tag>

    <!-- Function using EC_POINT context -->
    <tag id="EC_POINT_method_of" user_name="EC_POINT_method_of" kind="function" type="const EC_METHOD *(const EC_POINT *)" header="ec.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="EC_POINT_get_affine_coordinates_GFp" user_name="EC_POINT_get_affine_coordinates_GFp" kind="function" type="int (const EC_GROUP *, const EC_POINT *, BIGNUM *, BIGNUM *, BN_CTX *)" header="ec.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_2</property>
        </properties>
    </tag>

    <tag id="EC_POINT_get_affine_coordinates_GF2m" user_name="EC_POINT_get_affine_coordinates_GF2m" kind="function" type="int (const EC_GROUP *, EC_POINT *, const BIGNUM *, const BIGNUM *, BN_CTX *)" header="ec.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_2</property>
        </properties>
    </tag>

    <tag id="EC_POINT_get_Jprojective_coordinates_GFp" user_name="EC_POINT_get_Jprojective_coordinates_GFp" kind="function" type="int(const EC_GROUP *, const EC_POINT *, BIGNUM *, BIGNUM *, BIGNUM *, BN_CTX *)" header="ec.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_2</property>
        </properties>
    </tag>

    <tag id="EC_POINT_point2oct" user_name="EC_POINT_point2oct" kind="function" type="size_t (const EC_GROUP *, const EC_POINT *, point_conversion_form_t, unsigned char *, size_t, BN_CTX *)" header="ec.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_2</property>
        </properties>
    </tag>

    <tag id="EC_POINT_point2hex" user_name="EC_POINT_point2hex" kind="function" type="char* (const EC_GROUP *, const EC_POINT *, point_conversion_form_t, BN_CTX *)" header="ec.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_2</property>
        </properties>
    </tag>

    <!--SSL functions-->
    <tag id="SSL_set_connect_state" user_name="SSL_set_connect_state" kind="function" type="void (SSL*)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_set_accept_state" user_name="SSL_set_accept_state" kind="function" type="void (SSL*)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_do_handshake" user_name="SSL_do_handshake" kind="function" type="int(SSL*)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_read" user_name="SSL_read" kind="function" type="int(SSL*, void*, int)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_write" user_name="SSL_write" kind="function" type="int(SSL*, const void*, int)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_connect" user_name="SSL_connect" kind="function" type="int(SSL*)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_accept" user_name="SSL_accept" kind="function" type="int(SSL*)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_CTX_get_options" user_name="SSL_CTX_get_options" kind="function" type="uint64(const SSL_CTX*)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_get_options" user_name="SSL_get_options" kind="function" type="uint64(const SSL*)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <!-- Real type type="SSL*(SSL_CTX*)", keeping reference to ref type int(SSL_CTX*) (wrong type) -->
    <tag id="SSL_new" user_name="SSL_new" kind="function" type="int(SSL_CTX*)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="BIO_new_ssl_connect" user_name="BIO_new_ssl_connect" kind="function" type="BIO*(SSL_CTX*)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_CTX_ctrl" user_name="SSL_CTX_ctrl" kind="function" type="long(SSL_CTX *, int, long , void *)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_ctrl" user_name="SSL_ctrl" kind="function" type="long(SSL *, int, long , void *)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_set_fd" user_name="SSL_set_fd" kind="function" type="int(SSL *, int)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_get_error" user_name="SSL_get_error" kind="function" type="int(const SSL *, int)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_CTX_set_session_cache_mode" user_name="SSL_CTX_set_session_cache_mode" kind="function" type="long(SSL_CTX, long)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_CTX_set_timeout" user_name="SSL_CTX_set_timeout" kind="function" type="long(SSL_CTX, long)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_CTX_use_certificate" user_name="SSL_CTX_use_certificate" kind="function" type="int(SSL_CTX*, X509*)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_CTX_use_certificate_file" user_name="SSL_CTX_use_certificate_file" kind="function" type="int(SSL_CTX*, const char*, int)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_CTX_use_certificate_ASN1" user_name="SSL_CTX_use_certificate_ASN1" kind="function" type="int(SSL_CTX*, int, unsigned char*)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <!--type="void(SSL_CTX*, int, SSL_verify_cb)"-->
    <tag id="SSL_CTX_set_verify" user_name="SSL_CTX_set_verify" kind="function"  header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_CTX_load_verify_locations" user_name="SSL_CTX_load_verify_locations" kind="function" type="int(SSL_CTX *, const char*, const char*)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_use_certificate" user_name="SSL_use_certificate" kind="function" type="void(SSL*, X509*)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_use_certificate_file" user_name="SSL_use_certificate_file" kind="function" type="int(SSL*, const char*, int)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_use_certificate_ASN1" user_name="SSL_use_certificate_ASN1" kind="function" type="void(SSL*, unsigned char*, int)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_set_verify" user_name="SSL_set_verify" kind="function" type="void(SSL *, int, int (*)(int, X509_STORE_CTX *))" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_set_verify_depth" user_name="SSL_set_verify_depth" kind="function" type="void(SSL_CTX*, int)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_set1_host" user_name="SSL_set1_host" kind="function" type="int(SSL *, const char*)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_add1_host" user_name="SSL_add1_host" kind="function" type="int(SSL *, const char*)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_set_tlsext_host_name" user_name="SSL_set_tlsext_host_name" kind="function" type="int(const SSL *, const char*)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_CTX_use_PrivateKey" user_name="SSL_CTX_use_PrivateKey" kind="function" type="int(SSL_CTX*, EVP_PKEY*)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_CTX_use_PrivateKey_ASN1" user_name="SSL_CTX_use_PrivateKey_ASN1" kind="function" type="int(int, SSL_CTX *, unsigned char *,long)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_2</property>
        </properties>
    </tag>

    <tag id="SSL_CTX_use_PrivateKey_file" user_name="SSL_CTX_use_PrivateKey_file" kind="function" type="int(SSL_CTX*, const char *, int)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_CTX_use_RSAPrivateKey" user_name="SSL_CTX_use_RSAPrivateKey" kind="function" type="int(SSL_CTX*, RSA*)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_CTX_use_RSAPrivateKey_ASN1" user_name="SSL_CTX_use_RSAPrivateKey_ASN1" kind="function" type="int(SSL_CTX*, unsigned char*, long)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_CTX_use_RSAPrivateKey_file" user_name="SSL_CTX_use_RSAPrivateKey_file" kind="function" type="int(SSL_CTX*, const char*, int)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_use_PrivateKey" user_name="SSL_use_PrivateKey" kind="function" type="int(SSL*, EVP_PKEY*)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_use_PrivateKey_ASN1" user_name="SSL_use_PrivateKey_ASN1" kind="function" type="int(int, SSL *, unsigned char *,long)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_use_PrivateKey_file" user_name="SSL_use_PrivateKey_file" kind="function" type="int(SSL*, const char *, int)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_use_RSAPrivateKey" user_name="SSL_use_RSAPrivateKey" kind="function" type="int(SSL*, RSA*)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_use_RSAPrivateKey_ASN1" user_name="SSL_use_RSAPrivateKey_ASN1" kind="function" type="int(SSL*, unsigned char*, long)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_use_RSAPrivateKey_file" user_name="SSL_use_RSAPrivateKey_file" kind="function" type="int(SSL*, const char*, int)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_get_verify_result" user_name="SSL_get_verify_result" kind="function" type="long(const SSL*)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_CTX_set_cipher_list" user_name="SSL_CTX_set_cipher_list" kind="function" type="int(SSL_CTX*, const char*)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_set_cipher_list" user_name="SSL_set_cipher_list" kind="function" type="int(SSL*, const char*)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_CTX_set_default_verify_paths" user_name="SSL_CTX_set_default_verify_paths" kind="function" type="int(SSL_CTX*)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_CTX_set_default_verify_dir" user_name="SSL_CTX_set_default_verify_dir" kind="function" type="int(SSL_CTX*)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_CTX_set_default_verify_file" user_name="SSL_CTX_set_default_verify_file" kind="function" type="int(SSL_CTX*)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_CTX_check_private_key" user_name="SSL_CTX_check_private_key" kind="function" type="int(const SSL_CTX*)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_check_private_key" user_name="SSL_check_private_key" kind="function" type="int(const SSL*)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="SSL_get_peer_certificate" user_name="SSL_get_peer_certificate" kind="function" type="X509 *(const SSL*)" header="ssl.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="BIO_ctrl" user_name="BIO_ctrl" kind="function" type="long(BIO *, int, long, void *)" header="bio.h">
        <properties>
            <property kind="predef">EVP_PKEY_generic_ctx_arg_1</property>
        </properties>
    </tag>

    <tag id="BIO_push" user_name="BIO_push" kind="function" type="BIO*(BIO *, BIO*)" header="bio.h">
        <properties>
            <property kind="predef">BIO_push</property>
        </properties>
    </tag>

    <tag id="BIO_pop" user_name="BIO_pop" kind="function" type="BIO*(BIO *)" header="bio.h">
        <properties>
            <property kind="predef">BIO_pop</property>
        </properties>
    </tag>
</tags>
